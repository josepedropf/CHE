# 1 "main.c"
# 1 "<built-in>"
#define __STDC__
#define __STDC_VERSION__
#define __STDC_UTF_16__
#define __STDC_UTF_32__
#define __STDC_HOSTED__
#define __GNUC__
#define __GNUC_MINOR__
#define __GNUC_PATCHLEVEL__
#define __VERSION__
#define __ATOMIC_RELAXED
#define __ATOMIC_SEQ_CST
#define __ATOMIC_ACQUIRE
#define __ATOMIC_RELEASE
#define __ATOMIC_ACQ_REL
#define __ATOMIC_CONSUME
#define __pic__
#define __PIC__
#define __FINITE_MATH_ONLY__
#define __SIZEOF_INT__
#define __SIZEOF_LONG__
#define __SIZEOF_LONG_LONG__
#define __SIZEOF_SHORT__
#define __SIZEOF_FLOAT__
#define __SIZEOF_DOUBLE__
#define __SIZEOF_LONG_DOUBLE__
#define __SIZEOF_SIZE_T__
#define __CHAR_BIT__
#define __BIGGEST_ALIGNMENT__
#define __ORDER_LITTLE_ENDIAN__
#define __ORDER_BIG_ENDIAN__
#define __ORDER_PDP_ENDIAN__
#define __BYTE_ORDER__
#define __FLOAT_WORD_ORDER__
#define __SIZEOF_POINTER__
#define __SIZE_TYPE__
#define __PTRDIFF_TYPE__
#define __WCHAR_TYPE__
#define __WINT_TYPE__
#define __INTMAX_TYPE__
#define __UINTMAX_TYPE__
#define __CHAR16_TYPE__
#define __CHAR32_TYPE__
#define __SIG_ATOMIC_TYPE__
#define __INT8_TYPE__
#define __INT16_TYPE__
#define __INT32_TYPE__
#define __INT64_TYPE__
#define __UINT8_TYPE__
#define __UINT16_TYPE__
#define __UINT32_TYPE__
#define __UINT64_TYPE__
#define __INT_LEAST8_TYPE__
#define __INT_LEAST16_TYPE__
#define __INT_LEAST32_TYPE__
#define __INT_LEAST64_TYPE__
#define __UINT_LEAST8_TYPE__
#define __UINT_LEAST16_TYPE__
#define __UINT_LEAST32_TYPE__
#define __UINT_LEAST64_TYPE__
#define __INT_FAST8_TYPE__
#define __INT_FAST16_TYPE__
#define __INT_FAST32_TYPE__
#define __INT_FAST64_TYPE__
#define __UINT_FAST8_TYPE__
#define __UINT_FAST16_TYPE__
#define __UINT_FAST32_TYPE__
#define __UINT_FAST64_TYPE__
#define __INTPTR_TYPE__
#define __UINTPTR_TYPE__
#define __has_include
#define __has_include_next
#define __GXX_ABI_VERSION
#define __SCHAR_MAX__
#define __SHRT_MAX__
#define __INT_MAX__
#define __LONG_MAX__
#define __LONG_LONG_MAX__
#define __WCHAR_MAX__
#define __WCHAR_MIN__
#define __WINT_MAX__
#define __WINT_MIN__
#define __PTRDIFF_MAX__
#define __SIZE_MAX__
#define __INTMAX_MAX__
#define __INTMAX_C
#define __UINTMAX_MAX__
#define __UINTMAX_C
#define __SIG_ATOMIC_MAX__
#define __SIG_ATOMIC_MIN__
#define __INT8_MAX__
#define __INT16_MAX__
#define __INT32_MAX__
#define __INT64_MAX__
#define __UINT8_MAX__
#define __UINT16_MAX__
#define __UINT32_MAX__
#define __UINT64_MAX__
#define __INT_LEAST8_MAX__
#define __INT8_C
#define __INT_LEAST16_MAX__
#define __INT16_C
#define __INT_LEAST32_MAX__
#define __INT32_C
#define __INT_LEAST64_MAX__
#define __INT64_C
#define __UINT_LEAST8_MAX__
#define __UINT8_C
#define __UINT_LEAST16_MAX__
#define __UINT16_C
#define __UINT_LEAST32_MAX__
#define __UINT32_C
#define __UINT_LEAST64_MAX__
#define __UINT64_C
#define __INT_FAST8_MAX__
#define __INT_FAST16_MAX__
#define __INT_FAST32_MAX__
#define __INT_FAST64_MAX__
#define __UINT_FAST8_MAX__
#define __UINT_FAST16_MAX__
#define __UINT_FAST32_MAX__
#define __UINT_FAST64_MAX__
#define __INTPTR_MAX__
#define __UINTPTR_MAX__
#define __GCC_IEC_559
#define __GCC_IEC_559_COMPLEX
#define __FLT_EVAL_METHOD__
#define __DEC_EVAL_METHOD__
#define __FLT_RADIX__
#define __FLT_MANT_DIG__
#define __FLT_DIG__
#define __FLT_MIN_EXP__
#define __FLT_MIN_10_EXP__
#define __FLT_MAX_EXP__
#define __FLT_MAX_10_EXP__
#define __FLT_DECIMAL_DIG__
#define __FLT_MAX__
#define __FLT_MIN__
#define __FLT_EPSILON__
#define __FLT_DENORM_MIN__
#define __FLT_HAS_DENORM__
#define __FLT_HAS_INFINITY__
#define __FLT_HAS_QUIET_NAN__
#define __DBL_MANT_DIG__
#define __DBL_DIG__
#define __DBL_MIN_EXP__
#define __DBL_MIN_10_EXP__
#define __DBL_MAX_EXP__
#define __DBL_MAX_10_EXP__
#define __DBL_DECIMAL_DIG__
#define __DBL_MAX__
#define __DBL_MIN__
#define __DBL_EPSILON__
#define __DBL_DENORM_MIN__
#define __DBL_HAS_DENORM__
#define __DBL_HAS_INFINITY__
#define __DBL_HAS_QUIET_NAN__
#define __LDBL_MANT_DIG__
#define __LDBL_DIG__
#define __LDBL_MIN_EXP__
#define __LDBL_MIN_10_EXP__
#define __LDBL_MAX_EXP__
#define __LDBL_MAX_10_EXP__
#define __DECIMAL_DIG__
#define __LDBL_MAX__
#define __LDBL_MIN__
#define __LDBL_EPSILON__
#define __LDBL_DENORM_MIN__
#define __LDBL_HAS_DENORM__
#define __LDBL_HAS_INFINITY__
#define __LDBL_HAS_QUIET_NAN__
#define __DEC32_MANT_DIG__
#define __DEC32_MIN_EXP__
#define __DEC32_MAX_EXP__
#define __DEC32_MIN__
#define __DEC32_MAX__
#define __DEC32_EPSILON__
#define __DEC32_SUBNORMAL_MIN__
#define __DEC64_MANT_DIG__
#define __DEC64_MIN_EXP__
#define __DEC64_MAX_EXP__
#define __DEC64_MIN__
#define __DEC64_MAX__
#define __DEC64_EPSILON__
#define __DEC64_SUBNORMAL_MIN__
#define __DEC128_MANT_DIG__
#define __DEC128_MIN_EXP__
#define __DEC128_MAX_EXP__
#define __DEC128_MIN__
#define __DEC128_MAX__
#define __DEC128_EPSILON__
#define __DEC128_SUBNORMAL_MIN__
#define __REGISTER_PREFIX__
#define __USER_LABEL_PREFIX__
#define __GNUC_STDC_INLINE__
#define __NO_INLINE__
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8
#define __GCC_ATOMIC_BOOL_LOCK_FREE
#define __GCC_ATOMIC_CHAR_LOCK_FREE
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE
#define __GCC_ATOMIC_SHORT_LOCK_FREE
#define __GCC_ATOMIC_INT_LOCK_FREE
#define __GCC_ATOMIC_LONG_LOCK_FREE
#define __GCC_ATOMIC_LLONG_LOCK_FREE
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL
#define __GCC_ATOMIC_POINTER_LOCK_FREE
#define __PRAGMA_REDEFINE_EXTNAME
#define __SIZEOF_INT128__
#define __SIZEOF_WCHAR_T__
#define __SIZEOF_WINT_T__
#define __SIZEOF_PTRDIFF_T__
#define __amd64
#define __amd64__
#define __x86_64
#define __x86_64__
#define __ATOMIC_HLE_ACQUIRE
#define __ATOMIC_HLE_RELEASE
#define __k8
#define __k8__
#define __code_model_medium__
#define __MMX__
#define __SSE__
#define __SSE2__
#define __FXSR__
#define __SSE_MATH__
#define __SSE2_MATH__
#define __SEH__
#define __stdcall
#define __fastcall
#define __thiscall
#define __cdecl
#define _stdcall
#define _fastcall
#define _thiscall
#define _cdecl
#define __GXX_MERGED_TYPEINFO_NAMES
#define __GXX_TYPEINFO_EQUALITY_INLINE
#define __MSVCRT__
#define __MINGW32__
#define _WIN32
#define __WIN32
#define __WIN32__
#define WIN32
#define __WINNT
#define __WINNT__
#define WINNT
#define _INTEGRAL_MAX_BITS
#define __MINGW64__
#define __WIN64
#define __WIN64__
#define WIN64
#define _WIN64
#define __declspec
#define __DECIMAL_BID_FORMAT__
# 1 "<command-line>"
#define _REENTRANT
# 1 "main.c"
# 66 "main.c"
#define TIMMING



#define READ



#define VERIFY





#define ACCURACY




#define NORMALIZE


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 1 3






#define _INC_STDIO

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/crtdefs.h" 1 3







#define _INC_CRTDEFS

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3







#define _INC__MINGW_H



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 1 3







#define _INC_CRTDEFS_MACRO

#define __STRINGIFY
#define __MINGW64_STRINGIFY


#define __MINGW64_VERSION_MAJOR
#define __MINGW64_VERSION_MINOR







#define __MINGW64_VERSION_RC

#define __MINGW64_VERSION_STR




#define __MINGW64_VERSION_STATE





#define __MINGW32_MAJOR_VERSION
#define __MINGW32_MINOR_VERSION
# 46 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
             
#undef _
#define _



#define __MINGW_USE_UNDERSCORE_PREFIX

#undef _
             
# 67 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
#define __MINGW_IMP_SYMBOL
#define __MINGW_IMP_LSYMBOL
#define __MINGW_USYMBOL
#define __MINGW_LSYMBOL
# 98 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
#define _M_AMD64
#define _M_X64
# 138 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
#undef __MINGW_EXTENSION





#define __MINGW_EXTENSION







#define __C89_NAMELESS
#define __C89_NAMELESSSTRUCTNAME
#define __C89_NAMELESSSTRUCTNAME1
#define __C89_NAMELESSSTRUCTNAME2
#define __C89_NAMELESSSTRUCTNAME3
#define __C89_NAMELESSSTRUCTNAME4
#define __C89_NAMELESSSTRUCTNAME5
#define __C89_NAMELESSUNIONNAME
#define __C89_NAMELESSUNIONNAME1
#define __C89_NAMELESSUNIONNAME2
#define __C89_NAMELESSUNIONNAME3
#define __C89_NAMELESSUNIONNAME4
#define __C89_NAMELESSUNIONNAME5
#define __C89_NAMELESSUNIONNAME6
#define __C89_NAMELESSUNIONNAME7
#define __C89_NAMELESSUNIONNAME8



#define __GNU_EXTENSION




#define __MINGW_HAVE_ANSI_C99_PRINTF
#define __MINGW_HAVE_WIDE_C99_PRINTF
#define __MINGW_HAVE_ANSI_C99_SCANF
#define __MINGW_HAVE_WIDE_C99_SCANF




#define __MINGW_POISON_NAME





#define __MSABI_LONG






#define __MINGW_GCC_VERSION







#define __MINGW_GNUC_PREREQ
# 216 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
#define __MINGW_MSC_PREREQ
# 228 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_mac.h" 3
#define __MINGW_ATTRIB_DEPRECATED_STR


#define __MINGW_SEC_WARN_STR


#define __MINGW_MSVC2005_DEPREC_STR



#define __MINGW_ATTRIB_DEPRECATED_MSVC2005






#define __MINGW_ATTRIB_DEPRECATED_SEC_WARN





#define __MINGW_MS_PRINTF


#define __MINGW_MS_SCANF


#define __MINGW_GNU_PRINTF


#define __MINGW_GNU_SCANF


#undef __mingw_ovr




#define __mingw_ovr
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 1 3







#define _INC_MINGW_SECAPI
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#undef _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
#undef _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
#undef _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
#undef _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
#undef _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY
#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY
#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY


#define __MINGW_CRT_NAME_CONCAT1
#define __MINGW_CRT_NAME_CONCAT2
#define __MINGW_CRT_NAME_INSECURE
#define __MINGW_CRT_NAME_INSECURE_DEF
# 69 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#define __CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_0_2_
# 86 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#define __CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY_0_3_
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#define __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_0_2_
# 176 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#define __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT_0_3_

#define __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT_1_4_
# 197 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
#define __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY_0_3_
# 14 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 26 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __LONG32







#undef __stdcall

#define __stdcall
# 53 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __MINGW_IMPORT


#undef __USE_CRTIMP

#define __USE_CRTIMP


#define _CRTIMP




#define __DECLSPEC_SUPPORTED
# 79 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define USE___UUIDOF



#define _inline
# 93 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __CRT_INLINE






#define __MINGW_INTRIN_INLINE




#undef __CRT__NO_INLINE
#define __CRT__NO_INLINE







#define __UNUSED_PARAM
# 129 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __restrict_arr
# 145 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __MINGW_ATTRIB_NORETURN
#define __MINGW_ATTRIB_CONST
# 156 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __MINGW_ATTRIB_MALLOC
#define __MINGW_ATTRIB_PURE
# 170 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __MINGW_ATTRIB_NONNULL





#define __MINGW_ATTRIB_UNUSED





#define __MINGW_ATTRIB_USED
#define __MINGW_ATTRIB_DEPRECATED
# 193 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __MINGW_NOTHROW







#define __MINGW_ATTRIB_NO_OPTIMIZE





#define __MINGW_PRAGMA_PARAM






#define __MINGW_BROKEN_INTERFACE





#define __MSVCRT_VERSION__




#define WINVER



#define _WIN32_WINNT



#define _INT128_DEFINED

#define __int8
#define __int16
#define __int32
#define __int64
# 252 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __ptr32
#define __ptr64

#define __unaligned


#define __w64




#define __forceinline
# 275 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __nothrow



#undef _CRT_PACKING
#define _CRT_PACKING

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/vadefs.h" 1 3






#define _INC_VADEFS

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 678 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define MINGW_SDK_INIT







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3


#define __MINGW_HAS_DXSDK


#define MINGW_HAS_DDRAW_H
#define MINGW_DDRAW_VERSION
# 687 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3

#define MINGW_DDK_H

#define MINGW_HAS_DDK_H
# 688 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/vadefs.h" 3
#define __GNUC_VA_LIST
  typedef __builtin_va_list __gnuc_va_list;




#define _VA_LIST_DEFINED

  typedef __gnuc_va_list va_list;
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/vadefs.h" 3
#define _ADDRESSOF





#define _crt_va_start
#define _crt_va_arg
#define _crt_va_end
#define _crt_va_copy
# 101 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/vadefs.h" 3
#pragma pack(pop)
# 283 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)



#define __CRT_STRINGIZE
#define _CRT_STRINGIZE



#define __CRT_WIDE
#define _CRT_WIDE



#define _W64






#define _CRTIMP_NOIA64




#define _CRTIMP2



#define _CRTIMP_ALTERNATIVE
#define _CRT_ALTERNATIVE_IMPORTED



#define _MRTIMP2
# 329 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define _DLL



#define _MT



#define _MCRTIMP



#define _CRTIMP_PURE



#define _PGLOBAL



#define _AGLOBAL


#define _SECURECRT_FILL_BUFFER_PATTERN
#define _CRT_DEPRECATE_TEXT


#define _CRT_INSECURE_DEPRECATE_MEMORY



#define _CRT_INSECURE_DEPRECATE_GLOBALS



#define _CRT_MANAGED_HEAP_DEPRECATE



#define _CRT_OBSOLETE





#define _SIZE_T_DEFINED
#undef size_t

__extension__ typedef unsigned long long size_t;






#define _SSIZE_T_DEFINED
#undef ssize_t

__extension__ typedef long long ssize_t;






#define _INTPTR_T_DEFINED

#define __intptr_t_defined
#undef intptr_t

__extension__ typedef long long intptr_t;







#define _UINTPTR_T_DEFINED

#define __uintptr_t_defined
#undef uintptr_t

__extension__ typedef unsigned long long uintptr_t;







#define _PTRDIFF_T_DEFINED

#define _PTRDIFF_T_
#undef ptrdiff_t

__extension__ typedef long long ptrdiff_t;







#define _WCHAR_T_DEFINED

typedef unsigned short wchar_t;




#define _WCTYPE_T_DEFINED

#define _WINT_T
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 462 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define _ERRCODE_DEFINED
typedef int errno_t;



#define _TIME32_T_DEFINED
typedef long __time32_t;



#define _TIME64_T_DEFINED
__extension__ typedef long long __time64_t;



#define _TIME_T_DEFINED



typedef __time64_t time_t;




#define _CONST_RETURN




#define UNALIGNED
# 501 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define _CRT_ALIGN






#define __CRTDECL


#define _ARGMAX


#define _TRUNCATE



#define _CRT_UNUSED
# 554 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#undef _CRT_glob
#define _CRT_glob
# 571 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __ANONYMOUS_DEFINED
#define _ANONYMOUS_UNION
#define _ANONYMOUS_STRUCT

#define _UNION_NAME
#define _STRUCT_NAME
# 596 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define DUMMYUNIONNAME
#define DUMMYUNIONNAME1
#define DUMMYUNIONNAME2
#define DUMMYUNIONNAME3
#define DUMMYUNIONNAME4
#define DUMMYUNIONNAME5
#define DUMMYUNIONNAME6
#define DUMMYUNIONNAME7
#define DUMMYUNIONNAME8
#define DUMMYUNIONNAME9
# 618 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define DUMMYSTRUCTNAME
#define DUMMYSTRUCTNAME1
#define DUMMYSTRUCTNAME2
#define DUMMYSTRUCTNAME3
#define DUMMYSTRUCTNAME4
#define DUMMYSTRUCTNAME5
# 646 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
#define __CRT_UUID_DECL
# 656 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);






#pragma pack(pop)
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/crtdefs.h" 2 3







#define _CRTNOALIAS



#define _CRTRESTRICT



typedef size_t rsize_t;
#define _RSIZE_T_DEFINED
# 138 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/crtdefs.h" 3
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_4
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_1
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_2
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_3
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_2_0
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_SPLITPATH



struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;


#define _TAGLC_ID_DEFINED
typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;



#define _THREADLOCALEINFO
typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;



#define __crt_typefix
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_print_push.h" 1 3
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)





#define BUFSIZ
#define _NFILE
#define _NSTREAM_
#define _IOB_ENTRIES
#define EOF


  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;
#define _FILE_DEFINED






#define _P_tmpdir
#define _wP_tmpdir


#define L_tmpnam






#define SEEK_CUR
#define SEEK_END
#define SEEK_SET

#define STDIN_FILENO
#define STDOUT_FILENO
#define STDERR_FILENO

#define FILENAME_MAX
#define FOPEN_MAX
#define _SYS_OPEN
#define TMP_MAX
# 76 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
#define NULL



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3

#define _OFF_T_DEFINED

#define _OFF_T_
  typedef long _off_t;

  typedef long off32_t;




#define _OFF64_T_DEFINED
  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;





#define _FILE_OFFSET_BITS_SET_OFFT




typedef off32_t off_t;
# 81 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
#define _iob
# 99 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
#define _FPOS_T_DEFINED
#undef _FPOSOFF


  __extension__ typedef long long fpos_t;
#define _FPOSOFF
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
#define _STDSTREAM_DEFINED

#define stdin
#define stdout
#define stderr


#define _IOREAD
#define _IOWRT

#define _IOFBF
#define _IOLBF
#define _IONBF

#define _IOMYBUF
#define _IOEOF
#define _IOERR
#define _IOSTRG
#define _IORW




#define _TWO_DIGIT_EXPONENT


extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 367 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
#undef __MINGW_PRINTF_FORMAT
#undef __MINGW_SCANF_FORMAT
#define __MINGW_PRINTF_FORMAT
#define __MINGW_SCANF_FORMAT
#undef __builtin_vsnprintf
#undef __builtin_vsprintf




  int __attribute__((__cdecl__)) fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) printf(const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;

  int __attribute__((__cdecl__)) vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf(const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;

  int __attribute__((__cdecl__)) fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) scanf(const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;





  int __attribute__((__cdecl__)) __ms_vscanf(const char * __restrict__ Format, va_list argp);
  int __attribute__((__cdecl__)) __ms_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  int __attribute__((__cdecl__)) __ms_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vsscanf (const char * __restrict__ __source, const char * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vsscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (1)))
  int vscanf(const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vscanf (__format, __local_argv);
  }




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);



  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);


#define _FILE_OFFSET_BITS_SET_FSEEKO





  long __attribute__((__cdecl__)) ftell(FILE *_File);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);


#define _FILE_OFFSET_BITS_SET_FTELLO





  __extension__ int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);

#define _CRT_PERROR_DEFINED
  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);

#define popen
#define pclose

  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);

#define _CRT_DIRECTORY_DEFINED
  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;




       
       
#undef snprintf
#undef vsnprintf
  int __attribute__((__cdecl__)) __ms_vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg)
    ;

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (3)))
  int vsnprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, va_list __local_argv)
  {
    return __ms_vsnprintf (__stream, __n, __format, __local_argv);
  }

  int __attribute__((__cdecl__)) __ms_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__ ((__nonnull__ (3)))
int snprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __ms_vsnprintf (__stream, __n, __format, __local_argv);
  __builtin_va_end( __local_argv );
  return __retval;
}


       
       


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);


#define _WSTDIO_DEFINED

                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);

                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 725 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
  int __attribute__((__cdecl__)) fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) wscanf(const wchar_t * __restrict__ _Format,...) ;

  int __attribute__((__cdecl__)) __ms_vwscanf (const wchar_t * __restrict__ , va_list);
  int __attribute__((__cdecl__)) __ms_vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int __attribute__((__cdecl__)) __ms_vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfwscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vswscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (1)))
  int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vwscanf (__format, __local_argv);
  }



  int __attribute__((__cdecl__)) fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) wprintf(const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);



#define WEOF





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;




       
       
#undef snwprintf
#undef vsnwprintf
  int __attribute__((__cdecl__)) __ms_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int __attribute__((__cdecl__)) __ms_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...)
  {
    int r;
    va_list argp;
    __builtin_va_start (argp, format);
    r = _vsnwprintf (s, n, format, argp);
    __builtin_va_end (argp);
    return r;
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int __attribute__((__cdecl__)) vsnwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, va_list arg)
  {
    return _vsnwprintf(s,n,format,arg);
  }
       
       



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/swprintf.inl" 1 3







#define _INC_SWPRINTF_INL



#undef __mingw_ovr

#define __mingw_ovr






static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}
# 825 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3
# 834 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;


#define _CRT_WPERROR_DEFINED
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);

#define wpopen


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);

#undef _CRT_GETPUTWCHAR_NOINLINE


#define getwchar
#define putwchar





#define getwc
#define putwc
#define _putwc_nolock
#define _getwc_nolock


#define _STDIO_DEFINED


#define _fgetc_nolock
#define _fputc_nolock
#define _getc_nolock
#define _putc_nolock
#define _getchar_nolock
#define _putchar_nolock
#define _getwchar_nolock
#define _putwchar_nolock

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);


#define P_tmpdir
#define SYS_OPEN

  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;



#define __MINGW_MBWC_CONVERT_DEFINED
# 926 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 940 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 949 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);







#pragma pack(pop)

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 1 3






#define _INC_STDIO_S

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 2 3
# 960 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_print_pop.h" 1 3
# 962 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h" 2 3
# 89 "main.c" 2

# 1 "params.h" 1

#define KNN_PARAMS_H

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 3 4
#define _FLOAT_H___


#undef FLT_RADIX
#define FLT_RADIX


#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG
#define DBL_MANT_DIG
#define LDBL_MANT_DIG
# 50 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 3 4
#undef FLT_DIG
#undef DBL_DIG
#undef LDBL_DIG
#define FLT_DIG
#define DBL_DIG
#define LDBL_DIG


#undef FLT_MIN_EXP
#undef DBL_MIN_EXP
#undef LDBL_MIN_EXP
#define FLT_MIN_EXP
#define DBL_MIN_EXP
#define LDBL_MIN_EXP






#undef FLT_MIN_10_EXP
#undef DBL_MIN_10_EXP
#undef LDBL_MIN_10_EXP
#define FLT_MIN_10_EXP
#define DBL_MIN_10_EXP
#define LDBL_MIN_10_EXP


#undef FLT_MAX_EXP
#undef DBL_MAX_EXP
#undef LDBL_MAX_EXP
#define FLT_MAX_EXP
#define DBL_MAX_EXP
#define LDBL_MAX_EXP






#undef FLT_MAX_10_EXP
#undef DBL_MAX_10_EXP
#undef LDBL_MAX_10_EXP
#define FLT_MAX_10_EXP
#define DBL_MAX_10_EXP
#define LDBL_MAX_10_EXP





#undef FLT_MAX
#undef DBL_MAX
#undef LDBL_MAX
#define FLT_MAX
#define DBL_MAX
#define LDBL_MAX



#undef FLT_EPSILON
#undef DBL_EPSILON
#undef LDBL_EPSILON
#define FLT_EPSILON
#define DBL_EPSILON
#define LDBL_EPSILON


#undef FLT_MIN
#undef DBL_MIN
#undef LDBL_MIN
#define FLT_MIN
#define DBL_MIN
#define LDBL_MIN



#undef FLT_ROUNDS
#define FLT_ROUNDS
# 144 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 3 4
#undef FLT_EVAL_METHOD
#define FLT_EVAL_METHOD
# 155 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 3 4
#undef DECIMAL_DIG
#define DECIMAL_DIG
# 278 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 1 3 4
# 119 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 3 4
#define _MINGW_FLOAT_H_
# 132 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 3 4
#define _MCW_DN
#define _MCW_EM
#define _MCW_IC
#define _MCW_RC
#define _MCW_PC


#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG
#define DBL_MANT_DIG
#define LDBL_MANT_DIG
# 160 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 3 4
#undef FLT_EVAL_METHOD
#define FLT_EVAL_METHOD





#define _DN_SAVE
#define _DN_FLUSH
#define _EM_INVALID
#define _EM_DENORMAL
#define _EM_ZERODIVIDE
#define _EM_OVERFLOW
#define _EM_UNDERFLOW
#define _EM_INEXACT
#define _IC_AFFINE
#define _IC_PROJECTIVE
#define _RC_CHOP
#define _RC_UP
#define _RC_DOWN
#define _RC_NEAR
#define _PC_24
#define _PC_53
#define _PC_64





#define __MINGW_FPCLASS_DEFINED
#define _FPCLASS_SNAN
#define _FPCLASS_QNAN
#define _FPCLASS_NINF
#define _FPCLASS_NN
#define _FPCLASS_ND
#define _FPCLASS_NZ
#define _FPCLASS_PZ
#define _FPCLASS_PD
#define _FPCLASS_PN
#define _FPCLASS_PINF



#define _SW_UNEMULATED
#define _SW_SQRTNEG
#define _SW_STACKOVERFLOW
#define _SW_STACKUNDERFLOW


#define _FPE_INVALID
#define _FPE_DENORMAL
#define _FPE_ZERODIVIDE
#define _FPE_OVERFLOW
#define _FPE_UNDERFLOW
#define _FPE_INEXACT
#define _FPE_UNEMULATED
#define _FPE_SQRTNEG
#define _FPE_STACKOVERFLOW
#define _FPE_STACKUNDERFLOW
#define _FPE_EXPLICITGEN

#define CW_DEFAULT
#define MCW_PC
#define PC_24
#define PC_53
#define PC_64






#define _CW_DEFAULT
# 244 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 3 4
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _controlfp (unsigned int unNew, unsigned int unMask) ;
__attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _controlfp_s(unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _control87 (unsigned int unNew, unsigned int unMask);


__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _clearfp (void);
__attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _statusfp (void);
#define _clear87
#define _status87
# 264 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/float.h" 3 4
void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fpreset (void);
void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fpreset (void);


__attribute__ ((__dllimport__)) int * __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __fpecode(void);
#define _fpecode







#define _SIGN_DEFINED
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _chgsign (double _X);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _copysign (double _Number,double _Sign);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _logb (double);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _nextafter (double, double);
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _scalb (double, long);

__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _finite (double);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fpclass (double);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _isnan (double);

#define _copysignl
extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 278 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/float.h" 2 3 4
# 5 "params.h" 2


#define NUM_TRAINING_SAMPLES



#define NUM_TESTING_SAMPLES



#define NUM_FEATURES



#define NUM_CLASSES



#define K



#define DATA_TYPE
#define _DATA_TYPE


#define MAXFPVALUE







#define MINFPVALUE
# 51 "params.h"
#define CLASS_ID_TYPE
# 91 "main.c" 2
# 1 "types.h" 1


#define KNN_TYPES_H



typedef struct {
    float features[43];
    char classification_id;
} Point;

typedef struct {
    char classification_id;
    float distance;
} BestPoint;
# 92 "main.c" 2
# 1 "utils.h" 1

#define KNN_UTILS_H




char get_class_name(char class_id);

void verify_results(int num_new_points, const Point *new_points, const char *key);

int get_reference_score(double time_s, int num_points);

void initialize_known_points(int num_points, Point *known_points, int num_classes,
      int num_features);

void initialize_new_points(int num_new_points, Point *new_points, int num_features);

void show_point(Point point, int num_features);

void minmax(float *min, float *max, int num_points, Point *known_points,
   int num_features);

void minmax_normalize(float *min, float *max, int num_points, Point *points,
     int num_features);
# 93 "main.c" 2
# 1 "io.h" 1

#define KNN_IO_H







void read_data(int argc, char **argv,
               int *num_points, int *num_classes, int *num_new_points, int *k,
               Point **known_points, Point **new_points,
               char **key, int num_features);




void generate_random_data(int argc, char **argv,
                          int *num_points, int *num_classes, int *num_new_points, int *k,
                          Point **known_points, Point **new_points,
                          char **key, int num_features);
# 94 "main.c" 2
# 1 "knn.h" 1
# 16 "knn.h"
#define KNN_H




void initialize_best(BestPoint *best_points, int k, int num_features);

void update_best(float distance, char classID,
    BestPoint *best_points, int k);


void knn(Point new_point, Point *known_points, int num_points, BestPoint *best_points,
  int k, int num_features);

char classify(int k, BestPoint *best_points, int num_classes);

char classifyinstance(Point new_point, int k, BestPoint *best_points,
      int num_classes, Point *known_points, int num_points,
      int num_features);
# 95 "main.c" 2


# 1 "timer.h" 1

#define TIMER_H_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 1 3






#define _INC_STDLIB


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
#define _GCC_LIMITS_H_



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 168 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/limits.h" 1 3 4
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/limits.h" 3 4
#define _INC_LIMITS
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/limits.h" 3 4
#define PATH_MAX

#define CHAR_BIT
#define SCHAR_MIN
#define SCHAR_MAX
#define UCHAR_MAX

#define CHAR_MIN
#define CHAR_MAX

#define MB_LEN_MAX
#define SHRT_MIN
#define SHRT_MAX
#define USHRT_MAX
#define INT_MIN
#define INT_MAX
#define UINT_MAX
#define LONG_MIN
#define LONG_MAX
#define ULONG_MAX
#define LLONG_MAX
#define LLONG_MIN
#define ULLONG_MAX

#define _I8_MIN
#define _I8_MAX
#define _UI8_MAX

#define _I16_MIN
#define _I16_MAX
#define _UI16_MAX

#define _I32_MIN
#define _I32_MAX
#define _UI32_MAX


#undef LONG_LONG_MAX
#define LONG_LONG_MAX
#undef LONG_LONG_MIN
#define LONG_LONG_MIN
#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX


#define _I64_MIN
#define _I64_MAX
#define _UI64_MAX



#define SIZE_MAX







#define SSIZE_MAX
# 169 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 2 3 4
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/syslimits.h" 2 3 4
#undef _GCC_NEXT_LIMITS_H
# 35 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 2 3 4
# 60 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
#define _LIMITS_H___


#undef CHAR_BIT
#define CHAR_BIT







#undef SCHAR_MIN
#define SCHAR_MIN
#undef SCHAR_MAX
#define SCHAR_MAX


#undef UCHAR_MAX



#define UCHAR_MAX
# 96 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN
#undef SHRT_MAX
#define SHRT_MAX


#undef USHRT_MAX



#define USHRT_MAX



#undef INT_MIN
#define INT_MIN
#undef INT_MAX
#define INT_MAX


#undef UINT_MAX
#define UINT_MAX



#undef LONG_MIN
#define LONG_MIN
#undef LONG_MAX
#define LONG_MAX


#undef ULONG_MAX
#define ULONG_MAX



#undef LLONG_MIN
#define LLONG_MIN
#undef LLONG_MAX
#define LLONG_MAX


#undef ULLONG_MAX
#define ULLONG_MAX




#undef LONG_LONG_MIN
#define LONG_LONG_MIN
#undef LONG_LONG_MAX
#define LONG_LONG_MAX


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 2 3





#pragma pack(push,_CRT_PACKING)
# 34 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
#define EXIT_SUCCESS
#define EXIT_FAILURE


#define _ONEXIT_T_DEFINED

  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);


#define onexit_t




#define _DIV_T_DEFINED

  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;



#define _CRT_DOUBLE_DEC

#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()

#define _PTR_LD

  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;

       
#undef long

  typedef struct {
    long double x;
  } _LONGDOUBLE;

       

#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()


#define RAND_MAX


#define MB_CUR_MAX





  extern int * __imp___mb_cur_max;
#define __mb_cur_max


#define ___mb_cur_max_func


#define __max
#define __min

#define _MAX_PATH
#define _MAX_DRIVE
#define _MAX_DIR
#define _MAX_FNAME
#define _MAX_EXT

#define _OUT_TO_DEFAULT
#define _OUT_TO_STDERR
#define _OUT_TO_MSGBOX
#define _REPORT_ERRMODE

#define _WRITE_ABORT_MSG
#define _CALL_REPORTFAULT

#define _MAX_ENV

  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);


#define _CRT_ERRNO_DEFINED
  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);
#define errno
  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);
#define _doserrno
  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);




  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;
# 171 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
  extern int * __imp___argc;
#define __argc






  extern char *** __imp___argv;
#define __argv






  extern wchar_t *** __imp___wargv;
#define __wargv
# 199 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
  extern char *** __imp__environ;
#define _environ







  extern wchar_t *** __imp__wenviron;
#define _wenviron







  extern char ** __imp__pgmptr;
#define _pgmptr







  extern wchar_t ** __imp__wpgmptr;
#define _wpgmptr


  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);




  extern int * __imp__fmode;
#define _fmode


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);





  extern unsigned int * __imp__osplatform;
#define _osplatform







  extern unsigned int * __imp__osver;
#define _osver







  extern unsigned int * __imp__winver;
#define _winver







  extern unsigned int * __imp__winmajor;
#define _winmajor







  extern unsigned int * __imp__winminor;
#define _winminor



  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);


#define _countof
# 305 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
#define _CRT_TERMINATE_DEFINED
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));






       
#undef abort
  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       



  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);


#define _CRT_ABS_DEFINED
  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));

#define _CRT_ATOF_DEFINED
  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);

#define _CRT_ALGO_DEFINED
  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 404 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);

  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);
#define strtod



  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);

#define _CRT_SYSTEM_DEFINED
  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;


#define _CRT_ALLOCATION_DEFINED
  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);


       
       
#undef _aligned_free
#undef _aligned_malloc
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
       
       

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);



#define _WSTDLIB_DEFINED

  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
# 482 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);


  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;

#define _CRT_WSYSTEM_DEFINED
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);



#define _CVTBUFSIZE
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
       
       
#undef _lrotr
#undef _lrotl

  __extension__ unsigned long long __attribute__((__cdecl__)) _lrotl(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _lrotr(unsigned long long _Val,int _Shift);




       
       

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
       
       
#undef _rotl64
#undef _rotr64
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       
#undef _rotr
#undef _rotl
  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);


#define _WSTDLIBP_DEFINED
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 604 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
#define sys_errlist
#define sys_nerr
#define environ
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;


#define _CRT_SWAB_DEFINED
  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 665 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 3
#pragma pack(pop)

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 1 3






#define _INC_STDLIB_S

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 2 3
# 668 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/malloc.h" 1 3






#define _MALLOC_H_



#pragma pack(push,_CRT_PACKING)






#define _HEAP_MAXREQ
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/malloc.h" 3
#define _STATIC_ASSERT




#define _HEAPEMPTY
#define _HEAPOK
#define _HEAPBADBEGIN
#define _HEAPBADNODE
#define _HEAPEND
#define _HEAPBADPTR


#define _FREEENTRY
#define _USEDENTRY


#define _HEAPINFO_DEFINED

  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;



#define __DO_ALIGN_DEFINES



#define _MM_MALLOC_H_INCLUDED



       
       
#undef _aligned_free
#undef _aligned_malloc


#define _mm_free
#define _mm_malloc
# 95 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/malloc.h" 3
#undef __DO_ALIGN_DEFINES

       
       




void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);

#define _MAX_WAIT_MALLOC_CRT

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);

#undef _alloca
#define _alloca



  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);

#define _ALLOCA_S_THRESHOLD
#define _ALLOCA_S_STACK_MARKER
#define _ALLOCA_S_HEAP_MARKER




#define _ALLOCA_S_MARKER_SIZE



  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }


#undef _malloca
#define _malloca



#undef _FREEA_INLINE
#define _FREEA_INLINE


#undef _freea
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }



#undef alloca

#define alloca
# 209 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/malloc.h" 3
#pragma pack(pop)
# 669 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 5 "timer.h" 2


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 1 3






#define _WINDOWS_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdkddkver.h" 1 3
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdkddkver.h" 3
#define _INC_SDKDDKVER


#define _WIN32_WINNT_NT4
#define _WIN32_WINNT_WIN2K
#define _WIN32_WINNT_WINXP
#define _WIN32_WINNT_WS03
#define _WIN32_WINNT_WIN6
#define _WIN32_WINNT_VISTA
#define _WIN32_WINNT_WS08
#define _WIN32_WINNT_LONGHORN
#define _WIN32_WINNT_WIN7
#define _WIN32_WINNT_WIN8


#define _WIN32_IE_IE20
#define _WIN32_IE_IE30
#define _WIN32_IE_IE302
#define _WIN32_IE_IE40
#define _WIN32_IE_IE401
#define _WIN32_IE_IE50
#define _WIN32_IE_IE501
#define _WIN32_IE_IE55
#define _WIN32_IE_IE60
#define _WIN32_IE_IE60SP1
#define _WIN32_IE_IE60SP2
#define _WIN32_IE_IE70
#define _WIN32_IE_IE80


#define _WIN32_IE_NT4
#define _WIN32_IE_NT4SP1
#define _WIN32_IE_NT4SP2
#define _WIN32_IE_NT4SP3
#define _WIN32_IE_NT4SP4
#define _WIN32_IE_NT4SP5
#define _WIN32_IE_NT4SP6
#define _WIN32_IE_WIN98
#define _WIN32_IE_WIN98SE
#define _WIN32_IE_WINME
#define _WIN32_IE_WIN2K
#define _WIN32_IE_WIN2KSP1
#define _WIN32_IE_WIN2KSP2
#define _WIN32_IE_WIN2KSP3
#define _WIN32_IE_WIN2KSP4
#define _WIN32_IE_XP
#define _WIN32_IE_XPSP1
#define _WIN32_IE_XPSP2
#define _WIN32_IE_WS03
#define _WIN32_IE_WS03SP1
#define _WIN32_IE_WIN6
#define _WIN32_IE_LONGHORN
#define _WIN32_IE_WIN7



#define NTDDI_WIN2K


#define NTDDI_WIN2KSP1


#define NTDDI_WIN2KSP2


#define NTDDI_WIN2KSP3


#define NTDDI_WIN2KSP4



#define NTDDI_WINXP


#define NTDDI_WINXPSP1


#define NTDDI_WINXPSP2


#define NTDDI_WINXPSP3


#define NTDDI_WINXPSP4


#define NTDDI_WS03
#define NTDDI_WS03SP1
#define NTDDI_WS03SP2
#define NTDDI_WS03SP3
#define NTDDI_WS03SP4

#define NTDDI_WIN6
#define NTDDI_WIN6SP1
#define NTDDI_WIN6SP2
#define NTDDI_WIN6SP3
#define NTDDI_WIN6SP4

#define NTDDI_VISTA
#define NTDDI_VISTASP1
#define NTDDI_VISTASP2
#define NTDDI_VISTASP3
#define NTDDI_VISTASP4
#define NTDDI_LONGHORN

#define NTDDI_WS08
#define NTDDI_WS08SP2
#define NTDDI_WS08SP3
#define NTDDI_WS08SP4

#define NTDDI_WIN7
#define NTDDI_WIN8


#define OSVERSION_MASK
#define SPVERSION_MASK
#define SUBVERSION_MASK


#define OSVER
#define SPVER
#define SUBVER


#define NTDDI_VERSION_FROM_WIN32_WINNT2
#define NTDDI_VERSION_FROM_WIN32_WINNT
# 147 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdkddkver.h" 3
#define NTDDI_VERSION
# 172 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sdkddkver.h" 3
#define _WIN32_IE
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 3
#define _INC_WINDOWS
# 53 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 3
#define _AMD64_
# 65 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/excpt.h" 1 3






#define _INC_EXCPT



#pragma pack(push,_CRT_PACKING)





  struct _EXCEPTION_POINTERS;


#define EXCEPTION_DISPOSITION

#define ExceptionContinueExecution
#define ExceptionContinueSearch
#define ExceptionNestedException
#define ExceptionCollidedUnwind
#define ExceptionExecuteHandler
# 43 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/excpt.h" 3
  struct _EXCEPTION_RECORD;
  struct _CONTEXT;


#define GetExceptionCode
#define exception_code
#define GetExceptionInformation
#define exception_info
#define AbnormalTermination
#define abnormal_termination

  unsigned long __attribute__((__cdecl__)) _exception_code(void);
  void *__attribute__((__cdecl__)) _exception_info(void);
  int __attribute__((__cdecl__)) _abnormal_termination(void);

#define EXCEPTION_EXECUTE_HANDLER
#define EXCEPTION_CONTINUE_SEARCH
#define EXCEPTION_CONTINUE_EXECUTION


  typedef void (__attribute__((__cdecl__)) * _PHNDLR)(int);

  struct _XCPT_ACTION {
    unsigned long XcptNum;
    int SigNum;
    _PHNDLR XcptAction;
  };

  extern struct _XCPT_ACTION _XcptActTab[];
  extern int _XcptActTabCount;
  extern int _XcptActTabSize;
  extern int _First_FPE_Indx;
  extern int _Num_FPE;

  int __attribute__((__cdecl__)) __CppXcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);
  int __attribute__((__cdecl__)) _XcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);





  typedef int (*PEXCEPTION_HANDLER)(struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
# 108 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/excpt.h" 3
#define __try1







#define __except1
# 128 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/excpt.h" 3
#pragma pack(pop)
# 66 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/stdarg.h" 1 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 1 3 4
# 36 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 3 4
#define _STDARG_H
#define _ANSI_STDARG_H_

#undef __need___va_list
# 52 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 3 4
#define va_start
#define va_end
#define va_arg

#define va_copy

#define __va_copy
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 3 4
#define _VA_LIST_


#define _VA_LIST





#define _VA_LIST_T_H


#define __va_list__
# 140 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3 4







#define _INC_STDARG
# 141 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 2 3 4
# 2 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/stdarg.h" 2 3 4
# 67 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windef.h" 1 3





#define _WINDEF_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 1 3

#define _MINWINDEF_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 5 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winapifamily.h" 1 3






#define _INC_WINAPIFAMILY

#define WINAPI_PARTITION_DESKTOP
#define WINAPI_PARTITION_APP

#define WINAPI_FAMILY_APP
#define WINAPI_FAMILY_DESKTOP_APP




#define WINAPI_FAMILY


#define WINAPI_FAMILY_PARTITION
#define WINAPI_FAMILY_ONE_PARTITION
# 6 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 1 3





#define __specstrings

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sal.h" 1 3







#define SAL_HXX


#define __inner_checkReturn






#define __checkReturn

#define _In_
#define _In_opt_
#define _Out_

#define _Struct_size_bytes_
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 2 3
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 3
#define SAL__deref_in
#define SAL__deref_in_ecount
#define SAL__deref_in_bcount

#define SAL__deref_in_opt
#define SAL__deref_in_ecount_opt
#define SAL__deref_in_bcount_opt

#define SAL__deref_opt_in
#define SAL__deref_opt_in_ecount
#define SAL__deref_opt_in_bcount

#define SAL__deref_opt_in_opt
#define SAL__deref_opt_in_ecount_opt
#define SAL__deref_opt_in_bcount_opt

#define SAL__out_awcount
#define SAL__in_awcount



#define SAL__null
#define SAL__notnull
#define SAL__maybenull
#define SAL__readonly
#define SAL__notreadonly
#define SAL__maybereadonly
#define SAL__valid
#define SAL__notvalid
#define SAL__maybevalid
#define SAL__readableTo
#define SAL__elem_readableTo
#define SAL__byte_readableTo
#define SAL__writableTo
#define SAL__elem_writableTo
#define SAL__byte_writableTo
#define SAL__deref
#define SAL__pre
#define SAL__post
#define SAL__precond
#define SAL__postcond
#define SAL__exceptthat
#define SAL__execeptthat
#define SAL__inner_success
#define SAL__inner_checkReturn
#define SAL__inner_typefix
#define SAL__inner_override
#define SAL__inner_callback
#define SAL__inner_blocksOn
#define SAL__inner_fallthrough_dec
#define SAL__inner_fallthrough
#define __refparam
#define SAL__inner_control_entrypoint
#define SAL__inner_data_entrypoint

#define SAL__ecount
#define SAL__bcount

#define SAL__in
#define SAL__in_opt
#define SAL__in_nz
#define SAL__in_nz_opt
#define SAL__in_z
#define SAL__in_z_opt
#define SAL__in_ecount
#define SAL__in_ecount_nz
#define SAL__in_ecount_z
#define SAL__in_bcount
#define SAL__in_bcount_z
#define SAL__in_bcount_nz
#define SAL__in_ecount_opt
#define SAL__in_bcount_opt
#define SAL__in_ecount_z_opt
#define SAL__in_bcount_z_opt
#define SAL__in_ecount_nz_opt
#define SAL__in_bcount_nz_opt

#define SAL__out
#define SAL__out_ecount
#define SAL__out_z
#define SAL__out_nz
#define SAL__out_nz_opt
#define SAL__out_z_opt
#define SAL__out_ecount_part
#define SAL__out_ecount_full
#define SAL__out_ecount_nz
#define SAL__out_ecount_z
#define SAL__out_ecount_part_z
#define SAL__out_ecount_full_z
#define SAL__out_bcount
#define SAL__out_bcount_part
#define SAL__out_bcount_full
#define SAL__out_bcount_z
#define SAL__out_bcount_part_z
#define SAL__out_bcount_full_z
#define SAL__out_bcount_nz

#define SAL__inout
#define SAL__inout_ecount
#define SAL__inout_bcount
#define SAL__inout_ecount_part
#define SAL__inout_bcount_part
#define SAL__inout_ecount_full
#define SAL__inout_bcount_full
#define SAL__inout_z
#define SAL__inout_ecount_z
#define SAL__inout_bcount_z
#define SAL__inout_nz
#define SAL__inout_ecount_nz
#define SAL__inout_bcount_nz
#define SAL__ecount_opt
#define SAL__bcount_opt
#define SAL__out_opt
#define SAL__out_ecount_opt
#define SAL__out_bcount_opt
#define SAL__out_ecount_part_opt
#define SAL__out_bcount_part_opt
#define SAL__out_ecount_full_opt
#define SAL__out_bcount_full_opt
#define SAL__out_ecount_z_opt
#define SAL__out_bcount_z_opt
#define SAL__out_ecount_part_z_opt
#define SAL__out_bcount_part_z_opt
#define SAL__out_ecount_full_z_opt
#define SAL__out_bcount_full_z_opt
#define SAL__out_ecount_nz_opt
#define SAL__out_bcount_nz_opt
#define SAL__inout_opt
#define SAL__inout_ecount_opt
#define SAL__inout_bcount_opt
#define SAL__inout_ecount_part_opt
#define SAL__inout_bcount_part_opt
#define SAL__inout_ecount_full_opt
#define SAL__inout_bcount_full_opt
#define SAL__inout_z_opt
#define SAL__inout_ecount_z_opt
#define SAL__inout_bcount_z_opt
#define SAL__inout_nz_opt
#define SAL__inout_ecount_nz_opt
#define SAL__inout_bcount_nz_opt
#define SAL__deref_ecount
#define SAL__deref_bcount
#define SAL__deref_out
#define SAL__deref_out_ecount
#define SAL__deref_out_bcount
#define SAL__deref_out_ecount_part
#define SAL__deref_out_bcount_part
#define SAL__deref_out_ecount_full
#define SAL__deref_out_bcount_full
#define SAL__deref_out_z
#define SAL__deref_out_ecount_z
#define SAL__deref_out_bcount_z
#define SAL__deref_out_nz
#define SAL__deref_out_ecount_nz
#define SAL__deref_out_bcount_nz
#define SAL__deref_inout
#define SAL__deref_inout_ecount
#define SAL__deref_inout_bcount
#define SAL__deref_inout_ecount_part
#define SAL__deref_inout_bcount_part
#define SAL__deref_inout_ecount_full
#define SAL__deref_inout_bcount_full
#define SAL__deref_inout_z
#define SAL__deref_inout_ecount_z
#define SAL__deref_inout_bcount_z
#define SAL__deref_inout_nz
#define SAL__deref_inout_ecount_nz
#define SAL__deref_inout_bcount_nz
#define SAL__deref_ecount_opt
#define SAL__deref_bcount_opt
#define SAL__deref_out_opt
#define SAL__deref_out_ecount_opt
#define SAL__deref_out_bcount_opt
#define SAL__deref_out_ecount_part_opt
#define SAL__deref_out_bcount_part_opt
#define SAL__deref_out_ecount_full_opt
#define SAL__deref_out_bcount_full_opt
#define SAL__deref_out_z_opt
#define SAL__deref_out_ecount_z_opt
#define SAL__deref_out_bcount_z_opt
#define SAL__deref_out_nz_opt
#define SAL__deref_out_ecount_nz_opt
#define SAL__deref_out_bcount_nz_opt
#define SAL__deref_inout_opt
#define SAL__deref_inout_ecount_opt
#define SAL__deref_inout_bcount_opt
#define SAL__deref_inout_ecount_part_opt
#define SAL__deref_inout_bcount_part_opt
#define SAL__deref_inout_ecount_full_opt
#define SAL__deref_inout_bcount_full_opt
#define SAL__deref_inout_z_opt
#define SAL__deref_inout_ecount_z_opt
#define SAL__deref_inout_bcount_z_opt
#define SAL__deref_inout_nz_opt
#define SAL__deref_inout_ecount_nz_opt
#define SAL__deref_inout_bcount_nz_opt
#define SAL__deref_opt_ecount
#define SAL__deref_opt_bcount
#define SAL__deref_opt_out
#define SAL__deref_opt_out_z
#define SAL__deref_opt_out_ecount
#define SAL__deref_opt_out_bcount
#define SAL__deref_opt_out_ecount_part
#define SAL__deref_opt_out_bcount_part
#define SAL__deref_opt_out_ecount_full
#define SAL__deref_opt_out_bcount_full
#define SAL__deref_opt_inout
#define SAL__deref_opt_inout_ecount
#define SAL__deref_opt_inout_bcount
#define SAL__deref_opt_inout_ecount_part
#define SAL__deref_opt_inout_bcount_part
#define SAL__deref_opt_inout_ecount_full
#define SAL__deref_opt_inout_bcount_full
#define SAL__deref_opt_inout_z
#define SAL__deref_opt_inout_ecount_z
#define SAL__deref_opt_inout_bcount_z
#define SAL__deref_opt_inout_nz
#define SAL__deref_opt_inout_ecount_nz
#define SAL__deref_opt_inout_bcount_nz
#define SAL__deref_opt_ecount_opt
#define SAL__deref_opt_bcount_opt
#define SAL__deref_opt_out_opt
#define SAL__deref_opt_out_ecount_opt
#define SAL__deref_opt_out_bcount_opt
#define SAL__deref_opt_out_ecount_part_opt
#define SAL__deref_opt_out_bcount_part_opt
#define SAL__deref_opt_out_ecount_full_opt
#define SAL__deref_opt_out_bcount_full_opt
#define SAL__deref_opt_out_z_opt
#define SAL__deref_opt_out_ecount_z_opt
#define SAL__deref_opt_out_bcount_z_opt
#define SAL__deref_opt_out_nz_opt
#define SAL__deref_opt_out_ecount_nz_opt
#define SAL__deref_opt_out_bcount_nz_opt
#define SAL__deref_opt_inout_opt
#define SAL__deref_opt_inout_ecount_opt
#define SAL__deref_opt_inout_bcount_opt
#define SAL__deref_opt_inout_ecount_part_opt
#define SAL__deref_opt_inout_bcount_part_opt
#define SAL__deref_opt_inout_ecount_full_opt
#define SAL__deref_opt_inout_bcount_full_opt
#define SAL__deref_opt_inout_z_opt
#define SAL__deref_opt_inout_ecount_z_opt
#define SAL__deref_opt_inout_bcount_z_opt
#define SAL__deref_opt_inout_nz_opt
#define SAL__deref_opt_inout_ecount_nz_opt
#define SAL__deref_opt_inout_bcount_nz_opt

#define SAL__success
#define SAL__nullterminated
#define SAL__nullnullterminated
#define SAL__reserved
#define SAL__checkReturn
#define SAL__typefix
#define SAL__override
#define SAL__callback
#define SAL__format_string
#define SAL__blocksOn
#define SAL__control_entrypoint
#define SAL__data_entrypoint


#define __fallthrough



#define __analysis_assume



#define __CLR_OR_THIS_CALL



#define __CLRCALL_OR_CDECL



#define __STDC_WANT_SECURE_LIB__



#define _CRT_SECURE_NO_DEPRECATE
# 322 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 3
#define DECLSPEC_ADDRSAFE
# 7 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 2 3




#define STRICT
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 3
#define BASETYPES
  typedef unsigned long ULONG;
  typedef ULONG *PULONG;
  typedef unsigned short USHORT;
  typedef USHORT *PUSHORT;
  typedef unsigned char UCHAR;
  typedef UCHAR *PUCHAR;
  typedef char *PSZ;


#define MAX_PATH
# 48 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 3
#define FALSE



#define TRUE




#define IN



#define OUT



#define OPTIONAL



#undef far
#undef near
#undef pascal

#define far
#define near
#define pascal

#define cdecl

#define CDECL



#define CALLBACK



#define WINAPI


#define WINAPIV
#define APIENTRY
#define APIPRIVATE
#define PASCAL


#define WINAPI_INLINE


#undef FAR
#undef NEAR
#define FAR
#define NEAR


#define CONST



#define _DEF_WINBOOL_
typedef int WINBOOL;
       
#undef BOOL

  typedef int BOOL;

#define BOOL
typedef WINBOOL *PBOOL;
typedef WINBOOL *LPBOOL;
       
# 119 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 3
#undef BOOL


  typedef unsigned char BYTE;
  typedef unsigned short WORD;
  typedef unsigned long DWORD;
  typedef float FLOAT;
  typedef FLOAT *PFLOAT;
  typedef BYTE *PBYTE;
  typedef BYTE *LPBYTE;
  typedef int *PINT;
  typedef int *LPINT;
  typedef WORD *PWORD;
  typedef WORD *LPWORD;
  typedef long *LPLONG;
  typedef DWORD *PDWORD;
  typedef DWORD *LPDWORD;
  typedef void *LPVOID;

#define _LPCVOID_DEFINED
  typedef const void *LPCVOID;

  typedef int INT;
  typedef unsigned int UINT;
  typedef unsigned int *PUINT;


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 1 3






#define _WINNT_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_unicode.h" 1 3
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw_unicode.h" 3
#define _INC_CRT_UNICODE_MACROS
#define __MINGW_NAME_AW
#define __MINGW_NAME_AW_EXT
#define __MINGW_NAME_UAW
#define __MINGW_NAME_UAW_EXT
#define __MINGW_STRING_AW
#define __MINGW_PROCNAMEEXT_AW


#define __MINGW_TYPEDEF_AW

#define __MINGW_TYPEDEF_UAW
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ctype.h" 1 3






#define _INC_CTYPE
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ctype.h" 3
#define _CRT_CTYPEDATA_DEFINED



#define __PCTYPE_FUNC



#define __pctype_func







  extern unsigned short ** __imp__pctype;
#define _pctype







#define _CRT_WCTYPEDATA_DEFINED





  extern unsigned short ** __imp__wctype;
#define _wctype
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ctype.h" 3
#define __pwctype_func

  extern unsigned short ** __imp__pwctype;
#define _pwctype







  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);


#define _UPPER
#define _LOWER
#define _DIGIT
#define _SPACE

#define _PUNCT
#define _CONTROL
#define _BLANK
#define _HEX

#define _LEADBYTE
#define _ALPHA


#define _CTYPE_DEFINED

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);




#define _WCTYPE_DEFINED

  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


int __attribute__((__cdecl__)) iswblank(wint_t _C);
# 201 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ctype.h" 3
#define __chvalidchk
#define _chvalidchk_l
#define _ischartype_l
#define _isalpha_l
#define _isupper_l
#define _islower_l
#define _isdigit_l
#define _isxdigit_l
#define _isspace_l
#define _ispunct_l
#define _isalnum_l
#define _isprint_l
#define _isgraph_l
#define _iscntrl_l
#define _tolower
#define _toupper
#define __isascii
#define __toascii


#define _WCTYPE_INLINE_DEFINED

#undef _CRT_WCTYPE_NOINLINE

#define iswalpha
#define iswupper
#define iswlower
#define iswdigit
#define iswxdigit
#define iswspace
#define iswpunct
#define iswalnum
#define iswprint
#define iswgraph
#define iswcntrl
#define iswascii
#define _iswalpha_l
#define _iswupper_l
#define _iswlower_l
#define _iswdigit_l
#define _iswxdigit_l
#define _iswspace_l
#define _iswpunct_l
#define _iswalnum_l
#define _iswprint_l
#define _iswgraph_l
#define _iswcntrl_l



#define __iscsymf
#define __iscsym
#define __iswcsymf
#define __iswcsym
#define _iscsymf_l
#define _iscsym_l
#define _iswcsymf_l
#define _iswcsym_l
# 268 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ctype.h" 3
#define isascii
#define toascii
#define iscsymf
#define iscsym
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/apiset.h" 1 3






#define _API_SET_H_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/apiset.h" 2 3





#define API_SET_PREFIX_NAME_A
#define API_SET_PREFIX_NAME_U

#define API_SET_EXTENSION_NAME_A
#define API_SET_EXTENSION_NAME_U

#define API_SET_SCHEMA_NAME
#define API_SET_SECTION_NAME
#define API_SET_SCHEMA_SUFFIX

#define API_SET_SCHEMA_VERSION

#define API_SET_HELPER_NAME

#define API_SET_LOAD_SCHEMA_ORDINAL
#define API_SET_LOOKUP_ORDINAL
#define API_SET_RELEASE_SCHEMA_ORDINAL

#define API_SET_STRING_X
#define API_SET_STRING
#define API_SET_STRING_U_Y
#define API_SET_STRING_U_X
#define API_SET_STRING_U

#define API_SET_OVERRIDE
#define API_SET_LEGACY_OVERRIDE_DEF
#define API_SET_OVERRIDE_DEF

#define API_SET_PRIVATE

#undef API_SET
#undef API_SET_LIBRARY





#define API_SET_LIBRARY

#define API_SET
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

#define ANYSIZE_ARRAY

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 1 3





#define __specstrings
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 3
#define SAL__deref_in
#define SAL__deref_in_ecount
#define SAL__deref_in_bcount

#define SAL__deref_in_opt
#define SAL__deref_in_ecount_opt
#define SAL__deref_in_bcount_opt

#define SAL__deref_opt_in
#define SAL__deref_opt_in_ecount
#define SAL__deref_opt_in_bcount

#define SAL__deref_opt_in_opt
#define SAL__deref_opt_in_ecount_opt
#define SAL__deref_opt_in_bcount_opt

#define SAL__out_awcount
#define SAL__in_awcount



#define SAL__null
#define SAL__notnull
#define SAL__maybenull
#define SAL__readonly
#define SAL__notreadonly
#define SAL__maybereadonly
#define SAL__valid
#define SAL__notvalid
#define SAL__maybevalid
#define SAL__readableTo
#define SAL__elem_readableTo
#define SAL__byte_readableTo
#define SAL__writableTo
#define SAL__elem_writableTo
#define SAL__byte_writableTo
#define SAL__deref
#define SAL__pre
#define SAL__post
#define SAL__precond
#define SAL__postcond
#define SAL__exceptthat
#define SAL__execeptthat
#define SAL__inner_success
#define SAL__inner_checkReturn
#define SAL__inner_typefix
#define SAL__inner_override
#define SAL__inner_callback
#define SAL__inner_blocksOn
#define SAL__inner_fallthrough_dec
#define SAL__inner_fallthrough
#define __refparam
#define SAL__inner_control_entrypoint
#define SAL__inner_data_entrypoint

#define SAL__ecount
#define SAL__bcount

#define SAL__in
#define SAL__in_opt
#define SAL__in_nz
#define SAL__in_nz_opt
#define SAL__in_z
#define SAL__in_z_opt
#define SAL__in_ecount
#define SAL__in_ecount_nz
#define SAL__in_ecount_z
#define SAL__in_bcount
#define SAL__in_bcount_z
#define SAL__in_bcount_nz
#define SAL__in_ecount_opt
#define SAL__in_bcount_opt
#define SAL__in_ecount_z_opt
#define SAL__in_bcount_z_opt
#define SAL__in_ecount_nz_opt
#define SAL__in_bcount_nz_opt

#define SAL__out
#define SAL__out_ecount
#define SAL__out_z
#define SAL__out_nz
#define SAL__out_nz_opt
#define SAL__out_z_opt
#define SAL__out_ecount_part
#define SAL__out_ecount_full
#define SAL__out_ecount_nz
#define SAL__out_ecount_z
#define SAL__out_ecount_part_z
#define SAL__out_ecount_full_z
#define SAL__out_bcount
#define SAL__out_bcount_part
#define SAL__out_bcount_full
#define SAL__out_bcount_z
#define SAL__out_bcount_part_z
#define SAL__out_bcount_full_z
#define SAL__out_bcount_nz

#define SAL__inout
#define SAL__inout_ecount
#define SAL__inout_bcount
#define SAL__inout_ecount_part
#define SAL__inout_bcount_part
#define SAL__inout_ecount_full
#define SAL__inout_bcount_full
#define SAL__inout_z
#define SAL__inout_ecount_z
#define SAL__inout_bcount_z
#define SAL__inout_nz
#define SAL__inout_ecount_nz
#define SAL__inout_bcount_nz
#define SAL__ecount_opt
#define SAL__bcount_opt
#define SAL__out_opt
#define SAL__out_ecount_opt
#define SAL__out_bcount_opt
#define SAL__out_ecount_part_opt
#define SAL__out_bcount_part_opt
#define SAL__out_ecount_full_opt
#define SAL__out_bcount_full_opt
#define SAL__out_ecount_z_opt
#define SAL__out_bcount_z_opt
#define SAL__out_ecount_part_z_opt
#define SAL__out_bcount_part_z_opt
#define SAL__out_ecount_full_z_opt
#define SAL__out_bcount_full_z_opt
#define SAL__out_ecount_nz_opt
#define SAL__out_bcount_nz_opt
#define SAL__inout_opt
#define SAL__inout_ecount_opt
#define SAL__inout_bcount_opt
#define SAL__inout_ecount_part_opt
#define SAL__inout_bcount_part_opt
#define SAL__inout_ecount_full_opt
#define SAL__inout_bcount_full_opt
#define SAL__inout_z_opt
#define SAL__inout_ecount_z_opt
#define SAL__inout_bcount_z_opt
#define SAL__inout_nz_opt
#define SAL__inout_ecount_nz_opt
#define SAL__inout_bcount_nz_opt
#define SAL__deref_ecount
#define SAL__deref_bcount
#define SAL__deref_out
#define SAL__deref_out_ecount
#define SAL__deref_out_bcount
#define SAL__deref_out_ecount_part
#define SAL__deref_out_bcount_part
#define SAL__deref_out_ecount_full
#define SAL__deref_out_bcount_full
#define SAL__deref_out_z
#define SAL__deref_out_ecount_z
#define SAL__deref_out_bcount_z
#define SAL__deref_out_nz
#define SAL__deref_out_ecount_nz
#define SAL__deref_out_bcount_nz
#define SAL__deref_inout
#define SAL__deref_inout_ecount
#define SAL__deref_inout_bcount
#define SAL__deref_inout_ecount_part
#define SAL__deref_inout_bcount_part
#define SAL__deref_inout_ecount_full
#define SAL__deref_inout_bcount_full
#define SAL__deref_inout_z
#define SAL__deref_inout_ecount_z
#define SAL__deref_inout_bcount_z
#define SAL__deref_inout_nz
#define SAL__deref_inout_ecount_nz
#define SAL__deref_inout_bcount_nz
#define SAL__deref_ecount_opt
#define SAL__deref_bcount_opt
#define SAL__deref_out_opt
#define SAL__deref_out_ecount_opt
#define SAL__deref_out_bcount_opt
#define SAL__deref_out_ecount_part_opt
#define SAL__deref_out_bcount_part_opt
#define SAL__deref_out_ecount_full_opt
#define SAL__deref_out_bcount_full_opt
#define SAL__deref_out_z_opt
#define SAL__deref_out_ecount_z_opt
#define SAL__deref_out_bcount_z_opt
#define SAL__deref_out_nz_opt
#define SAL__deref_out_ecount_nz_opt
#define SAL__deref_out_bcount_nz_opt
#define SAL__deref_inout_opt
#define SAL__deref_inout_ecount_opt
#define SAL__deref_inout_bcount_opt
#define SAL__deref_inout_ecount_part_opt
#define SAL__deref_inout_bcount_part_opt
#define SAL__deref_inout_ecount_full_opt
#define SAL__deref_inout_bcount_full_opt
#define SAL__deref_inout_z_opt
#define SAL__deref_inout_ecount_z_opt
#define SAL__deref_inout_bcount_z_opt
#define SAL__deref_inout_nz_opt
#define SAL__deref_inout_ecount_nz_opt
#define SAL__deref_inout_bcount_nz_opt
#define SAL__deref_opt_ecount
#define SAL__deref_opt_bcount
#define SAL__deref_opt_out
#define SAL__deref_opt_out_z
#define SAL__deref_opt_out_ecount
#define SAL__deref_opt_out_bcount
#define SAL__deref_opt_out_ecount_part
#define SAL__deref_opt_out_bcount_part
#define SAL__deref_opt_out_ecount_full
#define SAL__deref_opt_out_bcount_full
#define SAL__deref_opt_inout
#define SAL__deref_opt_inout_ecount
#define SAL__deref_opt_inout_bcount
#define SAL__deref_opt_inout_ecount_part
#define SAL__deref_opt_inout_bcount_part
#define SAL__deref_opt_inout_ecount_full
#define SAL__deref_opt_inout_bcount_full
#define SAL__deref_opt_inout_z
#define SAL__deref_opt_inout_ecount_z
#define SAL__deref_opt_inout_bcount_z
#define SAL__deref_opt_inout_nz
#define SAL__deref_opt_inout_ecount_nz
#define SAL__deref_opt_inout_bcount_nz
#define SAL__deref_opt_ecount_opt
#define SAL__deref_opt_bcount_opt
#define SAL__deref_opt_out_opt
#define SAL__deref_opt_out_ecount_opt
#define SAL__deref_opt_out_bcount_opt
#define SAL__deref_opt_out_ecount_part_opt
#define SAL__deref_opt_out_bcount_part_opt
#define SAL__deref_opt_out_ecount_full_opt
#define SAL__deref_opt_out_bcount_full_opt
#define SAL__deref_opt_out_z_opt
#define SAL__deref_opt_out_ecount_z_opt
#define SAL__deref_opt_out_bcount_z_opt
#define SAL__deref_opt_out_nz_opt
#define SAL__deref_opt_out_ecount_nz_opt
#define SAL__deref_opt_out_bcount_nz_opt
#define SAL__deref_opt_inout_opt
#define SAL__deref_opt_inout_ecount_opt
#define SAL__deref_opt_inout_bcount_opt
#define SAL__deref_opt_inout_ecount_part_opt
#define SAL__deref_opt_inout_bcount_part_opt
#define SAL__deref_opt_inout_ecount_full_opt
#define SAL__deref_opt_inout_bcount_full_opt
#define SAL__deref_opt_inout_z_opt
#define SAL__deref_opt_inout_ecount_z_opt
#define SAL__deref_opt_inout_bcount_z_opt
#define SAL__deref_opt_inout_nz_opt
#define SAL__deref_opt_inout_ecount_nz_opt
#define SAL__deref_opt_inout_bcount_nz_opt

#define SAL__success
#define SAL__nullterminated
#define SAL__nullnullterminated
#define SAL__reserved
#define SAL__checkReturn
#define SAL__typefix
#define SAL__override
#define SAL__callback
#define SAL__format_string
#define SAL__blocksOn
#define SAL__control_entrypoint
#define SAL__data_entrypoint
# 24 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

#define __INTRINSIC_GROUP_WINNT
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 1 3
# 67 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define _INTRIN_MAC_
# 78 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildstos
# 92 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildlogicali
# 107 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildbittesti
# 119 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildpause





#define __buildint



#define __buildmemorybarrier
# 143 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildreadseg
# 159 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildwriteseg
# 172 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildbitscan
# 191 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildbittest
# 211 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildbittestand
# 228 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_inport
# 243 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_outport
# 258 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_inportstring
# 273 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_outportstring
# 287 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_readcr
# 302 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __build_writecr
# 317 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __buildmov
# 332 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define _ReadWriteBarrier
#define _ReadBarrier
#define _WriteBarrier
# 346 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __INTRINSIC_PROLOG




#define __INTRINSICS_USEINLINE
# 373 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#undef __INTRINSIC_GROUP_WINNT


#define __INTRINSIC_ONLYSPECIAL

#define __INTRINSIC_SPECIAL___faststorefence
#define __INTRINSIC_SPECIAL___int2c
#define __INTRINSIC_SPECIAL___stosb
#define __INTRINSIC_SPECIAL___stosd
#define __INTRINSIC_SPECIAL___stosq
#define __INTRINSIC_SPECIAL___stosw
#define __INTRINSIC_SPECIAL__InterlockedAnd
#define __INTRINSIC_SPECIAL__InterlockedAnd64
#define __INTRINSIC_SPECIAL__interlockedbittestandcomplement
#define __INTRINSIC_SPECIAL__interlockedbittestandcomplement64
#define __INTRINSIC_SPECIAL__interlockedbittestandreset
#define __INTRINSIC_SPECIAL__interlockedbittestandreset64
#define __INTRINSIC_SPECIAL__interlockedbittestandset
#define __INTRINSIC_SPECIAL__interlockedbittestandset64
#define __INTRINSIC_SPECIAL__InterlockedOr
#define __INTRINSIC_SPECIAL__InterlockedOr64
#define __INTRINSIC_SPECIAL__InterlockedXor
#define __INTRINSIC_SPECIAL__InterlockedXor64
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndComplement
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndComplement64
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndReset
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndReset64
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndSet
#define __INTRINSIC_SPECIAL_InterlockedBitTestAndSet64
#define __INTRINSIC_SPECIAL__InterlockedIncrement16
#define __INTRINSIC_SPECIAL__InterlockedDecrement16
#define __INTRINSIC_SPECIAL__InterlockedCompareExchange16
#define __INTRINSIC_SPECIAL__InterlockedIncrement
#define __INTRINSIC_SPECIAL__InterlockedDecrement
#define __INTRINSIC_SPECIAL__InterlockedExchange
#define __INTRINSIC_SPECIAL__InterlockedExchangeAdd
#define __INTRINSIC_SPECIAL__InterlockedCompareExchange
#define __INTRINSIC_SPECIAL__InterlockedIncrement64
#define __INTRINSIC_SPECIAL__InterlockedDecrement64
#define __INTRINSIC_SPECIAL__InterlockedExchangeAdd64
#define __INTRINSIC_SPECIAL__InterlockedExchange64
#define __INTRINSIC_SPECIAL__InterlockedCompareExchange64
#define __INTRINSIC_SPECIAL__InterlockedExchangePointer
#define __INTRINSIC_SPECIAL__InterlockedCompareExchangePointer
#define __INTRINSIC_SPECIAL___readgsbyte
#define __INTRINSIC_SPECIAL___readgsword
#define __INTRINSIC_SPECIAL___readgsdword
#define __INTRINSIC_SPECIAL___readgsqword
#define __INTRINSIC_SPECIAL___writegsbyte
#define __INTRINSIC_SPECIAL___writegsword
#define __INTRINSIC_SPECIAL___writegsdword
#define __INTRINSIC_SPECIAL___writegsqword
#define __INTRINSIC_SPECIAL___readfsbyte
#define __INTRINSIC_SPECIAL___readfsword
#define __INTRINSIC_SPECIAL___readfsdword
#define __INTRINSIC_SPECIAL___writefsbyte
#define __INTRINSIC_SPECIAL___writefsword
#define __INTRINSIC_SPECIAL___writefsdword
#define __INTRINSIC_SPECIAL__BitScanForward
#define __INTRINSIC_SPECIAL__BitScanForward64
#define __INTRINSIC_SPECIAL__BitScanReverse
#define __INTRINSIC_SPECIAL__BitScanReverse64
#define __INTRINSIC_SPECIAL__bittest
#define __INTRINSIC_SPECIAL__bittestandset
#define __INTRINSIC_SPECIAL__bittestandreset
#define __INTRINSIC_SPECIAL__bittestandcomplement
#define __INTRINSIC_SPECIAL__bittest64
#define __INTRINSIC_SPECIAL__bittestandset64
#define __INTRINSIC_SPECIAL__bittestandreset64
#define __INTRINSIC_SPECIAL__bittestandcomplement64
#define __INTRINSIC_SPECIAL___movsb
#define __INTRINSIC_SPECIAL___movsw
#define __INTRINSIC_SPECIAL___movsd
#define __INTRINSIC_SPECIAL___movsq
# 485 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
void __faststorefence(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __faststorefence(void) {


    __builtin_ia32_sfence();
}
#define __INTRINSIC_DEFINED___faststorefence



__extension__ void __stosq(unsigned long long *, unsigned long long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosq(unsigned long long *Dest, unsigned long long Data, size_t Count) { __asm__ __volatile__ ("rep stos{%z[Data]|" "q" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }
#define __INTRINSIC_DEFINED___stosq



__extension__ unsigned char _interlockedbittestandset64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset64( long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandset64



__extension__ unsigned char _interlockedbittestandreset64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset64( long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandreset64



__extension__ unsigned char _interlockedbittestandcomplement64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement64( long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandcomplement64



__extension__ unsigned char InterlockedBitTestAndSet64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet64(volatile long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndSet64



__extension__ unsigned char InterlockedBitTestAndReset64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset64(volatile long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndReset64



__extension__ unsigned char InterlockedBitTestAndComplement64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement64(volatile long long *Base, long long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "J" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndComplement64



__extension__ long long _InterlockedAnd64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedAnd64(volatile long long *Destination, long long Value) { return __sync_fetch_and_and(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedAnd64



__extension__ long long _InterlockedOr64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedOr64(volatile long long *Destination, long long Value) { return __sync_fetch_and_or(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedOr64



__extension__ long long _InterlockedXor64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedXor64(volatile long long *Destination, long long Value) { return __sync_fetch_and_xor(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedXor64



__extension__ long long _InterlockedIncrement64(long long volatile *Addend);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedIncrement64(long long volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedIncrement64



__extension__ long long _InterlockedDecrement64(long long volatile *Addend);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedDecrement64(long long volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedDecrement64



__extension__ long long _InterlockedExchange64(long long volatile *Target, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedExchange64(long long volatile *Target, long long Value) {
    return __sync_lock_test_and_set(Target, Value);
}
#define __INTRINSIC_DEFINED__InterlockedExchange64



__extension__ long long _InterlockedExchangeAdd64(long long volatile *Addend, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedExchangeAdd64(long long volatile *Addend, long long Value) {
    return __sync_fetch_and_add(Addend, Value);
}
#define __INTRINSIC_DEFINED__InterlockedExchangeAdd64



unsigned char __readgsbyte(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char __readgsbyte(unsigned long Offset) { unsigned char ret; __asm__ ("mov{%z[ret] %%" "gs" ":%[offset], %[ret] | %[ret], %%" "gs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned char *) (size_t) Offset))); return ret; }
#define __INTRINSIC_DEFINED___readgsbyte



unsigned short __readgsword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned short __readgsword(unsigned long Offset) { unsigned short ret; __asm__ ("mov{%z[ret] %%" "gs" ":%[offset], %[ret] | %[ret], %%" "gs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned short *) (size_t) Offset))); return ret; }
#define __INTRINSIC_DEFINED___readgsword



unsigned long __readgsdword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long __readgsdword(unsigned long Offset) { unsigned long ret; __asm__ ("mov{%z[ret] %%" "gs" ":%[offset], %[ret] | %[ret], %%" "gs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned long *) (size_t) Offset))); return ret; }
#define __INTRINSIC_DEFINED___readgsdword



__extension__ unsigned long long __readgsqword(unsigned long Offset);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readgsqword(unsigned long Offset) { unsigned long long ret; __asm__ ("mov{%z[ret] %%" "gs" ":%[offset], %[ret] | %[ret], %%" "gs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned long long *) (size_t) Offset))); return ret; }
#define __INTRINSIC_DEFINED___readgsqword



void __writegsbyte(unsigned long Offset,unsigned char Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsbyte(unsigned long Offset, unsigned char Data) { __asm__ ("mov{%z[offset] %[Data], %%" "gs" ":%[offset] | %%" "gs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned char *) (size_t) Offset)) : [Data] "ri" (Data)); }
#define __INTRINSIC_DEFINED___writegsbyte



void __writegsword(unsigned long Offset,unsigned short Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsword(unsigned long Offset, unsigned short Data) { __asm__ ("mov{%z[offset] %[Data], %%" "gs" ":%[offset] | %%" "gs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned short *) (size_t) Offset)) : [Data] "ri" (Data)); }
#define __INTRINSIC_DEFINED___writegsword



void __writegsdword(unsigned long Offset,unsigned long Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsdword(unsigned long Offset, unsigned long Data) { __asm__ ("mov{%z[offset] %[Data], %%" "gs" ":%[offset] | %%" "gs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned long *) (size_t) Offset)) : [Data] "ri" (Data)); }
#define __INTRINSIC_DEFINED___writegsdword



__extension__ void __writegsqword(unsigned long Offset,unsigned long long Data);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsqword(unsigned long Offset, unsigned long long Data) { __asm__ ("mov{%z[offset] %[Data], %%" "gs" ":%[offset] | %%" "gs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned long long *) (size_t) Offset)) : [Data] "ri" (Data)); }
#define __INTRINSIC_DEFINED___writegsqword



__extension__ unsigned char _BitScanForward64(unsigned long *Index, unsigned long long Mask);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward64(unsigned long *Index, unsigned long long Mask) { unsigned long long n; __asm__ ("bsf" "{%z[Mask] %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }
#define __INTRINSIC_DEFINED__BitScanForward64



__extension__ unsigned char _BitScanReverse64(unsigned long *Index, unsigned long long Mask);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse64(unsigned long *Index, unsigned long long Mask) { unsigned long long n; __asm__ ("bsr" "{%z[Mask] %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }
#define __INTRINSIC_DEFINED__BitScanReverse64



__extension__ unsigned char _bittest64(long long const *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest64(const long long *Base, long long Offset) { unsigned char old; __asm__ ("bt{%z[Base] %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=rm" (old) : [Offset] "J" "r" (Offset), [Base] "rm" (*Base) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittest64



__extension__ unsigned char _bittestandset64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset64(long long *Base, long long Offset) { unsigned char old; __asm__ ("bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "J" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandset64



__extension__ unsigned char _bittestandreset64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset64(long long *Base, long long Offset) { unsigned char old; __asm__ ("btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "J" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandreset64



__extension__ unsigned char _bittestandcomplement64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement64(long long *Base, long long Offset) { unsigned char old; __asm__ ("btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "J" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandcomplement64
# 763 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
__extension__ void __movsq(unsigned long long *Dest, unsigned long long const *Source, size_t Count);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsq(unsigned long long *Destination, unsigned long long const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "q" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
#define __INTRINSIC_DEFINED___movsq
# 838 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
void __int2c(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __int2c(void) {
    __asm__ __volatile__("int {$}" "0x2c" :);
}
#define __INTRINSIC_DEFINED___int2c



void __stosb(unsigned char *, unsigned char, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosb(unsigned char *Dest, unsigned char Data, size_t Count) { __asm__ __volatile__ ("rep stos{%z[Data]|" "b" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }
#define __INTRINSIC_DEFINED___stosb



void __stosw(unsigned short *, unsigned short, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosw(unsigned short *Dest, unsigned short Data, size_t Count) { __asm__ __volatile__ ("rep stos{%z[Data]|" "w" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }
#define __INTRINSIC_DEFINED___stosw



void __stosd(unsigned long *, unsigned long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosd(unsigned long *Dest, unsigned long Data, size_t Count) { __asm__ __volatile__ ("rep stos{%z[Data]|" "d" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }
#define __INTRINSIC_DEFINED___stosd



unsigned char _interlockedbittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset( long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandset



unsigned char _interlockedbittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset( long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandreset



unsigned char _interlockedbittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement( long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED__interlockedbittestandcomplement



unsigned char InterlockedBitTestAndSet(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndSet



unsigned char InterlockedBitTestAndReset(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndReset



unsigned char InterlockedBitTestAndComplement(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }
#define __INTRINSIC_DEFINED_InterlockedBitTestAndComplement



long _InterlockedAnd(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAnd(volatile long *Destination, long Value) { return __sync_fetch_and_and(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedAnd



long _InterlockedOr(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedOr(volatile long *Destination, long Value) { return __sync_fetch_and_or(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedOr



long _InterlockedXor(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedXor(volatile long *Destination, long Value) { return __sync_fetch_and_xor(Destination, Value); }
#define __INTRINSIC_DEFINED__InterlockedXor



short _InterlockedIncrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedIncrement16(short volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedIncrement16



short _InterlockedDecrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedDecrement16(short volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedDecrement16



short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
#define __INTRINSIC_DEFINED__InterlockedCompareExchange16



long _InterlockedExchangeAdd(long volatile *Addend, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchangeAdd(long volatile *Addend, long Value) {
    return __sync_fetch_and_add(Addend, Value);
}
#define __INTRINSIC_DEFINED__InterlockedExchangeAdd



long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
#define __INTRINSIC_DEFINED__InterlockedCompareExchange



long _InterlockedIncrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedIncrement(long volatile *Addend) {
   return __sync_add_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedIncrement



long _InterlockedDecrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedDecrement(long volatile *Addend) {
   return __sync_sub_and_fetch(Addend, 1);
}
#define __INTRINSIC_DEFINED__InterlockedDecrement



long _InterlockedExchange(long volatile *Target, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchange(long volatile *Target, long Value) {
    return __sync_lock_test_and_set(Target, Value);
}
#define __INTRINSIC_DEFINED__InterlockedExchange



__extension__ long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
#define __INTRINSIC_DEFINED__InterlockedCompareExchange64



void *_InterlockedCompareExchangePointer(void * volatile *Destination, void *ExChange, void *Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedCompareExchangePointer(void *volatile *Destination, void *ExChange, void *Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
#define __INTRINSIC_DEFINED__InterlockedCompareExchangePointer



void *_InterlockedExchangePointer(void *volatile *Target,void *Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedExchangePointer(void *volatile *Target,void *Value) {
    return __sync_lock_test_and_set(Target, Value);
}
#define __INTRINSIC_DEFINED__InterlockedExchangePointer



unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask) { unsigned long n; __asm__ ("bsf" "{%z[Mask] %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }
#define __INTRINSIC_DEFINED__BitScanForward



unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask) { unsigned long n; __asm__ ("bsr" "{%z[Mask] %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }
#define __INTRINSIC_DEFINED__BitScanReverse



unsigned char _bittest(long const *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest(const long *Base, long Offset) { unsigned char old; __asm__ ("bt{%z[Base] %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=rm" (old) : [Offset] "I" "r" (Offset), [Base] "rm" (*Base) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittest



unsigned char _bittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset(long *Base, long Offset) { unsigned char old; __asm__ ("bts" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandset



unsigned char _bittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset(long *Base, long Offset) { unsigned char old; __asm__ ("btr" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandreset



unsigned char _bittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement(long *Base, long Offset) { unsigned char old; __asm__ ("btc" "%z[Base] {%[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }
#define __INTRINSIC_DEFINED__bittestandcomplement
# 1203 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "b" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
#define __INTRINSIC_DEFINED___movsb



void __movsw(unsigned short *Dest, unsigned short const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsw(unsigned short *Destination, unsigned short const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "w" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
#define __INTRINSIC_DEFINED___movsw



void __movsd(unsigned long *Dest, unsigned long const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsd(unsigned long *Destination, unsigned long const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "d" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
#define __INTRINSIC_DEFINED___movsd
# 1340 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#undef __INTRINSIC_ONLYSPECIAL
#undef __INTRINSIC_PROLOG
#undef __INTRINSIC_EPILOG
#undef __INTRINSICS_USEINLINE
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
# 84 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define RESTRICTED_POINTER

#undef UNALIGNED
#undef UNALIGNED64

#define ALIGNMENT_MACHINE
#define UNALIGNED

#define UNALIGNED64
# 103 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define MAX_NATURAL_ALIGNMENT
#define MEMORY_ALLOCATION_ALIGNMENT
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define TYPE_ALIGNMENT



#define PROBE_ALIGNMENT







#define PROBE_ALIGNMENT32





#define C_ASSERT


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 1 3




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 6 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 2 3


#define _BASETSD_H_


__extension__ typedef unsigned long long POINTER_64_INT;




#define POINTER_32
#define POINTER_64
#define FIRMWARE_PTR

#define POINTER_SIGNED
#define POINTER_UNSIGNED
#define SPOINTER_32
#define UPOINTER_32





  typedef signed char INT8,*PINT8;
  typedef signed short INT16,*PINT16;
  typedef signed int INT32,*PINT32;
  __extension__ typedef signed long long INT64,*PINT64;
  typedef unsigned char UINT8,*PUINT8;
  typedef unsigned short UINT16,*PUINT16;
  typedef unsigned int UINT32,*PUINT32;
  __extension__ typedef unsigned long long UINT64,*PUINT64;
  typedef signed int LONG32,*PLONG32;
  typedef unsigned int ULONG32,*PULONG32;
  typedef unsigned int DWORD32,*PDWORD32;






  __extension__ typedef long long INT_PTR,*PINT_PTR;
  __extension__ typedef unsigned long long UINT_PTR,*PUINT_PTR;
  __extension__ typedef long long LONG_PTR,*PLONG_PTR;
  __extension__ typedef unsigned long long ULONG_PTR,*PULONG_PTR;
#define __int3264
# 60 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 3
#define ADDRESS_TAG_BIT

  __extension__ typedef long long SHANDLE_PTR;
  __extension__ typedef unsigned long long HANDLE_PTR;
  typedef unsigned int UHALF_PTR,*PUHALF_PTR;
  typedef int HALF_PTR,*PHALF_PTR;


  static __inline unsigned long HandleToULong (const void *h) { return ((unsigned long) (ULONG_PTR) h); }
  static __inline long HandleToLong (const void *h) { return ((long) (LONG_PTR) h); }
  static __inline void *ULongToHandle (const unsigned long h) { return ((void *) (UINT_PTR) h); }
  static __inline void *LongToHandle (const long h) { return ((void *) (INT_PTR) h); }
  static __inline unsigned long PtrToUlong (const void *p) { return ((unsigned long) (ULONG_PTR) p); }
  static __inline unsigned int PtrToUint (const void *p) { return ((unsigned int) (UINT_PTR) p); }
  static __inline unsigned short PtrToUshort (const void *p) { return ((unsigned short) (unsigned long) (ULONG_PTR) p); }
  static __inline long PtrToLong (const void *p) { return ((long) (LONG_PTR) p); }
  static __inline int PtrToInt (const void *p) { return ((int) (INT_PTR) p); }
  static __inline short PtrToShort (const void *p) { return ((short) (long) (LONG_PTR) p); }
  static __inline void *IntToPtr (const int i) { return ((void *) (INT_PTR)i); }
  static __inline void *UIntToPtr (const unsigned int ui) { return ((void *) (UINT_PTR)ui); }
  static __inline void *LongToPtr (const long l) { return ((void *) (LONG_PTR)l); }
  static __inline void *ULongToPtr (const unsigned long ul) { return ((void *) (ULONG_PTR)ul); }

#define PtrToPtr64
#define Ptr64ToPtr
#define HandleToHandle64
#define Handle64ToHandle

  static __inline void *Ptr32ToPtr (const void * p) { return ((void *) (ULONG_PTR) (unsigned long) (ULONG_PTR) p); }
  static __inline void *Handle32ToHandle (const void * h) { return ((void *) (LONG_PTR) (long) (ULONG_PTR) h); }
  static __inline void * PtrToPtr32 (const void *p) { return ((void *) (ULONG_PTR) (unsigned long) (ULONG_PTR) p); }

#define HandleToHandle32
# 130 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 3
#define HandleToUlong
#define UlongToHandle
#define UlongToPtr
#define UintToPtr

#define MAXUINT_PTR
#define MAXINT_PTR
#define MININT_PTR

#define MAXULONG_PTR
#define MAXLONG_PTR
#define MINLONG_PTR

#define MAXUHALF_PTR
#define MAXHALF_PTR
#define MINHALF_PTR

  __extension__ typedef ULONG_PTR SIZE_T,*PSIZE_T;
  __extension__ typedef LONG_PTR SSIZE_T,*PSSIZE_T;
# 191 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 3
  __extension__ typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
  __extension__ typedef long long LONG64,*PLONG64;
  __extension__ typedef unsigned long long ULONG64,*PULONG64;
  __extension__ typedef unsigned long long DWORD64,*PDWORD64;
  __extension__ typedef ULONG_PTR KAFFINITY;
  __extension__ typedef KAFFINITY *PKAFFINITY;
# 135 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3



#define DECLSPEC_IMPORT







#define DECLSPEC_NORETURN







#define DECLSPEC_NOTHROW
# 165 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define DECLSPEC_ALIGN
# 176 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define SYSTEM_CACHE_ALIGNMENT_SIZE






#define DECLSPEC_CACHEALIGN



#define DECLSPEC_UUID



#define DECLSPEC_NOVTABLE



#define DECLSPEC_SELECTANY






#define NOP_FUNCTION
# 214 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define DECLSPEC_NOINLINE







#define FORCEINLINE






#define DECLSPEC_DEPRECATED
#define DEPRECATE_SUPPORTED


#define DECLSPEC_DEPRECATED_DDK
#define PRAGMA_DEPRECATED_DDK

  typedef void *PVOID;
  typedef void *PVOID64;





#define FASTCALL



#define NTAPI
#define NTAPI_INLINE


#define NTSYSAPI
#define NTSYSCALLAPI






#define VOID
  typedef char CHAR;
  typedef short SHORT;
  typedef long LONG;

  typedef int INT;




#define __WCHAR_DEFINED
  typedef wchar_t WCHAR;

  typedef WCHAR *PWCHAR,*LPWCH,*PWCH;
  typedef const WCHAR *LPCWCH,*PCWCH;
  typedef WCHAR *NWPSTR,*LPWSTR,*PWSTR;
  typedef PWSTR *PZPWSTR;
  typedef const PWSTR *PCZPWSTR;
  typedef WCHAR *LPUWSTR,*PUWSTR;
  typedef const WCHAR *LPCWSTR,*PCWSTR;
  typedef PCWSTR *PZPCWSTR;
  typedef const WCHAR *LPCUWSTR,*PCUWSTR;
  typedef WCHAR *PZZWSTR;
  typedef const WCHAR *PCZZWSTR;
  typedef WCHAR *PUZZWSTR;
  typedef const WCHAR *PCUZZWSTR;
  typedef WCHAR *PNZWCH;
  typedef const WCHAR *PCNZWCH;
  typedef WCHAR *PUNZWCH;
  typedef const WCHAR *PCUNZWCH;
# 309 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
  typedef CHAR *PCHAR,*LPCH,*PCH;
  typedef const CHAR *LPCCH,*PCCH;
  typedef CHAR *NPSTR,*LPSTR,*PSTR;
  typedef PSTR *PZPSTR;
  typedef const PSTR *PCZPSTR;
  typedef const CHAR *LPCSTR,*PCSTR;
  typedef PCSTR *PZPCSTR;
  typedef CHAR *PZZSTR;
  typedef const CHAR *PCZZSTR;
  typedef CHAR *PNZCH;
  typedef const CHAR *PCNZCH;
# 347 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define _TCHAR_DEFINED
  typedef char TCHAR, *PTCHAR;
  typedef unsigned char TBYTE, *PTBYTE;


  typedef LPSTR LPTCH,PTCH;
  typedef LPCCH LPCTCH,PCTCH;
  typedef LPSTR PTSTR,LPTSTR,PUTSTR,LPUTSTR;
  typedef LPCSTR PCTSTR,LPCTSTR,PCUTSTR,LPCUTSTR;
  typedef PZZSTR PZZTSTR, PUZZTSTR;
  typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
  typedef PZPSTR PZPTSTR;
  typedef PNZCH PNZTCH, PUNZTCH;
  typedef PCNZCH PCNZTCH, PCUNZTCH;

#define __TEXT


#define TEXT

  typedef SHORT *PSHORT;
  typedef LONG *PLONG;


#define ___GROUP_AFFINITY_DEFINED
typedef struct _GROUP_AFFINITY {
  KAFFINITY Mask;
  WORD Group;
  WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;



  typedef void *HANDLE;
#define DECLARE_HANDLE





  typedef HANDLE *PHANDLE;
  typedef BYTE FCHAR;
  typedef WORD FSHORT;
  typedef DWORD FLONG;


#define _HRESULT_DEFINED
  typedef LONG HRESULT;





#define EXTERN_C


#define STDMETHODCALLTYPE
#define STDMETHODVCALLTYPE
#define STDAPICALLTYPE
#define STDAPIVCALLTYPE
#define STDAPI
#define STDAPI_
#define STDMETHODIMP
#define STDMETHODIMP_
#define IFACEMETHODIMP
#define IFACEMETHODIMP_
#define STDAPIV
#define STDAPIV_
#define STDMETHODIMPV
#define STDMETHODIMPV_
#define IFACEMETHODIMPV
#define IFACEMETHODIMPV_

  typedef char CCHAR;

#define _LCID_DEFINED
typedef DWORD LCID;

  typedef PDWORD PLCID;

#define _LANGID_DEFINED
  typedef WORD LANGID;



#define __COMPARTMENT_ID_DEFINED__

typedef enum {
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID,*PCOMPARTMENT_ID;


#define APPLICATION_ERROR_MASK
#define ERROR_SEVERITY_SUCCESS
#define ERROR_SEVERITY_INFORMATIONAL
#define ERROR_SEVERITY_WARNING
#define ERROR_SEVERITY_ERROR




    typedef struct _FLOAT128 {
      __extension__ long long LowPart;
      __extension__ long long HighPart;
  } FLOAT128;

  typedef FLOAT128 *PFLOAT128;

#define _ULONGLONG_
  __extension__ typedef long long LONGLONG;
  __extension__ typedef unsigned long long ULONGLONG;

#define MAXLONGLONG

  typedef LONGLONG *PLONGLONG;
  typedef ULONGLONG *PULONGLONG;
  typedef LONGLONG USN;


#define _LARGE_INTEGER_DEFINED




  typedef union _LARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      LONG HighPart;
    } ;
    struct {
      DWORD LowPart;
      LONG HighPart;
    } u;

    LONGLONG QuadPart;
  } LARGE_INTEGER;

  typedef LARGE_INTEGER *PLARGE_INTEGER;




  typedef union _ULARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      DWORD HighPart;
    } ;
    struct {
      DWORD LowPart;
      DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
  } ULARGE_INTEGER;

  typedef ULARGE_INTEGER *PULARGE_INTEGER;

  typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
  } LUID,*PLUID;



#define _DWORDLONG_
  typedef ULONGLONG DWORDLONG;
  typedef DWORDLONG *PDWORDLONG;

#define Int32x32To64
#define UInt32x32To64
#define Int64ShllMod32
#define Int64ShraMod32
#define Int64ShrlMod32







#define RotateLeft8
#define RotateLeft16
#define RotateRight8
#define RotateRight16

    unsigned char __attribute__((__cdecl__)) _rotl8(unsigned char Value,unsigned char Shift);
    unsigned short __attribute__((__cdecl__)) _rotl16(unsigned short Value,unsigned char Shift);
    unsigned char __attribute__((__cdecl__)) _rotr8(unsigned char Value,unsigned char Shift);
    unsigned short __attribute__((__cdecl__)) _rotr16(unsigned short Value,unsigned char Shift);


#define RotateLeft32
#define RotateLeft64
#define RotateRight32
#define RotateRight64

       
       
#undef _rotl
#undef _rotr
    unsigned int __attribute__((__cdecl__)) _rotl(unsigned int Value,int Shift);
    unsigned int __attribute__((__cdecl__)) _rotr(unsigned int Value,int Shift);
       
       
       
       
#undef _rotl64
#undef _rotr64
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long Value,int Shift);
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       





#define ANSI_NULL
#define UNICODE_NULL
#define UNICODE_STRING_MAX_BYTES
#define UNICODE_STRING_MAX_CHARS


#define _BOOLEAN_
  typedef BYTE BOOLEAN;

  typedef BOOLEAN *PBOOLEAN;


#define _LIST_ENTRY_DEFINED

  typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
  } LIST_ENTRY,*PLIST_ENTRY,* PRLIST_ENTRY;

  typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
  } SINGLE_LIST_ENTRY,*PSINGLE_LIST_ENTRY;

  typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
  } LIST_ENTRY32;
  typedef LIST_ENTRY32 *PLIST_ENTRY32;

  typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
  } LIST_ENTRY64;
  typedef LIST_ENTRY64 *PLIST_ENTRY64;



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3





#define GUID_DEFINED


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 2 3
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
typedef struct _GUID {
  unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char Data4[8];
} GUID;
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID


#define _GUIDDEF_H_


#define __LPGUID_DEFINED__
typedef GUID *LPGUID;



#define __LPCGUID_DEFINED__
typedef const GUID *LPCGUID;



#define __IID_DEFINED__

typedef GUID IID;
typedef IID *LPIID;

#define IID_NULL
#define IsEqualIID


#define CLSID_DEFINED
typedef GUID CLSID;


typedef CLSID *LPCLSID;

#define CLSID_NULL
#define IsEqualCLSID
typedef GUID FMTID;
typedef FMTID *LPFMTID;
#define FMTID_NULL
#define IsEqualFMTID




#define __MIDL_CONST



#define _REFGUID_DEFINED



#define REFGUID




#define _REFIID_DEFINED



#define REFIID




#define _REFCLSID_DEFINED



#define REFCLSID




#define _REFFMTID_DEFINED



#define REFFMTID






#define _SYS_GUID_OPERATORS_
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/string.h" 1 3






#define _INC_STRING
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/string.h" 3
#define _NLSCMP_DEFINED
#define _NLSCMPERROR
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/string.h" 3
#define _WConst_return


#define _CRT_MEMORY_DEFINED
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
       
#undef strtok_r
  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);
       
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);




#define strncasecmp
#define strcasecmp

  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;



#define _WSTRING_DEFINED

  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;
#define wcswcs
  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/string_s.h" 1 3






#define _INC_STRING_S

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/string.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/string_s.h" 2 3
# 181 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/string.h" 2 3
# 149 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 2 3
# 159 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define InlineIsEqualGUID
#define IsEqualGUID







#define IsEqualIID
#define IsEqualCLSID


#define _SYS_GUID_OPERATOR_EQ_
# 603 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3


#define __OBJECTID_DEFINED
  typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
  } OBJECTID;


#define MINCHAR
#define MAXCHAR
#define MINSHORT
#define MAXSHORT
#define MINLONG
#define MAXLONG
#define MAXBYTE
#define MAXWORD
#define MAXDWORD

#define FIELD_OFFSET
#define RTL_FIELD_SIZE
#define RTL_SIZEOF_THROUGH_FIELD
#define RTL_CONTAINS_FIELD
#define RTL_NUMBER_OF_V1
#define RTL_NUMBER_OF_V2




#define RTL_NUMBER_OF


#define ARRAYSIZE
#define _ARRAYSIZE

#define RTL_FIELD_TYPE
#define RTL_NUMBER_OF_FIELD
#define RTL_PADDING_BETWEEN_FIELDS




#define RTL_CONST_CAST
# 660 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define DEFINE_ENUM_FLAG_OPERATORS


#define COMPILETIME_OR_2FLAGS
#define COMPILETIME_OR_3FLAGS
#define COMPILETIME_OR_4FLAGS
#define COMPILETIME_OR_5FLAGS


#define RTL_BITS_OF
#define RTL_BITS_OF_FIELD
#define CONTAINING_RECORD

    typedef int EXCEPTION_ROUTINE (struct _EXCEPTION_RECORD *ExceptionRecord, PVOID EstablisherFrame, struct _CONTEXT *ContextRecord, PVOID DispatcherContext);

#define __PEXCEPTION_ROUTINE_DEFINED
    typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;


#define VER_WORKSTATION_NT
#define VER_SERVER_NT
#define VER_SUITE_SMALLBUSINESS
#define VER_SUITE_ENTERPRISE
#define VER_SUITE_BACKOFFICE
#define VER_SUITE_COMMUNICATIONS
#define VER_SUITE_TERMINAL
#define VER_SUITE_SMALLBUSINESS_RESTRICTED
#define VER_SUITE_EMBEDDEDNT
#define VER_SUITE_DATACENTER
#define VER_SUITE_SINGLEUSERTS
#define VER_SUITE_PERSONAL
#define VER_SUITE_BLADE
#define VER_SUITE_EMBEDDED_RESTRICTED
#define VER_SUITE_SECURITY_APPLIANCE
#define VER_SUITE_STORAGE_SERVER
#define VER_SUITE_COMPUTE_SERVER
#define VER_SUITE_WH_SERVER

#define PRODUCT_UNDEFINED

#define PRODUCT_ULTIMATE
#define PRODUCT_HOME_BASIC
#define PRODUCT_HOME_PREMIUM
#define PRODUCT_ENTERPRISE
#define PRODUCT_HOME_BASIC_N
#define PRODUCT_BUSINESS
#define PRODUCT_STANDARD_SERVER
#define PRODUCT_DATACENTER_SERVER
#define PRODUCT_SMALLBUSINESS_SERVER
#define PRODUCT_ENTERPRISE_SERVER
#define PRODUCT_STARTER
#define PRODUCT_DATACENTER_SERVER_CORE
#define PRODUCT_STANDARD_SERVER_CORE
#define PRODUCT_ENTERPRISE_SERVER_CORE
#define PRODUCT_ENTERPRISE_SERVER_IA64
#define PRODUCT_BUSINESS_N
#define PRODUCT_WEB_SERVER
#define PRODUCT_CLUSTER_SERVER
#define PRODUCT_HOME_SERVER
#define PRODUCT_STORAGE_EXPRESS_SERVER
#define PRODUCT_STORAGE_STANDARD_SERVER
#define PRODUCT_STORAGE_WORKGROUP_SERVER
#define PRODUCT_STORAGE_ENTERPRISE_SERVER
#define PRODUCT_SERVER_FOR_SMALLBUSINESS
#define PRODUCT_SMALLBUSINESS_SERVER_PREMIUM
#define PRODUCT_HOME_PREMIUM_N
#define PRODUCT_ENTERPRISE_N
#define PRODUCT_ULTIMATE_N
#define PRODUCT_WEB_SERVER_CORE
#define PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT
#define PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY
#define PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING
#define PRODUCT_SERVER_FOUNDATION
#define PRODUCT_HOME_PREMIUM_SERVER
#define PRODUCT_SERVER_FOR_SMALLBUSINESS_V
#define PRODUCT_STANDARD_SERVER_V
#define PRODUCT_DATACENTER_SERVER_V
#define PRODUCT_ENTERPRISE_SERVER_V
#define PRODUCT_DATACENTER_SERVER_CORE_V
#define PRODUCT_STANDARD_SERVER_CORE_V
#define PRODUCT_ENTERPRISE_SERVER_CORE_V
#define PRODUCT_HYPERV
#define PRODUCT_STORAGE_EXPRESS_SERVER_CORE
#define PRODUCT_STORAGE_STANDARD_SERVER_CORE
#define PRODUCT_STORAGE_WORKGROUP_SERVER_CORE
#define PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE
#define PRODUCT_STARTER_N
#define PRODUCT_PROFESSIONAL
#define PRODUCT_PROFESSIONAL_N
#define PRODUCT_SB_SOLUTION_SERVER
#define PRODUCT_SERVER_FOR_SB_SOLUTIONS
#define PRODUCT_STANDARD_SERVER_SOLUTIONS
#define PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE
#define PRODUCT_SB_SOLUTION_SERVER_EM
#define PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM
#define PRODUCT_SOLUTION_EMBEDDEDSERVER
#define PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE
#define PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT
#define PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL
#define PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC
#define PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC
#define PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE
#define PRODUCT_CLUSTER_SERVER_V
#define PRODUCT_EMBEDDED
#define PRODUCT_STARTER_E
#define PRODUCT_HOME_BASIC_E
#define PRODUCT_HOME_PREMIUM_E
#define PRODUCT_PROFESSIONAL_E
#define PRODUCT_ENTERPRISE_E
#define PRODUCT_ULTIMATE_E
#define PRODUCT_ENTERPRISE_EVALUATION
#define PRODUCT_MULTIPOINT_STANDARD_SERVER
#define PRODUCT_MULTIPOINT_PREMIUM_SERVER
#define PRODUCT_STANDARD_EVALUATION_SERVER
#define PRODUCT_DATACENTER_EVALUATION_SERVER
#define PRODUCT_ENTERPRISE_N_EVALUATION
#define PRODUCT_EMBEDDED_AUTOMOTIVE
#define PRODUCT_EMBEDDED_INDUSTRY_A
#define PRODUCT_THINPC
#define PRODUCT_EMBEDDED_A
#define PRODUCT_EMBEDDED_INDUSTRY
#define PRODUCT_EMBEDDED_E
#define PRODUCT_EMBEDDED_INDUSTRY_E
#define PRODUCT_EMBEDDED_INDUSTRY_A_E
#define PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER
#define PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER
#define PRODUCT_CORE_ARM
#define PRODUCT_CORE_N
#define PRODUCT_CORE_COUNTRYSPECIFIC
#define PRODUCT_CORE_SINGLELANGUAGE
#define PRODUCT_CORE
#define PRODUCT_PROFESSIONAL_WMC
#define PRODUCT_MOBILE_CORE

#define PRODUCT_UNLICENSED

#define LANG_NEUTRAL
#define LANG_INVARIANT

#define LANG_AFRIKAANS
#define LANG_ALBANIAN
#define LANG_ALSATIAN
#define LANG_AMHARIC
#define LANG_ARABIC
#define LANG_ARMENIAN
#define LANG_ASSAMESE
#define LANG_AZERI
#define LANG_AZERBAIJANI
#define LANG_BANGLA
#define LANG_BASHKIR
#define LANG_BASQUE
#define LANG_BELARUSIAN
#define LANG_BENGALI
#define LANG_BRETON
#define LANG_BOSNIAN
#define LANG_BOSNIAN_NEUTRAL
#define LANG_BULGARIAN
#define LANG_CATALAN
#define LANG_CENTRAL_KURDISH
#define LANG_CHEROKEE
#define LANG_CHINESE
#define LANG_CHINESE_SIMPLIFIED
#define LANG_CHINESE_TRADITIONAL
#define LANG_CORSICAN
#define LANG_CROATIAN
#define LANG_CZECH
#define LANG_DANISH
#define LANG_DARI
#define LANG_DIVEHI
#define LANG_DUTCH
#define LANG_ENGLISH
#define LANG_ESTONIAN
#define LANG_FAEROESE
#define LANG_FARSI
#define LANG_FILIPINO
#define LANG_FINNISH
#define LANG_FRENCH
#define LANG_FRISIAN
#define LANG_FULAH
#define LANG_GALICIAN
#define LANG_GEORGIAN
#define LANG_GERMAN
#define LANG_GREEK
#define LANG_GREENLANDIC
#define LANG_GUJARATI
#define LANG_HAUSA
#define LANG_HEBREW
#define LANG_HINDI
#define LANG_HUNGARIAN
#define LANG_ICELANDIC
#define LANG_IGBO
#define LANG_INDONESIAN
#define LANG_INUKTITUT
#define LANG_IRISH
#define LANG_ITALIAN
#define LANG_JAPANESE
#define LANG_KANNADA
#define LANG_KASHMIRI
#define LANG_KAZAK
#define LANG_KHMER
#define LANG_KICHE
#define LANG_KINYARWANDA
#define LANG_KONKANI
#define LANG_KOREAN
#define LANG_KYRGYZ
#define LANG_LAO
#define LANG_LATVIAN
#define LANG_LITHUANIAN
#define LANG_LOWER_SORBIAN
#define LANG_LUXEMBOURGISH
#define LANG_MACEDONIAN
#define LANG_MALAY
#define LANG_MALAYALAM
#define LANG_MALTESE
#define LANG_MANIPURI
#define LANG_MAORI
#define LANG_MAPUDUNGUN
#define LANG_MARATHI
#define LANG_MOHAWK
#define LANG_MONGOLIAN
#define LANG_NEPALI
#define LANG_NORWEGIAN
#define LANG_OCCITAN
#define LANG_ODIA
#define LANG_ORIYA
#define LANG_PASHTO
#define LANG_PERSIAN
#define LANG_POLISH
#define LANG_PORTUGUESE
#define LANG_PULAR
#define LANG_PUNJABI
#define LANG_QUECHUA
#define LANG_ROMANIAN
#define LANG_ROMANSH
#define LANG_RUSSIAN
#define LANG_SAKHA
#define LANG_SAMI
#define LANG_SANSKRIT
#define LANG_SCOTTISH_GAELIC
#define LANG_SERBIAN
#define LANG_SERBIAN_NEUTRAL
#define LANG_SINDHI
#define LANG_SINHALESE
#define LANG_SLOVAK
#define LANG_SLOVENIAN
#define LANG_SOTHO
#define LANG_SPANISH
#define LANG_SWAHILI
#define LANG_SWEDISH
#define LANG_SYRIAC
#define LANG_TAJIK
#define LANG_TAMAZIGHT
#define LANG_TAMIL
#define LANG_TATAR
#define LANG_TELUGU
#define LANG_THAI
#define LANG_TIBETAN
#define LANG_TIGRIGNA
#define LANG_TIGRINYA
#define LANG_TSWANA
#define LANG_TURKISH
#define LANG_TURKMEN
#define LANG_UIGHUR
#define LANG_UKRAINIAN
#define LANG_UPPER_SORBIAN
#define LANG_URDU
#define LANG_UZBEK
#define LANG_VALENCIAN
#define LANG_VIETNAMESE
#define LANG_WELSH
#define LANG_WOLOF
#define LANG_XHOSA
#define LANG_YAKUT
#define LANG_YI
#define LANG_YORUBA
#define LANG_ZULU

#define SUBLANG_NEUTRAL
#define SUBLANG_DEFAULT
#define SUBLANG_SYS_DEFAULT
#define SUBLANG_CUSTOM_DEFAULT
#define SUBLANG_CUSTOM_UNSPECIFIED
#define SUBLANG_UI_CUSTOM_DEFAULT

#define SUBLANG_AFRIKAANS_SOUTH_AFRICA
#define SUBLANG_ALBANIAN_ALBANIA
#define SUBLANG_ALSATIAN_FRANCE
#define SUBLANG_AMHARIC_ETHIOPIA
#define SUBLANG_ARABIC_SAUDI_ARABIA
#define SUBLANG_ARABIC_IRAQ
#define SUBLANG_ARABIC_EGYPT
#define SUBLANG_ARABIC_LIBYA
#define SUBLANG_ARABIC_ALGERIA
#define SUBLANG_ARABIC_MOROCCO
#define SUBLANG_ARABIC_TUNISIA
#define SUBLANG_ARABIC_OMAN
#define SUBLANG_ARABIC_YEMEN
#define SUBLANG_ARABIC_SYRIA
#define SUBLANG_ARABIC_JORDAN
#define SUBLANG_ARABIC_LEBANON
#define SUBLANG_ARABIC_KUWAIT
#define SUBLANG_ARABIC_UAE
#define SUBLANG_ARABIC_BAHRAIN
#define SUBLANG_ARABIC_QATAR
#define SUBLANG_ARMENIAN_ARMENIA
#define SUBLANG_ASSAMESE_INDIA
#define SUBLANG_AZERI_LATIN
#define SUBLANG_AZERI_CYRILLIC
#define SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN
#define SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC
#define SUBLANG_BANGLA_INDIA
#define SUBLANG_BANGLA_BANGLADESH
#define SUBLANG_BASHKIR_RUSSIA
#define SUBLANG_BASQUE_BASQUE
#define SUBLANG_BELARUSIAN_BELARUS
#define SUBLANG_BENGALI_INDIA
#define SUBLANG_BENGALI_BANGLADESH
#define SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN
#define SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC
#define SUBLANG_BRETON_FRANCE
#define SUBLANG_BULGARIAN_BULGARIA
#define SUBLANG_CATALAN_CATALAN
#define SUBLANG_CENTRAL_KURDISH_IRAQ
#define SUBLANG_CHEROKEE_CHEROKEE
#define SUBLANG_CHINESE_TRADITIONAL
#define SUBLANG_CHINESE_SIMPLIFIED
#define SUBLANG_CHINESE_HONGKONG
#define SUBLANG_CHINESE_SINGAPORE
#define SUBLANG_CHINESE_MACAU
#define SUBLANG_CORSICAN_FRANCE
#define SUBLANG_CZECH_CZECH_REPUBLIC
#define SUBLANG_CROATIAN_CROATIA
#define SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN
#define SUBLANG_DANISH_DENMARK
#define SUBLANG_DARI_AFGHANISTAN
#define SUBLANG_DIVEHI_MALDIVES
#define SUBLANG_DUTCH
#define SUBLANG_DUTCH_BELGIAN
#define SUBLANG_ENGLISH_US
#define SUBLANG_ENGLISH_UK
#define SUBLANG_ENGLISH_AUS
#define SUBLANG_ENGLISH_CAN
#define SUBLANG_ENGLISH_NZ
#define SUBLANG_ENGLISH_IRELAND
#define SUBLANG_ENGLISH_EIRE
#define SUBLANG_ENGLISH_SOUTH_AFRICA
#define SUBLANG_ENGLISH_JAMAICA
#define SUBLANG_ENGLISH_CARIBBEAN
#define SUBLANG_ENGLISH_BELIZE
#define SUBLANG_ENGLISH_TRINIDAD
#define SUBLANG_ENGLISH_ZIMBABWE
#define SUBLANG_ENGLISH_PHILIPPINES
#define SUBLANG_ENGLISH_INDIA
#define SUBLANG_ENGLISH_MALAYSIA
#define SUBLANG_ENGLISH_SINGAPORE
#define SUBLANG_ESTONIAN_ESTONIA
#define SUBLANG_FAEROESE_FAROE_ISLANDS
#define SUBLANG_FILIPINO_PHILIPPINES
#define SUBLANG_FINNISH_FINLAND
#define SUBLANG_FRENCH
#define SUBLANG_FRENCH_BELGIAN
#define SUBLANG_FRENCH_CANADIAN
#define SUBLANG_FRENCH_SWISS
#define SUBLANG_FRENCH_LUXEMBOURG
#define SUBLANG_FRENCH_MONACO
#define SUBLANG_FRISIAN_NETHERLANDS
#define SUBLANG_FULAH_SENEGAL
#define SUBLANG_GALICIAN_GALICIAN
#define SUBLANG_GEORGIAN_GEORGIA
#define SUBLANG_GERMAN
#define SUBLANG_GERMAN_SWISS
#define SUBLANG_GERMAN_AUSTRIAN
#define SUBLANG_GERMAN_LUXEMBOURG
#define SUBLANG_GERMAN_LIECHTENSTEIN
#define SUBLANG_GREEK_GREECE
#define SUBLANG_GREENLANDIC_GREENLAND
#define SUBLANG_GUJARATI_INDIA
#define SUBLANG_HAUSA_NIGERIA_LATIN
#define SUBLANG_HAUSA_NIGERIA
#define SUBLANG_HAWAIIAN_US
#define SUBLANG_HEBREW_ISRAEL
#define SUBLANG_HINDI_INDIA
#define SUBLANG_HUNGARIAN_HUNGARY
#define SUBLANG_ICELANDIC_ICELAND
#define SUBLANG_IGBO_NIGERIA
#define SUBLANG_INDONESIAN_INDONESIA
#define SUBLANG_INUKTITUT_CANADA
#define SUBLANG_INUKTITUT_CANADA_LATIN
#define SUBLANG_IRISH_IRELAND
#define SUBLANG_ITALIAN
#define SUBLANG_ITALIAN_SWISS
#define SUBLANG_JAPANESE_JAPAN
#define SUBLANG_KANNADA_INDIA
#define SUBLANG_KASHMIRI_INDIA
#define SUBLANG_KASHMIRI_SASIA
#define SUBLANG_KAZAK_KAZAKHSTAN
#define SUBLANG_KHMER_CAMBODIA
#define SUBLANG_KICHE_GUATEMALA
#define SUBLANG_KINYARWANDA_RWANDA
#define SUBLANG_KONKANI_INDIA
#define SUBLANG_KOREAN
#define SUBLANG_KYRGYZ_KYRGYZSTAN
#define SUBLANG_LAO_LAO
#define SUBLANG_LAO_LAO_PDR
#define SUBLANG_LATVIAN_LATVIA



#define SUBLANG_LITHUANIAN
#define SUBLANG_LOWER_SORBIAN_GERMANY
#define SUBLANG_LUXEMBOURGISH_LUXEMBOURG
#define SUBLANG_MACEDONIAN_MACEDONIA
#define SUBLANG_MALAY_MALAYSIA
#define SUBLANG_MALAY_BRUNEI_DARUSSALAM
#define SUBLANG_MALAYALAM_INDIA
#define SUBLANG_MALTESE_MALTA
#define SUBLANG_MAORI_NEW_ZEALAND
#define SUBLANG_MAPUDUNGUN_CHILE
#define SUBLANG_MARATHI_INDIA
#define SUBLANG_MOHAWK_MOHAWK
#define SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA
#define SUBLANG_MONGOLIAN_PRC
#define SUBLANG_NEPALI_NEPAL
#define SUBLANG_NEPALI_INDIA
#define SUBLANG_NORWEGIAN_BOKMAL
#define SUBLANG_NORWEGIAN_NYNORSK
#define SUBLANG_OCCITAN_FRANCE
#define SUBLANG_ORIYA_INDIA
#define SUBLANG_PASHTO_AFGHANISTAN
#define SUBLANG_PERSIAN_IRAN
#define SUBLANG_POLISH_POLAND
#define SUBLANG_PORTUGUESE_BRAZILIAN



#define SUBLANG_PORTUGUESE
#define SUBLANG_PULAR_SENEGAL
#define SUBLANG_PUNJABI_INDIA
#define SUBLANG_PUNJABI_PAKISTAN
#define SUBLANG_QUECHUA_BOLIVIA
#define SUBLANG_QUECHUA_ECUADOR
#define SUBLANG_QUECHUA_PERU
#define SUBLANG_ROMANIAN_ROMANIA

#define SUBLANG_ROMANSH_SWITZERLAND
#define SUBLANG_RUSSIAN_RUSSIA
#define SUBLANG_SAKHA_RUSSIA
#define SUBLANG_SAMI_NORTHERN_NORWAY
#define SUBLANG_SAMI_NORTHERN_SWEDEN
#define SUBLANG_SAMI_NORTHERN_FINLAND
#define SUBLANG_SAMI_LULE_NORWAY
#define SUBLANG_SAMI_LULE_SWEDEN
#define SUBLANG_SAMI_SOUTHERN_NORWAY
#define SUBLANG_SAMI_SOUTHERN_SWEDEN
#define SUBLANG_SAMI_SKOLT_FINLAND
#define SUBLANG_SAMI_INARI_FINLAND
#define SUBLANG_SANSKRIT_INDIA
#define SUBLANG_SCOTTISH_GAELIC
#define SUBLANG_SERBIAN_LATIN
#define SUBLANG_SERBIAN_CYRILLIC
#define SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN
#define SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC
#define SUBLANG_SERBIAN_MONTENEGRO_LATIN
#define SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC
#define SUBLANG_SERBIAN_SERBIA_LATIN
#define SUBLANG_SERBIAN_SERBIA_CYRILLIC
#define SUBLANG_SINDHI_INDIA
#define SUBLANG_SINDHI_AFGHANISTAN
#define SUBLANG_SINDHI_PAKISTAN
#define SUBLANG_SINHALESE_SRI_LANKA
#define SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA
#define SUBLANG_SLOVAK_SLOVAKIA
#define SUBLANG_SLOVENIAN_SLOVENIA
#define SUBLANG_SPANISH
#define SUBLANG_SPANISH_MEXICAN
#define SUBLANG_SPANISH_MODERN
#define SUBLANG_SPANISH_GUATEMALA
#define SUBLANG_SPANISH_COSTA_RICA
#define SUBLANG_SPANISH_PANAMA
#define SUBLANG_SPANISH_DOMINICAN_REPUBLIC
#define SUBLANG_SPANISH_VENEZUELA
#define SUBLANG_SPANISH_COLOMBIA
#define SUBLANG_SPANISH_PERU
#define SUBLANG_SPANISH_ARGENTINA
#define SUBLANG_SPANISH_ECUADOR
#define SUBLANG_SPANISH_CHILE
#define SUBLANG_SPANISH_URUGUAY
#define SUBLANG_SPANISH_PARAGUAY
#define SUBLANG_SPANISH_BOLIVIA
#define SUBLANG_SPANISH_EL_SALVADOR
#define SUBLANG_SPANISH_HONDURAS
#define SUBLANG_SPANISH_NICARAGUA
#define SUBLANG_SPANISH_PUERTO_RICO
#define SUBLANG_SPANISH_US
#define SUBLANG_SWAHILI_KENYA



#define SUBLANG_SWEDISH
#define SUBLANG_SWEDISH_FINLAND
#define SUBLANG_SYRIAC
#define SUBLANG_SYRIAC_SYRIA
#define SUBLANG_TAJIK_TAJIKISTAN
#define SUBLANG_TAMAZIGHT_ALGERIA_LATIN
#define SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH
#define SUBLANG_TAMIL_INDIA
#define SUBLANG_TAMIL_SRI_LANKA
#define SUBLANG_TATAR_RUSSIA
#define SUBLANG_TELUGU_INDIA
#define SUBLANG_THAI_THAILAND
#define SUBLANG_TIBETAN_PRC
#define SUBLANG_TIBETAN_BHUTAN
#define SUBLANG_TIGRIGNA_ERITREA
#define SUBLANG_TIGRINYA_ERITREA
#define SUBLANG_TIGRINYA_ETHIOPIA
#define SUBLANG_TSWANA_BOTSWANA
#define SUBLANG_TSWANA_SOUTH_AFRICA
#define SUBLANG_TURKISH_TURKEY
#define SUBLANG_TURKMEN_TURKMENISTAN
#define SUBLANG_UIGHUR_PRC
#define SUBLANG_UKRAINIAN_UKRAINE
#define SUBLANG_UPPER_SORBIAN_GERMANY
#define SUBLANG_URDU_PAKISTAN
#define SUBLANG_URDU_INDIA
#define SUBLANG_UZBEK_LATIN
#define SUBLANG_UZBEK_CYRILLIC
#define SUBLANG_VALENCIAN_VALENCIA
#define SUBLANG_VIETNAMESE_VIETNAM
#define SUBLANG_WELSH_UNITED_KINGDOM
#define SUBLANG_WOLOF_SENEGAL
#define SUBLANG_YORUBA_NIGERIA
#define SUBLANG_XHOSA_SOUTH_AFRICA
#define SUBLANG_YAKUT_RUSSIA
#define SUBLANG_YI_PRC
#define SUBLANG_ZULU_SOUTH_AFRICA

#define SORT_DEFAULT
#define SORT_INVARIANT_MATH

#define SORT_JAPANESE_XJIS
#define SORT_JAPANESE_UNICODE
#define SORT_JAPANESE_RADICALSTROKE

#define SORT_CHINESE_BIG5
#define SORT_CHINESE_PRCP
#define SORT_CHINESE_UNICODE
#define SORT_CHINESE_PRC
#define SORT_CHINESE_BOPOMOFO
#define SORT_CHINESE_RADICALSTROKE

#define SORT_KOREAN_KSC
#define SORT_KOREAN_UNICODE

#define SORT_GERMAN_PHONE_BOOK

#define SORT_HUNGARIAN_DEFAULT
#define SORT_HUNGARIAN_TECHNICAL

#define SORT_GEORGIAN_TRADITIONAL
#define SORT_GEORGIAN_MODERN

#define MAKELANGID
#define PRIMARYLANGID
#define SUBLANGID

#define NLS_VALID_LOCALE_MASK

#define MAKELCID
#define MAKESORTLCID
#define LANGIDFROMLCID
#define SORTIDFROMLCID
#define SORTVERSIONFROMLCID

#define LOCALE_NAME_MAX_LENGTH
#define LANG_SYSTEM_DEFAULT
#define LANG_USER_DEFAULT

#define LOCALE_SYSTEM_DEFAULT
#define LOCALE_USER_DEFAULT

#define LOCALE_NEUTRAL

#define LOCALE_CUSTOM_DEFAULT
#define LOCALE_CUSTOM_UNSPECIFIED
#define LOCALE_CUSTOM_UI_DEFAULT

#define LOCALE_INVARIANT

#define UNREFERENCED_PARAMETER
#define UNREFERENCED_LOCAL_VARIABLE
#define DBG_UNREFERENCED_PARAMETER
#define DBG_UNREFERENCED_LOCAL_VARIABLE

#define DEFAULT_UNREACHABLE



#define STATUS_WAIT_0
#define STATUS_ABANDONED_WAIT_0
#define STATUS_USER_APC
#define STATUS_TIMEOUT
#define STATUS_PENDING
#define DBG_EXCEPTION_HANDLED
#define DBG_CONTINUE
#define STATUS_SEGMENT_NOTIFICATION
#define STATUS_FATAL_APP_EXIT
#define DBG_TERMINATE_THREAD
#define DBG_TERMINATE_PROCESS
#define DBG_CONTROL_C
#define DBG_PRINTEXCEPTION_C
#define DBG_RIPEXCEPTION
#define DBG_CONTROL_BREAK
#define DBG_COMMAND_EXCEPTION
#define STATUS_GUARD_PAGE_VIOLATION
#define STATUS_DATATYPE_MISALIGNMENT
#define STATUS_BREAKPOINT
#define STATUS_SINGLE_STEP
#define STATUS_LONGJUMP
#define STATUS_UNWIND_CONSOLIDATE
#define DBG_EXCEPTION_NOT_HANDLED
#define STATUS_ACCESS_VIOLATION
#define STATUS_IN_PAGE_ERROR
#define STATUS_INVALID_HANDLE
#define STATUS_INVALID_PARAMETER
#define STATUS_NO_MEMORY
#define STATUS_ILLEGAL_INSTRUCTION
#define STATUS_NONCONTINUABLE_EXCEPTION
#define STATUS_INVALID_DISPOSITION
#define STATUS_ARRAY_BOUNDS_EXCEEDED
#define STATUS_FLOAT_DENORMAL_OPERAND
#define STATUS_FLOAT_DIVIDE_BY_ZERO
#define STATUS_FLOAT_INEXACT_RESULT
#define STATUS_FLOAT_INVALID_OPERATION
#define STATUS_FLOAT_OVERFLOW
#define STATUS_FLOAT_STACK_CHECK
#define STATUS_FLOAT_UNDERFLOW
#define STATUS_INTEGER_DIVIDE_BY_ZERO
#define STATUS_INTEGER_OVERFLOW
#define STATUS_PRIVILEGED_INSTRUCTION
#define STATUS_STACK_OVERFLOW
#define STATUS_DLL_NOT_FOUND
#define STATUS_ORDINAL_NOT_FOUND
#define STATUS_ENTRYPOINT_NOT_FOUND
#define STATUS_CONTROL_C_EXIT
#define STATUS_DLL_INIT_FAILED
#define STATUS_FLOAT_MULTIPLE_FAULTS
#define STATUS_FLOAT_MULTIPLE_TRAPS
#define STATUS_REG_NAT_CONSUMPTION
#define STATUS_STACK_BUFFER_OVERRUN
#define STATUS_INVALID_CRUNTIME_PARAMETER
#define STATUS_ASSERTION_FAILURE
#define STATUS_SXS_EARLY_DEACTIVATION
#define STATUS_SXS_INVALID_DEACTIVATION



#define MAXIMUM_WAIT_OBJECTS
#define MAXIMUM_SUSPEND_COUNT

  typedef ULONG_PTR KSPIN_LOCK;
  typedef KSPIN_LOCK *PKSPIN_LOCK;

    typedef struct __attribute__ ((__aligned__ (16))) _M128A {
      ULONGLONG Low;
      LONGLONG High;
    } M128A,*PM128A;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_FORMAT {
      WORD ControlWord;
      WORD StatusWord;
      BYTE TagWord;
      BYTE Reserved1;
      WORD ErrorOpcode;
      DWORD ErrorOffset;
      WORD ErrorSelector;
      WORD Reserved2;
      DWORD DataOffset;
      WORD DataSelector;
      WORD Reserved3;
      DWORD MxCsr;
      DWORD MxCsr_Mask;
      M128A FloatRegisters[8];

      M128A XmmRegisters[16];
      BYTE Reserved4[96];





    } XSAVE_FORMAT,*PXSAVE_FORMAT;

    typedef struct __attribute__ ((__aligned__ (8))) _XSAVE_AREA_HEADER {
      DWORD64 Mask;
      DWORD64 Reserved[7];
    } XSAVE_AREA_HEADER,*PXSAVE_AREA_HEADER;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_AREA {
      XSAVE_FORMAT LegacyState;
      XSAVE_AREA_HEADER Header;
    } XSAVE_AREA,*PXSAVE_AREA;

    typedef struct _XSTATE_CONTEXT {
      DWORD64 Mask;
      DWORD Length;
      DWORD Reserved1;
      PXSAVE_AREA Area;



      PVOID Buffer;



    } XSTATE_CONTEXT,*PXSTATE_CONTEXT;

    typedef struct _SCOPE_TABLE_AMD64 {
      DWORD Count;
      struct {
 DWORD BeginAddress;
 DWORD EndAddress;
 DWORD HandlerAddress;
 DWORD JumpTarget;
      } ScopeRecord[1];
    } SCOPE_TABLE_AMD64,*PSCOPE_TABLE_AMD64;
# 1394 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define BitTest
#define BitTestAndComplement
#define BitTestAndSet
#define BitTestAndReset
#define BitTest64
#define BitTestAndComplement64
#define BitTestAndSet64
#define BitTestAndReset64
# 1412 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define BitScanForward
#define BitScanReverse
#define BitScanForward64
#define BitScanReverse64






#define InterlockedIncrement16
#define InterlockedDecrement16
#define InterlockedCompareExchange16

#define InterlockedAnd
#define InterlockedOr
#define InterlockedXor
#define InterlockedIncrement
#define InterlockedIncrementAcquire
#define InterlockedIncrementRelease
#define InterlockedDecrement
#define InterlockedDecrementAcquire
#define InterlockedDecrementRelease
#define InterlockedAdd
#define InterlockedExchange
#define InterlockedExchangeAdd
#define InterlockedCompareExchange
#define InterlockedCompareExchangeAcquire
#define InterlockedCompareExchangeRelease

#define InterlockedAnd64
#define InterlockedAndAffinity
#define InterlockedOr64
#define InterlockedOrAffinity
#define InterlockedXor64
#define InterlockedIncrement64
#define InterlockedDecrement64
#define InterlockedAdd64
#define InterlockedExchange64
#define InterlockedExchangeAcquire64
#define InterlockedExchangeAdd64
#define InterlockedCompareExchange64
#define InterlockedCompareExchangeAcquire64
#define InterlockedCompareExchangeRelease64

#define InterlockedExchangePointer
#define InterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerAcquire
#define InterlockedCompareExchangePointerRelease

#define InterlockedExchangeAddSizeT
#define InterlockedIncrementSizeT
#define InterlockedDecrementSizeT
# 1475 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    LONG _InterlockedAdd(LONG volatile *Addend,LONG Value);




    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG _InterlockedAdd(LONG volatile *Addend,LONG Value) { return _InterlockedExchangeAdd(Addend,Value) + Value; }


    LONG64 _InterlockedAdd64(LONG64 volatile *Addend,LONG64 Value);




    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG64 _InterlockedAdd64(LONG64 volatile *Addend,LONG64 Value) { return _InterlockedExchangeAdd64(Addend,Value) + Value; }

#define CacheLineFlush




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 1 3 4
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 3 4
#define _X86INTRIN_H_INCLUDED

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ia32intrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ia32intrin.h" 3 4
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsfd (int __X)
{
  return __builtin_ctz (__X);
}


extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsrd (int __X)
{
  return __builtin_ia32_bsrsi (__X);
}


extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bswapd (int __X)
{
  return __builtin_bswap32 (__X);
}


#pragma GCC push_options
#pragma GCC target("sse4.2")
#define __DISABLE_SSE4_2__



extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32b (unsigned int __C, unsigned char __V)
{
  return __builtin_ia32_crc32qi (__C, __V);
}

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32w (unsigned int __C, unsigned short __V)
{
  return __builtin_ia32_crc32hi (__C, __V);
}

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32d (unsigned int __C, unsigned int __V)
{
  return __builtin_ia32_crc32si (__C, __V);
}


#undef __DISABLE_SSE4_2__
#pragma GCC pop_options



extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__popcntd (unsigned int __X)
{
  return __builtin_popcount (__X);
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdpmc (int __S)
{
  return __builtin_ia32_rdpmc (__S);
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdtsc (void)
{
  return __builtin_ia32_rdtsc ();
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdtscp (unsigned int *__A)
{
  return __builtin_ia32_rdtscp (__A);
}


extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolb (unsigned char __X, int __C)
{
  return __builtin_ia32_rolqi (__X, __C);
}


extern __inline unsigned short
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolw (unsigned short __X, int __C)
{
  return __builtin_ia32_rolhi (__X, __C);
}


extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rold (unsigned int __X, int __C)
{
  return (__X << __C) | (__X >> (32 - __C));
}


extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorb (unsigned char __X, int __C)
{
  return __builtin_ia32_rorqi (__X, __C);
}


extern __inline unsigned short
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorw (unsigned short __X, int __C)
{
  return __builtin_ia32_rorhi (__X, __C);
}


extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rord (unsigned int __X, int __C)
{
  return (__X >> __C) | (__X << (32 - __C));
}


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__pause (void)
{
  __builtin_ia32_pause ();
}



extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsfq (long long __X)
{
  return __builtin_ctzll (__X);
}


extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsrq (long long __X)
{
  return __builtin_ia32_bsrdi (__X);
}


extern __inline long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bswapq (long long __X)
{
  return __builtin_bswap64 (__X);
}


#pragma GCC push_options
#pragma GCC target("sse4.2")
#define __DISABLE_SSE4_2__



extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32q (unsigned long long __C, unsigned long long __V)
{
  return __builtin_ia32_crc32di (__C, __V);
}


#undef __DISABLE_SSE4_2__
#pragma GCC pop_options



extern __inline long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__popcntq (unsigned long long __X)
{
  return __builtin_popcountll (__X);
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolq (unsigned long long __X, int __C)
{
  return (__X << __C) | (__X >> (64 - __C));
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorq (unsigned long long __X, int __C)
{
  return (__X >> __C) | (__X << (64 - __C));
}


extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__readeflags (void)
{
  return __builtin_ia32_readeflags_u64 ();
}


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__writeeflags (unsigned long long X)
{
  __builtin_ia32_writeeflags_u64 (X);
}

#define _bswap64
#define _popcnt64
# 285 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ia32intrin.h" 3 4
#define _lrotl
#define _lrotr


#define _bit_scan_forward
#define _bit_scan_reverse
#define _bswap
#define _popcnt32
#define _rdpmc
#define _rdtsc
#define _rdtscp
#define _rotwl
#define _rotwr
#define _rotl
#define _rotr
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mmintrin.h" 3 4
#define _MMINTRIN_H_INCLUDED
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mmintrin.h" 3 4
typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));


typedef int __v2si __attribute__ ((__vector_size__ (8)));
typedef short __v4hi __attribute__ ((__vector_size__ (8)));
typedef char __v8qi __attribute__ ((__vector_size__ (8)));
typedef long long __v1di __attribute__ ((__vector_size__ (8)));
typedef float __v2sf __attribute__ ((__vector_size__ (8)));


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_empty (void)
{
  __builtin_ia32_emms ();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_empty (void)
{
  _mm_empty ();
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_si64 (int __i)
{
  return (__m64) __builtin_ia32_vec_init_v2si (__i, 0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_from_int (int __i)
{
  return _mm_cvtsi32_si64 (__i);
}





extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_from_int64 (long long __i)
{
  return (__m64) __i;
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_m64 (long long __i)
{
  return (__m64) __i;
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_si64 (long long __i)
{
  return (__m64) __i;
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi64x (long long __i)
{
  return (__m64) __i;
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si32 (__m64 __i)
{
  return __builtin_ia32_vec_ext_v2si ((__v2si)__i, 0);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_to_int (__m64 __i)
{
  return _mm_cvtsi64_si32 (__i);
}





extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_to_int64 (__m64 __i)
{
  return (long long)__i;
}

extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtm64_si64 (__m64 __i)
{
  return (long long)__i;
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si64x (__m64 __i)
{
  return (long long)__i;
}





extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packsswb ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packsswb (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pi16 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packssdw ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packssdw (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pi32 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packuswb ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packuswb (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pu16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhbw ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhbw (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhwd (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhdq ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhdq (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi32 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpcklbw ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpcklbw (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpcklwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpcklwd (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckldq ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckldq (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi32 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddb (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi8 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddw (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddd (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi32 (__m1, __m2);
}
# 315 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mmintrin.h" 3 4
extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_si64 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddq ((__v1di)__m1, (__v1di)__m2);
}







extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddsb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddsb (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddsw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddsw (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pu8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddusb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddusb (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pu8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddusw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddusw (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pu16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubb (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi8 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubw (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubd (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi32 (__m1, __m2);
}
# 427 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mmintrin.h" 3 4
extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_si64 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubq ((__v1di)__m1, (__v1di)__m2);
}







extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubsb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubsb (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubsw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubsw (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pu8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubusb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubusb (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pu8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubusw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubusw (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pu16 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_madd_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmaddwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaddwd (__m64 __m1, __m64 __m2)
{
  return _mm_madd_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmulhw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmulhw (__m64 __m1, __m64 __m2)
{
  return _mm_mulhi_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mullo_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmullw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmullw (__m64 __m1, __m64 __m2)
{
  return _mm_mullo_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psllw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllw (__m64 __m, __m64 __count)
{
  return _mm_sll_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psllwi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllwi (__m64 __m, int __count)
{
  return _mm_slli_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_pslld ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pslld (__m64 __m, __m64 __count)
{
  return _mm_sll_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_pslldi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pslldi (__m64 __m, int __count)
{
  return _mm_slli_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_si64 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psllq ((__v1di)__m, (__v1di)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllq (__m64 __m, __m64 __count)
{
  return _mm_sll_si64 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_si64 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psllqi ((__v1di)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllqi (__m64 __m, int __count)
{
  return _mm_slli_si64 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psraw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psraw (__m64 __m, __m64 __count)
{
  return _mm_sra_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrawi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrawi (__m64 __m, int __count)
{
  return _mm_srai_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrad ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrad (__m64 __m, __m64 __count)
{
  return _mm_sra_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psradi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psradi (__m64 __m, int __count)
{
  return _mm_srai_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrlw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlw (__m64 __m, __m64 __count)
{
  return _mm_srl_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrlwi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlwi (__m64 __m, int __count)
{
  return _mm_srli_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrld ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrld (__m64 __m, __m64 __count)
{
  return _mm_srl_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrldi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrldi (__m64 __m, int __count)
{
  return _mm_srli_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_si64 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrlq ((__v1di)__m, (__v1di)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlq (__m64 __m, __m64 __count)
{
  return _mm_srl_si64 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_si64 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrlqi ((__v1di)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlqi (__m64 __m, int __count)
{
  return _mm_srli_si64 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pand (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pand (__m64 __m1, __m64 __m2)
{
  return _mm_and_si64 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pandn (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pandn (__m64 __m1, __m64 __m2)
{
  return _mm_andnot_si64 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_por (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_por (__m64 __m1, __m64 __m2)
{
  return _mm_or_si64 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pxor (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pxor (__m64 __m1, __m64 __m2)
{
  return _mm_xor_si64 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqb (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi8 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtb (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqw (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi16 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtw (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqd (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi32 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtd (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi32 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_si64 (void)
{
  return (__m64)0LL;
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi32 (int __i1, int __i0)
{
  return (__m64) __builtin_ia32_vec_init_v2si (__i0, __i1);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi16 (short __w3, short __w2, short __w1, short __w0)
{
  return (__m64) __builtin_ia32_vec_init_v4hi (__w0, __w1, __w2, __w3);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi8 (char __b7, char __b6, char __b5, char __b4,
      char __b3, char __b2, char __b1, char __b0)
{
  return (__m64) __builtin_ia32_vec_init_v8qi (__b0, __b1, __b2, __b3,
            __b4, __b5, __b6, __b7);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi32 (int __i0, int __i1)
{
  return _mm_set_pi32 (__i1, __i0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi16 (short __w0, short __w1, short __w2, short __w3)
{
  return _mm_set_pi16 (__w3, __w2, __w1, __w0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi8 (char __b0, char __b1, char __b2, char __b3,
       char __b4, char __b5, char __b6, char __b7)
{
  return _mm_set_pi8 (__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi32 (int __i)
{
  return _mm_set_pi32 (__i, __i);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi16 (short __w)
{
  return _mm_set_pi16 (__w, __w, __w, __w);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi8 (char __b)
{
  return _mm_set_pi8 (__b, __b, __b, __b, __b, __b, __b, __b);
}
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _XMMINTRIN_H_INCLUDED





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mm_malloc.h" 1 3 4
# 35 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 2 3 4


enum _mm_hint
{

  _MM_HINT_ET0 = 7,
  _MM_HINT_ET1 = 6,
  _MM_HINT_T0 = 3,
  _MM_HINT_T1 = 2,
  _MM_HINT_T2 = 1,
  _MM_HINT_NTA = 0
};
# 57 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _mm_prefetch
# 69 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));


typedef float __v4sf __attribute__ ((__vector_size__ (16)));


#define _MM_SHUFFLE



#define _MM_EXCEPT_MASK
#define _MM_EXCEPT_INVALID
#define _MM_EXCEPT_DENORM
#define _MM_EXCEPT_DIV_ZERO
#define _MM_EXCEPT_OVERFLOW
#define _MM_EXCEPT_UNDERFLOW
#define _MM_EXCEPT_INEXACT

#define _MM_MASK_MASK
#define _MM_MASK_INVALID
#define _MM_MASK_DENORM
#define _MM_MASK_DIV_ZERO
#define _MM_MASK_OVERFLOW
#define _MM_MASK_UNDERFLOW
#define _MM_MASK_INEXACT

#define _MM_ROUND_MASK
#define _MM_ROUND_NEAREST
#define _MM_ROUND_DOWN
#define _MM_ROUND_UP
#define _MM_ROUND_TOWARD_ZERO

#define _MM_FLUSH_ZERO_MASK
#define _MM_FLUSH_ZERO_ON
#define _MM_FLUSH_ZERO_OFF


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_ps (void)
{
  __m128 __Y = __Y;
  return __Y;
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_ps (void)
{
  return __extension__ (__m128){ 0.0f, 0.0f, 0.0f, 0.0f };
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_addss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_subss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_mulss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_divss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_sqrtss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_rcpss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrtss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_minss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_maxss ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_addps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_subps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_mulps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_divps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_sqrtps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rcpps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrtps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_minps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_maxps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_andps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_andnps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_orps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_xorps (__A, __B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpeqss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpltss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpless ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpltss ((__v4sf) __B,
        (__v4sf)
        __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpless ((__v4sf) __B,
        (__v4sf)
        __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpneqss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnltss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnless ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpnltss ((__v4sf) __B,
         (__v4sf)
         __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpnless ((__v4sf) __B,
         (__v4sf)
         __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpordss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpunordss ((__v4sf)__A, (__v4sf)__B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpeqps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpltps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpleps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpgtps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpgeps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpneqps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnltps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnleps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpngtps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpngeps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpordps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpunordps ((__v4sf)__A, (__v4sf)__B);
}




extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comieq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comieq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comilt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comilt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comile_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comile ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comigt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comigt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comige_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comige ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comineq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comineq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomieq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomieq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomilt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomilt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomile_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomile ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomigt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomigt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomige_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomige ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomineq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomineq ((__v4sf)__A, (__v4sf)__B);
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si32 (__m128 __A)
{
  return __builtin_ia32_cvtss2si ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_ss2si (__m128 __A)
{
  return _mm_cvtss_si32 (__A);
}






extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si64 (__m128 __A)
{
  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si64x (__m128 __A)
{
  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi32 (__m128 __A)
{
  return (__m64) __builtin_ia32_cvtps2pi ((__v4sf) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_ps2pi (__m128 __A)
{
  return _mm_cvtps_pi32 (__A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si32 (__m128 __A)
{
  return __builtin_ia32_cvttss2si ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtt_ss2si (__m128 __A)
{
  return _mm_cvttss_si32 (__A);
}





extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si64 (__m128 __A)
{
  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si64x (__m128 __A)
{
  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttps_pi32 (__m128 __A)
{
  return (__m64) __builtin_ia32_cvttps2pi ((__v4sf) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtt_ps2pi (__m128 __A)
{
  return _mm_cvttps_pi32 (__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_ss (__m128 __A, int __B)
{
  return (__m128) __builtin_ia32_cvtsi2ss ((__v4sf) __A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_si2ss (__m128 __A, int __B)
{
  return _mm_cvtsi32_ss (__A, __B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_ss (__m128 __A, long long __B)
{
  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_ss (__m128 __A, long long __B)
{
  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);
}




extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32_ps (__m128 __A, __m64 __B)
{
  return (__m128) __builtin_ia32_cvtpi2ps ((__v4sf) __A, (__v2si)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_pi2ps (__m128 __A, __m64 __B)
{
  return _mm_cvtpi32_ps (__A, __B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi16_ps (__m64 __A)
{
  __v4hi __sign;
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;




  __sign = __builtin_ia32_pcmpgtw ((__v4hi)0LL, (__v4hi)__A);


  __losi = (__v2si) __builtin_ia32_punpcklwd ((__v4hi)__A, __sign);
  __hisi = (__v2si) __builtin_ia32_punpckhwd ((__v4hi)__A, __sign);


  __zero = (__v4sf) _mm_setzero_ps ();
  __ra = __builtin_ia32_cvtpi2ps (__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps (__ra, __hisi);

  return (__m128) __builtin_ia32_movlhps (__ra, __rb);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpu16_ps (__m64 __A)
{
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;


  __losi = (__v2si) __builtin_ia32_punpcklwd ((__v4hi)__A, (__v4hi)0LL);
  __hisi = (__v2si) __builtin_ia32_punpckhwd ((__v4hi)__A, (__v4hi)0LL);


  __zero = (__v4sf) _mm_setzero_ps ();
  __ra = __builtin_ia32_cvtpi2ps (__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps (__ra, __hisi);

  return (__m128) __builtin_ia32_movlhps (__ra, __rb);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi8_ps (__m64 __A)
{
  __v8qi __sign;




  __sign = __builtin_ia32_pcmpgtb ((__v8qi)0LL, (__v8qi)__A);


  __A = (__m64) __builtin_ia32_punpcklbw ((__v8qi)__A, __sign);

  return _mm_cvtpi16_ps(__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpu8_ps(__m64 __A)
{
  __A = (__m64) __builtin_ia32_punpcklbw ((__v8qi)__A, (__v8qi)0LL);
  return _mm_cvtpu16_ps(__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32x2_ps(__m64 __A, __m64 __B)
{
  __v4sf __zero = (__v4sf) _mm_setzero_ps ();
  __v4sf __sfa = __builtin_ia32_cvtpi2ps (__zero, (__v2si)__A);
  __v4sf __sfb = __builtin_ia32_cvtpi2ps (__sfa, (__v2si)__B);
  return (__m128) __builtin_ia32_movlhps (__sfa, __sfb);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi16(__m128 __A)
{
  __v4sf __hisf = (__v4sf)__A;
  __v4sf __losf = __builtin_ia32_movhlps (__hisf, __hisf);
  __v2si __hisi = __builtin_ia32_cvtps2pi (__hisf);
  __v2si __losi = __builtin_ia32_cvtps2pi (__losf);
  return (__m64) __builtin_ia32_packssdw (__hisi, __losi);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi8(__m128 __A)
{
  __v4hi __tmp = (__v4hi) _mm_cvtps_pi16 (__A);
  return (__m64) __builtin_ia32_packsswb (__tmp, (__v4hi)0LL);
}
# 746 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _mm_shuffle_ps





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_unpckhps ((__v4sf)__A, (__v4sf)__B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_unpcklps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadh_pi (__m128 __A, __m64 const *__P)
{
  return (__m128) __builtin_ia32_loadhps ((__v4sf)__A, (const __v2sf *)__P);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeh_pi (__m64 *__P, __m128 __A)
{
  __builtin_ia32_storehps ((__v2sf *)__P, (__v4sf)__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movehl_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movhlps ((__v4sf)__A, (__v4sf)__B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movelh_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movlhps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_pi (__m128 __A, __m64 const *__P)
{
  return (__m128) __builtin_ia32_loadlps ((__v4sf)__A, (const __v2sf *)__P);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_pi (__m64 *__P, __m128 __A)
{
  __builtin_ia32_storelps ((__v2sf *)__P, (__v4sf)__A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_ps (__m128 __A)
{
  return __builtin_ia32_movmskps ((__v4sf)__A);
}


extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_getcsr (void)
{
  return __builtin_ia32_stmxcsr ();
}


extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_EXCEPTION_STATE (void)
{
  return _mm_getcsr() & 0x003f;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_EXCEPTION_MASK (void)
{
  return _mm_getcsr() & 0x1f80;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_ROUNDING_MODE (void)
{
  return _mm_getcsr() & 0x6000;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_FLUSH_ZERO_MODE (void)
{
  return _mm_getcsr() & 0x8000;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setcsr (unsigned int __I)
{
  __builtin_ia32_ldmxcsr (__I);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_EXCEPTION_STATE(unsigned int __mask)
{
  _mm_setcsr((_mm_getcsr() & ~0x003f) | __mask);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_EXCEPTION_MASK (unsigned int __mask)
{
  _mm_setcsr((_mm_getcsr() & ~0x1f80) | __mask);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_ROUNDING_MODE (unsigned int __mode)
{
  _mm_setcsr((_mm_getcsr() & ~0x6000) | __mode);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)
{
  _mm_setcsr((_mm_getcsr() & ~0x8000) | __mode);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ss (float __F)
{
  return __extension__ (__m128)(__v4sf){ __F, 0.0f, 0.0f, 0.0f };
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_ps (float __F)
{
  return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ps1 (float __F)
{
  return _mm_set1_ps (__F);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ss (float const *__P)
{
  return _mm_set_ss (*__P);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load1_ps (float const *__P)
{
  return _mm_set1_ps (*__P);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ps1 (float const *__P)
{
  return _mm_load1_ps (__P);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ps (float const *__P)
{
  return (__m128) *(__v4sf *)__P;
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_ps (float const *__P)
{
  return (__m128) __builtin_ia32_loadups (__P);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadr_ps (float const *__P)
{
  __v4sf __tmp = *(__v4sf *)__P;
  return (__m128) __builtin_ia32_shufps (__tmp, __tmp, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ps (const float __Z, const float __Y, const float __X, const float __W)
{
  return __extension__ (__m128)(__v4sf){ __W, __X, __Y, __Z };
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_ps (float __Z, float __Y, float __X, float __W)
{
  return __extension__ (__m128)(__v4sf){ __Z, __Y, __X, __W };
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ss (float *__P, __m128 __A)
{
  *__P = __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);
}

extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_f32 (__m128 __A)
{
  return __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ps (float *__P, __m128 __A)
{
  *(__v4sf *)__P = (__v4sf)__A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_ps (float *__P, __m128 __A)
{
  __builtin_ia32_storeups (__P, (__v4sf)__A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store1_ps (float *__P, __m128 __A)
{
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, (((0) << 6) | ((0) << 4) | ((0) << 2) | (0)));
  _mm_storeu_ps (__P, __tmp);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ps1 (float *__P, __m128 __A)
{
  _mm_store1_ps (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storer_ps (float *__P, __m128 __A)
{
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
  _mm_store_ps (__P, __tmp);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf)__A, (__v4sf)__B);
}
# 1028 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _mm_extract_pi16


#define _m_pextrw
# 1049 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _mm_insert_pi16



#define _m_pinsrw



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pi16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmaxsw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaxsw (__m64 __A, __m64 __B)
{
  return _mm_max_pi16 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmaxub ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaxub (__m64 __A, __m64 __B)
{
  return _mm_max_pu8 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pi16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pminsw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pminsw (__m64 __A, __m64 __B)
{
  return _mm_min_pi16 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pminub ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pminub (__m64 __A, __m64 __B)
{
  return _mm_min_pu8 (__A, __B);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_pi8 (__m64 __A)
{
  return __builtin_ia32_pmovmskb ((__v8qi)__A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmovmskb (__m64 __A)
{
  return _mm_movemask_pi8 (__A);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_pu16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmulhuw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmulhuw (__m64 __A, __m64 __B)
{
  return _mm_mulhi_pu16 (__A, __B);
}
# 1150 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
#define _mm_shuffle_pi16


#define _m_pshufw





extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskmove_si64 (__m64 __A, __m64 __N, char *__P)
{
  __builtin_ia32_maskmovq ((__v8qi)__A, (__v8qi)__N, __P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_maskmovq (__m64 __A, __m64 __N, char *__P)
{
  _mm_maskmove_si64 (__A, __N, __P);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pavgb ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pavgb (__m64 __A, __m64 __B)
{
  return _mm_avg_pu8 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_pu16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pavgw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pavgw (__m64 __A, __m64 __B)
{
  return _mm_avg_pu16 (__A, __B);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sad_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_psadbw ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psadbw (__m64 __A, __m64 __B)
{
  return _mm_sad_pu8 (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_pi (__m64 *__P, __m64 __A)
{
  __builtin_ia32_movntq ((unsigned long long *)__P, (unsigned long long)__A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_ps (float *__P, __m128 __A)
{
  __builtin_ia32_movntps (__P, (__v4sf)__A);
}



extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sfence (void)
{
  __builtin_ia32_sfence ();
}




extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_pause (void)
{
  __builtin_ia32_pause ();
}


#define _MM_TRANSPOSE4_PS
# 1258 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
#define _EMMINTRIN_H_INCLUDED


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 1 3 4
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 2 3 4
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
typedef double __v2df __attribute__ ((__vector_size__ (16)));
typedef long long __v2di __attribute__ ((__vector_size__ (16)));
typedef int __v4si __attribute__ ((__vector_size__ (16)));
typedef short __v8hi __attribute__ ((__vector_size__ (16)));
typedef char __v16qi __attribute__ ((__vector_size__ (16)));



typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));
typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));


#define _MM_SHUFFLE2



extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_sd (double __F)
{
  return __extension__ (__m128d){ __F, 0.0 };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pd (double __F)
{
  return __extension__ (__m128d){ __F, __F };
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pd1 (double __F)
{
  return _mm_set1_pd (__F);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pd (double __W, double __X)
{
  return __extension__ (__m128d){ __X, __W };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pd (double __W, double __X)
{
  return __extension__ (__m128d){ __W, __X };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_pd (void)
{
  __m128d __Y = __Y;
  return __Y;
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_pd (void)
{
  return __extension__ (__m128d){ 0.0, 0.0 };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_pd (double const *__P)
{
  return *(__m128d *)__P;
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_pd (double const *__P)
{
  return __builtin_ia32_loadupd (__P);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load1_pd (double const *__P)
{
  return _mm_set1_pd (*__P);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_sd (double const *__P)
{
  return _mm_set_sd (*__P);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_pd1 (double const *__P)
{
  return _mm_load1_pd (__P);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadr_pd (double const *__P)
{
  __m128d __tmp = _mm_load_pd (__P);
  return __builtin_ia32_shufpd (__tmp, __tmp, (((0) << 1) | (1)));
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_pd (double *__P, __m128d __A)
{
  *(__m128d *)__P = __A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_pd (double *__P, __m128d __A)
{
  __builtin_ia32_storeupd (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_sd (double *__P, __m128d __A)
{
  *__P = __builtin_ia32_vec_ext_v2df (__A, 0);
}

extern __inline double __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_f64 (__m128d __A)
{
  return __builtin_ia32_vec_ext_v2df (__A, 0);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_pd (double *__P, __m128d __A)
{
  _mm_store_sd (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeh_pd (double *__P, __m128d __A)
{
  *__P = __builtin_ia32_vec_ext_v2df (__A, 1);
}



extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store1_pd (double *__P, __m128d __A)
{
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, (((0) << 1) | (0))));
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_pd1 (double *__P, __m128d __A)
{
  _mm_store1_pd (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storer_pd (double *__P, __m128d __A)
{
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, (((0) << 1) | (1))));
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si32 (__m128i __A)
{
  return __builtin_ia32_vec_ext_v4si ((__v4si)__A, 0);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si64 (__m128i __A)
{
  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si64x (__m128i __A)
{
  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_addsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_subpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_subsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_mulpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_mulsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_divpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_divsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_pd (__m128d __A)
{
  return (__m128d)__builtin_ia32_sqrtpd ((__v2df)__A);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_sd (__m128d __A, __m128d __B)
{
  __v2df __tmp = __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);
  return (__m128d)__builtin_ia32_sqrtsd ((__v2df)__tmp);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_minpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_minsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_maxpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_maxsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_andpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_andnpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_orpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_xorpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpeqpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpltpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmplepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpgtpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpgepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpneqpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnltpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnlepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpngtpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpngepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpordpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpunordpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpeqsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpltsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmplesd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpltsd ((__v2df) __B,
         (__v2df)
         __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmplesd ((__v2df) __B,
         (__v2df)
         __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpneqsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnltsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnlesd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpnltsd ((__v2df) __B,
          (__v2df)
          __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpnlesd ((__v2df) __B,
          (__v2df)
          __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpordsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpunordsd ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comieq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdeq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comilt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdlt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comile_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdle ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comigt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdgt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comige_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdge ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comineq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdneq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomieq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdeq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomilt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdlt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomile_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdle ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomigt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdgt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomige_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdge ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomineq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdneq ((__v2df)__A, (__v2df)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi64x (long long __q1, long long __q0)
{
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi64 (__m64 __q1, __m64 __q0)
{
  return _mm_set_epi64x ((long long)__q1, (long long)__q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi32 (int __q3, int __q2, int __q1, int __q0)
{
  return __extension__ (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi16 (short __q7, short __q6, short __q5, short __q4,
        short __q3, short __q2, short __q1, short __q0)
{
  return __extension__ (__m128i)(__v8hi){
    __q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi8 (char __q15, char __q14, char __q13, char __q12,
       char __q11, char __q10, char __q09, char __q08,
       char __q07, char __q06, char __q05, char __q04,
       char __q03, char __q02, char __q01, char __q00)
{
  return __extension__ (__m128i)(__v16qi){
    __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
    __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15
  };
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi64x (long long __A)
{
  return _mm_set_epi64x (__A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi64 (__m64 __A)
{
  return _mm_set_epi64 (__A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi32 (int __A)
{
  return _mm_set_epi32 (__A, __A, __A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi16 (short __A)
{
  return _mm_set_epi16 (__A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi8 (char __A)
{
  return _mm_set_epi8 (__A, __A, __A, __A, __A, __A, __A, __A,
         __A, __A, __A, __A, __A, __A, __A, __A);
}




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi64 (__m64 __q0, __m64 __q1)
{
  return _mm_set_epi64 (__q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi32 (int __q0, int __q1, int __q2, int __q3)
{
  return _mm_set_epi32 (__q3, __q2, __q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi16 (short __q0, short __q1, short __q2, short __q3,
         short __q4, short __q5, short __q6, short __q7)
{
  return _mm_set_epi16 (__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi8 (char __q00, char __q01, char __q02, char __q03,
        char __q04, char __q05, char __q06, char __q07,
        char __q08, char __q09, char __q10, char __q11,
        char __q12, char __q13, char __q14, char __q15)
{
  return _mm_set_epi8 (__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08,
         __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_si128 (__m128i const *__P)
{
  return *__P;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_si128 (__m128i const *__P)
{
  return (__m128i) __builtin_ia32_loaddqu ((char const *)__P);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_epi64 (__m128i const *__P)
{
  return _mm_set_epi64 ((__m64)0LL, *(__m64 *)__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_si128 (__m128i *__P, __m128i __B)
{
  *__P = __B;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_si128 (__m128i *__P, __m128i __B)
{
  __builtin_ia32_storedqu ((char *)__P, (__v16qi)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_epi64 (__m128i *__P, __m128i __B)
{
  *(long long *)__P = __builtin_ia32_vec_ext_v2di ((__v2di)__B, 0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movepi64_pi64 (__m128i __B)
{
  return (__m64) __builtin_ia32_vec_ext_v2di ((__v2di)__B, 0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movpi64_epi64 (__m64 __A)
{
  return _mm_set_epi64 ((__m64)0LL, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_epi64 (__m128i __A)
{
  return (__m128i)__builtin_ia32_movq128 ((__v2di) __A);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_si128 (void)
{
  __m128i __Y = __Y;
  return __Y;
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_si128 (void)
{
  return __extension__ (__m128i)(__v4si){ 0, 0, 0, 0 };
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi32_pd (__m128i __A)
{
  return (__m128d)__builtin_ia32_cvtdq2pd ((__v4si) __A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi32_ps (__m128i __A)
{
  return (__m128)__builtin_ia32_cvtdq2ps ((__v4si) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_epi32 (__m128d __A)
{
  return (__m128i)__builtin_ia32_cvtpd2dq ((__v2df) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_pi32 (__m128d __A)
{
  return (__m64)__builtin_ia32_cvtpd2pi ((__v2df) __A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_ps (__m128d __A)
{
  return (__m128)__builtin_ia32_cvtpd2ps ((__v2df) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttpd_epi32 (__m128d __A)
{
  return (__m128i)__builtin_ia32_cvttpd2dq ((__v2df) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttpd_pi32 (__m128d __A)
{
  return (__m64)__builtin_ia32_cvttpd2pi ((__v2df) __A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32_pd (__m64 __A)
{
  return (__m128d)__builtin_ia32_cvtpi2pd ((__v2si) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_epi32 (__m128 __A)
{
  return (__m128i)__builtin_ia32_cvtps2dq ((__v4sf) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttps_epi32 (__m128 __A)
{
  return (__m128i)__builtin_ia32_cvttps2dq ((__v4sf) __A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pd (__m128 __A)
{
  return (__m128d)__builtin_ia32_cvtps2pd ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si32 (__m128d __A)
{
  return __builtin_ia32_cvtsd2si ((__v2df) __A);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si64 (__m128d __A)
{
  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si64x (__m128d __A)
{
  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si32 (__m128d __A)
{
  return __builtin_ia32_cvttsd2si ((__v2df) __A);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si64 (__m128d __A)
{
  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si64x (__m128d __A)
{
  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_ss (__m128 __A, __m128d __B)
{
  return (__m128)__builtin_ia32_cvtsd2ss ((__v4sf) __A, (__v2df) __B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_sd (__m128d __A, int __B)
{
  return (__m128d)__builtin_ia32_cvtsi2sd ((__v2df) __A, __B);
}



extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_sd (__m128d __A, long long __B)
{
  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_sd (__m128d __A, long long __B)
{
  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_sd (__m128d __A, __m128 __B)
{
  return (__m128d)__builtin_ia32_cvtss2sd ((__v2df) __A, (__v4sf)__B);
}
# 905 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
#define _mm_shuffle_pd




extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_unpckhpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_unpcklpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadh_pd (__m128d __A, double const *__B)
{
  return (__m128d)__builtin_ia32_loadhpd ((__v2df)__A, __B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_pd (__m128d __A, double const *__B)
{
  return (__m128d)__builtin_ia32_loadlpd ((__v2df)__A, __B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_pd (__m128d __A)
{
  return __builtin_ia32_movmskpd ((__v2df)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packsswb128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packus_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhdq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhqdq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckldq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklqdq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddd128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddsb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddusb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddusw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubd128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubsb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubusb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubusw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_madd_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmulhw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mullo_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmullw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_su32 (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pmuludq ((__v2si)__A, (__v2si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmuludq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_pslldi128 ((__v4si)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi64 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psllqi128 ((__v2di)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
}
# 1175 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
#define _mm_srli_si128

#define _mm_slli_si128



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrldi128 ((__v4si)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi64 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrlqi128 ((__v2di)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psraw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrad128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrlw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrld128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrlq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_si128 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pand128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_si128 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pandn128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_si128 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_por128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_si128 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pxor128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpeqb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpeqw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpeqd128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtb128 ((__v16qi)__B, (__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtw128 ((__v8hi)__B, (__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__B, (__v4si)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__A, (__v4si)__B);
}
# 1338 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
#define _mm_extract_epi16

#define _mm_insert_epi16




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaxsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaxub128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pminsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pminub128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_epi8 (__m128i __A)
{
  return __builtin_ia32_pmovmskb128 ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmulhuw128 ((__v8hi)__A, (__v8hi)__B);
}
# 1400 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/emmintrin.h" 3 4
#define _mm_shufflehi_epi16

#define _mm_shufflelo_epi16

#define _mm_shuffle_epi32



extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)
{
  __builtin_ia32_maskmovdqu ((__v16qi)__A, (__v16qi)__B, __C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pavgb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pavgw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sad_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psadbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si32 (int *__A, int __B)
{
  __builtin_ia32_movnti (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si64 (long long int *__A, long long int __B)
{
  __builtin_ia32_movnti64 (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si128 (__m128i *__A, __m128i __B)
{
  __builtin_ia32_movntdq ((__v2di *)__A, (__v2di)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_pd (double *__A, __m128d __B)
{
  __builtin_ia32_movntpd (__A, (__v2df)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_clflush (void const *__A)
{
  __builtin_ia32_clflush (__A);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_lfence (void)
{
  __builtin_ia32_lfence ();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mfence (void)
{
  __builtin_ia32_mfence ();
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_si128 (int __A)
{
  return _mm_set_epi32 (0, 0, 0, __A);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si128 (long long __A)
{
  return _mm_set_epi64x (0, __A);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_si128 (long long __A)
{
  return _mm_set_epi64x (0, __A);
}




extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castpd_ps(__m128d __A)
{
  return (__m128) __A;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castpd_si128(__m128d __A)
{
  return (__m128i) __A;
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castps_pd(__m128 __A)
{
  return (__m128d) __A;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castps_si128(__m128 __A)
{
  return (__m128i) __A;
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castsi128_ps(__m128i __A)
{
  return (__m128) __A;
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castsi128_pd(__m128i __A)
{
  return (__m128d) __A;
}
# 1259 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xmmintrin.h" 2 3 4
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/pmmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/pmmintrin.h" 3 4
#define _PMMINTRIN_H_INCLUDED





#pragma GCC push_options
#pragma GCC target("sse3")
#define __DISABLE_SSE3__



#define _MM_DENORMALS_ZERO_MASK
#define _MM_DENORMALS_ZERO_ON
#define _MM_DENORMALS_ZERO_OFF

#define _MM_SET_DENORMALS_ZERO_MODE

#define _MM_GET_DENORMALS_ZERO_MODE


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_addsub_ps (__m128 __X, __m128 __Y)
{
  return (__m128) __builtin_ia32_addsubps ((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_ps (__m128 __X, __m128 __Y)
{
  return (__m128) __builtin_ia32_haddps ((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_ps (__m128 __X, __m128 __Y)
{
  return (__m128) __builtin_ia32_hsubps ((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movehdup_ps (__m128 __X)
{
  return (__m128) __builtin_ia32_movshdup ((__v4sf)__X);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_moveldup_ps (__m128 __X)
{
  return (__m128) __builtin_ia32_movsldup ((__v4sf)__X);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_addsub_pd (__m128d __X, __m128d __Y)
{
  return (__m128d) __builtin_ia32_addsubpd ((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_pd (__m128d __X, __m128d __Y)
{
  return (__m128d) __builtin_ia32_haddpd ((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_pd (__m128d __X, __m128d __Y)
{
  return (__m128d) __builtin_ia32_hsubpd ((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loaddup_pd (double const *__P)
{
  return _mm_load1_pd (__P);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movedup_pd (__m128d __X)
{
  return ((__m128d)__builtin_ia32_shufpd ((__v2df)(__m128d)(__X), (__v2df)(__m128d)(__X), (int)((((0) << 1) | (0)))));
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_lddqu_si128 (__m128i const *__P)
{
  return (__m128i) __builtin_ia32_lddqu ((char const *)__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_monitor (void const * __P, unsigned int __E, unsigned int __H)
{
  __builtin_ia32_monitor (__P, __E, __H);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mwait (unsigned int __E, unsigned int __H)
{
  __builtin_ia32_mwait (__E, __H);
}


#undef __DISABLE_SSE3__
#pragma GCC pop_options
# 36 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tmmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tmmintrin.h" 3 4
#define _TMMINTRIN_H_INCLUDED





#pragma GCC push_options
#pragma GCC target("ssse3")
#define __DISABLE_SSSE3__


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phaddw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phaddd128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadds_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phaddsw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phaddw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadd_pi32 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phaddd ((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hadds_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phaddsw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phsubw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phsubd128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsubs_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_phsubsw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phsubw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsub_pi32 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phsubd ((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsubs_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_phsubsw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddubs_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmaddubsw128 ((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddubs_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_pmaddubsw ((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhrs_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmulhrsw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhrs_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_pmulhrsw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shuffle_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pshufb128 ((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shuffle_pi8 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_pshufb ((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psignb128 ((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_epi16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psignw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psignd128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_pi8 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_psignb ((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_pi16 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_psignw ((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sign_pi32 (__m64 __X, __m64 __Y)
{
  return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);
}
# 198 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tmmintrin.h" 3 4
#define _mm_alignr_epi8



#define _mm_alignr_pi8





extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_epi8 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pabsb128 ((__v16qi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_epi16 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pabsw128 ((__v8hi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pabsd128 ((__v4si)__X);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_pi8 (__m64 __X)
{
  return (__m64) __builtin_ia32_pabsb ((__v8qi)__X);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_pi16 (__m64 __X)
{
  return (__m64) __builtin_ia32_pabsw ((__v4hi)__X);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_abs_pi32 (__m64 __X)
{
  return (__m64) __builtin_ia32_pabsd ((__v2si)__X);
}


#undef __DISABLE_SSSE3__
#pragma GCC pop_options
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ammintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ammintrin.h" 3 4
#define _AMMINTRIN_H_INCLUDED





#pragma GCC push_options
#pragma GCC target("sse4a")
#define __DISABLE_SSE4A__


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_sd (double * __P, __m128d __Y)
{
  __builtin_ia32_movntsd (__P, (__v2df) __Y);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_ss (float * __P, __m128 __Y)
{
  __builtin_ia32_movntss (__P, (__v4sf) __Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_extract_si64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_extrq ((__v2di) __X, (__v16qi) __Y);
}
# 64 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ammintrin.h" 3 4
#define _mm_extracti_si64




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_insert_si64 (__m128i __X,__m128i __Y)
{
  return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);
}
# 82 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/ammintrin.h" 3 4
#define _mm_inserti_si64






#undef __DISABLE_SSE4A__
#pragma GCC pop_options
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _SMMINTRIN_H_INCLUDED






#pragma GCC push_options
#pragma GCC target("sse4.1")
#define __DISABLE_SSE4_1__



#define _MM_FROUND_TO_NEAREST_INT
#define _MM_FROUND_TO_NEG_INF
#define _MM_FROUND_TO_POS_INF
#define _MM_FROUND_TO_ZERO
#define _MM_FROUND_CUR_DIRECTION

#define _MM_FROUND_RAISE_EXC
#define _MM_FROUND_NO_EXC

#define _MM_FROUND_NINT

#define _MM_FROUND_FLOOR

#define _MM_FROUND_CEIL

#define _MM_FROUND_TRUNC

#define _MM_FROUND_RINT

#define _MM_FROUND_NEARBYINT





extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testz_si128 (__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestz128 ((__v2di)__M, (__v2di)__V);
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testc_si128 (__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestc128 ((__v2di)__M, (__v2di)__V);
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testnzc_si128 (__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestnzc128 ((__v2di)__M, (__v2di)__V);
}


#define _mm_test_all_zeros

#define _mm_test_all_ones


#define _mm_test_mix_ones_zeros
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_round_pd


#define _mm_round_sd
# 138 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_round_ps


#define _mm_round_ss





#define _mm_ceil_pd
#define _mm_ceil_sd

#define _mm_floor_pd
#define _mm_floor_sd

#define _mm_ceil_ps
#define _mm_ceil_ss

#define _mm_floor_ps
#define _mm_floor_ss
# 173 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_blend_epi16




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_blendv_epi8 (__m128i __X, __m128i __Y, __m128i __M)
{
  return (__m128i) __builtin_ia32_pblendvb128 ((__v16qi)__X,
            (__v16qi)__Y,
            (__v16qi)__M);
}
# 198 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_blend_ps




extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_blendv_ps (__m128 __X, __m128 __Y, __m128 __M)
{
  return (__m128) __builtin_ia32_blendvps ((__v4sf)__X,
        (__v4sf)__Y,
        (__v4sf)__M);
}
# 223 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_blend_pd




extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_blendv_pd (__m128d __X, __m128d __Y, __m128d __M)
{
  return (__m128d) __builtin_ia32_blendvpd ((__v2df)__X,
         (__v2df)__Y,
         (__v2df)__M);
}
# 256 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_dp_ps



#define _mm_dp_pd






extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pcmpeqq ((__v2di)__X, (__v2di)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pminsb128 ((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmaxsb128 ((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epu16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pminuw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epu16 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmaxuw128 ((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pminsd128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmaxsd128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epu32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pminud128 ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epu32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmaxud128 ((__v4si)__X, (__v4si)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mullo_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmulld128 ((__v4si)__X, (__v4si)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmuldq128 ((__v4si)__X, (__v4si)__Y);
}
# 353 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_insert_ps





#define _MM_MK_INSERTPS_NDX
# 373 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_extract_ps
# 385 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _MM_EXTRACT_FLOAT




#define _MM_PICK_OUT_PS
# 421 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_insert_epi8



#define _mm_insert_epi32




#define _mm_insert_epi64
# 460 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_extract_epi8

#define _mm_extract_epi32



#define _mm_extract_epi64






extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_minpos_epu16 (__m128i __X)
{
  return (__m128i) __builtin_ia32_phminposuw128 ((__v8hi)__X);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi8_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxbd128 ((__v16qi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi16_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxwd128 ((__v8hi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi8_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxbq128 ((__v16qi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi32_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxdq128 ((__v4si)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi16_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxwq128 ((__v8hi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi8_epi16 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxbw128 ((__v16qi)__X);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu8_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxbd128 ((__v16qi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu16_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxwd128 ((__v8hi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu8_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxbq128 ((__v16qi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu32_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxdq128 ((__v4si)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu16_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxwq128 ((__v8hi)__X);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepu8_epi16 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxbw128 ((__v16qi)__X);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packus_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_packusdw128 ((__v4si)__X, (__v4si)__Y);
}
# 575 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_mpsadbw_epu8





extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_load_si128 (__m128i *__X)
{
  return (__m128i) __builtin_ia32_movntdqa ((__v2di *) __X);
}


#pragma GCC push_options
#pragma GCC target("sse4.2")
#define __DISABLE_SSE4_2__



#define _SIDD_UBYTE_OPS
#define _SIDD_UWORD_OPS
#define _SIDD_SBYTE_OPS
#define _SIDD_SWORD_OPS


#define _SIDD_CMP_EQUAL_ANY
#define _SIDD_CMP_RANGES
#define _SIDD_CMP_EQUAL_EACH
#define _SIDD_CMP_EQUAL_ORDERED


#define _SIDD_POSITIVE_POLARITY
#define _SIDD_NEGATIVE_POLARITY
#define _SIDD_MASKED_POSITIVE_POLARITY
#define _SIDD_MASKED_NEGATIVE_POLARITY


#define _SIDD_LEAST_SIGNIFICANT
#define _SIDD_MOST_SIGNIFICANT


#define _SIDD_BIT_MASK
#define _SIDD_UNIT_MASK
# 654 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_cmpistrm


#define _mm_cmpistri



#define _mm_cmpestrm



#define _mm_cmpestri
# 755 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 3 4
#define _mm_cmpistra


#define _mm_cmpistrc


#define _mm_cmpistro


#define _mm_cmpistrs


#define _mm_cmpistrz



#define _mm_cmpestra



#define _mm_cmpestrc



#define _mm_cmpestro



#define _mm_cmpestrs



#define _mm_cmpestrz







extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pcmpgtq ((__v2di)__X, (__v2di)__Y);
}


#undef __DISABLE_SSE4_2__
#pragma GCC pop_options



#undef __DISABLE_SSE4_1__
#pragma GCC pop_options


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/popcntintrin.h" 1 3 4
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/popcntintrin.h" 3 4
#define _POPCNTINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("popcnt")
#define __DISABLE_POPCNT__



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_popcnt_u32 (unsigned int __X)
{
  return __builtin_popcount (__X);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_popcnt_u64 (unsigned long long __X)
{
  return __builtin_popcountll (__X);
}



#undef __DISABLE_POPCNT__
#pragma GCC pop_options
# 812 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/smmintrin.h" 2 3 4


#pragma GCC push_options
#pragma GCC target("sse4.1")
#define __DISABLE_SSE4_1__



#pragma GCC push_options
#pragma GCC target("sse4.2")
#define __DISABLE_SSE4_2__



extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_crc32_u8 (unsigned int __C, unsigned char __V)
{
  return __builtin_ia32_crc32qi (__C, __V);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_crc32_u16 (unsigned int __C, unsigned short __V)
{
  return __builtin_ia32_crc32hi (__C, __V);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_crc32_u32 (unsigned int __C, unsigned int __V)
{
  return __builtin_ia32_crc32si (__C, __V);
}


extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_crc32_u64 (unsigned long long __C, unsigned long long __V)
{
  return __builtin_ia32_crc32di (__C, __V);
}



#undef __DISABLE_SSE4_2__
#pragma GCC pop_options



#undef __DISABLE_SSE4_1__
#pragma GCC pop_options
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/wmmintrin.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/wmmintrin.h" 3 4
#define _WMMINTRIN_H_INCLUDED







#pragma GCC push_options
#pragma GCC target("aes")
#define __DISABLE_AES__




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_aesdec_si128 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_aesdec128 ((__v2di)__X, (__v2di)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_aesdeclast_si128 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_aesdeclast128 ((__v2di)__X,
       (__v2di)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_aesenc_si128 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_aesenc128 ((__v2di)__X, (__v2di)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_aesenclast_si128 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_aesenclast128 ((__v2di)__X, (__v2di)__Y);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_aesimc_si128 (__m128i __X)
{
  return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);
}
# 92 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/wmmintrin.h" 3 4
#define _mm_aeskeygenassist_si128





#undef __DISABLE_AES__
#pragma GCC pop_options





#pragma GCC push_options
#pragma GCC target("pclmul")
#define __DISABLE_PCLMUL__
# 122 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/wmmintrin.h" 3 4
#define _mm_clmulepi64_si128





#undef __DISABLE_PCLMUL__
#pragma GCC pop_options
# 44 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 1 3 4
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 3 4
#define _IMMINTRIN_H_INCLUDED
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 1 3 4
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _AVXINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx")
#define __DISABLE_AVX__



typedef double __v4df __attribute__ ((__vector_size__ (32)));
typedef float __v8sf __attribute__ ((__vector_size__ (32)));
typedef long long __v4di __attribute__ ((__vector_size__ (32)));
typedef int __v8si __attribute__ ((__vector_size__ (32)));
typedef short __v16hi __attribute__ ((__vector_size__ (32)));
typedef char __v32qi __attribute__ ((__vector_size__ (32)));



typedef float __m256 __attribute__ ((__vector_size__ (32),
         __may_alias__));
typedef long long __m256i __attribute__ ((__vector_size__ (32),
       __may_alias__));
typedef double __m256d __attribute__ ((__vector_size__ (32),
           __may_alias__));




#define _CMP_EQ_OQ

#define _CMP_LT_OS

#define _CMP_LE_OS

#define _CMP_UNORD_Q

#define _CMP_NEQ_UQ

#define _CMP_NLT_US

#define _CMP_NLE_US

#define _CMP_ORD_Q

#define _CMP_EQ_UQ

#define _CMP_NGE_US

#define _CMP_NGT_US

#define _CMP_FALSE_OQ

#define _CMP_NEQ_OQ

#define _CMP_GE_OS

#define _CMP_GT_OS

#define _CMP_TRUE_UQ

#define _CMP_EQ_OS

#define _CMP_LT_OQ

#define _CMP_LE_OQ

#define _CMP_UNORD_S

#define _CMP_NEQ_US

#define _CMP_NLT_UQ

#define _CMP_NLE_UQ

#define _CMP_ORD_S

#define _CMP_EQ_US

#define _CMP_NGE_UQ

#define _CMP_NGT_UQ

#define _CMP_FALSE_OS

#define _CMP_NEQ_OS

#define _CMP_GE_OQ

#define _CMP_GT_OQ

#define _CMP_TRUE_US

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_addpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_addps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_addsub_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_addsubpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_addsub_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_addsubps256 ((__v8sf)__A, (__v8sf)__B);
}


extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_and_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_andpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_and_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_andnot_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_andnpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_andnot_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
}
# 193 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_blend_pd



#define _mm256_blend_ps




extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_blendv_pd (__m256d __X, __m256d __Y, __m256d __M)
{
  return (__m256d) __builtin_ia32_blendvpd256 ((__v4df)__X,
            (__v4df)__Y,
            (__v4df)__M);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_blendv_ps (__m256 __X, __m256 __Y, __m256 __M)
{
  return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
           (__v8sf)__Y,
           (__v8sf)__M);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_div_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_divpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_div_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_divps256 ((__v8sf)__A, (__v8sf)__B);
}
# 242 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_dp_ps




extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hadd_pd (__m256d __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_haddpd256 ((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hadd_ps (__m256 __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_haddps256 ((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hsub_pd (__m256d __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_hsubpd256 ((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hsub_ps (__m256 __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_hsubps256 ((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_maxpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_maxps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_minpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_minps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mul_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_mulpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mul_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_mulps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_or_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_orpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_or_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_orps256 ((__v8sf)__A, (__v8sf)__B);
}
# 334 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_shuffle_pd



#define _mm256_shuffle_ps




extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_subpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_subps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_xor_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_xorpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_xor_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_xorps256 ((__v8sf)__A, (__v8sf)__B);
}
# 406 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm_cmp_pd



#define _mm_cmp_ps



#define _mm256_cmp_pd



#define _mm256_cmp_ps



#define _mm_cmp_sd



#define _mm_cmp_ss




extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi32_pd (__m128i __A)
{
  return (__m256d)__builtin_ia32_cvtdq2pd256 ((__v4si) __A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi32_ps (__m256i __A)
{
  return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtpd_ps (__m256d __A)
{
  return (__m128)__builtin_ia32_cvtpd2ps256 ((__v4df) __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtps_epi32 (__m256 __A)
{
  return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtps_pd (__m128 __A)
{
  return (__m256d)__builtin_ia32_cvtps2pd256 ((__v4sf) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvttpd_epi32 (__m256d __A)
{
  return (__m128i)__builtin_ia32_cvttpd2dq256 ((__v4df) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtpd_epi32 (__m256d __A)
{
  return (__m128i)__builtin_ia32_cvtpd2dq256 ((__v4df) __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvttps_epi32 (__m256 __A)
{
  return (__m256i)__builtin_ia32_cvttps2dq256 ((__v8sf) __A);
}
# 528 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_extractf128_pd



#define _mm256_extractf128_ps



#define _mm256_extractf128_si256



#define _mm256_extract_epi32






#define _mm256_extract_epi16






#define _mm256_extract_epi8







#define _mm256_extract_epi64
# 571 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_zeroall (void)
{
  __builtin_ia32_vzeroall ();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_zeroupper (void)
{
  __builtin_ia32_vzeroupper ();
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_permutevar_pd (__m128d __A, __m128i __C)
{
  return (__m128d) __builtin_ia32_vpermilvarpd ((__v2df)__A,
      (__v2di)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_permutevar_pd (__m256d __A, __m256i __C)
{
  return (__m256d) __builtin_ia32_vpermilvarpd256 ((__v4df)__A,
         (__v4di)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_permutevar_ps (__m128 __A, __m128i __C)
{
  return (__m128) __builtin_ia32_vpermilvarps ((__v4sf)__A,
            (__v4si)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_permutevar_ps (__m256 __A, __m256i __C)
{
  return (__m256) __builtin_ia32_vpermilvarps256 ((__v8sf)__A,
        (__v8si)__C);
}
# 636 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm_permute_pd


#define _mm256_permute_pd


#define _mm_permute_ps


#define _mm256_permute_ps
# 674 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_permute2f128_pd




#define _mm256_permute2f128_ps




#define _mm256_permute2f128_si256





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcast_ss (float const *__X)
{
  return (__m128) __builtin_ia32_vbroadcastss (__X);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcast_sd (double const *__X)
{
  return (__m256d) __builtin_ia32_vbroadcastsd256 (__X);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcast_ss (float const *__X)
{
  return (__m256) __builtin_ia32_vbroadcastss256 (__X);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcast_pd (__m128d const *__X)
{
  return (__m256d) __builtin_ia32_vbroadcastf128_pd256 (__X);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcast_ps (__m128 const *__X)
{
  return (__m256) __builtin_ia32_vbroadcastf128_ps256 (__X);
}
# 779 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_insertf128_pd




#define _mm256_insertf128_ps




#define _mm256_insertf128_si256




#define _mm256_insert_epi32







#define _mm256_insert_epi16







#define _mm256_insert_epi8
# 819 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_insert_epi64
# 829 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_load_pd (double const *__P)
{
  return *(__m256d *)__P;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_store_pd (double *__P, __m256d __A)
{
  *(__m256d *)__P = __A;
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_load_ps (float const *__P)
{
  return *(__m256 *)__P;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_store_ps (float *__P, __m256 __A)
{
  *(__m256 *)__P = __A;
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_loadu_pd (double const *__P)
{
  return (__m256d) __builtin_ia32_loadupd256 (__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_storeu_pd (double *__P, __m256d __A)
{
  __builtin_ia32_storeupd256 (__P, (__v4df)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_loadu_ps (float const *__P)
{
  return (__m256) __builtin_ia32_loadups256 (__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_storeu_ps (float *__P, __m256 __A)
{
  __builtin_ia32_storeups256 (__P, (__v8sf)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_load_si256 (__m256i const *__P)
{
  return *__P;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_store_si256 (__m256i *__P, __m256i __A)
{
  *__P = __A;
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_loadu_si256 (__m256i const *__P)
{
  return (__m256i) __builtin_ia32_loaddqu256 ((char const *)__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_storeu_si256 (__m256i *__P, __m256i __A)
{
  __builtin_ia32_storedqu256 ((char *)__P, (__v32qi)__A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskload_pd (double const *__P, __m128i __M)
{
  return (__m128d) __builtin_ia32_maskloadpd ((const __v2df *)__P,
           (__v2di)__M);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskstore_pd (double *__P, __m128i __M, __m128d __A)
{
  __builtin_ia32_maskstorepd ((__v2df *)__P, (__v2di)__M, (__v2df)__A);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskload_pd (double const *__P, __m256i __M)
{
  return (__m256d) __builtin_ia32_maskloadpd256 ((const __v4df *)__P,
       (__v4di)__M);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskstore_pd (double *__P, __m256i __M, __m256d __A)
{
  __builtin_ia32_maskstorepd256 ((__v4df *)__P, (__v4di)__M, (__v4df)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskload_ps (float const *__P, __m128i __M)
{
  return (__m128) __builtin_ia32_maskloadps ((const __v4sf *)__P,
          (__v4si)__M);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskstore_ps (float *__P, __m128i __M, __m128 __A)
{
  __builtin_ia32_maskstoreps ((__v4sf *)__P, (__v4si)__M, (__v4sf)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskload_ps (float const *__P, __m256i __M)
{
  return (__m256) __builtin_ia32_maskloadps256 ((const __v8sf *)__P,
      (__v8si)__M);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskstore_ps (float *__P, __m256i __M, __m256 __A)
{
  __builtin_ia32_maskstoreps256 ((__v8sf *)__P, (__v8si)__M, (__v8sf)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_movehdup_ps (__m256 __X)
{
  return (__m256) __builtin_ia32_movshdup256 ((__v8sf)__X);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_moveldup_ps (__m256 __X)
{
  return (__m256) __builtin_ia32_movsldup256 ((__v8sf)__X);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_movedup_pd (__m256d __X)
{
  return (__m256d) __builtin_ia32_movddup256 ((__v4df)__X);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_lddqu_si256 (__m256i const *__P)
{
  return (__m256i) __builtin_ia32_lddqu256 ((char const *)__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_stream_si256 (__m256i *__A, __m256i __B)
{
  __builtin_ia32_movntdq256 ((__v4di *)__A, (__v4di)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_stream_pd (double *__A, __m256d __B)
{
  __builtin_ia32_movntpd256 (__A, (__v4df)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_stream_ps (float *__P, __m256 __A)
{
  __builtin_ia32_movntps256 (__P, (__v8sf)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_rcp_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rcpps256 ((__v8sf)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_rsqrt_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sqrt_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_sqrtpd256 ((__v4df)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sqrt_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_sqrtps256 ((__v8sf)__A);
}
# 1032 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avxintrin.h" 3 4
#define _mm256_round_pd


#define _mm256_round_ps



#define _mm256_ceil_pd
#define _mm256_floor_pd
#define _mm256_ceil_ps
#define _mm256_floor_ps

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_unpckhpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_pd (__m256d __A, __m256d __B)
{
  return (__m256d) __builtin_ia32_unpcklpd256 ((__v4df)__A, (__v4df)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_unpckhps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_ps (__m256 __A, __m256 __B)
{
  return (__m256) __builtin_ia32_unpcklps256 ((__v8sf)__A, (__v8sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testz_pd (__m128d __M, __m128d __V)
{
  return __builtin_ia32_vtestzpd ((__v2df)__M, (__v2df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testc_pd (__m128d __M, __m128d __V)
{
  return __builtin_ia32_vtestcpd ((__v2df)__M, (__v2df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testnzc_pd (__m128d __M, __m128d __V)
{
  return __builtin_ia32_vtestnzcpd ((__v2df)__M, (__v2df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testz_ps (__m128 __M, __m128 __V)
{
  return __builtin_ia32_vtestzps ((__v4sf)__M, (__v4sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testc_ps (__m128 __M, __m128 __V)
{
  return __builtin_ia32_vtestcps ((__v4sf)__M, (__v4sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_testnzc_ps (__m128 __M, __m128 __V)
{
  return __builtin_ia32_vtestnzcps ((__v4sf)__M, (__v4sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testz_pd (__m256d __M, __m256d __V)
{
  return __builtin_ia32_vtestzpd256 ((__v4df)__M, (__v4df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testc_pd (__m256d __M, __m256d __V)
{
  return __builtin_ia32_vtestcpd256 ((__v4df)__M, (__v4df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testnzc_pd (__m256d __M, __m256d __V)
{
  return __builtin_ia32_vtestnzcpd256 ((__v4df)__M, (__v4df)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testz_ps (__m256 __M, __m256 __V)
{
  return __builtin_ia32_vtestzps256 ((__v8sf)__M, (__v8sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testc_ps (__m256 __M, __m256 __V)
{
  return __builtin_ia32_vtestcps256 ((__v8sf)__M, (__v8sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testnzc_ps (__m256 __M, __m256 __V)
{
  return __builtin_ia32_vtestnzcps256 ((__v8sf)__M, (__v8sf)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testz_si256 (__m256i __M, __m256i __V)
{
  return __builtin_ia32_ptestz256 ((__v4di)__M, (__v4di)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testc_si256 (__m256i __M, __m256i __V)
{
  return __builtin_ia32_ptestc256 ((__v4di)__M, (__v4di)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_testnzc_si256 (__m256i __M, __m256i __V)
{
  return __builtin_ia32_ptestnzc256 ((__v4di)__M, (__v4di)__V);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_movemask_pd (__m256d __A)
{
  return __builtin_ia32_movmskpd256 ((__v4df)__A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_movemask_ps (__m256 __A)
{
  return __builtin_ia32_movmskps256 ((__v8sf)__A);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_undefined_pd (void)
{
  __m256d __Y = __Y;
  return __Y;
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_undefined_ps (void)
{
  __m256 __Y = __Y;
  return __Y;
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_undefined_si256 (void)
{
  __m256i __Y = __Y;
  return __Y;
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setzero_pd (void)
{
  return __extension__ (__m256d){ 0.0, 0.0, 0.0, 0.0 };
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setzero_ps (void)
{
  return __extension__ (__m256){ 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0 };
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setzero_si256 (void)
{
  return __extension__ (__m256i)(__v4di){ 0, 0, 0, 0 };
}


extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_pd (double __A, double __B, double __C, double __D)
{
  return __extension__ (__m256d){ __D, __C, __B, __A };
}


extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_ps (float __A, float __B, float __C, float __D,
        float __E, float __F, float __G, float __H)
{
  return __extension__ (__m256){ __H, __G, __F, __E,
     __D, __C, __B, __A };
}


extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_epi32 (int __A, int __B, int __C, int __D,
    int __E, int __F, int __G, int __H)
{
  return __extension__ (__m256i)(__v8si){ __H, __G, __F, __E,
       __D, __C, __B, __A };
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_epi16 (short __q15, short __q14, short __q13, short __q12,
    short __q11, short __q10, short __q09, short __q08,
    short __q07, short __q06, short __q05, short __q04,
    short __q03, short __q02, short __q01, short __q00)
{
  return __extension__ (__m256i)(__v16hi){
    __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
    __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15
  };
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_epi8 (char __q31, char __q30, char __q29, char __q28,
    char __q27, char __q26, char __q25, char __q24,
    char __q23, char __q22, char __q21, char __q20,
    char __q19, char __q18, char __q17, char __q16,
    char __q15, char __q14, char __q13, char __q12,
    char __q11, char __q10, char __q09, char __q08,
    char __q07, char __q06, char __q05, char __q04,
    char __q03, char __q02, char __q01, char __q00)
{
  return __extension__ (__m256i)(__v32qi){
    __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
    __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
    __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
    __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31
  };
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_epi64x (long long __A, long long __B, long long __C,
     long long __D)
{
  return __extension__ (__m256i)(__v4di){ __D, __C, __B, __A };
}


extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_pd (double __A)
{
  return __extension__ (__m256d){ __A, __A, __A, __A };
}


extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_ps (float __A)
{
  return __extension__ (__m256){ __A, __A, __A, __A,
     __A, __A, __A, __A };
}


extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_epi32 (int __A)
{
  return __extension__ (__m256i)(__v8si){ __A, __A, __A, __A,
       __A, __A, __A, __A };
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_epi16 (short __A)
{
  return _mm256_set_epi16 (__A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_epi8 (char __A)
{
  return _mm256_set_epi8 (__A, __A, __A, __A, __A, __A, __A, __A,
     __A, __A, __A, __A, __A, __A, __A, __A,
     __A, __A, __A, __A, __A, __A, __A, __A,
     __A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_epi64x (long long __A)
{
  return __extension__ (__m256i)(__v4di){ __A, __A, __A, __A };
}




extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_pd (double __A, double __B, double __C, double __D)
{
  return _mm256_set_pd (__D, __C, __B, __A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_ps (float __A, float __B, float __C, float __D,
  float __E, float __F, float __G, float __H)
{
  return _mm256_set_ps (__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_epi32 (int __A, int __B, int __C, int __D,
     int __E, int __F, int __G, int __H)
{
  return _mm256_set_epi32 (__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_epi16 (short __q15, short __q14, short __q13, short __q12,
     short __q11, short __q10, short __q09, short __q08,
     short __q07, short __q06, short __q05, short __q04,
     short __q03, short __q02, short __q01, short __q00)
{
  return _mm256_set_epi16 (__q00, __q01, __q02, __q03,
      __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11,
      __q12, __q13, __q14, __q15);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_epi8 (char __q31, char __q30, char __q29, char __q28,
     char __q27, char __q26, char __q25, char __q24,
     char __q23, char __q22, char __q21, char __q20,
     char __q19, char __q18, char __q17, char __q16,
     char __q15, char __q14, char __q13, char __q12,
     char __q11, char __q10, char __q09, char __q08,
     char __q07, char __q06, char __q05, char __q04,
     char __q03, char __q02, char __q01, char __q00)
{
  return _mm256_set_epi8 (__q00, __q01, __q02, __q03,
     __q04, __q05, __q06, __q07,
     __q08, __q09, __q10, __q11,
     __q12, __q13, __q14, __q15,
     __q16, __q17, __q18, __q19,
     __q20, __q21, __q22, __q23,
     __q24, __q25, __q26, __q27,
     __q28, __q29, __q30, __q31);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_setr_epi64x (long long __A, long long __B, long long __C,
      long long __D)
{
  return _mm256_set_epi64x (__D, __C, __B, __A);
}



extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castpd_ps (__m256d __A)
{
  return (__m256) __A;
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castpd_si256 (__m256d __A)
{
  return (__m256i) __A;
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castps_pd (__m256 __A)
{
  return (__m256d) __A;
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castps_si256(__m256 __A)
{
  return (__m256i) __A;
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castsi256_ps (__m256i __A)
{
  return (__m256) __A;
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castsi256_pd (__m256i __A)
{
  return (__m256d) __A;
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castpd256_pd128 (__m256d __A)
{
  return (__m128d) __builtin_ia32_pd_pd256 ((__v4df)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castps256_ps128 (__m256 __A)
{
  return (__m128) __builtin_ia32_ps_ps256 ((__v8sf)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castsi256_si128 (__m256i __A)
{
  return (__m128i) __builtin_ia32_si_si256 ((__v8si)__A);
}






extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castpd128_pd256 (__m128d __A)
{
  return (__m256d) __builtin_ia32_pd256_pd ((__v2df)__A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castps128_ps256 (__m128 __A)
{
  return (__m256) __builtin_ia32_ps256_ps ((__v4sf)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_castsi128_si256 (__m128i __A)
{
  return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);
}


#undef __DISABLE_AVX__
#pragma GCC pop_options
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _AVX2INTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx2")
#define __DISABLE_AVX2__
# 49 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_mpsadbw_epu8




extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_abs_epi8 (__m256i __A)
{
  return (__m256i)__builtin_ia32_pabsb256 ((__v32qi)__A);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_abs_epi16 (__m256i __A)
{
  return (__m256i)__builtin_ia32_pabsw256 ((__v16hi)__A);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_abs_epi32 (__m256i __A)
{
  return (__m256i)__builtin_ia32_pabsd256 ((__v8si)__A);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_packs_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_packssdw256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_packs_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_packsswb256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_packus_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_packusdw256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_packus_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_packuswb256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddd256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_adds_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddsb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_adds_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddsw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_adds_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddusb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_adds_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_paddusw256 ((__v16hi)__A, (__v16hi)__B);
}
# 171 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_alignr_epi8





extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_and_si256 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_andsi256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_andnot_si256 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_andnotsi256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_avg_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pavgb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_avg_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pavgw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_blendv_epi8 (__m256i __X, __m256i __Y, __m256i __M)
{
  return (__m256i) __builtin_ia32_pblendvb256 ((__v32qi)__X,
            (__v32qi)__Y,
            (__v32qi)__M);
}
# 224 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_blend_epi16




extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpeq_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpeqb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpeq_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpeqw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpeq_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpeqd256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpeq_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpeqq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpgt_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpgtb256 ((__v32qi)__A,
          (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpgt_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpgtw256 ((__v16hi)__A,
          (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpgt_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpgtd256 ((__v8si)__A,
          (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cmpgt_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pcmpgtq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hadd_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phaddw256 ((__v16hi)__X,
          (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hadd_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phaddd256 ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hadds_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phaddsw256 ((__v16hi)__X,
           (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hsub_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phsubw256 ((__v16hi)__X,
          (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hsub_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phsubd256 ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_hsubs_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_phsubsw256 ((__v16hi)__X,
           (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maddubs_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmaddubsw256 ((__v32qi)__X,
      (__v32qi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_madd_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaddwd256 ((__v16hi)__A,
          (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxsb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxsw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxsd256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxub256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxuw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_max_epu32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmaxud256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminsb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminsw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminsd256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminub256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminuw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_min_epu32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pminud256 ((__v8si)__A, (__v8si)__B);
}

extern __inline int
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_movemask_epi8 (__m256i __A)
{
  return __builtin_ia32_pmovmskb256 ((__v32qi)__A);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi8_epi16 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxbw256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi8_epi32 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxbd256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi8_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxbq256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi16_epi32 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxwd256 ((__v8hi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi16_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxwq256 ((__v8hi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepi32_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxdq256 ((__v4si)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu8_epi16 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxbw256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu8_epi32 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxbd256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu8_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxbq256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu16_epi32 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxwd256 ((__v8hi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu16_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxwq256 ((__v8hi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtepu32_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxdq256 ((__v4si)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mul_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmuldq256 ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mulhrs_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmulhrsw256 ((__v16hi)__X,
            (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mulhi_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmulhuw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mulhi_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmulhw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mullo_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmullw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mullo_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmulld256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_mul_epu32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pmuludq256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_or_si256 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_por256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sad_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psadbw256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_shuffle_epi8 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pshufb256 ((__v32qi)__X,
          (__v32qi)__Y);
}
# 619 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_shuffle_epi32

#define _mm256_shufflehi_epi16

#define _mm256_shufflelo_epi16



extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sign_epi8 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psignb256 ((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sign_epi16 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psignw256 ((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sign_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psignd256 ((__v8si)__X, (__v8si)__Y);
}
# 656 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_slli_si256



extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_slli_epi16 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psllwi256 ((__v16hi)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sll_epi16 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psllw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_slli_epi32 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_pslldi256 ((__v8si)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sll_epi32 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_pslld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_slli_epi64 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psllqi256 ((__v4di)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sll_epi64 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psllq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srai_epi16 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psrawi256 ((__v16hi)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sra_epi16 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psraw256 ((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srai_epi32 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psradi256 ((__v8si)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sra_epi32 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psrad256 ((__v8si)__A, (__v4si)__B);
}
# 738 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_srli_si256



extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srli_epi16 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psrlwi256 ((__v16hi)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srl_epi16 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psrlw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srli_epi32 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psrldi256 ((__v8si)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srl_epi32 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psrld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srli_epi64 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_psrlqi256 ((__v4di)__A, __B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srl_epi64 (__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psrlq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubd256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sub_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_subs_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubsb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_subs_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubsw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_subs_epu8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubusb256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_subs_epu16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psubusw256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpckhbw256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpckhwd256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpckhdq256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpackhi_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpckhqdq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpcklbw256 ((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpcklwd256 ((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpckldq256 ((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_unpacklo_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_punpcklqdq256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_xor_si256 (__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_pxor256 ((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_stream_load_si256 (__m256i const *__X)
{
  return (__m256i) __builtin_ia32_movntdqa256 ((__v4di *) __X);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcastss_ps (__m128 __X)
{
  return (__m128) __builtin_ia32_vbroadcastss_ps ((__v4sf)__X);
}

extern __inline __m256
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastss_ps (__m128 __X)
{
  return (__m256) __builtin_ia32_vbroadcastss_ps256 ((__v4sf)__X);
}

extern __inline __m256d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastsd_pd (__m128d __X)
{
  return (__m256d) __builtin_ia32_vbroadcastsd_pd256 ((__v2df)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastsi128_si256 (__m128i __X)
{
  return (__m256i) __builtin_ia32_vbroadcastsi256 ((__v2di)__X);
}
# 948 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm_blend_epi32
# 963 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_blend_epi32




extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastb_epi8 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pbroadcastb256 ((__v16qi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastw_epi16 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pbroadcastw256 ((__v8hi)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastd_epi32 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pbroadcastd256 ((__v4si)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_broadcastq_epi64 (__m128i __X)
{
  return (__m256i) __builtin_ia32_pbroadcastq256 ((__v2di)__X);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcastb_epi8 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pbroadcastb128 ((__v16qi)__X);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcastw_epi16 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pbroadcastw128 ((__v8hi)__X);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcastd_epi32 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pbroadcastd128 ((__v4si)__X);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_broadcastq_epi64 (__m128i __X)
{
  return (__m128i) __builtin_ia32_pbroadcastq128 ((__v2di)__X);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_permutevar8x32_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256 ((__v8si)__X, (__v8si)__Y);
}
# 1039 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_permute4x64_pd



extern __inline __m256
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_permutevar8x32_ps (__m256 __X, __m256i __Y)
{
  return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
}
# 1058 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_permute4x64_epi64
# 1071 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_permute2x128_si256
# 1083 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_extracti128_si256
# 1095 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm256_inserti128_si256





extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskload_epi32 (int const *__X, __m256i __M )
{
  return (__m256i) __builtin_ia32_maskloadd256 ((const __v8si *)__X,
      (__v8si)__M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskload_epi64 (long long const *__X, __m256i __M )
{
  return (__m256i) __builtin_ia32_maskloadq256 ((const __v4di *)__X,
      (__v4di)__M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskload_epi32 (int const *__X, __m128i __M )
{
  return (__m128i) __builtin_ia32_maskloadd ((const __v4si *)__X,
          (__v4si)__M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskload_epi64 (long long const *__X, __m128i __M )
{
  return (__m128i) __builtin_ia32_maskloadq ((const __v2di *)__X,
          (__v2di)__M);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskstore_epi32 (int *__X, __m256i __M, __m256i __Y )
{
  __builtin_ia32_maskstored256 ((__v8si *)__X, (__v8si)__M, (__v8si)__Y);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maskstore_epi64 (long long *__X, __m256i __M, __m256i __Y )
{
  __builtin_ia32_maskstoreq256 ((__v4di *)__X, (__v4di)__M, (__v4di)__Y);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskstore_epi32 (int *__X, __m128i __M, __m128i __Y )
{
  __builtin_ia32_maskstored ((__v4si *)__X, (__v4si)__M, (__v4si)__Y);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskstore_epi64 (long long *__X, __m128i __M, __m128i __Y )
{
  __builtin_ia32_maskstoreq (( __v2di *)__X, (__v2di)__M, (__v2di)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sllv_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv8si ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sllv_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv4si ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_sllv_epi64 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv4di ((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sllv_epi64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv2di ((__v2di)__X, (__v2di)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srav_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrav8si ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_srav_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrav4si ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srlv_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv8si ((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_srlv_epi32 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv4si ((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_srlv_epi64 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv4di ((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_srlv_epi64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv2di ((__v2di)__X, (__v2di)__Y);
}
# 1652 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#define _mm_i32gather_pd







#define _mm_mask_i32gather_pd






#define _mm256_i32gather_pd







#define _mm256_mask_i32gather_pd






#define _mm_i64gather_pd







#define _mm_mask_i64gather_pd






#define _mm256_i64gather_pd







#define _mm256_mask_i64gather_pd






#define _mm_i32gather_ps






#define _mm_mask_i32gather_ps






#define _mm256_i32gather_ps







#define _mm256_mask_i32gather_ps






#define _mm_i64gather_ps







#define _mm_mask_i64gather_ps






#define _mm256_i64gather_ps







#define _mm256_mask_i64gather_ps






#define _mm_i32gather_epi64






#define _mm_mask_i32gather_epi64






#define _mm256_i32gather_epi64






#define _mm256_mask_i32gather_epi64






#define _mm_i64gather_epi64






#define _mm_mask_i64gather_epi64






#define _mm256_i64gather_epi64






#define _mm256_mask_i64gather_epi64






#define _mm_i32gather_epi32






#define _mm_mask_i32gather_epi32






#define _mm256_i32gather_epi32






#define _mm256_mask_i32gather_epi32






#define _mm_i64gather_epi32






#define _mm_mask_i64gather_epi32






#define _mm256_i64gather_epi32






#define _mm256_mask_i64gather_epi32
# 1885 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx2intrin.h" 3 4
#undef __DISABLE_AVX2__
#pragma GCC pop_options
# 44 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _AVX512FINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx512f")
#define __DISABLE_AVX512F__



typedef double __v8df __attribute__ ((__vector_size__ (64)));
typedef float __v16sf __attribute__ ((__vector_size__ (64)));
typedef long long __v8di __attribute__ ((__vector_size__ (64)));
typedef int __v16si __attribute__ ((__vector_size__ (64)));
typedef short __v32hi __attribute__ ((__vector_size__ (64)));
typedef char __v64qi __attribute__ ((__vector_size__ (64)));



typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));
typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));
typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set_epi64 (long long __A, long long __B, long long __C,
    long long __D, long long __E, long long __F,
    long long __G, long long __H)
{
  return __extension__ (__m512i) (__v8di)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}


extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set_epi32 (int __A, int __B, int __C, int __D,
    int __E, int __F, int __G, int __H,
    int __I, int __J, int __K, int __L,
    int __M, int __N, int __O, int __P)
{
  return __extension__ (__m512i)(__v16si)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set_pd (double __A, double __B, double __C, double __D,
        double __E, double __F, double __G, double __H)
{
  return __extension__ (__m512d)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set_ps (float __A, float __B, float __C, float __D,
        float __E, float __F, float __G, float __H,
        float __I, float __J, float __K, float __L,
        float __M, float __N, float __O, float __P)
{
  return __extension__ (__m512)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}

#define _mm512_setr_epi64


#define _mm512_setr_epi32



#define _mm512_setr_pd


#define _mm512_setr_ps


extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_undefined_ps (void)
{
  __m512 __Y = __Y;
  return __Y;
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_undefined_pd (void)
{
  __m512d __Y = __Y;
  return __Y;
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_undefined_si512 (void)
{
  __m512i __Y = __Y;
  return __Y;
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_epi8 (char __A)
{
  return __extension__ (__m512i)(__v64qi)
  { __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A };
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_epi16 (short __A)
{
  return __extension__ (__m512i)(__v32hi)
  { __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A,
    __A, __A, __A, __A, __A, __A, __A, __A };
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_pd (double __A)
{
  return (__m512d) __builtin_ia32_broadcastsd512 (__extension__
        (__v2df) { __A, },
        (__v8df)
        _mm512_undefined_pd (),
        (__mmask8) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_ps (float __A)
{
  return (__m512) __builtin_ia32_broadcastss512 (__extension__
       (__v4sf) { __A, },
       (__v16sf)
       _mm512_undefined_ps (),
       (__mmask16) -1);
}


extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set4_epi32 (int __A, int __B, int __C, int __D)
{
  return __extension__ (__m512i)(__v16si)
  { __D, __C, __B, __A, __D, __C, __B, __A,
    __D, __C, __B, __A, __D, __C, __B, __A };
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set4_epi64 (long long __A, long long __B, long long __C,
     long long __D)
{
  return __extension__ (__m512i) (__v8di)
  { __D, __C, __B, __A, __D, __C, __B, __A };
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set4_pd (double __A, double __B, double __C, double __D)
{
  return __extension__ (__m512d)
  { __D, __C, __B, __A, __D, __C, __B, __A };
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set4_ps (float __A, float __B, float __C, float __D)
{
  return __extension__ (__m512)
  { __D, __C, __B, __A, __D, __C, __B, __A,
    __D, __C, __B, __A, __D, __C, __B, __A };
}

#define _mm512_setr4_epi64


#define _mm512_setr4_epi32


#define _mm512_setr4_pd


#define _mm512_setr4_ps


extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_setzero_ps (void)
{
  return __extension__ (__m512){ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_setzero_pd (void)
{
  return __extension__ (__m512d) { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_setzero_epi32 (void)
{
  return __extension__ (__m512i)(__v8di){ 0, 0, 0, 0, 0, 0, 0, 0 };
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_setzero_si512 (void)
{
  return __extension__ (__m512i)(__v8di){ 0, 0, 0, 0, 0, 0, 0, 0 };
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mov_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_movapd512_mask ((__v8df) __A,
        (__v8df) __W,
        (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mov_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_movapd512_mask ((__v8df) __A,
        (__v8df)
        _mm512_setzero_pd (),
        (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mov_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movaps512_mask ((__v16sf) __A,
       (__v16sf) __W,
       (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mov_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movaps512_mask ((__v16sf) __A,
       (__v16sf)
       _mm512_setzero_ps (),
       (__mmask16) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_load_pd (void const *__P)
{
  return *(__m512d *) __P;
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_load_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *) __P,
         (__v8df) __W,
         (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_load_pd (__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *) __P,
         (__v8df)
         _mm512_setzero_pd (),
         (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_store_pd (void *__P, __m512d __A)
{
  *(__m512d *) __P = __A;
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_store_pd (void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeapd512_mask ((__v8df *) __P, (__v8df) __A,
       (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_load_ps (void const *__P)
{
  return *(__m512 *) __P;
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_load_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *) __P,
        (__v16sf) __W,
        (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_load_ps (__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *) __P,
        (__v16sf)
        _mm512_setzero_ps (),
        (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_store_ps (void *__P, __m512 __A)
{
  *(__m512 *) __P = __A;
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_store_ps (void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeaps512_mask ((__v16sf *) __P, (__v16sf) __A,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mov_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_movdqa64_512_mask ((__v8di) __A,
           (__v8di) __W,
           (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mov_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_movdqa64_512_mask ((__v8di) __A,
           (__v8di)
           _mm512_setzero_si512 (),
           (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_load_epi64 (void const *__P)
{
  return *(__m512i *) __P;
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_load_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_store_epi64 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_store_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_movdqa64store512_mask ((__v8di *) __P, (__v8di) __A,
     (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mov_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_movdqa32_512_mask ((__v16si) __A,
           (__v16si) __W,
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mov_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_movdqa32_512_mask ((__v16si) __A,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_load_si512 (void const *__P)
{
  return *(__m512i *) __P;
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_load_epi32 (void const *__P)
{
  return *(__m512i *) __P;
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_load_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_load_epi32 (__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_store_si512 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_store_epi32 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_store_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_movdqa32store512_mask ((__v16si *) __P, (__v16si) __A,
     (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mullo_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mullo_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mullo_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sllv_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sllv_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sllv_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srav_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srav_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srav_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srlv_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srlv_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srlv_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_add_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_add_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_add_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sub_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_undefined_pd (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sub_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sub_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sllv_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_undefined_pd (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sllv_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sllv_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srav_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srav_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srav_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srlv_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srlv_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srlv_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
       (__v8di) __Y,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_add_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_add_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_add_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mul_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mul_epi32 (__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mul_epi32 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
        (__v16si) __Y,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sub_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sub_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sub_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mul_epu32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
         (__v16si) __Y,
         (__v8di)
         _mm512_undefined_si512 (),
         (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mul_epu32 (__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
         (__v16si) __Y,
         (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mul_epu32 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
         (__v16si) __Y,
         (__v8di)
         _mm512_setzero_si512 (),
         __M);
}
# 958 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_slli_epi64




#define _mm512_mask_slli_epi64




#define _mm512_maskz_slli_epi64





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sll_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sll_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sll_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}
# 1037 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_srli_epi64




#define _mm512_mask_srli_epi64




#define _mm512_maskz_srli_epi64





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srl_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srl_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srl_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}
# 1116 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_srai_epi64




#define _mm512_mask_srai_epi64




#define _mm512_maskz_srai_epi64





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sra_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sra_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sra_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
       (__v2di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}
# 1195 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_slli_epi32




#define _mm512_mask_slli_epi32




#define _mm512_maskz_slli_epi32





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sll_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sll_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sll_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}
# 1274 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_srli_epi32




#define _mm512_mask_srli_epi32




#define _mm512_maskz_srli_epi32





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_srl_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_srl_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_srl_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}
# 1353 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_srai_epi32




#define _mm512_mask_srai_epi32




#define _mm512_maskz_srai_epi32





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sra_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sra_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sra_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
       (__v4si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}
# 1439 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_add_round_sd


#define _mm_add_round_ss


#define _mm_sub_round_sd


#define _mm_sub_round_ss
# 1517 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_ternarylogic_epi64


#define _mm512_mask_ternarylogic_epi64


#define _mm512_maskz_ternarylogic_epi64


#define _mm512_ternarylogic_epi32



#define _mm512_mask_ternarylogic_epi32



#define _mm512_maskz_ternarylogic_epi32





extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rcp14_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
         (__v8df)
         _mm512_undefined_pd (),
         (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rcp14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
         (__v8df) __W,
         (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rcp14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
         (__v8df)
         _mm512_setzero_pd (),
         (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rcp14_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
        (__v16sf)
        _mm512_undefined_ps (),
        (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rcp14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
        (__v16sf) __W,
        (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rcp14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
        (__v16sf)
        _mm512_setzero_ps (),
        (__mmask16) __U);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp14_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rcp14sd ((__v2df) __B,
        (__v2df) __A);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp14_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rcp14ss ((__v4sf) __B,
       (__v4sf) __A);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rsqrt14_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
           (__v8df)
           _mm512_undefined_pd (),
           (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rsqrt14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
           (__v8df) __W,
           (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rsqrt14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
           (__v8df)
           _mm512_setzero_pd (),
           (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rsqrt14_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
          (__v16sf)
          _mm512_undefined_ps (),
          (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rsqrt14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
          (__v16sf) __W,
          (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rsqrt14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
          (__v16sf)
          _mm512_setzero_ps (),
          (__mmask16) __U);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt14_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rsqrt14sd ((__v2df) __B,
          (__v2df) __A);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt14_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rsqrt14ss ((__v4sf) __B,
         (__v4sf) __A);
}
# 1766 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_sqrt_round_pd


#define _mm512_mask_sqrt_round_pd


#define _mm512_maskz_sqrt_round_pd


#define _mm512_sqrt_round_ps


#define _mm512_mask_sqrt_round_ps


#define _mm512_maskz_sqrt_round_ps


#define _mm_sqrt_round_sd


#define _mm_sqrt_round_ss



extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi8_epi32 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi8_epi32 (__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
          (__v16si) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi8_epi32 (__mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
          (__v16si)
          _mm512_setzero_si512 (),
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi8_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi8_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi16_epi32 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi16_epi32 (__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
          (__v16si) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi16_epi32 (__mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
          (__v16si)
          _mm512_setzero_si512 (),
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi16_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi16_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi32_epi64 (__m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_epi64 (__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi32_epi64 (__mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu8_epi32 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu8_epi32 (__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
          (__v16si) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu8_epi32 (__mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
          (__v16si)
          _mm512_setzero_si512 (),
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu8_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu8_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu16_epi32 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu16_epi32 (__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
          (__v16si) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu16_epi32 (__mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
          (__v16si)
          _mm512_setzero_si512 (),
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu16_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu16_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu32_epi64 (__m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu32_epi64 (__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu32_epi64 (__mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
          (__v8di)
          _mm512_setzero_si512 (),
          (__mmask8) __U);
}
# 2216 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_add_round_pd


#define _mm512_mask_add_round_pd


#define _mm512_maskz_add_round_pd


#define _mm512_add_round_ps


#define _mm512_mask_add_round_ps


#define _mm512_maskz_add_round_ps


#define _mm512_sub_round_pd


#define _mm512_mask_sub_round_pd


#define _mm512_maskz_sub_round_pd


#define _mm512_sub_round_ps


#define _mm512_mask_sub_round_ps


#define _mm512_maskz_sub_round_ps
# 2425 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_mul_round_pd


#define _mm512_mask_mul_round_pd


#define _mm512_maskz_mul_round_pd


#define _mm512_mul_round_ps


#define _mm512_mask_mul_round_ps


#define _mm512_maskz_mul_round_ps


#define _mm512_div_round_pd


#define _mm512_mask_div_round_pd


#define _mm512_maskz_div_round_pd


#define _mm512_div_round_ps


#define _mm512_mask_div_round_ps


#define _mm512_maskz_div_round_ps


#define _mm_mul_round_sd


#define _mm_mul_round_ss


#define _mm_div_round_sd


#define _mm_div_round_ss
# 2609 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_max_round_pd


#define _mm512_mask_max_round_pd


#define _mm512_maskz_max_round_pd


#define _mm512_max_round_ps


#define _mm512_mask_max_round_ps


#define _mm512_maskz_max_round_ps


#define _mm512_min_round_pd


#define _mm512_mask_min_round_pd


#define _mm512_maskz_min_round_pd


#define _mm512_min_round_ps


#define _mm512_mask_min_round_ps


#define _mm512_maskz_min_round_ps
# 2733 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_scalef_round_pd


#define _mm512_mask_scalef_round_pd


#define _mm512_maskz_scalef_round_pd


#define _mm512_scalef_round_ps


#define _mm512_mask_scalef_round_ps


#define _mm512_maskz_scalef_round_ps


#define _mm_scalef_round_sd


#define _mm_scalef_round_ss
# 3275 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_fmadd_round_pd


#define _mm512_mask_fmadd_round_pd


#define _mm512_mask3_fmadd_round_pd


#define _mm512_maskz_fmadd_round_pd


#define _mm512_fmadd_round_ps


#define _mm512_mask_fmadd_round_ps


#define _mm512_mask3_fmadd_round_ps


#define _mm512_maskz_fmadd_round_ps


#define _mm512_fmsub_round_pd


#define _mm512_mask_fmsub_round_pd


#define _mm512_mask3_fmsub_round_pd


#define _mm512_maskz_fmsub_round_pd


#define _mm512_fmsub_round_ps


#define _mm512_mask_fmsub_round_ps


#define _mm512_mask3_fmsub_round_ps


#define _mm512_maskz_fmsub_round_ps


#define _mm512_fmaddsub_round_pd


#define _mm512_mask_fmaddsub_round_pd


#define _mm512_mask3_fmaddsub_round_pd


#define _mm512_maskz_fmaddsub_round_pd


#define _mm512_fmaddsub_round_ps


#define _mm512_mask_fmaddsub_round_ps


#define _mm512_mask3_fmaddsub_round_ps


#define _mm512_maskz_fmaddsub_round_ps


#define _mm512_fmsubadd_round_pd


#define _mm512_mask_fmsubadd_round_pd


#define _mm512_mask3_fmsubadd_round_pd


#define _mm512_maskz_fmsubadd_round_pd


#define _mm512_fmsubadd_round_ps


#define _mm512_mask_fmsubadd_round_ps


#define _mm512_mask3_fmsubadd_round_ps


#define _mm512_maskz_fmsubadd_round_ps


#define _mm512_fnmadd_round_pd


#define _mm512_mask_fnmadd_round_pd


#define _mm512_mask3_fnmadd_round_pd


#define _mm512_maskz_fnmadd_round_pd


#define _mm512_fnmadd_round_ps


#define _mm512_mask_fnmadd_round_ps


#define _mm512_mask3_fnmadd_round_ps


#define _mm512_maskz_fnmadd_round_ps


#define _mm512_fnmsub_round_pd


#define _mm512_mask_fnmsub_round_pd


#define _mm512_mask3_fnmsub_round_pd


#define _mm512_maskz_fnmsub_round_pd


#define _mm512_fnmsub_round_ps


#define _mm512_mask_fnmsub_round_ps


#define _mm512_mask3_fnmsub_round_ps


#define _mm512_maskz_fnmsub_round_ps



extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_abs_epi64 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_abs_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_abs_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_abs_epi32 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_abs_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_abs_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastss_ps (__m128 __A)
{
  return (__m512) __builtin_ia32_broadcastss512 ((__v4sf) __A,
       (__v16sf)
       _mm512_undefined_ps (),
       (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcastss_ps (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastss512 ((__v4sf) __A,
       (__v16sf) __O, __M);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcastss_ps (__mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastss512 ((__v4sf) __A,
       (__v16sf)
       _mm512_setzero_ps (),
       __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastsd_pd (__m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastsd512 ((__v2df) __A,
        (__v8df)
        _mm512_undefined_pd (),
        (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcastsd_pd (__m512d __O, __mmask8 __M, __m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastsd512 ((__v2df) __A,
        (__v8df) __O, __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcastsd_pd (__mmask8 __M, __m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastsd512 ((__v2df) __A,
        (__v8df)
        _mm512_setzero_pd (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastd_epi32 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512 ((__v4si) __A,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcastd_epi32 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512 ((__v4si) __A,
        (__v16si) __O, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcastd_epi32 (__mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512 ((__v4si) __A,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_epi32 (int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16)(-1));
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_set1_epi32 (__m512i __O, __mmask16 __M, int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A, (__v16si) __O,
          __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_set1_epi32 (__mmask16 __M, int __A)
{
  return (__m512i)
  __builtin_ia32_pbroadcastd512_gpr_mask (__A,
       (__v16si) _mm512_setzero_si512 (),
       __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastq_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastq512 ((__v2di) __A,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcastq_epi64 (__m512i __O, __mmask8 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastq512 ((__v2di) __A,
        (__v8di) __O, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_pbroadcastq512 ((__v2di) __A,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_set1_epi64 (long long __A)
{






  return (__m512i) __builtin_ia32_pbroadcastq512_mem_mask (__A,
          (__v8di)
          _mm512_undefined_si512 (),
          (__mmask8)(-1));

}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_set1_epi64 (__m512i __O, __mmask8 __M, long long __A)
{




  return (__m512i) __builtin_ia32_pbroadcastq512_mem_mask (__A, (__v8di) __O,
          __M);

}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_set1_epi64 (__mmask8 __M, long long __A)
{






  return (__m512i)
  __builtin_ia32_pbroadcastq512_mem_mask (__A,
       (__v8di) _mm512_setzero_si512 (),
       __M);

}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcast_f32x4 (__m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
           (__v16sf)
           _mm512_undefined_ps (),
           (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcast_f32x4 (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
           (__v16sf) __O,
           __M);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcast_f32x4 (__mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
           (__v16sf)
           _mm512_setzero_ps (),
           __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcast_i32x4 (__m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
            (__v16si)
            _mm512_undefined_si512 (),
            (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcast_i32x4 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
            (__v16si) __O,
            __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcast_i32x4 (__mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
            (__v16si)
            _mm512_setzero_si512 (),
            __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcast_f64x4 (__m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
            (__v8df)
            _mm512_undefined_pd (),
            (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcast_f64x4 (__m512d __O, __mmask8 __M, __m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
            (__v8df) __O,
            __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcast_f64x4 (__mmask8 __M, __m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
            (__v8df)
            _mm512_setzero_pd (),
            __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcast_i64x4 (__m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
            (__v8di)
            _mm512_undefined_si512 (),
            (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_broadcast_i64x4 (__m512i __O, __mmask8 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
            (__v8di) __O,
            __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_broadcast_i64x4 (__mmask8 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
            (__v8di)
            _mm512_setzero_si512 (),
            __M);
}

typedef enum
{
  _MM_PERM_AAAA = 0x00, _MM_PERM_AAAB = 0x01, _MM_PERM_AAAC = 0x02,
  _MM_PERM_AAAD = 0x03, _MM_PERM_AABA = 0x04, _MM_PERM_AABB = 0x05,
  _MM_PERM_AABC = 0x06, _MM_PERM_AABD = 0x07, _MM_PERM_AACA = 0x08,
  _MM_PERM_AACB = 0x09, _MM_PERM_AACC = 0x0A, _MM_PERM_AACD = 0x0B,
  _MM_PERM_AADA = 0x0C, _MM_PERM_AADB = 0x0D, _MM_PERM_AADC = 0x0E,
  _MM_PERM_AADD = 0x0F, _MM_PERM_ABAA = 0x10, _MM_PERM_ABAB = 0x11,
  _MM_PERM_ABAC = 0x12, _MM_PERM_ABAD = 0x13, _MM_PERM_ABBA = 0x14,
  _MM_PERM_ABBB = 0x15, _MM_PERM_ABBC = 0x16, _MM_PERM_ABBD = 0x17,
  _MM_PERM_ABCA = 0x18, _MM_PERM_ABCB = 0x19, _MM_PERM_ABCC = 0x1A,
  _MM_PERM_ABCD = 0x1B, _MM_PERM_ABDA = 0x1C, _MM_PERM_ABDB = 0x1D,
  _MM_PERM_ABDC = 0x1E, _MM_PERM_ABDD = 0x1F, _MM_PERM_ACAA = 0x20,
  _MM_PERM_ACAB = 0x21, _MM_PERM_ACAC = 0x22, _MM_PERM_ACAD = 0x23,
  _MM_PERM_ACBA = 0x24, _MM_PERM_ACBB = 0x25, _MM_PERM_ACBC = 0x26,
  _MM_PERM_ACBD = 0x27, _MM_PERM_ACCA = 0x28, _MM_PERM_ACCB = 0x29,
  _MM_PERM_ACCC = 0x2A, _MM_PERM_ACCD = 0x2B, _MM_PERM_ACDA = 0x2C,
  _MM_PERM_ACDB = 0x2D, _MM_PERM_ACDC = 0x2E, _MM_PERM_ACDD = 0x2F,
  _MM_PERM_ADAA = 0x30, _MM_PERM_ADAB = 0x31, _MM_PERM_ADAC = 0x32,
  _MM_PERM_ADAD = 0x33, _MM_PERM_ADBA = 0x34, _MM_PERM_ADBB = 0x35,
  _MM_PERM_ADBC = 0x36, _MM_PERM_ADBD = 0x37, _MM_PERM_ADCA = 0x38,
  _MM_PERM_ADCB = 0x39, _MM_PERM_ADCC = 0x3A, _MM_PERM_ADCD = 0x3B,
  _MM_PERM_ADDA = 0x3C, _MM_PERM_ADDB = 0x3D, _MM_PERM_ADDC = 0x3E,
  _MM_PERM_ADDD = 0x3F, _MM_PERM_BAAA = 0x40, _MM_PERM_BAAB = 0x41,
  _MM_PERM_BAAC = 0x42, _MM_PERM_BAAD = 0x43, _MM_PERM_BABA = 0x44,
  _MM_PERM_BABB = 0x45, _MM_PERM_BABC = 0x46, _MM_PERM_BABD = 0x47,
  _MM_PERM_BACA = 0x48, _MM_PERM_BACB = 0x49, _MM_PERM_BACC = 0x4A,
  _MM_PERM_BACD = 0x4B, _MM_PERM_BADA = 0x4C, _MM_PERM_BADB = 0x4D,
  _MM_PERM_BADC = 0x4E, _MM_PERM_BADD = 0x4F, _MM_PERM_BBAA = 0x50,
  _MM_PERM_BBAB = 0x51, _MM_PERM_BBAC = 0x52, _MM_PERM_BBAD = 0x53,
  _MM_PERM_BBBA = 0x54, _MM_PERM_BBBB = 0x55, _MM_PERM_BBBC = 0x56,
  _MM_PERM_BBBD = 0x57, _MM_PERM_BBCA = 0x58, _MM_PERM_BBCB = 0x59,
  _MM_PERM_BBCC = 0x5A, _MM_PERM_BBCD = 0x5B, _MM_PERM_BBDA = 0x5C,
  _MM_PERM_BBDB = 0x5D, _MM_PERM_BBDC = 0x5E, _MM_PERM_BBDD = 0x5F,
  _MM_PERM_BCAA = 0x60, _MM_PERM_BCAB = 0x61, _MM_PERM_BCAC = 0x62,
  _MM_PERM_BCAD = 0x63, _MM_PERM_BCBA = 0x64, _MM_PERM_BCBB = 0x65,
  _MM_PERM_BCBC = 0x66, _MM_PERM_BCBD = 0x67, _MM_PERM_BCCA = 0x68,
  _MM_PERM_BCCB = 0x69, _MM_PERM_BCCC = 0x6A, _MM_PERM_BCCD = 0x6B,
  _MM_PERM_BCDA = 0x6C, _MM_PERM_BCDB = 0x6D, _MM_PERM_BCDC = 0x6E,
  _MM_PERM_BCDD = 0x6F, _MM_PERM_BDAA = 0x70, _MM_PERM_BDAB = 0x71,
  _MM_PERM_BDAC = 0x72, _MM_PERM_BDAD = 0x73, _MM_PERM_BDBA = 0x74,
  _MM_PERM_BDBB = 0x75, _MM_PERM_BDBC = 0x76, _MM_PERM_BDBD = 0x77,
  _MM_PERM_BDCA = 0x78, _MM_PERM_BDCB = 0x79, _MM_PERM_BDCC = 0x7A,
  _MM_PERM_BDCD = 0x7B, _MM_PERM_BDDA = 0x7C, _MM_PERM_BDDB = 0x7D,
  _MM_PERM_BDDC = 0x7E, _MM_PERM_BDDD = 0x7F, _MM_PERM_CAAA = 0x80,
  _MM_PERM_CAAB = 0x81, _MM_PERM_CAAC = 0x82, _MM_PERM_CAAD = 0x83,
  _MM_PERM_CABA = 0x84, _MM_PERM_CABB = 0x85, _MM_PERM_CABC = 0x86,
  _MM_PERM_CABD = 0x87, _MM_PERM_CACA = 0x88, _MM_PERM_CACB = 0x89,
  _MM_PERM_CACC = 0x8A, _MM_PERM_CACD = 0x8B, _MM_PERM_CADA = 0x8C,
  _MM_PERM_CADB = 0x8D, _MM_PERM_CADC = 0x8E, _MM_PERM_CADD = 0x8F,
  _MM_PERM_CBAA = 0x90, _MM_PERM_CBAB = 0x91, _MM_PERM_CBAC = 0x92,
  _MM_PERM_CBAD = 0x93, _MM_PERM_CBBA = 0x94, _MM_PERM_CBBB = 0x95,
  _MM_PERM_CBBC = 0x96, _MM_PERM_CBBD = 0x97, _MM_PERM_CBCA = 0x98,
  _MM_PERM_CBCB = 0x99, _MM_PERM_CBCC = 0x9A, _MM_PERM_CBCD = 0x9B,
  _MM_PERM_CBDA = 0x9C, _MM_PERM_CBDB = 0x9D, _MM_PERM_CBDC = 0x9E,
  _MM_PERM_CBDD = 0x9F, _MM_PERM_CCAA = 0xA0, _MM_PERM_CCAB = 0xA1,
  _MM_PERM_CCAC = 0xA2, _MM_PERM_CCAD = 0xA3, _MM_PERM_CCBA = 0xA4,
  _MM_PERM_CCBB = 0xA5, _MM_PERM_CCBC = 0xA6, _MM_PERM_CCBD = 0xA7,
  _MM_PERM_CCCA = 0xA8, _MM_PERM_CCCB = 0xA9, _MM_PERM_CCCC = 0xAA,
  _MM_PERM_CCCD = 0xAB, _MM_PERM_CCDA = 0xAC, _MM_PERM_CCDB = 0xAD,
  _MM_PERM_CCDC = 0xAE, _MM_PERM_CCDD = 0xAF, _MM_PERM_CDAA = 0xB0,
  _MM_PERM_CDAB = 0xB1, _MM_PERM_CDAC = 0xB2, _MM_PERM_CDAD = 0xB3,
  _MM_PERM_CDBA = 0xB4, _MM_PERM_CDBB = 0xB5, _MM_PERM_CDBC = 0xB6,
  _MM_PERM_CDBD = 0xB7, _MM_PERM_CDCA = 0xB8, _MM_PERM_CDCB = 0xB9,
  _MM_PERM_CDCC = 0xBA, _MM_PERM_CDCD = 0xBB, _MM_PERM_CDDA = 0xBC,
  _MM_PERM_CDDB = 0xBD, _MM_PERM_CDDC = 0xBE, _MM_PERM_CDDD = 0xBF,
  _MM_PERM_DAAA = 0xC0, _MM_PERM_DAAB = 0xC1, _MM_PERM_DAAC = 0xC2,
  _MM_PERM_DAAD = 0xC3, _MM_PERM_DABA = 0xC4, _MM_PERM_DABB = 0xC5,
  _MM_PERM_DABC = 0xC6, _MM_PERM_DABD = 0xC7, _MM_PERM_DACA = 0xC8,
  _MM_PERM_DACB = 0xC9, _MM_PERM_DACC = 0xCA, _MM_PERM_DACD = 0xCB,
  _MM_PERM_DADA = 0xCC, _MM_PERM_DADB = 0xCD, _MM_PERM_DADC = 0xCE,
  _MM_PERM_DADD = 0xCF, _MM_PERM_DBAA = 0xD0, _MM_PERM_DBAB = 0xD1,
  _MM_PERM_DBAC = 0xD2, _MM_PERM_DBAD = 0xD3, _MM_PERM_DBBA = 0xD4,
  _MM_PERM_DBBB = 0xD5, _MM_PERM_DBBC = 0xD6, _MM_PERM_DBBD = 0xD7,
  _MM_PERM_DBCA = 0xD8, _MM_PERM_DBCB = 0xD9, _MM_PERM_DBCC = 0xDA,
  _MM_PERM_DBCD = 0xDB, _MM_PERM_DBDA = 0xDC, _MM_PERM_DBDB = 0xDD,
  _MM_PERM_DBDC = 0xDE, _MM_PERM_DBDD = 0xDF, _MM_PERM_DCAA = 0xE0,
  _MM_PERM_DCAB = 0xE1, _MM_PERM_DCAC = 0xE2, _MM_PERM_DCAD = 0xE3,
  _MM_PERM_DCBA = 0xE4, _MM_PERM_DCBB = 0xE5, _MM_PERM_DCBC = 0xE6,
  _MM_PERM_DCBD = 0xE7, _MM_PERM_DCCA = 0xE8, _MM_PERM_DCCB = 0xE9,
  _MM_PERM_DCCC = 0xEA, _MM_PERM_DCCD = 0xEB, _MM_PERM_DCDA = 0xEC,
  _MM_PERM_DCDB = 0xED, _MM_PERM_DCDC = 0xEE, _MM_PERM_DCDD = 0xEF,
  _MM_PERM_DDAA = 0xF0, _MM_PERM_DDAB = 0xF1, _MM_PERM_DDAC = 0xF2,
  _MM_PERM_DDAD = 0xF3, _MM_PERM_DDBA = 0xF4, _MM_PERM_DDBB = 0xF5,
  _MM_PERM_DDBC = 0xF6, _MM_PERM_DDBD = 0xF7, _MM_PERM_DDCA = 0xF8,
  _MM_PERM_DDCB = 0xF9, _MM_PERM_DDCC = 0xFA, _MM_PERM_DDCD = 0xFB,
  _MM_PERM_DDDA = 0xFC, _MM_PERM_DDDB = 0xFD, _MM_PERM_DDDC = 0xFE,
  _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;
# 4045 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_shuffle_epi32




#define _mm512_mask_shuffle_epi32




#define _mm512_maskz_shuffle_epi32




#define _mm512_shuffle_i64x2





#define _mm512_mask_shuffle_i64x2





#define _mm512_maskz_shuffle_i64x2





#define _mm512_shuffle_i32x4





#define _mm512_mask_shuffle_i32x4





#define _mm512_maskz_shuffle_i32x4





#define _mm512_shuffle_f64x2





#define _mm512_mask_shuffle_f64x2





#define _mm512_maskz_shuffle_f64x2





#define _mm512_shuffle_f32x4





#define _mm512_mask_shuffle_f32x4





#define _mm512_maskz_shuffle_f32x4






extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rolv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rolv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rolv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rorv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rorv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rorv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rolv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rolv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W,
        (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rolv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rorv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rorv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W,
        (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rorv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        (__mmask8) __U);
}
# 4322 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvtt_roundpd_epi32


#define _mm512_mask_cvtt_roundpd_epi32


#define _mm512_maskz_cvtt_roundpd_epi32


#define _mm512_cvtt_roundpd_epu32


#define _mm512_mask_cvtt_roundpd_epu32


#define _mm512_maskz_cvtt_roundpd_epu32
# 4402 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvt_roundpd_epi32


#define _mm512_mask_cvt_roundpd_epi32


#define _mm512_maskz_cvt_roundpd_epi32


#define _mm512_cvt_roundpd_epu32


#define _mm512_mask_cvt_roundpd_epu32


#define _mm512_maskz_cvt_roundpd_epu32
# 4482 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvtt_roundps_epi32


#define _mm512_mask_cvtt_roundps_epi32


#define _mm512_maskz_cvtt_roundps_epi32


#define _mm512_cvtt_roundps_epu32


#define _mm512_mask_cvtt_roundps_epu32


#define _mm512_maskz_cvtt_roundps_epu32
# 4562 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvt_roundps_epi32


#define _mm512_mask_cvt_roundps_epi32


#define _mm512_maskz_cvt_roundps_epi32


#define _mm512_cvt_roundps_epu32


#define _mm512_mask_cvt_roundps_epu32


#define _mm512_maskz_cvt_roundps_epu32



extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtu32_sd (__m128d __A, unsigned __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd32 ((__v2df) __A, __B);
}
# 4611 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundu64_sd


#define _mm_cvt_roundi64_sd


#define _mm_cvt_roundsi64_sd
# 4645 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundu32_ss


#define _mm_cvt_roundi32_ss


#define _mm_cvt_roundsi32_ss
# 4678 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundu64_ss


#define _mm_cvt_roundi64_ss


#define _mm_cvt_roundsi64_ss





extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
        (__v16qi)
        _mm_undefined_si128 (),
        (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
        (__v16qi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
        (__v16qi)
        _mm_setzero_si128 (),
        __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtsepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
         (__v16qi)
         _mm_undefined_si128 (),
         (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
         (__v16qi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtsepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
         (__v16qi)
         _mm_setzero_si128 (),
         __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtusepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
          (__v16qi)
          _mm_undefined_si128 (),
          (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
          (__v16qi) __O,
          __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtusepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
          (__v16qi)
          _mm_setzero_si128 (),
          __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
        (__v16hi)
        _mm256_undefined_si256 (),
        (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_storeu_epi16 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdw512mem_mask ((__v16hi *) __P, (__v16si) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
        (__v16hi) __O, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
        (__v16hi)
        _mm256_setzero_si256 (),
        __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtsepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
         (__v16hi)
         _mm256_undefined_si256 (),
         (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
         (__v16hi) __O, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtsepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
         (__v16hi)
         _mm256_setzero_si256 (),
         __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtusepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
          (__v16hi)
          _mm256_undefined_si256 (),
          (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
          (__v16hi) __O,
          __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtusepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
          (__v16hi)
          _mm256_setzero_si256 (),
          __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
        (__v8si)
        _mm256_undefined_si256 (),
        (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
        (__v8si) __O, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
        (__v8si)
        _mm256_setzero_si256 (),
        __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtsepi64_epi32 (__m512i __A)
{
  __v8si __O;
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
         (__v8si)
         _mm256_undefined_si256 (),
         (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_storeu_epi32 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
         (__v8si) __O, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtsepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
         (__v8si)
         _mm256_setzero_si256 (),
         __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtusepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
          (__v8si)
          _mm256_undefined_si256 (),
          (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqd512mem_mask ((__v8si*) __P, (__v8di) __A, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
          (__v8si) __O, __M);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtusepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
          (__v8si)
          _mm256_setzero_si256 (),
          __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
        (__v8hi)
        _mm_undefined_si128 (),
        (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
        (__v8hi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
        (__v8hi)
        _mm_setzero_si128 (),
        __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtsepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
         (__v8hi)
         _mm_undefined_si128 (),
         (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
         (__v8hi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtsepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
         (__v8hi)
         _mm_setzero_si128 (),
         __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtusepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
          (__v8hi)
          _mm_undefined_si128 (),
          (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqw512mem_mask ((__v8hi*) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
          (__v8hi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtusepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
          (__v8hi)
          _mm_setzero_si128 (),
          __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
        (__v16qi)
        _mm_undefined_si128 (),
        (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
        (__v16qi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
        (__v16qi)
        _mm_setzero_si128 (),
        __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtsepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
         (__v16qi)
         _mm_undefined_si128 (),
         (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
         (__v16qi) __O, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtsepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
         (__v16qi)
         _mm_setzero_si128 (),
         __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtusepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
          (__v16qi)
          _mm_undefined_si128 (),
          (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
          (__v16qi) __O,
          __M);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtusepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
          (__v16qi)
          _mm_setzero_si128 (),
          __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi32_pd (__m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
          (__v8df)
          _mm512_undefined_pd (),
          (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
          (__v8df) __W,
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
          (__v8df)
          _mm512_setzero_pd (),
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu32_pd (__m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
           (__v8df)
           _mm512_undefined_pd (),
           (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
           (__v8df) __W,
           (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
           (__v8df)
           _mm512_setzero_pd (),
           (__mmask8) __U);
}
# 5339 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvt_roundepi32_ps


#define _mm512_mask_cvt_roundepi32_ps


#define _mm512_maskz_cvt_roundepi32_ps


#define _mm512_cvt_roundepu32_ps


#define _mm512_mask_cvt_roundepu32_ps


#define _mm512_maskz_cvt_roundepu32_ps
# 5492 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_extractf64x4_pd





#define _mm512_mask_extractf64x4_pd





#define _mm512_maskz_extractf64x4_pd





#define _mm512_extractf32x4_ps





#define _mm512_mask_extractf32x4_ps





#define _mm512_maskz_extractf32x4_ps





#define _mm512_extracti64x4_epi64





#define _mm512_mask_extracti64x4_epi64





#define _mm512_maskz_extracti64x4_epi64





#define _mm512_extracti32x4_epi32





#define _mm512_mask_extracti32x4_epi32





#define _mm512_maskz_extracti32x4_epi32
# 5660 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_insertf32x4



#define _mm512_inserti32x4



#define _mm512_insertf64x4





#define _mm512_mask_insertf64x4





#define _mm512_maskz_insertf64x4





#define _mm512_inserti64x4





#define _mm512_mask_inserti64x4





#define _mm512_maskz_inserti64x4






extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_loadu_pd (void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const __v8df *) __P,
         (__v8df)
         _mm512_undefined_pd (),
         (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_loadu_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const __v8df *) __P,
         (__v8df) __W,
         (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_loadu_pd (__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const __v8df *) __P,
         (__v8df)
         _mm512_setzero_pd (),
         (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_storeu_pd (void *__P, __m512d __A)
{
  __builtin_ia32_storeupd512_mask ((__v8df *) __P, (__v8df) __A,
       (__mmask8) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_storeu_pd (void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeupd512_mask ((__v8df *) __P, (__v8df) __A,
       (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_loadu_ps (void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const __v16sf *) __P,
        (__v16sf)
        _mm512_undefined_ps (),
        (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_loadu_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const __v16sf *) __P,
        (__v16sf) __W,
        (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_loadu_ps (__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const __v16sf *) __P,
        (__v16sf)
        _mm512_setzero_ps (),
        (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_storeu_ps (void *__P, __m512 __A)
{
  __builtin_ia32_storeups512_mask ((__v16sf *) __P, (__v16sf) __A,
       (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_storeu_ps (void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeups512_mask ((__v16sf *) __P, (__v16sf) __A,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_loadu_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const __v8di *) __P,
           (__v8di) __W,
           (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_loadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const __v8di *) __P,
           (__v8di)
           _mm512_setzero_si512 (),
           (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_storeu_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_storedqudi512_mask ((__v8di *) __P, (__v8di) __A,
         (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_loadu_si512 (void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const __v16si *) __P,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_loadu_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const __v16si *) __P,
           (__v16si) __W,
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_loadu_epi32 (__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const __v16si *) __P,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_storeu_si512 (void *__P, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((__v16si *) __P, (__v16si) __A,
         (__mmask16) -1);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_storeu_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((__v16si *) __P, (__v16si) __A,
         (__mmask16) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutevar_pd (__m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
       (__v8di) __C,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutevar_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
       (__v8di) __C,
       (__v8df) __W,
       (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutevar_pd (__mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
       (__v8di) __C,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutevar_ps (__m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
             (__v16si) __C,
             (__v16sf)
             _mm512_undefined_ps (),
             (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutevar_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
             (__v16si) __C,
             (__v16sf) __W,
             (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutevar_ps (__mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
             (__v16si) __C,
             (__v16sf)
             _mm512_setzero_ps (),
             (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutex2var_epi64 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                       ,
             (__v8di) __A,
             (__v8di) __B,
             (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutex2var_epi64 (__m512i __A, __mmask8 __U, __m512i __I,
    __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                       ,
             (__v8di) __A,
             (__v8di) __B,
             (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask2_permutex2var_epi64 (__m512i __A, __m512i __I,
     __mmask8 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varq512_mask ((__v8di) __A,
             (__v8di) __I
                       ,
             (__v8di) __B,
             (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutex2var_epi64 (__mmask8 __U, __m512i __A,
     __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_maskz ((__v8di) __I
                 ,
       (__v8di) __A,
       (__v8di) __B,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutex2var_epi32 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                       ,
             (__v16si) __A,
             (__v16si) __B,
             (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutex2var_epi32 (__m512i __A, __mmask16 __U,
    __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                       ,
             (__v16si) __A,
             (__v16si) __B,
             (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask2_permutex2var_epi32 (__m512i __A, __m512i __I,
     __mmask16 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2vard512_mask ((__v16si) __A,
             (__v16si) __I
                       ,
             (__v16si) __B,
             (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutex2var_epi32 (__mmask16 __U, __m512i __A,
     __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_maskz ((__v16si) __I
                 ,
       (__v16si) __A,
       (__v16si) __B,
       (__mmask16) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutex2var_pd (__m512d __A, __m512i __I, __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                 ,
       (__v8df) __A,
       (__v8df) __B,
       (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutex2var_pd (__m512d __A, __mmask8 __U, __m512i __I,
        __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                 ,
       (__v8df) __A,
       (__v8df) __B,
       (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask2_permutex2var_pd (__m512d __A, __m512i __I, __mmask8 __U,
         __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermi2varpd512_mask ((__v8df) __A,
       (__v8di) __I
                 ,
       (__v8df) __B,
       (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutex2var_pd (__mmask8 __U, __m512d __A, __m512i __I,
         __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_maskz ((__v8di) __I
                  ,
        (__v8df) __A,
        (__v8df) __B,
        (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutex2var_ps (__m512 __A, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                       ,
             (__v16sf) __A,
             (__v16sf) __B,
             (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutex2var_ps (__m512 __A, __mmask16 __U, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                       ,
             (__v16sf) __A,
             (__v16sf) __B,
             (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask2_permutex2var_ps (__m512 __A, __m512i __I, __mmask16 __U,
         __m512 __B)
{
  return (__m512) __builtin_ia32_vpermi2varps512_mask ((__v16sf) __A,
             (__v16si) __I
                       ,
             (__v16sf) __B,
             (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutex2var_ps (__mmask16 __U, __m512 __A, __m512i __I,
         __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_maskz ((__v16si) __I
                 ,
       (__v16sf) __A,
       (__v16sf) __B,
       (__mmask16) __U);
}
# 6177 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_permute_pd




#define _mm512_mask_permute_pd




#define _mm512_maskz_permute_pd




#define _mm512_permute_ps




#define _mm512_mask_permute_ps




#define _mm512_maskz_permute_ps
# 6268 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_permutex_pd




#define _mm512_mask_permutex_pd



#define _mm512_maskz_permutex_pd




#define _mm512_permutex_epi64






#define _mm512_maskz_permutex_epi64






#define _mm512_mask_permutex_epi64






extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutexvar_epi64 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
           (__v8di) __X,
           (__v8di)
           _mm512_setzero_si512 (),
           __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutexvar_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
           (__v8di) __X,
           (__v8di)
           _mm512_undefined_si512 (),
           (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutexvar_epi64 (__m512i __W, __mmask8 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
           (__v8di) __X,
           (__v8di) __W,
           __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutexvar_epi32 (__mmask16 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
           (__v16si) __X,
           (__v16si)
           _mm512_setzero_si512 (),
           __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutexvar_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
           (__v16si) __X,
           (__v16si)
           _mm512_undefined_si512 (),
           (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutexvar_epi32 (__m512i __W, __mmask16 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
           (__v16si) __X,
           (__v16si) __W,
           __M);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutexvar_pd (__m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
           (__v8di) __X,
           (__v8df)
           _mm512_undefined_pd (),
           (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutexvar_pd (__m512d __W, __mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
           (__v8di) __X,
           (__v8df) __W,
           (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutexvar_pd (__mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
           (__v8di) __X,
           (__v8df)
           _mm512_setzero_pd (),
           (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_permutexvar_ps (__m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
          (__v16si) __X,
          (__v16sf)
          _mm512_undefined_ps (),
          (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_permutexvar_ps (__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
          (__v16si) __X,
          (__v16sf) __W,
          (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_permutexvar_ps (__mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
          (__v16si) __X,
          (__v16sf)
          _mm512_setzero_ps (),
          (__mmask16) __U);
}
# 6641 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_shuffle_pd





#define _mm512_mask_shuffle_pd





#define _mm512_maskz_shuffle_pd





#define _mm512_shuffle_ps





#define _mm512_mask_shuffle_ps





#define _mm512_maskz_shuffle_ps





#define _mm512_fixupimm_round_pd




#define _mm512_mask_fixupimm_round_pd




#define _mm512_maskz_fixupimm_round_pd




#define _mm512_fixupimm_round_ps




#define _mm512_mask_fixupimm_round_ps




#define _mm512_maskz_fixupimm_round_ps




#define _mm_fixupimm_round_sd




#define _mm_mask_fixupimm_round_sd




#define _mm_maskz_fixupimm_round_sd




#define _mm_fixupimm_round_ss




#define _mm_mask_fixupimm_round_ss




#define _mm_maskz_fixupimm_round_ss





extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_movehdup_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_movshdup512_mask ((__v16sf) __A,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_movehdup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movshdup512_mask ((__v16sf) __A,
         (__v16sf) __W,
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_movehdup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movshdup512_mask ((__v16sf) __A,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_moveldup_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_movsldup512_mask ((__v16sf) __A,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_moveldup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movsldup512_mask ((__v16sf) __A,
         (__v16sf) __W,
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_moveldup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_movsldup512_mask ((__v16sf) __A,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_or_si512 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,
      (__v16si) __B,
      (__v16si)
      _mm512_undefined_si512 (),
      (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_or_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,
      (__v16si) __B,
      (__v16si)
      _mm512_undefined_si512 (),
      (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_or_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,
      (__v16si) __B,
      (__v16si) __W,
      (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_or_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,
      (__v16si) __B,
      (__v16si)
      _mm512_setzero_si512 (),
      (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_or_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_porq512_mask ((__v8di) __A,
      (__v8di) __B,
      (__v8di)
      _mm512_undefined_si512 (),
      (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_or_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_porq512_mask ((__v8di) __A,
      (__v8di) __B,
      (__v8di) __W,
      (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_or_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_porq512_mask ((__v8di) __A,
      (__v8di) __B,
      (__v8di)
      _mm512_setzero_si512 (),
      (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_xor_si512 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_xor_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_xor_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_xor_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_xor_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_xor_epi64 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_xor_epi64 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_setzero_si512 (),
       (__mmask8) __U);
}
# 7064 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_rol_epi32




#define _mm512_mask_rol_epi32




#define _mm512_maskz_rol_epi32




#define _mm512_ror_epi32




#define _mm512_mask_ror_epi32




#define _mm512_maskz_ror_epi32




#define _mm512_rol_epi64




#define _mm512_mask_rol_epi64




#define _mm512_maskz_rol_epi64





#define _mm512_ror_epi64




#define _mm512_mask_ror_epi64




#define _mm512_maskz_ror_epi64






extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_and_si512 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_and_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_undefined_si512 (),
       (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_and_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_and_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,
       (__v16si) __B,
       (__v16si)
       _mm512_setzero_si512 (),
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_and_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_undefined_si512 (),
       (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_and_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di) __W, __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_and_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandq512_mask ((__v8di) __A,
       (__v8di) __B,
       (__v8di)
       _mm512_setzero_pd (),
       __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_andnot_si512 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_andnot_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_andnot_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_andnot_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_andnot_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_andnot_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W, __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_andnot_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pandnq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_pd (),
        __U);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_test_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
      (__v16si) __B,
      (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_test_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
      (__v16si) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_test_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A,
            (__v8di) __B,
            (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_test_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A, (__v8di) __B, __U);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_testn_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
       (__v16si) __B,
       (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_testn_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
       (__v16si) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_testn_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
      (__v8di) __B,
      (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_testn_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
      (__v8di) __B, __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpackhi_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhdq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si)
           _mm512_undefined_si512 (),
           (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpackhi_epi32 (__m512i __W, __mmask16 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhdq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si) __W,
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpackhi_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhdq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpackhi_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di)
            _mm512_undefined_si512 (),
            (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpackhi_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di) __W,
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpackhi_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckhqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di)
            _mm512_setzero_si512 (),
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpacklo_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckldq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si)
           _mm512_undefined_si512 (),
           (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpacklo_epi32 (__m512i __W, __mmask16 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckldq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si) __W,
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpacklo_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpckldq512_mask ((__v16si) __A,
           (__v16si) __B,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpacklo_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpcklqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di)
            _mm512_undefined_si512 (),
            (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpacklo_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpcklqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di) __W,
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpacklo_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_punpcklqdq512_mask ((__v8di) __A,
            (__v8di) __B,
            (__v8di)
            _mm512_setzero_si512 (),
            (__mmask8) __U);
}
# 7516 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundss_u64


#define _mm_cvt_roundss_si64


#define _mm_cvt_roundss_i64


#define _mm_cvtt_roundss_u64


#define _mm_cvtt_roundss_i64


#define _mm_cvtt_roundss_si64
# 7579 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundss_u32


#define _mm_cvt_roundss_si32


#define _mm_cvt_roundss_i32


#define _mm_cvtt_roundss_u32


#define _mm_cvtt_roundss_si32


#define _mm_cvtt_roundss_i32
# 7642 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundsd_u64


#define _mm_cvt_roundsd_si64


#define _mm_cvt_roundsd_i64


#define _mm_cvtt_roundsd_u64


#define _mm_cvtt_roundsd_si64


#define _mm_cvtt_roundsd_i64
# 7705 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_cvt_roundsd_u32


#define _mm_cvt_roundsd_si32


#define _mm_cvt_roundsd_i32


#define _mm_cvtt_roundsd_u32


#define _mm_cvtt_roundsd_si32


#define _mm_cvtt_roundsd_i32



extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_movedup_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_movddup512_mask ((__v8df) __A,
         (__v8df)
         _mm512_undefined_pd (),
         (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_movedup_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_movddup512_mask ((__v8df) __A,
         (__v8df) __W,
         (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_movedup_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_movddup512_mask ((__v8df) __A,
         (__v8df)
         _mm512_setzero_pd (),
         (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpacklo_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpcklpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_undefined_pd (),
          (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpacklo_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpcklpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df) __W,
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpacklo_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpcklpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_setzero_pd (),
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpackhi_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpckhpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_undefined_pd (),
          (__mmask8) -1);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpackhi_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpckhpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df) __W,
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpackhi_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_unpckhpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_setzero_pd (),
          (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpackhi_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpckhps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpackhi_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpckhps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __W,
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpackhi_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpckhps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U);
}
# 7975 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvt_roundps_pd


#define _mm512_mask_cvt_roundps_pd


#define _mm512_maskz_cvt_roundps_pd


#define _mm512_cvt_roundph_ps


#define _mm512_mask_cvt_roundph_ps


#define _mm512_maskz_cvt_roundph_ps


#define _mm512_cvt_roundps_ph


#define _mm512_cvtps_ph


#define _mm512_mask_cvt_roundps_ph


#define _mm512_mask_cvtps_ph


#define _mm512_maskz_cvt_roundps_ph


#define _mm512_maskz_cvtps_ph
# 8062 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cvt_roundpd_ps


#define _mm512_mask_cvt_roundpd_ps


#define _mm512_maskz_cvt_roundpd_ps


#define _mm_cvt_roundsd_ss


#define _mm_cvt_roundss_sd



extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_stream_si512 (__m512i * __P, __m512i __A)
{
  __builtin_ia32_movntdq512 ((__v8di *) __P, (__v8di) __A);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_stream_ps (float *__P, __m512 __A)
{
  __builtin_ia32_movntps512 (__P, (__v16sf) __A);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_stream_pd (double *__P, __m512d __A)
{
  __builtin_ia32_movntpd512 (__P, (__v8df) __A);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_stream_load_si512 (void *__P)
{
  return __builtin_ia32_movntdqa512 ((__v8di *)__P);
}


typedef enum
{
  _MM_MANT_NORM_1_2,
  _MM_MANT_NORM_p5_2,
  _MM_MANT_NORM_p5_1,
  _MM_MANT_NORM_p75_1p5
} _MM_MANTISSA_NORM_ENUM;

typedef enum
{
  _MM_MANT_SIGN_src,
  _MM_MANT_SIGN_zero,
  _MM_MANT_SIGN_nan
} _MM_MANTISSA_SIGN_ENUM;
# 8298 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_getmant_round_pd






#define _mm512_mask_getmant_round_pd






#define _mm512_maskz_getmant_round_pd





#define _mm512_getmant_round_ps






#define _mm512_mask_getmant_round_ps






#define _mm512_maskz_getmant_round_ps





#define _mm_getmant_round_sd





#define _mm_getmant_round_ss





#define _mm_getexp_round_ss


#define _mm_getexp_round_sd


#define _mm512_getexp_round_ps



#define _mm512_mask_getexp_round_ps



#define _mm512_maskz_getexp_round_ps



#define _mm512_getexp_round_pd



#define _mm512_mask_getexp_round_pd



#define _mm512_maskz_getexp_round_pd
# 8464 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_roundscale_round_ps


#define _mm512_mask_roundscale_round_ps




#define _mm512_maskz_roundscale_round_ps




#define _mm512_roundscale_round_pd


#define _mm512_mask_roundscale_round_pd




#define _mm512_maskz_roundscale_round_pd




#define _mm_roundscale_round_ss


#define _mm_roundscale_round_sd




extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_floor_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
        (0x01 | 0x00),
        (__v16sf) __A, -1,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_floor_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
         (0x01 | 0x00),
         (__v8df) __A, -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_ceil_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
        (0x02 | 0x00),
        (__v16sf) __A, -1,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_ceil_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
         (0x02 | 0x00),
         (__v8df) __A, -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_floor_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
        (0x01 | 0x00),
        (__v16sf) __W, __U,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_floor_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
         (0x01 | 0x00),
         (__v8df) __W, __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_ceil_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
        (0x02 | 0x00),
        (__v16sf) __W, __U,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_ceil_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
         (0x02 | 0x00),
         (__v8df) __W, __U,
         0x04);
}
# 8647 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_alignr_epi32




#define _mm512_mask_alignr_epi32




#define _mm512_maskz_alignr_epi32




#define _mm512_alignr_epi64




#define _mm512_mask_alignr_epi64



#define _mm512_maskz_alignr_epi64





extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpeq_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_pcmpeqd512_mask ((__v16si) __A,
           (__v16si) __B,
           (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cmpeq_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_pcmpeqd512_mask ((__v16si) __A,
           (__v16si) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cmpeq_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_pcmpeqq512_mask ((__v8di) __A,
          (__v8di) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpeq_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_pcmpeqq512_mask ((__v8di) __A,
          (__v8di) __B,
          (__mmask8) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpgt_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_pcmpgtd512_mask ((__v16si) __A,
           (__v16si) __B,
           (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cmpgt_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_pcmpgtd512_mask ((__v16si) __A,
           (__v16si) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cmpgt_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_pcmpgtq512_mask ((__v8di) __A,
          (__v8di) __B, __U);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpgt_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_pcmpgtq512_mask ((__v8di) __A,
          (__v8di) __B,
          (__mmask8) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpge_epi32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 5,
          (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpge_epu32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 5,
          (__mmask16) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpge_epi64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 5,
          (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpge_epu64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 5,
          (__mmask8) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmple_epi32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 2,
          (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmple_epu32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 2,
          (__mmask16) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmple_epi64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 2,
          (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmple_epu64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 2,
          (__mmask8) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmplt_epi32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 1,
          (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmplt_epu32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 1,
          (__mmask16) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmplt_epi64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 1,
          (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmplt_epu64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 1,
          (__mmask8) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpneq_epi32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 4,
          (__mmask16) -1);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpneq_epu32_mask (__m512i __X, __m512i __Y)
{
  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,
          (__v16si) __Y, 4,
          (__mmask16) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpneq_epi64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 4,
          (__mmask8) -1);
}

extern __inline __mmask8
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cmpneq_epu64_mask (__m512i __X, __m512i __Y)
{
  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,
          (__v8di) __Y, 4,
          (__mmask8) -1);
}

#define _MM_CMPINT_EQ
#define _MM_CMPINT_LT
#define _MM_CMPINT_LE
#define _MM_CMPINT_UNUSED
#define _MM_CMPINT_NE
#define _MM_CMPINT_NLT
#define _MM_CMPINT_GE
#define _MM_CMPINT_NLE
#define _MM_CMPINT_GT
# 9054 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cmp_epi64_mask




#define _mm512_cmp_epi32_mask




#define _mm512_cmp_epu64_mask




#define _mm512_cmp_epu32_mask




#define _mm512_cmp_round_pd_mask




#define _mm512_cmp_round_ps_mask




#define _mm512_mask_cmp_epi64_mask




#define _mm512_mask_cmp_epi32_mask




#define _mm512_mask_cmp_epu64_mask




#define _mm512_mask_cmp_epu32_mask




#define _mm512_mask_cmp_round_pd_mask




#define _mm512_mask_cmp_round_ps_mask




#define _mm_cmp_round_sd_mask




#define _mm_mask_cmp_round_sd_mask




#define _mm_cmp_round_ss_mask




#define _mm_mask_cmp_round_ss_mask
# 9472 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_i32gather_ps





#define _mm512_mask_i32gather_ps





#define _mm512_i32gather_pd





#define _mm512_mask_i32gather_pd





#define _mm512_i64gather_ps





#define _mm512_mask_i64gather_ps





#define _mm512_i64gather_pd





#define _mm512_mask_i64gather_pd





#define _mm512_i32gather_epi32





#define _mm512_mask_i32gather_epi32





#define _mm512_i32gather_epi64





#define _mm512_mask_i32gather_epi64





#define _mm512_i64gather_epi32





#define _mm512_mask_i64gather_epi32





#define _mm512_i64gather_epi64





#define _mm512_mask_i64gather_epi64





#define _mm512_i32scatter_ps




#define _mm512_mask_i32scatter_ps




#define _mm512_i32scatter_pd




#define _mm512_mask_i32scatter_pd




#define _mm512_i64scatter_ps




#define _mm512_mask_i64scatter_ps




#define _mm512_i64scatter_pd




#define _mm512_mask_i64scatter_pd




#define _mm512_i32scatter_epi32




#define _mm512_mask_i32scatter_epi32




#define _mm512_i32scatter_epi64




#define _mm512_mask_i32scatter_epi64




#define _mm512_i64scatter_epi32




#define _mm512_mask_i64scatter_epi32




#define _mm512_i64scatter_epi64




#define _mm512_mask_i64scatter_epi64





extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compress_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
            (__v8df) __W,
            (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_compress_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
            (__v8df)
            _mm512_setzero_pd (),
            (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_compressstoredf512_mask ((__v8df *) __P, (__v8df) __A,
       (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compress_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
           (__v16sf) __W,
           (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_compress_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
           (__v16sf)
           _mm512_setzero_ps (),
           (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compressstoreu_ps (void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_compressstoresf512_mask ((__v16sf *) __P, (__v16sf) __A,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compress_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
            (__v8di) __W,
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_compress_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
            (__v8di)
            _mm512_setzero_si512 (),
            (__mmask8) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_compressstoredi512_mask ((__v8di *) __P, (__v8di) __A,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compress_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
            (__v16si) __W,
            (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_compress_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
            (__v16si)
            _mm512_setzero_si512 (),
            (__mmask16) __U);
}

extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_compressstoreu_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_compressstoresi512_mask ((__v16si *) __P, (__v16si) __A,
       (__mmask16) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expand_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_mask ((__v8df) __A,
          (__v8df) __W,
          (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expand_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_maskz ((__v8df) __A,
           (__v8df)
           _mm512_setzero_pd (),
           (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expandloadu_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_mask ((const __v8df *) __P,
       (__v8df) __W,
       (__mmask8) __U);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expandloadu_pd (__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_maskz ((const __v8df *) __P,
        (__v8df)
        _mm512_setzero_pd (),
        (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expand_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_mask ((__v16sf) __A,
         (__v16sf) __W,
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expand_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_maskz ((__v16sf) __A,
          (__v16sf)
          _mm512_setzero_ps (),
          (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expandloadu_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_mask ((const __v16sf *) __P,
             (__v16sf) __W,
             (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expandloadu_ps (__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_maskz ((const __v16sf *) __P,
       (__v16sf)
       _mm512_setzero_ps (),
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expand_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_mask ((__v8di) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expand_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_maskz ((__v8di) __A,
           (__v8di)
           _mm512_setzero_si512 (),
           (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expandloadu_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloaddi512_mask ((const __v8di *) __P,
       (__v8di) __W,
       (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expandloadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m512i)
  __builtin_ia32_expandloaddi512_maskz ((const __v8di *) __P,
            (__v8di)
            _mm512_setzero_si512 (),
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expand_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_mask ((__v16si) __A,
          (__v16si) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expand_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_maskz ((__v16si) __A,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_expandloadu_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_mask ((const __v16si *) __P,
       (__v16si) __W,
       (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_expandloadu_epi32 (__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_maskz ((const __v16si *) __P,
        (__v16si)
        _mm512_setzero_si512
        (), (__mmask16) __U);
}


extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kand (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandhi ((__mmask16) __A, (__mmask16) __B);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kandn (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandnhi ((__mmask16) __A, (__mmask16) __B);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_korhi ((__mmask16) __A, (__mmask16) __B);
}

extern __inline int
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kortestz (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kortestzhi ((__mmask16) __A,
      (__mmask16) __B);
}

extern __inline int
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kortestc (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kortestchi ((__mmask16) __A,
      (__mmask16) __B);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kxnor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxnorhi ((__mmask16) __A, (__mmask16) __B);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kxor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxorhi ((__mmask16) __A, (__mmask16) __B);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_knot (__mmask16 __A)
{
  return (__mmask16) __builtin_ia32_knothi ((__mmask16) __A);
}

extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kunpackb (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kunpckhi ((__mmask16) __A, (__mmask16) __B);
}
# 10025 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_maskz_insertf32x4




#define _mm512_maskz_inserti32x4




#define _mm512_mask_insertf32x4




#define _mm512_mask_inserti32x4





extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_epu64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_epu64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_undefined_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
        (__v8di) __B,
        (__v8di)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_epu32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W, __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_epu32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_undefined_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si)
        _mm512_setzero_si512 (),
        __M);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
        (__v16si) __B,
        (__v16si) __W, __M);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_unpacklo_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpcklps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_unpacklo_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpcklps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __W,
         (__mmask16) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_unpacklo_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_unpcklps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U);
}
# 10364 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_max_round_sd


#define _mm_max_round_ss


#define _mm_min_round_sd


#define _mm_min_round_ss



extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_blend_pd (__mmask8 __U, __m512d __A, __m512d __W)
{
  return (__m512d) __builtin_ia32_blendmpd_512_mask ((__v8df) __A,
           (__v8df) __W,
           (__mmask8) __U);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_blend_ps (__mmask16 __U, __m512 __A, __m512 __W)
{
  return (__m512) __builtin_ia32_blendmps_512_mask ((__v16sf) __A,
          (__v16sf) __W,
          (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_blend_epi64 (__mmask8 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_blendmq_512_mask ((__v8di) __A,
          (__v8di) __W,
          (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_blend_epi32 (__mmask16 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_blendmd_512_mask ((__v16si) __A,
          (__v16si) __W,
          (__mmask16) __U);
}
# 10494 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_fmadd_round_sd


#define _mm_fmadd_round_ss


#define _mm_fmsub_round_sd


#define _mm_fmsub_round_ss


#define _mm_fnmadd_round_sd


#define _mm_fnmadd_round_ss


#define _mm_fnmsub_round_sd


#define _mm_fnmsub_round_ss
# 10534 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm_comi_round_ss

#define _mm_comi_round_sd



extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sqrt_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
        (__v8df)
        _mm512_undefined_pd (),
        (__mmask8) -1,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sqrt_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
        (__v8df) __W,
        (__mmask8) __U,
        0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sqrt_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
        (__v8df)
        _mm512_setzero_pd (),
        (__mmask8) __U,
        0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sqrt_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_sqrtps512_mask ((__v16sf) __A,
       (__v16sf)
       _mm512_undefined_ps (),
       (__mmask16) -1,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sqrt_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_sqrtps512_mask ((__v16sf) __A,
       (__v16sf) __W,
       (__mmask16) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sqrt_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_sqrtps512_mask ((__v16sf) __A,
       (__v16sf)
       _mm512_setzero_ps (),
       (__mmask16) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_add_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_add_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_add_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_add_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_add_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_add_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sub_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sub_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sub_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_sub_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_sub_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_sub_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mul_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mul_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mul_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mul_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_mul_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_mul_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_div_pd (__m512d __M, __m512d __V)
{
  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __M,
       (__v8df) __V,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_div_pd (__m512d __W, __mmask8 __U, __m512d __M, __m512d __V)
{
  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __M,
       (__v8df) __V,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_div_pd (__mmask8 __U, __m512d __M, __m512d __V)
{
  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __M,
       (__v8df) __V,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_div_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_div_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_div_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_max_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_max_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_max_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_undefined_pd (),
       (__mmask8) -1,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __W,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
       (__v8df) __B,
       (__v8df)
       _mm512_setzero_pd (),
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_min_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_undefined_ps (),
      (__mmask16) -1,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_min_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf) __W,
      (__mmask16) __U,
      0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_min_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
      (__v16sf) __B,
      (__v16sf)
      _mm512_setzero_ps (),
      (__mmask16) __U,
      0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_scalef_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_undefined_pd (),
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_scalef_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df) __W,
          (__mmask8) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_scalef_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df)
          _mm512_setzero_pd (),
          (__mmask8) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_scalef_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_scalef_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __W,
         (__mmask16) __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_scalef_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U,
         0x04);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_scalef_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_scalefsd_round ((__v2df) __A,
        (__v2df) __B,
        0x04);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_scalef_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_scalefss_round ((__v4sf) __A,
       (__v4sf) __B,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmadd_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df) __C,
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmadd_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
          (__v8df) __B,
          (__v8df) __C,
          (__mmask8) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmadd_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 ((__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmadd_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmadd_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __C,
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmadd_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __C,
         (__mmask16) __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmadd_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 ((__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmadd_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmsub_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
          (__v8df) __B,
          -(__v8df) __C,
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmsub_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
          (__v8df) __B,
          -(__v8df) __C,
          (__mmask8) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmsub_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubpd512_mask3 ((__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmsub_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
           (__v8df) __B,
           -(__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmsub_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         -(__v16sf) __C,
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmsub_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
         (__v16sf) __B,
         -(__v16sf) __C,
         (__mmask16) __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmsub_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubps512_mask3 ((__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmsub_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
          (__v16sf) __B,
          -(__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmaddsub_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __C,
             (__mmask8) -1,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmaddsub_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __C,
             (__mmask8) __U,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmaddsub_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask3 ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __C,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmaddsub_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __C,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmaddsub_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __C,
            (__mmask16) -1,
            0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmaddsub_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __C,
            (__mmask16) __U,
            0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmaddsub_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask3 ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf) __C,
             (__mmask16) __U,
             0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmaddsub_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf) __C,
             (__mmask16) __U,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmsubadd_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
             (__v8df) __B,
             -(__v8df) __C,
             (__mmask8) -1,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmsubadd_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
             (__v8df) __B,
             -(__v8df) __C,
             (__mmask8) __U,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmsubadd_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubaddpd512_mask3 ((__v8df) __A,
       (__v8df) __B,
       (__v8df) __C,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmsubadd_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
       (__v8df) __B,
       -(__v8df) __C,
       (__mmask8) __U,
       0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fmsubadd_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            -(__v16sf) __C,
            (__mmask16) -1,
            0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fmsubadd_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            -(__v16sf) __C,
            (__mmask16) __U,
            0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fmsubadd_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubaddps512_mask3 ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf) __C,
             (__mmask16) __U,
             0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fmsubadd_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
             (__v16sf) __B,
             -(__v16sf) __C,
             (__mmask16) __U,
             0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fnmadd_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
          (__v8df) __B,
          (__v8df) __C,
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fnmadd_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmaddpd512_mask ((__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fnmadd_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 (-(__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fnmadd_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fnmadd_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
         (__v16sf) __B,
         (__v16sf) __C,
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fnmadd_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmaddps512_mask ((__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fnmadd_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 (-(__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fnmadd_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fnmsub_pd (__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
          (__v8df) __B,
          -(__v8df) __C,
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fnmsub_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask ((__v8df) __A,
           (__v8df) __B,
           (__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fnmsub_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask3 ((__v8df) __A,
            (__v8df) __B,
            (__v8df) __C,
            (__mmask8) __U,
            0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fnmsub_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
           (__v8df) __B,
           -(__v8df) __C,
           (__mmask8) __U,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_fnmsub_ps (__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
         (__v16sf) __B,
         -(__v16sf) __C,
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_fnmsub_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask ((__v16sf) __A,
          (__v16sf) __B,
          (__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask3_fnmsub_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask3 ((__v16sf) __A,
           (__v16sf) __B,
           (__v16sf) __C,
           (__mmask16) __U,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_fnmsub_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
          (__v16sf) __B,
          -(__v16sf) __C,
          (__mmask16) __U,
          0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvttpd_epi32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
           (__v8si)
           _mm256_undefined_si256 (),
           (__mmask8) -1,
           0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvttpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
           (__v8si) __W,
           (__mmask8) __U,
           0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvttpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
           (__v8si)
           _mm256_setzero_si256 (),
           (__mmask8) __U,
           0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvttpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
            (__v8si)
            _mm256_undefined_si256 (),
            (__mmask8) -1,
            0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvttpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
            (__v8si) __W,
            (__mmask8) __U,
            0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvttpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
            (__v8si)
            _mm256_setzero_si256 (),
            (__mmask8) __U,
            0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtpd_epi32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
          (__v8si)
          _mm256_undefined_si256 (),
          (__mmask8) -1,
          0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
          (__v8si) __W,
          (__mmask8) __U,
          0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
          (__v8si)
          _mm256_setzero_si256 (),
          (__mmask8) __U,
          0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
           (__v8si)
           _mm256_undefined_si256 (),
           (__mmask8) -1,
           0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
           (__v8si) __W,
           (__mmask8) __U,
           0x04);
}

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
           (__v8si)
           _mm256_setzero_si256 (),
           (__mmask8) __U,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvttps_epi32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
           (__v16si)
           _mm512_undefined_si512 (),
           (__mmask16) -1,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvttps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
           (__v16si) __W,
           (__mmask16) __U,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvttps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvttps_epu32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
            (__v16si)
            _mm512_undefined_si512 (),
            (__mmask16) -1,
            0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvttps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
            (__v16si) __W,
            (__mmask16) __U,
            0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvttps_epu32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
            (__v16si)
            _mm512_setzero_si512 (),
            (__mmask16) __U,
            0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtps_epi32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
          (__v16si)
          _mm512_undefined_si512 (),
          (__mmask16) -1,
          0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
          (__v16si) __W,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
          (__v16si)
          _mm512_setzero_si512 (),
          (__mmask16) __U,
          0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtps_epu32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
           (__v16si)
           _mm512_undefined_si512 (),
           (__mmask16) -1,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
           (__v16si) __W,
           (__mmask16) __U,
           0x04);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtps_epu32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
           (__v16si)
           _mm512_setzero_si512 (),
           (__mmask16) __U,
           0x04);
}


extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtu64_ss (__m128 __A, unsigned long long __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss64 ((__v4sf) __A, __B,
           0x04);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtu64_sd (__m128d __A, unsigned long long __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd64 ((__v2df) __A, __B,
            0x04);
}


extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtu32_ss (__m128 __A, unsigned __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss32 ((__v4sf) __A, __B,
           0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepi32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
         (__v16sf)
         _mm512_undefined_ps (),
         (__mmask16) -1,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepi32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
         (__v16sf) __W,
         (__mmask16) __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepi32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
         (__v16sf)
         _mm512_setzero_ps (),
         (__mmask16) __U,
         0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtepu32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
          (__v16sf)
          _mm512_undefined_ps (),
          (__mmask16) -1,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtepu32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
          (__v16sf) __W,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtepu32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
          (__v16sf)
          _mm512_setzero_ps (),
          (__mmask16) __U,
          0x04);
}
# 12134 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_fixupimm_pd




#define _mm512_mask_fixupimm_pd




#define _mm512_maskz_fixupimm_pd




#define _mm512_fixupimm_ps




#define _mm512_mask_fixupimm_ps




#define _mm512_maskz_fixupimm_ps




#define _mm_fixupimm_sd




#define _mm_mask_fixupimm_sd




#define _mm_maskz_fixupimm_sd




#define _mm_fixupimm_ss




#define _mm_mask_fixupimm_ss




#define _mm_maskz_fixupimm_ss






extern __inline unsigned long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvtss2usi64 ((__v4sf)
          __A,
          0x04);
}

extern __inline unsigned long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvttss2usi64 ((__v4sf)
           __A,
           0x04);
}

extern __inline long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_i64 (__m128 __A)
{
  return (long long) __builtin_ia32_vcvttss2si64 ((__v4sf) __A,
        0x04);
}


extern __inline unsigned
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvtss2usi32 ((__v4sf) __A,
       0x04);
}

extern __inline unsigned
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvttss2usi32 ((__v4sf) __A,
        0x04);
}

extern __inline int
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_i32 (__m128 __A)
{
  return (int) __builtin_ia32_vcvttss2si32 ((__v4sf) __A,
         0x04);
}


extern __inline unsigned long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvtsd2usi64 ((__v2df)
          __A,
          0x04);
}

extern __inline unsigned long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvttsd2usi64 ((__v2df)
           __A,
           0x04);
}

extern __inline long long
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_i64 (__m128d __A)
{
  return (long long) __builtin_ia32_vcvttsd2si64 ((__v2df) __A,
        0x04);
}


extern __inline unsigned
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvtsd2usi32 ((__v2df) __A,
       0x04);
}

extern __inline unsigned
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvttsd2usi32 ((__v2df) __A,
        0x04);
}

extern __inline int
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_i32 (__m128d __A)
{
  return (int) __builtin_ia32_vcvttsd2si32 ((__v2df) __A,
         0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtps_pd (__m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
          (__v8df)
          _mm512_undefined_pd (),
          (__mmask8) -1,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtps_pd (__m512d __W, __mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
          (__v8df) __W,
          (__mmask8) __U,
          0x04);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtps_pd (__mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
          (__v8df)
          _mm512_setzero_pd (),
          (__mmask8) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtph_ps (__m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
          (__v16sf)
          _mm512_undefined_ps (),
          (__mmask16) -1,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtph_ps (__m512 __W, __mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
          (__v16sf) __W,
          (__mmask16) __U,
          0x04);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtph_ps (__mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
          (__v16sf)
          _mm512_setzero_ps (),
          (__mmask16) __U,
          0x04);
}

extern __inline __m256
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_cvtpd_ps (__m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
         (__v8sf)
         _mm256_undefined_ps (),
         (__mmask8) -1,
         0x04);
}

extern __inline __m256
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_cvtpd_ps (__m256 __W, __mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
         (__v8sf) __W,
         (__mmask8) __U,
         0x04);
}

extern __inline __m256
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_cvtpd_ps (__mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
         (__v8sf)
         _mm256_setzero_ps (),
         (__mmask8) __U,
         0x04);
}
# 12573 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_getmant_pd






#define _mm512_mask_getmant_pd






#define _mm512_maskz_getmant_pd





#define _mm512_getmant_ps






#define _mm512_mask_getmant_ps






#define _mm512_maskz_getmant_ps





#define _mm_getmant_sd





#define _mm_getmant_ss





#define _mm_getexp_ss



#define _mm_getexp_sd



#define _mm512_getexp_ps



#define _mm512_mask_getexp_ps



#define _mm512_maskz_getexp_ps



#define _mm512_getexp_pd



#define _mm512_mask_getexp_pd



#define _mm512_maskz_getexp_pd
# 12746 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_roundscale_ps


#define _mm512_mask_roundscale_ps




#define _mm512_maskz_roundscale_ps




#define _mm512_roundscale_pd


#define _mm512_mask_roundscale_pd




#define _mm512_maskz_roundscale_pd




#define _mm_roundscale_ss


#define _mm_roundscale_sd
# 12862 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512fintrin.h" 3 4
#define _mm512_cmp_pd_mask




#define _mm512_cmp_ps_mask




#define _mm512_mask_cmp_pd_mask




#define _mm512_mask_cmp_ps_mask




#define _mm_cmp_sd_mask




#define _mm_mask_cmp_sd_mask




#define _mm_cmp_ss_mask




#define _mm_mask_cmp_ss_mask





extern __inline __mmask16
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_kmov (__mmask16 __A)
{
  return __builtin_ia32_kmov16 (__A);
}


#undef __DISABLE_AVX512F__
#pragma GCC pop_options
# 46 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512erintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512erintrin.h" 3 4
#define _AVX512ERINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx512er")
#define __DISABLE_AVX512ER__



typedef double __v8df __attribute__ ((__vector_size__ (64)));
typedef float __v16sf __attribute__ ((__vector_size__ (64)));



typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));
typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 255 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512erintrin.h" 3 4
#define _mm512_exp2a23_round_pd


#define _mm512_mask_exp2a23_round_pd


#define _mm512_maskz_exp2a23_round_pd


#define _mm512_exp2a23_round_ps


#define _mm512_mask_exp2a23_round_ps


#define _mm512_maskz_exp2a23_round_ps


#define _mm512_rcp28_round_pd


#define _mm512_mask_rcp28_round_pd


#define _mm512_maskz_rcp28_round_pd


#define _mm512_rcp28_round_ps


#define _mm512_mask_rcp28_round_ps


#define _mm512_maskz_rcp28_round_ps


#define _mm512_rsqrt28_round_pd


#define _mm512_mask_rsqrt28_round_pd


#define _mm512_maskz_rsqrt28_round_pd


#define _mm512_rsqrt28_round_ps


#define _mm512_mask_rsqrt28_round_ps


#define _mm512_maskz_rsqrt28_round_ps


#define _mm_rcp28_round_sd


#define _mm_rcp28_round_ss


#define _mm_rsqrt28_round_sd


#define _mm_rsqrt28_round_ss




#define _mm512_exp2a23_pd


#define _mm512_mask_exp2a23_pd


#define _mm512_maskz_exp2a23_pd


#define _mm512_exp2a23_ps


#define _mm512_mask_exp2a23_ps


#define _mm512_maskz_exp2a23_ps


#define _mm512_rcp28_pd


#define _mm512_mask_rcp28_pd


#define _mm512_maskz_rcp28_pd


#define _mm512_rcp28_ps


#define _mm512_mask_rcp28_ps


#define _mm512_maskz_rcp28_ps


#define _mm512_rsqrt28_pd


#define _mm512_mask_rsqrt28_pd


#define _mm512_maskz_rsqrt28_pd


#define _mm512_rsqrt28_ps


#define _mm512_mask_rsqrt28_ps


#define _mm512_maskz_rsqrt28_ps


#define _mm_rcp28_sd


#define _mm_rcp28_ss


#define _mm_rsqrt28_sd


#define _mm_rsqrt28_ss



#undef __DISABLE_AVX512ER__
#pragma GCC pop_options
# 48 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512pfintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512pfintrin.h" 3 4
#define _AVX512PFINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx512pf")
#define __DISABLE_AVX512PF__



typedef long long __v8di __attribute__ ((__vector_size__ (64)));
typedef int __v16si __attribute__ ((__vector_size__ (64)));



typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 158 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512pfintrin.h" 3 4
#define _mm512_mask_prefetch_i32gather_pd



#define _mm512_mask_prefetch_i32gather_ps



#define _mm512_mask_prefetch_i64gather_pd



#define _mm512_mask_prefetch_i64gather_ps



#define _mm512_prefetch_i32scatter_pd



#define _mm512_prefetch_i32scatter_ps



#define _mm512_mask_prefetch_i32scatter_pd



#define _mm512_mask_prefetch_i32scatter_ps



#define _mm512_prefetch_i64scatter_pd



#define _mm512_prefetch_i64scatter_ps



#define _mm512_mask_prefetch_i64scatter_pd



#define _mm512_mask_prefetch_i64scatter_ps





#undef __DISABLE_AVX512PF__
#pragma GCC pop_options
# 50 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512cdintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/avx512cdintrin.h" 3 4
#define _AVX512CDINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("avx512cd")
#define __DISABLE_AVX512CD__



typedef long long __v8di __attribute__ ((__vector_size__ (64)));
typedef int __v16si __attribute__ ((__vector_size__ (64)));



typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));
typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_conflict_epi32 (__m512i __A)
{
  return (__m512i)
  __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
            (__v16si) _mm512_setzero_si512 (),
            (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_conflict_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
        (__v16si) __W,
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_conflict_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i)
  __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
            (__v16si) _mm512_setzero_si512 (),
            (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_conflict_epi64 (__m512i __A)
{
  return (__m512i)
  __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
            (__v8di) _mm512_setzero_si512 (),
            (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_conflict_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
        (__v8di) __W,
        (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_conflict_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i)
  __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
            (__v8di) _mm512_setzero_si512 (),
            (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_lzcnt_epi64 (__m512i __A)
{
  return (__m512i)
  __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
        (__v8di) _mm512_setzero_si512 (),
        (__mmask8) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_lzcnt_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
           (__v8di) __W,
           (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_lzcnt_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i)
  __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
        (__v8di) _mm512_setzero_si512 (),
        (__mmask8) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_lzcnt_epi32 (__m512i __A)
{
  return (__m512i)
  __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
        (__v16si) _mm512_setzero_si512 (),
        (__mmask16) -1);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_lzcnt_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
           (__v16si) __W,
           (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_lzcnt_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i)
  __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
        (__v16si) _mm512_setzero_si512 (),
        (__mmask16) __U);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m512i) __builtin_ia32_broadcastmb512 (__A);
}

extern __inline __m512i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m512i) __builtin_ia32_broadcastmw512 (__A);
}


#undef __DISABLE_AVX512CD__
#pragma GCC pop_options
# 52 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/shaintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/shaintrin.h" 3 4
#define _SHAINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("sha")
#define __DISABLE_SHA__


extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha1msg1_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_sha1msg1 ((__v4si) __A, (__v4si) __B);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha1msg2_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_sha1msg2 ((__v4si) __A, (__v4si) __B);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha1nexte_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_sha1nexte ((__v4si) __A, (__v4si) __B);
}
# 66 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/shaintrin.h" 3 4
#define _mm_sha1rnds4_epu32




extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha256msg1_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_sha256msg1 ((__v4si) __A, (__v4si) __B);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha256msg2_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_sha256msg2 ((__v4si) __A, (__v4si) __B);
}

extern __inline __m128i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha256rnds2_epu32 (__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_sha256rnds2 ((__v4si) __A, (__v4si) __B,
            (__v4si) __C);
}


#undef __DISABLE_SHA__
#pragma GCC pop_options
# 54 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lzcntintrin.h" 1 3 4
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lzcntintrin.h" 3 4
#define _LZCNTINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("lzcnt")
#define __DISABLE_LZCNT__


extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__lzcnt16 (unsigned short __X)
{
  return __builtin_clzs (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__lzcnt32 (unsigned int __X)
{
  return __builtin_clz (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_lzcnt_u32 (unsigned int __X)
{
  return __builtin_clz (__X);
}


extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__lzcnt64 (unsigned long long __X)
{
  return __builtin_clzll (__X);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_lzcnt_u64 (unsigned long long __X)
{
  return __builtin_clzll (__X);
}



#undef __DISABLE_LZCNT__
#pragma GCC pop_options
# 56 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmiintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmiintrin.h" 3 4
#define _BMIINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("bmi")
#define __DISABLE_BMI__


extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzcnt_u16 (unsigned short __X)
{
  return __builtin_ctzs (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__andn_u32 (unsigned int __X, unsigned int __Y)
{
  return ~__X & __Y;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bextr_u32 (unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bextr_u32 (__X, __Y);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_bextr_u32 (unsigned int __X, unsigned int __Y, unsigned __Z)
{
  return __builtin_ia32_bextr_u32 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsi_u32 (unsigned int __X)
{
  return __X & -__X;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsi_u32 (unsigned int __X)
{
  return __blsi_u32 (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsmsk_u32 (unsigned int __X)
{
  return __X ^ (__X - 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsmsk_u32 (unsigned int __X)
{
  return __blsmsk_u32 (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsr_u32 (unsigned int __X)
{
  return __X & (__X - 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsr_u32 (unsigned int __X)
{
  return __blsr_u32 (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzcnt_u32 (unsigned int __X)
{
  return __builtin_ctz (__X);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_tzcnt_u32 (unsigned int __X)
{
  return __builtin_ctz (__X);
}



extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__andn_u64 (unsigned long long __X, unsigned long long __Y)
{
  return ~__X & __Y;
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bextr_u64 (unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bextr_u64 (__X, __Y);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_bextr_u64 (unsigned long long __X, unsigned int __Y, unsigned int __Z)
{
  return __builtin_ia32_bextr_u64 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsi_u64 (unsigned long long __X)
{
  return __X & -__X;
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsi_u64 (unsigned long long __X)
{
  return __blsi_u64 (__X);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsmsk_u64 (unsigned long long __X)
{
  return __X ^ (__X - 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsmsk_u64 (unsigned long long __X)
{
  return __blsmsk_u64 (__X);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsr_u64 (unsigned long long __X)
{
  return __X & (__X - 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_blsr_u64 (unsigned long long __X)
{
  return __blsr_u64 (__X);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzcnt_u64 (unsigned long long __X)
{
  return __builtin_ctzll (__X);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_tzcnt_u64 (unsigned long long __X)
{
  return __builtin_ctzll (__X);
}




#undef __DISABLE_BMI__
#pragma GCC pop_options
# 58 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmi2intrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmi2intrin.h" 3 4
#define _BMI2INTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("bmi2")
#define __DISABLE_BMI2__


extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_bzhi_u32 (unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bzhi_si (__X, __Y);
}

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_pdep_u32 (unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pdep_si (__X, __Y);
}

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_pext_u32 (unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pext_si (__X, __Y);
}



extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_bzhi_u64 (unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bzhi_di (__X, __Y);
}

extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_pdep_u64 (unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pdep_di (__X, __Y);
}

extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_pext_u64 (unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pext_di (__X, __Y);
}

extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mulx_u64 (unsigned long long __X, unsigned long long __Y,
    unsigned long long *__P)
{
  unsigned __int128 __res = (unsigned __int128) __X * __Y;
  *__P = (unsigned long long) (__res >> 64);
  return (unsigned long long) __res;
}
# 105 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmi2intrin.h" 3 4
#undef __DISABLE_BMI2__
#pragma GCC pop_options
# 60 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fmaintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fmaintrin.h" 3 4
#define _FMAINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("fma")
#define __DISABLE_FMA__


extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmadd_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmadd_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmadd_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmadd_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmadd_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsd3 ((__v2df)__A, (__v2df)__B,
                                             (__v2df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmadd_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddss3 ((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B,
                                           -(__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmsub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B,
                                              -(__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsub_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,
                                          -(__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmsub_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
                                             -(__v8sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsub_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, (__v2df)__B,
                                            -(__v2df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsub_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, (__v4sf)__B,
                                           -(__v4sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmadd_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fnmadd_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmadd_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fnmadd_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmadd_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, -(__v2df)__B,
                                            (__v2df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmadd_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, -(__v4sf)__B,
                                           (__v4sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmsub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B,
                                           -(__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fnmsub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B,
                                              -(__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmsub_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B,
                                          -(__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fnmsub_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B,
                                             -(__v8sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmsub_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, -(__v2df)__B,
                                            -(__v2df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fnmsub_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, -(__v4sf)__B,
                                           -(__v4sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmaddsub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B,
                                              (__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmaddsub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256 ((__v4df)__A,
                                                 (__v4df)__B,
                                                 (__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmaddsub_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B,
                                             (__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmaddsub_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256 ((__v8sf)__A,
                                                (__v8sf)__B,
                                                (__v8sf)__C);
}

extern __inline __m128d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsubadd_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B,
                                              -(__v2df)__C);
}

extern __inline __m256d
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmsubadd_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256 ((__v4df)__A,
                                                 (__v4df)__B,
                                                 -(__v4df)__C);
}

extern __inline __m128
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_fmsubadd_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B,
                                             -(__v4sf)__C);
}

extern __inline __m256
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_fmsubadd_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256 ((__v8sf)__A,
                                                (__v8sf)__B,
                                                -(__v8sf)__C);
}


#undef __DISABLE_FMA__
#pragma GCC pop_options
# 62 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/f16cintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/f16cintrin.h" 3 4
#define _F16CINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("f16c")
#define __DISABLE_F16C__


extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_cvtsh_ss (unsigned short __S)
{
  __v8hi __H = __extension__ (__v8hi){ (short) __S, 0, 0, 0, 0, 0, 0, 0 };
  __v4sf __A = __builtin_ia32_vcvtph2ps (__H);
  return __builtin_ia32_vec_ext_v4sf (__A, 0);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtph_ps (__m128i __A)
{
  return (__m128) __builtin_ia32_vcvtph2ps ((__v8hi) __A);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_cvtph_ps (__m128i __A)
{
  return (__m256) __builtin_ia32_vcvtph2ps256 ((__v8hi) __A);
}
# 78 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/f16cintrin.h" 3 4
#define _cvtss_sh







#define _mm_cvtps_ph


#define _mm256_cvtps_ph




#undef __DISABLE_F16C__
#pragma GCC pop_options
# 64 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/rtmintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/rtmintrin.h" 3 4
#define _RTMINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("rtm")
#define __DISABLE_RTM__


#define _XBEGIN_STARTED
#define _XABORT_EXPLICIT
#define _XABORT_RETRY
#define _XABORT_CONFLICT
#define _XABORT_CAPACITY
#define _XABORT_DEBUG
#define _XABORT_NESTED
#define _XABORT_CODE



extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xbegin (void)
{
  return __builtin_ia32_xbegin ();
}





extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xend (void)
{
  __builtin_ia32_xend ();
}
# 76 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/rtmintrin.h" 3 4
#define _xabort



#undef __DISABLE_RTM__
#pragma GCC pop_options
# 66 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xtestintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xtestintrin.h" 3 4
#define _XTESTINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("rtm")
#define __DISABLE_RTM__




extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xtest (void)
{
  return __builtin_ia32_xtest ();
}


#undef __DISABLE_RTM__
#pragma GCC pop_options
# 68 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h" 2 3 4


#pragma GCC push_options
#pragma GCC target("rdrnd")
#define __DISABLE_RDRND__

extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand16_step (unsigned short *__P)
{
  return __builtin_ia32_rdrand16_step (__P);
}

extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand32_step (unsigned int *__P)
{
  return __builtin_ia32_rdrand32_step (__P);
}

#undef __DISABLE_RDRND__
#pragma GCC pop_options





#pragma GCC push_options
#pragma GCC target("fsgsbase")
#define __DISABLE_FSGSBASE__

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readfsbase_u32 (void)
{
  return __builtin_ia32_rdfsbase32 ();
}

extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readfsbase_u64 (void)
{
  return __builtin_ia32_rdfsbase64 ();
}

extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readgsbase_u32 (void)
{
  return __builtin_ia32_rdgsbase32 ();
}

extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readgsbase_u64 (void)
{
  return __builtin_ia32_rdgsbase64 ();
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writefsbase_u32 (unsigned int __B)
{
  __builtin_ia32_wrfsbase32 (__B);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writefsbase_u64 (unsigned long long __B)
{
  __builtin_ia32_wrfsbase64 (__B);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writegsbase_u32 (unsigned int __B)
{
  __builtin_ia32_wrgsbase32 (__B);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writegsbase_u64 (unsigned long long __B)
{
  __builtin_ia32_wrgsbase64 (__B);
}

#undef __DISABLE_FSGSBASE__
#pragma GCC pop_options



#pragma GCC push_options
#pragma GCC target("rdrnd")
#define __DISABLE_RDRND__

extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand64_step (unsigned long long *__P)
{
  return __builtin_ia32_rdrand64_step (__P);
}

#undef __DISABLE_RDRND__
#pragma GCC pop_options
# 47 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mm3dnow.h" 1 3 4
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mm3dnow.h" 3 4
#define _MM3DNOW_H_INCLUDED


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/prfchwintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/prfchwintrin.h" 3 4
#define _PRFCHWINTRIN_H_INCLUDED

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_prefetchw (void *__P)
{
  __builtin_prefetch (__P, 1, 3 );
}
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mm3dnow.h" 2 3 4


#pragma GCC push_options
#pragma GCC target("3dnow")
#define __DISABLE_3dNOW__


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_femms (void)
{
  __builtin_ia32_femms();
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pavgusb (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pavgusb ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pf2id (__m64 __A)
{
  return (__m64)__builtin_ia32_pf2id ((__v2sf)__A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfacc (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfacc ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfadd (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfadd ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfcmpeq (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfcmpeq ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfcmpge (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfcmpge ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfcmpgt (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfcmpgt ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfmax (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfmax ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfmin (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfmin ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfmul (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfmul ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfrcp (__m64 __A)
{
  return (__m64)__builtin_ia32_pfrcp ((__v2sf)__A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfrcpit1 (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfrcpit1 ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfrcpit2 (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfrcpit2 ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfrsqrt (__m64 __A)
{
  return (__m64)__builtin_ia32_pfrsqrt ((__v2sf)__A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfrsqit1 (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfrsqit1 ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfsub (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfsub ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pfsubr (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pfsubr ((__v2sf)__A, (__v2sf)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pi2fd (__m64 __A)
{
  return (__m64)__builtin_ia32_pi2fd ((__v2si)__A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmulhrw (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pmulhrw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_prefetch (void *__P)
{
  __builtin_prefetch (__P, 0, 3 );
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_from_float (float __A)
{
  return __extension__ (__m64)(__v2sf){ __A, 0.0f };
}

extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_to_float (__m64 __A)
{
  union { __v2sf v; float a[2]; } __tmp;
  __tmp.v = (__v2sf)__A;
  return __tmp.a[0];
}
# 214 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/mm3dnow.h" 3 4
#undef __DISABLE_3dNOW__
#pragma GCC pop_options
# 49 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fma4intrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fma4intrin.h" 3 4
#define _FMA4INTRIN_H_INCLUDED





#pragma GCC push_options
#pragma GCC target("fma4")
#define __DISABLE_FMA4__



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddss ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsd ((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msub_ps (__m128 __A, __m128 __B, __m128 __C)

{
  return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B, -(__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B, -(__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msub_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddss ((__v4sf)__A, (__v4sf)__B, -(__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msub_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsd ((__v2df)__A, (__v2df)__B, -(__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmacc_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmacc_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B, (__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmacc_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddss (-(__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmacc_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsd (-(__v2df)__A, (__v2df)__B, (__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmsub_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B, -(__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmsub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B, -(__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmsub_ss (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddss (-(__v4sf)__A, (__v4sf)__B, -(__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_nmsub_sd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsd (-(__v2df)__A, (__v2df)__B, -(__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddsub_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddsub_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msubadd_ps (__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B, -(__v4sf)__C);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_msubadd_pd (__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B, -(__v2df)__C);
}


extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_macc_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_macc_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_msub_ps (__m256 __A, __m256 __B, __m256 __C)

{
  return (__m256) __builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B, -(__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_msub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B, -(__v4df)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_nmacc_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_nmacc_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B, (__v4df)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_nmsub_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B, -(__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_nmsub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B, -(__v4df)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maddsub_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256 ((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_maddsub_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256 ((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_msubadd_ps (__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256 ((__v8sf)__A, (__v8sf)__B, -(__v8sf)__C);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_msubadd_pd (__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256 ((__v4df)__A, (__v4df)__B, -(__v4df)__C);
}


#undef __DISABLE_FMA4__
#pragma GCC pop_options
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xopintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xopintrin.h" 3 4
#define _XOPMMINTRIN_H_INCLUDED

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fma4intrin.h" 1 3 4
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xopintrin.h" 2 3 4


#pragma GCC push_options
#pragma GCC target("xop")
#define __DISABLE_XOP__



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacssww ((__v8hi)__A,(__v8hi)__B, (__v8hi)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacsww ((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacsswd ((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacswd ((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccs_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacssdd ((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macc_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacsdd ((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccslo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacssdql ((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macclo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacsdql ((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maccshi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacssdqh ((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_macchi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmacsdqh ((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmadcsswd ((__v8hi)__A,(__v8hi)__B,(__v4si)__C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maddd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpmadcswd ((__v8hi)__A,(__v8hi)__B,(__v4si)__C);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddw_epi8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddbw ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddd_epi8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddbd ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epi8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddbq ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddd_epi16(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddwd ((__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epi16(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddwq ((__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epi32(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphadddq ((__v4si)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddw_epu8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddubw ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddd_epu8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddubd ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epu8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddubq ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddd_epu16(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphadduwd ((__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epu16(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphadduwq ((__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_haddq_epu32(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphaddudq ((__v4si)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsubw_epi8(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphsubbw ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsubd_epi16(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphsubwd ((__v8hi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_hsubq_epi32(__m128i __A)
{
  return (__m128i) __builtin_ia32_vphsubdq ((__v4si)__A);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmov_si128(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpcmov (__A, __B, __C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_perm_epi8(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i) __builtin_ia32_vpperm ((__v16qi)__A, (__v16qi)__B, (__v16qi)__C);
}




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rot_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vprotb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rot_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vprotw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rot_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vprotd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rot_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vprotq ((__v2di)__A, (__v2di)__B);
}
# 271 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xopintrin.h" 3 4
#define _mm_roti_epi8

#define _mm_roti_epi16

#define _mm_roti_epi32

#define _mm_roti_epi64





extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shl_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshlb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shl_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshlw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shl_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshld ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shl_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshlq ((__v2di)__A, (__v2di)__B);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshab ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshaw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshad ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sha_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpshaq ((__v2di)__A, (__v2di)__B);
}




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltub ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleub ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtub ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeub ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomequb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomnequb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseub ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epu8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueub ((__v16qi)__A, (__v16qi)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltuw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleuw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtuw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeuw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomequw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomnequw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseuw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epu16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueuw ((__v8hi)__A, (__v8hi)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltud ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleud ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtud ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeud ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomequd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomnequd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseud ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epu32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueud ((__v4si)__A, (__v4si)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltuq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleuq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtuq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeuq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomequq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomnequq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseuq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epu64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueuq ((__v2di)__A, (__v2di)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomeqb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomneqb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseb ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epi8(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueb ((__v16qi)__A, (__v16qi)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomlew ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgew ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomeqw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomneqw ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalsew ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epi16(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtruew ((__v8hi)__A, (__v8hi)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomled ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomged ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomeqd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomneqd ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalsed ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epi32(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrued ((__v4si)__A, (__v4si)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comlt_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomltq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comle_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomleq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comgt_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgtq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comge_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomgeq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comeq_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomeqq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comneq_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomneqq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comfalse_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomfalseq ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comtrue_epi64(__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpcomtrueq ((__v2di)__A, (__v2di)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_frcz_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_vfrczps ((__v4sf)__A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_frcz_pd (__m128d __A)
{
  return (__m128d) __builtin_ia32_vfrczpd ((__v2df)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_frcz_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf)__A,
     (__v4sf)
     __builtin_ia32_vfrczss ((__v4sf)__B));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_frcz_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df)__A,
      (__v2df)
      __builtin_ia32_vfrczsd ((__v2df)__B));
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_frcz_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_vfrczps256 ((__v8sf)__A);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_frcz_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_vfrczpd256 ((__v4df)__A);
}
# 814 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xopintrin.h" 3 4
#define _mm_permute2_pd





#define _mm256_permute2_pd





#define _mm_permute2_ps





#define _mm256_permute2_ps







#undef __DISABLE_XOP__
#pragma GCC pop_options
# 53 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lwpintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lwpintrin.h" 3 4
#define _LWPINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("lwp")
#define __DISABLE_LWP__


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__llwpcb (void *pcbAddress)
{
  __builtin_ia32_llwpcb (pcbAddress);
}

extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__slwpcb (void)
{
  return __builtin_ia32_slwpcb ();
}
# 64 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lwpintrin.h" 3 4
#define __lwpval32



#define __lwpval64
# 90 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lwpintrin.h" 3 4
#define __lwpins32



#define __lwpins64






#undef __DISABLE_LWP__
#pragma GCC pop_options
# 55 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmiintrin.h" 1 3 4
# 57 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/bmi2intrin.h" 1 3 4
# 59 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tbmintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tbmintrin.h" 3 4
#define _TBMINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("tbm")
#define __DISABLE_TBM__
# 44 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tbmintrin.h" 3 4
#define __bextri_u32




extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcfill_u32 (unsigned int __X)
{
  return __X & (__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blci_u32 (unsigned int __X)
{
  return __X | ~(__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcic_u32 (unsigned int __X)
{
  return ~__X & (__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcmsk_u32 (unsigned int __X)
{
  return __X ^ (__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcs_u32 (unsigned int __X)
{
  return __X | (__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsfill_u32 (unsigned int __X)
{
  return __X | (__X - 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsic_u32 (unsigned int __X)
{
  return ~__X | (__X - 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__t1mskc_u32 (unsigned int __X)
{
  return ~__X | (__X + 1);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzmsk_u32 (unsigned int __X)
{
  return ~__X & (__X - 1);
}
# 113 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/tbmintrin.h" 3 4
#define __bextri_u64




extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcfill_u64 (unsigned long long __X)
{
  return __X & (__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blci_u64 (unsigned long long __X)
{
  return __X | ~(__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcic_u64 (unsigned long long __X)
{
  return ~__X & (__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcmsk_u64 (unsigned long long __X)
{
  return __X ^ (__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcs_u64 (unsigned long long __X)
{
  return __X | (__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsfill_u64 (unsigned long long __X)
{
  return __X | (__X - 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsic_u64 (unsigned long long __X)
{
  return ~__X | (__X - 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__t1mskc_u64 (unsigned long long __X)
{
  return ~__X | (__X + 1);
}

extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzmsk_u64 (unsigned long long __X)
{
  return ~__X & (__X - 1);
}





#undef __DISABLE_TBM__
#pragma GCC pop_options
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/lzcntintrin.h" 1 3 4
# 63 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/rdseedintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/rdseedintrin.h" 3 4
#define _RDSEEDINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("rdseed")
#define __DISABLE_RDSEED__



extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed16_step (unsigned short *p)
{
    return __builtin_ia32_rdseed_hi_step (p);
}

extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed32_step (unsigned int *p)
{
    return __builtin_ia32_rdseed_si_step (p);
}


extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed64_step (unsigned long long *p)
{
    return __builtin_ia32_rdseed_di_step (p);
}



#undef __DISABLE_RDSEED__
#pragma GCC pop_options
# 67 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/prfchwintrin.h" 1 3 4
# 69 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fxsrintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/fxsrintrin.h" 3 4
#define _FXSRINTRIN_H_INCLUDED







extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxsave (void *__P)
{
  return __builtin_ia32_fxsave (__P);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxrstor (void *__P)
{
  return __builtin_ia32_fxrstor (__P);
}


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxsave64 (void *__P)
{
    return __builtin_ia32_fxsave64 (__P);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxrstor64 (void *__P)
{
    return __builtin_ia32_fxrstor64 (__P);
}
# 71 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xsaveintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xsaveintrin.h" 3 4
#define _XSAVEINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("xsave")
#define __DISABLE_XSAVE__


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsave (void *__P, long long __M)
{
  return __builtin_ia32_xsave (__P, __M);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xrstor (void *__P, long long __M)
{
  return __builtin_ia32_xrstor (__P, __M);
}


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsave64 (void *__P, long long __M)
{
  return __builtin_ia32_xsave64 (__P, __M);
}

extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xrstor64 (void *__P, long long __M)
{
  return __builtin_ia32_xrstor64 (__P, __M);
}



#undef __DISABLE_XSAVE__
#pragma GCC pop_options
# 73 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xsaveoptintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/xsaveoptintrin.h" 3 4
#define _XSAVEOPTINTRIN_H_INCLUDED


#pragma GCC push_options
#pragma GCC target("xsaveopt")
#define __DISABLE_XSAVEOPT__


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsaveopt (void *__P, long long __M)
{
  return __builtin_ia32_xsaveopt (__P, __M);
}


extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsaveopt64 (void *__P, long long __M)
{
  return __builtin_ia32_xsaveopt64 (__P, __M);
}



#undef __DISABLE_XSAVEOPT__
#pragma GCC pop_options
# 75 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/adxintrin.h" 1 3 4
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/adxintrin.h" 3 4
#define _ADXINTRIN_H_INCLUDED

extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_addcarryx_u32 (unsigned char __CF, unsigned int __X,
  unsigned int __Y, unsigned int *__P)
{
    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);
}


extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_addcarryx_u64 (unsigned char __CF, unsigned long __X,
  unsigned long __Y, unsigned long long *__P)
{
    return __builtin_ia32_addcarryx_u64 (__CF, __X, __Y, __P);
}
# 77 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h" 2 3 4
# 1496 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3




#define FastFence
#define LoadFence
#define MemoryFence
#define StoreFence

#define YieldProcessor
#define MemoryBarrier
#define PreFetchCacheLine
#define PrefetchForWrite
#define ReadForWriteAccess

#define PF_TEMPORAL_LEVEL_1
#define PF_TEMPORAL_LEVEL_2
#define PF_TEMPORAL_LEVEL_3
#define PF_NON_TEMPORAL_LEVEL_ALL

#define ReadMxCsr
#define WriteMxCsr

#define DbgRaiseAssertionFailure
#define GetCallersEflags

    unsigned int __getcallerseflags(void);

#define GetSegmentLimit

    DWORD __segmentlimit(DWORD Selector);

#define ReadTimeStampCounter






#define MultiplyHigh
#define UnsignedMultiplyHigh

    LONGLONG __mulh(LONGLONG Multiplier,LONGLONG Multiplicand);
    ULONGLONG __umulh(ULONGLONG Multiplier,ULONGLONG Multiplicand);

#define ShiftLeft128
#define ShiftRight128

    DWORD64 __shiftleft128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift);
    DWORD64 __shiftright128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift);

#define Multiply128

    LONG64 _mul128(LONG64 Multiplier,LONG64 Multiplicand,LONG64 *HighProduct);

#define UnsignedMultiply128

    DWORD64 _umul128(DWORD64 Multiplier,DWORD64 Multiplicand,DWORD64 *HighProduct);

    LONG64 MultiplyExtract128(LONG64 Multiplier,LONG64 Multiplicand,BYTE Shift);
    DWORD64 UnsignedMultiplyExtract128(DWORD64 Multiplier,DWORD64 Multiplicand,BYTE Shift);
# 1592 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define EXCEPTION_READ_FAULT
#define EXCEPTION_WRITE_FAULT
#define EXCEPTION_EXECUTE_FAULT



#define CONTEXT_AMD64

#define CONTEXT_CONTROL
#define CONTEXT_INTEGER
#define CONTEXT_SEGMENTS
#define CONTEXT_FLOATING_POINT
#define CONTEXT_DEBUG_REGISTERS

#define CONTEXT_FULL
#define CONTEXT_ALL

#define CONTEXT_EXCEPTION_ACTIVE
#define CONTEXT_SERVICE_ACTIVE
#define CONTEXT_EXCEPTION_REQUEST
#define CONTEXT_EXCEPTION_REPORTING


#define INITIAL_MXCSR
#define INITIAL_FPCSR

  typedef struct _XMM_SAVE_AREA32 {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
    M128A XmmRegisters[16];
    BYTE Reserved4[96];
  } XMM_SAVE_AREA32,*PXMM_SAVE_AREA32;

#define LEGACY_SAVE_AREA_LENGTH

  typedef struct __attribute__ ((__aligned__ (16))) _CONTEXT {
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;
    __extension__ union {
      XMM_SAVE_AREA32 FltSave;
      XMM_SAVE_AREA32 FloatSave;
      __extension__ struct {
 M128A Header[2];
 M128A Legacy[8];
 M128A Xmm0;
 M128A Xmm1;
 M128A Xmm2;
 M128A Xmm3;
 M128A Xmm4;
 M128A Xmm5;
 M128A Xmm6;
 M128A Xmm7;
 M128A Xmm8;
 M128A Xmm9;
 M128A Xmm10;
 M128A Xmm11;
 M128A Xmm12;
 M128A Xmm13;
 M128A Xmm14;
 M128A Xmm15;
      };
    };
    M128A VectorRegister[26];
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
  } CONTEXT,*PCONTEXT;

#define RUNTIME_FUNCTION_INDIRECT

  typedef struct _RUNTIME_FUNCTION {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
  } RUNTIME_FUNCTION,*PRUNTIME_FUNCTION;

  typedef PRUNTIME_FUNCTION (*PGET_RUNTIME_FUNCTION_CALLBACK)(DWORD64 ControlPc,PVOID Context);
  typedef DWORD (*POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK)(HANDLE Process,PVOID TableAddress,PDWORD Entries,PRUNTIME_FUNCTION *Functions);

#define OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME
# 1873 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define _LDT_ENTRY_DEFINED

    typedef struct _LDT_ENTRY {
      WORD LimitLow;
      WORD BaseLow;
      union {
 struct {
   BYTE BaseMid;
   BYTE Flags1;
   BYTE Flags2;
   BYTE BaseHi;
 } Bytes;
 struct {
   DWORD BaseMid : 8;
   DWORD Type : 5;
   DWORD Dpl : 2;
   DWORD Pres : 1;
   DWORD LimitHi : 4;
   DWORD Sys : 1;
   DWORD Reserved_0 : 1;
   DWORD Default_Big : 1;
   DWORD Granularity : 1;
   DWORD BaseHi : 8;
 } Bits;
      } HighWord;
    } LDT_ENTRY,*PLDT_ENTRY;
# 2221 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define EXCEPTION_NONCONTINUABLE
#define EXCEPTION_UNWINDING
#define EXCEPTION_EXIT_UNWIND
#define EXCEPTION_STACK_INVALID
#define EXCEPTION_NESTED_CALL
#define EXCEPTION_TARGET_UNWIND
#define EXCEPTION_COLLIDED_UNWIND
#define EXCEPTION_UNWIND

#define IS_UNWINDING
#define IS_DISPATCHING
#define IS_TARGET_UNWIND

#define EXCEPTION_MAXIMUM_PARAMETERS

    typedef struct _EXCEPTION_RECORD {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      struct _EXCEPTION_RECORD *ExceptionRecord;
      PVOID ExceptionAddress;
      DWORD NumberParameters;
      ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

    typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

    typedef struct _EXCEPTION_RECORD32 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD ExceptionRecord;
      DWORD ExceptionAddress;
      DWORD NumberParameters;
      DWORD ExceptionInformation[15];
    } EXCEPTION_RECORD32,*PEXCEPTION_RECORD32;

    typedef struct _EXCEPTION_RECORD64 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD64 ExceptionRecord;
      DWORD64 ExceptionAddress;
      DWORD NumberParameters;
      DWORD __unusedAlignment;
      DWORD64 ExceptionInformation[15];
    } EXCEPTION_RECORD64,*PEXCEPTION_RECORD64;

    typedef struct _EXCEPTION_POINTERS {
      PEXCEPTION_RECORD ExceptionRecord;
      PCONTEXT ContextRecord;
    } EXCEPTION_POINTERS,*PEXCEPTION_POINTERS;
# 2279 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define UNWIND_HISTORY_TABLE_SIZE

  typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
  } UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY;

#define UNWIND_HISTORY_TABLE_NONE
#define UNWIND_HISTORY_TABLE_GLOBAL
#define UNWIND_HISTORY_TABLE_LOCAL

  typedef struct _UNWIND_HISTORY_TABLE {
    ULONG Count;
    UCHAR Search;
    ULONG64 LowAddress;
    ULONG64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
  } UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE;



  struct _DISPATCHER_CONTEXT;
  typedef struct _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;
  typedef struct _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;

  struct _DISPATCHER_CONTEXT {
    ULONG64 ControlPc;
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    ULONG64 EstablisherFrame;
    ULONG64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;

    PUNWIND_HISTORY_TABLE HistoryTable;
    ULONG ScopeIndex;
    ULONG Fill0;
  };



  typedef struct _KNONVOLATILE_CONTEXT_POINTERS
  {
    PM128A FloatingContext[16];
    PULONG64 IntegerContext[16];
  } KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;


    typedef PVOID PACCESS_TOKEN;
    typedef PVOID PSECURITY_DESCRIPTOR;
    typedef PVOID PSID;
    typedef PVOID PCLAIMS_BLOB;
    typedef DWORD ACCESS_MASK;
    typedef ACCESS_MASK *PACCESS_MASK;

#define DELETE
#define READ_CONTROL
#define WRITE_DAC
#define WRITE_OWNER
#define SYNCHRONIZE

#define STANDARD_RIGHTS_REQUIRED

#define STANDARD_RIGHTS_READ
#define STANDARD_RIGHTS_WRITE
#define STANDARD_RIGHTS_EXECUTE

#define STANDARD_RIGHTS_ALL

#define SPECIFIC_RIGHTS_ALL

#define ACCESS_SYSTEM_SECURITY
#define MAXIMUM_ALLOWED

#define GENERIC_READ
#define GENERIC_WRITE
#define GENERIC_EXECUTE
#define GENERIC_ALL

    typedef struct _GENERIC_MAPPING {
      ACCESS_MASK GenericRead;
      ACCESS_MASK GenericWrite;
      ACCESS_MASK GenericExecute;
      ACCESS_MASK GenericAll;
    } GENERIC_MAPPING;
    typedef GENERIC_MAPPING *PGENERIC_MAPPING;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack4.h" 1 3






#pragma pack(push,4)
# 2368 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
    typedef struct _LUID_AND_ATTRIBUTES {
      LUID Luid;
      DWORD Attributes;
    } LUID_AND_ATTRIBUTES,*PLUID_AND_ATTRIBUTES;
    typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
    typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 2375 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3


#define SID_IDENTIFIER_AUTHORITY_DEFINED
    typedef struct _SID_IDENTIFIER_AUTHORITY {
      BYTE Value[6];
    } SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY;



#define SID_DEFINED
    typedef struct _SID {
      BYTE Revision;
      BYTE SubAuthorityCount;
      SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
      DWORD SubAuthority[1];
    } SID,*PISID;


#define SID_REVISION
#define SID_MAX_SUB_AUTHORITIES
#define SID_RECOMMENDED_SUB_AUTHORITIES

#define SECURITY_MAX_SID_SIZE


#define SID_HASH_SIZE

    typedef enum _SID_NAME_USE {
      SidTypeUser = 1,SidTypeGroup,SidTypeDomain,SidTypeAlias,SidTypeWellKnownGroup,SidTypeDeletedAccount,SidTypeInvalid,SidTypeUnknown,SidTypeComputer,SidTypeLabel
    } SID_NAME_USE,*PSID_NAME_USE;

    typedef struct _SID_AND_ATTRIBUTES {



      PSID Sid;

      DWORD Attributes;
    } SID_AND_ATTRIBUTES,*PSID_AND_ATTRIBUTES;

    typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
    typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;

    typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

    typedef struct _SID_AND_ATTRIBUTES_HASH {
      DWORD SidCount;
      PSID_AND_ATTRIBUTES SidAttr;
      SID_HASH_ENTRY Hash[32];
    } SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;

#define SECURITY_NULL_SID_AUTHORITY
#define SECURITY_WORLD_SID_AUTHORITY
#define SECURITY_LOCAL_SID_AUTHORITY
#define SECURITY_CREATOR_SID_AUTHORITY
#define SECURITY_NON_UNIQUE_AUTHORITY
#define SECURITY_RESOURCE_MANAGER_AUTHORITY

#define SECURITY_NULL_RID
#define SECURITY_WORLD_RID
#define SECURITY_LOCAL_RID
#define SECURITY_LOCAL_LOGON_RID

#define SECURITY_CREATOR_OWNER_RID
#define SECURITY_CREATOR_GROUP_RID
#define SECURITY_CREATOR_OWNER_SERVER_RID
#define SECURITY_CREATOR_GROUP_SERVER_RID
#define SECURITY_CREATOR_OWNER_RIGHTS_RID

#define SECURITY_NT_AUTHORITY

#define SECURITY_DIALUP_RID
#define SECURITY_NETWORK_RID
#define SECURITY_BATCH_RID
#define SECURITY_INTERACTIVE_RID
#define SECURITY_LOGON_IDS_RID
#define SECURITY_LOGON_IDS_RID_COUNT
#define SECURITY_SERVICE_RID
#define SECURITY_ANONYMOUS_LOGON_RID
#define SECURITY_PROXY_RID
#define SECURITY_ENTERPRISE_CONTROLLERS_RID
#define SECURITY_SERVER_LOGON_RID
#define SECURITY_PRINCIPAL_SELF_RID
#define SECURITY_AUTHENTICATED_USER_RID
#define SECURITY_RESTRICTED_CODE_RID
#define SECURITY_TERMINAL_SERVER_RID
#define SECURITY_REMOTE_LOGON_RID
#define SECURITY_THIS_ORGANIZATION_RID
#define SECURITY_IUSER_RID
#define SECURITY_LOCAL_SYSTEM_RID
#define SECURITY_LOCAL_SERVICE_RID
#define SECURITY_NETWORK_SERVICE_RID

#define SECURITY_NT_NON_UNIQUE
#define SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT

#define SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID

#define SECURITY_BUILTIN_DOMAIN_RID
#define SECURITY_WRITE_RESTRICTED_CODE_RID

#define SECURITY_PACKAGE_BASE_RID
#define SECURITY_PACKAGE_RID_COUNT
#define SECURITY_PACKAGE_NTLM_RID
#define SECURITY_PACKAGE_SCHANNEL_RID
#define SECURITY_PACKAGE_DIGEST_RID

#define SECURITY_CRED_TYPE_BASE_RID
#define SECURITY_CRED_TYPE_RID_COUNT
#define SECURITY_CRED_TYPE_THIS_ORG_CERT_RID

#define SECURITY_MIN_BASE_RID

#define SECURITY_SERVICE_ID_BASE_RID
#define SECURITY_SERVICE_ID_RID_COUNT

#define SECURITY_RESERVED_ID_BASE_RID

#define SECURITY_APPPOOL_ID_BASE_RID
#define SECURITY_APPPOOL_ID_RID_COUNT

#define SECURITY_VIRTUALSERVER_ID_BASE_RID
#define SECURITY_VIRTUALSERVER_ID_RID_COUNT

#define SECURITY_USERMODEDRIVERHOST_ID_BASE_RID
#define SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT

#define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID
#define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT

#define SECURITY_WMIHOST_ID_BASE_RID
#define SECURITY_WMIHOST_ID_RID_COUNT

#define SECURITY_TASK_ID_BASE_RID

#define SECURITY_NFS_ID_BASE_RID

#define SECURITY_COM_ID_BASE_RID

#define SECURITY_WINDOW_MANAGER_BASE_RID

#define SECURITY_RDV_GFX_BASE_RID

#define SECURITY_DASHOST_ID_BASE_RID
#define SECURITY_DASHOST_ID_RID_COUNT

#define SECURITY_VIRTUALACCOUNT_ID_RID_COUNT

#define SECURITY_MAX_BASE_RID

#define SECURITY_MAX_ALWAYS_FILTERED
#define SECURITY_MIN_NEVER_FILTERED

#define SECURITY_OTHER_ORGANIZATION_RID

#define SECURITY_WINDOWSMOBILE_ID_BASE_RID

#define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED
#define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS
#define DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS

#define FOREST_USER_RID_MAX

#define DOMAIN_USER_RID_ADMIN
#define DOMAIN_USER_RID_GUEST
#define DOMAIN_USER_RID_KRBTGT

#define DOMAIN_USER_RID_MAX

#define DOMAIN_GROUP_RID_ADMINS
#define DOMAIN_GROUP_RID_USERS
#define DOMAIN_GROUP_RID_GUESTS
#define DOMAIN_GROUP_RID_COMPUTERS
#define DOMAIN_GROUP_RID_CONTROLLERS
#define DOMAIN_GROUP_RID_CERT_ADMINS
#define DOMAIN_GROUP_RID_SCHEMA_ADMINS
#define DOMAIN_GROUP_RID_ENTERPRISE_ADMINS
#define DOMAIN_GROUP_RID_POLICY_ADMINS
#define DOMAIN_GROUP_RID_READONLY_CONTROLLERS
#define DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS

#define DOMAIN_ALIAS_RID_ADMINS
#define DOMAIN_ALIAS_RID_USERS
#define DOMAIN_ALIAS_RID_GUESTS
#define DOMAIN_ALIAS_RID_POWER_USERS

#define DOMAIN_ALIAS_RID_ACCOUNT_OPS
#define DOMAIN_ALIAS_RID_SYSTEM_OPS
#define DOMAIN_ALIAS_RID_PRINT_OPS
#define DOMAIN_ALIAS_RID_BACKUP_OPS

#define DOMAIN_ALIAS_RID_REPLICATOR
#define DOMAIN_ALIAS_RID_RAS_SERVERS
#define DOMAIN_ALIAS_RID_PREW2KCOMPACCESS
#define DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS
#define DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS
#define DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS

#define DOMAIN_ALIAS_RID_MONITORING_USERS
#define DOMAIN_ALIAS_RID_LOGGING_USERS
#define DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS
#define DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS
#define DOMAIN_ALIAS_RID_DCOM_USERS

#define DOMAIN_ALIAS_RID_IUSERS
#define DOMAIN_ALIAS_RID_CRYPTO_OPERATORS
#define DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP
#define DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP
#define DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP
#define DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP
#define DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS
#define DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS
#define DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS
#define DOMAIN_ALIAS_RID_HYPER_V_ADMINS
#define DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS
#define DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS

#define SECURITY_APP_PACKAGE_AUTHORITY

#define SECURITY_APP_PACKAGE_BASE_RID
#define SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT
#define SECURITY_APP_PACKAGE_RID_COUNT
#define SECURITY_CAPABILITY_BASE_RID
#define SECURITY_BUILTIN_CAPABILITY_RID_COUNT
#define SECURITY_CAPABILITY_RID_COUNT

#define SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE

#define SECURITY_CAPABILITY_INTERNET_CLIENT
#define SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER
#define SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER
#define SECURITY_CAPABILITY_PICTURES_LIBRARY
#define SECURITY_CAPABILITY_VIDEOS_LIBRARY
#define SECURITY_CAPABILITY_MUSIC_LIBRARY
#define SECURITY_CAPABILITY_DOCUMENTS_LIBRARY
#define SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION
#define SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES
#define SECURITY_CAPABILITY_REMOVABLE_STORAGE

#define SECURITY_CAPABILITY_INTERNET_EXPLORER

#define SECURITY_MANDATORY_LABEL_AUTHORITY
#define SECURITY_MANDATORY_UNTRUSTED_RID
#define SECURITY_MANDATORY_LOW_RID
#define SECURITY_MANDATORY_MEDIUM_RID
#define SECURITY_MANDATORY_HIGH_RID
#define SECURITY_MANDATORY_SYSTEM_RID
#define SECURITY_MANDATORY_PROTECTED_PROCESS_RID

#define SECURITY_MANDATORY_MAXIMUM_USER_RID

#define MANDATORY_LEVEL_TO_MANDATORY_RID

#define SECURITY_SCOPED_POLICY_ID_AUTHORITY

#define SECURITY_AUTHENTICATION_AUTHORITY
#define SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT
#define SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID
#define SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID

#define SECURITY_TRUSTED_INSTALLER_RID1
#define SECURITY_TRUSTED_INSTALLER_RID2
#define SECURITY_TRUSTED_INSTALLER_RID3
#define SECURITY_TRUSTED_INSTALLER_RID4
#define SECURITY_TRUSTED_INSTALLER_RID5

    typedef enum {
      WinNullSid = 0,WinWorldSid = 1,WinLocalSid = 2,WinCreatorOwnerSid = 3,
      WinCreatorGroupSid = 4,WinCreatorOwnerServerSid = 5,
      WinCreatorGroupServerSid = 6,WinNtAuthoritySid = 7,WinDialupSid = 8,
      WinNetworkSid = 9,WinBatchSid = 10,WinInteractiveSid = 11,
      WinServiceSid = 12,WinAnonymousSid = 13,WinProxySid = 14,
      WinEnterpriseControllersSid = 15,WinSelfSid = 16,
      WinAuthenticatedUserSid = 17,WinRestrictedCodeSid = 18,
      WinTerminalServerSid = 19,WinRemoteLogonIdSid = 20,WinLogonIdsSid = 21,
      WinLocalSystemSid = 22,WinLocalServiceSid = 23,WinNetworkServiceSid = 24,
      WinBuiltinDomainSid = 25,WinBuiltinAdministratorsSid = 26,
      WinBuiltinUsersSid = 27,WinBuiltinGuestsSid = 28,
      WinBuiltinPowerUsersSid = 29,WinBuiltinAccountOperatorsSid = 30,
      WinBuiltinSystemOperatorsSid = 31,WinBuiltinPrintOperatorsSid = 32,
      WinBuiltinBackupOperatorsSid = 33,WinBuiltinReplicatorSid = 34,
      WinBuiltinPreWindows2000CompatibleAccessSid = 35,
      WinBuiltinRemoteDesktopUsersSid = 36,
      WinBuiltinNetworkConfigurationOperatorsSid = 37,
      WinAccountAdministratorSid = 38,WinAccountGuestSid = 39,
      WinAccountKrbtgtSid = 40,WinAccountDomainAdminsSid = 41,
      WinAccountDomainUsersSid = 42,WinAccountDomainGuestsSid = 43,
      WinAccountComputersSid = 44,WinAccountControllersSid = 45,
      WinAccountCertAdminsSid = 46,WinAccountSchemaAdminsSid = 47,
      WinAccountEnterpriseAdminsSid = 48,WinAccountPolicyAdminsSid = 49,
      WinAccountRasAndIasServersSid = 50,WinNTLMAuthenticationSid = 51,
      WinDigestAuthenticationSid = 52,WinSChannelAuthenticationSid = 53,
      WinThisOrganizationSid = 54,WinOtherOrganizationSid = 55,
      WinBuiltinIncomingForestTrustBuildersSid = 56,
      WinBuiltinPerfMonitoringUsersSid = 57,WinBuiltinPerfLoggingUsersSid = 58,
      WinBuiltinAuthorizationAccessSid = 59,
      WinBuiltinTerminalServerLicenseServersSid = 60,
      WinBuiltinDCOMUsersSid = 61,WinBuiltinIUsersSid = 62,
      WinIUserSid = 63, WinBuiltinCryptoOperatorsSid = 64,
      WinUntrustedLabelSid = 65, WinLowLabelSid = 66, WinMediumLabelSid = 67,
      WinHighLabelSid = 68, WinSystemLabelSid = 69, WinWriteRestrictedCodeSid = 70,
      WinCreatorOwnerRightsSid = 71, WinCacheablePrincipalsGroupSid = 72,
      WinNonCacheablePrincipalsGroupSid = 73, WinEnterpriseReadonlyControllersSid = 74,
      WinAccountReadonlyControllersSid = 75, WinBuiltinEventLogReadersGroup = 76,
      WinNewEnterpriseReadonlyControllersSid = 77, WinBuiltinCertSvcDComAccessGroup = 78,
      WinMediumPlusLabelSid = 79, WinLocalLogonSid = 80, WinConsoleLogonSid = 81,
      WinThisOrganizationCertificateSid = 82, WinApplicationPackageAuthoritySid = 83,
      WinBuiltinAnyPackageSid = 84, WinCapabilityInternetClientSid = 85,
      WinCapabilityInternetClientServerSid = 86,
      WinCapabilityPrivateNetworkClientServerSid = 87,
      WinCapabilityPicturesLibrarySid = 88, WinCapabilityVideosLibrarySid = 89,
      WinCapabilityMusicLibrarySid = 90, WinCapabilityDocumentsLibrarySid = 91,
      WinCapabilitySharedUserCertificatesSid = 92, WinCapabilityEnterpriseAuthenticationSid = 93,
      WinCapabilityRemovableStorageSid = 94, WinBuiltinRDSRemoteAccessServersSid = 95,
      WinBuiltinRDSEndpointServersSid = 96, WinBuiltinRDSManagementServersSid = 97,
      WinUserModeDriversSid = 98, WinBuiltinHyperVAdminsSid = 99,
      WinAccountCloneableControllersSid = 100,
      WinBuiltinAccessControlAssistanceOperatorsSid = 101,
      WinBuiltinRemoteManagementUsersSid = 102, WinAuthenticationAuthorityAssertedSid = 103,
      WinAuthenticationServiceAssertedSid = 104
} WELL_KNOWN_SID_TYPE;

#define SYSTEM_LUID
#define ANONYMOUS_LOGON_LUID
#define LOCALSERVICE_LUID
#define NETWORKSERVICE_LUID
#define IUSER_LUID

#define SE_GROUP_MANDATORY
#define SE_GROUP_ENABLED_BY_DEFAULT
#define SE_GROUP_ENABLED
#define SE_GROUP_OWNER
#define SE_GROUP_USE_FOR_DENY_ONLY
#define SE_GROUP_INTEGRITY
#define SE_GROUP_INTEGRITY_ENABLED
#define SE_GROUP_LOGON_ID
#define SE_GROUP_RESOURCE

#define SE_GROUP_VALID_ATTRIBUTES

#define ACL_REVISION
#define ACL_REVISION_DS

#define ACL_REVISION1
#define MIN_ACL_REVISION
#define ACL_REVISION2
#define ACL_REVISION3
#define ACL_REVISION4
#define MAX_ACL_REVISION

    typedef struct _ACL {
      BYTE AclRevision;
      BYTE Sbz1;
      WORD AclSize;
      WORD AceCount;
      WORD Sbz2;
    } ACL;
    typedef ACL *PACL;

    typedef struct _ACE_HEADER {
      BYTE AceType;
      BYTE AceFlags;
      WORD AceSize;
    } ACE_HEADER;
    typedef ACE_HEADER *PACE_HEADER;

#define ACCESS_MIN_MS_ACE_TYPE
#define ACCESS_ALLOWED_ACE_TYPE
#define ACCESS_DENIED_ACE_TYPE
#define SYSTEM_AUDIT_ACE_TYPE
#define SYSTEM_ALARM_ACE_TYPE
#define ACCESS_MAX_MS_V2_ACE_TYPE

#define ACCESS_ALLOWED_COMPOUND_ACE_TYPE
#define ACCESS_MAX_MS_V3_ACE_TYPE

#define ACCESS_MIN_MS_OBJECT_ACE_TYPE
#define ACCESS_ALLOWED_OBJECT_ACE_TYPE
#define ACCESS_DENIED_OBJECT_ACE_TYPE
#define SYSTEM_AUDIT_OBJECT_ACE_TYPE
#define SYSTEM_ALARM_OBJECT_ACE_TYPE
#define ACCESS_MAX_MS_OBJECT_ACE_TYPE

#define ACCESS_MAX_MS_V4_ACE_TYPE
#define ACCESS_MAX_MS_ACE_TYPE

#define ACCESS_ALLOWED_CALLBACK_ACE_TYPE
#define ACCESS_DENIED_CALLBACK_ACE_TYPE
#define ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE
#define ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE
#define SYSTEM_AUDIT_CALLBACK_ACE_TYPE
#define SYSTEM_ALARM_CALLBACK_ACE_TYPE
#define SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE
#define SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE

#define SYSTEM_MANDATORY_LABEL_ACE_TYPE
#define SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE
#define SYSTEM_SCOPED_POLICY_ID_ACE_TYPE
#define ACCESS_MAX_MS_V5_ACE_TYPE

#define OBJECT_INHERIT_ACE
#define CONTAINER_INHERIT_ACE
#define NO_PROPAGATE_INHERIT_ACE
#define INHERIT_ONLY_ACE
#define INHERITED_ACE
#define VALID_INHERIT_FLAGS

#define SUCCESSFUL_ACCESS_ACE_FLAG
#define FAILED_ACCESS_ACE_FLAG

    typedef struct _ACCESS_ALLOWED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_ACE;

    typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

    typedef struct _ACCESS_DENIED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_ACE;
    typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

    typedef struct _SYSTEM_AUDIT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_ACE;
    typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

    typedef struct _SYSTEM_ALARM_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_ACE;
    typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

    typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_RESOURCE_ATTRIBUTE_ACE,*PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

    typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_SCOPED_POLICY_ID_ACE,*PSYSTEM_SCOPED_POLICY_ID_ACE;

    typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

#define SYSTEM_MANDATORY_LABEL_NO_WRITE_UP
#define SYSTEM_MANDATORY_LABEL_NO_READ_UP
#define SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP

#define SYSTEM_MANDATORY_LABEL_VALID_MASK

    typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,*PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_OBJECT_ACE,*PACCESS_DENIED_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_OBJECT_ACE,*PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } SYSTEM_ALARM_CALLBACK_OBJECT_ACE,*PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;

#define ACE_OBJECT_TYPE_PRESENT
#define ACE_INHERITED_OBJECT_TYPE_PRESENT

    typedef enum _ACL_INFORMATION_CLASS {
      AclRevisionInformation = 1,AclSizeInformation
    } ACL_INFORMATION_CLASS;

    typedef struct _ACL_REVISION_INFORMATION {
      DWORD AclRevision;
    } ACL_REVISION_INFORMATION;
    typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

    typedef struct _ACL_SIZE_INFORMATION {
      DWORD AceCount;
      DWORD AclBytesInUse;
      DWORD AclBytesFree;
    } ACL_SIZE_INFORMATION;
    typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

#define SECURITY_DESCRIPTOR_REVISION
#define SECURITY_DESCRIPTOR_REVISION1

#define SECURITY_DESCRIPTOR_MIN_LENGTH

    typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;

#define SE_OWNER_DEFAULTED
#define SE_GROUP_DEFAULTED
#define SE_DACL_PRESENT
#define SE_DACL_DEFAULTED
#define SE_SACL_PRESENT
#define SE_SACL_DEFAULTED
#define SE_DACL_AUTO_INHERIT_REQ
#define SE_SACL_AUTO_INHERIT_REQ
#define SE_DACL_AUTO_INHERITED
#define SE_SACL_AUTO_INHERITED
#define SE_DACL_PROTECTED
#define SE_SACL_PROTECTED
#define SE_RM_CONTROL_VALID
#define SE_SELF_RELATIVE

    typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      DWORD Owner;
      DWORD Group;
      DWORD Sacl;
      DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE,*PISECURITY_DESCRIPTOR_RELATIVE;

    typedef struct _SECURITY_DESCRIPTOR {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      PSID Owner;
      PSID Group;
      PACL Sacl;
      PACL Dacl;
    } SECURITY_DESCRIPTOR,*PISECURITY_DESCRIPTOR;

    typedef struct _OBJECT_TYPE_LIST {
      WORD Level;
      WORD Sbz;
      GUID *ObjectType;
    } OBJECT_TYPE_LIST,*POBJECT_TYPE_LIST;

#define ACCESS_OBJECT_GUID
#define ACCESS_PROPERTY_SET_GUID
#define ACCESS_PROPERTY_GUID

#define ACCESS_MAX_LEVEL

    typedef enum _AUDIT_EVENT_TYPE {
      AuditEventObjectAccess,AuditEventDirectoryServiceAccess
    } AUDIT_EVENT_TYPE,*PAUDIT_EVENT_TYPE;

#define AUDIT_ALLOW_NO_PRIVILEGE

#define ACCESS_DS_SOURCE_A
#define ACCESS_DS_SOURCE_W
#define ACCESS_DS_OBJECT_TYPE_NAME_A
#define ACCESS_DS_OBJECT_TYPE_NAME_W

#define SE_PRIVILEGE_ENABLED_BY_DEFAULT
#define SE_PRIVILEGE_ENABLED
#define SE_PRIVILEGE_REMOVED
#define SE_PRIVILEGE_USED_FOR_ACCESS

#define SE_PRIVILEGE_VALID_ATTRIBUTES

#define PRIVILEGE_SET_ALL_NECESSARY

    typedef struct _PRIVILEGE_SET {
      DWORD PrivilegeCount;
      DWORD Control;
      LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET,*PPRIVILEGE_SET;

#define ACCESS_REASON_TYPE_MASK
#define ACCESS_REASON_DATA_MASK

#define ACCESS_REASON_STAGING_MASK
#define ACCESS_REASON_EXDATA_MASK

    typedef enum _ACCESS_REASON_TYPE {
      AccessReasonNone = 0x00000000,
      AccessReasonAllowedAce = 0x00010000,
      AccessReasonDeniedAce = 0x00020000,
      AccessReasonAllowedParentAce = 0x00030000,
      AccessReasonDeniedParentAce = 0x00040000,
      AccessReasonNotGrantedByCape = 0x00050000,
      AccessReasonNotGrantedByParentCape = 0x00060000,
      AccessReasonNotGrantedToAppContainer = 0x00070000,
      AccessReasonMissingPrivilege = 0x00100000,
      AccessReasonFromPrivilege = 0x00200000,
      AccessReasonIntegrityLevel = 0x00300000,
      AccessReasonOwnership = 0x00400000,
      AccessReasonNullDacl = 0x00500000,
      AccessReasonEmptyDacl = 0x00600000,
      AccessReasonNoSD = 0x00700000,
      AccessReasonNoGrant = 0x00800000
    } ACCESS_REASON_TYPE;
    typedef DWORD ACCESS_REASON;

    typedef struct _ACCESS_REASONS {
      ACCESS_REASON Data[32];
    } ACCESS_REASONS,*PACCESS_REASONS;

#define SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE
#define SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE
#define SE_SECURITY_DESCRIPTOR_VALID_FLAGS

    typedef struct _SE_SECURITY_DESCRIPTOR {
      DWORD Size;
      DWORD Flags;
      PSECURITY_DESCRIPTOR SecurityDescriptor;
    } SE_SECURITY_DESCRIPTOR,*PSE_SECURITY_DESCRIPTOR;

    typedef struct _SE_ACCESS_REQUEST {
      DWORD Size;
      PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
      ACCESS_MASK DesiredAccess;
      ACCESS_MASK PreviouslyGrantedAccess;
      PSID PrincipalSelfSid;
      PGENERIC_MAPPING GenericMapping;
      DWORD ObjectTypeListCount;
      POBJECT_TYPE_LIST ObjectTypeList;
    } SE_ACCESS_REQUEST,*PSE_ACCESS_REQUEST;

    typedef struct _SE_ACCESS_REPLY {
      DWORD Size;
      DWORD ResultListCount;
      PACCESS_MASK GrantedAccess;
      PDWORD AccessStatus;
      PACCESS_REASONS AccessReason;
      PPRIVILEGE_SET *Privileges;
    } SE_ACCESS_REPLY,*PSE_ACCESS_REPLY;

#define SE_CREATE_TOKEN_NAME
#define SE_ASSIGNPRIMARYTOKEN_NAME
#define SE_LOCK_MEMORY_NAME
#define SE_INCREASE_QUOTA_NAME
#define SE_UNSOLICITED_INPUT_NAME
#define SE_MACHINE_ACCOUNT_NAME
#define SE_TCB_NAME
#define SE_SECURITY_NAME
#define SE_TAKE_OWNERSHIP_NAME
#define SE_LOAD_DRIVER_NAME
#define SE_SYSTEM_PROFILE_NAME
#define SE_SYSTEMTIME_NAME
#define SE_PROF_SINGLE_PROCESS_NAME
#define SE_INC_BASE_PRIORITY_NAME
#define SE_CREATE_PAGEFILE_NAME
#define SE_CREATE_PERMANENT_NAME
#define SE_BACKUP_NAME
#define SE_RESTORE_NAME
#define SE_SHUTDOWN_NAME
#define SE_DEBUG_NAME
#define SE_AUDIT_NAME
#define SE_SYSTEM_ENVIRONMENT_NAME
#define SE_CHANGE_NOTIFY_NAME
#define SE_REMOTE_SHUTDOWN_NAME
#define SE_UNDOCK_NAME
#define SE_SYNC_AGENT_NAME
#define SE_ENABLE_DELEGATION_NAME
#define SE_MANAGE_VOLUME_NAME
#define SE_IMPERSONATE_NAME
#define SE_CREATE_GLOBAL_NAME
#define SE_TRUSTED_CREDMAN_ACCESS_NAME
#define SE_RELABEL_NAME
#define SE_INC_WORKING_SET_NAME
#define SE_TIME_ZONE_NAME
#define SE_CREATE_SYMBOLIC_LINK_NAME

    typedef enum _SECURITY_IMPERSONATION_LEVEL {
      SecurityAnonymous,SecurityIdentification,SecurityImpersonation,SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;

#define SECURITY_MAX_IMPERSONATION_LEVEL
#define SECURITY_MIN_IMPERSONATION_LEVEL
#define DEFAULT_IMPERSONATION_LEVEL
#define VALID_IMPERSONATION_LEVEL

#define TOKEN_ASSIGN_PRIMARY
#define TOKEN_DUPLICATE
#define TOKEN_IMPERSONATE
#define TOKEN_QUERY
#define TOKEN_QUERY_SOURCE
#define TOKEN_ADJUST_PRIVILEGES
#define TOKEN_ADJUST_GROUPS
#define TOKEN_ADJUST_DEFAULT
#define TOKEN_ADJUST_SESSIONID

#define TOKEN_ALL_ACCESS_P
#define TOKEN_ALL_ACCESS
#define TOKEN_READ

#define TOKEN_WRITE

#define TOKEN_EXECUTE

    typedef enum _TOKEN_TYPE {
      TokenPrimary = 1,TokenImpersonation
    } TOKEN_TYPE;
    typedef TOKEN_TYPE *PTOKEN_TYPE;

    typedef enum _TOKEN_ELEVATION_TYPE {
      TokenElevationTypeDefault = 1,
      TokenElevationTypeFull,
      TokenElevationTypeLimited
    } TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

    typedef enum _TOKEN_INFORMATION_CLASS {
      TokenUser = 1,
      TokenGroups,
      TokenPrivileges,
      TokenOwner,
      TokenPrimaryGroup,
      TokenDefaultDacl,
      TokenSource,
      TokenType,
      TokenImpersonationLevel,
      TokenStatistics,
      TokenRestrictedSids,
      TokenSessionId,
      TokenGroupsAndPrivileges,
      TokenSessionReference,
      TokenSandBoxInert,
      TokenAuditPolicy,
      TokenOrigin,
      TokenElevationType,
      TokenLinkedToken,
      TokenElevation,
      TokenHasRestrictions,
      TokenAccessInformation,
      TokenVirtualizationAllowed,
      TokenVirtualizationEnabled,
      TokenIntegrityLevel,
      TokenUIAccess,
      TokenMandatoryPolicy,
      TokenLogonSid,
      TokenIsAppContainer,
      TokenCapabilities,
      TokenAppContainerSid,
      TokenAppContainerNumber,
      TokenUserClaimAttributes,
      TokenDeviceClaimAttributes,
      TokenRestrictedUserClaimAttributes,
      TokenRestrictedDeviceClaimAttributes,
      TokenDeviceGroups,
      TokenRestrictedDeviceGroups,
      TokenSecurityAttributes,
      TokenIsRestricted,
      MaxTokenInfoClass
    } TOKEN_INFORMATION_CLASS,*PTOKEN_INFORMATION_CLASS;

    typedef struct _TOKEN_USER {
      SID_AND_ATTRIBUTES User;
    } TOKEN_USER,*PTOKEN_USER;

    typedef struct _TOKEN_GROUPS {
      DWORD GroupCount;



      SID_AND_ATTRIBUTES Groups[1];

    } TOKEN_GROUPS,*PTOKEN_GROUPS;

    typedef struct _TOKEN_PRIVILEGES {
      DWORD PrivilegeCount;
      LUID_AND_ATTRIBUTES Privileges[1];
    } TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES;

    typedef struct _TOKEN_OWNER {
      PSID Owner;
    } TOKEN_OWNER,*PTOKEN_OWNER;

    typedef struct _TOKEN_PRIMARY_GROUP {
      PSID PrimaryGroup;
    } TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;

    typedef struct _TOKEN_DEFAULT_DACL {
      PACL DefaultDacl;
    } TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;

    typedef struct _TOKEN_USER_CLAIMS {
      PCLAIMS_BLOB UserClaims;
    } TOKEN_USER_CLAIMS,*PTOKEN_USER_CLAIMS;

    typedef struct _TOKEN_DEVICE_CLAIMS {
      PCLAIMS_BLOB DeviceClaims;
    } TOKEN_DEVICE_CLAIMS,*PTOKEN_DEVICE_CLAIMS;

    typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
      DWORD SidCount;
      DWORD SidLength;
      PSID_AND_ATTRIBUTES Sids;
      DWORD RestrictedSidCount;
      DWORD RestrictedSidLength;
      PSID_AND_ATTRIBUTES RestrictedSids;
      DWORD PrivilegeCount;
      DWORD PrivilegeLength;
      PLUID_AND_ATTRIBUTES Privileges;
      LUID AuthenticationId;
    } TOKEN_GROUPS_AND_PRIVILEGES,*PTOKEN_GROUPS_AND_PRIVILEGES;

    typedef struct _TOKEN_LINKED_TOKEN {
      HANDLE LinkedToken;
    } TOKEN_LINKED_TOKEN,*PTOKEN_LINKED_TOKEN;

    typedef struct _TOKEN_ELEVATION {
      DWORD TokenIsElevated;
    } TOKEN_ELEVATION,*PTOKEN_ELEVATION;

    typedef struct _TOKEN_MANDATORY_LABEL {
      SID_AND_ATTRIBUTES Label;
    } TOKEN_MANDATORY_LABEL,*PTOKEN_MANDATORY_LABEL;

#define TOKEN_MANDATORY_POLICY_OFF
#define TOKEN_MANDATORY_POLICY_NO_WRITE_UP
#define TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN

#define TOKEN_MANDATORY_POLICY_VALID_MASK

    typedef struct _TOKEN_MANDATORY_POLICY {
      DWORD Policy;
    } TOKEN_MANDATORY_POLICY,*PTOKEN_MANDATORY_POLICY;

    typedef struct _TOKEN_ACCESS_INFORMATION {
      PSID_AND_ATTRIBUTES_HASH SidHash;
      PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
      PTOKEN_PRIVILEGES Privileges;
      LUID AuthenticationId;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      TOKEN_MANDATORY_POLICY MandatoryPolicy;
      DWORD Flags;
      DWORD AppContainerNumber;
      PSID PackageSid;
      PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    } TOKEN_ACCESS_INFORMATION,*PTOKEN_ACCESS_INFORMATION;

#define POLICY_AUDIT_SUBCATEGORY_COUNT

    typedef struct _TOKEN_AUDIT_POLICY {
      UCHAR PerUserPolicy[(((56)) >> 1) + 1];
    } TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;

#define TOKEN_SOURCE_LENGTH

    typedef struct _TOKEN_SOURCE {
      CHAR SourceName[8];
      LUID SourceIdentifier;
    } TOKEN_SOURCE,*PTOKEN_SOURCE;

    typedef struct _TOKEN_STATISTICS {
      LUID TokenId;
      LUID AuthenticationId;
      LARGE_INTEGER ExpirationTime;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      DWORD DynamicCharged;
      DWORD DynamicAvailable;
      DWORD GroupCount;
      DWORD PrivilegeCount;
      LUID ModifiedId;
    } TOKEN_STATISTICS,*PTOKEN_STATISTICS;

    typedef struct _TOKEN_CONTROL {
      LUID TokenId;
      LUID AuthenticationId;
      LUID ModifiedId;
      TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL,*PTOKEN_CONTROL;

    typedef struct _TOKEN_ORIGIN {
      LUID OriginatingLogonSession;
    } TOKEN_ORIGIN,*PTOKEN_ORIGIN;

    typedef enum _MANDATORY_LEVEL {
      MandatoryLevelUntrusted = 0,
      MandatoryLevelLow,
      MandatoryLevelMedium,
      MandatoryLevelHigh,
      MandatoryLevelSystem,
      MandatoryLevelSecureProcess,
      MandatoryLevelCount
    } MANDATORY_LEVEL,*PMANDATORY_LEVEL;

    typedef struct _TOKEN_APPCONTAINER_INFORMATION {
      PSID TokenAppContainer;
    } TOKEN_APPCONTAINER_INFORMATION,*PTOKEN_APPCONTAINER_INFORMATION;

#define CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_SID
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
      DWORD64 Version;
      PWSTR Name;
    } CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,*PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
      PVOID pValue;
      DWORD ValueLength;
    } CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;

#define CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING
#define CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE
#define CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE
#define CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY
#define CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT
#define CLAIM_SECURITY_ATTRIBUTE_DISABLED
#define CLAIM_SECURITY_ATTRIBUTE_MANDATORY

#define CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS
#define CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
      PWSTR Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 PLONG64 pInt64;
 PDWORD64 pUint64;
 PWSTR *ppString;
 PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
 PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_V1,*PCLAIM_SECURITY_ATTRIBUTE_V1;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
      DWORD Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 DWORD pInt64[1];
 DWORD pUint64[1];
 DWORD ppString[1];
 DWORD pFqbn[1];
 DWORD pOctetString[1];
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1,*PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;

#define CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1

#define CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION

    typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
      WORD Version;
      WORD Reserved;
      DWORD AttributeCount;
      union {
 PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
      } Attribute;
    } CLAIM_SECURITY_ATTRIBUTES_INFORMATION,*PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;

#define SECURITY_DYNAMIC_TRACKING
#define SECURITY_STATIC_TRACKING

    typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,*PSECURITY_CONTEXT_TRACKING_MODE;

    typedef struct _SECURITY_QUALITY_OF_SERVICE {
      DWORD Length;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
      BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;

    typedef struct _SE_IMPERSONATION_STATE {
      PACCESS_TOKEN Token;
      BOOLEAN CopyOnOpen;
      BOOLEAN EffectiveOnly;
      SECURITY_IMPERSONATION_LEVEL Level;
    } SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;

#define DISABLE_MAX_PRIVILEGE
#define SANDBOX_INERT
#define LUA_TOKEN
#define WRITE_RESTRICTED

    typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;

#define OWNER_SECURITY_INFORMATION
#define GROUP_SECURITY_INFORMATION
#define DACL_SECURITY_INFORMATION
#define SACL_SECURITY_INFORMATION
#define LABEL_SECURITY_INFORMATION
#define ATTRIBUTE_SECURITY_INFORMATION
#define SCOPE_SECURITY_INFORMATION
#define BACKUP_SECURITY_INFORMATION

#define PROTECTED_DACL_SECURITY_INFORMATION
#define PROTECTED_SACL_SECURITY_INFORMATION
#define UNPROTECTED_DACL_SECURITY_INFORMATION
#define UNPROTECTED_SACL_SECURITY_INFORMATION

    typedef enum _SE_LEARNING_MODE_DATA_TYPE {
      SeLearningModeInvalidType = 0,
      SeLearningModeSettings,
      SeLearningModeMax
    } SE_LEARNING_MODE_DATA_TYPE;

#define SE_LEARNING_MODE_FLAG_PERMISSIVE

    typedef struct _SECURITY_CAPABILITIES {
      PSID AppContainerSid;
      PSID_AND_ATTRIBUTES Capabilities;
      DWORD CapabilityCount;
      DWORD Reserved;
    } SECURITY_CAPABILITIES,*PSECURITY_CAPABILITIES,*LPSECURITY_CAPABILITIES;

#define PROCESS_TERMINATE
#define PROCESS_CREATE_THREAD
#define PROCESS_SET_SESSIONID
#define PROCESS_VM_OPERATION
#define PROCESS_VM_READ
#define PROCESS_VM_WRITE
#define PROCESS_DUP_HANDLE
#define PROCESS_CREATE_PROCESS
#define PROCESS_SET_QUOTA
#define PROCESS_SET_INFORMATION
#define PROCESS_QUERY_INFORMATION
#define PROCESS_SUSPEND_RESUME
#define PROCESS_QUERY_LIMITED_INFORMATION




#define PROCESS_ALL_ACCESS



#define MAXIMUM_PROC_PER_GROUP




#define MAXIMUM_PROCESSORS

#define THREAD_TERMINATE
#define THREAD_SUSPEND_RESUME
#define THREAD_GET_CONTEXT
#define THREAD_SET_CONTEXT
#define THREAD_SET_INFORMATION
#define THREAD_QUERY_INFORMATION
#define THREAD_SET_THREAD_TOKEN
#define THREAD_IMPERSONATE
#define THREAD_DIRECT_IMPERSONATION
#define THREAD_SET_LIMITED_INFORMATION
#define THREAD_QUERY_LIMITED_INFORMATION




#define THREAD_ALL_ACCESS


#define JOB_OBJECT_ASSIGN_PROCESS
#define JOB_OBJECT_SET_ATTRIBUTES
#define JOB_OBJECT_QUERY
#define JOB_OBJECT_TERMINATE
#define JOB_OBJECT_SET_SECURITY_ATTRIBUTES
#define JOB_OBJECT_ALL_ACCESS

    typedef struct _JOB_SET_ARRAY {
      HANDLE JobHandle;
      DWORD MemberLevel;
      DWORD Flags;
    } JOB_SET_ARRAY,*PJOB_SET_ARRAY;

#define FLS_MAXIMUM_AVAILABLE
#define TLS_MINIMUM_AVAILABLE


    typedef struct _EXCEPTION_REGISTRATION_RECORD {
      __extension__ union {
        struct _EXCEPTION_REGISTRATION_RECORD *Next;
        struct _EXCEPTION_REGISTRATION_RECORD *prev;
      };
      __extension__ union {
        PEXCEPTION_ROUTINE Handler;
        PEXCEPTION_ROUTINE handler;
      };
    } EXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD EXCEPTION_REGISTRATION;
    typedef PEXCEPTION_REGISTRATION_RECORD PEXCEPTION_REGISTRATION;



#define _NT_TIB_DEFINED
    __extension__ typedef struct _NT_TIB {
      struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
      PVOID StackBase;
      PVOID StackLimit;
      PVOID SubSystemTib;
      __extension__ union {
 PVOID FiberData;
 DWORD Version;
      };
      PVOID ArbitraryUserPointer;
      struct _NT_TIB *Self;
    } NT_TIB;
    typedef NT_TIB *PNT_TIB;


    __extension__ typedef struct _NT_TIB32 {
      DWORD ExceptionList;
      DWORD StackBase;
      DWORD StackLimit;
      DWORD SubSystemTib;
      __extension__ union {
 DWORD FiberData;
 DWORD Version;
      };
      DWORD ArbitraryUserPointer;
      DWORD Self;
    } NT_TIB32,*PNT_TIB32;

    __extension__ typedef struct _NT_TIB64 {
      DWORD64 ExceptionList;
      DWORD64 StackBase;
      DWORD64 StackLimit;
      DWORD64 SubSystemTib;
      __extension__ union {
 DWORD64 FiberData;
 DWORD Version;
      };
      DWORD64 ArbitraryUserPointer;
      DWORD64 Self;
    } NT_TIB64,*PNT_TIB64;





#define THREAD_BASE_PRIORITY_LOWRT
#define THREAD_BASE_PRIORITY_MAX
#define THREAD_BASE_PRIORITY_MIN
#define THREAD_BASE_PRIORITY_IDLE

    typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
      DWORD UmsVersion;
      PVOID UmsContext;
      PVOID UmsCompletionList;
    } UMS_CREATE_THREAD_ATTRIBUTES,*PUMS_CREATE_THREAD_ATTRIBUTES;

    typedef struct _QUOTA_LIMITS {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
    } QUOTA_LIMITS,*PQUOTA_LIMITS;

#define QUOTA_LIMITS_HARDWS_MIN_ENABLE
#define QUOTA_LIMITS_HARDWS_MIN_DISABLE
#define QUOTA_LIMITS_HARDWS_MAX_ENABLE
#define QUOTA_LIMITS_HARDWS_MAX_DISABLE
#define QUOTA_LIMITS_USE_DEFAULT_LIMITS

    typedef union _RATE_QUOTA_LIMIT {
      DWORD RateData;
      __extension__ struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
      } ;
    } RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

    typedef struct _QUOTA_LIMITS_EX {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
      SIZE_T WorkingSetLimit;
      SIZE_T Reserved2;
      SIZE_T Reserved3;
      SIZE_T Reserved4;
      DWORD Flags;
      RATE_QUOTA_LIMIT CpuRateLimit;
    } QUOTA_LIMITS_EX,*PQUOTA_LIMITS_EX;

    typedef struct _IO_COUNTERS {
      ULONGLONG ReadOperationCount;
      ULONGLONG WriteOperationCount;
      ULONGLONG OtherOperationCount;
      ULONGLONG ReadTransferCount;
      ULONGLONG WriteTransferCount;
      ULONGLONG OtherTransferCount;
    } IO_COUNTERS;
    typedef IO_COUNTERS *PIO_COUNTERS;

#define MAX_HW_COUNTERS
#define THREAD_PROFILING_FLAG_DISPATCH

    typedef enum _HARDWARE_COUNTER_TYPE {
      PMCCounter,
      MaxHardwareCounterType
    } HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

    typedef enum _PROCESS_MITIGATION_POLICY {
      ProcessDEPPolicy,
      ProcessASLRPolicy,
      ProcessReserved1MitigationPolicy,
      ProcessStrictHandleCheckPolicy,
      ProcessSystemCallDisablePolicy,
      ProcessMitigationOptionsMask,
      ProcessExtensionPointDisablePolicy,
      MaxProcessMitigationPolicy
    } PROCESS_MITIGATION_POLICY,*PPROCESS_MITIGATION_POLICY;

    typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD EnableBottomUpRandomization : 1;
   DWORD EnableForceRelocateImages : 1;
   DWORD EnableHighEntropy : 1;
   DWORD DisallowStrippedImages : 1;
   DWORD ReservedFlags : 28;
 };
      };
    } PROCESS_MITIGATION_ASLR_POLICY,*PPROCESS_MITIGATION_ASLR_POLICY;

    typedef struct _PROCESS_MITIGATION_DEP_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD Enable : 1;
   DWORD DisableAtlThunkEmulation : 1;
   DWORD ReservedFlags : 30;
 };
      };
      BOOLEAN Permanent;
    } PROCESS_MITIGATION_DEP_POLICY,*PPROCESS_MITIGATION_DEP_POLICY;

    typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD RaiseExceptionOnInvalidHandleReference : 1;
   DWORD HandleExceptionsPermanentlyEnabled : 1;
   DWORD ReservedFlags : 30;
 };
      };
    } PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY,*PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

    typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisallowWin32kSystemCalls : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY,*PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

    typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisableExtensionPoints : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY,*PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

    typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
      LARGE_INTEGER TotalUserTime;
      LARGE_INTEGER TotalKernelTime;
      LARGE_INTEGER ThisPeriodTotalUserTime;
      LARGE_INTEGER ThisPeriodTotalKernelTime;
      DWORD TotalPageFaultCount;
      DWORD TotalProcesses;
      DWORD ActiveProcesses;
      DWORD TotalTerminatedProcesses;
    } JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
      LARGE_INTEGER PerProcessUserTimeLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD LimitFlags;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      DWORD ActiveProcessLimit;
      ULONG_PTR Affinity;
      DWORD PriorityClass;
      DWORD SchedulingClass;
    } JOBOBJECT_BASIC_LIMIT_INFORMATION,*PJOBOBJECT_BASIC_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
      JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
      IO_COUNTERS IoInfo;
      SIZE_T ProcessMemoryLimit;
      SIZE_T JobMemoryLimit;
      SIZE_T PeakProcessMemoryUsed;
      SIZE_T PeakJobMemoryUsed;
    } JOBOBJECT_EXTENDED_LIMIT_INFORMATION,*PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
      DWORD NumberOfAssignedProcesses;
      DWORD NumberOfProcessIdsInList;
      ULONG_PTR ProcessIdList[1];
    } JOBOBJECT_BASIC_PROCESS_ID_LIST,*PJOBOBJECT_BASIC_PROCESS_ID_LIST;

    typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
      DWORD UIRestrictionsClass;
    } JOBOBJECT_BASIC_UI_RESTRICTIONS,*PJOBOBJECT_BASIC_UI_RESTRICTIONS;

    typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
      DWORD SecurityLimitFlags;
      HANDLE JobToken;
      PTOKEN_GROUPS SidsToDisable;
      PTOKEN_PRIVILEGES PrivilegesToDelete;
      PTOKEN_GROUPS RestrictedSids;
    } JOBOBJECT_SECURITY_LIMIT_INFORMATION,*PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
      DWORD EndOfJobTimeAction;
    } JOBOBJECT_END_OF_JOB_TIME_INFORMATION,*PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

    typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
      PVOID CompletionKey;
      HANDLE CompletionPort;
    } JOBOBJECT_ASSOCIATE_COMPLETION_PORT,*PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

    typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
      JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
      IO_COUNTERS IoInfo;
    } JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_JOBSET_INFORMATION {
      DWORD MemberLevel;
    } JOBOBJECT_JOBSET_INFORMATION,*PJOBOBJECT_JOBSET_INFORMATION;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
      ToleranceLow = 1,
      ToleranceMedium,
      ToleranceHigh
    } JOBOBJECT_RATE_CONTROL_TOLERANCE;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
      ToleranceIntervalShort = 1,
      ToleranceIntervalMedium,
      ToleranceIntervalLong
    } JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

    typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
      DWORD LimitFlags;
    } JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,*PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
      DWORD LimitFlags;
      DWORD ViolationLimitFlags;
      DWORD64 IoReadBytes;
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytes;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTime;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemory;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
    } JOBOBJECT_LIMIT_VIOLATION_INFORMATION,*PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

    typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
      DWORD ControlFlags;
      __extension__ union {
 DWORD CpuRate;
 DWORD Weight;
      };
    } JOBOBJECT_CPU_RATE_CONTROL_INFORMATION,*PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;

#define JOB_OBJECT_TERMINATE_AT_END_OF_JOB
#define JOB_OBJECT_POST_AT_END_OF_JOB

#define JOB_OBJECT_MSG_END_OF_JOB_TIME
#define JOB_OBJECT_MSG_END_OF_PROCESS_TIME
#define JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT
#define JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO
#define JOB_OBJECT_MSG_NEW_PROCESS
#define JOB_OBJECT_MSG_EXIT_PROCESS
#define JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS
#define JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT
#define JOB_OBJECT_MSG_JOB_MEMORY_LIMIT
#define JOB_OBJECT_MSG_NOTIFICATION_LIMIT
#define JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT

#define JOB_OBJECT_MSG_MINIMUM
#define JOB_OBJECT_MSG_MAXIMUM

#define JOB_OBJECT_LIMIT_WORKINGSET
#define JOB_OBJECT_LIMIT_PROCESS_TIME
#define JOB_OBJECT_LIMIT_JOB_TIME
#define JOB_OBJECT_LIMIT_ACTIVE_PROCESS
#define JOB_OBJECT_LIMIT_AFFINITY
#define JOB_OBJECT_LIMIT_PRIORITY_CLASS
#define JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME
#define JOB_OBJECT_LIMIT_SCHEDULING_CLASS

#define JOB_OBJECT_LIMIT_PROCESS_MEMORY
#define JOB_OBJECT_LIMIT_JOB_MEMORY
#define JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION
#define JOB_OBJECT_LIMIT_BREAKAWAY_OK
#define JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK
#define JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE

#define JOB_OBJECT_LIMIT_SUBSET_AFFINITY
#define JOB_OBJECT_LIMIT_RESERVED3
#define JOB_OBJECT_LIMIT_JOB_READ_BYTES
#define JOB_OBJECT_LIMIT_JOB_WRITE_BYTES
#define JOB_OBJECT_LIMIT_RATE_CONTROL

#define JOB_OBJECT_LIMIT_RESERVED3
#define JOB_OBJECT_LIMIT_RESERVED4
#define JOB_OBJECT_LIMIT_RESERVED5
#define JOB_OBJECT_LIMIT_RESERVED6

#define JOB_OBJECT_LIMIT_VALID_FLAGS

#define JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS
#define JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS
#define JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS
#define JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS

#define JOB_OBJECT_UILIMIT_NONE

#define JOB_OBJECT_UILIMIT_HANDLES
#define JOB_OBJECT_UILIMIT_READCLIPBOARD
#define JOB_OBJECT_UILIMIT_WRITECLIPBOARD
#define JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS
#define JOB_OBJECT_UILIMIT_DISPLAYSETTINGS
#define JOB_OBJECT_UILIMIT_GLOBALATOMS
#define JOB_OBJECT_UILIMIT_DESKTOP
#define JOB_OBJECT_UILIMIT_EXITWINDOWS

#define JOB_OBJECT_UILIMIT_ALL

#define JOB_OBJECT_UI_VALID_FLAGS

#define JOB_OBJECT_SECURITY_NO_ADMIN
#define JOB_OBJECT_SECURITY_RESTRICTED_TOKEN
#define JOB_OBJECT_SECURITY_ONLY_TOKEN
#define JOB_OBJECT_SECURITY_FILTER_TOKENS

#define JOB_OBJECT_SECURITY_VALID_FLAGS

#define JOB_OBJECT_CPU_RATE_CONTROL_ENABLE
#define JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED
#define JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP
#define JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY
#define JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS

    typedef enum _JOBOBJECTINFOCLASS {
      JobObjectBasicAccountingInformation = 1, JobObjectBasicLimitInformation,
      JobObjectBasicProcessIdList, JobObjectBasicUIRestrictions,
      JobObjectSecurityLimitInformation, JobObjectEndOfJobTimeInformation,
      JobObjectAssociateCompletionPortInformation, JobObjectBasicAndIoAccountingInformation,
      JobObjectExtendedLimitInformation, JobObjectJobSetInformation,
      JobObjectGroupInformation,
      JobObjectNotificationLimitInformation,
      JobObjectLimitViolationInformation,
      JobObjectGroupInformationEx,
      JobObjectCpuRateControlInformation,
      JobObjectCompletionFilter,
      JobObjectCompletionCounter,
      JobObjectReserved1Information = 18,
      JobObjectReserved2Information,
      JobObjectReserved3Information,
      JobObjectReserved4Information,
      JobObjectReserved5Information,
      JobObjectReserved6Information,
      JobObjectReserved7Information,
      JobObjectReserved8Information,
      MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;

    typedef enum _FIRMWARE_TYPE {
      FirmwareTypeUnknown,
      FirmwareTypeBios,
      FirmwareTypeUefi,
      FirmwareTypeMax
    } FIRMWARE_TYPE,*PFIRMWARE_TYPE;

#define EVENT_MODIFY_STATE
#define EVENT_ALL_ACCESS

#define MUTANT_QUERY_STATE

#define MUTANT_ALL_ACCESS
#define SEMAPHORE_MODIFY_STATE
#define SEMAPHORE_ALL_ACCESS

#define TIMER_QUERY_STATE
#define TIMER_MODIFY_STATE

#define TIMER_ALL_ACCESS

#define TIME_ZONE_ID_UNKNOWN
#define TIME_ZONE_ID_STANDARD
#define TIME_ZONE_ID_DAYLIGHT

    typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
      RelationProcessorCore,RelationNumaNode,RelationCache,
      RelationProcessorPackage,RelationGroup,RelationAll=0xffff
    } LOGICAL_PROCESSOR_RELATIONSHIP;

#define LTP_PC_SMT

    typedef enum _PROCESSOR_CACHE_TYPE {
      CacheUnified,CacheInstruction,CacheData,CacheTrace
    } PROCESSOR_CACHE_TYPE;

#define CACHE_FULLY_ASSOCIATIVE

    typedef struct _CACHE_DESCRIPTOR {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD Size;
      PROCESSOR_CACHE_TYPE Type;
    } CACHE_DESCRIPTOR,*PCACHE_DESCRIPTOR;

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
      ULONG_PTR ProcessorMask;
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      __extension__ union {
 struct {
   BYTE Flags;
 } ProcessorCore;
 struct {
   DWORD NodeNumber;
 } NumaNode;
 CACHE_DESCRIPTOR Cache;
 ULONGLONG Reserved[2];
      } ;
    } SYSTEM_LOGICAL_PROCESSOR_INFORMATION,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

    typedef struct _PROCESSOR_RELATIONSHIP {
      BYTE Flags;
      BYTE Reserved[21];
      WORD GroupCount;
      GROUP_AFFINITY GroupMask[1];
    } PROCESSOR_RELATIONSHIP,*PPROCESSOR_RELATIONSHIP;

    typedef struct _NUMA_NODE_RELATIONSHIP {
      DWORD NodeNumber;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } NUMA_NODE_RELATIONSHIP,*PNUMA_NODE_RELATIONSHIP;

    typedef struct _CACHE_RELATIONSHIP {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD CacheSize;
      PROCESSOR_CACHE_TYPE Type;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } CACHE_RELATIONSHIP,*PCACHE_RELATIONSHIP;

    typedef struct _PROCESSOR_GROUP_INFO {
      BYTE MaximumProcessorCount;
      BYTE ActiveProcessorCount;
      BYTE Reserved[38];
      KAFFINITY ActiveProcessorMask;
    } PROCESSOR_GROUP_INFO,*PPROCESSOR_GROUP_INFO;

    typedef struct _GROUP_RELATIONSHIP {
      WORD MaximumGroupCount;
      WORD ActiveGroupCount;
      BYTE Reserved[20];
      PROCESSOR_GROUP_INFO GroupInfo[1];
    } GROUP_RELATIONSHIP,*PGROUP_RELATIONSHIP;

    struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      DWORD Size;
      __extension__ union {
 PROCESSOR_RELATIONSHIP Processor;
 NUMA_NODE_RELATIONSHIP NumaNode;
 CACHE_RELATIONSHIP Cache;
 GROUP_RELATIONSHIP Group;
      } ;
    };

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

    typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
      DWORD64 CycleTime;
    } SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,*PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;

#define PROCESSOR_INTEL_386
#define PROCESSOR_INTEL_486
#define PROCESSOR_INTEL_PENTIUM
#define PROCESSOR_INTEL_IA64
#define PROCESSOR_AMD_X8664
#define PROCESSOR_MIPS_R4000
#define PROCESSOR_ALPHA_21064
#define PROCESSOR_PPC_601
#define PROCESSOR_PPC_603
#define PROCESSOR_PPC_604
#define PROCESSOR_PPC_620
#define PROCESSOR_HITACHI_SH3
#define PROCESSOR_HITACHI_SH3E
#define PROCESSOR_HITACHI_SH4
#define PROCESSOR_MOTOROLA_821
#define PROCESSOR_SHx_SH3
#define PROCESSOR_SHx_SH4
#define PROCESSOR_STRONGARM
#define PROCESSOR_ARM720
#define PROCESSOR_ARM820
#define PROCESSOR_ARM920
#define PROCESSOR_ARM_7TDMI
#define PROCESSOR_OPTIL

#define PROCESSOR_ARCHITECTURE_INTEL
#define PROCESSOR_ARCHITECTURE_MIPS
#define PROCESSOR_ARCHITECTURE_ALPHA
#define PROCESSOR_ARCHITECTURE_PPC
#define PROCESSOR_ARCHITECTURE_SHX
#define PROCESSOR_ARCHITECTURE_ARM
#define PROCESSOR_ARCHITECTURE_IA64
#define PROCESSOR_ARCHITECTURE_ALPHA64
#define PROCESSOR_ARCHITECTURE_MSIL
#define PROCESSOR_ARCHITECTURE_AMD64
#define PROCESSOR_ARCHITECTURE_IA32_ON_WIN64
#define PROCESSOR_ARCHITECTURE_NEUTRAL

#define PROCESSOR_ARCHITECTURE_UNKNOWN

#define PF_FLOATING_POINT_PRECISION_ERRATA
#define PF_FLOATING_POINT_EMULATED
#define PF_COMPARE_EXCHANGE_DOUBLE
#define PF_MMX_INSTRUCTIONS_AVAILABLE
#define PF_PPC_MOVEMEM_64BIT_OK
#define PF_ALPHA_BYTE_INSTRUCTIONS
#define PF_XMMI_INSTRUCTIONS_AVAILABLE
#define PF_3DNOW_INSTRUCTIONS_AVAILABLE
#define PF_RDTSC_INSTRUCTION_AVAILABLE
#define PF_PAE_ENABLED
#define PF_XMMI64_INSTRUCTIONS_AVAILABLE
#define PF_SSE_DAZ_MODE_AVAILABLE
#define PF_NX_ENABLED
#define PF_SSE3_INSTRUCTIONS_AVAILABLE
#define PF_COMPARE_EXCHANGE128
#define PF_COMPARE64_EXCHANGE128
#define PF_CHANNELS_ENABLED
#define PF_XSAVE_ENABLED
#define PF_ARM_VFP_32_REGISTERS_AVAILABLE
#define PF_ARM_NEON_INSTRUCTIONS_AVAILABLE
#define PF_SECOND_LEVEL_ADDRESS_TRANSLATION
#define PF_VIRT_FIRMWARE_ENABLED
#define PF_RDWRFSGSBASE_AVAILABLE
#define PF_FASTFAIL_AVAILABLE
#define PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE
#define PF_ARM_64BIT_LOADSTORE_ATOMIC
#define PF_ARM_EXTERNAL_CACHE_AVAILABLE
#define PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE

#define XSTATE_LEGACY_FLOATING_POINT
#define XSTATE_LEGACY_SSE
#define XSTATE_GSSE
#define XSTATE_AVX

#define XSTATE_MASK_LEGACY_FLOATING_POINT
#define XSTATE_MASK_LEGACY_SSE
#define XSTATE_MASK_LEGACY
#define XSTATE_MASK_GSSE
#define XSTATE_MASK_AVX

#define MAXIMUM_XSTATE_FEATURES

    typedef struct _XSTATE_FEATURE {
      DWORD Offset;
      DWORD Size;
    } XSTATE_FEATURE,*PXSTATE_FEATURE;

    typedef struct _XSTATE_CONFIGURATION {
      DWORD64 EnabledFeatures;
      DWORD64 EnabledVolatileFeatures;
      DWORD Size;
      DWORD OptimizedSave : 1;
      XSTATE_FEATURE Features[(64)];
    } XSTATE_CONFIGURATION,*PXSTATE_CONFIGURATION;

    typedef struct _MEMORY_BASIC_INFORMATION {
      PVOID BaseAddress;
      PVOID AllocationBase;
      DWORD AllocationProtect;
      SIZE_T RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;

    typedef struct _MEMORY_BASIC_INFORMATION32 {
      DWORD BaseAddress;
      DWORD AllocationBase;
      DWORD AllocationProtect;
      DWORD RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION32,*PMEMORY_BASIC_INFORMATION32;

    typedef struct __attribute__ ((__aligned__ (16))) _MEMORY_BASIC_INFORMATION64 {
      ULONGLONG BaseAddress;
      ULONGLONG AllocationBase;
      DWORD AllocationProtect;
      DWORD __alignment1;
      ULONGLONG RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
      DWORD __alignment2;
    } MEMORY_BASIC_INFORMATION64,*PMEMORY_BASIC_INFORMATION64;

#define SECTION_QUERY
#define SECTION_MAP_WRITE
#define SECTION_MAP_READ
#define SECTION_MAP_EXECUTE
#define SECTION_EXTEND_SIZE
#define SECTION_MAP_EXECUTE_EXPLICIT

#define SECTION_ALL_ACCESS

#define SESSION_QUERY_ACCESS
#define SESSION_MODIFY_ACCESS

#define SESSION_ALL_ACCESS

#define PAGE_NOACCESS
#define PAGE_READONLY
#define PAGE_READWRITE
#define PAGE_WRITECOPY
#define PAGE_EXECUTE
#define PAGE_EXECUTE_READ
#define PAGE_EXECUTE_READWRITE
#define PAGE_EXECUTE_WRITECOPY
#define PAGE_GUARD
#define PAGE_NOCACHE
#define PAGE_WRITECOMBINE
#define MEM_COMMIT
#define MEM_RESERVE
#define MEM_DECOMMIT
#define MEM_RELEASE
#define MEM_FREE
#define MEM_PRIVATE
#define MEM_MAPPED
#define MEM_RESET
#define MEM_TOP_DOWN
#define MEM_WRITE_WATCH
#define MEM_PHYSICAL
#define MEM_ROTATE
#define MEM_LARGE_PAGES
#define MEM_4MB_PAGES
#define SEC_FILE
#define SEC_IMAGE
#define SEC_PROTECTED_IMAGE
#define SEC_RESERVE
#define SEC_COMMIT
#define SEC_NOCACHE
#define SEC_WRITECOMBINE
#define SEC_LARGE_PAGES

#define SEC_IMAGE_NO_EXECUTE
#define MEM_IMAGE
#define WRITE_WATCH_FLAG_RESET
#define MEM_UNMAP_WITH_TRANSIENT_BOOST

#define FILE_READ_DATA
#define FILE_LIST_DIRECTORY

#define FILE_WRITE_DATA
#define FILE_ADD_FILE

#define FILE_APPEND_DATA
#define FILE_ADD_SUBDIRECTORY
#define FILE_CREATE_PIPE_INSTANCE

#define FILE_READ_EA
#define FILE_WRITE_EA
#define FILE_EXECUTE
#define FILE_TRAVERSE
#define FILE_DELETE_CHILD
#define FILE_READ_ATTRIBUTES
#define FILE_WRITE_ATTRIBUTES

#define FILE_ALL_ACCESS
#define FILE_GENERIC_READ
#define FILE_GENERIC_WRITE
#define FILE_GENERIC_EXECUTE

#define FILE_SUPERSEDE
#define FILE_OPEN
#define FILE_CREATE
#define FILE_OPEN_IF
#define FILE_OVERWRITE
#define FILE_OVERWRITE_IF
#define FILE_MAXIMUM_DISPOSITION

#define FILE_DIRECTORY_FILE
#define FILE_WRITE_THROUGH
#define FILE_SEQUENTIAL_ONLY
#define FILE_NO_INTERMEDIATE_BUFFERING
#define FILE_SYNCHRONOUS_IO_ALERT
#define FILE_SYNCHRONOUS_IO_NONALERT
#define FILE_NON_DIRECTORY_FILE
#define FILE_CREATE_TREE_CONNECTION
#define FILE_COMPLETE_IF_OPLOCKED
#define FILE_NO_EA_KNOWLEDGE
#define FILE_OPEN_REMOTE_INSTANCE
#define FILE_RANDOM_ACCESS
#define FILE_DELETE_ON_CLOSE
#define FILE_OPEN_BY_FILE_ID
#define FILE_OPEN_FOR_BACKUP_INTENT
#define FILE_NO_COMPRESSION




#define FILE_RESERVE_OPFILTER
#define FILE_OPEN_REPARSE_POINT
#define FILE_OPEN_NO_RECALL
#define FILE_OPEN_FOR_FREE_SPACE_QUERY

#define FILE_SHARE_READ
#define FILE_SHARE_WRITE
#define FILE_SHARE_DELETE
#define FILE_SHARE_VALID_FLAGS
#define FILE_ATTRIBUTE_READONLY
#define FILE_ATTRIBUTE_HIDDEN
#define FILE_ATTRIBUTE_SYSTEM
#define FILE_ATTRIBUTE_DIRECTORY
#define FILE_ATTRIBUTE_ARCHIVE
#define FILE_ATTRIBUTE_DEVICE
#define FILE_ATTRIBUTE_NORMAL
#define FILE_ATTRIBUTE_TEMPORARY
#define FILE_ATTRIBUTE_SPARSE_FILE
#define FILE_ATTRIBUTE_REPARSE_POINT
#define FILE_ATTRIBUTE_COMPRESSED
#define FILE_ATTRIBUTE_OFFLINE
#define FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
#define FILE_ATTRIBUTE_ENCRYPTED
#define FILE_ATTRIBUTE_VIRTUAL
#define FILE_NOTIFY_CHANGE_FILE_NAME
#define FILE_NOTIFY_CHANGE_DIR_NAME
#define FILE_NOTIFY_CHANGE_ATTRIBUTES
#define FILE_NOTIFY_CHANGE_SIZE
#define FILE_NOTIFY_CHANGE_LAST_WRITE
#define FILE_NOTIFY_CHANGE_LAST_ACCESS
#define FILE_NOTIFY_CHANGE_CREATION
#define FILE_NOTIFY_CHANGE_SECURITY
#define FILE_ACTION_ADDED
#define FILE_ACTION_REMOVED
#define FILE_ACTION_MODIFIED
#define FILE_ACTION_RENAMED_OLD_NAME
#define FILE_ACTION_RENAMED_NEW_NAME
#define MAILSLOT_NO_MESSAGE
#define MAILSLOT_WAIT_FOREVER
#define FILE_CASE_SENSITIVE_SEARCH
#define FILE_CASE_PRESERVED_NAMES
#define FILE_UNICODE_ON_DISK
#define FILE_PERSISTENT_ACLS
#define FILE_FILE_COMPRESSION
#define FILE_VOLUME_QUOTAS
#define FILE_SUPPORTS_SPARSE_FILES
#define FILE_SUPPORTS_REPARSE_POINTS
#define FILE_SUPPORTS_REMOTE_STORAGE
#define FILE_VOLUME_IS_COMPRESSED
#define FILE_SUPPORTS_OBJECT_IDS
#define FILE_SUPPORTS_ENCRYPTION
#define FILE_NAMED_STREAMS
#define FILE_READ_ONLY_VOLUME
#define FILE_SEQUENTIAL_WRITE_ONCE
#define FILE_SUPPORTS_TRANSACTIONS
#define FILE_SUPPORTS_HARD_LINKS
#define FILE_SUPPORTS_EXTENDED_ATTRIBUTES
#define FILE_SUPPORTS_OPEN_BY_FILE_ID
#define FILE_SUPPORTS_USN_JOURNAL
#define FILE_SUPPORTS_INTEGRITY_STREAMS

    typedef struct FILE_ID_128 {
      ULONGLONG LowPart;
      ULONGLONG HighPart;
    } FILE_ID_128, *PFILE_ID_128;

    typedef struct _FILE_NOTIFY_INFORMATION {
      DWORD NextEntryOffset;
      DWORD Action;
      DWORD FileNameLength;
      WCHAR FileName[1];
    } FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;

    typedef union _FILE_SEGMENT_ELEMENT {
      PVOID64 Buffer;
      ULONGLONG Alignment;
    } FILE_SEGMENT_ELEMENT,*PFILE_SEGMENT_ELEMENT;

    typedef struct _REPARSE_GUID_DATA_BUFFER {
      DWORD ReparseTag;
      WORD ReparseDataLength;
      WORD Reserved;
      GUID ReparseGuid;
      struct {
 BYTE DataBuffer[1];
      } GenericReparseBuffer;
    } REPARSE_GUID_DATA_BUFFER,*PREPARSE_GUID_DATA_BUFFER;

#define REPARSE_GUID_DATA_BUFFER_HEADER_SIZE

#define MAXIMUM_REPARSE_DATA_BUFFER_SIZE

#define SYMLINK_FLAG_RELATIVE

#define IO_REPARSE_TAG_RESERVED_ZERO
#define IO_REPARSE_TAG_RESERVED_ONE

#define IO_REPARSE_TAG_RESERVED_RANGE

#define IsReparseTagMicrosoft
#define IsReparseTagNameSurrogate

#define IO_REPARSE_TAG_MOUNT_POINT
#define IO_REPARSE_TAG_HSM
#define IO_REPARSE_TAG_HSM2
#define IO_REPARSE_TAG_SIS
#define IO_REPARSE_TAG_WIM
#define IO_REPARSE_TAG_CSV
#define IO_REPARSE_TAG_DFS
#define IO_REPARSE_TAG_FILTER_MANAGER
#define IO_REPARSE_TAG_DFSR
#define IO_REPARSE_TAG_SYMLINK
#define IO_REPARSE_TAG_IIS_CACHE
#define IO_REPARSE_TAG_DRIVE_EXTENDER
#define IO_REPARSE_TAG_DEDUP
#define IO_REPARSE_TAG_NFS
# 4448 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define IO_COMPLETION_MODIFY_STATE
#define IO_COMPLETION_ALL_ACCESS
#define DUPLICATE_CLOSE_SOURCE
#define DUPLICATE_SAME_ACCESS

#define POWERBUTTON_ACTION_INDEX_NOTHING
#define POWERBUTTON_ACTION_INDEX_SLEEP
#define POWERBUTTON_ACTION_INDEX_HIBERNATE
#define POWERBUTTON_ACTION_INDEX_SHUTDOWN

#define POWERBUTTON_ACTION_VALUE_NOTHING
#define POWERBUTTON_ACTION_VALUE_SLEEP
#define POWERBUTTON_ACTION_VALUE_HIBERNATE
#define POWERBUTTON_ACTION_VALUE_SHUTDOWN

#define PERFSTATE_POLICY_CHANGE_IDEAL
#define PERFSTATE_POLICY_CHANGE_SINGLE
#define PERFSTATE_POLICY_CHANGE_ROCKET
#define PERFSTATE_POLICY_CHANGE_MAX

#define PROCESSOR_PERF_BOOST_POLICY_DISABLED
#define PROCESSOR_PERF_BOOST_POLICY_MAX

#define PROCESSOR_PERF_BOOST_MODE_DISABLED
#define PROCESSOR_PERF_BOOST_MODE_ENABLED
#define PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE
#define PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED
#define PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE
#define PROCESSOR_PERF_BOOST_MODE_MAX

#define CORE_PARKING_POLICY_CHANGE_IDEAL
#define CORE_PARKING_POLICY_CHANGE_SINGLE
#define CORE_PARKING_POLICY_CHANGE_ROCKET
#define CORE_PARKING_POLICY_CHANGE_MULTISTEP
#define CORE_PARKING_POLICY_CHANGE_MAX

#define POWER_DEVICE_IDLE_POLICY_PERFORMANCE
#define POWER_DEVICE_IDLE_POLICY_CONSERVATIVE

    extern const GUID GUID_MAX_POWER_SAVINGS;
    extern const GUID GUID_MIN_POWER_SAVINGS;
    extern const GUID GUID_TYPICAL_POWER_SAVINGS;
    extern const GUID NO_SUBGROUP_GUID;
    extern const GUID ALL_POWERSCHEMES_GUID;
    extern const GUID GUID_POWERSCHEME_PERSONALITY;
    extern const GUID GUID_ACTIVE_POWERSCHEME;
    extern const GUID GUID_IDLE_RESILIENCY_SUBGROUP;
    extern const GUID GUID_IDLE_RESILIENCY_PERIOD;
    extern const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    extern const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    extern const GUID GUID_VIDEO_SUBGROUP;
    extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
    extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
    extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    extern const GUID GUID_VIDEO_DIM_TIMEOUT;
    extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
    extern const GUID GUID_MONITOR_POWER_ON;
    extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    extern const GUID GUID_CONSOLE_DISPLAY_STATE;
    extern const GUID GUID_ALLOW_DISPLAY_REQUIRED;
    extern const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    extern const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    extern const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    extern const GUID GUID_DISK_SUBGROUP;
    extern const GUID GUID_DISK_POWERDOWN_TIMEOUT;
    extern const GUID GUID_DISK_IDLE_TIMEOUT;
    extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
    extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
    extern const GUID GUID_SLEEP_SUBGROUP;
    extern const GUID GUID_SLEEP_IDLE_THRESHOLD;
    extern const GUID GUID_STANDBY_TIMEOUT;
    extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
    extern const GUID GUID_HIBERNATE_TIMEOUT;
    extern const GUID GUID_HIBERNATE_FASTS4_POLICY;
    extern const GUID GUID_CRITICAL_POWER_TRANSITION;
    extern const GUID GUID_SYSTEM_AWAYMODE;
    extern const GUID GUID_ALLOW_AWAYMODE;
    extern const GUID GUID_ALLOW_STANDBY_STATES;
    extern const GUID GUID_ALLOW_RTC_WAKE;
    extern const GUID GUID_ALLOW_SYSTEM_REQUIRED;
    extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
    extern const GUID GUID_POWERBUTTON_ACTION;
    extern const GUID GUID_SLEEPBUTTON_ACTION;
    extern const GUID GUID_USERINTERFACEBUTTON_ACTION;
    extern const GUID GUID_LIDCLOSE_ACTION;
    extern const GUID GUID_LIDOPEN_POWERSTATE;
    extern const GUID GUID_BATTERY_SUBGROUP;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
    extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
    extern const GUID GUID_PROCESSOR_THROTTLE_POLICY;
    extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
    extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
    extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
    extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
    extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
    extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
    extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
    extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    extern const GUID GUID_PROCESSOR_IDLE_DISABLE;
    extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
    extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
    extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_HISTORY;
    extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;
    extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    extern const GUID GUID_SYSTEM_COOLING_POLICY;
    extern const GUID GUID_LOCK_CONSOLE_ON_WAKE;
    extern const GUID GUID_DEVICE_IDLE_POLICY;
    extern const GUID GUID_ACDC_POWER_SOURCE;
    extern const GUID GUID_LIDSWITCH_STATE_CHANGE;
    extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
    extern const GUID GUID_GLOBAL_USER_PRESENCE;
    extern const GUID GUID_SESSION_DISPLAY_STATUS;
    extern const GUID GUID_SESSION_USER_PRESENCE;
    extern const GUID GUID_IDLE_BACKGROUND_TASK;
    extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
    extern const GUID GUID_APPLAUNCH_BUTTON;
    extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    extern const GUID GUID_PCIEXPRESS_ASPM_POLICY;
    extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;

  typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,PowerSystemWorking = 1,PowerSystemSleeping1 = 2,PowerSystemSleeping2 = 3,PowerSystemSleeping3 = 4,PowerSystemHibernate = 5,PowerSystemShutdown = 6,PowerSystemMaximum = 7
  } SYSTEM_POWER_STATE,*PSYSTEM_POWER_STATE;

#define POWER_SYSTEM_MAXIMUM

  typedef enum {
    PowerActionNone = 0, PowerActionReserved, PowerActionSleep, PowerActionHibernate,
    PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff,
    PowerActionWarmEject
  } POWER_ACTION,*PPOWER_ACTION;

  typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0, PowerDeviceD0, PowerDeviceD1, PowerDeviceD2, PowerDeviceD3,
    PowerDeviceMaximum
  } DEVICE_POWER_STATE,*PDEVICE_POWER_STATE;

  typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0, PowerMonitorOn, PowerMonitorDim
  } MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

  typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
  } USER_ACTIVITY_PRESENCE,*PUSER_ACTIVITY_PRESENCE;

#define ES_SYSTEM_REQUIRED
#define ES_DISPLAY_REQUIRED
#define ES_USER_PRESENT
#define ES_AWAYMODE_REQUIRED
#define ES_CONTINUOUS

  typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

  typedef enum {
    LT_DONT_CARE,LT_LOWEST_LATENCY
  } LATENCY_TIME;

#define DIAGNOSTIC_REASON_VERSION
#define POWER_REQUEST_CONTEXT_VERSION

#define DIAGNOSTIC_REASON_SIMPLE_STRING
#define DIAGNOSTIC_REASON_DETAILED_STRING
#define DIAGNOSTIC_REASON_NOT_SPECIFIED
#define DIAGNOSTIC_REASON_INVALID_FLAGS

#define POWER_REQUEST_CONTEXT_SIMPLE_STRING
#define POWER_REQUEST_CONTEXT_DETAILED_STRING

  typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
  } POWER_REQUEST_TYPE,*PPOWER_REQUEST_TYPE;

#define PDCAP_D0_SUPPORTED
#define PDCAP_D1_SUPPORTED
#define PDCAP_D2_SUPPORTED
#define PDCAP_D3_SUPPORTED
#define PDCAP_WAKE_FROM_D0_SUPPORTED
#define PDCAP_WAKE_FROM_D1_SUPPORTED
#define PDCAP_WAKE_FROM_D2_SUPPORTED
#define PDCAP_WAKE_FROM_D3_SUPPORTED
#define PDCAP_WARM_EJECT_SUPPORTED

    typedef struct CM_Power_Data_s {
      DWORD PD_Size;
      DEVICE_POWER_STATE PD_MostRecentPowerState;
      DWORD PD_Capabilities;
      DWORD PD_D1Latency;
      DWORD PD_D2Latency;
      DWORD PD_D3Latency;
      DEVICE_POWER_STATE PD_PowerStateMapping[7];
      SYSTEM_POWER_STATE PD_DeepestSystemWake;
    } CM_POWER_DATA,*PCM_POWER_DATA;

    typedef enum {
      SystemPowerPolicyAc,
      SystemPowerPolicyDc,
      VerifySystemPolicyAc,
      VerifySystemPolicyDc,
      SystemPowerCapabilities,
      SystemBatteryState,
      SystemPowerStateHandler,
      ProcessorStateHandler,
      SystemPowerPolicyCurrent,
      AdministratorPowerPolicy,
      SystemReserveHiberFile,
      ProcessorInformation,
      SystemPowerInformation,
      ProcessorStateHandler2,
      LastWakeTime,
      LastSleepTime,
      SystemExecutionState,
      SystemPowerStateNotifyHandler,
      ProcessorPowerPolicyAc,
      ProcessorPowerPolicyDc,
      VerifyProcessorPowerPolicyAc,
      VerifyProcessorPowerPolicyDc,
      ProcessorPowerPolicyCurrent,
      SystemPowerStateLogging,
      SystemPowerLoggingEntry,
      SetPowerSettingValue,
      NotifyUserPowerSetting,
      PowerInformationLevelUnused0,
      SystemMonitorHiberBootPowerOff,
      SystemVideoState,
      TraceApplicationPowerMessage,
      TraceApplicationPowerMessageEnd,
      ProcessorPerfStates,
      ProcessorIdleStates,
      ProcessorCap,
      SystemWakeSource,
      SystemHiberFileInformation,
      TraceServicePowerMessage,
      ProcessorLoad,
      PowerShutdownNotification,
      MonitorCapabilities,
      SessionPowerInit,
      SessionDisplayState,
      PowerRequestCreate,
      PowerRequestAction,
      GetPowerRequestList,
      ProcessorInformationEx,
      NotifyUserModeLegacyPowerEvent,
      GroupPark,
      ProcessorIdleDomains,
      WakeTimerList,
      SystemHiberFileSize,
      ProcessorIdleStatesHv,
      ProcessorPerfStatesHv,
      ProcessorPerfCapHv,
      ProcessorSetIdle,
      LogicalProcessorIdling,
      UserPresence,
      PowerSettingNotificationName,
      GetPowerSettingValue,
      IdleResiliency,
      SessionRITState,
      SessionConnectNotification,
      SessionPowerCleanup,
      SessionLockState,
      SystemHiberbootState,
      PlatformInformation,
      PdcInvocation,
      MonitorInvocation,
      FirmwareTableInformationRegistered,
      SetShutdownSelectedTime,
      SuspendResumeInvocation,
      PlmPowerRequestCreate,
      ScreenOff,
      CsDeviceNotification,
      PlatformRole,
      LastResumePerformance,
      DisplayBurst,
      ExitLatencySamplingPercentage,
      ApplyLowPowerScenarioSettings,
      PowerInformationLevelMaximum
    } POWER_INFORMATION_LEVEL;

    typedef enum {
      UserNotPresent = 0,
      UserPresent = 1,
      UserUnknown = 0xff
    } POWER_USER_PRESENCE_TYPE,*PPOWER_USER_PRESENCE_TYPE;

    typedef struct _POWER_USER_PRESENCE {
      POWER_USER_PRESENCE_TYPE UserPresence;
    } POWER_USER_PRESENCE,*PPOWER_USER_PRESENCE;

    typedef struct _POWER_SESSION_CONNECT {
      BOOLEAN Connected;
      BOOLEAN Console;
    } POWER_SESSION_CONNECT,*PPOWER_SESSION_CONNECT;

    typedef struct _POWER_SESSION_TIMEOUTS {
      DWORD InputTimeout;
      DWORD DisplayTimeout;
    } POWER_SESSION_TIMEOUTS,*PPOWER_SESSION_TIMEOUTS;

    typedef struct _POWER_SESSION_RIT_STATE {
      BOOLEAN Active;
      DWORD LastInputTime;
    } POWER_SESSION_RIT_STATE,*PPOWER_SESSION_RIT_STATE;

    typedef struct _POWER_SESSION_WINLOGON {
      DWORD SessionId;
      BOOLEAN Console;
      BOOLEAN Locked;
    } POWER_SESSION_WINLOGON,*PPOWER_SESSION_WINLOGON;

    typedef struct _POWER_IDLE_RESILIENCY {
      DWORD CoalescingTimeout;
      DWORD IdleResiliencyPeriod;
    } POWER_IDLE_RESILIENCY,*PPOWER_IDLE_RESILIENCY;

    typedef enum {
      MonitorRequestReasonUnknown,
      MonitorRequestReasonPowerButton,
      MonitorRequestReasonRemoteConnection,
      MonitorRequestReasonScMonitorpower,
      MonitorRequestReasonUserInput,
      MonitorRequestReasonAcDcDisplayBurst,
      MonitorRequestReasonUserDisplayBurst,
      MonitorRequestReasonPoSetSystemState,
      MonitorRequestReasonSetThreadExecutionState,
      MonitorRequestReasonFullWake,
      MonitorRequestReasonSessionUnlock,
      MonitorRequestReasonScreenOffRequest,
      MonitorRequestReasonIdleTimeout,
      MonitorRequestReasonPolicyChange,
      MonitorRequestReasonMax
    } POWER_MONITOR_REQUEST_REASON;

    typedef struct _POWER_MONITOR_INVOCATION {
      BOOLEAN On;
      BOOLEAN Console;
      POWER_MONITOR_REQUEST_REASON RequestReason;
    } POWER_MONITOR_INVOCATION,*PPOWER_MONITOR_INVOCATION;

    typedef struct _RESUME_PERFORMANCE {
      DWORD PostTimeMs;
      ULONGLONG TotalResumeTimeMs;
      ULONGLONG ResumeCompleteTimestamp;
    } RESUME_PERFORMANCE,*PRESUME_PERFORMANCE;

    typedef enum {
      PoAc,
      PoDc,
      PoHot,
      PoConditionMaximum
    } SYSTEM_POWER_CONDITION;

    typedef struct {
      DWORD Version;
      GUID Guid;
      SYSTEM_POWER_CONDITION PowerCondition;
      DWORD DataLength;
      BYTE Data[1];
    } SET_POWER_SETTING_VALUE,*PSET_POWER_SETTING_VALUE;

#define POWER_SETTING_VALUE_VERSION

    typedef struct {
      GUID Guid;
    } NOTIFY_USER_POWER_SETTING,*PNOTIFY_USER_POWER_SETTING;

    typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
      LARGE_INTEGER ActivationTime;
      DWORD Flags;
      DWORD ButtonInstanceID;
    } APPLICATIONLAUNCH_SETTING_VALUE,*PAPPLICATIONLAUNCH_SETTING_VALUE;

    typedef enum _POWER_PLATFORM_ROLE {
      PlatformRoleUnspecified = 0,
      PlatformRoleDesktop,
      PlatformRoleMobile,
      PlatformRoleWorkstation,
      PlatformRoleEnterpriseServer,
      PlatformRoleSOHOServer,
      PlatformRoleAppliancePC,
      PlatformRolePerformanceServer,
      PlatformRoleSlate,
      PlatformRoleMaximum
    } POWER_PLATFORM_ROLE,*PPOWER_PLATFORM_ROLE;

    typedef struct _POWER_PLATFORM_INFORMATION {
      BOOLEAN AoAc;
    } POWER_PLATFORM_INFORMATION,*PPOWER_PLATFORM_INFORMATION;

#define POWER_PLATFORM_ROLE_V1
#define POWER_PLATFORM_ROLE_V1_MAX

#define POWER_PLATFORM_ROLE_V2
#define POWER_PLATFORM_ROLE_V2_MAX





#define POWER_PLATFORM_ROLE_VERSION
#define POWER_PLATFORM_ROLE_VERSION_MAX


    typedef struct {
      DWORD Granularity;
      DWORD Capacity;
    } BATTERY_REPORTING_SCALE,*PBATTERY_REPORTING_SCALE;

    typedef struct {
      DWORD Frequency;
      DWORD Flags;
      DWORD PercentFrequency;
    } PPM_WMI_LEGACY_PERFSTATE,*PPPM_WMI_LEGACY_PERFSTATE;

    typedef struct {
      DWORD Latency;
      DWORD Power;
      DWORD TimeCheck;
      BYTE PromotePercent;
      BYTE DemotePercent;
      BYTE StateType;
      BYTE Reserved;
      DWORD StateFlags;
      DWORD Context;
      DWORD IdleHandler;
      DWORD Reserved1;
    } PPM_WMI_IDLE_STATE,*PPPM_WMI_IDLE_STATE;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      DWORD64 TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES,*PPPM_WMI_IDLE_STATES;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      PVOID TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES_EX,*PPPM_WMI_IDLE_STATES_EX;

    typedef struct {
      DWORD Frequency;
      DWORD Power;
      BYTE PercentFrequency;
      BYTE IncreaseLevel;
      BYTE DecreaseLevel;
      BYTE Type;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD64 Control;
      DWORD64 Status;
      DWORD HitCount;
      DWORD Reserved1;
      DWORD64 Reserved2;
      DWORD64 Reserved3;
    } PPM_WMI_PERF_STATE,*PPPM_WMI_PERF_STATE;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      DWORD64 TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES,*PPPM_WMI_PERF_STATES;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      PVOID TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES_EX,*PPPM_WMI_PERF_STATES_EX;

#define PROC_IDLE_BUCKET_COUNT
#define PROC_IDLE_BUCKET_COUNT_EX

    typedef struct {
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD64 TotalTime;
      DWORD IdleTimeBuckets[6];
    } PPM_IDLE_STATE_ACCOUNTING,*PPPM_IDLE_STATE_ACCOUNTING;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING State[1];
    } PPM_IDLE_ACCOUNTING,*PPPM_IDLE_ACCOUNTING;

    typedef struct {
      DWORD64 TotalTimeUs;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD Count;
    } PPM_IDLE_STATE_BUCKET_EX,*PPPM_IDLE_STATE_BUCKET_EX;

    typedef struct {
      DWORD64 TotalTime;
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD CancelledTransitions;
      PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
    } PPM_IDLE_STATE_ACCOUNTING_EX,*PPPM_IDLE_STATE_ACCOUNTING_EX;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD AbortCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
    } PPM_IDLE_ACCOUNTING_EX,*PPPM_IDLE_ACCOUNTING_EX;

#define ACPI_PPM_SOFTWARE_ALL
#define ACPI_PPM_SOFTWARE_ANY
#define ACPI_PPM_HARDWARE_ALL

#define MS_PPM_SOFTWARE_ALL

#define PPM_FIRMWARE_ACPI1C2
#define PPM_FIRMWARE_ACPI1C3
#define PPM_FIRMWARE_ACPI1TSTATES
#define PPM_FIRMWARE_CST
#define PPM_FIRMWARE_CSD
#define PPM_FIRMWARE_PCT
#define PPM_FIRMWARE_PSS
#define PPM_FIRMWARE_XPSS
#define PPM_FIRMWARE_PPC
#define PPM_FIRMWARE_PSD
#define PPM_FIRMWARE_PTC
#define PPM_FIRMWARE_TSS
#define PPM_FIRMWARE_TPC
#define PPM_FIRMWARE_TSD
#define PPM_FIRMWARE_PCCH
#define PPM_FIRMWARE_PCCP
#define PPM_FIRMWARE_OSC
#define PPM_FIRMWARE_PDC
#define PPM_FIRMWARE_CPC

#define PPM_PERFORMANCE_IMPLEMENTATION_NONE
#define PPM_PERFORMANCE_IMPLEMENTATION_PSTATES
#define PPM_PERFORMANCE_IMPLEMENTATION_PCCV1
#define PPM_PERFORMANCE_IMPLEMENTATION_CPPC
#define PPM_PERFORMANCE_IMPLEMENTATION_PEP

#define PPM_IDLE_IMPLEMENTATION_NONE
#define PPM_IDLE_IMPLEMENTATION_CSTATES
#define PPM_IDLE_IMPLEMENTATION_PEP

    typedef struct {
      DWORD State;
      DWORD Status;
      DWORD Latency;
      DWORD Speed;
      DWORD Processor;
    } PPM_PERFSTATE_EVENT,*PPPM_PERFSTATE_EVENT;

    typedef struct {
      DWORD State;
      DWORD Latency;
      DWORD Speed;
      DWORD64 Processors;
    } PPM_PERFSTATE_DOMAIN_EVENT,*PPPM_PERFSTATE_DOMAIN_EVENT;

    typedef struct {
      DWORD NewState;
      DWORD OldState;
      DWORD64 Processors;
    } PPM_IDLESTATE_EVENT,*PPPM_IDLESTATE_EVENT;

    typedef struct {
      DWORD ThermalConstraint;
      DWORD64 Processors;
    } PPM_THERMALCHANGE_EVENT,*PPPM_THERMALCHANGE_EVENT;
    typedef struct {
      BYTE Mode;
      DWORD64 Processors;
    } PPM_THERMAL_POLICY_EVENT,*PPPM_THERMAL_POLICY_EVENT;

    extern const GUID PPM_PERFSTATE_CHANGE_GUID;
    extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    extern const GUID PPM_IDLESTATE_CHANGE_GUID;
    extern const GUID PPM_PERFSTATES_DATA_GUID;
    extern const GUID PPM_IDLESTATES_DATA_GUID;
    extern const GUID PPM_IDLE_ACCOUNTING_GUID;
    extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
    extern const GUID PPM_THERMALCONSTRAINT_GUID;
    extern const GUID PPM_PERFMON_PERFSTATE_GUID;
    extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID;

    typedef struct {
      POWER_ACTION Action;
      DWORD Flags;
      DWORD EventCode;
    } POWER_ACTION_POLICY,*PPOWER_ACTION_POLICY;

#define POWER_ACTION_QUERY_ALLOWED
#define POWER_ACTION_UI_ALLOWED
#define POWER_ACTION_OVERRIDE_APPS
#define POWER_ACTION_HIBERBOOT
#define POWER_ACTION_PSEUDO_TRANSITION
#define POWER_ACTION_LIGHTEST_FIRST
#define POWER_ACTION_LOCK_CONSOLE
#define POWER_ACTION_DISABLE_WAKES
#define POWER_ACTION_CRITICAL

#define POWER_LEVEL_USER_NOTIFY_TEXT
#define POWER_LEVEL_USER_NOTIFY_SOUND
#define POWER_LEVEL_USER_NOTIFY_EXEC
#define POWER_USER_NOTIFY_BUTTON
#define POWER_USER_NOTIFY_SHUTDOWN
#define POWER_USER_NOTIFY_FORCED_SHUTDOWN
#define POWER_FORCE_TRIGGER_RESET

#define BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK
#define BATTERY_DISCHARGE_FLAGS_ENABLE

#define DISCHARGE_POLICY_CRITICAL
#define DISCHARGE_POLICY_LOW

#define NUM_DISCHARGE_POLICIES

#define PROCESSOR_IDLESTATE_POLICY_COUNT

    typedef struct {
      DWORD TimeCheck;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
    } PROCESSOR_IDLESTATE_INFO,*PPROCESSOR_IDLESTATE_INFO;

    typedef struct {
      BOOLEAN Enable;
      BYTE Spare[3];
      DWORD BatteryLevel;
      POWER_ACTION_POLICY PowerPolicy;
      SYSTEM_POWER_STATE MinSystemState;
    } SYSTEM_POWER_LEVEL,*PSYSTEM_POWER_LEVEL;

    typedef struct _SYSTEM_POWER_POLICY {
      DWORD Revision;
      POWER_ACTION_POLICY PowerButton;
      POWER_ACTION_POLICY SleepButton;
      POWER_ACTION_POLICY LidClose;
      SYSTEM_POWER_STATE LidOpenWake;
      DWORD Reserved;
      POWER_ACTION_POLICY Idle;
      DWORD IdleTimeout;
      BYTE IdleSensitivity;
      BYTE DynamicThrottle;
      BYTE Spare2[2];
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      SYSTEM_POWER_STATE ReducedLatencySleep;
      DWORD WinLogonFlags;
      DWORD Spare3;
      DWORD DozeS4Timeout;
      DWORD BroadcastCapacityResolution;
      SYSTEM_POWER_LEVEL DischargePolicy[4];
      DWORD VideoTimeout;
      BOOLEAN VideoDimDisplay;
      DWORD VideoReserved[3];
      DWORD SpindownTimeout;
      BOOLEAN OptimizeForPower;
      BYTE FanThrottleTolerance;
      BYTE ForcedThrottle;
      BYTE MinThrottle;
      POWER_ACTION_POLICY OverThrottled;
    } SYSTEM_POWER_POLICY,*PSYSTEM_POWER_POLICY;

#define PO_THROTTLE_NONE
#define PO_THROTTLE_CONSTANT
#define PO_THROTTLE_DEGRADE
#define PO_THROTTLE_ADAPTIVE
#define PO_THROTTLE_MAXIMUM

    typedef struct {
      WORD Revision;
      union {
 WORD AsWORD;
 __extension__ struct {
   WORD AllowScaling : 1;
   WORD Disabled : 1;
   WORD Reserved : 14;
 } ;
      } Flags;
      DWORD PolicyCount;
      PROCESSOR_IDLESTATE_INFO Policy[0x3];
    } PROCESSOR_IDLESTATE_POLICY,*PPROCESSOR_IDLESTATE_POLICY;

    typedef struct _PROCESSOR_POWER_POLICY_INFO {
      DWORD TimeCheck;
      DWORD DemoteLimit;
      DWORD PromoteLimit;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
      DWORD AllowDemotion:1;
      DWORD AllowPromotion:1;
      DWORD Reserved:30;
    } PROCESSOR_POWER_POLICY_INFO,*PPROCESSOR_POWER_POLICY_INFO;

    typedef struct _PROCESSOR_POWER_POLICY {
      DWORD Revision;
      BYTE DynamicThrottle;
      BYTE Spare[3];
      DWORD DisableCStates:1;
      DWORD Reserved:31;
      DWORD PolicyCount;
      PROCESSOR_POWER_POLICY_INFO Policy[3];
    } PROCESSOR_POWER_POLICY,*PPROCESSOR_POWER_POLICY;

    typedef struct {
      DWORD Revision;
      BYTE MaxThrottle;
      BYTE MinThrottle;
      BYTE BusyAdjThreshold;
      __extension__ union {
 BYTE Spare;
 union {
   BYTE AsBYTE;
   __extension__ struct {
     BYTE NoDomainAccounting : 1;
     BYTE IncreasePolicy: 2;
     BYTE DecreasePolicy: 2;
     BYTE Reserved : 3;
   } ;
 } Flags;
      } ;
      DWORD TimeCheck;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD IncreasePercent;
      DWORD DecreasePercent;
    } PROCESSOR_PERFSTATE_POLICY,*PPROCESSOR_PERFSTATE_POLICY;

    typedef struct _ADMINISTRATOR_POWER_POLICY {
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      DWORD MinVideoTimeout;
      DWORD MaxVideoTimeout;
      DWORD MinSpindownTimeout;
      DWORD MaxSpindownTimeout;
    } ADMINISTRATOR_POWER_POLICY,*PADMINISTRATOR_POWER_POLICY;

    typedef struct {
      BOOLEAN PowerButtonPresent;
      BOOLEAN SleepButtonPresent;
      BOOLEAN LidPresent;
      BOOLEAN SystemS1;
      BOOLEAN SystemS2;
      BOOLEAN SystemS3;
      BOOLEAN SystemS4;
      BOOLEAN SystemS5;
      BOOLEAN HiberFilePresent;
      BOOLEAN FullWake;
      BOOLEAN VideoDimPresent;
      BOOLEAN ApmPresent;
      BOOLEAN UpsPresent;
      BOOLEAN ThermalControl;
      BOOLEAN ProcessorThrottle;
      BYTE ProcessorMinThrottle;
      BYTE ProcessorMaxThrottle;
      BOOLEAN FastSystemS4;
      BYTE spare2[3];
      BOOLEAN DiskSpinDown;
      BYTE spare3[8];
      BOOLEAN SystemBatteriesPresent;
      BOOLEAN BatteriesAreShortTerm;
      BATTERY_REPORTING_SCALE BatteryScale[3];
      SYSTEM_POWER_STATE AcOnLineWake;
      SYSTEM_POWER_STATE SoftLidWake;
      SYSTEM_POWER_STATE RtcWake;
      SYSTEM_POWER_STATE MinDeviceWakeState;
      SYSTEM_POWER_STATE DefaultLowLatencyWake;
    } SYSTEM_POWER_CAPABILITIES,*PSYSTEM_POWER_CAPABILITIES;

    typedef struct {
      BOOLEAN AcOnLine;
      BOOLEAN BatteryPresent;
      BOOLEAN Charging;
      BOOLEAN Discharging;
      BOOLEAN Spare1[4];
      DWORD MaxCapacity;
      DWORD RemainingCapacity;
      DWORD Rate;
      DWORD EstimatedTime;
      DWORD DefaultAlert1;
      DWORD DefaultAlert2;
    } SYSTEM_BATTERY_STATE,*PSYSTEM_BATTERY_STATE;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack4.h" 1 3






#pragma pack(push,4)
# 5331 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

#define IMAGE_DOS_SIGNATURE
#define IMAGE_OS2_SIGNATURE
#define IMAGE_OS2_SIGNATURE_LE
#define IMAGE_VXD_SIGNATURE
#define IMAGE_NT_SIGNATURE

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 5339 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _IMAGE_DOS_HEADER {
      WORD e_magic;
      WORD e_cblp;
      WORD e_cp;
      WORD e_crlc;
      WORD e_cparhdr;
      WORD e_minalloc;
      WORD e_maxalloc;
      WORD e_ss;
      WORD e_sp;
      WORD e_csum;
      WORD e_ip;
      WORD e_cs;
      WORD e_lfarlc;
      WORD e_ovno;
      WORD e_res[4];
      WORD e_oemid;
      WORD e_oeminfo;
      WORD e_res2[10];
      LONG e_lfanew;
    } IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;

    typedef struct _IMAGE_OS2_HEADER {
      WORD ne_magic;
      CHAR ne_ver;
      CHAR ne_rev;
      WORD ne_enttab;
      WORD ne_cbenttab;
      LONG ne_crc;
      WORD ne_flags;
      WORD ne_autodata;
      WORD ne_heap;
      WORD ne_stack;
      LONG ne_csip;
      LONG ne_sssp;
      WORD ne_cseg;
      WORD ne_cmod;
      WORD ne_cbnrestab;
      WORD ne_segtab;
      WORD ne_rsrctab;
      WORD ne_restab;
      WORD ne_modtab;
      WORD ne_imptab;
      LONG ne_nrestab;
      WORD ne_cmovent;
      WORD ne_align;
      WORD ne_cres;
      BYTE ne_exetyp;
      BYTE ne_flagsothers;
      WORD ne_pretthunks;
      WORD ne_psegrefbytes;
      WORD ne_swaparea;
      WORD ne_expver;
    } IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;

    typedef struct _IMAGE_VXD_HEADER {
      WORD e32_magic;
      BYTE e32_border;
      BYTE e32_worder;
      DWORD e32_level;
      WORD e32_cpu;
      WORD e32_os;
      DWORD e32_ver;
      DWORD e32_mflags;
      DWORD e32_mpages;
      DWORD e32_startobj;
      DWORD e32_eip;
      DWORD e32_stackobj;
      DWORD e32_esp;
      DWORD e32_pagesize;
      DWORD e32_lastpagesize;
      DWORD e32_fixupsize;
      DWORD e32_fixupsum;
      DWORD e32_ldrsize;
      DWORD e32_ldrsum;
      DWORD e32_objtab;
      DWORD e32_objcnt;
      DWORD e32_objmap;
      DWORD e32_itermap;
      DWORD e32_rsrctab;
      DWORD e32_rsrccnt;
      DWORD e32_restab;
      DWORD e32_enttab;
      DWORD e32_dirtab;
      DWORD e32_dircnt;
      DWORD e32_fpagetab;
      DWORD e32_frectab;
      DWORD e32_impmod;
      DWORD e32_impmodcnt;
      DWORD e32_impproc;
      DWORD e32_pagesum;
      DWORD e32_datapage;
      DWORD e32_preload;
      DWORD e32_nrestab;
      DWORD e32_cbnrestab;
      DWORD e32_nressum;
      DWORD e32_autodata;
      DWORD e32_debuginfo;
      DWORD e32_debuglen;
      DWORD e32_instpreload;
      DWORD e32_instdemand;
      DWORD e32_heapsize;
      BYTE e32_res3[12];
      DWORD e32_winresoff;
      DWORD e32_winreslen;
      WORD e32_devid;
      WORD e32_ddkver;
    } IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 5450 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _IMAGE_FILE_HEADER {
      WORD Machine;
      WORD NumberOfSections;
      DWORD TimeDateStamp;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
      WORD SizeOfOptionalHeader;
      WORD Characteristics;
    } IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;

#define IMAGE_SIZEOF_FILE_HEADER

#define IMAGE_FILE_RELOCS_STRIPPED
#define IMAGE_FILE_EXECUTABLE_IMAGE
#define IMAGE_FILE_LINE_NUMS_STRIPPED
#define IMAGE_FILE_LOCAL_SYMS_STRIPPED
#define IMAGE_FILE_AGGRESIVE_WS_TRIM
#define IMAGE_FILE_LARGE_ADDRESS_AWARE
#define IMAGE_FILE_BYTES_REVERSED_LO
#define IMAGE_FILE_32BIT_MACHINE
#define IMAGE_FILE_DEBUG_STRIPPED
#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP
#define IMAGE_FILE_NET_RUN_FROM_SWAP
#define IMAGE_FILE_SYSTEM
#define IMAGE_FILE_DLL
#define IMAGE_FILE_UP_SYSTEM_ONLY
#define IMAGE_FILE_BYTES_REVERSED_HI

#define IMAGE_FILE_MACHINE_UNKNOWN
#define IMAGE_FILE_MACHINE_I386
#define IMAGE_FILE_MACHINE_R3000
#define IMAGE_FILE_MACHINE_R4000
#define IMAGE_FILE_MACHINE_R10000
#define IMAGE_FILE_MACHINE_WCEMIPSV2
#define IMAGE_FILE_MACHINE_ALPHA
#define IMAGE_FILE_MACHINE_SH3
#define IMAGE_FILE_MACHINE_SH3DSP
#define IMAGE_FILE_MACHINE_SH3E
#define IMAGE_FILE_MACHINE_SH4
#define IMAGE_FILE_MACHINE_SH5
#define IMAGE_FILE_MACHINE_ARM
#define IMAGE_FILE_MACHINE_ARMV7
#define IMAGE_FILE_MACHINE_ARMNT
#define IMAGE_FILE_MACHINE_THUMB
#define IMAGE_FILE_MACHINE_AM33
#define IMAGE_FILE_MACHINE_POWERPC
#define IMAGE_FILE_MACHINE_POWERPCFP
#define IMAGE_FILE_MACHINE_IA64
#define IMAGE_FILE_MACHINE_MIPS16
#define IMAGE_FILE_MACHINE_ALPHA64
#define IMAGE_FILE_MACHINE_MIPSFPU
#define IMAGE_FILE_MACHINE_MIPSFPU16
#define IMAGE_FILE_MACHINE_AXP64
#define IMAGE_FILE_MACHINE_TRICORE
#define IMAGE_FILE_MACHINE_CEF
#define IMAGE_FILE_MACHINE_EBC
#define IMAGE_FILE_MACHINE_AMD64
#define IMAGE_FILE_MACHINE_M32R
#define IMAGE_FILE_MACHINE_CEE

    typedef struct _IMAGE_DATA_DIRECTORY {
      DWORD VirtualAddress;
      DWORD Size;
    } IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;

#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES

    typedef struct _IMAGE_OPTIONAL_HEADER {

      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      DWORD SizeOfStackReserve;
      DWORD SizeOfStackCommit;
      DWORD SizeOfHeapReserve;
      DWORD SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER32,*PIMAGE_OPTIONAL_HEADER32;

    typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD BaseOfBss;
      DWORD GprMask;
      DWORD CprMask[4];
      DWORD GpValue;
    } IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;

    typedef struct _IMAGE_OPTIONAL_HEADER64 {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      ULONGLONG ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      ULONGLONG SizeOfStackReserve;
      ULONGLONG SizeOfStackCommit;
      ULONGLONG SizeOfHeapReserve;
      ULONGLONG SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER64,*PIMAGE_OPTIONAL_HEADER64;

#define IMAGE_SIZEOF_ROM_OPTIONAL_HEADER
#define IMAGE_SIZEOF_STD_OPTIONAL_HEADER
#define IMAGE_SIZEOF_NT_OPTIONAL32_HEADER
#define IMAGE_SIZEOF_NT_OPTIONAL64_HEADER

#define IMAGE_NT_OPTIONAL_HDR32_MAGIC
#define IMAGE_NT_OPTIONAL_HDR64_MAGIC
#define IMAGE_ROM_OPTIONAL_HDR_MAGIC


    typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
    typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;
#define IMAGE_SIZEOF_NT_OPTIONAL_HEADER
#define IMAGE_NT_OPTIONAL_HDR_MAGIC







    typedef struct _IMAGE_NT_HEADERS64 {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER64 OptionalHeader;
    } IMAGE_NT_HEADERS64,*PIMAGE_NT_HEADERS64;

    typedef struct _IMAGE_NT_HEADERS {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    } IMAGE_NT_HEADERS32,*PIMAGE_NT_HEADERS32;

    typedef struct _IMAGE_ROM_HEADERS {
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
    } IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;


    typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
    typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;





#define IMAGE_FIRST_SECTION

#define IMAGE_SUBSYSTEM_UNKNOWN
#define IMAGE_SUBSYSTEM_NATIVE
#define IMAGE_SUBSYSTEM_WINDOWS_GUI
#define IMAGE_SUBSYSTEM_WINDOWS_CUI
#define IMAGE_SUBSYSTEM_OS2_CUI
#define IMAGE_SUBSYSTEM_POSIX_CUI
#define IMAGE_SUBSYSTEM_NATIVE_WINDOWS
#define IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
#define IMAGE_SUBSYSTEM_EFI_APPLICATION
#define IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
#define IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
#define IMAGE_SUBSYSTEM_EFI_ROM
#define IMAGE_SUBSYSTEM_XBOX
#define IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION

#define IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
#define IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY
#define IMAGE_DLLCHARACTERISTICS_NX_COMPAT
#define IMAGE_DLLCHARACTERISTICS_NO_ISOLATION
#define IMAGE_DLLCHARACTERISTICS_NO_SEH
#define IMAGE_DLLCHARACTERISTICS_NO_BIND
#define IMAGE_DLLCHARACTERISTICS_APPCONTAINER
#define IMAGE_DLLCHARACTERISTICS_WDM_DRIVER
#define IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE

#define IMAGE_DIRECTORY_ENTRY_EXPORT
#define IMAGE_DIRECTORY_ENTRY_IMPORT
#define IMAGE_DIRECTORY_ENTRY_RESOURCE
#define IMAGE_DIRECTORY_ENTRY_EXCEPTION
#define IMAGE_DIRECTORY_ENTRY_SECURITY
#define IMAGE_DIRECTORY_ENTRY_BASERELOC
#define IMAGE_DIRECTORY_ENTRY_DEBUG
#define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE
#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR
#define IMAGE_DIRECTORY_ENTRY_TLS
#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG
#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT
#define IMAGE_DIRECTORY_ENTRY_IAT
#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT
#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR

    typedef struct ANON_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
    } ANON_OBJECT_HEADER;

    typedef struct ANON_OBJECT_HEADER_V2 {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
    } ANON_OBJECT_HEADER_V2;

    typedef struct ANON_OBJECT_HEADER_BIGOBJ {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
      DWORD NumberOfSections;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
    } ANON_OBJECT_HEADER_BIGOBJ;

#define IMAGE_SIZEOF_SHORT_NAME

    typedef struct _IMAGE_SECTION_HEADER {
      BYTE Name[8];
      union {
 DWORD PhysicalAddress;
 DWORD VirtualSize;
      } Misc;
      DWORD VirtualAddress;
      DWORD SizeOfRawData;
      DWORD PointerToRawData;
      DWORD PointerToRelocations;
      DWORD PointerToLinenumbers;
      WORD NumberOfRelocations;
      WORD NumberOfLinenumbers;
      DWORD Characteristics;
    } IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;

#define IMAGE_SIZEOF_SECTION_HEADER

#define IMAGE_SCN_TYPE_NO_PAD

#define IMAGE_SCN_CNT_CODE
#define IMAGE_SCN_CNT_INITIALIZED_DATA
#define IMAGE_SCN_CNT_UNINITIALIZED_DATA
#define IMAGE_SCN_LNK_OTHER
#define IMAGE_SCN_LNK_INFO
#define IMAGE_SCN_LNK_REMOVE
#define IMAGE_SCN_LNK_COMDAT
#define IMAGE_SCN_NO_DEFER_SPEC_EXC
#define IMAGE_SCN_GPREL
#define IMAGE_SCN_MEM_FARDATA
#define IMAGE_SCN_MEM_PURGEABLE
#define IMAGE_SCN_MEM_16BIT
#define IMAGE_SCN_MEM_LOCKED
#define IMAGE_SCN_MEM_PRELOAD

#define IMAGE_SCN_ALIGN_1BYTES
#define IMAGE_SCN_ALIGN_2BYTES
#define IMAGE_SCN_ALIGN_4BYTES
#define IMAGE_SCN_ALIGN_8BYTES
#define IMAGE_SCN_ALIGN_16BYTES
#define IMAGE_SCN_ALIGN_32BYTES
#define IMAGE_SCN_ALIGN_64BYTES
#define IMAGE_SCN_ALIGN_128BYTES
#define IMAGE_SCN_ALIGN_256BYTES
#define IMAGE_SCN_ALIGN_512BYTES
#define IMAGE_SCN_ALIGN_1024BYTES
#define IMAGE_SCN_ALIGN_2048BYTES
#define IMAGE_SCN_ALIGN_4096BYTES
#define IMAGE_SCN_ALIGN_8192BYTES

#define IMAGE_SCN_ALIGN_MASK

#define IMAGE_SCN_LNK_NRELOC_OVFL
#define IMAGE_SCN_MEM_DISCARDABLE
#define IMAGE_SCN_MEM_NOT_CACHED
#define IMAGE_SCN_MEM_NOT_PAGED
#define IMAGE_SCN_MEM_SHARED
#define IMAGE_SCN_MEM_EXECUTE
#define IMAGE_SCN_MEM_READ
#define IMAGE_SCN_MEM_WRITE

#define IMAGE_SCN_SCALE_INDEX

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 5796 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
    typedef struct _IMAGE_SYMBOL {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      SHORT SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL;
    typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;

#define IMAGE_SIZEOF_SYMBOL

    typedef struct _IMAGE_SYMBOL_EX {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      LONG SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL_EX, *PIMAGE_SYMBOL_EX;

#define IMAGE_SYM_UNDEFINED
#define IMAGE_SYM_ABSOLUTE
#define IMAGE_SYM_DEBUG
#define IMAGE_SYM_SECTION_MAX
#define IMAGE_SYM_SECTION_MAX_EX

#define IMAGE_SYM_TYPE_NULL
#define IMAGE_SYM_TYPE_VOID
#define IMAGE_SYM_TYPE_CHAR
#define IMAGE_SYM_TYPE_SHORT
#define IMAGE_SYM_TYPE_INT
#define IMAGE_SYM_TYPE_LONG
#define IMAGE_SYM_TYPE_FLOAT
#define IMAGE_SYM_TYPE_DOUBLE
#define IMAGE_SYM_TYPE_STRUCT
#define IMAGE_SYM_TYPE_UNION
#define IMAGE_SYM_TYPE_ENUM
#define IMAGE_SYM_TYPE_MOE
#define IMAGE_SYM_TYPE_BYTE
#define IMAGE_SYM_TYPE_WORD
#define IMAGE_SYM_TYPE_UINT
#define IMAGE_SYM_TYPE_DWORD
#define IMAGE_SYM_TYPE_PCODE

#define IMAGE_SYM_DTYPE_NULL
#define IMAGE_SYM_DTYPE_POINTER
#define IMAGE_SYM_DTYPE_FUNCTION
#define IMAGE_SYM_DTYPE_ARRAY

#define IMAGE_SYM_CLASS_END_OF_FUNCTION
#define IMAGE_SYM_CLASS_NULL
#define IMAGE_SYM_CLASS_AUTOMATIC
#define IMAGE_SYM_CLASS_EXTERNAL
#define IMAGE_SYM_CLASS_STATIC
#define IMAGE_SYM_CLASS_REGISTER
#define IMAGE_SYM_CLASS_EXTERNAL_DEF
#define IMAGE_SYM_CLASS_LABEL
#define IMAGE_SYM_CLASS_UNDEFINED_LABEL
#define IMAGE_SYM_CLASS_MEMBER_OF_STRUCT
#define IMAGE_SYM_CLASS_ARGUMENT
#define IMAGE_SYM_CLASS_STRUCT_TAG
#define IMAGE_SYM_CLASS_MEMBER_OF_UNION
#define IMAGE_SYM_CLASS_UNION_TAG
#define IMAGE_SYM_CLASS_TYPE_DEFINITION
#define IMAGE_SYM_CLASS_UNDEFINED_STATIC
#define IMAGE_SYM_CLASS_ENUM_TAG
#define IMAGE_SYM_CLASS_MEMBER_OF_ENUM
#define IMAGE_SYM_CLASS_REGISTER_PARAM
#define IMAGE_SYM_CLASS_BIT_FIELD
#define IMAGE_SYM_CLASS_FAR_EXTERNAL
#define IMAGE_SYM_CLASS_BLOCK
#define IMAGE_SYM_CLASS_FUNCTION
#define IMAGE_SYM_CLASS_END_OF_STRUCT
#define IMAGE_SYM_CLASS_FILE
#define IMAGE_SYM_CLASS_SECTION
#define IMAGE_SYM_CLASS_WEAK_EXTERNAL
#define IMAGE_SYM_CLASS_CLR_TOKEN

#define N_BTMASK
#define N_TMASK
#define N_TMASK1
#define N_TMASK2
#define N_BTSHFT
#define N_TSHIFT

#define BTYPE


#define ISPTR



#define ISFCN



#define ISARY



#define ISTAG



#define INCREF


#define DECREF


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 5922 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
    typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
      BYTE bAuxType;
      BYTE bReserved;
      DWORD SymbolTableIndex;
      BYTE rgbReserved[12];
    } IMAGE_AUX_SYMBOL_TOKEN_DEF, *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 5929 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef union _IMAGE_AUX_SYMBOL {
      struct {
 DWORD TagIndex;
 union {
   struct {
     WORD Linenumber;
     WORD Size;
   } LnSz;
   DWORD TotalSize;
 } Misc;
 union {
   struct {
     DWORD PointerToLinenumber;
     DWORD PointerToNextFunction;
   } Function;
   struct {
     WORD Dimension[4];
   } Array;
 } FcnAry;
 WORD TvIndex;
      } Sym;
      struct {
 BYTE Name[18];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
      } Section;
      IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
      struct {
 DWORD crc;
 BYTE rgbReserved[14];
      } CRC;
    } IMAGE_AUX_SYMBOL, *PIMAGE_AUX_SYMBOL;

    typedef union _IMAGE_AUX_SYMBOL_EX {
      struct {
 DWORD WeakDefaultSymIndex;
 DWORD WeakSearchType;
 BYTE rgbReserved[12];
      } Sym;
      struct {
 BYTE Name[sizeof (IMAGE_SYMBOL_EX)];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
 BYTE rgbReserved[2];
      } Section;
      __extension__ struct {
 IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
 BYTE rgbReserved[2];
      };
      struct {
 DWORD crc;
 BYTE rgbReserved[16];
      } CRC;
    } IMAGE_AUX_SYMBOL_EX, *PIMAGE_AUX_SYMBOL_EX;

#define IMAGE_SIZEOF_AUX_SYMBOL

    typedef enum IMAGE_AUX_SYMBOL_TYPE {
      IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
    } IMAGE_AUX_SYMBOL_TYPE;

#define IMAGE_COMDAT_SELECT_NODUPLICATES
#define IMAGE_COMDAT_SELECT_ANY
#define IMAGE_COMDAT_SELECT_SAME_SIZE
#define IMAGE_COMDAT_SELECT_EXACT_MATCH
#define IMAGE_COMDAT_SELECT_ASSOCIATIVE
#define IMAGE_COMDAT_SELECT_LARGEST
#define IMAGE_COMDAT_SELECT_NEWEST

#define IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY
#define IMAGE_WEAK_EXTERN_SEARCH_LIBRARY
#define IMAGE_WEAK_EXTERN_SEARCH_ALIAS

    typedef struct _IMAGE_RELOCATION {
      __extension__ union {
 DWORD VirtualAddress;
 DWORD RelocCount;
      } ;
      DWORD SymbolTableIndex;
      WORD Type;
    } IMAGE_RELOCATION;
    typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;

#define IMAGE_SIZEOF_RELOCATION

#define IMAGE_REL_I386_ABSOLUTE
#define IMAGE_REL_I386_DIR16
#define IMAGE_REL_I386_REL16
#define IMAGE_REL_I386_DIR32
#define IMAGE_REL_I386_DIR32NB
#define IMAGE_REL_I386_SEG12
#define IMAGE_REL_I386_SECTION
#define IMAGE_REL_I386_SECREL
#define IMAGE_REL_I386_TOKEN
#define IMAGE_REL_I386_SECREL7
#define IMAGE_REL_I386_REL32

#define IMAGE_REL_MIPS_ABSOLUTE
#define IMAGE_REL_MIPS_REFHALF
#define IMAGE_REL_MIPS_REFWORD
#define IMAGE_REL_MIPS_JMPADDR
#define IMAGE_REL_MIPS_REFHI
#define IMAGE_REL_MIPS_REFLO
#define IMAGE_REL_MIPS_GPREL
#define IMAGE_REL_MIPS_LITERAL
#define IMAGE_REL_MIPS_SECTION
#define IMAGE_REL_MIPS_SECREL
#define IMAGE_REL_MIPS_SECRELLO
#define IMAGE_REL_MIPS_SECRELHI
#define IMAGE_REL_MIPS_TOKEN
#define IMAGE_REL_MIPS_JMPADDR16
#define IMAGE_REL_MIPS_REFWORDNB
#define IMAGE_REL_MIPS_PAIR

#define IMAGE_REL_ALPHA_ABSOLUTE
#define IMAGE_REL_ALPHA_REFLONG
#define IMAGE_REL_ALPHA_REFQUAD
#define IMAGE_REL_ALPHA_GPREL32
#define IMAGE_REL_ALPHA_LITERAL
#define IMAGE_REL_ALPHA_LITUSE
#define IMAGE_REL_ALPHA_GPDISP
#define IMAGE_REL_ALPHA_BRADDR
#define IMAGE_REL_ALPHA_HINT
#define IMAGE_REL_ALPHA_INLINE_REFLONG
#define IMAGE_REL_ALPHA_REFHI
#define IMAGE_REL_ALPHA_REFLO
#define IMAGE_REL_ALPHA_PAIR
#define IMAGE_REL_ALPHA_MATCH
#define IMAGE_REL_ALPHA_SECTION
#define IMAGE_REL_ALPHA_SECREL
#define IMAGE_REL_ALPHA_REFLONGNB
#define IMAGE_REL_ALPHA_SECRELLO
#define IMAGE_REL_ALPHA_SECRELHI
#define IMAGE_REL_ALPHA_REFQ3
#define IMAGE_REL_ALPHA_REFQ2
#define IMAGE_REL_ALPHA_REFQ1
#define IMAGE_REL_ALPHA_GPRELLO
#define IMAGE_REL_ALPHA_GPRELHI

#define IMAGE_REL_PPC_ABSOLUTE
#define IMAGE_REL_PPC_ADDR64
#define IMAGE_REL_PPC_ADDR32
#define IMAGE_REL_PPC_ADDR24
#define IMAGE_REL_PPC_ADDR16
#define IMAGE_REL_PPC_ADDR14
#define IMAGE_REL_PPC_REL24
#define IMAGE_REL_PPC_REL14
#define IMAGE_REL_PPC_TOCREL16
#define IMAGE_REL_PPC_TOCREL14
#define IMAGE_REL_PPC_ADDR32NB
#define IMAGE_REL_PPC_SECREL
#define IMAGE_REL_PPC_SECTION
#define IMAGE_REL_PPC_IFGLUE
#define IMAGE_REL_PPC_IMGLUE
#define IMAGE_REL_PPC_SECREL16
#define IMAGE_REL_PPC_REFHI
#define IMAGE_REL_PPC_REFLO
#define IMAGE_REL_PPC_PAIR
#define IMAGE_REL_PPC_SECRELLO
#define IMAGE_REL_PPC_SECRELHI
#define IMAGE_REL_PPC_GPREL
#define IMAGE_REL_PPC_TOKEN
#define IMAGE_REL_PPC_TYPEMASK
#define IMAGE_REL_PPC_NEG
#define IMAGE_REL_PPC_BRTAKEN
#define IMAGE_REL_PPC_BRNTAKEN
#define IMAGE_REL_PPC_TOCDEFN

#define IMAGE_REL_SH3_ABSOLUTE
#define IMAGE_REL_SH3_DIRECT16
#define IMAGE_REL_SH3_DIRECT32
#define IMAGE_REL_SH3_DIRECT8
#define IMAGE_REL_SH3_DIRECT8_WORD
#define IMAGE_REL_SH3_DIRECT8_LONG
#define IMAGE_REL_SH3_DIRECT4
#define IMAGE_REL_SH3_DIRECT4_WORD
#define IMAGE_REL_SH3_DIRECT4_LONG
#define IMAGE_REL_SH3_PCREL8_WORD
#define IMAGE_REL_SH3_PCREL8_LONG
#define IMAGE_REL_SH3_PCREL12_WORD
#define IMAGE_REL_SH3_STARTOF_SECTION
#define IMAGE_REL_SH3_SIZEOF_SECTION
#define IMAGE_REL_SH3_SECTION
#define IMAGE_REL_SH3_SECREL
#define IMAGE_REL_SH3_DIRECT32_NB
#define IMAGE_REL_SH3_GPREL4_LONG
#define IMAGE_REL_SH3_TOKEN

#define IMAGE_REL_SHM_PCRELPT
#define IMAGE_REL_SHM_REFLO
#define IMAGE_REL_SHM_REFHALF
#define IMAGE_REL_SHM_RELLO
#define IMAGE_REL_SHM_RELHALF
#define IMAGE_REL_SHM_PAIR

#define IMAGE_REL_SH_NOMODE

#define IMAGE_REL_ARM_ABSOLUTE
#define IMAGE_REL_ARM_ADDR32
#define IMAGE_REL_ARM_ADDR32NB
#define IMAGE_REL_ARM_BRANCH24
#define IMAGE_REL_ARM_BRANCH11
#define IMAGE_REL_ARM_TOKEN
#define IMAGE_REL_ARM_GPREL12
#define IMAGE_REL_ARM_GPREL7
#define IMAGE_REL_ARM_BLX24
#define IMAGE_REL_ARM_BLX11
#define IMAGE_REL_ARM_SECTION
#define IMAGE_REL_ARM_SECREL
#define IMAGE_REL_ARM_MOV32A
#define IMAGE_REL_ARM_MOV32
#define IMAGE_REL_ARM_MOV32T
#define IMAGE_REL_THUMB_MOV32
#define IMAGE_REL_ARM_BRANCH20T
#define IMAGE_REL_THUMB_BRANCH20
#define IMAGE_REL_ARM_BRANCH24T
#define IMAGE_REL_THUMB_BRANCH24
#define IMAGE_REL_ARM_BLX23T
#define IMAGE_REL_THUMB_BLX23

#define IMAGE_REL_AM_ABSOLUTE
#define IMAGE_REL_AM_ADDR32
#define IMAGE_REL_AM_ADDR32NB
#define IMAGE_REL_AM_CALL32
#define IMAGE_REL_AM_FUNCINFO
#define IMAGE_REL_AM_REL32_1
#define IMAGE_REL_AM_REL32_2
#define IMAGE_REL_AM_SECREL
#define IMAGE_REL_AM_SECTION
#define IMAGE_REL_AM_TOKEN

#define IMAGE_REL_AMD64_ABSOLUTE
#define IMAGE_REL_AMD64_ADDR64
#define IMAGE_REL_AMD64_ADDR32
#define IMAGE_REL_AMD64_ADDR32NB
#define IMAGE_REL_AMD64_REL32
#define IMAGE_REL_AMD64_REL32_1
#define IMAGE_REL_AMD64_REL32_2
#define IMAGE_REL_AMD64_REL32_3
#define IMAGE_REL_AMD64_REL32_4
#define IMAGE_REL_AMD64_REL32_5
#define IMAGE_REL_AMD64_SECTION
#define IMAGE_REL_AMD64_SECREL
#define IMAGE_REL_AMD64_SECREL7
#define IMAGE_REL_AMD64_TOKEN
#define IMAGE_REL_AMD64_SREL32
#define IMAGE_REL_AMD64_PAIR
#define IMAGE_REL_AMD64_SSPAN32

#define IMAGE_REL_IA64_ABSOLUTE
#define IMAGE_REL_IA64_IMM14
#define IMAGE_REL_IA64_IMM22
#define IMAGE_REL_IA64_IMM64
#define IMAGE_REL_IA64_DIR32
#define IMAGE_REL_IA64_DIR64
#define IMAGE_REL_IA64_PCREL21B
#define IMAGE_REL_IA64_PCREL21M
#define IMAGE_REL_IA64_PCREL21F
#define IMAGE_REL_IA64_GPREL22
#define IMAGE_REL_IA64_LTOFF22
#define IMAGE_REL_IA64_SECTION
#define IMAGE_REL_IA64_SECREL22
#define IMAGE_REL_IA64_SECREL64I
#define IMAGE_REL_IA64_SECREL32

#define IMAGE_REL_IA64_DIR32NB
#define IMAGE_REL_IA64_SREL14
#define IMAGE_REL_IA64_SREL22
#define IMAGE_REL_IA64_SREL32
#define IMAGE_REL_IA64_UREL32
#define IMAGE_REL_IA64_PCREL60X
#define IMAGE_REL_IA64_PCREL60B
#define IMAGE_REL_IA64_PCREL60F
#define IMAGE_REL_IA64_PCREL60I
#define IMAGE_REL_IA64_PCREL60M
#define IMAGE_REL_IA64_IMMGPREL64
#define IMAGE_REL_IA64_TOKEN
#define IMAGE_REL_IA64_GPREL32
#define IMAGE_REL_IA64_ADDEND

#define IMAGE_REL_CEF_ABSOLUTE
#define IMAGE_REL_CEF_ADDR32
#define IMAGE_REL_CEF_ADDR64
#define IMAGE_REL_CEF_ADDR32NB
#define IMAGE_REL_CEF_SECTION
#define IMAGE_REL_CEF_SECREL
#define IMAGE_REL_CEF_TOKEN

#define IMAGE_REL_CEE_ABSOLUTE
#define IMAGE_REL_CEE_ADDR32
#define IMAGE_REL_CEE_ADDR64
#define IMAGE_REL_CEE_ADDR32NB
#define IMAGE_REL_CEE_SECTION
#define IMAGE_REL_CEE_SECREL
#define IMAGE_REL_CEE_TOKEN

#define IMAGE_REL_M32R_ABSOLUTE
#define IMAGE_REL_M32R_ADDR32
#define IMAGE_REL_M32R_ADDR32NB
#define IMAGE_REL_M32R_ADDR24
#define IMAGE_REL_M32R_GPREL16
#define IMAGE_REL_M32R_PCREL24
#define IMAGE_REL_M32R_PCREL16
#define IMAGE_REL_M32R_PCREL8
#define IMAGE_REL_M32R_REFHALF
#define IMAGE_REL_M32R_REFHI
#define IMAGE_REL_M32R_REFLO
#define IMAGE_REL_M32R_PAIR
#define IMAGE_REL_M32R_SECTION
#define IMAGE_REL_M32R_SECREL32
#define IMAGE_REL_M32R_TOKEN

#define IMAGE_REL_EBC_ABSOLUTE
#define IMAGE_REL_EBC_ADDR32NB
#define IMAGE_REL_EBC_REL32
#define IMAGE_REL_EBC_SECTION
#define IMAGE_REL_EBC_SECREL

#define EXT_IMM64
#define INS_IMM64

#define EMARCH_ENC_I17_IMM7B_INST_WORD_X
#define EMARCH_ENC_I17_IMM7B_SIZE_X
#define EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM7B_VAL_POS_X

#define EMARCH_ENC_I17_IMM9D_INST_WORD_X
#define EMARCH_ENC_I17_IMM9D_SIZE_X
#define EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM9D_VAL_POS_X

#define EMARCH_ENC_I17_IMM5C_INST_WORD_X
#define EMARCH_ENC_I17_IMM5C_SIZE_X
#define EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM5C_VAL_POS_X

#define EMARCH_ENC_I17_IC_INST_WORD_X
#define EMARCH_ENC_I17_IC_SIZE_X
#define EMARCH_ENC_I17_IC_INST_WORD_POS_X
#define EMARCH_ENC_I17_IC_VAL_POS_X

#define EMARCH_ENC_I17_IMM41a_INST_WORD_X
#define EMARCH_ENC_I17_IMM41a_SIZE_X
#define EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM41a_VAL_POS_X

#define EMARCH_ENC_I17_IMM41b_INST_WORD_X
#define EMARCH_ENC_I17_IMM41b_SIZE_X
#define EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM41b_VAL_POS_X

#define EMARCH_ENC_I17_IMM41c_INST_WORD_X
#define EMARCH_ENC_I17_IMM41c_SIZE_X
#define EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X
#define EMARCH_ENC_I17_IMM41c_VAL_POS_X

#define EMARCH_ENC_I17_SIGN_INST_WORD_X
#define EMARCH_ENC_I17_SIGN_SIZE_X
#define EMARCH_ENC_I17_SIGN_INST_WORD_POS_X
#define EMARCH_ENC_I17_SIGN_VAL_POS_X

#define X3_OPCODE_INST_WORD_X
#define X3_OPCODE_SIZE_X
#define X3_OPCODE_INST_WORD_POS_X
#define X3_OPCODE_SIGN_VAL_POS_X

#define X3_I_INST_WORD_X
#define X3_I_SIZE_X
#define X3_I_INST_WORD_POS_X
#define X3_I_SIGN_VAL_POS_X

#define X3_D_WH_INST_WORD_X
#define X3_D_WH_SIZE_X
#define X3_D_WH_INST_WORD_POS_X
#define X3_D_WH_SIGN_VAL_POS_X

#define X3_IMM20_INST_WORD_X
#define X3_IMM20_SIZE_X
#define X3_IMM20_INST_WORD_POS_X
#define X3_IMM20_SIGN_VAL_POS_X

#define X3_IMM39_1_INST_WORD_X
#define X3_IMM39_1_SIZE_X
#define X3_IMM39_1_INST_WORD_POS_X
#define X3_IMM39_1_SIGN_VAL_POS_X

#define X3_IMM39_2_INST_WORD_X
#define X3_IMM39_2_SIZE_X
#define X3_IMM39_2_INST_WORD_POS_X
#define X3_IMM39_2_SIGN_VAL_POS_X

#define X3_P_INST_WORD_X
#define X3_P_SIZE_X
#define X3_P_INST_WORD_POS_X
#define X3_P_SIGN_VAL_POS_X

#define X3_TMPLT_INST_WORD_X
#define X3_TMPLT_SIZE_X
#define X3_TMPLT_INST_WORD_POS_X
#define X3_TMPLT_SIGN_VAL_POS_X

#define X3_BTYPE_QP_INST_WORD_X
#define X3_BTYPE_QP_SIZE_X
#define X3_BTYPE_QP_INST_WORD_POS_X
#define X3_BTYPE_QP_INST_VAL_POS_X

#define X3_EMPTY_INST_WORD_X
#define X3_EMPTY_SIZE_X
#define X3_EMPTY_INST_WORD_POS_X
#define X3_EMPTY_INST_VAL_POS_X

    typedef struct _IMAGE_LINENUMBER {
      union {
 DWORD SymbolTableIndex;
 DWORD VirtualAddress;
      } Type;
      WORD Linenumber;
    } IMAGE_LINENUMBER;
    typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

#define IMAGE_SIZEOF_LINENUMBER

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 6367 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _IMAGE_BASE_RELOCATION {
      DWORD VirtualAddress;
      DWORD SizeOfBlock;
    } IMAGE_BASE_RELOCATION;
    typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;

#define IMAGE_SIZEOF_BASE_RELOCATION

#define IMAGE_REL_BASED_ABSOLUTE
#define IMAGE_REL_BASED_HIGH
#define IMAGE_REL_BASED_LOW
#define IMAGE_REL_BASED_HIGHLOW
#define IMAGE_REL_BASED_HIGHADJ
#define IMAGE_REL_BASED_MIPS_JMPADDR
#define IMAGE_REL_BASED_ARM_MOV32
#define IMAGE_REL_BASED_THUMB_MOV32
#define IMAGE_REL_BASED_MIPS_JMPADDR16
#define IMAGE_REL_BASED_IA64_IMM64
#define IMAGE_REL_BASED_DIR64

#define IMAGE_ARCHIVE_START_SIZE
#define IMAGE_ARCHIVE_START
#define IMAGE_ARCHIVE_END
#define IMAGE_ARCHIVE_PAD
#define IMAGE_ARCHIVE_LINKER_MEMBER
#define IMAGE_ARCHIVE_LONGNAMES_MEMBER

    typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
      BYTE Name[16];
      BYTE Date[12];
      BYTE UserID[6];
      BYTE GroupID[6];
      BYTE Mode[8];
      BYTE Size[10];
      BYTE EndHeader[2];
    } IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;

#define IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR

    typedef struct _IMAGE_EXPORT_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Name;
      DWORD Base;
      DWORD NumberOfFunctions;
      DWORD NumberOfNames;
      DWORD AddressOfFunctions;
      DWORD AddressOfNames;
      DWORD AddressOfNameOrdinals;
    } IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;

    typedef struct _IMAGE_IMPORT_BY_NAME {
      WORD Hint;
      BYTE Name[1];
    } IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 6427 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _IMAGE_THUNK_DATA64 {
      union {
 ULONGLONG ForwarderString;
 ULONGLONG Function;
 ULONGLONG Ordinal;
 ULONGLONG AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA64;
    typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 6439 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _IMAGE_THUNK_DATA32 {
      union {
 DWORD ForwarderString;
 DWORD Function;
 DWORD Ordinal;
 DWORD AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA32;
    typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;

#define IMAGE_ORDINAL_FLAG64
#define IMAGE_ORDINAL_FLAG32
#define IMAGE_ORDINAL64
#define IMAGE_ORDINAL32
#define IMAGE_SNAP_BY_ORDINAL64
#define IMAGE_SNAP_BY_ORDINAL32

    typedef void ( *PIMAGE_TLS_CALLBACK)(PVOID DllHandle,DWORD Reason,PVOID Reserved);

    typedef struct _IMAGE_TLS_DIRECTORY64 {
      ULONGLONG StartAddressOfRawData;
      ULONGLONG EndAddressOfRawData;
      ULONGLONG AddressOfIndex;
      ULONGLONG AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY64;
    typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

    typedef struct _IMAGE_TLS_DIRECTORY32 {
      DWORD StartAddressOfRawData;
      DWORD EndAddressOfRawData;
      DWORD AddressOfIndex;
      DWORD AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY32;
    typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;


#define IMAGE_ORDINAL_FLAG
#define IMAGE_ORDINAL
    typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
    typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;
#define IMAGE_SNAP_BY_ORDINAL
    typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
    typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
# 6497 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    typedef struct _IMAGE_IMPORT_DESCRIPTOR {
      __extension__ union {
 DWORD Characteristics;
 DWORD OriginalFirstThunk;
      } ;
      DWORD TimeDateStamp;

      DWORD ForwarderChain;
      DWORD Name;
      DWORD FirstThunk;
    } IMAGE_IMPORT_DESCRIPTOR;
    typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD NumberOfModuleForwarderRefs;
    } IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_FORWARDER_REF {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD Reserved;
    } IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;

    typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
      union {
 DWORD AllAttributes;
 __extension__ struct {
   DWORD RvaBased : 1;
   DWORD ReservedAttributes : 31;
 };
      } Attributes;
      DWORD DllNameRVA;
      DWORD ModuleHandleRVA;
      DWORD ImportAddressTableRVA;
      DWORD ImportNameTableRVA;
      DWORD BoundImportAddressTableRVA;
      DWORD UnloadInformationTableRVA;
      DWORD TimeDateStamp;
    } IMAGE_DELAYLOAD_DESCRIPTOR,*PIMAGE_DELAYLOAD_DESCRIPTOR;
    typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

    typedef struct _IMAGE_RESOURCE_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      WORD NumberOfNamedEntries;
      WORD NumberOfIdEntries;
    } IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;

#define IMAGE_RESOURCE_NAME_IS_STRING
#define IMAGE_RESOURCE_DATA_IS_DIRECTORY

    typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
      __extension__ union {
 __extension__ struct {
   DWORD NameOffset:31;
   DWORD NameIsString:1;
 } ;
 DWORD Name;
 WORD Id;
      } ;
      __extension__ union {
 DWORD OffsetToData;
 __extension__ struct {
   DWORD OffsetToDirectory:31;
   DWORD DataIsDirectory:1;
 } ;
      } ;
    } IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;

    typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
      WORD Length;
      CHAR NameString[1];
    } IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;

    typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
      WORD Length;
      WCHAR NameString[1];
    } IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;

    typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
      DWORD OffsetToData;
      DWORD Size;
      DWORD CodePage;
      DWORD Reserved;
    } IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      DWORD DeCommitFreeBlockThreshold;
      DWORD DeCommitTotalFreeThreshold;
      DWORD LockPrefixTable;
      DWORD MaximumAllocationSize;
      DWORD VirtualMemoryThreshold;
      DWORD ProcessHeapFlags;
      DWORD ProcessAffinityMask;
      WORD CSDVersion;
      WORD Reserved1;
      DWORD EditList;
      DWORD SecurityCookie;
      DWORD SEHandlerTable;
      DWORD SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY32,*PIMAGE_LOAD_CONFIG_DIRECTORY32;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      ULONGLONG DeCommitFreeBlockThreshold;
      ULONGLONG DeCommitTotalFreeThreshold;
      ULONGLONG LockPrefixTable;
      ULONGLONG MaximumAllocationSize;
      ULONGLONG VirtualMemoryThreshold;
      ULONGLONG ProcessAffinityMask;
      DWORD ProcessHeapFlags;
      WORD CSDVersion;
      WORD Reserved1;
      ULONGLONG EditList;
      ULONGLONG SecurityCookie;
      ULONGLONG SEHandlerTable;
      ULONGLONG SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY64,*PIMAGE_LOAD_CONFIG_DIRECTORY64;


    typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
    typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;





    typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
      DWORD FuncStart;
      DWORD PrologLen : 8;
      DWORD FuncLen : 22;
      DWORD ThirtyTwoBit : 1;
      DWORD ExceptionFlag : 1;
    } IMAGE_CE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
      ULONGLONG BeginAddress;
      ULONGLONG EndAddress;
      ULONGLONG ExceptionHandler;
      ULONGLONG HandlerData;
      ULONGLONG PrologEndAddress;
    } IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      DWORD ExceptionHandler;
      DWORD HandlerData;
      DWORD PrologEndAddress;
    } IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      __extension__ union {
 DWORD UnwindData;
 __extension__ struct {
   DWORD Flag : 2;
   DWORD FunctionLength : 11;
   DWORD Ret : 2;
   DWORD H : 1;
   DWORD Reg : 3;
   DWORD R : 1;
   DWORD L : 1;
   DWORD C : 1;
   DWORD StackAdjust : 10;
 } ;
      } ;
    } IMAGE_ARM_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      __extension__ union {
 DWORD UnwindInfoAddress;
 DWORD UnwindData;
      } ;
    } _IMAGE_RUNTIME_FUNCTION_ENTRY,*_PIMAGE_RUNTIME_FUNCTION_ENTRY;

    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
# 6707 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;


    typedef struct _IMAGE_DEBUG_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Type;
      DWORD SizeOfData;
      DWORD AddressOfRawData;
      DWORD PointerToRawData;
    } IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;

#define IMAGE_DEBUG_TYPE_UNKNOWN
#define IMAGE_DEBUG_TYPE_COFF
#define IMAGE_DEBUG_TYPE_CODEVIEW
#define IMAGE_DEBUG_TYPE_FPO
#define IMAGE_DEBUG_TYPE_MISC
#define IMAGE_DEBUG_TYPE_EXCEPTION
#define IMAGE_DEBUG_TYPE_FIXUP
#define IMAGE_DEBUG_TYPE_OMAP_TO_SRC
#define IMAGE_DEBUG_TYPE_OMAP_FROM_SRC
#define IMAGE_DEBUG_TYPE_BORLAND
#define IMAGE_DEBUG_TYPE_RESERVED10
#define IMAGE_DEBUG_TYPE_CLSID

    typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
      DWORD NumberOfSymbols;
      DWORD LvaToFirstSymbol;
      DWORD NumberOfLinenumbers;
      DWORD LvaToFirstLinenumber;
      DWORD RvaToFirstByteOfCode;
      DWORD RvaToLastByteOfCode;
      DWORD RvaToFirstByteOfData;
      DWORD RvaToLastByteOfData;
    } IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;

#define FRAME_FPO
#define FRAME_TRAP
#define FRAME_TSS
#define FRAME_NONFPO

    typedef struct _FPO_DATA {
      DWORD ulOffStart;
      DWORD cbProcSize;
      DWORD cdwLocals;
      WORD cdwParams;
      WORD cbProlog : 8;
      WORD cbRegs : 3;
      WORD fHasSEH : 1;
      WORD fUseBP : 1;
      WORD reserved : 1;
      WORD cbFrame : 2;
    } FPO_DATA,*PFPO_DATA;
#define SIZEOF_RFPO_DATA

#define IMAGE_DEBUG_MISC_EXENAME

    typedef struct _IMAGE_DEBUG_MISC {
      DWORD DataType;
      DWORD Length;
      BOOLEAN Unicode;
      BYTE Reserved[3];
      BYTE Data[1];
    } IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;

    typedef struct _IMAGE_FUNCTION_ENTRY {
      DWORD StartingAddress;
      DWORD EndingAddress;
      DWORD EndOfPrologue;
    } IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;

    typedef struct _IMAGE_FUNCTION_ENTRY64 {
      ULONGLONG StartingAddress;
      ULONGLONG EndingAddress;
      __extension__ union {
 ULONGLONG EndOfPrologue;
 ULONGLONG UnwindInfoAddress;
      } ;
    } IMAGE_FUNCTION_ENTRY64,*PIMAGE_FUNCTION_ENTRY64;

    typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
      WORD Signature;
      WORD Flags;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD ImageBase;
      DWORD SizeOfImage;
      DWORD NumberOfSections;
      DWORD ExportedNamesSize;
      DWORD DebugDirectorySize;
      DWORD SectionAlignment;
      DWORD Reserved[2];
    } IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;

    typedef struct _NON_PAGED_DEBUG_INFO {
      WORD Signature;
      WORD Flags;
      DWORD Size;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD SizeOfImage;
      ULONGLONG ImageBase;
    } NON_PAGED_DEBUG_INFO,*PNON_PAGED_DEBUG_INFO;

#define IMAGE_SEPARATE_DEBUG_SIGNATURE
#define NON_PAGED_DEBUG_SIGNATURE

#define IMAGE_SEPARATE_DEBUG_FLAGS_MASK
#define IMAGE_SEPARATE_DEBUG_MISMATCH

    typedef struct _ImageArchitectureHeader {
      unsigned int AmaskValue: 1;
      int Adummy1 : 7;
      unsigned int AmaskShift : 8;
      int Adummy2 : 16;
      DWORD FirstEntryRVA;
    } IMAGE_ARCHITECTURE_HEADER,*PIMAGE_ARCHITECTURE_HEADER;

    typedef struct _ImageArchitectureEntry {
      DWORD FixupInstRVA;
      DWORD NewInst;
    } IMAGE_ARCHITECTURE_ENTRY,*PIMAGE_ARCHITECTURE_ENTRY;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 6837 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

#define IMPORT_OBJECT_HDR_SIG2

    typedef struct IMPORT_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      DWORD SizeOfData;
      __extension__ union {
 WORD Ordinal;
 WORD Hint;
      };
      WORD Type : 2;
      WORD NameType : 3;
      WORD Reserved : 11;
    } IMPORT_OBJECT_HEADER;

    typedef enum IMPORT_OBJECT_TYPE {
      IMPORT_OBJECT_CODE = 0,IMPORT_OBJECT_DATA = 1,IMPORT_OBJECT_CONST = 2
    } IMPORT_OBJECT_TYPE;

    typedef enum IMPORT_OBJECT_NAME_TYPE {
      IMPORT_OBJECT_ORDINAL = 0,IMPORT_OBJECT_NAME = 1,IMPORT_OBJECT_NAME_NO_PREFIX = 2,IMPORT_OBJECT_NAME_UNDECORATE = 3
    } IMPORT_OBJECT_NAME_TYPE;


#define __IMAGE_COR20_HEADER_DEFINED__
    typedef enum ReplacesCorHdrNumericDefines {
      COMIMAGE_FLAGS_ILONLY = 0x00000001,COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
      COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,COR_VERSION_MAJOR_V2 = 2,
      COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,COR_VERSION_MINOR = 0,COR_DELETED_NAME_LENGTH = 8,COR_VTABLEGAP_NAME_LENGTH = 8,
      NATIVE_TYPE_MAX_CB = 1,COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE= 0xFF,IMAGE_COR_MIH_METHODRVA = 0x01,IMAGE_COR_MIH_EHRVA = 0x02,
      IMAGE_COR_MIH_BASICBLOCK = 0x08,COR_VTABLE_32BIT =0x01,COR_VTABLE_64BIT =0x02,COR_VTABLE_FROM_UNMANAGED = 0x04,
      COR_VTABLE_CALL_MOST_DERIVED = 0x10,IMAGE_COR_EATJ_THUNK_SIZE = 32,MAX_CLASS_NAME =1024,MAX_PACKAGE_NAME = 1024
    } ReplacesCorHdrNumericDefines;

    typedef struct IMAGE_COR20_HEADER {
      DWORD cb;
      WORD MajorRuntimeVersion;
      WORD MinorRuntimeVersion;
      IMAGE_DATA_DIRECTORY MetaData;
      DWORD Flags;
      __extension__ union {
 DWORD EntryPointToken;
 DWORD EntryPointRVA;
      } ;
      IMAGE_DATA_DIRECTORY Resources;
      IMAGE_DATA_DIRECTORY StrongNameSignature;
      IMAGE_DATA_DIRECTORY CodeManagerTable;
      IMAGE_DATA_DIRECTORY VTableFixups;
      IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
      IMAGE_DATA_DIRECTORY ManagedNativeHeader;
    } IMAGE_COR20_HEADER,*PIMAGE_COR20_HEADER;



    __attribute__((dllimport)) WORD RtlCaptureStackBackTrace (DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash);
    __attribute__((dllimport)) void RtlCaptureContext (PCONTEXT ContextRecord);
    __attribute__((dllimport)) SIZE_T RtlCompareMemory (const void *Source1, const void *Source2, SIZE_T Length);






    __attribute__((dllimport)) BOOLEAN __attribute__((__cdecl__)) RtlAddFunctionTable (PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress);
    __attribute__((dllimport)) BOOLEAN __attribute__((__cdecl__)) RtlDeleteFunctionTable (PRUNTIME_FUNCTION FunctionTable);
    __attribute__((dllimport)) BOOLEAN __attribute__((__cdecl__)) RtlInstallFunctionTableCallback (DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll);
    __attribute__((dllimport)) void __attribute__((__cdecl__)) RtlRestoreContext (PCONTEXT ContextRecord, struct _EXCEPTION_RECORD *ExceptionRecord);
    __attribute__((dllimport)) PEXCEPTION_ROUTINE RtlVirtualUnwind (DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers);
# 6933 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    __attribute__((dllimport)) void RtlUnwind (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
    __attribute__((dllimport)) PVOID RtlPcToFileHeader (PVOID PcValue, PVOID *BaseOfImage);

    __attribute__((dllimport)) PRUNTIME_FUNCTION RtlLookupFunctionEntry (DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable);
    __attribute__((dllimport)) void RtlUnwindEx (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);
# 6952 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define _SLIST_HEADER_


    typedef struct __attribute__ ((__aligned__ (16))) _SLIST_ENTRY {
      struct _SLIST_ENTRY *Next;
    } SLIST_ENTRY,*PSLIST_ENTRY;

    typedef union __attribute__ ((__aligned__ (16))) _SLIST_HEADER {
      __extension__ struct {
 ULONGLONG Alignment;
 ULONGLONG Region;
      } ;
      struct {
 ULONGLONG Depth:16;
 ULONGLONG Sequence:9;
 ULONGLONG NextEntry:39;
 ULONGLONG HeaderType:1;
 ULONGLONG Init:1;
 ULONGLONG Reserved:59;
 ULONGLONG Region:3;
      } Header8;
      struct {
 ULONGLONG Depth:16;
 ULONGLONG Sequence:48;
 ULONGLONG HeaderType:1;
 ULONGLONG Reserved:3;
 ULONGLONG NextEntry:60;
      } HeaderX64;
    } SLIST_HEADER,*PSLIST_HEADER;
# 6997 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    __attribute__((dllimport)) void RtlInitializeSListHead (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY RtlFirstEntrySList (const SLIST_HEADER *ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY RtlInterlockedPopEntrySList (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY RtlInterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
    __attribute__((dllimport)) PSLIST_ENTRY RtlInterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count);
    __attribute__((dllimport)) PSLIST_ENTRY RtlInterlockedFlushSList (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) WORD RtlQueryDepthSList (PSLIST_HEADER ListHead);



#define _RTL_RUN_ONCE_DEF

typedef struct _RTL_RUN_ONCE { PVOID Ptr; } RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef DWORD ( *PRTL_RUN_ONCE_INIT_FN)(PRTL_RUN_ONCE, PVOID, PVOID *);

#define RTL_RUN_ONCE_INIT
#define RTL_RUN_ONCE_CHECK_ONLY
#define RTL_RUN_ONCE_ASYNC
#define RTL_RUN_ONCE_INIT_FAILED
#define RTL_RUN_ONCE_CTX_RESERVED_BITS


  typedef struct _RTL_BARRIER {
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
  } RTL_BARRIER,*PRTL_BARRIER;

#define FAST_FAIL_LEGACY_GS_VIOLATION
#define FAST_FAIL_VTGUARD_CHECK_FAILURE
#define FAST_FAIL_STACK_COOKIE_CHECK_FAILURE
#define FAST_FAIL_CORRUPT_LIST_ENTRY
#define FAST_FAIL_INCORRECT_STACK
#define FAST_FAIL_INVALID_ARG
#define FAST_FAIL_GS_COOKIE_INIT
#define FAST_FAIL_FATAL_APP_EXIT
#define FAST_FAIL_RANGE_CHECK_FAILURE
#define FAST_FAIL_UNSAFE_REGISTRY_ACCESS
#define FAST_FAIL_INVALID_FAST_FAIL_CODE




#define HEAP_NO_SERIALIZE
#define HEAP_GROWABLE
#define HEAP_GENERATE_EXCEPTIONS
#define HEAP_ZERO_MEMORY
#define HEAP_REALLOC_IN_PLACE_ONLY
#define HEAP_TAIL_CHECKING_ENABLED
#define HEAP_FREE_CHECKING_ENABLED
#define HEAP_DISABLE_COALESCE_ON_FREE
#define HEAP_CREATE_ALIGN_16
#define HEAP_CREATE_ENABLE_TRACING
#define HEAP_CREATE_ENABLE_EXECUTE
#define HEAP_MAXIMUM_TAG
#define HEAP_PSEUDO_TAG_FLAG
#define HEAP_TAG_SHIFT


#define HEAP_MAKE_TAG_FLAGS


#define IS_TEXT_UNICODE_ASCII16
#define IS_TEXT_UNICODE_REVERSE_ASCII16

#define IS_TEXT_UNICODE_STATISTICS
#define IS_TEXT_UNICODE_REVERSE_STATISTICS

#define IS_TEXT_UNICODE_CONTROLS
#define IS_TEXT_UNICODE_REVERSE_CONTROLS

#define IS_TEXT_UNICODE_SIGNATURE
#define IS_TEXT_UNICODE_REVERSE_SIGNATURE

#define IS_TEXT_UNICODE_ILLEGAL_CHARS
#define IS_TEXT_UNICODE_ODD_LENGTH
#define IS_TEXT_UNICODE_DBCS_LEADBYTE
#define IS_TEXT_UNICODE_NULL_BYTES

#define IS_TEXT_UNICODE_UNICODE_MASK
#define IS_TEXT_UNICODE_REVERSE_MASK
#define IS_TEXT_UNICODE_NOT_UNICODE_MASK
#define IS_TEXT_UNICODE_NOT_ASCII_MASK

#define COMPRESSION_FORMAT_NONE
#define COMPRESSION_FORMAT_DEFAULT
#define COMPRESSION_FORMAT_LZNT1
#define COMPRESSION_FORMAT_XPRESS
#define COMPRESSION_FORMAT_XPRESS_HUFF
#define COMPRESSION_ENGINE_STANDARD
#define COMPRESSION_ENGINE_MAXIMUM
#define COMPRESSION_ENGINE_HIBER
# 7105 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define RtlEqualMemory
#define RtlMoveMemory
#define RtlCopyMemory
#define RtlFillMemory
#define RtlZeroMemory

    PVOID RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt);
# 7128 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    typedef struct _MESSAGE_RESOURCE_ENTRY {
      WORD Length;
      WORD Flags;
      BYTE Text[1];
    } MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;

#define SEF_DACL_AUTO_INHERIT
#define SEF_SACL_AUTO_INHERIT
#define SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT
#define SEF_AVOID_PRIVILEGE_CHECK
#define SEF_AVOID_OWNER_CHECK
#define SEF_DEFAULT_OWNER_FROM_PARENT
#define SEF_DEFAULT_GROUP_FROM_PARENT
#define SEF_MACL_NO_WRITE_UP
#define SEF_MACL_NO_READ_UP
#define SEF_MACL_NO_EXECUTE_UP
#define SEF_AVOID_OWNER_RESTRICTION

#define SEF_MACL_VALID_FLAGS

#define MESSAGE_RESOURCE_UNICODE

    typedef struct _MESSAGE_RESOURCE_BLOCK {
      DWORD LowId;
      DWORD HighId;
      DWORD OffsetToEntries;
    } MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;

    typedef struct _MESSAGE_RESOURCE_DATA {
      DWORD NumberOfBlocks;
      MESSAGE_RESOURCE_BLOCK Blocks[1];
    } MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;

    typedef struct _OSVERSIONINFOA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
    } OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;

    typedef struct _OSVERSIONINFOW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
    } OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW,RTL_OSVERSIONINFOW,*PRTL_OSVERSIONINFOW;

    typedef OSVERSIONINFOA OSVERSIONINFO;
    typedef POSVERSIONINFOA POSVERSIONINFO;
    typedef LPOSVERSIONINFOA LPOSVERSIONINFO;

    typedef struct _OSVERSIONINFOEXA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXA,*POSVERSIONINFOEXA,*LPOSVERSIONINFOEXA;

    typedef struct _OSVERSIONINFOEXW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXW,*POSVERSIONINFOEXW,*LPOSVERSIONINFOEXW,RTL_OSVERSIONINFOEXW,*PRTL_OSVERSIONINFOEXW;

    typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
    typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
    typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;

#define VER_EQUAL
#define VER_GREATER
#define VER_GREATER_EQUAL
#define VER_LESS
#define VER_LESS_EQUAL
#define VER_AND
#define VER_OR

#define VER_CONDITION_MASK
#define VER_NUM_BITS_PER_CONDITION_MASK

#define VER_MINORVERSION
#define VER_MAJORVERSION
#define VER_BUILDNUMBER
#define VER_PLATFORMID
#define VER_SERVICEPACKMINOR
#define VER_SERVICEPACKMAJOR
#define VER_SUITENAME
#define VER_PRODUCT_TYPE

#define VER_NT_WORKSTATION
#define VER_NT_DOMAIN_CONTROLLER
#define VER_NT_SERVER

#define VER_PLATFORM_WIN32s
#define VER_PLATFORM_WIN32_WINDOWS
#define VER_PLATFORM_WIN32_NT



    __attribute__((dllimport)) ULONGLONG VerSetConditionMask (ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);


#define VER_SET_CONDITION






#define RTL_UMS_VERSION

    typedef enum _RTL_UMS_THREAD_INFO_CLASS {
      UmsThreadInvalidInfoClass = 0,
      UmsThreadUserContext,
      UmsThreadPriority,
      UmsThreadAffinity,
      UmsThreadTeb,
      UmsThreadIsSuspended,
      UmsThreadIsTerminated,
      UmsThreadMaxInfoClass
    } RTL_UMS_THREAD_INFO_CLASS,*PRTL_UMS_THREAD_INFO_CLASS;

    typedef enum _RTL_UMS_SCHEDULER_REASON {
      UmsSchedulerStartup = 0,
      UmsSchedulerThreadBlocked,
      UmsSchedulerThreadYield,
    } RTL_UMS_SCHEDULER_REASON,*PRTL_UMS_SCHEDULER_REASON;

    typedef void RTL_UMS_SCHEDULER_ENTRY_POINT (RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam);
    typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
# 7295 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
    typedef struct _RTL_CRITICAL_SECTION_DEBUG {
      WORD Type;
      WORD CreatorBackTraceIndex;
      struct _RTL_CRITICAL_SECTION *CriticalSection;
      LIST_ENTRY ProcessLocksList;
      DWORD EntryCount;
      DWORD ContentionCount;
      DWORD Flags;
      WORD CreatorBackTraceIndexHigh;
      WORD SpareWORD;
    } RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG,RTL_RESOURCE_DEBUG,*PRTL_RESOURCE_DEBUG;

#define RTL_CRITSECT_TYPE
#define RTL_RESOURCE_TYPE

#define RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO
#define RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN
#define RTL_CRITICAL_SECTION_FLAG_STATIC_INIT
#define RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE
#define RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO
#define RTL_CRITICAL_SECTION_ALL_FLAG_BITS

#define RTL_CRITICAL_SECTION_FLAG_RESERVED

#define RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 7322 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
    typedef struct _RTL_CRITICAL_SECTION {
      PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
      LONG LockCount;
      LONG RecursionCount;
      HANDLE OwningThread;
      HANDLE LockSemaphore;
      ULONG_PTR SpinCount;
    } RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 7331 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

    typedef struct _RTL_SRWLOCK { PVOID Ptr; } RTL_SRWLOCK,*PRTL_SRWLOCK;
    typedef struct _RTL_CONDITION_VARIABLE { PVOID Ptr; } RTL_CONDITION_VARIABLE,*PRTL_CONDITION_VARIABLE;

#define RTL_SRWLOCK_INIT
#define RTL_CONDITION_VARIABLE_INIT

#define RTL_CONDITION_VARIABLE_LOCKMODE_SHARED

    typedef void ( *PAPCFUNC) (ULONG_PTR Parameter);
    typedef LONG ( *PVECTORED_EXCEPTION_HANDLER) (struct _EXCEPTION_POINTERS *ExceptionInfo);

    typedef enum _HEAP_INFORMATION_CLASS {
      HeapCompatibilityInformation,
      HeapEnableTerminationOnCorruption
    } HEAP_INFORMATION_CLASS;

    typedef void ( *WORKERCALLBACKFUNC) (PVOID);
    typedef void ( *APC_CALLBACK_FUNCTION) (DWORD, PVOID, PVOID);
    typedef void ( *WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN);
    typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
    typedef void ( *PFLS_CALLBACK_FUNCTION) (PVOID lpFlsData);
    typedef BOOLEAN ( *PSECURE_MEMORY_CACHE_CALLBACK) (PVOID Addr, SIZE_T Range);

#define WT_EXECUTEDEFAULT
#define WT_EXECUTEINIOTHREAD
#define WT_EXECUTEINUITHREAD
#define WT_EXECUTEINWAITTHREAD
#define WT_EXECUTEONLYONCE
#define WT_EXECUTEINTIMERTHREAD
#define WT_EXECUTELONGFUNCTION
#define WT_EXECUTEINPERSISTENTIOTHREAD
#define WT_EXECUTEINPERSISTENTTHREAD
#define WT_TRANSFER_IMPERSONATION

#define WT_SET_MAX_THREADPOOL_THREADS

#define WT_EXECUTEDELETEWAIT
#define WT_EXECUTEINLONGTHREAD

    typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
      ActivationContextBasicInformation = 1,
      ActivationContextDetailedInformation = 2,
      AssemblyDetailedInformationInActivationContext = 3,
      FileInformationInAssemblyOfAssemblyInActivationContext = 4,
      RunlevelInformationInActivationContext = 5,
      CompatibilityInformationInActivationContext = 6,
      ActivationContextManifestResourceName = 7,
      MaxActivationContextInfoClass,
      AssemblyDetailedInformationInActivationContxt = 3,
      FileInformationInAssemblyOfAssemblyInActivationContxt = 4
    } ACTIVATION_CONTEXT_INFO_CLASS;

    typedef enum {
      ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
      ACTCTX_RUN_LEVEL_AS_INVOKER,
      ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
      ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
      ACTCTX_RUN_LEVEL_NUMBERS
    } ACTCTX_REQUESTED_RUN_LEVEL;

    typedef enum {
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
    } ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

    typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
      DWORD ulAssemblyIndex;
      DWORD ulFileIndexInAssembly;
    } ACTIVATION_CONTEXT_QUERY_INDEX,*PACTIVATION_CONTEXT_QUERY_INDEX;

    typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulFilenameLength;
      DWORD ulPathLength;
      PCWSTR lpFileName;
      PCWSTR lpFilePath;
    } ASSEMBLY_FILE_DETAILED_INFORMATION,*PASSEMBLY_FILE_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulEncodedAssemblyIdentityLength;
      DWORD ulManifestPathType;
      DWORD ulManifestPathLength;
      LARGE_INTEGER liManifestLastWriteTime;
      DWORD ulPolicyPathType;
      DWORD ulPolicyPathLength;
      LARGE_INTEGER liPolicyLastWriteTime;
      DWORD ulMetadataSatelliteRosterIndex;
      DWORD ulManifestVersionMajor;
      DWORD ulManifestVersionMinor;
      DWORD ulPolicyVersionMajor;
      DWORD ulPolicyVersionMinor;
      DWORD ulAssemblyDirectoryNameLength;
      PCWSTR lpAssemblyEncodedAssemblyIdentity;
      PCWSTR lpAssemblyManifestPath;
      PCWSTR lpAssemblyPolicyPath;
      PCWSTR lpAssemblyDirectoryName;
      DWORD ulFileCount;
    } ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
      DWORD ulFlags;
      ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
      DWORD UiAccess;
    } ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION,*PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

    typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
      GUID Id;
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    } COMPATIBILITY_CONTEXT_ELEMENT,*PCOMPATIBILITY_CONTEXT_ELEMENT;



    typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
      DWORD ElementCount;
      COMPATIBILITY_CONTEXT_ELEMENT Elements[];
    } ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION,*PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#define MAX_SUPPORTED_OS_NUM

    typedef struct _SUPPORTED_OS_INFO {
      WORD OsCount;
      WORD MitigationExist;
      WORD OsList[(4)];
    } SUPPORTED_OS_INFO,*PSUPPORTED_OS_INFO;

    typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
      DWORD dwFlags;
      DWORD ulFormatVersion;
      DWORD ulAssemblyCount;
      DWORD ulRootManifestPathType;
      DWORD ulRootManifestPathChars;
      DWORD ulRootConfigurationPathType;
      DWORD ulRootConfigurationPathChars;
      DWORD ulAppDirPathType;
      DWORD ulAppDirPathChars;
      PCWSTR lpRootManifestPath;
      PCWSTR lpRootConfigurationPath;
      PCWSTR lpAppDirPath;
    } ACTIVATION_CONTEXT_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_DETAILED_INFORMATION;

    typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
    typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
    typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

#define ACTIVATIONCONTEXTINFOCLASS

#define ACTIVATION_CONTEXT_PATH_TYPE_NONE
#define ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE
#define ACTIVATION_CONTEXT_PATH_TYPE_URL
#define ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF

#define _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION
#define ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION
#define PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION
#define PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION
#define INVALID_OS_COUNT

#define CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID

    typedef void ( *RTL_VERIFIER_DLL_LOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void ( *RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void ( *RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK)(PVOID AllocationBase,SIZE_T AllocationSize);

    typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {
      PCHAR ThunkName;
      PVOID ThunkOldAddress;
      PVOID ThunkNewAddress;
    } RTL_VERIFIER_THUNK_DESCRIPTOR,*PRTL_VERIFIER_THUNK_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {
      PWCHAR DllName;
      DWORD DllFlags;
      PVOID DllAddress;
      PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
    } RTL_VERIFIER_DLL_DESCRIPTOR,*PRTL_VERIFIER_DLL_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {
      DWORD Length;
      PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
      RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
      RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
      PWSTR VerifierImage;
      DWORD VerifierFlags;
      DWORD VerifierDebug;
      PVOID RtlpGetStackTraceAddress;
      PVOID RtlpDebugPageHeapCreate;
      PVOID RtlpDebugPageHeapDestroy;
      RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
    } RTL_VERIFIER_PROVIDER_DESCRIPTOR,*PRTL_VERIFIER_PROVIDER_DESCRIPTOR;

#define RTL_VRF_FLG_FULL_PAGE_HEAP
#define RTL_VRF_FLG_RESERVED_DONOTUSE
#define RTL_VRF_FLG_HANDLE_CHECKS
#define RTL_VRF_FLG_STACK_CHECKS
#define RTL_VRF_FLG_APPCOMPAT_CHECKS
#define RTL_VRF_FLG_TLS_CHECKS
#define RTL_VRF_FLG_DIRTY_STACKS
#define RTL_VRF_FLG_RPC_CHECKS
#define RTL_VRF_FLG_COM_CHECKS
#define RTL_VRF_FLG_DANGEROUS_APIS
#define RTL_VRF_FLG_RACE_CHECKS
#define RTL_VRF_FLG_DEADLOCK_CHECKS
#define RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS
#define RTL_VRF_FLG_VIRTUAL_MEM_CHECKS
#define RTL_VRF_FLG_ENABLE_LOGGING
#define RTL_VRF_FLG_FAST_FILL_HEAP
#define RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING
#define RTL_VRF_FLG_ENABLED_SYSTEM_WIDE
#define RTL_VRF_FLG_MISCELLANEOUS_CHECKS
#define RTL_VRF_FLG_LOCK_CHECKS

#define APPLICATION_VERIFIER_INTERNAL_ERROR
#define APPLICATION_VERIFIER_INTERNAL_WARNING
#define APPLICATION_VERIFIER_NO_BREAK
#define APPLICATION_VERIFIER_CONTINUABLE_BREAK

#define APPLICATION_VERIFIER_UNKNOWN_ERROR
#define APPLICATION_VERIFIER_ACCESS_VIOLATION
#define APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS
#define APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST
#define APPLICATION_VERIFIER_BAD_HEAP_HANDLE
#define APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE
#define APPLICATION_VERIFIER_DOUBLE_FREE
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK
#define APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP
#define APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_HEADER
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_PROBING
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_HEADER
#define APPLICATION_VERIFIER_CORRUPTED_FREED_HEAP_BLOCK
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_SUFFIX
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_START_STAMP
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_END_STAMP
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_PREFIX
#define APPLICATION_VERIFIER_FIRST_CHANCE_ACCESS_VIOLATION
#define APPLICATION_VERIFIER_CORRUPTED_HEAP_LIST

#define APPLICATION_VERIFIER_TERMINATE_THREAD_CALL
#define APPLICATION_VERIFIER_STACK_OVERFLOW
#define APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL

#define APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK
#define APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL
#define APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP
#define APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE
#define APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY
#define APPLICATION_VERIFIER_LOCK_CORRUPTED
#define APPLICATION_VERIFIER_LOCK_INVALID_OWNER
#define APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT
#define APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT
#define APPLICATION_VERIFIER_LOCK_OVER_RELEASED
#define APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED
#define APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED
#define APPLICATION_VERIFIER_LOCK_IN_FREED_VMEM
#define APPLICATION_VERIFIER_LOCK_IN_UNMAPPED_MEM
#define APPLICATION_VERIFIER_THREAD_NOT_LOCK_OWNER

#define APPLICATION_VERIFIER_INVALID_HANDLE
#define APPLICATION_VERIFIER_INVALID_TLS_VALUE
#define APPLICATION_VERIFIER_INCORRECT_WAIT_CALL
#define APPLICATION_VERIFIER_NULL_HANDLE
#define APPLICATION_VERIFIER_WAIT_IN_DLLMAIN

#define APPLICATION_VERIFIER_COM_ERROR
#define APPLICATION_VERIFIER_COM_API_IN_DLLMAIN
#define APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION
#define APPLICATION_VERIFIER_COM_UNBALANCED_COINIT
#define APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT
#define APPLICATION_VERIFIER_COM_UNBALANCED_SWC
#define APPLICATION_VERIFIER_COM_NULL_DACL
#define APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION
#define APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER
#define APPLICATION_VERIFIER_COM_SMUGGLED_PROXY
#define APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL
#define APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL
#define APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY
#define APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL
#define APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY
#define APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL
#define APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL

#define APPLICATION_VERIFIER_RPC_ERROR

#define APPLICATION_VERIFIER_INVALID_FREEMEM
#define APPLICATION_VERIFIER_INVALID_ALLOCMEM
#define APPLICATION_VERIFIER_INVALID_MAPVIEW
#define APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS
#define APPLICATION_VERIFIER_PROBE_FREE_MEM
#define APPLICATION_VERIFIER_PROBE_GUARD_PAGE
#define APPLICATION_VERIFIER_PROBE_NULL
#define APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE
#define APPLICATION_VERIFIER_SIZE_HEAP_UNEXPECTED_EXCEPTION

#define VERIFIER_STOP

    void RtlApplicationVerifierStop(ULONG_PTR Code,PSTR Message,ULONG_PTR Param1,PSTR Description1,ULONG_PTR Param2,PSTR Description2,ULONG_PTR Param3,PSTR Description3,ULONG_PTR Param4,PSTR Description4);
    __attribute__((dllimport)) DWORD RtlSetHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
    __attribute__((dllimport)) DWORD RtlQueryHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
    DWORD RtlMultipleAllocateHeap(PVOID HeapHandle,DWORD Flags,SIZE_T Size,DWORD Count,PVOID *Array);
    DWORD RtlMultipleFreeHeap(PVOID HeapHandle,DWORD Flags,DWORD Count,PVOID *Array);

    typedef struct _HARDWARE_COUNTER_DATA {
      HARDWARE_COUNTER_TYPE Type;
      DWORD Reserved;
      DWORD64 Value;
    } HARDWARE_COUNTER_DATA,*PHARDWARE_COUNTER_DATA;

    typedef struct _PERFORMANCE_DATA {
      WORD Size;
      BYTE Version;
      BYTE HwCountersCount;
      DWORD ContextSwitchCount;
      DWORD64 WaitReasonBitMap;
      DWORD64 CycleTime;
      DWORD RetryCount;
      DWORD Reserved;
      HARDWARE_COUNTER_DATA HwCounters[16];
    } PERFORMANCE_DATA,*PPERFORMANCE_DATA;

#define PERFORMANCE_DATA_VERSION

#define READ_THREAD_PROFILING_FLAG_DISPATCHING
#define READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS

#define DLL_PROCESS_ATTACH
#define DLL_THREAD_ATTACH
#define DLL_THREAD_DETACH
#define DLL_PROCESS_DETACH
#define DLL_PROCESS_VERIFIER

#define EVENTLOG_SEQUENTIAL_READ
#define EVENTLOG_SEEK_READ
#define EVENTLOG_FORWARDS_READ
#define EVENTLOG_BACKWARDS_READ

#define EVENTLOG_SUCCESS
#define EVENTLOG_ERROR_TYPE
#define EVENTLOG_WARNING_TYPE
#define EVENTLOG_INFORMATION_TYPE
#define EVENTLOG_AUDIT_SUCCESS
#define EVENTLOG_AUDIT_FAILURE

#define EVENTLOG_START_PAIRED_EVENT
#define EVENTLOG_END_PAIRED_EVENT
#define EVENTLOG_END_ALL_PAIRED_EVENTS
#define EVENTLOG_PAIRED_EVENT_ACTIVE
#define EVENTLOG_PAIRED_EVENT_INACTIVE

    typedef struct _EVENTLOGRECORD {
      DWORD Length;
      DWORD Reserved;
      DWORD RecordNumber;
      DWORD TimeGenerated;
      DWORD TimeWritten;
      DWORD EventID;
      WORD EventType;
      WORD NumStrings;
      WORD EventCategory;
      WORD ReservedFlags;
      DWORD ClosingRecordNumber;
      DWORD StringOffset;
      DWORD UserSidLength;
      DWORD UserSidOffset;
      DWORD DataLength;
      DWORD DataOffset;
    } EVENTLOGRECORD,*PEVENTLOGRECORD;

#define MAXLOGICALLOGNAMESIZE

    typedef struct _EVENTSFORLOGFILE {
      DWORD ulSize;
      WCHAR szLogicalLogFile[256];
      DWORD ulNumRecords;
      EVENTLOGRECORD pEventLogRecords[];
    } EVENTSFORLOGFILE,*PEVENTSFORLOGFILE;

    typedef struct _PACKEDEVENTINFO {
      DWORD ulSize;
      DWORD ulNumEventsForLogFile;
      DWORD ulOffsets[];
    } PACKEDEVENTINFO,*PPACKEDEVENTINFO;

#define KEY_QUERY_VALUE
#define KEY_SET_VALUE
#define KEY_CREATE_SUB_KEY
#define KEY_ENUMERATE_SUB_KEYS
#define KEY_NOTIFY
#define KEY_CREATE_LINK
#define KEY_WOW64_64KEY
#define KEY_WOW64_32KEY
#define KEY_WOW64_RES

#define KEY_READ
#define KEY_WRITE
#define KEY_EXECUTE
#define KEY_ALL_ACCESS
#define REG_OPTION_RESERVED

#define REG_OPTION_NON_VOLATILE
#define REG_OPTION_VOLATILE
#define REG_OPTION_CREATE_LINK
#define REG_OPTION_BACKUP_RESTORE
#define REG_OPTION_OPEN_LINK
#define REG_LEGAL_OPTION

#define REG_CREATED_NEW_KEY
#define REG_OPENED_EXISTING_KEY

#define REG_STANDARD_FORMAT
#define REG_LATEST_FORMAT
#define REG_NO_COMPRESSION

#define REG_WHOLE_HIVE_VOLATILE
#define REG_REFRESH_HIVE
#define REG_NO_LAZY_FLUSH
#define REG_FORCE_RESTORE
#define REG_APP_HIVE
#define REG_PROCESS_PRIVATE
#define REG_START_JOURNAL
#define REG_HIVE_EXACT_FILE_GROWTH
#define REG_HIVE_NO_RM
#define REG_HIVE_SINGLE_LOG
#define REG_BOOT_HIVE

#define REG_FORCE_UNLOAD

#define REG_NOTIFY_CHANGE_NAME
#define REG_NOTIFY_CHANGE_ATTRIBUTES
#define REG_NOTIFY_CHANGE_LAST_SET
#define REG_NOTIFY_CHANGE_SECURITY
#define REG_NOTIFY_THREAD_AGNOSTIC

#define REG_LEGAL_CHANGE_FILTER

#define REG_NONE
#define REG_SZ
#define REG_EXPAND_SZ
#define REG_BINARY
#define REG_DWORD
#define REG_DWORD_LITTLE_ENDIAN
#define REG_DWORD_BIG_ENDIAN
#define REG_LINK
#define REG_MULTI_SZ
#define REG_RESOURCE_LIST
#define REG_FULL_RESOURCE_DESCRIPTOR
#define REG_RESOURCE_REQUIREMENTS_LIST
#define REG_QWORD
#define REG_QWORD_LITTLE_ENDIAN

#define SERVICE_KERNEL_DRIVER
#define SERVICE_FILE_SYSTEM_DRIVER
#define SERVICE_ADAPTER
#define SERVICE_RECOGNIZER_DRIVER

#define SERVICE_DRIVER

#define SERVICE_WIN32_OWN_PROCESS
#define SERVICE_WIN32_SHARE_PROCESS
#define SERVICE_WIN32

#define SERVICE_INTERACTIVE_PROCESS

#define SERVICE_TYPE_ALL

#define SERVICE_BOOT_START
#define SERVICE_SYSTEM_START
#define SERVICE_AUTO_START
#define SERVICE_DEMAND_START
#define SERVICE_DISABLED

#define SERVICE_ERROR_IGNORE
#define SERVICE_ERROR_NORMAL
#define SERVICE_ERROR_SEVERE
#define SERVICE_ERROR_CRITICAL

    typedef enum _CM_SERVICE_NODE_TYPE {
      DriverType = 0x00000001,FileSystemType = 0x00000002,Win32ServiceOwnProcess = 0x00000010,
      Win32ServiceShareProcess = 0x00000020,AdapterType = 0x00000004,RecognizerType = 0x00000008
    } SERVICE_NODE_TYPE;

    typedef enum _CM_SERVICE_LOAD_TYPE {
      BootLoad = 0x00000000,SystemLoad = 0x00000001,AutoLoad = 0x00000002,DemandLoad = 0x00000003,
      DisableLoad = 0x00000004
    } SERVICE_LOAD_TYPE;

    typedef enum _CM_ERROR_CONTROL_TYPE {
      IgnoreError = 0x00000000,NormalError = 0x00000001,SevereError = 0x00000002,CriticalError = 0x00000003
    } SERVICE_ERROR_TYPE;

#define CM_SERVICE_NETWORK_BOOT_LOAD
#define CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD
#define CM_SERVICE_USB_DISK_BOOT_LOAD
#define CM_SERVICE_SD_DISK_BOOT_LOAD
#define CM_SERVICE_USB3_DISK_BOOT_LOAD
#define CM_SERVICE_MEASURED_BOOT_LOAD
#define CM_SERVICE_VERIFIER_BOOT_LOAD
#define CM_SERVICE_WINPE_BOOT_LOAD

#define CM_SERVICE_VALID_PROMOTION_MASK


#define _NTDDTAPE_WINNT_

#define TAPE_ERASE_SHORT
#define TAPE_ERASE_LONG

    typedef struct _TAPE_ERASE {
      DWORD Type;
      BOOLEAN Immediate;
    } TAPE_ERASE,*PTAPE_ERASE;

#define TAPE_LOAD
#define TAPE_UNLOAD
#define TAPE_TENSION
#define TAPE_LOCK
#define TAPE_UNLOCK
#define TAPE_FORMAT

    typedef struct _TAPE_PREPARE {
      DWORD Operation;
      BOOLEAN Immediate;
    } TAPE_PREPARE,*PTAPE_PREPARE;

#define TAPE_SETMARKS
#define TAPE_FILEMARKS
#define TAPE_SHORT_FILEMARKS
#define TAPE_LONG_FILEMARKS

    typedef struct _TAPE_WRITE_MARKS {
      DWORD Type;
      DWORD Count;
      BOOLEAN Immediate;
    } TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;

#define TAPE_ABSOLUTE_POSITION
#define TAPE_LOGICAL_POSITION
#define TAPE_PSEUDO_LOGICAL_POSITION

    typedef struct _TAPE_GET_POSITION {
      DWORD Type;
      DWORD Partition;
      LARGE_INTEGER Offset;
    } TAPE_GET_POSITION,*PTAPE_GET_POSITION;

#define TAPE_REWIND
#define TAPE_ABSOLUTE_BLOCK
#define TAPE_LOGICAL_BLOCK
#define TAPE_PSEUDO_LOGICAL_BLOCK
#define TAPE_SPACE_END_OF_DATA
#define TAPE_SPACE_RELATIVE_BLOCKS
#define TAPE_SPACE_FILEMARKS
#define TAPE_SPACE_SEQUENTIAL_FMKS
#define TAPE_SPACE_SETMARKS
#define TAPE_SPACE_SEQUENTIAL_SMKS

    typedef struct _TAPE_SET_POSITION {
      DWORD Method;
      DWORD Partition;
      LARGE_INTEGER Offset;
      BOOLEAN Immediate;
    } TAPE_SET_POSITION,*PTAPE_SET_POSITION;

#define TAPE_DRIVE_FIXED
#define TAPE_DRIVE_SELECT
#define TAPE_DRIVE_INITIATOR

#define TAPE_DRIVE_ERASE_SHORT
#define TAPE_DRIVE_ERASE_LONG
#define TAPE_DRIVE_ERASE_BOP_ONLY
#define TAPE_DRIVE_ERASE_IMMEDIATE
#define TAPE_DRIVE_TAPE_CAPACITY
#define TAPE_DRIVE_TAPE_REMAINING
#define TAPE_DRIVE_FIXED_BLOCK
#define TAPE_DRIVE_VARIABLE_BLOCK
#define TAPE_DRIVE_WRITE_PROTECT
#define TAPE_DRIVE_EOT_WZ_SIZE
#define TAPE_DRIVE_ECC
#define TAPE_DRIVE_COMPRESSION
#define TAPE_DRIVE_PADDING
#define TAPE_DRIVE_REPORT_SMKS
#define TAPE_DRIVE_GET_ABSOLUTE_BLK
#define TAPE_DRIVE_GET_LOGICAL_BLK
#define TAPE_DRIVE_SET_EOT_WZ_SIZE
#define TAPE_DRIVE_EJECT_MEDIA
#define TAPE_DRIVE_CLEAN_REQUESTS
#define TAPE_DRIVE_SET_CMP_BOP_ONLY

#define TAPE_DRIVE_RESERVED_BIT

#define TAPE_DRIVE_LOAD_UNLOAD
#define TAPE_DRIVE_TENSION
#define TAPE_DRIVE_LOCK_UNLOCK
#define TAPE_DRIVE_REWIND_IMMEDIATE
#define TAPE_DRIVE_SET_BLOCK_SIZE

#define TAPE_DRIVE_LOAD_UNLD_IMMED
#define TAPE_DRIVE_TENSION_IMMED
#define TAPE_DRIVE_LOCK_UNLK_IMMED

#define TAPE_DRIVE_SET_ECC
#define TAPE_DRIVE_SET_COMPRESSION
#define TAPE_DRIVE_SET_PADDING
#define TAPE_DRIVE_SET_REPORT_SMKS

#define TAPE_DRIVE_ABSOLUTE_BLK
#define TAPE_DRIVE_ABS_BLK_IMMED
#define TAPE_DRIVE_LOGICAL_BLK
#define TAPE_DRIVE_LOG_BLK_IMMED

#define TAPE_DRIVE_END_OF_DATA
#define TAPE_DRIVE_RELATIVE_BLKS
#define TAPE_DRIVE_FILEMARKS
#define TAPE_DRIVE_SEQUENTIAL_FMKS

#define TAPE_DRIVE_SETMARKS
#define TAPE_DRIVE_SEQUENTIAL_SMKS
#define TAPE_DRIVE_REVERSE_POSITION
#define TAPE_DRIVE_SPACE_IMMEDIATE

#define TAPE_DRIVE_WRITE_SETMARKS
#define TAPE_DRIVE_WRITE_FILEMARKS
#define TAPE_DRIVE_WRITE_SHORT_FMKS
#define TAPE_DRIVE_WRITE_LONG_FMKS

#define TAPE_DRIVE_WRITE_MARK_IMMED
#define TAPE_DRIVE_FORMAT
#define TAPE_DRIVE_FORMAT_IMMEDIATE
#define TAPE_DRIVE_HIGH_FEATURES

    typedef struct _TAPE_GET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD DefaultBlockSize;
      DWORD MaximumBlockSize;
      DWORD MinimumBlockSize;
      DWORD MaximumPartitionCount;
      DWORD FeaturesLow;
      DWORD FeaturesHigh;
      DWORD EOTWarningZoneSize;
    } TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;

    typedef struct _TAPE_SET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD EOTWarningZoneSize;
    } TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;

    typedef struct _TAPE_GET_MEDIA_PARAMETERS {
      LARGE_INTEGER Capacity;
      LARGE_INTEGER Remaining;
      DWORD BlockSize;
      DWORD PartitionCount;
      BOOLEAN WriteProtected;
    } TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;

    typedef struct _TAPE_SET_MEDIA_PARAMETERS {
      DWORD BlockSize;
    } TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;

#define TAPE_FIXED_PARTITIONS
#define TAPE_SELECT_PARTITIONS
#define TAPE_INITIATOR_PARTITIONS

    typedef struct _TAPE_CREATE_PARTITION {
      DWORD Method;
      DWORD Count;
      DWORD Size;
    } TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;

#define TAPE_QUERY_DRIVE_PARAMETERS
#define TAPE_QUERY_MEDIA_CAPACITY
#define TAPE_CHECK_FOR_DRIVE_PROBLEM
#define TAPE_QUERY_IO_ERROR_DATA
#define TAPE_QUERY_DEVICE_ERROR_DATA

    typedef struct _TAPE_WMI_OPERATIONS {
      DWORD Method;
      DWORD DataBufferSize;
      PVOID DataBuffer;
    } TAPE_WMI_OPERATIONS,*PTAPE_WMI_OPERATIONS;

    typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
      TapeDriveProblemNone,TapeDriveReadWriteWarning,TapeDriveReadWriteError,TapeDriveReadWarning,TapeDriveWriteWarning,TapeDriveReadError,TapeDriveWriteError,TapeDriveHardwareError,TapeDriveUnsupportedMedia,TapeDriveScsiConnectionError,TapeDriveTimetoClean,TapeDriveCleanDriveNow,TapeDriveMediaLifeExpired,TapeDriveSnappedTape
    } TAPE_DRIVE_PROBLEM_TYPE;


  typedef DWORD TP_VERSION,*PTP_VERSION;
  typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE,*PTP_CALLBACK_INSTANCE;
  typedef void ( *PTP_SIMPLE_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context);
  typedef struct _TP_POOL TP_POOL,*PTP_POOL;

  typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
  } TP_CALLBACK_PRIORITY;

  typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
  } TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

  typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP,*PTP_CLEANUP_GROUP;
  typedef void ( *PTP_CLEANUP_GROUP_CANCEL_CALLBACK) (PVOID ObjectContext, PVOID CleanupContext);
# 8071 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
  typedef struct _TP_CALLBACK_ENVIRON_V1 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
      DWORD Flags;
      struct {
 DWORD LongFunction : 1;
 DWORD Persistent : 1;
 DWORD Private : 30;
      } s;
    } u;
  } TP_CALLBACK_ENVIRON_V1;
  typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON,*PTP_CALLBACK_ENVIRON;


  typedef struct _TP_WORK TP_WORK,*PTP_WORK;
  typedef void ( *PTP_WORK_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
  typedef struct _TP_TIMER TP_TIMER,*PTP_TIMER;
  typedef void ( *PTP_TIMER_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
  typedef DWORD TP_WAIT_RESULT;
  typedef struct _TP_WAIT TP_WAIT,*PTP_WAIT;
  typedef void ( *PTP_WAIT_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult);
  typedef struct _TP_IO TP_IO,*PTP_IO;


    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpInitializeCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) {
      cbe->Pool = ((void *)0);
      cbe->CleanupGroup = ((void *)0);
      cbe->CleanupGroupCancelCallback = ((void *)0);
      cbe->RaceDll = ((void *)0);
      cbe->ActivationContext = ((void *)0);
      cbe->FinalizationCallback = ((void *)0);
      cbe->u.Flags = 0;

      cbe->Version = 1;





    }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackThreadpool (PTP_CALLBACK_ENVIRON cbe, PTP_POOL pool) { cbe->Pool = pool; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackCleanupGroup (PTP_CALLBACK_ENVIRON cbe, PTP_CLEANUP_GROUP cleanup_group, PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb) {
      cbe->CleanupGroup = cleanup_group;
      cbe->CleanupGroupCancelCallback = cleanup_group_cb;
    }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackActivationContext (PTP_CALLBACK_ENVIRON cbe, struct _ACTIVATION_CONTEXT *actx) { cbe->ActivationContext = actx; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackNoActivationContext (PTP_CALLBACK_ENVIRON cbe) { cbe->ActivationContext = (struct _ACTIVATION_CONTEXT *) (LONG_PTR) -1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackLongFunction (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.LongFunction = 1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackRaceWithDll (PTP_CALLBACK_ENVIRON cbe, PVOID h) { cbe->RaceDll = h; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackFinalizationCallback (PTP_CALLBACK_ENVIRON cbe, PTP_SIMPLE_CALLBACK fini_cb) { cbe->FinalizationCallback = fini_cb; }



    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackPersistent (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.Persistent = 1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpDestroyCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) { {(cbe) = (cbe);}; }



    struct _TEB *NtCurrentTeb(void);
    PVOID GetCurrentFiber(void);
    PVOID GetFiberData(void);
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) struct _TEB *NtCurrentTeb(void) { return (struct _TEB *)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->Self))); }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PVOID GetCurrentFiber(void) { return(PVOID)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->FiberData))); }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PVOID GetFiberData(void) {
      return *(PVOID *)GetCurrentFiber();
    }
# 8153 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define _NTTMAPI_





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ktmtypes.h" 1 3






#define _KTMTYPES_





  typedef GUID CRM_PROTOCOL_ID,*PCRM_PROTOCOL_ID;

#define TRANSACTION_MANAGER_VOLATILE
#define TRANSACTION_MANAGER_COMMIT_DEFAULT
#define TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME
#define TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES
#define TRANSACTION_MANAGER_COMMIT_LOWEST
#define TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY
#define TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS
#define TRANSACTION_MANAGER_MAXIMUM_OPTION

#define TRANSACTION_DO_NOT_PROMOTE
#define TRANSACTION_MAXIMUM_OPTION

#define RESOURCE_MANAGER_VOLATILE
#define RESOURCE_MANAGER_COMMUNICATION
#define RESOURCE_MANAGER_MAXIMUM_OPTION

#define CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY
#define CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO
#define CRM_PROTOCOL_MAXIMUM_OPTION

#define ENLISTMENT_SUPERIOR
#define ENLISTMENT_MAXIMUM_OPTION

  typedef ULONG NOTIFICATION_MASK;
#define TRANSACTION_NOTIFY_MASK
#define TRANSACTION_NOTIFY_PREPREPARE
#define TRANSACTION_NOTIFY_PREPARE
#define TRANSACTION_NOTIFY_COMMIT
#define TRANSACTION_NOTIFY_ROLLBACK
#define TRANSACTION_NOTIFY_PREPREPARE_COMPLETE
#define TRANSACTION_NOTIFY_PREPARE_COMPLETE
#define TRANSACTION_NOTIFY_COMMIT_COMPLETE
#define TRANSACTION_NOTIFY_ROLLBACK_COMPLETE
#define TRANSACTION_NOTIFY_RECOVER
#define TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT
#define TRANSACTION_NOTIFY_DELEGATE_COMMIT
#define TRANSACTION_NOTIFY_RECOVER_QUERY
#define TRANSACTION_NOTIFY_ENLIST_PREPREPARE
#define TRANSACTION_NOTIFY_LAST_RECOVER
#define TRANSACTION_NOTIFY_INDOUBT
#define TRANSACTION_NOTIFY_PROPAGATE_PULL
#define TRANSACTION_NOTIFY_PROPAGATE_PUSH
#define TRANSACTION_NOTIFY_MARSHAL
#define TRANSACTION_NOTIFY_ENLIST_MASK
#define TRANSACTION_NOTIFY_RM_DISCONNECTED
#define TRANSACTION_NOTIFY_TM_ONLINE
#define TRANSACTION_NOTIFY_COMMIT_REQUEST
#define TRANSACTION_NOTIFY_PROMOTE
#define TRANSACTION_NOTIFY_PROMOTE_NEW
#define TRANSACTION_NOTIFY_REQUEST_OUTCOME

#define TRANSACTION_NOTIFY_COMMIT_FINALIZE

#define TRANSACTIONMANAGER_OBJECT_PATH
#define TRANSACTION_OBJECT_PATH
#define ENLISTMENT_OBJECT_PATH
#define RESOURCE_MANAGER_OBJECT_PATH

#define TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES
#define TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES
#define ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES
#define RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES

  typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
  } TRANSACTION_NOTIFICATION,*PTRANSACTION_NOTIFICATION;

  typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,*PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

#define TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED

  typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
  } TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT,*PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

  typedef ULONG SAVEPOINT_ID,*PSAVEPOINT_ID;

  typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
  } TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,*PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
  } TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,*PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

  typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

#define KTM_MARSHAL_BLOB_VERSION_MAJOR
#define KTM_MARSHAL_BLOB_VERSION_MINOR

#define MAX_TRANSACTION_DESCRIPTION_LENGTH
#define MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH

  typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
  } KCRM_MARSHAL_HEADER,*PKCRM_MARSHAL_HEADER,* PRKCRM_MARSHAL_HEADER;

  typedef struct _KCRM_TRANSACTION_BLOB {
    GUID UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
  } KCRM_TRANSACTION_BLOB,*PKCRM_TRANSACTION_BLOB,* PRKCRM_TRANSACTION_BLOB;

  typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
  } KCRM_PROTOCOL_BLOB,*PKCRM_PROTOCOL_BLOB,* PRKCRM_PROTOCOL_BLOB;
# 8160 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

#define TRANSACTIONMANAGER_QUERY_INFORMATION
#define TRANSACTIONMANAGER_SET_INFORMATION
#define TRANSACTIONMANAGER_RECOVER
#define TRANSACTIONMANAGER_RENAME
#define TRANSACTIONMANAGER_CREATE_RM
#define TRANSACTIONMANAGER_BIND_TRANSACTION

#define TRANSACTIONMANAGER_GENERIC_READ
#define TRANSACTIONMANAGER_GENERIC_WRITE
#define TRANSACTIONMANAGER_GENERIC_EXECUTE
#define TRANSACTIONMANAGER_ALL_ACCESS

#define TRANSACTION_QUERY_INFORMATION
#define TRANSACTION_SET_INFORMATION
#define TRANSACTION_ENLIST
#define TRANSACTION_COMMIT
#define TRANSACTION_ROLLBACK
#define TRANSACTION_PROPAGATE
#define TRANSACTION_RIGHT_RESERVED1

#define TRANSACTION_GENERIC_READ
#define TRANSACTION_GENERIC_WRITE
#define TRANSACTION_GENERIC_EXECUTE
#define TRANSACTION_ALL_ACCESS
#define TRANSACTION_RESOURCE_MANAGER_RIGHTS

#define RESOURCEMANAGER_QUERY_INFORMATION
#define RESOURCEMANAGER_SET_INFORMATION
#define RESOURCEMANAGER_RECOVER
#define RESOURCEMANAGER_ENLIST
#define RESOURCEMANAGER_GET_NOTIFICATION
#define RESOURCEMANAGER_REGISTER_PROTOCOL
#define RESOURCEMANAGER_COMPLETE_PROPAGATION

#define RESOURCEMANAGER_GENERIC_READ
#define RESOURCEMANAGER_GENERIC_WRITE
#define RESOURCEMANAGER_GENERIC_EXECUTE
#define RESOURCEMANAGER_ALL_ACCESS

#define ENLISTMENT_QUERY_INFORMATION
#define ENLISTMENT_SET_INFORMATION
#define ENLISTMENT_RECOVER
#define ENLISTMENT_SUBORDINATE_RIGHTS
#define ENLISTMENT_SUPERIOR_RIGHTS

#define ENLISTMENT_GENERIC_READ
#define ENLISTMENT_GENERIC_WRITE
#define ENLISTMENT_GENERIC_EXECUTE
#define ENLISTMENT_ALL_ACCESS

      typedef enum _TRANSACTION_OUTCOME {
 TransactionOutcomeUndetermined = 1,
 TransactionOutcomeCommitted,
 TransactionOutcomeAborted,
      } TRANSACTION_OUTCOME;

      typedef enum _TRANSACTION_STATE {
 TransactionStateNormal = 1,
 TransactionStateIndoubt,
 TransactionStateCommittedNotify,
      } TRANSACTION_STATE;

      typedef struct _TRANSACTION_BASIC_INFORMATION {
 GUID TransactionId;
 DWORD State;
 DWORD Outcome;
      } TRANSACTION_BASIC_INFORMATION,*PTRANSACTION_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
 GUID TmIdentity;
 LARGE_INTEGER VirtualClock;
      } TRANSACTIONMANAGER_BASIC_INFORMATION,*PTRANSACTIONMANAGER_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
 GUID LogIdentity;
      } TRANSACTIONMANAGER_LOG_INFORMATION,*PTRANSACTIONMANAGER_LOG_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
 DWORD LogPathLength;
 WCHAR LogPath[1];
      } TRANSACTIONMANAGER_LOGPATH_INFORMATION,*PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
 ULONGLONG LastRecoveredLsn;
      } TRANSACTIONMANAGER_RECOVERY_INFORMATION,*PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
 GUID OldestTransactionGuid;
      } TRANSACTIONMANAGER_OLDEST_INFORMATION,*PTRANSACTIONMANAGER_OLDEST_INFORMATION;

      typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
 DWORD IsolationLevel;
 DWORD IsolationFlags;
 LARGE_INTEGER Timeout;
 DWORD Outcome;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } TRANSACTION_PROPERTIES_INFORMATION,*PTRANSACTION_PROPERTIES_INFORMATION;

      typedef struct _TRANSACTION_BIND_INFORMATION {
 HANDLE TmHandle;
      } TRANSACTION_BIND_INFORMATION,*PTRANSACTION_BIND_INFORMATION;

      typedef struct _TRANSACTION_ENLISTMENT_PAIR {
 GUID EnlistmentId;
 GUID ResourceManagerId;
      } TRANSACTION_ENLISTMENT_PAIR,*PTRANSACTION_ENLISTMENT_PAIR;

      typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
 DWORD NumberOfEnlistments;
 TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
      } TRANSACTION_ENLISTMENTS_INFORMATION,*PTRANSACTION_ENLISTMENTS_INFORMATION;

      typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
 TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
      } TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION,*PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

      typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
 GUID ResourceManagerId;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } RESOURCEMANAGER_BASIC_INFORMATION,*PRESOURCEMANAGER_BASIC_INFORMATION;

      typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
 HANDLE IoCompletionPortHandle;
 ULONG_PTR CompletionKey;
      } RESOURCEMANAGER_COMPLETION_INFORMATION,*PRESOURCEMANAGER_COMPLETION_INFORMATION;

      typedef enum _TRANSACTION_INFORMATION_CLASS {
 TransactionBasicInformation,
 TransactionPropertiesInformation,
 TransactionEnlistmentInformation,
 TransactionSuperiorEnlistmentInformation,
 TransactionBindInformation,
 TransactionDTCPrivateInformation
      } TRANSACTION_INFORMATION_CLASS;

      typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
 TransactionManagerBasicInformation,
 TransactionManagerLogInformation,
 TransactionManagerLogPathInformation,
 TransactionManagerOnlineProbeInformation = 3,
 TransactionManagerRecoveryInformation = 4,
 TransactionManagerOldestTransactionInformation = 5
      } TRANSACTIONMANAGER_INFORMATION_CLASS;

      typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
 ResourceManagerBasicInformation,
 ResourceManagerCompletionInformation
      } RESOURCEMANAGER_INFORMATION_CLASS;

      typedef struct _ENLISTMENT_BASIC_INFORMATION {
 GUID EnlistmentId;
 GUID TransactionId;
 GUID ResourceManagerId;
      } ENLISTMENT_BASIC_INFORMATION,*PENLISTMENT_BASIC_INFORMATION;

      typedef struct _ENLISTMENT_CRM_INFORMATION {
 GUID CrmTransactionManagerId;
 GUID CrmResourceManagerId;
 GUID CrmEnlistmentId;
      } ENLISTMENT_CRM_INFORMATION,*PENLISTMENT_CRM_INFORMATION;

      typedef enum _ENLISTMENT_INFORMATION_CLASS {
 EnlistmentBasicInformation,
 EnlistmentRecoveryInformation,
 EnlistmentCrmInformation
      } ENLISTMENT_INFORMATION_CLASS;

      typedef struct _TRANSACTION_LIST_ENTRY {
         GUID UOW;
      } TRANSACTION_LIST_ENTRY,*PTRANSACTION_LIST_ENTRY;

      typedef struct _TRANSACTION_LIST_INFORMATION {
 DWORD NumberOfTransactions;
 TRANSACTION_LIST_ENTRY TransactionInformation[1];
      } TRANSACTION_LIST_INFORMATION,*PTRANSACTION_LIST_INFORMATION;

      typedef enum _KTMOBJECT_TYPE {
 KTMOBJECT_TRANSACTION,
 KTMOBJECT_TRANSACTION_MANAGER,
 KTMOBJECT_RESOURCE_MANAGER,
 KTMOBJECT_ENLISTMENT,
 KTMOBJECT_INVALID
      } KTMOBJECT_TYPE,*PKTMOBJECT_TYPE;

      typedef struct _KTMOBJECT_CURSOR {
 GUID LastQuery;
 DWORD ObjectIdCount;
 GUID ObjectIds[1];
      } KTMOBJECT_CURSOR,*PKTMOBJECT_CURSOR;
# 8367 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define WOW64_CONTEXT_i386
#define WOW64_CONTEXT_i486
#define WOW64_CONTEXT_CONTROL
#define WOW64_CONTEXT_INTEGER
#define WOW64_CONTEXT_SEGMENTS
#define WOW64_CONTEXT_FLOATING_POINT
#define WOW64_CONTEXT_DEBUG_REGISTERS
#define WOW64_CONTEXT_EXTENDED_REGISTERS
#define WOW64_CONTEXT_FULL
#define WOW64_CONTEXT_ALL

#define WOW64_CONTEXT_XSTATE

#define WOW64_CONTEXT_EXCEPTION_ACTIVE
#define WOW64_CONTEXT_SERVICE_ACTIVE
#define WOW64_CONTEXT_EXCEPTION_REQUEST
#define WOW64_CONTEXT_EXCEPTION_REPORTING

#define WOW64_SIZE_OF_80387_REGISTERS
#define WOW64_MAXIMUM_SUPPORTED_EXTENSION

typedef struct _WOW64_FLOATING_SAVE_AREA {
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA, *PWOW64_FLOATING_SAVE_AREA;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack4.h" 1 3






#pragma pack(push,4)
# 8401 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3
typedef struct _WOW64_CONTEXT {
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  WOW64_FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
} WOW64_CONTEXT, *PWOW64_CONTEXT;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 8429 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 2 3

typedef struct _WOW64_LDT_ENTRY {
  WORD LimitLow;
  WORD BaseLow;
  __extension__ union {
    struct {
      BYTE BaseMid;
      BYTE Flags1;
      BYTE Flags2;
      BYTE BaseHi;
    } Bytes;
    struct {
      DWORD BaseMid :8;
      DWORD Type :5;
      DWORD Dpl :2;
      DWORD Pres :1;
      DWORD LimitHi :4;
      DWORD Sys :1;
      DWORD Reserved_0 :1;
      DWORD Default_Big :1;
      DWORD Granularity :1;
      DWORD BaseHi :8;
    } Bits;
  } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

    typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
      DWORD Selector;
      WOW64_LDT_ENTRY Descriptor;
    } WOW64_DESCRIPTOR_TABLE_ENTRY,*PWOW64_DESCRIPTOR_TABLE_ENTRY;
# 8475 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnt.h" 3
#define ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION
#define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION
#define ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE
#define ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES
#define ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS
#define ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO
# 147 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwindef.h" 2 3


  typedef UINT_PTR WPARAM;
  typedef LONG_PTR LPARAM;
  typedef LONG_PTR LRESULT;




#define max



#define min




#define MAKEWORD
#define MAKELONG
#define LOWORD
#define HIWORD
#define LOBYTE
#define HIBYTE

  typedef HANDLE *SPHANDLE;
  typedef HANDLE *LPHANDLE;
  typedef HANDLE HGLOBAL;
  typedef HANDLE HLOCAL;
  typedef HANDLE GLOBALHANDLE;
  typedef HANDLE LOCALHANDLE;

  typedef INT_PTR ( *FARPROC) ();
  typedef INT_PTR ( *NEARPROC) ();
  typedef INT_PTR ( *PROC) ();






  typedef WORD ATOM;

  typedef int HFILE;
  struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
  struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
  typedef HKEY *PHKEY;
  struct HKL__ { int unused; }; typedef struct HKL__ *HKL;
  struct HLSURF__ { int unused; }; typedef struct HLSURF__ *HLSURF;
  struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
  typedef HINSTANCE HMODULE;
  struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
  struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
  struct HSPRITE__ { int unused; }; typedef struct HSPRITE__ *HSPRITE;
  struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
  struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
  struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;

  typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
  } FILETIME,*PFILETIME,*LPFILETIME;
#define _FILETIME_
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windef.h" 2 3
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windef.h" 3
struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;
# 37 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windef.h" 3
  typedef void *HGDIOBJ;




struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;

typedef HICON HCURSOR;
typedef DWORD COLORREF;



struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;

typedef DWORD *LPCOLORREF;

#define HFILE_ERROR



typedef struct tagRECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT,*PRECT,*NPRECT,*LPRECT;

typedef const RECT *LPCRECT;

typedef struct _RECTL {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECTL,*PRECTL,*LPRECTL;

typedef const RECTL *LPCRECTL;

typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT,*PPOINT,*NPPOINT,*LPPOINT;

typedef struct _POINTL {
  LONG x;
  LONG y;
} POINTL,*PPOINTL;

typedef struct tagSIZE {
  LONG cx;
  LONG cy;
} SIZE,*PSIZE,*LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL,*LPSIZEL;

typedef struct tagPOINTS {
  SHORT x;
  SHORT y;
} POINTS,*PPOINTS,*LPPOINTS;


#define DM_UPDATE
#define DM_COPY
#define DM_PROMPT
#define DM_MODIFY

#define DM_IN_BUFFER
#define DM_IN_PROMPT
#define DM_OUT_BUFFER
#define DM_OUT_DEFAULT

#define DC_FIELDS
#define DC_PAPERS
#define DC_PAPERSIZE
#define DC_MINEXTENT
#define DC_MAXEXTENT
#define DC_BINS
#define DC_DUPLEX
#define DC_SIZE
#define DC_EXTRA
#define DC_VERSION
#define DC_DRIVER
#define DC_BINNAMES
#define DC_ENUMRESOLUTIONS
#define DC_FILEDEPENDENCIES
#define DC_TRUETYPE
#define DC_PAPERNAMES
#define DC_ORIENTATION
#define DC_COPIES
# 70 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 1 3





#define _WINBASE_



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/apisetcconv.h" 1 3






#define _APISETCCONV_



#define CMAPI







#define CREDUIAPI







#define WINABLEAPI







#define WINADVAPI







#define WINBASEAPI







#define WINUSERAPI







#define ZAWPROXYAPI







#define WINCFGMGR32API







#define WINDEVQUERYAPI







#define WINSWDEVICEAPI







#define WINPATHCCHAPI
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwinbase.h" 1 3

#define _MINWINBASE_





#define MoveMemory
#define CopyMemory
#define FillMemory
#define ZeroMemory

  typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    WINBOOL bInheritHandle;
  } SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

  typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    __extension__ union {
      struct {
 DWORD Offset;
 DWORD OffsetHigh;
      } ;
      PVOID Pointer;
    } ;
    HANDLE hEvent;
  } OVERLAPPED, *LPOVERLAPPED;

  typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
  } OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
# 48 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwinbase.h" 3
#define _SYSTEMTIME_
  typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
  } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


  typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
  } WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

  typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
  } WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

  typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
  typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
  typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;

  typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
  } FINDEX_INFO_LEVELS;

#define FIND_FIRST_EX_CASE_SENSITIVE
#define FIND_FIRST_EX_LARGE_FETCH

  typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
  } FINDEX_SEARCH_OPS;

  typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
  } GET_FILEEX_INFO_LEVELS;
# 141 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/minwinbase.h" 3
  typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
  typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

  typedef void ( *LPOVERLAPPED_COMPLETION_ROUTINE) (DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);

#define LOCKFILE_FAIL_IMMEDIATELY
#define LOCKFILE_EXCLUSIVE_LOCK

  typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    __extension__ union {
      struct {
 HANDLE hMem;
 DWORD dwReserved[3];
      } Block;
      struct {
 DWORD dwCommittedSize;
 DWORD dwUnCommittedSize;
 LPVOID lpFirstBlock;
 LPVOID lpLastBlock;
      } Region;
    } ;
  } PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY,*PPROCESS_HEAP_ENTRY;

#define PROCESS_HEAP_REGION
#define PROCESS_HEAP_UNCOMMITTED_RANGE
#define PROCESS_HEAP_ENTRY_BUSY
#define PROCESS_HEAP_ENTRY_MOVEABLE
#define PROCESS_HEAP_ENTRY_DDESHARE

  typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
      struct {
 HMODULE LocalizedReasonModule;
 ULONG LocalizedReasonId;
 ULONG ReasonStringCount;
 LPWSTR *ReasonStrings;
      } Detailed;
      LPWSTR SimpleReasonString;
    } Reason;
  } REASON_CONTEXT, *PREASON_CONTEXT;

#define EXCEPTION_DEBUG_EVENT
#define CREATE_THREAD_DEBUG_EVENT
#define CREATE_PROCESS_DEBUG_EVENT
#define EXIT_THREAD_DEBUG_EVENT
#define EXIT_PROCESS_DEBUG_EVENT
#define LOAD_DLL_DEBUG_EVENT
#define UNLOAD_DLL_DEBUG_EVENT
#define OUTPUT_DEBUG_STRING_EVENT
#define RIP_EVENT

  typedef DWORD ( *PTHREAD_START_ROUTINE) (LPVOID lpThreadParameter);
  typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

  typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
  } EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

  typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
  } CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

  typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
  } CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

  typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

  typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

  typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
  } LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

  typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
  } UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

  typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
  } OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

  typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
  } RIP_INFO, *LPRIP_INFO;

  typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
      EXCEPTION_DEBUG_INFO Exception;
      CREATE_THREAD_DEBUG_INFO CreateThread;
      CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
      EXIT_THREAD_DEBUG_INFO ExitThread;
      EXIT_PROCESS_DEBUG_INFO ExitProcess;
      LOAD_DLL_DEBUG_INFO LoadDll;
      UNLOAD_DLL_DEBUG_INFO UnloadDll;
      OUTPUT_DEBUG_STRING_INFO DebugString;
      RIP_INFO RipInfo;
    } u;
  } DEBUG_EVENT, *LPDEBUG_EVENT;


  typedef PCONTEXT LPCONTEXT;


#define STILL_ACTIVE
#define EXCEPTION_ACCESS_VIOLATION
#define EXCEPTION_DATATYPE_MISALIGNMENT
#define EXCEPTION_BREAKPOINT
#define EXCEPTION_SINGLE_STEP
#define EXCEPTION_ARRAY_BOUNDS_EXCEEDED
#define EXCEPTION_FLT_DENORMAL_OPERAND
#define EXCEPTION_FLT_DIVIDE_BY_ZERO
#define EXCEPTION_FLT_INEXACT_RESULT
#define EXCEPTION_FLT_INVALID_OPERATION
#define EXCEPTION_FLT_OVERFLOW
#define EXCEPTION_FLT_STACK_CHECK
#define EXCEPTION_FLT_UNDERFLOW
#define EXCEPTION_INT_DIVIDE_BY_ZERO
#define EXCEPTION_INT_OVERFLOW
#define EXCEPTION_PRIV_INSTRUCTION
#define EXCEPTION_IN_PAGE_ERROR
#define EXCEPTION_ILLEGAL_INSTRUCTION
#define EXCEPTION_NONCONTINUABLE_EXCEPTION
#define EXCEPTION_STACK_OVERFLOW
#define EXCEPTION_INVALID_DISPOSITION
#define EXCEPTION_GUARD_PAGE
#define EXCEPTION_INVALID_HANDLE
#define EXCEPTION_POSSIBLE_DEADLOCK
#define CONTROL_C_EXIT

#define LMEM_FIXED
#define LMEM_MOVEABLE
#define LMEM_NOCOMPACT
#define LMEM_NODISCARD
#define LMEM_ZEROINIT
#define LMEM_MODIFY
#define LMEM_DISCARDABLE
#define LMEM_VALID_FLAGS
#define LMEM_INVALID_HANDLE

#define LHND
#define LPTR

#define NONZEROLHND
#define NONZEROLPTR

#define LocalDiscard

#define LMEM_DISCARDED
#define LMEM_LOCKCOUNT
# 14 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bemapiset.h" 1 3





#define _BEM_H_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bemapiset.h" 3
  typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;
  typedef struct _BEM_REFERENCE BEM_REFERENCE;
  typedef void ( *BEM_FREE_INTERFACE_CALLBACK) (void *interfaceInstance);

  HRESULT BemCreateReference (const GUID *const iid, void *interfaceInstance, BEM_FREE_INTERFACE_CALLBACK freeCallback, BEM_REFERENCE **reference);
  HRESULT BemCreateContractFrom (LPCWSTR dllPath, const GUID *const extensionId, const CONTRACT_DESCRIPTION *contractDescription, void *hostContract, void **contract);
  HRESULT BemCopyReference (BEM_REFERENCE *reference, BEM_REFERENCE **copiedReference);
  void BemFreeReference (BEM_REFERENCE *reference);
  void BemFreeContract (void *contract);
# 15 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/debugapi.h" 1 3





#define _APISETDEBUG_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/debugapi.h" 3
  __attribute__((dllimport)) WINBOOL IsDebuggerPresent (void);
  __attribute__((dllimport)) void OutputDebugStringA (LPCSTR lpOutputString);
  __attribute__((dllimport)) void OutputDebugStringW (LPCWSTR lpOutputString);

#define OutputDebugString



  __attribute__((dllimport)) void DebugBreak (void);
  __attribute__((dllimport)) WINBOOL ContinueDebugEvent (DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
  __attribute__((dllimport)) WINBOOL WaitForDebugEvent (LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
  __attribute__((dllimport)) WINBOOL DebugActiveProcess (DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL DebugActiveProcessStop (DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL CheckRemoteDebuggerPresent (HANDLE hProcess, PBOOL pbDebuggerPresent);
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/errhandlingapi.h" 1 3





#define _ERRHANDLING_H_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/errhandlingapi.h" 3
  typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER) (struct _EXCEPTION_POINTERS *ExceptionInfo);
  typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

  __attribute__((dllimport)) LONG UnhandledExceptionFilter (struct _EXCEPTION_POINTERS *ExceptionInfo);
  __attribute__((dllimport)) LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
  __attribute__((dllimport)) UINT SetErrorMode (UINT uMode);
  __attribute__((dllimport)) PVOID AddVectoredExceptionHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
  __attribute__((dllimport)) ULONG RemoveVectoredExceptionHandler (PVOID Handle);
  __attribute__((dllimport)) PVOID AddVectoredContinueHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
  __attribute__((dllimport)) ULONG RemoveVectoredContinueHandler (PVOID Handle);
# 44 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/errhandlingapi.h" 3
  __attribute__((dllimport)) void RaiseException (DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
  __attribute__((dllimport)) DWORD GetLastError (void);
  __attribute__((dllimport)) void SetLastError (DWORD dwErrCode);
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fibersapi.h" 1 3





#define _FIBERS_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fileapi.h" 1 3





#define _APISETFILE_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fileapi.h" 3
#define CREATE_NEW
#define CREATE_ALWAYS
#define OPEN_EXISTING
#define OPEN_ALWAYS
#define TRUNCATE_EXISTING

#define INVALID_FILE_SIZE
#define INVALID_SET_FILE_POINTER
#define INVALID_FILE_ATTRIBUTES



  typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
  } BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION,
    *LPBY_HANDLE_FILE_INFORMATION;

  __attribute__((dllimport)) LONG CompareFileTime (const FILETIME *lpFileTime1, const FILETIME *lpFileTime2);
  __attribute__((dllimport)) HANDLE CreateFileA (LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
  __attribute__((dllimport)) HANDLE CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
  __attribute__((dllimport)) WINBOOL DefineDosDeviceW (DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
  __attribute__((dllimport)) WINBOOL DeleteVolumeMountPointW (LPCWSTR lpszVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL FileTimeToLocalFileTime (const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
  __attribute__((dllimport)) WINBOOL FindCloseChangeNotification (HANDLE hChangeHandle);
  __attribute__((dllimport)) HANDLE FindFirstChangeNotificationA (LPCSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
  __attribute__((dllimport)) HANDLE FindFirstChangeNotificationW (LPCWSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
  __attribute__((dllimport)) HANDLE FindFirstFileA (LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
  __attribute__((dllimport)) HANDLE FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
  __attribute__((dllimport)) HANDLE FindFirstVolumeW (LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindNextChangeNotification (HANDLE hChangeHandle);
  __attribute__((dllimport)) WINBOOL FindNextVolumeW (HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindVolumeClose (HANDLE hFindVolume);
  __attribute__((dllimport)) WINBOOL GetDiskFreeSpaceA (LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
  __attribute__((dllimport)) WINBOOL GetDiskFreeSpaceW (LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
  __attribute__((dllimport)) UINT GetDriveTypeA (LPCSTR lpRootPathName);
  __attribute__((dllimport)) UINT GetDriveTypeW (LPCWSTR lpRootPathName);
  __attribute__((dllimport)) DWORD GetFileAttributesA (LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD GetFileAttributesW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL GetFileInformationByHandle (HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
  __attribute__((dllimport)) DWORD GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
  __attribute__((dllimport)) WINBOOL GetFileSizeEx (HANDLE hFile, PLARGE_INTEGER lpFileSize);
  __attribute__((dllimport)) WINBOOL GetFileTime (HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
  __attribute__((dllimport)) DWORD GetFileType (HANDLE hFile);
  __attribute__((dllimport)) DWORD GetFullPathNameA (LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
  __attribute__((dllimport)) DWORD GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
  __attribute__((dllimport)) DWORD GetLogicalDrives (void);
  __attribute__((dllimport)) DWORD GetLogicalDriveStringsW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) DWORD GetLongPathNameA (LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
  __attribute__((dllimport)) DWORD GetLongPathNameW (LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
  __attribute__((dllimport)) DWORD GetShortPathNameW (LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
  __attribute__((dllimport)) UINT GetTempFileNameW (LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
  __attribute__((dllimport)) WINBOOL GetVolumeInformationW (LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
  __attribute__((dllimport)) WINBOOL GetVolumePathNameW (LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL LocalFileTimeToFileTime (const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) WINBOOL LockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
  __attribute__((dllimport)) DWORD QueryDosDeviceW (LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
  __attribute__((dllimport)) WINBOOL ReadFileEx (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL ReadFileScatter (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD SetFilePointer (HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
  __attribute__((dllimport)) WINBOOL SetFileTime (HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
  __attribute__((dllimport)) WINBOOL SetFileValidData (HANDLE hFile, LONGLONG ValidDataLength);
  __attribute__((dllimport)) WINBOOL UnlockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
  __attribute__((dllimport)) WINBOOL WriteFileEx (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL WriteFileGather (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD GetTempPathW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL GetVolumeNameForVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL GetVolumePathNamesForVolumeNameW (LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);

#define CreateFile
# 111 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fileapi.h" 3
#define FindFirstChangeNotification
#define FindFirstFile
#define GetDiskFreeSpace
#define GetDriveType
#define GetFileAttributes
#define GetFullPathName
#define GetLongPathName
# 130 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fileapi.h" 3
  typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
  } WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
# 151 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fileapi.h" 3
  __attribute__((dllimport)) WINBOOL CreateDirectoryA (LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL CreateDirectoryW (LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL DeleteFileA (LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL DeleteFileW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL FindClose (HANDLE hFindFile);
  __attribute__((dllimport)) HANDLE FindFirstFileExA (LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
  __attribute__((dllimport)) HANDLE FindFirstFileExW (LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
  __attribute__((dllimport)) WINBOOL FindNextFileA (HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
  __attribute__((dllimport)) WINBOOL FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
  __attribute__((dllimport)) WINBOOL FlushFileBuffers (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL GetDiskFreeSpaceExA (LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL GetDiskFreeSpaceExW (LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL GetFileAttributesExA (LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
  __attribute__((dllimport)) WINBOOL GetFileAttributesExW (LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
  __attribute__((dllimport)) WINBOOL LockFileEx (HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL RemoveDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL RemoveDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) WINBOOL SetEndOfFile (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL SetFileAttributesA (LPCSTR lpFileName, DWORD dwFileAttributes);
  __attribute__((dllimport)) WINBOOL SetFileAttributesW (LPCWSTR lpFileName, DWORD dwFileAttributes);
  __attribute__((dllimport)) WINBOOL SetFilePointerEx (HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
  __attribute__((dllimport)) WINBOOL UnlockFileEx (HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL WriteFile (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);

#define CreateDirectory
#define DeleteFile
#define FindFirstFileEx
#define FindNextFile
#define GetDiskFreeSpaceEx
#define GetFileAttributesEx
#define RemoveDirectory
#define SetFileAttributes
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/handleapi.h" 1 3





#define _APISETHANDLE_
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/handleapi.h" 3
#define INVALID_HANDLE_VALUE


  __attribute__((dllimport)) WINBOOL CloseHandle (HANDLE hObject);
  __attribute__((dllimport)) WINBOOL DuplicateHandle (HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwOptions);



  __attribute__((dllimport)) WINBOOL GetHandleInformation (HANDLE hObject, LPDWORD lpdwFlags);
  __attribute__((dllimport)) WINBOOL SetHandleInformation (HANDLE hObject, DWORD dwMask, DWORD dwFlags);
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/heapapi.h" 1 3





#define _HEAPAPI_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/heapapi.h" 3
  typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
  } HEAP_SUMMARY,*PHEAP_SUMMARY;

  typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

  __attribute__((dllimport)) HANDLE HeapCreate (DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
  __attribute__((dllimport)) WINBOOL HeapDestroy (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL HeapValidate (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
  __attribute__((dllimport)) SIZE_T HeapCompact (HANDLE hHeap, DWORD dwFlags);
  WINBOOL HeapSummary (HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary);
  __attribute__((dllimport)) DWORD GetProcessHeaps (DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
  __attribute__((dllimport)) WINBOOL HeapLock (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL HeapUnlock (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL HeapWalk (HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
  __attribute__((dllimport)) WINBOOL HeapSetInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
  __attribute__((dllimport)) WINBOOL HeapQueryInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);



  __attribute__((dllimport)) LPVOID HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
  __attribute__((dllimport)) LPVOID HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
  __attribute__((dllimport)) WINBOOL HeapFree (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
  __attribute__((dllimport)) SIZE_T HeapSize (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
  __attribute__((dllimport)) HANDLE GetProcessHeap (void);
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ioapiset.h" 1 3





#define _IO_APISET_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ioapiset.h" 3
  __attribute__((dllimport)) WINBOOL GetOverlappedResult (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
  __attribute__((dllimport)) HANDLE CreateIoCompletionPort (HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
  __attribute__((dllimport)) WINBOOL GetQueuedCompletionStatus (HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
  __attribute__((dllimport)) WINBOOL PostQueuedCompletionStatus (HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL CancelIo (HANDLE hFile);
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ioapiset.h" 3
  __attribute__((dllimport)) WINBOOL GetOverlappedResultEx (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, WINBOOL bAlertable);
# 22 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/interlockedapi.h" 1 3





#define _INTERLOCKAPI_H_
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/interlockedapi.h" 3
  __attribute__((dllimport)) void InitializeSListHead (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) PSLIST_ENTRY InterlockedPopEntrySList (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) PSLIST_ENTRY InterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
  __attribute__((dllimport)) PSLIST_ENTRY InterlockedFlushSList (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) USHORT QueryDepthSList (PSLIST_HEADER ListHead);
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/jobapi.h" 1 3





#define _JOBAPISET_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/jobapi.h" 3
  __attribute__((dllimport)) WINBOOL IsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
# 24 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/libloaderapi.h" 1 3





#define _APISETLIBLOADER_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/libloaderapi.h" 3
  typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
  } ENUMUILANG, *PENUMUILANG;


  typedef WINBOOL ( *ENUMRESLANGPROCA) (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL ( *ENUMRESLANGPROCW) (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL ( *ENUMRESNAMEPROCA) (HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
  typedef WINBOOL ( *ENUMRESNAMEPROCW) (HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
  typedef WINBOOL ( *ENUMRESTYPEPROCA) (HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
  typedef WINBOOL ( *ENUMRESTYPEPROCW) (HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/libloaderapi.h" 3
  typedef WINBOOL ( *PGET_MODULE_HANDLE_EXA) (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  typedef WINBOOL ( *PGET_MODULE_HANDLE_EXW) (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);


  typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

#define FIND_RESOURCE_DIRECTORY_TYPES
#define FIND_RESOURCE_DIRECTORY_NAMES
#define FIND_RESOURCE_DIRECTORY_LANGUAGES

#define RESOURCE_ENUM_LN
#define RESOURCE_ENUM_MUI
#define RESOURCE_ENUM_MUI_SYSTEM
#define RESOURCE_ENUM_VALIDATE
#define RESOURCE_ENUM_MODULE_EXACT

#define SUPPORT_LANG_NUMBER

#define DONT_RESOLVE_DLL_REFERENCES
#define LOAD_LIBRARY_AS_DATAFILE
#define LOAD_WITH_ALTERED_SEARCH_PATH
#define LOAD_IGNORE_CODE_AUTHZ_LEVEL
#define LOAD_LIBRARY_AS_IMAGE_RESOURCE
#define LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
#define LOAD_LIBRARY_REQUIRE_SIGNED_TARGET
#define LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
#define LOAD_LIBRARY_SEARCH_APPLICATION_DIR
#define LOAD_LIBRARY_SEARCH_USER_DIRS
#define LOAD_LIBRARY_SEARCH_SYSTEM32
#define LOAD_LIBRARY_SEARCH_DEFAULT_DIRS

#define GET_MODULE_HANDLE_EX_FLAG_PIN
#define GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
#define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS

#define ENUMRESLANGPROC
#define ENUMRESNAMEPROC
#define ENUMRESTYPEPROC

  __attribute__((dllimport)) HRSRC FindResourceExW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
  __attribute__((dllimport)) __attribute__((noreturn)) void FreeLibraryAndExitThread (HMODULE hLibModule, DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL FreeResource (HGLOBAL hResData);
  __attribute__((dllimport)) DWORD GetModuleFileNameA (HMODULE hModule, LPSTR lpFilename, DWORD nSize);
  __attribute__((dllimport)) DWORD GetModuleFileNameW (HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
  __attribute__((dllimport)) HMODULE GetModuleHandleA (LPCSTR lpModuleName);
  __attribute__((dllimport)) HMODULE GetModuleHandleW (LPCWSTR lpModuleName);
  __attribute__((dllimport)) HMODULE LoadLibraryExA (LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) HMODULE LoadLibraryExW (LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) HGLOBAL LoadResource (HMODULE hModule, HRSRC hResInfo);
  __attribute__((dllimport)) int LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
  __attribute__((dllimport)) int LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
  __attribute__((dllimport)) LPVOID LockResource (HGLOBAL hResData);
  __attribute__((dllimport)) DWORD SizeofResource (HMODULE hModule, HRSRC hResInfo);
  __attribute__((dllimport)) DLL_DIRECTORY_COOKIE AddDllDirectory (PCWSTR NewDirectory);
  __attribute__((dllimport)) WINBOOL RemoveDllDirectory (DLL_DIRECTORY_COOKIE Cookie);
  __attribute__((dllimport)) WINBOOL SetDefaultDllDirectories (DWORD DirectoryFlags);
  __attribute__((dllimport)) WINBOOL GetModuleHandleExA (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  __attribute__((dllimport)) WINBOOL GetModuleHandleExW (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);

#define PGET_MODULE_HANDLE_EX
#define GetModuleHandleEx





#define LoadString
#define GetModuleFileName
#define GetModuleHandle
#define LoadLibraryEx

#define EnumResourceLanguages
  __attribute__((dllimport)) WINBOOL EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceLanguagesW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam);
# 133 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/libloaderapi.h" 3
  __attribute__((dllimport)) WINBOOL DisableThreadLibraryCalls (HMODULE hLibModule);
  __attribute__((dllimport)) WINBOOL FreeLibrary (HMODULE hLibModule);
  __attribute__((dllimport)) FARPROC GetProcAddress (HMODULE hModule, LPCSTR lpProcName);
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/memoryapi.h" 1 3





#define _MEMORYAPI_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/memoryapi.h" 3
  typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
  } MEMORY_RESOURCE_NOTIFICATION_TYPE;
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/memoryapi.h" 3
#define FILE_MAP_WRITE
#define FILE_MAP_READ
#define FILE_MAP_ALL_ACCESS
#define FILE_MAP_COPY
#define FILE_MAP_RESERVE

  __attribute__((dllimport)) SIZE_T VirtualQuery (LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
  __attribute__((dllimport)) WINBOOL FlushViewOfFile (LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
  __attribute__((dllimport)) WINBOOL UnmapViewOfFile (LPCVOID lpBaseAddress);
  __attribute__((dllimport)) HANDLE CreateFileMappingFromApp (HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
  __attribute__((dllimport)) PVOID MapViewOfFileFromApp (HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);



#define FILE_MAP_EXECUTE

#define FILE_CACHE_FLAGS_DEFINED
#define FILE_CACHE_MAX_HARD_ENABLE
#define FILE_CACHE_MAX_HARD_DISABLE
#define FILE_CACHE_MIN_HARD_ENABLE
#define FILE_CACHE_MIN_HARD_DISABLE

  __attribute__((dllimport)) LPVOID VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
  __attribute__((dllimport)) WINBOOL VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
  __attribute__((dllimport)) WINBOOL VirtualProtect (LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
  __attribute__((dllimport)) LPVOID VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
  __attribute__((dllimport)) WINBOOL VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
  __attribute__((dllimport)) WINBOOL VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
  __attribute__((dllimport)) SIZE_T VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
  __attribute__((dllimport)) WINBOOL ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
  __attribute__((dllimport)) WINBOOL WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
  __attribute__((dllimport)) HANDLE CreateFileMappingW (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE OpenFileMappingW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) LPVOID MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
  __attribute__((dllimport)) LPVOID MapViewOfFileEx (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
  __attribute__((dllimport)) SIZE_T GetLargePageMinimum (void);
  __attribute__((dllimport)) WINBOOL GetProcessWorkingSetSizeEx (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
  __attribute__((dllimport)) WINBOOL SetProcessWorkingSetSizeEx (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
  __attribute__((dllimport)) WINBOOL VirtualLock (LPVOID lpAddress, SIZE_T dwSize);
  __attribute__((dllimport)) WINBOOL VirtualUnlock (LPVOID lpAddress, SIZE_T dwSize);
  __attribute__((dllimport)) UINT GetWriteWatch (DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, LPDWORD lpdwGranularity);
  __attribute__((dllimport)) UINT ResetWriteWatch (LPVOID lpBaseAddress, SIZE_T dwRegionSize);
  __attribute__((dllimport)) HANDLE CreateMemoryResourceNotification (MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
  __attribute__((dllimport)) WINBOOL QueryMemoryResourceNotification (HANDLE ResourceNotificationHandle, PBOOL ResourceState);
  __attribute__((dllimport)) WINBOOL GetSystemFileCacheSize (PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
  __attribute__((dllimport)) WINBOOL SetSystemFileCacheSize (SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
# 26 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/namedpipeapi.h" 1 3





#define _NAMEDPIPE_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/namedpipeapi.h" 3
  __attribute__((dllimport)) WINBOOL ImpersonateNamedPipeClient (HANDLE hNamedPipe);
  __attribute__((dllimport)) WINBOOL CreatePipe (PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
  __attribute__((dllimport)) WINBOOL ConnectNamedPipe (HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL DisconnectNamedPipe (HANDLE hNamedPipe);
  __attribute__((dllimport)) WINBOOL SetNamedPipeHandleState (HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
  __attribute__((dllimport)) WINBOOL PeekNamedPipe (HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
  __attribute__((dllimport)) WINBOOL TransactNamedPipe (HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) HANDLE CreateNamedPipeW (LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL WaitNamedPipeW (LPCWSTR lpNamedPipeName, DWORD nTimeOut);
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/namespaceapi.h" 1 3





#define _APISETNAMESPACE_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/namespaceapi.h" 3
#define PRIVATE_NAMESPACE_FLAG_DESTROY

  __attribute__((dllimport)) HANDLE CreatePrivateNamespaceW (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE OpenPrivateNamespaceW (LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);




  __attribute__((dllimport)) BOOLEAN ClosePrivateNamespace (HANDLE Handle, ULONG Flags);
  __attribute__((dllimport)) HANDLE CreateBoundaryDescriptorW (LPCWSTR Name, ULONG Flags);




  __attribute__((dllimport)) WINBOOL AddSIDToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID RequiredSid);
  __attribute__((dllimport)) void DeleteBoundaryDescriptor (HANDLE BoundaryDescriptor);
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processenv.h" 1 3






#define _PROCESSENV_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processenv.h" 3
  __attribute__((dllimport)) LPCH GetEnvironmentStrings (void);
  __attribute__((dllimport)) LPWCH GetEnvironmentStringsW (void);
  __attribute__((dllimport)) WINBOOL SetEnvironmentStringsW (LPWCH NewEnvironment);





#define GetEnvironmentStringsA


  __attribute__((dllimport)) WINBOOL FreeEnvironmentStringsA (LPCH penv);
  __attribute__((dllimport)) WINBOOL FreeEnvironmentStringsW (LPWCH penv);
  __attribute__((dllimport)) HANDLE GetStdHandle (DWORD nStdHandle);
  __attribute__((dllimport)) WINBOOL SetStdHandle (DWORD nStdHandle, HANDLE hHandle);



  __attribute__((dllimport)) LPSTR GetCommandLineA (void);
  __attribute__((dllimport)) LPWSTR GetCommandLineW (void);
  __attribute__((dllimport)) DWORD GetEnvironmentVariableA (LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
  __attribute__((dllimport)) DWORD GetEnvironmentVariableW (LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
  __attribute__((dllimport)) WINBOOL SetEnvironmentVariableA (LPCSTR lpName, LPCSTR lpValue);
  __attribute__((dllimport)) WINBOOL SetEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpValue);
  __attribute__((dllimport)) DWORD ExpandEnvironmentStringsA (LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
  __attribute__((dllimport)) DWORD ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
  __attribute__((dllimport)) WINBOOL SetCurrentDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL SetCurrentDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) DWORD GetCurrentDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) DWORD GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) DWORD SearchPathW (LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
  __attribute__((dllimport)) DWORD SearchPathA (LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
  __attribute__((dllimport)) WINBOOL NeedCurrentDirectoryForExePathA (LPCSTR ExeName);
  __attribute__((dllimport)) WINBOOL NeedCurrentDirectoryForExePathW (LPCWSTR ExeName);

#define ExpandEnvironmentStrings
#define FreeEnvironmentStrings
#define GetCommandLine
#define GetCurrentDirectory
#define GetEnvironmentVariable
#define NeedCurrentDirectoryForExePath
#define SearchPath
#define SetCurrentDirectory
#define SetEnvironmentVariable
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processthreadsapi.h" 1 3





#define _PROCESSTHREADSAPI_H_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processthreadsapi.h" 3
#define FLS_OUT_OF_INDEXES


#define TLS_OUT_OF_INDEXES

  typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
  } PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

  typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOA, *LPSTARTUPINFOA;

  typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOW, *LPSTARTUPINFOW;

  typedef STARTUPINFOA STARTUPINFO;
  typedef LPSTARTUPINFOA LPSTARTUPINFO;

  typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

  __attribute__((dllimport)) DWORD QueueUserAPC (PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL GetProcessTimes (HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) __attribute__((noreturn)) void ExitProcess (UINT uExitCode);
  __attribute__((dllimport)) WINBOOL TerminateProcess (HANDLE hProcess, UINT uExitCode);
  __attribute__((dllimport)) WINBOOL GetExitCodeProcess (HANDLE hProcess, LPDWORD lpExitCode);
  __attribute__((dllimport)) WINBOOL SwitchToThread (void);
  __attribute__((dllimport)) HANDLE CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
  __attribute__((dllimport)) HANDLE CreateRemoteThread (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
  __attribute__((dllimport)) HANDLE OpenThread (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
  __attribute__((dllimport)) WINBOOL SetThreadPriority (HANDLE hThread, int nPriority);
  __attribute__((dllimport)) WINBOOL SetThreadPriorityBoost (HANDLE hThread, WINBOOL bDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL GetThreadPriorityBoost (HANDLE hThread, PBOOL pDisablePriorityBoost);
  __attribute__((dllimport)) int GetThreadPriority (HANDLE hThread);
  __attribute__((dllimport)) __attribute__((noreturn)) void ExitThread (DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL TerminateThread (HANDLE hThread, DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL GetExitCodeThread (HANDLE hThread, LPDWORD lpExitCode);
  __attribute__((dllimport)) DWORD SuspendThread (HANDLE hThread);
  __attribute__((dllimport)) DWORD ResumeThread (HANDLE hThread);
  __attribute__((dllimport)) DWORD TlsAlloc (void);
  __attribute__((dllimport)) LPVOID TlsGetValue (DWORD dwTlsIndex);
  __attribute__((dllimport)) WINBOOL TlsSetValue (DWORD dwTlsIndex, LPVOID lpTlsValue);
  __attribute__((dllimport)) WINBOOL TlsFree (DWORD dwTlsIndex);
  __attribute__((dllimport)) WINBOOL SetProcessShutdownParameters (DWORD dwLevel, DWORD dwFlags);
  __attribute__((dllimport)) DWORD GetProcessVersion (DWORD ProcessId);
  __attribute__((dllimport)) void GetStartupInfoW (LPSTARTUPINFOW lpStartupInfo);
  __attribute__((dllimport)) WINBOOL SetThreadToken (PHANDLE Thread, HANDLE Token);
  __attribute__((dllimport)) WINBOOL OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL OpenThreadToken (HANDLE ThreadHandle, DWORD DesiredAccess, WINBOOL OpenAsSelf, PHANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL SetPriorityClass (HANDLE hProcess, DWORD dwPriorityClass);
  __attribute__((dllimport)) WINBOOL SetThreadStackGuarantee (PULONG StackSizeInBytes);
  __attribute__((dllimport)) DWORD GetPriorityClass (HANDLE hProcess);
  __attribute__((dllimport)) WINBOOL ProcessIdToSessionId (DWORD dwProcessId, DWORD *pSessionId);
  __attribute__((dllimport)) DWORD GetProcessId (HANDLE Process);
  __attribute__((dllimport)) DWORD GetThreadId (HANDLE Thread);
  __attribute__((dllimport)) HANDLE CreateRemoteThreadEx (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
  __attribute__((dllimport)) WINBOOL GetThreadContext (HANDLE hThread, LPCONTEXT lpContext);
  __attribute__((dllimport)) WINBOOL SetThreadContext (HANDLE hThread, const CONTEXT *lpContext);
  __attribute__((dllimport)) WINBOOL FlushInstructionCache (HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
  __attribute__((dllimport)) WINBOOL GetThreadTimes (HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) HANDLE OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL GetProcessHandleCount (HANDLE hProcess, PDWORD pdwHandleCount);
  __attribute__((dllimport)) DWORD GetCurrentProcessorNumber (void);






  __attribute__((dllimport)) WINBOOL CreateProcessA (LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL CreateProcessW (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
#define CreateProcess



  __attribute__((dllimport)) WINBOOL CreateProcessAsUserW (HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
# 164 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processthreadsapi.h" 3
  __attribute__((dllimport)) HANDLE GetCurrentProcess (void);
  __attribute__((dllimport)) DWORD GetCurrentProcessId (void);
  __attribute__((dllimport)) HANDLE GetCurrentThread (void);
  __attribute__((dllimport)) DWORD GetCurrentThreadId (void);
  WINBOOL IsProcessorFeaturePresent (DWORD ProcessorFeature);
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/processtopologyapi.h" 1 3





#define _PROCESSTOPOLOGYAPI_H_
# 31 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/profileapi.h" 1 3





#define _PROFILEAPI_H_
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/profileapi.h" 3
  __attribute__((dllimport)) WINBOOL QueryPerformanceCounter (LARGE_INTEGER *lpPerformanceCount);
  __attribute__((dllimport)) WINBOOL QueryPerformanceFrequency (LARGE_INTEGER *lpFrequency);
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/realtimeapiset.h" 1 3





#define _APISETREALTIME_
# 33 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/securityappcontainer.h" 1 3





#define _APIAPPCONTAINER_
# 34 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/securitybaseapi.h" 1 3





#define _APISECUREBASE_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/securitybaseapi.h" 3
  __attribute__((dllimport)) WINBOOL AccessCheck (PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
  __attribute__((dllimport)) WINBOOL AccessCheckAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL AccessCheckByType (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
  __attribute__((dllimport)) WINBOOL AccessCheckByTypeResultList (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
  __attribute__((dllimport)) WINBOOL AccessCheckByTypeAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL AccessCheckByTypeResultListAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL AddAccessAllowedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAccessAllowedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAccessAllowedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAccessDeniedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAccessDeniedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAccessDeniedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
  __attribute__((dllimport)) WINBOOL AddAce (PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
  __attribute__((dllimport)) WINBOOL AddAuditAccessAce (PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
  __attribute__((dllimport)) WINBOOL AddAuditAccessAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
  __attribute__((dllimport)) WINBOOL AddAuditAccessObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
# 60 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/securitybaseapi.h" 3
  __attribute__((dllimport)) WINBOOL AdjustTokenGroups (HANDLE TokenHandle, WINBOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL AdjustTokenPrivileges (HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL AllocateAndInitializeSid (PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
  __attribute__((dllimport)) WINBOOL AllocateLocallyUniqueId (PLUID Luid);
  __attribute__((dllimport)) WINBOOL AreAllAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
  __attribute__((dllimport)) WINBOOL AreAnyAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
  __attribute__((dllimport)) WINBOOL CheckTokenMembership (HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);







  __attribute__((dllimport)) WINBOOL ConvertToAutoInheritPrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL CopySid (DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
  __attribute__((dllimport)) WINBOOL CreatePrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, WINBOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL CreatePrivateObjectSecurityEx (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL CreatePrivateObjectSecurityWithMultipleInheritance (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL CreateRestrictedToken (HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
  __attribute__((dllimport)) WINBOOL CreateWellKnownSid (WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid);
  __attribute__((dllimport)) WINBOOL EqualDomainSid (PSID pSid1, PSID pSid2, WINBOOL *pfEqual);

  __attribute__((dllimport)) WINBOOL DeleteAce (PACL pAcl, DWORD dwAceIndex);
  __attribute__((dllimport)) WINBOOL DestroyPrivateObjectSecurity (PSECURITY_DESCRIPTOR *ObjectDescriptor);
  __attribute__((dllimport)) WINBOOL DuplicateToken (HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
  __attribute__((dllimport)) WINBOOL DuplicateTokenEx (HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
  __attribute__((dllimport)) WINBOOL EqualPrefixSid (PSID pSid1, PSID pSid2);
  __attribute__((dllimport)) WINBOOL EqualSid (PSID pSid1, PSID pSid2);
  __attribute__((dllimport)) WINBOOL FindFirstFreeAce (PACL pAcl, LPVOID *pAce);
  __attribute__((dllimport)) PVOID FreeSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
  __attribute__((dllimport)) WINBOOL GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
  __attribute__((dllimport)) WINBOOL GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);




  __attribute__((dllimport)) WINBOOL GetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) DWORD GetLengthSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL GetPrivateObjectSecurity (PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL GetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
  __attribute__((dllimport)) WINBOOL GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
  __attribute__((dllimport)) WINBOOL GetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted);
  __attribute__((dllimport)) DWORD GetSecurityDescriptorLength (PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
  __attribute__((dllimport)) DWORD GetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
  __attribute__((dllimport)) WINBOOL GetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
  __attribute__((dllimport)) PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority (PSID pSid);
  __attribute__((dllimport)) DWORD GetSidLengthRequired (UCHAR nSubAuthorityCount);
  __attribute__((dllimport)) PDWORD GetSidSubAuthority (PSID pSid, DWORD nSubAuthority);
  __attribute__((dllimport)) PUCHAR GetSidSubAuthorityCount (PSID pSid);
  __attribute__((dllimport)) WINBOOL GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL GetWindowsAccountDomainSid (PSID pSid, PSID pDomainSid, DWORD *cbDomainSid);
  __attribute__((dllimport)) WINBOOL ImpersonateAnonymousToken (HANDLE ThreadHandle);
  __attribute__((dllimport)) WINBOOL ImpersonateLoggedOnUser (HANDLE hToken);
  __attribute__((dllimport)) WINBOOL ImpersonateSelf (SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
  __attribute__((dllimport)) WINBOOL InitializeAcl (PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
  __attribute__((dllimport)) WINBOOL InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
  __attribute__((dllimport)) WINBOOL InitializeSid (PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
  __attribute__((dllimport)) WINBOOL IsTokenRestricted (HANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL IsValidAcl (PACL pAcl);
  __attribute__((dllimport)) WINBOOL IsValidSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL IsValidSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL IsWellKnownSid (PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
  __attribute__((dllimport)) WINBOOL MakeAbsoluteSD (PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
  __attribute__((dllimport)) WINBOOL MakeSelfRelativeSD (PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
  __attribute__((dllimport)) void MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL ObjectCloseAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL ObjectDeleteAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL ObjectOpenAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL ObjectPrivilegeAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);




  __attribute__((dllimport)) WINBOOL PrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
  __attribute__((dllimport)) WINBOOL PrivilegedServiceAuditAlarmW (LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
# 158 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/securitybaseapi.h" 3
  __attribute__((dllimport)) WINBOOL RevertToSelf (void);
  __attribute__((dllimport)) WINBOOL SetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
  __attribute__((dllimport)) WINBOOL SetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);




  __attribute__((dllimport)) WINBOOL SetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
  __attribute__((dllimport)) WINBOOL SetPrivateObjectSecurity (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
  __attribute__((dllimport)) WINBOOL SetPrivateObjectSecurityEx (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);





  __attribute__((dllimport)) WINBOOL SetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
  __attribute__((dllimport)) WINBOOL SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
  __attribute__((dllimport)) WINBOOL SetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, WINBOOL bGroupDefaulted);
  __attribute__((dllimport)) WINBOOL SetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, WINBOOL bOwnerDefaulted);
  __attribute__((dllimport)) DWORD SetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
  __attribute__((dllimport)) WINBOOL SetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bSaclPresent, PACL pSacl, WINBOOL bSaclDefaulted);
  __attribute__((dllimport)) WINBOOL SetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
# 35 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/synchapi.h" 1 3





#define _SYNCHAPI_H_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/synchapi.h" 3
#define SRWLOCK_INIT

#define INIT_ONCE_STATIC_INIT

#define INIT_ONCE_CHECK_ONLY
#define INIT_ONCE_ASYNC
#define INIT_ONCE_INIT_FAILED

#define INIT_ONCE_CTX_RESERVED_BITS

#define CONDITION_VARIABLE_INIT

#define CONDITION_VARIABLE_LOCKMODE_SHARED

#define MUTEX_MODIFY_STATE
#define MUTEX_ALL_ACCESS

  typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

  typedef RTL_RUN_ONCE INIT_ONCE;
  typedef PRTL_RUN_ONCE PINIT_ONCE;
  typedef PRTL_RUN_ONCE LPINIT_ONCE;

  typedef WINBOOL ( *PINIT_ONCE_FN) (PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context);
  typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

  __attribute__((dllimport)) void EnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) void LeaveCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL TryEnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) void DeleteCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL SetEvent (HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL ResetEvent (HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL ReleaseSemaphore (HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
  __attribute__((dllimport)) WINBOOL ReleaseMutex (HANDLE hMutex);
  __attribute__((dllimport)) DWORD WaitForSingleObjectEx (HANDLE hHandle, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) DWORD WaitForMultipleObjectsEx (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) HANDLE OpenMutexW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE OpenEventA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE OpenEventW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE OpenSemaphoreW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  WINBOOL WaitOnAddress (volatile void *Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds);
  void WakeByAddressSingle (PVOID Address);
  void WakeByAddressAll (PVOID Address);
# 100 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/synchapi.h" 3
#define OpenEvent

  typedef void ( *PTIMERAPCROUTINE) (LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);

  typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;

#define SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY
#define SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY
#define SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE

  __attribute__((dllimport)) void InitializeCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL InitializeCriticalSectionAndSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
  __attribute__((dllimport)) DWORD SetCriticalSectionSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
  __attribute__((dllimport)) DWORD WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
  __attribute__((dllimport)) DWORD SleepEx (DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) HANDLE CreateMutexA (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE CreateMutexW (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE CreateEventA (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE CreateEventW (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCWSTR lpName);
  __attribute__((dllimport)) WINBOOL SetWaitableTimer (HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, WINBOOL fResume);
  __attribute__((dllimport)) WINBOOL CancelWaitableTimer (HANDLE hTimer);
  __attribute__((dllimport)) HANDLE OpenWaitableTimerW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpTimerName);
  WINBOOL EnterSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags);
  WINBOOL InitializeSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount);
  WINBOOL DeleteSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier);
  __attribute__((dllimport)) void Sleep (DWORD dwMilliseconds);
  __attribute__((dllimport)) DWORD SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
# 142 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/synchapi.h" 3
#define CreateMutex
#define CreateEvent
# 36 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sysinfoapi.h" 1 3





#define _SYSINFOAPI_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sysinfoapi.h" 3
  typedef struct _SYSTEM_INFO {
    __extension__ union {
      DWORD dwOemId;
      __extension__ struct {
 WORD wProcessorArchitecture;
 WORD wReserved;
      } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
  } SYSTEM_INFO, *LPSYSTEM_INFO;

  __attribute__((dllimport)) void GetSystemTime (LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) void GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
  __attribute__((dllimport)) void GetLocalTime (LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) void GetNativeSystemInfo (LPSYSTEM_INFO lpSystemInfo);






  __attribute__((dllimport)) DWORD GetVersion (void);

  typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
  } MEMORYSTATUSEX,*LPMEMORYSTATUSEX;

  typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
  } COMPUTER_NAME_FORMAT;

  __attribute__((dllimport)) WINBOOL GlobalMemoryStatusEx (LPMEMORYSTATUSEX lpBuffer);
  __attribute__((dllimport)) WINBOOL SetLocalTime (const SYSTEMTIME *lpSystemTime);
  __attribute__((dllimport)) void GetSystemInfo (LPSYSTEM_INFO lpSystemInfo);
  __attribute__((dllimport)) DWORD GetTickCount (void);
  __attribute__((dllimport)) WINBOOL GetSystemTimeAdjustment (PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
  __attribute__((dllimport)) UINT GetSystemDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetSystemDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetSystemWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetSystemWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) WINBOOL GetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL SetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL SetSystemTime (const SYSTEMTIME *lpSystemTime);
  __attribute__((dllimport)) WINBOOL GetVersionExA (LPOSVERSIONINFOA lpVersionInformation);
  __attribute__((dllimport)) WINBOOL GetVersionExW (LPOSVERSIONINFOW lpVersionInformation);
  __attribute__((dllimport)) WINBOOL GetLogicalProcessorInformation (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
  __attribute__((dllimport)) ULONGLONG VerSetConditionMask (ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
  __attribute__((dllimport)) void GetSystemTimePreciseAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
  __attribute__((dllimport)) UINT EnumSystemFirmwareTables (DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
  __attribute__((dllimport)) UINT GetSystemFirmwareTable (DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
# 103 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sysinfoapi.h" 3
#define GetSystemDirectory
#define GetWindowsDirectory
#define GetSystemWindowsDirectory
#define GetComputerNameEx
#define GetVersionEx
# 37 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/systemtopologyapi.h" 1 3





#define _SYSTEMTOPOLOGY_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/systemtopologyapi.h" 3
  __attribute__((dllimport)) WINBOOL GetNumaHighestNodeNumber (PULONG HighestNodeNumber);
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/threadpoolapiset.h" 1 3





#define _THREADPOOLAPISET_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/threadpoolapiset.h" 3
  typedef void ( *PTP_WIN32_IO_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io);
# 39 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/threadpoollegacyapiset.h" 1 3





#define _THREADPOOLLEGACYAPISET_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/threadpoollegacyapiset.h" 3
  __attribute__((dllimport)) WINBOOL QueueUserWorkItem (LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
  __attribute__((dllimport)) WINBOOL UnregisterWaitEx (HANDLE WaitHandle, HANDLE CompletionEvent);
  __attribute__((dllimport)) HANDLE CreateTimerQueue (void);
  __attribute__((dllimport)) WINBOOL CreateTimerQueueTimer (PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
  __attribute__((dllimport)) WINBOOL ChangeTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
  __attribute__((dllimport)) WINBOOL DeleteTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
  __attribute__((dllimport)) WINBOOL DeleteTimerQueueEx (HANDLE TimerQueue, HANDLE CompletionEvent);
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/utilapiset.h" 1 3





#define _APISETUTIL_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/utilapiset.h" 3
  __attribute__((dllimport)) PVOID EncodePointer (PVOID Ptr);
  __attribute__((dllimport)) PVOID DecodePointer (PVOID Ptr);



  __attribute__((dllimport)) PVOID EncodeSystemPointer (PVOID Ptr);
  __attribute__((dllimport)) PVOID DecodeSystemPointer (PVOID Ptr);
  __attribute__((dllimport)) WINBOOL Beep (DWORD dwFreq, DWORD dwDuration);
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wow64apiset.h" 1 3





#define _WOW64APISET_H_
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wow64apiset.h" 3
  __attribute__((dllimport)) WINBOOL Wow64DisableWow64FsRedirection (PVOID *OldValue);
  __attribute__((dllimport)) WINBOOL Wow64RevertWow64FsRedirection (PVOID OlValue);
  __attribute__((dllimport)) WINBOOL IsWow64Process (HANDLE hProcess, PBOOL Wow64Process);
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3


#define __INTRINSIC_GROUP_WINBASE
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 1 3
# 346 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#define __INTRINSIC_PROLOG




#define __INTRINSICS_USEINLINE
# 451 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#undef __INTRINSIC_GROUP_WINBASE


#define __INTRINSIC_ONLYSPECIAL

#define __INTRINSIC_SPECIAL__InterlockedIncrement
#define __INTRINSIC_SPECIAL__InterlockedDecrement
#define __INTRINSIC_SPECIAL__InterlockedExchange
#define __INTRINSIC_SPECIAL__InterlockedExchangeAdd
#define __INTRINSIC_SPECIAL__InterlockedCompareExchange
#define __INTRINSIC_SPECIAL__InterlockedCompareExchangePointer
#define __INTRINSIC_SPECIAL__InterlockedExchangePointer
#define __INTRINSIC_SPECIAL__InterlockedAnd64
#define __INTRINSIC_SPECIAL__InterlockedOr64
#define __INTRINSIC_SPECIAL__InterlockedXor64
#define __INTRINSIC_SPECIAL__InterlockedIncrement64
#define __INTRINSIC_SPECIAL__InterlockedDecrement64
#define __INTRINSIC_SPECIAL__InterlockedExchange64
#define __INTRINSIC_SPECIAL__InterlockedExchangeAdd64
#define __INTRINSIC_SPECIAL__InterlockedCompareExchange64
# 1340 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/intrin-impl.h" 3
#undef __INTRINSIC_ONLYSPECIAL
#undef __INTRINSIC_PROLOG
#undef __INTRINSIC_EPILOG
#undef __INTRINSICS_USEINLINE
# 46 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3







#define GetCurrentTime



#define DefineHandleTable
#define LimitEmsPages
#define SetSwapAreaSize
#define LockSegment
#define UnlockSegment

#define Yield

#define FILE_BEGIN
#define FILE_CURRENT
#define FILE_END

#define WAIT_FAILED
#define WAIT_OBJECT_0

#define WAIT_ABANDONED
#define WAIT_ABANDONED_0

#define WAIT_IO_COMPLETION

#define SecureZeroMemory
#define CaptureStackBackTrace

#define FILE_FLAG_WRITE_THROUGH
#define FILE_FLAG_OVERLAPPED
#define FILE_FLAG_NO_BUFFERING
#define FILE_FLAG_RANDOM_ACCESS
#define FILE_FLAG_SEQUENTIAL_SCAN
#define FILE_FLAG_DELETE_ON_CLOSE
#define FILE_FLAG_BACKUP_SEMANTICS
#define FILE_FLAG_POSIX_SEMANTICS
#define FILE_FLAG_SESSION_AWARE
#define FILE_FLAG_OPEN_REPARSE_POINT
#define FILE_FLAG_OPEN_NO_RECALL
#define FILE_FLAG_FIRST_PIPE_INSTANCE




#define PROGRESS_CONTINUE
#define PROGRESS_CANCEL
#define PROGRESS_STOP
#define PROGRESS_QUIET

#define CALLBACK_CHUNK_FINISHED
#define CALLBACK_STREAM_SWITCH

#define COPY_FILE_FAIL_IF_EXISTS
#define COPY_FILE_RESTARTABLE
#define COPY_FILE_OPEN_SOURCE_FOR_WRITE
#define COPY_FILE_ALLOW_DECRYPTED_DESTINATION
# 118 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define REPLACEFILE_WRITE_THROUGH
#define REPLACEFILE_IGNORE_MERGE_ERRORS




#define PIPE_ACCESS_INBOUND
#define PIPE_ACCESS_OUTBOUND
#define PIPE_ACCESS_DUPLEX

#define PIPE_CLIENT_END
#define PIPE_SERVER_END

#define PIPE_WAIT
#define PIPE_NOWAIT
#define PIPE_READMODE_BYTE
#define PIPE_READMODE_MESSAGE
#define PIPE_TYPE_BYTE
#define PIPE_TYPE_MESSAGE
#define PIPE_ACCEPT_REMOTE_CLIENTS
#define PIPE_REJECT_REMOTE_CLIENTS

#define PIPE_UNLIMITED_INSTANCES

#define SECURITY_ANONYMOUS
#define SECURITY_IDENTIFICATION
#define SECURITY_IMPERSONATION
#define SECURITY_DELEGATION

#define SECURITY_CONTEXT_TRACKING
#define SECURITY_EFFECTIVE_ONLY

#define SECURITY_SQOS_PRESENT
#define SECURITY_VALID_SQOS_FLAGS

#define FAIL_FAST_GENERATE_EXCEPTION_ADDRESS
#define FAIL_FAST_NO_HARD_ERROR_DLG

  typedef void ( *PFIBER_START_ROUTINE) (LPVOID lpFiberParameter);
  typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;




  typedef LPVOID LPLDT_ENTRY;


#define SP_SERIALCOMM
#define PST_UNSPECIFIED
#define PST_RS232
#define PST_PARALLELPORT
#define PST_RS422
#define PST_RS423
#define PST_RS449
#define PST_MODEM
#define PST_FAX
#define PST_SCANNER
#define PST_NETWORK_BRIDGE
#define PST_LAT
#define PST_TCPIP_TELNET
#define PST_X25

#define PCF_DTRDSR
#define PCF_RTSCTS
#define PCF_RLSD
#define PCF_PARITY_CHECK
#define PCF_XONXOFF
#define PCF_SETXCHAR
#define PCF_TOTALTIMEOUTS
#define PCF_INTTIMEOUTS
#define PCF_SPECIALCHARS
#define PCF_16BITMODE

#define SP_PARITY
#define SP_BAUD
#define SP_DATABITS
#define SP_STOPBITS
#define SP_HANDSHAKING
#define SP_PARITY_CHECK
#define SP_RLSD

#define BAUD_075
#define BAUD_110
#define BAUD_134_5
#define BAUD_150
#define BAUD_300
#define BAUD_600
#define BAUD_1200
#define BAUD_1800
#define BAUD_2400
#define BAUD_4800
#define BAUD_7200
#define BAUD_9600
#define BAUD_14400
#define BAUD_19200
#define BAUD_38400
#define BAUD_56K
#define BAUD_128K
#define BAUD_115200
#define BAUD_57600
#define BAUD_USER

#define DATABITS_5
#define DATABITS_6
#define DATABITS_7
#define DATABITS_8
#define DATABITS_16
#define DATABITS_16X

#define STOPBITS_10
#define STOPBITS_15
#define STOPBITS_20
#define PARITY_NONE
#define PARITY_ODD
#define PARITY_EVEN
#define PARITY_MARK
#define PARITY_SPACE

  typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
  } COMMPROP,*LPCOMMPROP;

#define COMMPROP_INITIALIZED

  typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
  } COMSTAT,*LPCOMSTAT;

#define DTR_CONTROL_DISABLE
#define DTR_CONTROL_ENABLE
#define DTR_CONTROL_HANDSHAKE

#define RTS_CONTROL_DISABLE
#define RTS_CONTROL_ENABLE
#define RTS_CONTROL_HANDSHAKE
#define RTS_CONTROL_TOGGLE

  typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
  } DCB,*LPDCB;

  typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
  } COMMTIMEOUTS,*LPCOMMTIMEOUTS;

  typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
  } COMMCONFIG,*LPCOMMCONFIG;

#define FreeModule
#define MakeProcInstance
#define FreeProcInstance

#define GMEM_FIXED
#define GMEM_MOVEABLE
#define GMEM_NOCOMPACT
#define GMEM_NODISCARD
#define GMEM_ZEROINIT
#define GMEM_MODIFY
#define GMEM_DISCARDABLE
#define GMEM_NOT_BANKED
#define GMEM_SHARE
#define GMEM_DDESHARE
#define GMEM_NOTIFY
#define GMEM_LOWER
#define GMEM_VALID_FLAGS
#define GMEM_INVALID_HANDLE

#define GHND
#define GPTR

#define GlobalLRUNewest
#define GlobalLRUOldest
#define GlobalDiscard

#define GMEM_DISCARDED
#define GMEM_LOCKCOUNT

  typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
  } MEMORYSTATUS,*LPMEMORYSTATUS;

#define NUMA_NO_PREFERRED_NODE

#define DEBUG_PROCESS
#define DEBUG_ONLY_THIS_PROCESS
#define CREATE_SUSPENDED
#define DETACHED_PROCESS
#define CREATE_NEW_CONSOLE
#define NORMAL_PRIORITY_CLASS
#define IDLE_PRIORITY_CLASS
#define HIGH_PRIORITY_CLASS
#define REALTIME_PRIORITY_CLASS
#define CREATE_NEW_PROCESS_GROUP
#define CREATE_UNICODE_ENVIRONMENT
#define CREATE_SEPARATE_WOW_VDM
#define CREATE_SHARED_WOW_VDM
#define CREATE_FORCEDOS
#define BELOW_NORMAL_PRIORITY_CLASS
#define ABOVE_NORMAL_PRIORITY_CLASS
#define INHERIT_PARENT_AFFINITY
#define INHERIT_CALLER_PRIORITY
#define CREATE_PROTECTED_PROCESS
#define EXTENDED_STARTUPINFO_PRESENT
#define PROCESS_MODE_BACKGROUND_BEGIN
#define PROCESS_MODE_BACKGROUND_END
#define CREATE_BREAKAWAY_FROM_JOB
#define CREATE_PRESERVE_CODE_AUTHZ_LEVEL
#define CREATE_DEFAULT_ERROR_MODE
#define CREATE_NO_WINDOW
#define PROFILE_USER
#define PROFILE_KERNEL
#define PROFILE_SERVER
#define CREATE_IGNORE_SYSTEM_DEFAULT

#define STACK_SIZE_PARAM_IS_A_RESERVATION

#define THREAD_PRIORITY_LOWEST
#define THREAD_PRIORITY_BELOW_NORMAL
#define THREAD_PRIORITY_NORMAL
#define THREAD_PRIORITY_HIGHEST
#define THREAD_PRIORITY_ABOVE_NORMAL
#define THREAD_PRIORITY_ERROR_RETURN

#define THREAD_PRIORITY_TIME_CRITICAL
#define THREAD_PRIORITY_IDLE

#define THREAD_MODE_BACKGROUND_BEGIN
#define THREAD_MODE_BACKGROUND_END

#define VOLUME_NAME_DOS
#define VOLUME_NAME_GUID
#define VOLUME_NAME_NT
#define VOLUME_NAME_NONE

#define FILE_NAME_NORMALIZED
#define FILE_NAME_OPENED

  typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
  } JIT_DEBUG_INFO,*LPJIT_DEBUG_INFO;

  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


  typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
  typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;


#define DRIVE_UNKNOWN
#define DRIVE_NO_ROOT_DIR
#define DRIVE_REMOVABLE
#define DRIVE_FIXED
#define DRIVE_REMOTE
#define DRIVE_CDROM
#define DRIVE_RAMDISK

#define GetFreeSpace

#define FILE_TYPE_UNKNOWN
#define FILE_TYPE_DISK
#define FILE_TYPE_CHAR
#define FILE_TYPE_PIPE
#define FILE_TYPE_REMOTE

#define STD_INPUT_HANDLE
#define STD_OUTPUT_HANDLE
#define STD_ERROR_HANDLE

#define NOPARITY
#define ODDPARITY
#define EVENPARITY
#define MARKPARITY
#define SPACEPARITY

#define ONESTOPBIT
#define ONE5STOPBITS
#define TWOSTOPBITS

#define IGNORE
#define INFINITE

#define CBR_110
#define CBR_300
#define CBR_600
#define CBR_1200
#define CBR_2400
#define CBR_4800
#define CBR_9600
#define CBR_14400
#define CBR_19200
#define CBR_38400
#define CBR_56000
#define CBR_57600
#define CBR_115200
#define CBR_128000
#define CBR_256000

#define CE_RXOVER
#define CE_OVERRUN
#define CE_RXPARITY
#define CE_FRAME
#define CE_BREAK
#define CE_TXFULL
#define CE_PTO
#define CE_IOE
#define CE_DNS
#define CE_OOP
#define CE_MODE

#define IE_BADID
#define IE_OPEN
#define IE_NOPEN
#define IE_MEMORY
#define IE_DEFAULT
#define IE_HARDWARE
#define IE_BYTESIZE
#define IE_BAUDRATE

#define EV_RXCHAR
#define EV_RXFLAG
#define EV_TXEMPTY
#define EV_CTS
#define EV_DSR
#define EV_RLSD
#define EV_BREAK
#define EV_ERR
#define EV_RING
#define EV_PERR
#define EV_RX80FULL
#define EV_EVENT1
#define EV_EVENT2

#define SETXOFF
#define SETXON
#define SETRTS
#define CLRRTS
#define SETDTR
#define CLRDTR
#define RESETDEV
#define SETBREAK
#define CLRBREAK

#define PURGE_TXABORT
#define PURGE_RXABORT
#define PURGE_TXCLEAR
#define PURGE_RXCLEAR

#define LPTx

#define MS_CTS_ON
#define MS_DSR_ON
#define MS_RING_ON
#define MS_RLSD_ON

#define S_QUEUEEMPTY
#define S_THRESHOLD
#define S_ALLTHRESHOLD

#define S_NORMAL
#define S_LEGATO
#define S_STACCATO

#define S_PERIOD512
#define S_PERIOD1024
#define S_PERIOD2048
#define S_PERIODVOICE
#define S_WHITE512
#define S_WHITE1024
#define S_WHITE2048
#define S_WHITEVOICE

#define S_SERDVNA
#define S_SEROFM
#define S_SERMACT
#define S_SERQFUL
#define S_SERBDNT
#define S_SERDLN
#define S_SERDCC
#define S_SERDTP
#define S_SERDVL
#define S_SERDMD
#define S_SERDSH
#define S_SERDPT
#define S_SERDFQ
#define S_SERDDR
#define S_SERDSR
#define S_SERDST

#define NMPWAIT_WAIT_FOREVER
#define NMPWAIT_NOWAIT
#define NMPWAIT_USE_DEFAULT_WAIT

#define FS_CASE_IS_PRESERVED
#define FS_CASE_SENSITIVE
#define FS_UNICODE_STORED_ON_DISK
#define FS_PERSISTENT_ACLS
#define FS_VOL_IS_COMPRESSED
#define FS_FILE_COMPRESSION
#define FS_FILE_ENCRYPTION

#define OF_READ
#define OF_WRITE
#define OF_READWRITE
#define OF_SHARE_COMPAT
#define OF_SHARE_EXCLUSIVE
#define OF_SHARE_DENY_WRITE
#define OF_SHARE_DENY_READ
#define OF_SHARE_DENY_NONE
#define OF_PARSE
#define OF_DELETE
#define OF_VERIFY
#define OF_CANCEL
#define OF_CREATE
#define OF_PROMPT
#define OF_EXIST
#define OF_REOPEN

#define OFS_MAXPATHNAME

  typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
  } OFSTRUCT, *LPOFSTRUCT,*POFSTRUCT;
# 871 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define InterlockedIncrement
#define InterlockedIncrementAcquire
#define InterlockedIncrementRelease
#define InterlockedDecrement
#define InterlockedDecrementAcquire
#define InterlockedDecrementRelease
#define InterlockedExchange
#define InterlockedExchangeAdd
#define InterlockedCompareExchange
#define InterlockedCompareExchangeAcquire
#define InterlockedCompareExchangeRelease
#define InterlockedExchangePointer
#define InterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerAcquire
#define InterlockedCompareExchangePointerRelease
#define InterlockedAnd64
#define InterlockedOr64
#define InterlockedXor64
#define InterlockedIncrement64
#define InterlockedDecrement64
#define InterlockedExchange64
#define InterlockedExchangeAdd64
#define InterlockedCompareExchange64
#define InterlockedCompareExchangeAcquire64
#define InterlockedCompareExchangeRelease64

#define InterlockedAnd8
#define InterlockedOr8
#define InterlockedXor8
#define InterlockedAnd16
#define InterlockedOr16
#define InterlockedXor16

  LONG __attribute__((__cdecl__)) _InterlockedAnd(LONG volatile *Destination, LONG Value);
  LONG __attribute__((__cdecl__)) _InterlockedOr(LONG volatile *Destination, LONG Value);
  LONG __attribute__((__cdecl__)) _InterlockedXor(LONG volatile *Destination, LONG Value);
# 924 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  char __attribute__((__cdecl__)) _InterlockedAnd8(char volatile *Destination, char Value);
  char __attribute__((__cdecl__)) _InterlockedOr8(char volatile *Destination, char Value);
  char __attribute__((__cdecl__)) _InterlockedXor8(char volatile *Destination, char Value);
  SHORT __attribute__((__cdecl__)) _InterlockedAnd16(SHORT volatile *Destination, SHORT Value);
  SHORT __attribute__((__cdecl__)) _InterlockedOr16(SHORT volatile *Destination, SHORT Value);
  SHORT __attribute__((__cdecl__)) _InterlockedXor16(SHORT volatile *Destination, SHORT Value);
# 1058 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define UnlockResource
#define MAXINTATOM
#define MAKEINTATOM
#define INVALID_ATOM



  int WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
  int wWinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
  __attribute__((dllimport)) HGLOBAL GlobalAlloc (UINT uFlags, SIZE_T dwBytes);
  __attribute__((dllimport)) HGLOBAL GlobalReAlloc (HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
  __attribute__((dllimport)) SIZE_T GlobalSize (HGLOBAL hMem);
  __attribute__((dllimport)) UINT GlobalFlags (HGLOBAL hMem);
  __attribute__((dllimport)) LPVOID GlobalLock (HGLOBAL hMem);
  __attribute__((dllimport)) HGLOBAL GlobalHandle (LPCVOID pMem);
  __attribute__((dllimport)) WINBOOL GlobalUnlock (HGLOBAL hMem);
  __attribute__((dllimport)) HGLOBAL GlobalFree (HGLOBAL hMem);
  __attribute__((dllimport)) SIZE_T GlobalCompact (DWORD dwMinFree);
  __attribute__((dllimport)) void GlobalFix (HGLOBAL hMem);
  __attribute__((dllimport)) void GlobalUnfix (HGLOBAL hMem);
  __attribute__((dllimport)) LPVOID GlobalWire (HGLOBAL hMem);
  __attribute__((dllimport)) WINBOOL GlobalUnWire (HGLOBAL hMem);
  __attribute__((dllimport)) void GlobalMemoryStatus (LPMEMORYSTATUS lpBuffer);
  __attribute__((dllimport)) HLOCAL LocalAlloc (UINT uFlags, SIZE_T uBytes);
  __attribute__((dllimport)) HLOCAL LocalReAlloc (HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
  __attribute__((dllimport)) LPVOID LocalLock (HLOCAL hMem);
  __attribute__((dllimport)) HLOCAL LocalHandle (LPCVOID pMem);
  __attribute__((dllimport)) WINBOOL LocalUnlock (HLOCAL hMem);
  __attribute__((dllimport)) SIZE_T LocalSize (HLOCAL hMem);
  __attribute__((dllimport)) UINT LocalFlags (HLOCAL hMem);
  __attribute__((dllimport)) HLOCAL LocalFree (HLOCAL hMem);
  __attribute__((dllimport)) SIZE_T LocalShrink (HLOCAL hMem, UINT cbNewSize);
  __attribute__((dllimport)) SIZE_T LocalCompact (UINT uMinFree);
# 1099 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define SCS_32BIT_BINARY
#define SCS_DOS_BINARY
#define SCS_WOW_BINARY
#define SCS_PIF_BINARY
#define SCS_POSIX_BINARY
#define SCS_OS216_BINARY
#define SCS_64BIT_BINARY


#define SCS_THIS_PLATFORM_BINARY




  __attribute__((dllimport)) WINBOOL GetBinaryTypeA (LPCSTR lpApplicationName, LPDWORD lpBinaryType);
  __attribute__((dllimport)) WINBOOL GetBinaryTypeW (LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
  __attribute__((dllimport)) DWORD GetShortPathNameA (LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);




  __attribute__((dllimport)) WINBOOL GetProcessAffinityMask (HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
  __attribute__((dllimport)) WINBOOL SetProcessAffinityMask (HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
  __attribute__((dllimport)) WINBOOL GetProcessIoCounters (HANDLE hProcess, PIO_COUNTERS lpIoCounters);
  __attribute__((dllimport)) WINBOOL GetProcessWorkingSetSize (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
  __attribute__((dllimport)) WINBOOL SetProcessWorkingSetSize (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
  __attribute__((dllimport)) void FatalExit (int ExitCode);
  __attribute__((dllimport)) WINBOOL SetEnvironmentStringsA (LPCH NewEnvironment);


#define SetEnvironmentStrings
#define GetShortPathName


#define GetBinaryType







  __attribute__((dllimport)) void RaiseFailFastException (PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);




#define FIBER_FLAG_FLOAT_SWITCH

  __attribute__((dllimport)) LPVOID CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
  __attribute__((dllimport)) LPVOID CreateFiberEx (SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
  __attribute__((dllimport)) void DeleteFiber (LPVOID lpFiber);
  __attribute__((dllimport)) LPVOID ConvertThreadToFiber (LPVOID lpParameter);
  __attribute__((dllimport)) LPVOID ConvertThreadToFiberEx (LPVOID lpParameter, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL ConvertFiberToThread (void);
  __attribute__((dllimport)) void SwitchToFiber (LPVOID lpFiber);
  __attribute__((dllimport)) DWORD_PTR SetThreadAffinityMask (HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
  __attribute__((dllimport)) DWORD SetThreadIdealProcessor (HANDLE hThread, DWORD dwIdealProcessor);



  typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
  } THREAD_INFORMATION_CLASS;

  typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
  } PROCESS_INFORMATION_CLASS;
# 1197 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL SetProcessPriorityBoost (HANDLE hProcess, WINBOOL bDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL GetProcessPriorityBoost (HANDLE hProcess, PBOOL pDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL RequestWakeupLatency (LATENCY_TIME latency);
  __attribute__((dllimport)) WINBOOL IsSystemResumeAutomatic (void);
  __attribute__((dllimport)) WINBOOL GetThreadIOPendingFlag (HANDLE hThread, PBOOL lpIOIsPending);
  __attribute__((dllimport)) WINBOOL GetThreadSelectorEntry (HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
  __attribute__((dllimport)) EXECUTION_STATE SetThreadExecutionState (EXECUTION_STATE esFlags);
# 1225 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define HasOverlappedIoCompleted
# 1235 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define SEM_FAILCRITICALERRORS
#define SEM_NOGPFAULTERRORBOX
#define SEM_NOALIGNMENTFAULTEXCEPT
#define SEM_NOOPENFILEERRORBOX

  __attribute__((dllimport)) DWORD GetThreadErrorMode (void);
  __attribute__((dllimport)) WINBOOL SetThreadErrorMode (DWORD dwNewMode, LPDWORD lpOldMode);
# 1254 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL DebugSetProcessKillOnExit (WINBOOL KillOnExit);
  __attribute__((dllimport)) WINBOOL DebugBreakProcess (HANDLE Process);



#define CRITICAL_SECTION_NO_DEBUG_INFO



  typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
  } DEP_SYSTEM_POLICY_TYPE;

#define HANDLE_FLAG_INHERIT
#define HANDLE_FLAG_PROTECT_FROM_CLOSE

#define HINSTANCE_ERROR

#define GET_TAPE_MEDIA_INFORMATION
#define GET_TAPE_DRIVE_INFORMATION

#define SET_TAPE_MEDIA_INFORMATION
#define SET_TAPE_DRIVE_INFORMATION

  __attribute__((dllimport)) WINBOOL PulseEvent (HANDLE hEvent);
  __attribute__((dllimport)) DWORD WaitForMultipleObjects (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds);
  __attribute__((dllimport)) ATOM GlobalDeleteAtom (ATOM nAtom);
  __attribute__((dllimport)) WINBOOL InitAtomTable (DWORD nSize);
  __attribute__((dllimport)) ATOM DeleteAtom (ATOM nAtom);
  __attribute__((dllimport)) UINT SetHandleCount (UINT uNumber);
  __attribute__((dllimport)) WINBOOL RequestDeviceWakeup (HANDLE hDevice);
  __attribute__((dllimport)) WINBOOL CancelDeviceWakeupRequest (HANDLE hDevice);
  __attribute__((dllimport)) WINBOOL GetDevicePowerState (HANDLE hDevice, WINBOOL *pfOn);
  __attribute__((dllimport)) WINBOOL SetMessageWaitingIndicator (HANDLE hMsgIndicator, ULONG ulMsgCount);
  __attribute__((dllimport)) WINBOOL SetFileShortNameA (HANDLE hFile, LPCSTR lpShortName);
  __attribute__((dllimport)) WINBOOL SetFileShortNameW (HANDLE hFile, LPCWSTR lpShortName);
  __attribute__((dllimport)) DWORD LoadModule (LPCSTR lpModuleName, LPVOID lpParameterBlock);
  __attribute__((dllimport)) UINT WinExec (LPCSTR lpCmdLine, UINT uCmdShow);
  __attribute__((dllimport)) WINBOOL ClearCommBreak (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL ClearCommError (HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
  __attribute__((dllimport)) WINBOOL SetupComm (HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
  __attribute__((dllimport)) WINBOOL EscapeCommFunction (HANDLE hFile, DWORD dwFunc);
  __attribute__((dllimport)) WINBOOL GetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL GetCommMask (HANDLE hFile, LPDWORD lpEvtMask);
  __attribute__((dllimport)) WINBOOL GetCommProperties (HANDLE hFile, LPCOMMPROP lpCommProp);
  __attribute__((dllimport)) WINBOOL GetCommModemStatus (HANDLE hFile, LPDWORD lpModemStat);
  __attribute__((dllimport)) WINBOOL GetCommState (HANDLE hFile, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL GetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL PurgeComm (HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL SetCommBreak (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL SetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
  __attribute__((dllimport)) WINBOOL SetCommMask (HANDLE hFile, DWORD dwEvtMask);
  __attribute__((dllimport)) WINBOOL SetCommState (HANDLE hFile, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL SetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL TransmitCommChar (HANDLE hFile, char cChar);
  __attribute__((dllimport)) WINBOOL WaitCommEvent (HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD SetTapePosition (HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD GetTapePosition (HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
  __attribute__((dllimport)) DWORD PrepareTape (HANDLE hDevice, DWORD dwOperation, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD EraseTape (HANDLE hDevice, DWORD dwEraseType, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD CreateTapePartition (HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
  __attribute__((dllimport)) DWORD WriteTapemark (HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD GetTapeStatus (HANDLE hDevice);
  __attribute__((dllimport)) DWORD GetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
  __attribute__((dllimport)) DWORD SetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
  __attribute__((dllimport)) DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy (void);
  __attribute__((dllimport)) WINBOOL GetSystemRegistryQuota (PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
  WINBOOL GetSystemTimes (LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) WINBOOL FileTimeToDosDateTime (const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
  __attribute__((dllimport)) WINBOOL DosDateTimeToFileTime (WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) WINBOOL SetSystemTimeAdjustment (DWORD dwTimeAdjustment, WINBOOL bTimeAdjustmentDisabled);

#define SetFileShortName




  __attribute__((dllimport)) int MulDiv (int nNumber, int nNumerator, int nDenominator);


  __attribute__((dllimport)) DWORD FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
  __attribute__((dllimport)) DWORD FormatMessageW (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);

#define FormatMessage


#define FORMAT_MESSAGE_IGNORE_INSERTS
#define FORMAT_MESSAGE_FROM_STRING
#define FORMAT_MESSAGE_FROM_HMODULE
#define FORMAT_MESSAGE_FROM_SYSTEM
#define FORMAT_MESSAGE_ARGUMENT_ARRAY
#define FORMAT_MESSAGE_MAX_WIDTH_MASK



  typedef DWORD ( *PFE_EXPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
  typedef DWORD ( *PFE_IMPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);

#define FILE_ENCRYPTABLE
#define FILE_IS_ENCRYPTED
#define FILE_SYSTEM_ATTR
#define FILE_ROOT_DIR
#define FILE_SYSTEM_DIR
#define FILE_UNKNOWN
#define FILE_SYSTEM_NOT_SUPPORT
#define FILE_USER_DISALLOWED
#define FILE_READ_ONLY
#define FILE_DIR_DISALLOWED

#define FORMAT_MESSAGE_ALLOCATE_BUFFER

#define EFS_USE_RECOVERY_KEYS

#define CREATE_FOR_IMPORT
#define CREATE_FOR_DIR
#define OVERWRITE_HIDDEN
#define EFSRPC_SECURE_ONLY

  __attribute__((dllimport)) WINBOOL GetNamedPipeInfo (HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
  __attribute__((dllimport)) HANDLE CreateMailslotA (LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) HANDLE CreateMailslotW (LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL GetMailslotInfo (HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
  __attribute__((dllimport)) WINBOOL SetMailslotInfo (HANDLE hMailslot, DWORD lReadTimeout);
  __attribute__((dllimport)) WINBOOL EncryptFileA (LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL EncryptFileW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL DecryptFileA (LPCSTR lpFileName, DWORD dwReserved);
  __attribute__((dllimport)) WINBOOL DecryptFileW (LPCWSTR lpFileName, DWORD dwReserved);
  __attribute__((dllimport)) WINBOOL FileEncryptionStatusA (LPCSTR lpFileName, LPDWORD lpStatus);
  __attribute__((dllimport)) WINBOOL FileEncryptionStatusW (LPCWSTR lpFileName, LPDWORD lpStatus);
  __attribute__((dllimport)) DWORD OpenEncryptedFileRawA (LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
  __attribute__((dllimport)) DWORD OpenEncryptedFileRawW (LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
  __attribute__((dllimport)) DWORD ReadEncryptedFileRaw (PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
  __attribute__((dllimport)) DWORD WriteEncryptedFileRaw (PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
  __attribute__((dllimport)) void CloseEncryptedFileRaw (PVOID pvContext);
  __attribute__((dllimport)) int lstrcmpA (LPCSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) int lstrcmpW (LPCWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) int lstrcmpiA (LPCSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) int lstrcmpiW (LPCWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) LPSTR lstrcpynA (LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
  __attribute__((dllimport)) LPWSTR lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
  __attribute__((dllimport)) LPSTR lstrcpyA (LPSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) LPWSTR lstrcpyW (LPWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) LPSTR lstrcatA (LPSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) LPWSTR lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) int lstrlenA (LPCSTR lpString);
  __attribute__((dllimport)) int lstrlenW (LPCWSTR lpString);
  __attribute__((dllimport)) HFILE OpenFile (LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
  __attribute__((dllimport)) HFILE _lopen (LPCSTR lpPathName, int iReadWrite);
  __attribute__((dllimport)) HFILE _lcreat (LPCSTR lpPathName, int iAttribute);
  __attribute__((dllimport)) UINT _lread (HFILE hFile, LPVOID lpBuffer, UINT uBytes);
  __attribute__((dllimport)) UINT _lwrite (HFILE hFile, LPCCH lpBuffer, UINT uBytes);
  __attribute__((dllimport)) long _hread (HFILE hFile, LPVOID lpBuffer, long lBytes);
  __attribute__((dllimport)) long _hwrite (HFILE hFile, LPCCH lpBuffer, long lBytes);
  __attribute__((dllimport)) HFILE _lclose (HFILE hFile);
  __attribute__((dllimport)) LONG _llseek (HFILE hFile, LONG lOffset, int iOrigin);
  __attribute__((dllimport)) WINBOOL IsTextUnicode (const void *lpv, int iSize, LPINT lpiResult);
  __attribute__((dllimport)) DWORD SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) WINBOOL BackupRead (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
  __attribute__((dllimport)) WINBOOL BackupSeek (HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext);
  __attribute__((dllimport)) WINBOOL BackupWrite (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);

#define CreateMailslot
#define EncryptFile
#define DecryptFile
#define FileEncryptionStatus
#define OpenEncryptedFileRaw
#define lstrcmp
#define lstrcmpi
#define lstrcpyn
#define lstrcpy
#define lstrcat
#define lstrlen

  typedef struct _WIN32_STREAM_ID {
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR cStreamName[1];
  } WIN32_STREAM_ID,*LPWIN32_STREAM_ID;

#define BACKUP_INVALID
#define BACKUP_DATA
#define BACKUP_EA_DATA
#define BACKUP_SECURITY_DATA
#define BACKUP_ALTERNATE_DATA
#define BACKUP_LINK
#define BACKUP_PROPERTY_DATA
#define BACKUP_OBJECT_ID
#define BACKUP_REPARSE_DATA
#define BACKUP_SPARSE_BLOCK
#define BACKUP_TXFS_DATA

#define STREAM_NORMAL_ATTRIBUTE
#define STREAM_MODIFIED_WHEN_READ
#define STREAM_CONTAINS_SECURITY
#define STREAM_CONTAINS_PROPERTIES
#define STREAM_SPARSE_ATTRIBUTE

#define STARTF_USESHOWWINDOW
#define STARTF_USESIZE
#define STARTF_USEPOSITION
#define STARTF_USECOUNTCHARS
#define STARTF_USEFILLATTRIBUTE
#define STARTF_RUNFULLSCREEN
#define STARTF_FORCEONFEEDBACK
#define STARTF_FORCEOFFFEEDBACK
#define STARTF_USESTDHANDLES

#define STARTF_USEHOTKEY
#define STARTF_TITLEISLINKNAME
#define STARTF_TITLEISAPPID
#define STARTF_PREVENTPINNING
# 1487 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define SHUTDOWN_NORETRY



#define CreateSemaphore
  __attribute__((dllimport)) HANDLE CreateSemaphoreW (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);


  __attribute__((dllimport)) HANDLE OpenMutexA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE CreateSemaphoreA (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE OpenSemaphoreA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE CreateWaitableTimerA (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCSTR lpTimerName);
  __attribute__((dllimport)) HANDLE CreateWaitableTimerW (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCWSTR lpTimerName);
  __attribute__((dllimport)) HANDLE OpenWaitableTimerA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpTimerName);
  __attribute__((dllimport)) HANDLE CreateFileMappingA (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);





  __attribute__((dllimport)) HANDLE OpenFileMappingA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) DWORD GetLogicalDriveStringsA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) HMODULE LoadLibraryA (LPCSTR lpLibFileName);
  __attribute__((dllimport)) HMODULE LoadLibraryW (LPCWSTR lpLibFileName);


#define OpenMutex
#define OpenSemaphore
#define OpenWaitableTimer
#define CreateFileMapping
#define OpenFileMapping
#define GetLogicalDriveStrings


#define CreateWaitableTimer
#define LoadLibrary
# 1633 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define ATOM_FLAG_GLOBAL

  __attribute__((dllimport)) WINBOOL GetProcessShutdownParameters (LPDWORD lpdwLevel, LPDWORD lpdwFlags);
  __attribute__((dllimport)) void FatalAppExitA (UINT uAction, LPCSTR lpMessageText);
  __attribute__((dllimport)) void FatalAppExitW (UINT uAction, LPCWSTR lpMessageText);
  __attribute__((dllimport)) void GetStartupInfoA (LPSTARTUPINFOA lpStartupInfo);
  __attribute__((dllimport)) DWORD GetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
  __attribute__((dllimport)) DWORD GetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
  __attribute__((dllimport)) WINBOOL SetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
  __attribute__((dllimport)) WINBOOL SetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
  __attribute__((dllimport)) HRSRC FindResourceA (HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
  __attribute__((dllimport)) HRSRC FindResourceW (HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
  __attribute__((dllimport)) HRSRC FindResourceExA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
  __attribute__((dllimport)) WINBOOL EnumResourceTypesA (HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceTypesW (HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceNamesA (HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceNamesW (HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceLanguagesA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumResourceLanguagesW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) HANDLE BeginUpdateResourceA (LPCSTR pFileName, WINBOOL bDeleteExistingResources);
  __attribute__((dllimport)) HANDLE BeginUpdateResourceW (LPCWSTR pFileName, WINBOOL bDeleteExistingResources);
  __attribute__((dllimport)) WINBOOL UpdateResourceA (HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
  __attribute__((dllimport)) WINBOOL UpdateResourceW (HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
  __attribute__((dllimport)) WINBOOL EndUpdateResourceA (HANDLE hUpdate, WINBOOL fDiscard);
  __attribute__((dllimport)) WINBOOL EndUpdateResourceW (HANDLE hUpdate, WINBOOL fDiscard);
# 1666 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) ATOM GlobalAddAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM GlobalAddAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) ATOM GlobalAddAtomExA (LPCSTR lpString, DWORD Flags);
  __attribute__((dllimport)) ATOM GlobalAddAtomExW (LPCWSTR lpString, DWORD Flags);
  __attribute__((dllimport)) ATOM GlobalFindAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM GlobalFindAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) UINT GlobalGetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT GlobalGetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
  __attribute__((dllimport)) ATOM AddAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM AddAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) ATOM FindAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM FindAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) UINT GetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT GetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT GetProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
  __attribute__((dllimport)) UINT GetProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
  __attribute__((dllimport)) DWORD GetProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) DWORD GetProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) WINBOOL WriteProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL WriteProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
  __attribute__((dllimport)) DWORD GetProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) DWORD GetProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) WINBOOL WriteProfileSectionA (LPCSTR lpAppName, LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL WriteProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString);
  __attribute__((dllimport)) UINT GetPrivateProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
  __attribute__((dllimport)) UINT GetPrivateProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileSectionA (LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileSectionNamesA (LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD GetPrivateProfileSectionNamesW (LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL GetPrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
  __attribute__((dllimport)) WINBOOL GetPrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
  __attribute__((dllimport)) WINBOOL WritePrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
  __attribute__((dllimport)) DWORD GetTempPathA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) UINT GetTempFileNameA (LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);


#define GetStartupInfo
#define FindResourceEx
#define GetTempPath
#define GetTempFileName


#define FatalAppExit
#define GetFirmwareEnvironmentVariable
#define SetFirmwareEnvironmentVariable
#define FindResource
#define EnumResourceTypes
#define EnumResourceNames
#define EnumResourceLanguages
#define BeginUpdateResource
#define UpdateResource
#define EndUpdateResource
#define GlobalAddAtom
#define GlobalAddAtomEx
#define GlobalFindAtom
#define GlobalGetAtomName
#define AddAtom
#define FindAtom
#define GetAtomName
#define GetProfileInt
#define GetProfileString
#define WriteProfileString
#define GetProfileSection
#define WriteProfileSection
#define GetPrivateProfileInt
#define GetPrivateProfileString
#define WritePrivateProfileString
#define GetPrivateProfileSection
#define WritePrivateProfileSection
#define GetPrivateProfileSectionNames
#define GetPrivateProfileStruct
#define WritePrivateProfileStruct







  __attribute__((dllimport)) UINT GetSystemWow64DirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT GetSystemWow64DirectoryW (LPWSTR lpBuffer, UINT uSize);

#define GetSystemWow64Directory

  __attribute__((dllimport)) BOOLEAN Wow64EnableWow64FsRedirection (BOOLEAN Wow64FsEnableRedirection);

  typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_A) (LPSTR lpBuffer, UINT uSize);
  typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_W) (LPWSTR lpBuffer, UINT uSize);

#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T

#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T


  __attribute__((dllimport)) WINBOOL SetDllDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL SetDllDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) DWORD GetDllDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) DWORD GetDllDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);

#define SetDllDirectory
#define GetDllDirectory

#define BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE
#define BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE
#define BASE_SEARCH_PATH_PERMANENT
#define BASE_SEARCH_PATH_INVALID_FLAGS

  __attribute__((dllimport)) WINBOOL SetSearchPathMode (DWORD Flags);



  __attribute__((dllimport)) WINBOOL CreateDirectoryExA (LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL CreateDirectoryExW (LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

#define CreateDirectoryEx
# 1811 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define DDD_RAW_TARGET_PATH
#define DDD_REMOVE_DEFINITION
#define DDD_EXACT_MATCH_ON_REMOVE
#define DDD_NO_BROADCAST_SYSTEM
#define DDD_LUID_BROADCAST_DRIVE

  __attribute__((dllimport)) WINBOOL DefineDosDeviceA (DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
  __attribute__((dllimport)) DWORD QueryDosDeviceA (LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);


#define DefineDosDevice
#define QueryDosDevice


#define EXPAND_LOCAL_DRIVES
# 1834 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) HANDLE ReOpenFile (HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
# 1846 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) DWORD GetCompressedFileSizeA (LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
  __attribute__((dllimport)) DWORD GetCompressedFileSizeW (LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);

#define GetCompressedFileSize
# 1864 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  typedef DWORD ( *LPPROGRESS_ROUTINE) (LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);

  __attribute__((dllimport)) WINBOOL CheckNameLegalDOS8Dot3A (LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
  __attribute__((dllimport)) WINBOOL CheckNameLegalDOS8Dot3W (LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
  __attribute__((dllimport)) WINBOOL CopyFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, WINBOOL bFailIfExists);
  __attribute__((dllimport)) WINBOOL CopyFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, WINBOOL bFailIfExists);
  __attribute__((dllimport)) WINBOOL CopyFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
  __attribute__((dllimport)) WINBOOL CopyFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
# 1883 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define CheckNameLegalDOS8Dot3
#define CopyFile
#define CopyFileEx
# 1999 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL MoveFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
  __attribute__((dllimport)) WINBOOL MoveFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);

#define MoveFile



  __attribute__((dllimport)) WINBOOL MoveFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL MoveFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);

#define MoveFileEx



  __attribute__((dllimport)) WINBOOL MoveFileWithProgressA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL MoveFileWithProgressW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);

#define MoveFileWithProgress
# 2027 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define MOVEFILE_REPLACE_EXISTING
#define MOVEFILE_COPY_ALLOWED
#define MOVEFILE_DELAY_UNTIL_REBOOT
#define MOVEFILE_WRITE_THROUGH
#define MOVEFILE_CREATE_HARDLINK
#define MOVEFILE_FAIL_IF_NOT_TRACKABLE



  __attribute__((dllimport)) WINBOOL ReplaceFileA (LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL ReplaceFileW (LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL CreateHardLinkA (LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL CreateHardLinkW (LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

#define ReplaceFile
#define CreateHardLink
# 2051 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  typedef enum _STREAM_INFO_LEVELS {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
  } STREAM_INFO_LEVELS;

  typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[260 + 36];
  } WIN32_FIND_STREAM_DATA,*PWIN32_FIND_STREAM_DATA;

  __attribute__((dllimport)) HANDLE FindFirstStreamW (LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL FindNextStreamW (HANDLE hFindStream, LPVOID lpFindStreamData);
# 2076 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) HANDLE CreateNamedPipeA (LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL GetNamedPipeHandleStateA (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
  __attribute__((dllimport)) WINBOOL GetNamedPipeHandleStateW (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
  __attribute__((dllimport)) WINBOOL CallNamedPipeA (LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL CallNamedPipeW (LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL WaitNamedPipeA (LPCSTR lpNamedPipeName, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL SetVolumeLabelA (LPCSTR lpRootPathName, LPCSTR lpVolumeName);
  __attribute__((dllimport)) WINBOOL SetVolumeLabelW (LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
  __attribute__((dllimport)) void SetFileApisToOEM (void);
  __attribute__((dllimport)) void SetFileApisToANSI (void);
  __attribute__((dllimport)) WINBOOL AreFileApisANSI (void);
  __attribute__((dllimport)) WINBOOL GetVolumeInformationA (LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
  __attribute__((dllimport)) WINBOOL ClearEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL ClearEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL BackupEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL BackupEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL CloseEventLog (HANDLE hEventLog);
  __attribute__((dllimport)) WINBOOL DeregisterEventSource (HANDLE hEventLog);
  __attribute__((dllimport)) WINBOOL NotifyChangeEventLog (HANDLE hEventLog, HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL GetNumberOfEventLogRecords (HANDLE hEventLog, PDWORD NumberOfRecords);
  __attribute__((dllimport)) WINBOOL GetOldestEventLogRecord (HANDLE hEventLog, PDWORD OldestRecord);
  __attribute__((dllimport)) HANDLE OpenEventLogA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
  __attribute__((dllimport)) HANDLE OpenEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
  __attribute__((dllimport)) HANDLE RegisterEventSourceA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
  __attribute__((dllimport)) HANDLE RegisterEventSourceW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
  __attribute__((dllimport)) HANDLE OpenBackupEventLogA (LPCSTR lpUNCServerName, LPCSTR lpFileName);
  __attribute__((dllimport)) HANDLE OpenBackupEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL ReadEventLogA (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
  __attribute__((dllimport)) WINBOOL ReadEventLogW (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
  __attribute__((dllimport)) WINBOOL ReportEventA (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData);
  __attribute__((dllimport)) WINBOOL ReportEventW (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData);


#define CreateNamedPipe
#define WaitNamedPipe
#define GetVolumeInformation


#define GetNamedPipeHandleState
#define CallNamedPipe
#define SetVolumeLabel
#define ClearEventLog
#define BackupEventLog
#define OpenEventLog
#define RegisterEventSource
#define OpenBackupEventLog
#define ReadEventLog
#define ReportEvent





#define EVENTLOG_FULL_INFO

  typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
  } EVENTLOG_FULL_INFORMATION,*LPEVENTLOG_FULL_INFORMATION;

  __attribute__((dllimport)) WINBOOL GetEventLogInformation (HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
# 2163 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL AccessCheckAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL AccessCheckByTypeAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL AccessCheckByTypeResultListAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL ObjectOpenAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL ObjectPrivilegeAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
  __attribute__((dllimport)) WINBOOL ObjectCloseAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL ObjectDeleteAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL PrivilegedServiceAuditAlarmA (LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
  __attribute__((dllimport)) WINBOOL SetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL GetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL ReadDirectoryChangesW (HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL IsBadReadPtr (const void *lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL IsBadWritePtr (LPVOID lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL IsBadHugeReadPtr (const void *lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL IsBadHugeWritePtr (LPVOID lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL IsBadCodePtr (FARPROC lpfn);
  __attribute__((dllimport)) WINBOOL IsBadStringPtrA (LPCSTR lpsz, UINT_PTR ucchMax);
  __attribute__((dllimport)) WINBOOL IsBadStringPtrW (LPCWSTR lpsz, UINT_PTR ucchMax);






  __attribute__((dllimport)) WINBOOL LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL LookupAccountNameA (LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL LookupAccountNameW (LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);


#define AccessCheckAndAuditAlarm
#define AccessCheckByTypeAndAuditAlarm
#define AccessCheckByTypeResultListAndAuditAlarm
#define AccessCheckByTypeResultListAndAuditAlarmByHandle
#define ObjectOpenAuditAlarm
#define ObjectPrivilegeAuditAlarm
#define ObjectCloseAuditAlarm
#define ObjectDeleteAuditAlarm
#define PrivilegedServiceAuditAlarm
#define SetFileSecurity
#define GetFileSecurity


#define IsBadStringPtr
#define LookupAccountSid
#define LookupAccountName
# 2221 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define LookupAccountNameLocalA
#define LookupAccountNameLocalW
#define LookupAccountNameLocal

#define LookupAccountSidLocalA
#define LookupAccountSidLocalW
#define LookupAccountSidLocal



  __attribute__((dllimport)) WINBOOL LookupPrivilegeValueA (LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
  __attribute__((dllimport)) WINBOOL LookupPrivilegeValueW (LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
  __attribute__((dllimport)) WINBOOL LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
  __attribute__((dllimport)) WINBOOL LookupPrivilegeNameW (LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
  __attribute__((dllimport)) WINBOOL LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
  __attribute__((dllimport)) WINBOOL LookupPrivilegeDisplayNameW (LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
  __attribute__((dllimport)) WINBOOL BuildCommDCBA (LPCSTR lpDef, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL BuildCommDCBW (LPCWSTR lpDef, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL BuildCommDCBAndTimeoutsA (LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL BuildCommDCBAndTimeoutsW (LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL CommConfigDialogA (LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
  __attribute__((dllimport)) WINBOOL CommConfigDialogW (LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
  __attribute__((dllimport)) WINBOOL GetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL GetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL SetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
  __attribute__((dllimport)) WINBOOL SetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);

#define LookupPrivilegeValue
#define LookupPrivilegeName
#define LookupPrivilegeDisplayName
#define BuildCommDCB
#define BuildCommDCBAndTimeouts
#define CommConfigDialog
#define GetDefaultCommConfig
#define SetDefaultCommConfig

#define MAX_COMPUTERNAME_LENGTH

  __attribute__((dllimport)) WINBOOL GetComputerNameA (LPSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL GetComputerNameW (LPWSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL SetComputerNameA (LPCSTR lpComputerName);
  __attribute__((dllimport)) WINBOOL SetComputerNameW (LPCWSTR lpComputerName);
  __attribute__((dllimport)) WINBOOL SetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPCTSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL DnsHostnameToComputerNameA (LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL DnsHostnameToComputerNameW (LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL GetUserNameA (LPSTR lpBuffer, LPDWORD pcbBuffer);
  __attribute__((dllimport)) WINBOOL GetUserNameW (LPWSTR lpBuffer, LPDWORD pcbBuffer);


#define SetComputerNameEx


#define GetComputerName
#define SetComputerName
#define DnsHostnameToComputerName
#define GetUserName

#define LOGON32_LOGON_INTERACTIVE
#define LOGON32_LOGON_NETWORK
#define LOGON32_LOGON_BATCH
#define LOGON32_LOGON_SERVICE
#define LOGON32_LOGON_UNLOCK
#define LOGON32_LOGON_NETWORK_CLEARTEXT
#define LOGON32_LOGON_NEW_CREDENTIALS

#define LOGON32_PROVIDER_DEFAULT
#define LOGON32_PROVIDER_WINNT35
#define LOGON32_PROVIDER_WINNT40
#define LOGON32_PROVIDER_WINNT50




  __attribute__((dllimport)) WINBOOL LogonUserA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
  __attribute__((dllimport)) WINBOOL LogonUserW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
  __attribute__((dllimport)) WINBOOL LogonUserExA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
  __attribute__((dllimport)) WINBOOL LogonUserExW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
  __attribute__((dllimport)) WINBOOL CreateProcessAsUserA (HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);


#define CreateProcessAsUser


#define LogonUser
#define LogonUserEx

#define LOGON_WITH_PROFILE
#define LOGON_NETCREDENTIALS_ONLY
#define LOGON_ZERO_PASSWORD_BUFFER

  __attribute__((dllimport)) WINBOOL CreateProcessWithLogonW (LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL CreateProcessWithTokenW (HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL IsTokenUntrusted (HANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL RegisterWaitForSingleObject (PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
  __attribute__((dllimport)) WINBOOL UnregisterWait (HANDLE WaitHandle);
  __attribute__((dllimport)) WINBOOL BindIoCompletionCallback (HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
  __attribute__((dllimport)) HANDLE SetTimerQueueTimer (HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, WINBOOL PreferIo);
  __attribute__((dllimport)) WINBOOL CancelTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer);
  __attribute__((dllimport)) WINBOOL DeleteTimerQueue (HANDLE TimerQueue);




  __attribute__((dllimport)) HANDLE CreatePrivateNamespaceA (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE OpenPrivateNamespaceA (LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE CreateBoundaryDescriptorA (LPCSTR Name, ULONG Flags);
  __attribute__((dllimport)) WINBOOL AddIntegrityLabelToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID IntegrityLabel);


#define CreatePrivateNamespace

#define OpenPrivateNamespace

#define CreateBoundaryDescriptor




#define HW_PROFILE_GUIDLEN
#define MAX_PROFILE_LEN

#define DOCKINFO_UNDOCKED
#define DOCKINFO_DOCKED
#define DOCKINFO_USER_SUPPLIED
#define DOCKINFO_USER_UNDOCKED
#define DOCKINFO_USER_DOCKED

  typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
  } HW_PROFILE_INFOA,*LPHW_PROFILE_INFOA;

  typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
  } HW_PROFILE_INFOW,*LPHW_PROFILE_INFOW;

  typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
  typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;

  __attribute__((dllimport)) WINBOOL GetCurrentHwProfileA (LPHW_PROFILE_INFOA lpHwProfileInfo);
  __attribute__((dllimport)) WINBOOL GetCurrentHwProfileW (LPHW_PROFILE_INFOW lpHwProfileInfo);
  __attribute__((dllimport)) WINBOOL VerifyVersionInfoA (LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
  __attribute__((dllimport)) WINBOOL VerifyVersionInfoW (LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);

#define GetCurrentHwProfile

#define VerifyVersionInfo


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winerror.h" 1 3






#define _WINERROR_

#define __IN__WINERROR_

#define FACILITY_WINDOWSUPDATE
#define FACILITY_WINDOWS_CE
#define FACILITY_WINDOWS
#define FACILITY_URT
#define FACILITY_UMI
#define FACILITY_SXS
#define FACILITY_STORAGE
#define FACILITY_STATE_MANAGEMENT
#define FACILITY_SSPI
#define FACILITY_SCARD
#define FACILITY_SETUPAPI
#define FACILITY_SECURITY
#define FACILITY_RPC
#define FACILITY_WIN32
#define FACILITY_CONTROL
#define FACILITY_NULL
#define FACILITY_METADIRECTORY
#define FACILITY_MSMQ
#define FACILITY_MEDIASERVER
#define FACILITY_INTERNET
#define FACILITY_ITF
#define FACILITY_HTTP
#define FACILITY_DPLAY
#define FACILITY_DISPATCH
#define FACILITY_DIRECTORYSERVICE
#define FACILITY_CONFIGURATION
#define FACILITY_COMPLUS
#define FACILITY_CERT
#define FACILITY_BACKGROUNDCOPY
#define FACILITY_ACS
#define FACILITY_AAF
#define FACILITY_AUDCLNT
#define ERROR_SUCCESS
#define NO_ERROR
#define SEC_E_OK
#define ERROR_INVALID_FUNCTION
#define ERROR_FILE_NOT_FOUND
#define ERROR_PATH_NOT_FOUND
#define ERROR_TOO_MANY_OPEN_FILES
#define ERROR_ACCESS_DENIED
#define ERROR_INVALID_HANDLE
#define ERROR_ARENA_TRASHED
#define ERROR_NOT_ENOUGH_MEMORY
#define ERROR_INVALID_BLOCK
#define ERROR_BAD_ENVIRONMENT
#define ERROR_BAD_FORMAT
#define ERROR_INVALID_ACCESS
#define ERROR_INVALID_DATA
#define ERROR_OUTOFMEMORY
#define ERROR_INVALID_DRIVE
#define ERROR_CURRENT_DIRECTORY
#define ERROR_NOT_SAME_DEVICE
#define ERROR_NO_MORE_FILES
#define ERROR_WRITE_PROTECT
#define ERROR_BAD_UNIT
#define ERROR_NOT_READY
#define ERROR_BAD_COMMAND
#define ERROR_CRC
#define ERROR_BAD_LENGTH
#define ERROR_SEEK
#define ERROR_NOT_DOS_DISK
#define ERROR_SECTOR_NOT_FOUND
#define ERROR_OUT_OF_PAPER
#define ERROR_WRITE_FAULT
#define ERROR_READ_FAULT
#define ERROR_GEN_FAILURE
#define ERROR_SHARING_VIOLATION
#define ERROR_LOCK_VIOLATION
#define ERROR_WRONG_DISK
#define ERROR_SHARING_BUFFER_EXCEEDED
#define ERROR_HANDLE_EOF
#define ERROR_HANDLE_DISK_FULL
#define ERROR_NOT_SUPPORTED
#define ERROR_REM_NOT_LIST
#define ERROR_DUP_NAME
#define ERROR_BAD_NETPATH
#define ERROR_NETWORK_BUSY
#define ERROR_DEV_NOT_EXIST
#define ERROR_TOO_MANY_CMDS
#define ERROR_ADAP_HDW_ERR
#define ERROR_BAD_NET_RESP
#define ERROR_UNEXP_NET_ERR
#define ERROR_BAD_REM_ADAP
#define ERROR_PRINTQ_FULL
#define ERROR_NO_SPOOL_SPACE
#define ERROR_PRINT_CANCELLED
#define ERROR_NETNAME_DELETED
#define ERROR_NETWORK_ACCESS_DENIED
#define ERROR_BAD_DEV_TYPE
#define ERROR_BAD_NET_NAME
#define ERROR_TOO_MANY_NAMES
#define ERROR_TOO_MANY_SESS
#define ERROR_SHARING_PAUSED
#define ERROR_REQ_NOT_ACCEP
#define ERROR_REDIR_PAUSED
#define ERROR_FILE_EXISTS
#define ERROR_CANNOT_MAKE
#define ERROR_FAIL_I24
#define ERROR_OUT_OF_STRUCTURES
#define ERROR_ALREADY_ASSIGNED
#define ERROR_INVALID_PASSWORD
#define ERROR_INVALID_PARAMETER
#define ERROR_NET_WRITE_FAULT
#define ERROR_NO_PROC_SLOTS
#define ERROR_TOO_MANY_SEMAPHORES
#define ERROR_EXCL_SEM_ALREADY_OWNED
#define ERROR_SEM_IS_SET
#define ERROR_TOO_MANY_SEM_REQUESTS
#define ERROR_INVALID_AT_INTERRUPT_TIME
#define ERROR_SEM_OWNER_DIED
#define ERROR_SEM_USER_LIMIT
#define ERROR_DISK_CHANGE
#define ERROR_DRIVE_LOCKED
#define ERROR_BROKEN_PIPE
#define ERROR_OPEN_FAILED
#define ERROR_BUFFER_OVERFLOW
#define ERROR_DISK_FULL
#define ERROR_NO_MORE_SEARCH_HANDLES
#define ERROR_INVALID_TARGET_HANDLE
#define ERROR_INVALID_CATEGORY
#define ERROR_INVALID_VERIFY_SWITCH
#define ERROR_BAD_DRIVER_LEVEL
#define ERROR_CALL_NOT_IMPLEMENTED
#define ERROR_SEM_TIMEOUT
#define ERROR_INSUFFICIENT_BUFFER
#define ERROR_INVALID_NAME
#define ERROR_INVALID_LEVEL
#define ERROR_NO_VOLUME_LABEL
#define ERROR_MOD_NOT_FOUND
#define ERROR_PROC_NOT_FOUND
#define ERROR_WAIT_NO_CHILDREN
#define ERROR_CHILD_NOT_COMPLETE
#define ERROR_DIRECT_ACCESS_HANDLE
#define ERROR_NEGATIVE_SEEK
#define ERROR_SEEK_ON_DEVICE
#define ERROR_IS_JOIN_TARGET
#define ERROR_IS_JOINED
#define ERROR_IS_SUBSTED
#define ERROR_NOT_JOINED
#define ERROR_NOT_SUBSTED
#define ERROR_JOIN_TO_JOIN
#define ERROR_SUBST_TO_SUBST
#define ERROR_JOIN_TO_SUBST
#define ERROR_SUBST_TO_JOIN
#define ERROR_BUSY_DRIVE
#define ERROR_SAME_DRIVE
#define ERROR_DIR_NOT_ROOT
#define ERROR_DIR_NOT_EMPTY
#define ERROR_IS_SUBST_PATH
#define ERROR_IS_JOIN_PATH
#define ERROR_PATH_BUSY
#define ERROR_IS_SUBST_TARGET
#define ERROR_SYSTEM_TRACE
#define ERROR_INVALID_EVENT_COUNT
#define ERROR_TOO_MANY_MUXWAITERS
#define ERROR_INVALID_LIST_FORMAT
#define ERROR_LABEL_TOO_LONG
#define ERROR_TOO_MANY_TCBS
#define ERROR_SIGNAL_REFUSED
#define ERROR_DISCARDED
#define ERROR_NOT_LOCKED
#define ERROR_BAD_THREADID_ADDR
#define ERROR_BAD_ARGUMENTS
#define ERROR_BAD_PATHNAME
#define ERROR_SIGNAL_PENDING
#define ERROR_MAX_THRDS_REACHED
#define ERROR_LOCK_FAILED
#define ERROR_BUSY
#define ERROR_CANCEL_VIOLATION
#define ERROR_ATOMIC_LOCKS_NOT_SUPPORTED
#define ERROR_INVALID_SEGMENT_NUMBER
#define ERROR_INVALID_ORDINAL
#define ERROR_ALREADY_EXISTS
#define ERROR_INVALID_FLAG_NUMBER
#define ERROR_SEM_NOT_FOUND
#define ERROR_INVALID_STARTING_CODESEG
#define ERROR_INVALID_STACKSEG
#define ERROR_INVALID_MODULETYPE
#define ERROR_INVALID_EXE_SIGNATURE
#define ERROR_EXE_MARKED_INVALID
#define ERROR_BAD_EXE_FORMAT
#define ERROR_ITERATED_DATA_EXCEEDS_64k
#define ERROR_INVALID_MINALLOCSIZE
#define ERROR_DYNLINK_FROM_INVALID_RING
#define ERROR_IOPL_NOT_ENABLED
#define ERROR_INVALID_SEGDPL
#define ERROR_AUTODATASEG_EXCEEDS_64k
#define ERROR_RING2SEG_MUST_BE_MOVABLE
#define ERROR_RELOC_CHAIN_XEEDS_SEGLIM
#define ERROR_INFLOOP_IN_RELOC_CHAIN
#define ERROR_ENVVAR_NOT_FOUND
#define ERROR_NO_SIGNAL_SENT
#define ERROR_FILENAME_EXCED_RANGE
#define ERROR_RING2_STACK_IN_USE
#define ERROR_META_EXPANSION_TOO_LONG
#define ERROR_INVALID_SIGNAL_NUMBER
#define ERROR_THREAD_1_INACTIVE
#define ERROR_LOCKED
#define ERROR_TOO_MANY_MODULES
#define ERROR_NESTING_NOT_ALLOWED
#define ERROR_EXE_MACHINE_TYPE_MISMATCH
#define ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY
#define ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY
#define ERROR_BAD_PIPE
#define ERROR_PIPE_BUSY
#define ERROR_NO_DATA
#define ERROR_PIPE_NOT_CONNECTED
#define ERROR_MORE_DATA
#define ERROR_VC_DISCONNECTED
#define ERROR_INVALID_EA_NAME
#define ERROR_EA_LIST_INCONSISTENT
#define WAIT_TIMEOUT
#define ERROR_NO_MORE_ITEMS
#define ERROR_CANNOT_COPY
#define ERROR_DIRECTORY
#define ERROR_EAS_DIDNT_FIT
#define ERROR_EA_FILE_CORRUPT
#define ERROR_EA_TABLE_FULL
#define ERROR_INVALID_EA_HANDLE
#define ERROR_EAS_NOT_SUPPORTED
#define ERROR_NOT_OWNER
#define ERROR_TOO_MANY_POSTS
#define ERROR_PARTIAL_COPY
#define ERROR_OPLOCK_NOT_GRANTED
#define ERROR_INVALID_OPLOCK_PROTOCOL
#define ERROR_DISK_TOO_FRAGMENTED
#define ERROR_DELETE_PENDING
#define ERROR_MR_MID_NOT_FOUND
#define ERROR_SCOPE_NOT_FOUND
#define ERROR_INVALID_ADDRESS
#define ERROR_ARITHMETIC_OVERFLOW
#define ERROR_PIPE_CONNECTED
#define ERROR_PIPE_LISTENING
#define ERROR_EA_ACCESS_DENIED
#define ERROR_OPERATION_ABORTED
#define ERROR_IO_INCOMPLETE
#define ERROR_IO_PENDING
#define ERROR_NOACCESS
#define ERROR_SWAPERROR
#define ERROR_STACK_OVERFLOW
#define ERROR_INVALID_MESSAGE
#define ERROR_CAN_NOT_COMPLETE
#define ERROR_INVALID_FLAGS
#define ERROR_UNRECOGNIZED_VOLUME
#define ERROR_FILE_INVALID
#define ERROR_FULLSCREEN_MODE
#define ERROR_NO_TOKEN
#define ERROR_BADDB
#define ERROR_BADKEY
#define ERROR_CANTOPEN
#define ERROR_CANTREAD
#define ERROR_CANTWRITE
#define ERROR_REGISTRY_RECOVERED
#define ERROR_REGISTRY_CORRUPT
#define ERROR_REGISTRY_IO_FAILED
#define ERROR_NOT_REGISTRY_FILE
#define ERROR_KEY_DELETED
#define ERROR_NO_LOG_SPACE
#define ERROR_KEY_HAS_CHILDREN
#define ERROR_CHILD_MUST_BE_VOLATILE
#define ERROR_NOTIFY_ENUM_DIR
#define ERROR_DEPENDENT_SERVICES_RUNNING
#define ERROR_INVALID_SERVICE_CONTROL
#define ERROR_SERVICE_REQUEST_TIMEOUT
#define ERROR_SERVICE_NO_THREAD
#define ERROR_SERVICE_DATABASE_LOCKED
#define ERROR_SERVICE_ALREADY_RUNNING
#define ERROR_INVALID_SERVICE_ACCOUNT
#define ERROR_SERVICE_DISABLED
#define ERROR_CIRCULAR_DEPENDENCY
#define ERROR_SERVICE_DOES_NOT_EXIST
#define ERROR_SERVICE_CANNOT_ACCEPT_CTRL
#define ERROR_SERVICE_NOT_ACTIVE
#define ERROR_FAILED_SERVICE_CONTROLLER_CONNECT
#define ERROR_EXCEPTION_IN_SERVICE
#define ERROR_DATABASE_DOES_NOT_EXIST
#define ERROR_SERVICE_SPECIFIC_ERROR
#define ERROR_PROCESS_ABORTED
#define ERROR_SERVICE_DEPENDENCY_FAIL
#define ERROR_SERVICE_LOGON_FAILED
#define ERROR_SERVICE_START_HANG
#define ERROR_INVALID_SERVICE_LOCK
#define ERROR_SERVICE_MARKED_FOR_DELETE
#define ERROR_SERVICE_EXISTS
#define ERROR_ALREADY_RUNNING_LKG
#define ERROR_SERVICE_DEPENDENCY_DELETED
#define ERROR_BOOT_ALREADY_ACCEPTED
#define ERROR_SERVICE_NEVER_STARTED
#define ERROR_DUPLICATE_SERVICE_NAME
#define ERROR_DIFFERENT_SERVICE_ACCOUNT
#define ERROR_CANNOT_DETECT_DRIVER_FAILURE
#define ERROR_CANNOT_DETECT_PROCESS_ABORT
#define ERROR_NO_RECOVERY_PROGRAM
#define ERROR_SERVICE_NOT_IN_EXE
#define ERROR_NOT_SAFEBOOT_SERVICE
#define ERROR_END_OF_MEDIA
#define ERROR_FILEMARK_DETECTED
#define ERROR_BEGINNING_OF_MEDIA
#define ERROR_SETMARK_DETECTED
#define ERROR_NO_DATA_DETECTED
#define ERROR_PARTITION_FAILURE
#define ERROR_INVALID_BLOCK_LENGTH
#define ERROR_DEVICE_NOT_PARTITIONED
#define ERROR_UNABLE_TO_LOCK_MEDIA
#define ERROR_UNABLE_TO_UNLOAD_MEDIA
#define ERROR_MEDIA_CHANGED
#define ERROR_BUS_RESET
#define ERROR_NO_MEDIA_IN_DRIVE
#define ERROR_NO_UNICODE_TRANSLATION
#define ERROR_DLL_INIT_FAILED
#define ERROR_SHUTDOWN_IN_PROGRESS
#define ERROR_NO_SHUTDOWN_IN_PROGRESS
#define ERROR_IO_DEVICE
#define ERROR_SERIAL_NO_DEVICE
#define ERROR_IRQ_BUSY
#define ERROR_MORE_WRITES
#define ERROR_COUNTER_TIMEOUT
#define ERROR_FLOPPY_ID_MARK_NOT_FOUND
#define ERROR_FLOPPY_WRONG_CYLINDER
#define ERROR_FLOPPY_UNKNOWN_ERROR
#define ERROR_FLOPPY_BAD_REGISTERS
#define ERROR_DISK_RECALIBRATE_FAILED
#define ERROR_DISK_OPERATION_FAILED
#define ERROR_DISK_RESET_FAILED
#define ERROR_EOM_OVERFLOW
#define ERROR_NOT_ENOUGH_SERVER_MEMORY
#define ERROR_POSSIBLE_DEADLOCK
#define ERROR_MAPPED_ALIGNMENT
#define ERROR_SET_POWER_STATE_VETOED
#define ERROR_SET_POWER_STATE_FAILED
#define ERROR_TOO_MANY_LINKS
#define ERROR_OLD_WIN_VERSION
#define ERROR_APP_WRONG_OS
#define ERROR_SINGLE_INSTANCE_APP
#define ERROR_RMODE_APP
#define ERROR_INVALID_DLL
#define ERROR_NO_ASSOCIATION
#define ERROR_DDE_FAIL
#define ERROR_DLL_NOT_FOUND
#define ERROR_NO_MORE_USER_HANDLES
#define ERROR_MESSAGE_SYNC_ONLY
#define ERROR_SOURCE_ELEMENT_EMPTY
#define ERROR_DESTINATION_ELEMENT_FULL
#define ERROR_ILLEGAL_ELEMENT_ADDRESS
#define ERROR_MAGAZINE_NOT_PRESENT
#define ERROR_DEVICE_REINITIALIZATION_NEEDED
#define ERROR_DEVICE_REQUIRES_CLEANING
#define ERROR_DEVICE_DOOR_OPEN
#define ERROR_DEVICE_NOT_CONNECTED
#define ERROR_NOT_FOUND
#define ERROR_NO_MATCH
#define ERROR_SET_NOT_FOUND
#define ERROR_POINT_NOT_FOUND
#define ERROR_NO_TRACKING_SERVICE
#define ERROR_NO_VOLUME_ID
#define ERROR_UNABLE_TO_REMOVE_REPLACED
#define ERROR_UNABLE_TO_MOVE_REPLACEMENT
#define ERROR_UNABLE_TO_MOVE_REPLACEMENT_2
#define ERROR_JOURNAL_DELETE_IN_PROGRESS
#define ERROR_JOURNAL_NOT_ACTIVE
#define ERROR_POTENTIAL_FILE_FOUND
#define ERROR_JOURNAL_ENTRY_DELETED
#define ERROR_BAD_DEVICE
#define ERROR_CONNECTION_UNAVAIL
#define ERROR_DEVICE_ALREADY_REMEMBERED
#define ERROR_NO_NET_OR_BAD_PATH
#define ERROR_BAD_PROVIDER
#define ERROR_CANNOT_OPEN_PROFILE
#define ERROR_BAD_PROFILE
#define ERROR_NOT_CONTAINER
#define ERROR_EXTENDED_ERROR
#define ERROR_INVALID_GROUPNAME
#define ERROR_INVALID_COMPUTERNAME
#define ERROR_INVALID_EVENTNAME
#define ERROR_INVALID_DOMAINNAME
#define ERROR_INVALID_SERVICENAME
#define ERROR_INVALID_NETNAME
#define ERROR_INVALID_SHARENAME
#define ERROR_INVALID_PASSWORDNAME
#define ERROR_INVALID_MESSAGENAME
#define ERROR_INVALID_MESSAGEDEST
#define ERROR_SESSION_CREDENTIAL_CONFLICT
#define ERROR_REMOTE_SESSION_LIMIT_EXCEEDED
#define ERROR_DUP_DOMAINNAME
#define ERROR_NO_NETWORK
#define ERROR_CANCELLED
#define ERROR_USER_MAPPED_FILE
#define ERROR_CONNECTION_REFUSED
#define ERROR_GRACEFUL_DISCONNECT
#define ERROR_ADDRESS_ALREADY_ASSOCIATED
#define ERROR_ADDRESS_NOT_ASSOCIATED
#define ERROR_CONNECTION_INVALID
#define ERROR_CONNECTION_ACTIVE
#define ERROR_NETWORK_UNREACHABLE
#define ERROR_HOST_UNREACHABLE
#define ERROR_PROTOCOL_UNREACHABLE
#define ERROR_PORT_UNREACHABLE
#define ERROR_REQUEST_ABORTED
#define ERROR_CONNECTION_ABORTED
#define ERROR_RETRY
#define ERROR_CONNECTION_COUNT_LIMIT
#define ERROR_LOGIN_TIME_RESTRICTION
#define ERROR_LOGIN_WKSTA_RESTRICTION
#define ERROR_INCORRECT_ADDRESS
#define ERROR_ALREADY_REGISTERED
#define ERROR_SERVICE_NOT_FOUND
#define ERROR_NOT_AUTHENTICATED
#define ERROR_NOT_LOGGED_ON
#define ERROR_CONTINUE
#define ERROR_ALREADY_INITIALIZED
#define ERROR_NO_MORE_DEVICES
#define ERROR_NO_SUCH_SITE
#define ERROR_DOMAIN_CONTROLLER_EXISTS
#define ERROR_ONLY_IF_CONNECTED
#define ERROR_OVERRIDE_NOCHANGES
#define ERROR_BAD_USER_PROFILE
#define ERROR_NOT_SUPPORTED_ON_SBS
#define ERROR_SERVER_SHUTDOWN_IN_PROGRESS
#define ERROR_HOST_DOWN
#define ERROR_NON_ACCOUNT_SID
#define ERROR_NON_DOMAIN_SID
#define ERROR_APPHELP_BLOCK
#define ERROR_ACCESS_DISABLED_BY_POLICY
#define ERROR_REG_NAT_CONSUMPTION
#define ERROR_CSCSHARE_OFFLINE
#define ERROR_PKINIT_FAILURE
#define ERROR_SMARTCARD_SUBSYSTEM_FAILURE
#define ERROR_DOWNGRADE_DETECTED
#define ERROR_MACHINE_LOCKED
#define ERROR_CALLBACK_SUPPLIED_INVALID_DATA
#define ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED
#define ERROR_DRIVER_BLOCKED
#define ERROR_INVALID_IMPORT_OF_NON_DLL
#define ERROR_ACCESS_DISABLED_WEBBLADE
#define ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER
#define ERROR_RECOVERY_FAILURE
#define ERROR_ALREADY_FIBER
#define ERROR_ALREADY_THREAD
#define ERROR_STACK_BUFFER_OVERRUN
#define ERROR_PARAMETER_QUOTA_EXCEEDED
#define ERROR_DEBUGGER_INACTIVE
#define ERROR_DELAY_LOAD_FAILED
#define ERROR_VDM_DISALLOWED
#define ERROR_UNIDENTIFIED_ERROR
#define ERROR_NOT_ALL_ASSIGNED
#define ERROR_SOME_NOT_MAPPED
#define ERROR_NO_QUOTAS_FOR_ACCOUNT
#define ERROR_LOCAL_USER_SESSION_KEY
#define ERROR_NULL_LM_PASSWORD
#define ERROR_UNKNOWN_REVISION
#define ERROR_REVISION_MISMATCH
#define ERROR_INVALID_OWNER
#define ERROR_INVALID_PRIMARY_GROUP
#define ERROR_NO_IMPERSONATION_TOKEN
#define ERROR_CANT_DISABLE_MANDATORY
#define ERROR_NO_LOGON_SERVERS
#define ERROR_NO_SUCH_LOGON_SESSION
#define ERROR_NO_SUCH_PRIVILEGE
#define ERROR_PRIVILEGE_NOT_HELD
#define ERROR_INVALID_ACCOUNT_NAME
#define ERROR_USER_EXISTS
#define ERROR_NO_SUCH_USER
#define ERROR_GROUP_EXISTS
#define ERROR_NO_SUCH_GROUP
#define ERROR_MEMBER_IN_GROUP
#define ERROR_MEMBER_NOT_IN_GROUP
#define ERROR_LAST_ADMIN
#define ERROR_WRONG_PASSWORD
#define ERROR_ILL_FORMED_PASSWORD
#define ERROR_PASSWORD_RESTRICTION
#define ERROR_LOGON_FAILURE
#define ERROR_ACCOUNT_RESTRICTION
#define ERROR_INVALID_LOGON_HOURS
#define ERROR_INVALID_WORKSTATION
#define ERROR_PASSWORD_EXPIRED
#define ERROR_ACCOUNT_DISABLED
#define ERROR_NONE_MAPPED
#define ERROR_TOO_MANY_LUIDS_REQUESTED
#define ERROR_LUIDS_EXHAUSTED
#define ERROR_INVALID_SUB_AUTHORITY
#define ERROR_INVALID_ACL
#define ERROR_INVALID_SID
#define ERROR_INVALID_SECURITY_DESCR
#define ERROR_BAD_INHERITANCE_ACL
#define ERROR_SERVER_DISABLED
#define ERROR_SERVER_NOT_DISABLED
#define ERROR_INVALID_ID_AUTHORITY
#define ERROR_ALLOTTED_SPACE_EXCEEDED
#define ERROR_INVALID_GROUP_ATTRIBUTES
#define ERROR_BAD_IMPERSONATION_LEVEL
#define ERROR_CANT_OPEN_ANONYMOUS
#define ERROR_BAD_VALIDATION_CLASS
#define ERROR_BAD_TOKEN_TYPE
#define ERROR_NO_SECURITY_ON_OBJECT
#define ERROR_CANT_ACCESS_DOMAIN_INFO
#define ERROR_INVALID_SERVER_STATE
#define ERROR_INVALID_DOMAIN_STATE
#define ERROR_INVALID_DOMAIN_ROLE
#define ERROR_NO_SUCH_DOMAIN
#define ERROR_DOMAIN_EXISTS
#define ERROR_DOMAIN_LIMIT_EXCEEDED
#define ERROR_INTERNAL_DB_CORRUPTION
#define ERROR_INTERNAL_ERROR
#define ERROR_GENERIC_NOT_MAPPED
#define ERROR_BAD_DESCRIPTOR_FORMAT
#define ERROR_NOT_LOGON_PROCESS
#define ERROR_LOGON_SESSION_EXISTS
#define ERROR_NO_SUCH_PACKAGE
#define ERROR_BAD_LOGON_SESSION_STATE
#define ERROR_LOGON_SESSION_COLLISION
#define ERROR_INVALID_LOGON_TYPE
#define ERROR_CANNOT_IMPERSONATE
#define ERROR_RXACT_INVALID_STATE
#define ERROR_RXACT_COMMIT_FAILURE
#define ERROR_SPECIAL_ACCOUNT
#define ERROR_SPECIAL_GROUP
#define ERROR_SPECIAL_USER
#define ERROR_MEMBERS_PRIMARY_GROUP
#define ERROR_TOKEN_ALREADY_IN_USE
#define ERROR_NO_SUCH_ALIAS
#define ERROR_MEMBER_NOT_IN_ALIAS
#define ERROR_MEMBER_IN_ALIAS
#define ERROR_ALIAS_EXISTS
#define ERROR_LOGON_NOT_GRANTED
#define ERROR_TOO_MANY_SECRETS
#define ERROR_SECRET_TOO_LONG
#define ERROR_INTERNAL_DB_ERROR
#define ERROR_TOO_MANY_CONTEXT_IDS
#define ERROR_LOGON_TYPE_NOT_GRANTED
#define ERROR_NT_CROSS_ENCRYPTION_REQUIRED
#define ERROR_NO_SUCH_MEMBER
#define ERROR_INVALID_MEMBER
#define ERROR_TOO_MANY_SIDS
#define ERROR_LM_CROSS_ENCRYPTION_REQUIRED
#define ERROR_NO_INHERITANCE
#define ERROR_FILE_CORRUPT
#define ERROR_DISK_CORRUPT
#define ERROR_NO_USER_SESSION_KEY
#define ERROR_LICENSE_QUOTA_EXCEEDED
#define ERROR_WRONG_TARGET_NAME
#define ERROR_MUTUAL_AUTH_FAILED
#define ERROR_TIME_SKEW
#define ERROR_CURRENT_DOMAIN_NOT_ALLOWED
#define ERROR_INVALID_WINDOW_HANDLE
#define ERROR_INVALID_MENU_HANDLE
#define ERROR_INVALID_CURSOR_HANDLE
#define ERROR_INVALID_ACCEL_HANDLE
#define ERROR_INVALID_HOOK_HANDLE
#define ERROR_INVALID_DWP_HANDLE
#define ERROR_TLW_WITH_WSCHILD
#define ERROR_CANNOT_FIND_WND_CLASS
#define ERROR_WINDOW_OF_OTHER_THREAD
#define ERROR_HOTKEY_ALREADY_REGISTERED
#define ERROR_CLASS_ALREADY_EXISTS
#define ERROR_CLASS_DOES_NOT_EXIST
#define ERROR_CLASS_HAS_WINDOWS
#define ERROR_INVALID_INDEX
#define ERROR_INVALID_ICON_HANDLE
#define ERROR_PRIVATE_DIALOG_INDEX
#define ERROR_LISTBOX_ID_NOT_FOUND
#define ERROR_NO_WILDCARD_CHARACTERS
#define ERROR_CLIPBOARD_NOT_OPEN
#define ERROR_HOTKEY_NOT_REGISTERED
#define ERROR_WINDOW_NOT_DIALOG
#define ERROR_CONTROL_ID_NOT_FOUND
#define ERROR_INVALID_COMBOBOX_MESSAGE
#define ERROR_WINDOW_NOT_COMBOBOX
#define ERROR_INVALID_EDIT_HEIGHT
#define ERROR_DC_NOT_FOUND
#define ERROR_INVALID_HOOK_FILTER
#define ERROR_INVALID_FILTER_PROC
#define ERROR_HOOK_NEEDS_HMOD
#define ERROR_GLOBAL_ONLY_HOOK
#define ERROR_JOURNAL_HOOK_SET
#define ERROR_HOOK_NOT_INSTALLED
#define ERROR_INVALID_LB_MESSAGE
#define ERROR_SETCOUNT_ON_BAD_LB
#define ERROR_LB_WITHOUT_TABSTOPS
#define ERROR_DESTROY_OBJECT_OF_OTHER_THREAD
#define ERROR_CHILD_WINDOW_MENU
#define ERROR_NO_SYSTEM_MENU
#define ERROR_INVALID_MSGBOX_STYLE
#define ERROR_INVALID_SPI_VALUE
#define ERROR_SCREEN_ALREADY_LOCKED
#define ERROR_HWNDS_HAVE_DIFF_PARENT
#define ERROR_NOT_CHILD_WINDOW
#define ERROR_INVALID_GW_COMMAND
#define ERROR_INVALID_THREAD_ID
#define ERROR_NON_MDICHILD_WINDOW
#define ERROR_POPUP_ALREADY_ACTIVE
#define ERROR_NO_SCROLLBARS
#define ERROR_INVALID_SCROLLBAR_RANGE
#define ERROR_INVALID_SHOWWIN_COMMAND
#define ERROR_NO_SYSTEM_RESOURCES
#define ERROR_NONPAGED_SYSTEM_RESOURCES
#define ERROR_PAGED_SYSTEM_RESOURCES
#define ERROR_WORKING_SET_QUOTA
#define ERROR_PAGEFILE_QUOTA
#define ERROR_COMMITMENT_LIMIT
#define ERROR_MENU_ITEM_NOT_FOUND
#define ERROR_INVALID_KEYBOARD_HANDLE
#define ERROR_HOOK_TYPE_NOT_ALLOWED
#define ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION
#define ERROR_TIMEOUT
#define ERROR_INVALID_MONITOR_HANDLE
#define ERROR_INCORRECT_SIZE
#define ERROR_EVENTLOG_FILE_CORRUPT
#define ERROR_EVENTLOG_CANT_START
#define ERROR_LOG_FILE_FULL
#define ERROR_EVENTLOG_FILE_CHANGED
#define ERROR_INSTALL_SERVICE_FAILURE
#define ERROR_INSTALL_USEREXIT
#define ERROR_INSTALL_FAILURE
#define ERROR_INSTALL_SUSPEND
#define ERROR_UNKNOWN_PRODUCT
#define ERROR_UNKNOWN_FEATURE
#define ERROR_UNKNOWN_COMPONENT
#define ERROR_UNKNOWN_PROPERTY
#define ERROR_INVALID_HANDLE_STATE
#define ERROR_BAD_CONFIGURATION
#define ERROR_INDEX_ABSENT
#define ERROR_INSTALL_SOURCE_ABSENT
#define ERROR_INSTALL_PACKAGE_VERSION
#define ERROR_PRODUCT_UNINSTALLED
#define ERROR_BAD_QUERY_SYNTAX
#define ERROR_INVALID_FIELD
#define ERROR_DEVICE_REMOVED
#define ERROR_INSTALL_ALREADY_RUNNING
#define ERROR_INSTALL_PACKAGE_OPEN_FAILED
#define ERROR_INSTALL_PACKAGE_INVALID
#define ERROR_INSTALL_UI_FAILURE
#define ERROR_INSTALL_LOG_FAILURE
#define ERROR_INSTALL_LANGUAGE_UNSUPPORTED
#define ERROR_INSTALL_TRANSFORM_FAILURE
#define ERROR_INSTALL_PACKAGE_REJECTED
#define ERROR_FUNCTION_NOT_CALLED
#define ERROR_FUNCTION_FAILED
#define ERROR_INVALID_TABLE
#define ERROR_DATATYPE_MISMATCH
#define ERROR_UNSUPPORTED_TYPE
#define ERROR_CREATE_FAILED
#define ERROR_INSTALL_TEMP_UNWRITABLE
#define ERROR_INSTALL_PLATFORM_UNSUPPORTED
#define ERROR_INSTALL_NOTUSED
#define ERROR_PATCH_PACKAGE_OPEN_FAILED
#define ERROR_PATCH_PACKAGE_INVALID
#define ERROR_PATCH_PACKAGE_UNSUPPORTED
#define ERROR_PRODUCT_VERSION
#define ERROR_INVALID_COMMAND_LINE
#define ERROR_INSTALL_REMOTE_DISALLOWED
#define ERROR_SUCCESS_REBOOT_INITIATED
#define ERROR_PATCH_TARGET_NOT_FOUND
#define ERROR_PATCH_PACKAGE_REJECTED
#define ERROR_INSTALL_TRANSFORM_REJECTED
#define ERROR_INSTALL_REMOTE_PROHIBITED
#define RPC_S_INVALID_STRING_BINDING
#define RPC_S_WRONG_KIND_OF_BINDING
#define RPC_S_INVALID_BINDING
#define RPC_S_PROTSEQ_NOT_SUPPORTED
#define RPC_S_INVALID_RPC_PROTSEQ
#define RPC_S_INVALID_STRING_UUID
#define RPC_S_INVALID_ENDPOINT_FORMAT
#define RPC_S_INVALID_NET_ADDR
#define RPC_S_NO_ENDPOINT_FOUND
#define RPC_S_INVALID_TIMEOUT
#define RPC_S_OBJECT_NOT_FOUND
#define RPC_S_ALREADY_REGISTERED
#define RPC_S_TYPE_ALREADY_REGISTERED
#define RPC_S_ALREADY_LISTENING
#define RPC_S_NO_PROTSEQS_REGISTERED
#define RPC_S_NOT_LISTENING
#define RPC_S_UNKNOWN_MGR_TYPE
#define RPC_S_UNKNOWN_IF
#define RPC_S_NO_BINDINGS
#define RPC_S_NO_PROTSEQS
#define RPC_S_CANT_CREATE_ENDPOINT
#define RPC_S_OUT_OF_RESOURCES
#define RPC_S_SERVER_UNAVAILABLE
#define RPC_S_SERVER_TOO_BUSY
#define RPC_S_INVALID_NETWORK_OPTIONS
#define RPC_S_NO_CALL_ACTIVE
#define RPC_S_CALL_FAILED
#define RPC_S_CALL_FAILED_DNE
#define RPC_S_PROTOCOL_ERROR
#define RPC_S_UNSUPPORTED_TRANS_SYN
#define RPC_S_UNSUPPORTED_TYPE
#define RPC_S_INVALID_TAG
#define RPC_S_INVALID_BOUND
#define RPC_S_NO_ENTRY_NAME
#define RPC_S_INVALID_NAME_SYNTAX
#define RPC_S_UNSUPPORTED_NAME_SYNTAX
#define RPC_S_UUID_NO_ADDRESS
#define RPC_S_DUPLICATE_ENDPOINT
#define RPC_S_UNKNOWN_AUTHN_TYPE
#define RPC_S_MAX_CALLS_TOO_SMALL
#define RPC_S_STRING_TOO_LONG
#define RPC_S_PROTSEQ_NOT_FOUND
#define RPC_S_PROCNUM_OUT_OF_RANGE
#define RPC_S_BINDING_HAS_NO_AUTH
#define RPC_S_UNKNOWN_AUTHN_SERVICE
#define RPC_S_UNKNOWN_AUTHN_LEVEL
#define RPC_S_INVALID_AUTH_IDENTITY
#define RPC_S_UNKNOWN_AUTHZ_SERVICE
#define EPT_S_INVALID_ENTRY
#define EPT_S_CANT_PERFORM_OP
#define EPT_S_NOT_REGISTERED
#define RPC_S_NOTHING_TO_EXPORT
#define RPC_S_INCOMPLETE_NAME
#define RPC_S_INVALID_VERS_OPTION
#define RPC_S_NO_MORE_MEMBERS
#define RPC_S_NOT_ALL_OBJS_UNEXPORTED
#define RPC_S_INTERFACE_NOT_FOUND
#define RPC_S_ENTRY_ALREADY_EXISTS
#define RPC_S_ENTRY_NOT_FOUND
#define RPC_S_NAME_SERVICE_UNAVAILABLE
#define RPC_S_INVALID_NAF_ID
#define RPC_S_CANNOT_SUPPORT
#define RPC_S_NO_CONTEXT_AVAILABLE
#define RPC_S_INTERNAL_ERROR
#define RPC_S_ZERO_DIVIDE
#define RPC_S_ADDRESS_ERROR
#define RPC_S_FP_DIV_ZERO
#define RPC_S_FP_UNDERFLOW
#define RPC_S_FP_OVERFLOW
#define RPC_X_NO_MORE_ENTRIES
#define RPC_X_SS_CHAR_TRANS_OPEN_FAIL
#define RPC_X_SS_CHAR_TRANS_SHORT_FILE
#define RPC_X_SS_IN_NULL_CONTEXT
#define RPC_X_SS_CONTEXT_DAMAGED
#define RPC_X_SS_HANDLES_MISMATCH
#define RPC_X_SS_CANNOT_GET_CALL_HANDLE
#define RPC_X_NULL_REF_POINTER
#define RPC_X_ENUM_VALUE_OUT_OF_RANGE
#define RPC_X_BYTE_COUNT_TOO_SMALL
#define RPC_X_BAD_STUB_DATA
#define ERROR_INVALID_USER_BUFFER
#define ERROR_UNRECOGNIZED_MEDIA
#define ERROR_NO_TRUST_LSA_SECRET
#define ERROR_NO_TRUST_SAM_ACCOUNT
#define ERROR_TRUSTED_DOMAIN_FAILURE
#define ERROR_TRUSTED_RELATIONSHIP_FAILURE
#define ERROR_TRUST_FAILURE
#define RPC_S_CALL_IN_PROGRESS
#define ERROR_NETLOGON_NOT_STARTED
#define ERROR_ACCOUNT_EXPIRED
#define ERROR_REDIRECTOR_HAS_OPEN_HANDLES
#define ERROR_PRINTER_DRIVER_ALREADY_INSTALLED
#define ERROR_UNKNOWN_PORT
#define ERROR_UNKNOWN_PRINTER_DRIVER
#define ERROR_UNKNOWN_PRINTPROCESSOR
#define ERROR_INVALID_SEPARATOR_FILE
#define ERROR_INVALID_PRIORITY
#define ERROR_INVALID_PRINTER_NAME
#define ERROR_PRINTER_ALREADY_EXISTS
#define ERROR_INVALID_PRINTER_COMMAND
#define ERROR_INVALID_DATATYPE
#define ERROR_INVALID_ENVIRONMENT
#define RPC_S_NO_MORE_BINDINGS
#define ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT
#define ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT
#define ERROR_NOLOGON_SERVER_TRUST_ACCOUNT
#define ERROR_DOMAIN_TRUST_INCONSISTENT
#define ERROR_SERVER_HAS_OPEN_HANDLES
#define ERROR_RESOURCE_DATA_NOT_FOUND
#define ERROR_RESOURCE_TYPE_NOT_FOUND
#define ERROR_RESOURCE_NAME_NOT_FOUND
#define ERROR_RESOURCE_LANG_NOT_FOUND
#define ERROR_NOT_ENOUGH_QUOTA
#define RPC_S_NO_INTERFACES
#define RPC_S_CALL_CANCELLED
#define RPC_S_BINDING_INCOMPLETE
#define RPC_S_COMM_FAILURE
#define RPC_S_UNSUPPORTED_AUTHN_LEVEL
#define RPC_S_NO_PRINC_NAME
#define RPC_S_NOT_RPC_ERROR
#define RPC_S_UUID_LOCAL_ONLY
#define RPC_S_SEC_PKG_ERROR
#define RPC_S_NOT_CANCELLED
#define RPC_X_INVALID_ES_ACTION
#define RPC_X_WRONG_ES_VERSION
#define RPC_X_WRONG_STUB_VERSION
#define RPC_X_INVALID_PIPE_OBJECT
#define RPC_X_WRONG_PIPE_ORDER
#define RPC_X_WRONG_PIPE_VERSION
#define RPC_S_GROUP_MEMBER_NOT_FOUND
#define EPT_S_CANT_CREATE
#define RPC_S_INVALID_OBJECT
#define ERROR_INVALID_TIME
#define ERROR_INVALID_FORM_NAME
#define ERROR_INVALID_FORM_SIZE
#define ERROR_ALREADY_WAITING
#define ERROR_PRINTER_DELETED
#define ERROR_INVALID_PRINTER_STATE
#define ERROR_PASSWORD_MUST_CHANGE
#define ERROR_DOMAIN_CONTROLLER_NOT_FOUND
#define ERROR_ACCOUNT_LOCKED_OUT
#define OR_INVALID_OXID
#define OR_INVALID_OID
#define OR_INVALID_SET
#define RPC_S_SEND_INCOMPLETE
#define RPC_S_INVALID_ASYNC_HANDLE
#define RPC_S_INVALID_ASYNC_CALL
#define RPC_X_PIPE_CLOSED
#define RPC_X_PIPE_DISCIPLINE_ERROR
#define RPC_X_PIPE_EMPTY
#define ERROR_NO_SITENAME
#define ERROR_CANT_ACCESS_FILE
#define ERROR_CANT_RESOLVE_FILENAME
#define RPC_S_ENTRY_TYPE_MISMATCH
#define RPC_S_NOT_ALL_OBJS_EXPORTED
#define RPC_S_INTERFACE_NOT_EXPORTED
#define RPC_S_PROFILE_NOT_ADDED
#define RPC_S_PRF_ELT_NOT_ADDED
#define RPC_S_PRF_ELT_NOT_REMOVED
#define RPC_S_GRP_ELT_NOT_ADDED
#define RPC_S_GRP_ELT_NOT_REMOVED
#define ERROR_KM_DRIVER_BLOCKED
#define ERROR_CONTEXT_EXPIRED
#define ERROR_PER_USER_TRUST_QUOTA_EXCEEDED
#define ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED
#define ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED
#define ERROR_AUTHENTICATION_FIREWALL_FAILED
#define ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED
#define ERROR_INVALID_PIXEL_FORMAT
#define ERROR_BAD_DRIVER
#define ERROR_INVALID_WINDOW_STYLE
#define ERROR_METAFILE_NOT_SUPPORTED
#define ERROR_TRANSFORM_NOT_SUPPORTED
#define ERROR_CLIPPING_NOT_SUPPORTED
#define ERROR_INVALID_CMM
#define ERROR_INVALID_PROFILE
#define ERROR_TAG_NOT_FOUND
#define ERROR_TAG_NOT_PRESENT
#define ERROR_DUPLICATE_TAG
#define ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE
#define ERROR_PROFILE_NOT_FOUND
#define ERROR_INVALID_COLORSPACE
#define ERROR_ICM_NOT_ENABLED
#define ERROR_DELETING_ICM_XFORM
#define ERROR_INVALID_TRANSFORM
#define ERROR_COLORSPACE_MISMATCH
#define ERROR_INVALID_COLORINDEX
#define ERROR_CONNECTED_OTHER_PASSWORD
#define ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT
#define ERROR_BAD_USERNAME
#define ERROR_NOT_CONNECTED
#define ERROR_OPEN_FILES
#define ERROR_ACTIVE_CONNECTIONS
#define ERROR_DEVICE_IN_USE
#define ERROR_UNKNOWN_PRINT_MONITOR
#define ERROR_PRINTER_DRIVER_IN_USE
#define ERROR_SPOOL_FILE_NOT_FOUND
#define ERROR_SPL_NO_STARTDOC
#define ERROR_SPL_NO_ADDJOB
#define ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED
#define ERROR_PRINT_MONITOR_ALREADY_INSTALLED
#define ERROR_INVALID_PRINT_MONITOR
#define ERROR_PRINT_MONITOR_IN_USE
#define ERROR_PRINTER_HAS_JOBS_QUEUED
#define ERROR_SUCCESS_REBOOT_REQUIRED
#define ERROR_SUCCESS_RESTART_REQUIRED
#define ERROR_PRINTER_NOT_FOUND
#define ERROR_PRINTER_DRIVER_WARNED
#define ERROR_PRINTER_DRIVER_BLOCKED
#define ERROR_WINS_INTERNAL
#define ERROR_CAN_NOT_DEL_LOCAL_WINS
#define ERROR_STATIC_INIT
#define ERROR_INC_BACKUP
#define ERROR_FULL_BACKUP
#define ERROR_REC_NON_EXISTENT
#define ERROR_RPL_NOT_ALLOWED
#define ERROR_DHCP_ADDRESS_CONFLICT
#define ERROR_WMI_GUID_NOT_FOUND
#define ERROR_WMI_INSTANCE_NOT_FOUND
#define ERROR_WMI_ITEMID_NOT_FOUND
#define ERROR_WMI_TRY_AGAIN
#define ERROR_WMI_DP_NOT_FOUND
#define ERROR_WMI_UNRESOLVED_INSTANCE_REF
#define ERROR_WMI_ALREADY_ENABLED
#define ERROR_WMI_GUID_DISCONNECTED
#define ERROR_WMI_SERVER_UNAVAILABLE
#define ERROR_WMI_DP_FAILED
#define ERROR_WMI_INVALID_MOF
#define ERROR_WMI_INVALID_REGINFO
#define ERROR_WMI_ALREADY_DISABLED
#define ERROR_WMI_READ_ONLY
#define ERROR_WMI_SET_FAILURE
#define ERROR_INVALID_MEDIA
#define ERROR_INVALID_LIBRARY
#define ERROR_INVALID_MEDIA_POOL
#define ERROR_DRIVE_MEDIA_MISMATCH
#define ERROR_MEDIA_OFFLINE
#define ERROR_LIBRARY_OFFLINE
#define ERROR_EMPTY
#define ERROR_NOT_EMPTY
#define ERROR_MEDIA_UNAVAILABLE
#define ERROR_RESOURCE_DISABLED
#define ERROR_INVALID_CLEANER
#define ERROR_UNABLE_TO_CLEAN
#define ERROR_OBJECT_NOT_FOUND
#define ERROR_DATABASE_FAILURE
#define ERROR_DATABASE_FULL
#define ERROR_MEDIA_INCOMPATIBLE
#define ERROR_RESOURCE_NOT_PRESENT
#define ERROR_INVALID_OPERATION
#define ERROR_MEDIA_NOT_AVAILABLE
#define ERROR_DEVICE_NOT_AVAILABLE
#define ERROR_REQUEST_REFUSED
#define ERROR_INVALID_DRIVE_OBJECT
#define ERROR_LIBRARY_FULL
#define ERROR_MEDIUM_NOT_ACCESSIBLE
#define ERROR_UNABLE_TO_LOAD_MEDIUM
#define ERROR_UNABLE_TO_INVENTORY_DRIVE
#define ERROR_UNABLE_TO_INVENTORY_SLOT
#define ERROR_UNABLE_TO_INVENTORY_TRANSPORT
#define ERROR_TRANSPORT_FULL
#define ERROR_CONTROLLING_IEPORT
#define ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA
#define ERROR_CLEANER_SLOT_SET
#define ERROR_CLEANER_SLOT_NOT_SET
#define ERROR_CLEANER_CARTRIDGE_SPENT
#define ERROR_UNEXPECTED_OMID
#define ERROR_CANT_DELETE_LAST_ITEM
#define ERROR_MESSAGE_EXCEEDS_MAX_SIZE
#define ERROR_VOLUME_CONTAINS_SYS_FILES
#define ERROR_INDIGENOUS_TYPE
#define ERROR_NO_SUPPORTING_DRIVES
#define ERROR_CLEANER_CARTRIDGE_INSTALLED
#define ERROR_IEPORT_FULL
#define ERROR_FILE_OFFLINE
#define ERROR_REMOTE_STORAGE_NOT_ACTIVE
#define ERROR_REMOTE_STORAGE_MEDIA_ERROR
#define ERROR_NOT_A_REPARSE_POINT
#define ERROR_REPARSE_ATTRIBUTE_CONFLICT
#define ERROR_INVALID_REPARSE_DATA
#define ERROR_REPARSE_TAG_INVALID
#define ERROR_REPARSE_TAG_MISMATCH
#define ERROR_VOLUME_NOT_SIS_ENABLED
#define ERROR_DEPENDENT_RESOURCE_EXISTS
#define ERROR_DEPENDENCY_NOT_FOUND
#define ERROR_DEPENDENCY_ALREADY_EXISTS
#define ERROR_RESOURCE_NOT_ONLINE
#define ERROR_HOST_NODE_NOT_AVAILABLE
#define ERROR_RESOURCE_NOT_AVAILABLE
#define ERROR_RESOURCE_NOT_FOUND
#define ERROR_SHUTDOWN_CLUSTER
#define ERROR_CANT_EVICT_ACTIVE_NODE
#define ERROR_OBJECT_ALREADY_EXISTS
#define ERROR_OBJECT_IN_LIST
#define ERROR_GROUP_NOT_AVAILABLE
#define ERROR_GROUP_NOT_FOUND
#define ERROR_GROUP_NOT_ONLINE
#define ERROR_HOST_NODE_NOT_RESOURCE_OWNER
#define ERROR_HOST_NODE_NOT_GROUP_OWNER
#define ERROR_RESMON_CREATE_FAILED
#define ERROR_RESMON_ONLINE_FAILED
#define ERROR_RESOURCE_ONLINE
#define ERROR_QUORUM_RESOURCE
#define ERROR_NOT_QUORUM_CAPABLE
#define ERROR_CLUSTER_SHUTTING_DOWN
#define ERROR_INVALID_STATE
#define ERROR_RESOURCE_PROPERTIES_STORED
#define ERROR_NOT_QUORUM_CLASS
#define ERROR_CORE_RESOURCE
#define ERROR_QUORUM_RESOURCE_ONLINE_FAILED
#define ERROR_QUORUMLOG_OPEN_FAILED
#define ERROR_CLUSTERLOG_CORRUPT
#define ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE
#define ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE
#define ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND
#define ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE
#define ERROR_QUORUM_OWNER_ALIVE
#define ERROR_NETWORK_NOT_AVAILABLE
#define ERROR_NODE_NOT_AVAILABLE
#define ERROR_ALL_NODES_NOT_AVAILABLE
#define ERROR_RESOURCE_FAILED
#define ERROR_CLUSTER_INVALID_NODE
#define ERROR_CLUSTER_NODE_EXISTS
#define ERROR_CLUSTER_JOIN_IN_PROGRESS
#define ERROR_CLUSTER_NODE_NOT_FOUND
#define ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND
#define ERROR_CLUSTER_NETWORK_EXISTS
#define ERROR_CLUSTER_NETWORK_NOT_FOUND
#define ERROR_CLUSTER_NETINTERFACE_EXISTS
#define ERROR_CLUSTER_NETINTERFACE_NOT_FOUND
#define ERROR_CLUSTER_INVALID_REQUEST
#define ERROR_CLUSTER_INVALID_NETWORK_PROVIDER
#define ERROR_CLUSTER_NODE_DOWN
#define ERROR_CLUSTER_NODE_UNREACHABLE
#define ERROR_CLUSTER_NODE_NOT_MEMBER
#define ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS
#define ERROR_CLUSTER_INVALID_NETWORK
#define ERROR_CLUSTER_NODE_UP
#define ERROR_CLUSTER_IPADDR_IN_USE
#define ERROR_CLUSTER_NODE_NOT_PAUSED
#define ERROR_CLUSTER_NO_SECURITY_CONTEXT
#define ERROR_CLUSTER_NETWORK_NOT_INTERNAL
#define ERROR_CLUSTER_NODE_ALREADY_UP
#define ERROR_CLUSTER_NODE_ALREADY_DOWN
#define ERROR_CLUSTER_NETWORK_ALREADY_ONLINE
#define ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE
#define ERROR_CLUSTER_NODE_ALREADY_MEMBER
#define ERROR_CLUSTER_LAST_INTERNAL_NETWORK
#define ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS
#define ERROR_INVALID_OPERATION_ON_QUORUM
#define ERROR_DEPENDENCY_NOT_ALLOWED
#define ERROR_CLUSTER_NODE_PAUSED
#define ERROR_NODE_CANT_HOST_RESOURCE
#define ERROR_CLUSTER_NODE_NOT_READY
#define ERROR_CLUSTER_NODE_SHUTTING_DOWN
#define ERROR_CLUSTER_JOIN_ABORTED
#define ERROR_CLUSTER_INCOMPATIBLE_VERSIONS
#define ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED
#define ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED
#define ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND
#define ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED
#define ERROR_CLUSTER_RESNAME_NOT_FOUND
#define ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED
#define ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST
#define ERROR_CLUSTER_DATABASE_SEQMISMATCH
#define ERROR_RESMON_INVALID_STATE
#define ERROR_CLUSTER_GUM_NOT_LOCKER
#define ERROR_QUORUM_DISK_NOT_FOUND
#define ERROR_DATABASE_BACKUP_CORRUPT
#define ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT
#define ERROR_RESOURCE_PROPERTY_UNCHANGEABLE
#define ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE
#define ERROR_CLUSTER_QUORUMLOG_NOT_FOUND
#define ERROR_CLUSTER_MEMBERSHIP_HALT
#define ERROR_CLUSTER_INSTANCE_ID_MISMATCH
#define ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP
#define ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH
#define ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP
#define ERROR_CLUSTER_PARAMETER_MISMATCH
#define ERROR_NODE_CANNOT_BE_CLUSTERED
#define ERROR_CLUSTER_WRONG_OS_VERSION
#define ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME
#define ERROR_CLUSCFG_ALREADY_COMMITTED
#define ERROR_CLUSCFG_ROLLBACK_FAILED
#define ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT
#define ERROR_CLUSTER_OLD_VERSION
#define ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME
#define ERROR_ENCRYPTION_FAILED
#define ERROR_DECRYPTION_FAILED
#define ERROR_FILE_ENCRYPTED
#define ERROR_NO_RECOVERY_POLICY
#define ERROR_NO_EFS
#define ERROR_WRONG_EFS
#define ERROR_NO_USER_KEYS
#define ERROR_FILE_NOT_ENCRYPTED
#define ERROR_NOT_EXPORT_FORMAT
#define ERROR_FILE_READ_ONLY
#define ERROR_DIR_EFS_DISALLOWED
#define ERROR_EFS_SERVER_NOT_TRUSTED
#define ERROR_BAD_RECOVERY_POLICY
#define ERROR_EFS_ALG_BLOB_TOO_BIG
#define ERROR_VOLUME_NOT_SUPPORT_EFS
#define ERROR_EFS_DISABLED
#define ERROR_EFS_VERSION_NOT_SUPPORT
#define ERROR_NO_BROWSER_SERVERS_FOUND
#define SCHED_E_SERVICE_NOT_LOCALSYSTEM
#define ERROR_CTX_WINSTATION_NAME_INVALID
#define ERROR_CTX_INVALID_PD
#define ERROR_CTX_PD_NOT_FOUND
#define ERROR_CTX_WD_NOT_FOUND
#define ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY
#define ERROR_CTX_SERVICE_NAME_COLLISION
#define ERROR_CTX_CLOSE_PENDING
#define ERROR_CTX_NO_OUTBUF
#define ERROR_CTX_MODEM_INF_NOT_FOUND
#define ERROR_CTX_INVALID_MODEMNAME
#define ERROR_CTX_MODEM_RESPONSE_ERROR
#define ERROR_CTX_MODEM_RESPONSE_TIMEOUT
#define ERROR_CTX_MODEM_RESPONSE_NO_CARRIER
#define ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE
#define ERROR_CTX_MODEM_RESPONSE_BUSY
#define ERROR_CTX_MODEM_RESPONSE_VOICE
#define ERROR_CTX_TD_ERROR
#define ERROR_CTX_WINSTATION_NOT_FOUND
#define ERROR_CTX_WINSTATION_ALREADY_EXISTS
#define ERROR_CTX_WINSTATION_BUSY
#define ERROR_CTX_BAD_VIDEO_MODE
#define ERROR_CTX_GRAPHICS_INVALID
#define ERROR_CTX_LOGON_DISABLED
#define ERROR_CTX_NOT_CONSOLE
#define ERROR_CTX_CLIENT_QUERY_TIMEOUT
#define ERROR_CTX_CONSOLE_DISCONNECT
#define ERROR_CTX_CONSOLE_CONNECT
#define ERROR_CTX_SHADOW_DENIED
#define ERROR_CTX_WINSTATION_ACCESS_DENIED
#define ERROR_CTX_INVALID_WD
#define ERROR_CTX_SHADOW_INVALID
#define ERROR_CTX_SHADOW_DISABLED
#define ERROR_CTX_CLIENT_LICENSE_IN_USE
#define ERROR_CTX_CLIENT_LICENSE_NOT_SET
#define ERROR_CTX_LICENSE_NOT_AVAILABLE
#define ERROR_CTX_LICENSE_CLIENT_INVALID
#define ERROR_CTX_LICENSE_EXPIRED
#define ERROR_CTX_SHADOW_NOT_RUNNING
#define ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE
#define ERROR_ACTIVATION_COUNT_EXCEEDED
#define FRS_ERR_INVALID_API_SEQUENCE
#define FRS_ERR_STARTING_SERVICE
#define FRS_ERR_STOPPING_SERVICE
#define FRS_ERR_INTERNAL_API
#define FRS_ERR_INTERNAL
#define FRS_ERR_SERVICE_COMM
#define FRS_ERR_INSUFFICIENT_PRIV
#define FRS_ERR_AUTHENTICATION
#define FRS_ERR_PARENT_INSUFFICIENT_PRIV
#define FRS_ERR_PARENT_AUTHENTICATION
#define FRS_ERR_CHILD_TO_PARENT_COMM
#define FRS_ERR_PARENT_TO_CHILD_COMM
#define FRS_ERR_SYSVOL_POPULATE
#define FRS_ERR_SYSVOL_POPULATE_TIMEOUT
#define FRS_ERR_SYSVOL_IS_BUSY
#define FRS_ERR_SYSVOL_DEMOTE
#define FRS_ERR_INVALID_SERVICE_PARAMETER
#define DS_S_SUCCESS
#define ERROR_DS_NOT_INSTALLED
#define ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY
#define ERROR_DS_NO_ATTRIBUTE_OR_VALUE
#define ERROR_DS_INVALID_ATTRIBUTE_SYNTAX
#define ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED
#define ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS
#define ERROR_DS_BUSY
#define ERROR_DS_UNAVAILABLE
#define ERROR_DS_NO_RIDS_ALLOCATED
#define ERROR_DS_NO_MORE_RIDS
#define ERROR_DS_INCORRECT_ROLE_OWNER
#define ERROR_DS_RIDMGR_INIT_ERROR
#define ERROR_DS_OBJ_CLASS_VIOLATION
#define ERROR_DS_CANT_ON_NON_LEAF
#define ERROR_DS_CANT_ON_RDN
#define ERROR_DS_CANT_MOD_OBJ_CLASS
#define ERROR_DS_CROSS_DOM_MOVE_ERROR
#define ERROR_DS_GC_NOT_AVAILABLE
#define ERROR_SHARED_POLICY
#define ERROR_POLICY_OBJECT_NOT_FOUND
#define ERROR_POLICY_ONLY_IN_DS
#define ERROR_PROMOTION_ACTIVE
#define ERROR_NO_PROMOTION_ACTIVE
#define ERROR_DS_OPERATIONS_ERROR
#define ERROR_DS_PROTOCOL_ERROR
#define ERROR_DS_TIMELIMIT_EXCEEDED
#define ERROR_DS_SIZELIMIT_EXCEEDED
#define ERROR_DS_ADMIN_LIMIT_EXCEEDED
#define ERROR_DS_COMPARE_FALSE
#define ERROR_DS_COMPARE_TRUE
#define ERROR_DS_AUTH_METHOD_NOT_SUPPORTED
#define ERROR_DS_STRONG_AUTH_REQUIRED
#define ERROR_DS_INAPPROPRIATE_AUTH
#define ERROR_DS_AUTH_UNKNOWN
#define ERROR_DS_REFERRAL
#define ERROR_DS_UNAVAILABLE_CRIT_EXTENSION
#define ERROR_DS_CONFIDENTIALITY_REQUIRED
#define ERROR_DS_INAPPROPRIATE_MATCHING
#define ERROR_DS_CONSTRAINT_VIOLATION
#define ERROR_DS_NO_SUCH_OBJECT
#define ERROR_DS_ALIAS_PROBLEM
#define ERROR_DS_INVALID_DN_SYNTAX
#define ERROR_DS_IS_LEAF
#define ERROR_DS_ALIAS_DEREF_PROBLEM
#define ERROR_DS_UNWILLING_TO_PERFORM
#define ERROR_DS_LOOP_DETECT
#define ERROR_DS_NAMING_VIOLATION
#define ERROR_DS_OBJECT_RESULTS_TOO_LARGE
#define ERROR_DS_AFFECTS_MULTIPLE_DSAS
#define ERROR_DS_SERVER_DOWN
#define ERROR_DS_LOCAL_ERROR
#define ERROR_DS_ENCODING_ERROR
#define ERROR_DS_DECODING_ERROR
#define ERROR_DS_FILTER_UNKNOWN
#define ERROR_DS_PARAM_ERROR
#define ERROR_DS_NOT_SUPPORTED
#define ERROR_DS_NO_RESULTS_RETURNED
#define ERROR_DS_CONTROL_NOT_FOUND
#define ERROR_DS_CLIENT_LOOP
#define ERROR_DS_REFERRAL_LIMIT_EXCEEDED
#define ERROR_DS_SORT_CONTROL_MISSING
#define ERROR_DS_OFFSET_RANGE_ERROR
#define ERROR_DS_ROOT_MUST_BE_NC
#define ERROR_DS_ADD_REPLICA_INHIBITED
#define ERROR_DS_ATT_NOT_DEF_IN_SCHEMA
#define ERROR_DS_MAX_OBJ_SIZE_EXCEEDED
#define ERROR_DS_OBJ_STRING_NAME_EXISTS
#define ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA
#define ERROR_DS_RDN_DOESNT_MATCH_SCHEMA
#define ERROR_DS_NO_REQUESTED_ATTS_FOUND
#define ERROR_DS_USER_BUFFER_TO_SMALL
#define ERROR_DS_ATT_IS_NOT_ON_OBJ
#define ERROR_DS_ILLEGAL_MOD_OPERATION
#define ERROR_DS_OBJ_TOO_LARGE
#define ERROR_DS_BAD_INSTANCE_TYPE
#define ERROR_DS_MASTERDSA_REQUIRED
#define ERROR_DS_OBJECT_CLASS_REQUIRED
#define ERROR_DS_MISSING_REQUIRED_ATT
#define ERROR_DS_ATT_NOT_DEF_FOR_CLASS
#define ERROR_DS_ATT_ALREADY_EXISTS
#define ERROR_DS_CANT_ADD_ATT_VALUES
#define ERROR_DS_SINGLE_VALUE_CONSTRAINT
#define ERROR_DS_RANGE_CONSTRAINT
#define ERROR_DS_ATT_VAL_ALREADY_EXISTS
#define ERROR_DS_CANT_REM_MISSING_ATT
#define ERROR_DS_CANT_REM_MISSING_ATT_VAL
#define ERROR_DS_ROOT_CANT_BE_SUBREF
#define ERROR_DS_NO_CHAINING
#define ERROR_DS_NO_CHAINED_EVAL
#define ERROR_DS_NO_PARENT_OBJECT
#define ERROR_DS_PARENT_IS_AN_ALIAS
#define ERROR_DS_CANT_MIX_MASTER_AND_REPS
#define ERROR_DS_CHILDREN_EXIST
#define ERROR_DS_OBJ_NOT_FOUND
#define ERROR_DS_ALIASED_OBJ_MISSING
#define ERROR_DS_BAD_NAME_SYNTAX
#define ERROR_DS_ALIAS_POINTS_TO_ALIAS
#define ERROR_DS_CANT_DEREF_ALIAS
#define ERROR_DS_OUT_OF_SCOPE
#define ERROR_DS_OBJECT_BEING_REMOVED
#define ERROR_DS_CANT_DELETE_DSA_OBJ
#define ERROR_DS_GENERIC_ERROR
#define ERROR_DS_DSA_MUST_BE_INT_MASTER
#define ERROR_DS_CLASS_NOT_DSA
#define ERROR_DS_INSUFF_ACCESS_RIGHTS
#define ERROR_DS_ILLEGAL_SUPERIOR
#define ERROR_DS_ATTRIBUTE_OWNED_BY_SAM
#define ERROR_DS_NAME_TOO_MANY_PARTS
#define ERROR_DS_NAME_TOO_LONG
#define ERROR_DS_NAME_VALUE_TOO_LONG
#define ERROR_DS_NAME_UNPARSEABLE
#define ERROR_DS_NAME_TYPE_UNKNOWN
#define ERROR_DS_NOT_AN_OBJECT
#define ERROR_DS_SEC_DESC_TOO_SHORT
#define ERROR_DS_SEC_DESC_INVALID
#define ERROR_DS_NO_DELETED_NAME
#define ERROR_DS_SUBREF_MUST_HAVE_PARENT
#define ERROR_DS_NCNAME_MUST_BE_NC
#define ERROR_DS_CANT_ADD_SYSTEM_ONLY
#define ERROR_DS_CLASS_MUST_BE_CONCRETE
#define ERROR_DS_INVALID_DMD
#define ERROR_DS_OBJ_GUID_EXISTS
#define ERROR_DS_NOT_ON_BACKLINK
#define ERROR_DS_NO_CROSSREF_FOR_NC
#define ERROR_DS_SHUTTING_DOWN
#define ERROR_DS_UNKNOWN_OPERATION
#define ERROR_DS_INVALID_ROLE_OWNER
#define ERROR_DS_COULDNT_CONTACT_FSMO
#define ERROR_DS_CROSS_NC_DN_RENAME
#define ERROR_DS_CANT_MOD_SYSTEM_ONLY
#define ERROR_DS_REPLICATOR_ONLY
#define ERROR_DS_OBJ_CLASS_NOT_DEFINED
#define ERROR_DS_OBJ_CLASS_NOT_SUBCLASS
#define ERROR_DS_NAME_REFERENCE_INVALID
#define ERROR_DS_CROSS_REF_EXISTS
#define ERROR_DS_CANT_DEL_MASTER_CROSSREF
#define ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD
#define ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX
#define ERROR_DS_DUP_RDN
#define ERROR_DS_DUP_OID
#define ERROR_DS_DUP_MAPI_ID
#define ERROR_DS_DUP_SCHEMA_ID_GUID
#define ERROR_DS_DUP_LDAP_DISPLAY_NAME
#define ERROR_DS_SEMANTIC_ATT_TEST
#define ERROR_DS_SYNTAX_MISMATCH
#define ERROR_DS_EXISTS_IN_MUST_HAVE
#define ERROR_DS_EXISTS_IN_MAY_HAVE
#define ERROR_DS_NONEXISTENT_MAY_HAVE
#define ERROR_DS_NONEXISTENT_MUST_HAVE
#define ERROR_DS_AUX_CLS_TEST_FAIL
#define ERROR_DS_NONEXISTENT_POSS_SUP
#define ERROR_DS_SUB_CLS_TEST_FAIL
#define ERROR_DS_BAD_RDN_ATT_ID_SYNTAX
#define ERROR_DS_EXISTS_IN_AUX_CLS
#define ERROR_DS_EXISTS_IN_SUB_CLS
#define ERROR_DS_EXISTS_IN_POSS_SUP
#define ERROR_DS_RECALCSCHEMA_FAILED
#define ERROR_DS_TREE_DELETE_NOT_FINISHED
#define ERROR_DS_CANT_DELETE
#define ERROR_DS_ATT_SCHEMA_REQ_ID
#define ERROR_DS_BAD_ATT_SCHEMA_SYNTAX
#define ERROR_DS_CANT_CACHE_ATT
#define ERROR_DS_CANT_CACHE_CLASS
#define ERROR_DS_CANT_REMOVE_ATT_CACHE
#define ERROR_DS_CANT_REMOVE_CLASS_CACHE
#define ERROR_DS_CANT_RETRIEVE_DN
#define ERROR_DS_MISSING_SUPREF
#define ERROR_DS_CANT_RETRIEVE_INSTANCE
#define ERROR_DS_CODE_INCONSISTENCY
#define ERROR_DS_DATABASE_ERROR
#define ERROR_DS_GOVERNSID_MISSING
#define ERROR_DS_MISSING_EXPECTED_ATT
#define ERROR_DS_NCNAME_MISSING_CR_REF
#define ERROR_DS_SECURITY_CHECKING_ERROR
#define ERROR_DS_SCHEMA_NOT_LOADED
#define ERROR_DS_SCHEMA_ALLOC_FAILED
#define ERROR_DS_ATT_SCHEMA_REQ_SYNTAX
#define ERROR_DS_GCVERIFY_ERROR
#define ERROR_DS_DRA_SCHEMA_MISMATCH
#define ERROR_DS_CANT_FIND_DSA_OBJ
#define ERROR_DS_CANT_FIND_EXPECTED_NC
#define ERROR_DS_CANT_FIND_NC_IN_CACHE
#define ERROR_DS_CANT_RETRIEVE_CHILD
#define ERROR_DS_SECURITY_ILLEGAL_MODIFY
#define ERROR_DS_CANT_REPLACE_HIDDEN_REC
#define ERROR_DS_BAD_HIERARCHY_FILE
#define ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED
#define ERROR_DS_CONFIG_PARAM_MISSING
#define ERROR_DS_COUNTING_AB_INDICES_FAILED
#define ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED
#define ERROR_DS_INTERNAL_FAILURE
#define ERROR_DS_UNKNOWN_ERROR
#define ERROR_DS_ROOT_REQUIRES_CLASS_TOP
#define ERROR_DS_REFUSING_FSMO_ROLES
#define ERROR_DS_MISSING_FSMO_SETTINGS
#define ERROR_DS_UNABLE_TO_SURRENDER_ROLES
#define ERROR_DS_DRA_GENERIC
#define ERROR_DS_DRA_INVALID_PARAMETER
#define ERROR_DS_DRA_BUSY
#define ERROR_DS_DRA_BAD_DN
#define ERROR_DS_DRA_BAD_NC
#define ERROR_DS_DRA_DN_EXISTS
#define ERROR_DS_DRA_INTERNAL_ERROR
#define ERROR_DS_DRA_INCONSISTENT_DIT
#define ERROR_DS_DRA_CONNECTION_FAILED
#define ERROR_DS_DRA_BAD_INSTANCE_TYPE
#define ERROR_DS_DRA_OUT_OF_MEM
#define ERROR_DS_DRA_MAIL_PROBLEM
#define ERROR_DS_DRA_REF_ALREADY_EXISTS
#define ERROR_DS_DRA_REF_NOT_FOUND
#define ERROR_DS_DRA_OBJ_IS_REP_SOURCE
#define ERROR_DS_DRA_DB_ERROR
#define ERROR_DS_DRA_NO_REPLICA
#define ERROR_DS_DRA_ACCESS_DENIED
#define ERROR_DS_DRA_NOT_SUPPORTED
#define ERROR_DS_DRA_RPC_CANCELLED
#define ERROR_DS_DRA_SOURCE_DISABLED
#define ERROR_DS_DRA_SINK_DISABLED
#define ERROR_DS_DRA_NAME_COLLISION
#define ERROR_DS_DRA_SOURCE_REINSTALLED
#define ERROR_DS_DRA_MISSING_PARENT
#define ERROR_DS_DRA_PREEMPTED
#define ERROR_DS_DRA_ABANDON_SYNC
#define ERROR_DS_DRA_SHUTDOWN
#define ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET
#define ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA
#define ERROR_DS_DRA_EXTN_CONNECTION_FAILED
#define ERROR_DS_INSTALL_SCHEMA_MISMATCH
#define ERROR_DS_DUP_LINK_ID
#define ERROR_DS_NAME_ERROR_RESOLVING
#define ERROR_DS_NAME_ERROR_NOT_FOUND
#define ERROR_DS_NAME_ERROR_NOT_UNIQUE
#define ERROR_DS_NAME_ERROR_NO_MAPPING
#define ERROR_DS_NAME_ERROR_DOMAIN_ONLY
#define ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING
#define ERROR_DS_CONSTRUCTED_ATT_MOD
#define ERROR_DS_WRONG_OM_OBJ_CLASS
#define ERROR_DS_DRA_REPL_PENDING
#define ERROR_DS_DS_REQUIRED
#define ERROR_DS_INVALID_LDAP_DISPLAY_NAME
#define ERROR_DS_NON_BASE_SEARCH
#define ERROR_DS_CANT_RETRIEVE_ATTS
#define ERROR_DS_BACKLINK_WITHOUT_LINK
#define ERROR_DS_EPOCH_MISMATCH
#define ERROR_DS_SRC_NAME_MISMATCH
#define ERROR_DS_SRC_AND_DST_NC_IDENTICAL
#define ERROR_DS_DST_NC_MISMATCH
#define ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC
#define ERROR_DS_SRC_GUID_MISMATCH
#define ERROR_DS_CANT_MOVE_DELETED_OBJECT
#define ERROR_DS_PDC_OPERATION_IN_PROGRESS
#define ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD
#define ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION
#define ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS
#define ERROR_DS_NC_MUST_HAVE_NC_PARENT
#define ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE
#define ERROR_DS_DST_DOMAIN_NOT_NATIVE
#define ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER
#define ERROR_DS_CANT_MOVE_ACCOUNT_GROUP
#define ERROR_DS_CANT_MOVE_RESOURCE_GROUP
#define ERROR_DS_INVALID_SEARCH_FLAG
#define ERROR_DS_NO_TREE_DELETE_ABOVE_NC
#define ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE
#define ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE
#define ERROR_DS_SAM_INIT_FAILURE
#define ERROR_DS_SENSITIVE_GROUP_VIOLATION
#define ERROR_DS_CANT_MOD_PRIMARYGROUPID
#define ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD
#define ERROR_DS_NONSAFE_SCHEMA_CHANGE
#define ERROR_DS_SCHEMA_UPDATE_DISALLOWED
#define ERROR_DS_CANT_CREATE_UNDER_SCHEMA
#define ERROR_DS_INSTALL_NO_SRC_SCH_VERSION
#define ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE
#define ERROR_DS_INVALID_GROUP_TYPE
#define ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN
#define ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN
#define ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER
#define ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER
#define ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER
#define ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER
#define ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER
#define ERROR_DS_HAVE_PRIMARY_MEMBERS
#define ERROR_DS_STRING_SD_CONVERSION_FAILED
#define ERROR_DS_NAMING_MASTER_GC
#define ERROR_DS_DNS_LOOKUP_FAILURE
#define ERROR_DS_COULDNT_UPDATE_SPNS
#define ERROR_DS_CANT_RETRIEVE_SD
#define ERROR_DS_KEY_NOT_UNIQUE
#define ERROR_DS_WRONG_LINKED_ATT_SYNTAX
#define ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD
#define ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY
#define ERROR_DS_CANT_START
#define ERROR_DS_INIT_FAILURE
#define ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION
#define ERROR_DS_SOURCE_DOMAIN_IN_FOREST
#define ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST
#define ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED
#define ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN
#define ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER
#define ERROR_DS_SRC_SID_EXISTS_IN_FOREST
#define ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH
#define ERROR_SAM_INIT_FAILURE
#define ERROR_DS_DRA_SCHEMA_INFO_SHIP
#define ERROR_DS_DRA_SCHEMA_CONFLICT
#define ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT
#define ERROR_DS_DRA_OBJ_NC_MISMATCH
#define ERROR_DS_NC_STILL_HAS_DSAS
#define ERROR_DS_GC_REQUIRED
#define ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY
#define ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS
#define ERROR_DS_CANT_ADD_TO_GC
#define ERROR_DS_NO_CHECKPOINT_WITH_PDC
#define ERROR_DS_SOURCE_AUDITING_NOT_ENABLED
#define ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC
#define ERROR_DS_INVALID_NAME_FOR_SPN
#define ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS
#define ERROR_DS_UNICODEPWD_NOT_IN_QUOTES
#define ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED
#define ERROR_DS_MUST_BE_RUN_ON_DST_DC
#define ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER
#define ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ
#define ERROR_DS_INIT_FAILURE_CONSOLE
#define ERROR_DS_SAM_INIT_FAILURE_CONSOLE
#define ERROR_DS_FOREST_VERSION_TOO_HIGH
#define ERROR_DS_DOMAIN_VERSION_TOO_HIGH
#define ERROR_DS_FOREST_VERSION_TOO_LOW
#define ERROR_DS_DOMAIN_VERSION_TOO_LOW
#define ERROR_DS_INCOMPATIBLE_VERSION
#define ERROR_DS_LOW_DSA_VERSION
#define ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN
#define ERROR_DS_NOT_SUPPORTED_SORT_ORDER
#define ERROR_DS_NAME_NOT_UNIQUE
#define ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4
#define ERROR_DS_OUT_OF_VERSION_STORE
#define ERROR_DS_INCOMPATIBLE_CONTROLS_USED
#define ERROR_DS_NO_REF_DOMAIN
#define ERROR_DS_RESERVED_LINK_ID
#define ERROR_DS_LINK_ID_NOT_AVAILABLE
#define ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER
#define ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE
#define ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC
#define ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG
#define ERROR_DS_MODIFYDN_WRONG_GRANDPARENT
#define ERROR_DS_NAME_ERROR_TRUST_REFERRAL
#define ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER
#define ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD
#define ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2
#define ERROR_DS_THREAD_LIMIT_EXCEEDED
#define ERROR_DS_NOT_CLOSEST
#define ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF
#define ERROR_DS_SINGLE_USER_MODE_FAILED
#define ERROR_DS_NTDSCRIPT_SYNTAX_ERROR
#define ERROR_DS_NTDSCRIPT_PROCESS_ERROR
#define ERROR_DS_DIFFERENT_REPL_EPOCHS
#define ERROR_DS_DRS_EXTENSIONS_CHANGED
#define ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR
#define ERROR_DS_NO_MSDS_INTID
#define ERROR_DS_DUP_MSDS_INTID
#define ERROR_DS_EXISTS_IN_RDNATTID
#define ERROR_DS_AUTHORIZATION_FAILED
#define ERROR_DS_INVALID_SCRIPT
#define ERROR_DS_REMOTE_CROSSREF_OP_FAILED
#define ERROR_DS_CROSS_REF_BUSY
#define ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN
#define ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC
#define ERROR_DS_DUPLICATE_ID_FOUND
#define ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT
#define ERROR_DS_GROUP_CONVERSION_ERROR
#define ERROR_DS_CANT_MOVE_APP_BASIC_GROUP
#define ERROR_DS_CANT_MOVE_APP_QUERY_GROUP
#define ERROR_DS_ROLE_NOT_VERIFIED
#define ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL
#define ERROR_DS_DOMAIN_RENAME_IN_PROGRESS
#define ERROR_DS_EXISTING_AD_CHILD_NC
#define ERROR_DS_REPL_LIFETIME_EXCEEDED
#define ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER
#define ERROR_DS_LDAP_SEND_QUEUE_FULL
#define ERROR_DS_DRA_OUT_SCHEDULE_WINDOW
#define DNS_ERROR_RESPONSE_CODES_BASE
#define DNS_ERROR_RCODE_NO_ERROR
#define DNS_ERROR_MASK
#define DNS_ERROR_RCODE_FORMAT_ERROR
#define DNS_ERROR_RCODE_SERVER_FAILURE
#define DNS_ERROR_RCODE_NAME_ERROR
#define DNS_ERROR_RCODE_NOT_IMPLEMENTED
#define DNS_ERROR_RCODE_REFUSED
#define DNS_ERROR_RCODE_YXDOMAIN
#define DNS_ERROR_RCODE_YXRRSET
#define DNS_ERROR_RCODE_NXRRSET
#define DNS_ERROR_RCODE_NOTAUTH
#define DNS_ERROR_RCODE_NOTZONE
#define DNS_ERROR_RCODE_BADSIG
#define DNS_ERROR_RCODE_BADKEY
#define DNS_ERROR_RCODE_BADTIME
#define DNS_ERROR_RCODE_LAST
#define DNS_ERROR_PACKET_FMT_BASE
#define DNS_INFO_NO_RECORDS
#define DNS_ERROR_BAD_PACKET
#define DNS_ERROR_NO_PACKET
#define DNS_ERROR_RCODE
#define DNS_ERROR_UNSECURE_PACKET
#define DNS_STATUS_PACKET_UNSECURE
#define DNS_ERROR_NO_MEMORY
#define DNS_ERROR_INVALID_NAME
#define DNS_ERROR_INVALID_DATA
#define DNS_ERROR_GENERAL_API_BASE
#define DNS_ERROR_INVALID_TYPE
#define DNS_ERROR_INVALID_IP_ADDRESS
#define DNS_ERROR_INVALID_PROPERTY
#define DNS_ERROR_TRY_AGAIN_LATER
#define DNS_ERROR_NOT_UNIQUE
#define DNS_ERROR_NON_RFC_NAME
#define DNS_STATUS_FQDN
#define DNS_STATUS_DOTTED_NAME
#define DNS_STATUS_SINGLE_PART_NAME
#define DNS_ERROR_INVALID_NAME_CHAR
#define DNS_ERROR_NUMERIC_NAME
#define DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER
#define DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION
#define DNS_ERROR_CANNOT_FIND_ROOT_HINTS
#define DNS_ERROR_INCONSISTENT_ROOT_HINTS
#define DNS_ERROR_ZONE_BASE
#define DNS_ERROR_ZONE_DOES_NOT_EXIST
#define DNS_ERROR_NO_ZONE_INFO
#define DNS_ERROR_INVALID_ZONE_OPERATION
#define DNS_ERROR_ZONE_CONFIGURATION_ERROR
#define DNS_ERROR_ZONE_HAS_NO_SOA_RECORD
#define DNS_ERROR_ZONE_HAS_NO_NS_RECORDS
#define DNS_ERROR_ZONE_LOCKED
#define DNS_ERROR_ZONE_CREATION_FAILED
#define DNS_ERROR_ZONE_ALREADY_EXISTS
#define DNS_ERROR_AUTOZONE_ALREADY_EXISTS
#define DNS_ERROR_INVALID_ZONE_TYPE
#define DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP
#define DNS_ERROR_ZONE_NOT_SECONDARY
#define DNS_ERROR_NEED_SECONDARY_ADDRESSES
#define DNS_ERROR_WINS_INIT_FAILED
#define DNS_ERROR_NEED_WINS_SERVERS
#define DNS_ERROR_NBSTAT_INIT_FAILED
#define DNS_ERROR_SOA_DELETE_INVALID
#define DNS_ERROR_FORWARDER_ALREADY_EXISTS
#define DNS_ERROR_ZONE_REQUIRES_MASTER_IP
#define DNS_ERROR_ZONE_IS_SHUTDOWN
#define DNS_ERROR_DATAFILE_BASE
#define DNS_ERROR_PRIMARY_REQUIRES_DATAFILE
#define DNS_ERROR_INVALID_DATAFILE_NAME
#define DNS_ERROR_DATAFILE_OPEN_FAILURE
#define DNS_ERROR_FILE_WRITEBACK_FAILED
#define DNS_ERROR_DATAFILE_PARSING
#define DNS_ERROR_DATABASE_BASE
#define DNS_ERROR_RECORD_DOES_NOT_EXIST
#define DNS_ERROR_RECORD_FORMAT
#define DNS_ERROR_NODE_CREATION_FAILED
#define DNS_ERROR_UNKNOWN_RECORD_TYPE
#define DNS_ERROR_RECORD_TIMED_OUT
#define DNS_ERROR_NAME_NOT_IN_ZONE
#define DNS_ERROR_CNAME_LOOP
#define DNS_ERROR_NODE_IS_CNAME
#define DNS_ERROR_CNAME_COLLISION
#define DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT
#define DNS_ERROR_RECORD_ALREADY_EXISTS
#define DNS_ERROR_SECONDARY_DATA
#define DNS_ERROR_NO_CREATE_CACHE_DATA
#define DNS_ERROR_NAME_DOES_NOT_EXIST
#define DNS_WARNING_PTR_CREATE_FAILED
#define DNS_WARNING_DOMAIN_UNDELETED
#define DNS_ERROR_DS_UNAVAILABLE
#define DNS_ERROR_DS_ZONE_ALREADY_EXISTS
#define DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE
#define DNS_ERROR_OPERATION_BASE
#define DNS_INFO_AXFR_COMPLETE
#define DNS_ERROR_AXFR
#define DNS_INFO_ADDED_LOCAL_WINS
#define DNS_ERROR_SECURE_BASE
#define DNS_STATUS_CONTINUE_NEEDED
#define DNS_ERROR_SETUP_BASE
#define DNS_ERROR_NO_TCPIP
#define DNS_ERROR_NO_DNS_SERVERS
#define DNS_ERROR_DP_BASE
#define DNS_ERROR_DP_DOES_NOT_EXIST
#define DNS_ERROR_DP_ALREADY_EXISTS
#define DNS_ERROR_DP_NOT_ENLISTED
#define DNS_ERROR_DP_ALREADY_ENLISTED
#define DNS_ERROR_DP_NOT_AVAILABLE
#define DNS_ERROR_DP_FSMO_ERROR


#define WSABASEERR
#define WSAEINTR
#define WSAEBADF
#define WSAEACCES
#define WSAEFAULT
#define WSAEINVAL
#define WSAEMFILE
#define WSAEWOULDBLOCK
#define WSAEINPROGRESS
#define WSAEALREADY
#define WSAENOTSOCK
#define WSAEDESTADDRREQ
#define WSAEMSGSIZE
#define WSAEPROTOTYPE
#define WSAENOPROTOOPT
#define WSAEPROTONOSUPPORT
#define WSAESOCKTNOSUPPORT
#define WSAEOPNOTSUPP
#define WSAEPFNOSUPPORT
#define WSAEAFNOSUPPORT
#define WSAEADDRINUSE
#define WSAEADDRNOTAVAIL
#define WSAENETDOWN
#define WSAENETUNREACH
#define WSAENETRESET
#define WSAECONNABORTED
#define WSAECONNRESET
#define WSAENOBUFS
#define WSAEISCONN
#define WSAENOTCONN
#define WSAESHUTDOWN
#define WSAETOOMANYREFS
#define WSAETIMEDOUT
#define WSAECONNREFUSED
#define WSAELOOP
#define WSAENAMETOOLONG
#define WSAEHOSTDOWN
#define WSAEHOSTUNREACH
#define WSAENOTEMPTY
#define WSAEPROCLIM
#define WSAEUSERS
#define WSAEDQUOT
#define WSAESTALE
#define WSAEREMOTE
#define WSASYSNOTREADY
#define WSAVERNOTSUPPORTED
#define WSANOTINITIALISED
#define WSAEDISCON
#define WSAENOMORE
#define WSAECANCELLED
#define WSAEINVALIDPROCTABLE
#define WSAEINVALIDPROVIDER
#define WSAEPROVIDERFAILEDINIT
#define WSASYSCALLFAILURE
#define WSASERVICE_NOT_FOUND
#define WSATYPE_NOT_FOUND
#define WSA_E_NO_MORE
#define WSA_E_CANCELLED
#define WSAEREFUSED

#define WSAHOST_NOT_FOUND


#define WSATRY_AGAIN


#define WSANO_RECOVERY


#define WSANO_DATA


#define WSA_QOS_RECEIVERS


#define WSA_QOS_SENDERS


#define WSA_QOS_NO_SENDERS


#define WSA_QOS_NO_RECEIVERS


#define WSA_QOS_REQUEST_CONFIRMED


#define WSA_QOS_ADMISSION_FAILURE


#define WSA_QOS_POLICY_FAILURE


#define WSA_QOS_BAD_STYLE


#define WSA_QOS_BAD_OBJECT


#define WSA_QOS_TRAFFIC_CTRL_ERROR


#define WSA_QOS_GENERIC_ERROR


#define WSA_QOS_ESERVICETYPE


#define WSA_QOS_EFLOWSPEC


#define WSA_QOS_EPROVSPECBUF


#define WSA_QOS_EFILTERSTYLE


#define WSA_QOS_EFILTERTYPE


#define WSA_QOS_EFILTERCOUNT


#define WSA_QOS_EOBJLENGTH


#define WSA_QOS_EFLOWCOUNT


#define WSA_QOS_EUNKNOWNPSOBJ


#define WSA_QOS_EUNKOWNPSOBJ


#define WSA_QOS_EPOLICYOBJ


#define WSA_QOS_EFLOWDESC


#define WSA_QOS_EPSFLOWSPEC


#define WSA_QOS_EPSFILTERSPEC


#define WSA_QOS_ESDMODEOBJ


#define WSA_QOS_ESHAPERATEOBJ


#define WSA_QOS_RESERVED_PETYPE



#define ERROR_SXS_SECTION_NOT_FOUND
#define ERROR_SXS_CANT_GEN_ACTCTX
#define ERROR_SXS_INVALID_ACTCTXDATA_FORMAT
#define ERROR_SXS_ASSEMBLY_NOT_FOUND
#define ERROR_SXS_MANIFEST_FORMAT_ERROR
#define ERROR_SXS_MANIFEST_PARSE_ERROR
#define ERROR_SXS_ACTIVATION_CONTEXT_DISABLED
#define ERROR_SXS_KEY_NOT_FOUND
#define ERROR_SXS_VERSION_CONFLICT
#define ERROR_SXS_WRONG_SECTION_TYPE
#define ERROR_SXS_THREAD_QUERIES_DISABLED
#define ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET
#define ERROR_SXS_UNKNOWN_ENCODING_GROUP
#define ERROR_SXS_UNKNOWN_ENCODING
#define ERROR_SXS_INVALID_XML_NAMESPACE_URI
#define ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED
#define ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED
#define ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE
#define ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE
#define ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE
#define ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT
#define ERROR_SXS_DUPLICATE_DLL_NAME
#define ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME
#define ERROR_SXS_DUPLICATE_CLSID
#define ERROR_SXS_DUPLICATE_IID
#define ERROR_SXS_DUPLICATE_TLBID
#define ERROR_SXS_DUPLICATE_PROGID
#define ERROR_SXS_DUPLICATE_ASSEMBLY_NAME
#define ERROR_SXS_FILE_HASH_MISMATCH
#define ERROR_SXS_POLICY_PARSE_ERROR
#define ERROR_SXS_XML_E_MISSINGQUOTE
#define ERROR_SXS_XML_E_COMMENTSYNTAX
#define ERROR_SXS_XML_E_BADSTARTNAMECHAR
#define ERROR_SXS_XML_E_BADNAMECHAR
#define ERROR_SXS_XML_E_BADCHARINSTRING
#define ERROR_SXS_XML_E_XMLDECLSYNTAX
#define ERROR_SXS_XML_E_BADCHARDATA
#define ERROR_SXS_XML_E_MISSINGWHITESPACE
#define ERROR_SXS_XML_E_EXPECTINGTAGEND
#define ERROR_SXS_XML_E_MISSINGSEMICOLON
#define ERROR_SXS_XML_E_UNBALANCEDPAREN
#define ERROR_SXS_XML_E_INTERNALERROR
#define ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE
#define ERROR_SXS_XML_E_INCOMPLETE_ENCODING
#define ERROR_SXS_XML_E_MISSING_PAREN
#define ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE
#define ERROR_SXS_XML_E_MULTIPLE_COLONS
#define ERROR_SXS_XML_E_INVALID_DECIMAL
#define ERROR_SXS_XML_E_INVALID_HEXIDECIMAL
#define ERROR_SXS_XML_E_INVALID_UNICODE
#define ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK
#define ERROR_SXS_XML_E_UNEXPECTEDENDTAG
#define ERROR_SXS_XML_E_UNCLOSEDTAG
#define ERROR_SXS_XML_E_DUPLICATEATTRIBUTE
#define ERROR_SXS_XML_E_MULTIPLEROOTS
#define ERROR_SXS_XML_E_INVALIDATROOTLEVEL
#define ERROR_SXS_XML_E_BADXMLDECL
#define ERROR_SXS_XML_E_MISSINGROOT
#define ERROR_SXS_XML_E_UNEXPECTEDEOF
#define ERROR_SXS_XML_E_BADPEREFINSUBSET
#define ERROR_SXS_XML_E_UNCLOSEDSTARTTAG
#define ERROR_SXS_XML_E_UNCLOSEDENDTAG
#define ERROR_SXS_XML_E_UNCLOSEDSTRING
#define ERROR_SXS_XML_E_UNCLOSEDCOMMENT
#define ERROR_SXS_XML_E_UNCLOSEDDECL
#define ERROR_SXS_XML_E_UNCLOSEDCDATA
#define ERROR_SXS_XML_E_RESERVEDNAMESPACE
#define ERROR_SXS_XML_E_INVALIDENCODING
#define ERROR_SXS_XML_E_INVALIDSWITCH
#define ERROR_SXS_XML_E_BADXMLCASE
#define ERROR_SXS_XML_E_INVALID_STANDALONE
#define ERROR_SXS_XML_E_UNEXPECTED_STANDALONE
#define ERROR_SXS_XML_E_INVALID_VERSION
#define ERROR_SXS_XML_E_MISSINGEQUALS
#define ERROR_SXS_PROTECTION_RECOVERY_FAILED
#define ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT
#define ERROR_SXS_PROTECTION_CATALOG_NOT_VALID
#define ERROR_SXS_UNTRANSLATABLE_HRESULT
#define ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING
#define ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE
#define ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME
#define ERROR_IPSEC_QM_POLICY_EXISTS
#define ERROR_IPSEC_QM_POLICY_NOT_FOUND
#define ERROR_IPSEC_QM_POLICY_IN_USE
#define ERROR_IPSEC_MM_POLICY_EXISTS
#define ERROR_IPSEC_MM_POLICY_NOT_FOUND
#define ERROR_IPSEC_MM_POLICY_IN_USE
#define ERROR_IPSEC_MM_FILTER_EXISTS
#define ERROR_IPSEC_MM_FILTER_NOT_FOUND
#define ERROR_IPSEC_TRANSPORT_FILTER_EXISTS
#define ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND
#define ERROR_IPSEC_MM_AUTH_EXISTS
#define ERROR_IPSEC_MM_AUTH_NOT_FOUND
#define ERROR_IPSEC_MM_AUTH_IN_USE
#define ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND
#define ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND
#define ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND
#define ERROR_IPSEC_TUNNEL_FILTER_EXISTS
#define ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND
#define ERROR_IPSEC_MM_FILTER_PENDING_DELETION
#define ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION
#define ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION
#define ERROR_IPSEC_MM_POLICY_PENDING_DELETION
#define ERROR_IPSEC_MM_AUTH_PENDING_DELETION
#define ERROR_IPSEC_QM_POLICY_PENDING_DELETION
#define WARNING_IPSEC_MM_POLICY_PRUNED
#define WARNING_IPSEC_QM_POLICY_PRUNED
#define ERROR_IPSEC_IKE_NEG_STATUS_BEGIN
#define ERROR_IPSEC_IKE_AUTH_FAIL
#define ERROR_IPSEC_IKE_ATTRIB_FAIL
#define ERROR_IPSEC_IKE_NEGOTIATION_PENDING
#define ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR
#define ERROR_IPSEC_IKE_TIMED_OUT
#define ERROR_IPSEC_IKE_NO_CERT
#define ERROR_IPSEC_IKE_SA_DELETED
#define ERROR_IPSEC_IKE_SA_REAPED
#define ERROR_IPSEC_IKE_MM_ACQUIRE_DROP
#define ERROR_IPSEC_IKE_QM_ACQUIRE_DROP
#define ERROR_IPSEC_IKE_QUEUE_DROP_MM
#define ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM
#define ERROR_IPSEC_IKE_DROP_NO_RESPONSE
#define ERROR_IPSEC_IKE_MM_DELAY_DROP
#define ERROR_IPSEC_IKE_QM_DELAY_DROP
#define ERROR_IPSEC_IKE_ERROR
#define ERROR_IPSEC_IKE_CRL_FAILED
#define ERROR_IPSEC_IKE_INVALID_KEY_USAGE
#define ERROR_IPSEC_IKE_INVALID_CERT_TYPE
#define ERROR_IPSEC_IKE_NO_PRIVATE_KEY
#define ERROR_IPSEC_IKE_DH_FAIL
#define ERROR_IPSEC_IKE_INVALID_HEADER
#define ERROR_IPSEC_IKE_NO_POLICY
#define ERROR_IPSEC_IKE_INVALID_SIGNATURE
#define ERROR_IPSEC_IKE_KERBEROS_ERROR
#define ERROR_IPSEC_IKE_NO_PUBLIC_KEY
#define ERROR_IPSEC_IKE_PROCESS_ERR
#define ERROR_IPSEC_IKE_PROCESS_ERR_SA
#define ERROR_IPSEC_IKE_PROCESS_ERR_PROP
#define ERROR_IPSEC_IKE_PROCESS_ERR_TRANS
#define ERROR_IPSEC_IKE_PROCESS_ERR_KE
#define ERROR_IPSEC_IKE_PROCESS_ERR_ID
#define ERROR_IPSEC_IKE_PROCESS_ERR_CERT
#define ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ
#define ERROR_IPSEC_IKE_PROCESS_ERR_HASH
#define ERROR_IPSEC_IKE_PROCESS_ERR_SIG
#define ERROR_IPSEC_IKE_PROCESS_ERR_NONCE
#define ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY
#define ERROR_IPSEC_IKE_PROCESS_ERR_DELETE
#define ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR
#define ERROR_IPSEC_IKE_INVALID_PAYLOAD
#define ERROR_IPSEC_IKE_LOAD_SOFT_SA
#define ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN
#define ERROR_IPSEC_IKE_INVALID_COOKIE
#define ERROR_IPSEC_IKE_NO_PEER_CERT
#define ERROR_IPSEC_IKE_PEER_CRL_FAILED
#define ERROR_IPSEC_IKE_POLICY_CHANGE
#define ERROR_IPSEC_IKE_NO_MM_POLICY
#define ERROR_IPSEC_IKE_NOTCBPRIV
#define ERROR_IPSEC_IKE_SECLOADFAIL
#define ERROR_IPSEC_IKE_FAILSSPINIT
#define ERROR_IPSEC_IKE_FAILQUERYSSP
#define ERROR_IPSEC_IKE_SRVACQFAIL
#define ERROR_IPSEC_IKE_SRVQUERYCRED
#define ERROR_IPSEC_IKE_GETSPIFAIL
#define ERROR_IPSEC_IKE_INVALID_FILTER
#define ERROR_IPSEC_IKE_OUT_OF_MEMORY
#define ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED
#define ERROR_IPSEC_IKE_INVALID_POLICY
#define ERROR_IPSEC_IKE_UNKNOWN_DOI
#define ERROR_IPSEC_IKE_INVALID_SITUATION
#define ERROR_IPSEC_IKE_DH_FAILURE
#define ERROR_IPSEC_IKE_INVALID_GROUP
#define ERROR_IPSEC_IKE_ENCRYPT
#define ERROR_IPSEC_IKE_DECRYPT
#define ERROR_IPSEC_IKE_POLICY_MATCH
#define ERROR_IPSEC_IKE_UNSUPPORTED_ID
#define ERROR_IPSEC_IKE_INVALID_HASH
#define ERROR_IPSEC_IKE_INVALID_HASH_ALG
#define ERROR_IPSEC_IKE_INVALID_HASH_SIZE
#define ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG
#define ERROR_IPSEC_IKE_INVALID_AUTH_ALG
#define ERROR_IPSEC_IKE_INVALID_SIG
#define ERROR_IPSEC_IKE_LOAD_FAILED
#define ERROR_IPSEC_IKE_RPC_DELETE
#define ERROR_IPSEC_IKE_BENIGN_REINIT
#define ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY
#define ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN
#define ERROR_IPSEC_IKE_MM_LIMIT
#define ERROR_IPSEC_IKE_NEGOTIATION_DISABLED
#define ERROR_IPSEC_IKE_NEG_STATUS_END
#define SEVERITY_SUCCESS
#define SEVERITY_ERROR
#define SUCCEEDED
#define FAILED
#define IS_ERROR
#define HRESULT_CODE
#define SCODE_CODE
#define HRESULT_FACILITY
#define SCODE_FACILITY
#define HRESULT_SEVERITY
#define SCODE_SEVERITY
#define MAKE_HRESULT
#define MAKE_SCODE
#define FACILITY_NT_BIT
#define __HRESULT_FROM_WIN32
# 1987 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winerror.h" 3
#define HRESULT_FROM_WIN32

#define HRESULT_FROM_NT
#define GetScode
#define ResultFromScode
#define PropagateResult



#define _HRESULT_TYPEDEF_

#define NOERROR
#define E_UNEXPECTED
#define E_NOTIMPL
#define E_OUTOFMEMORY
#define E_INVALIDARG
#define E_NOINTERFACE
#define E_POINTER
#define E_HANDLE
#define E_ABORT
#define E_FAIL
#define E_ACCESSDENIED
#define E_PENDING
#define E_NOT_SUFFICIENT_BUFFER
#define CO_E_INIT_TLS
#define CO_E_INIT_SHARED_ALLOCATOR
#define CO_E_INIT_MEMORY_ALLOCATOR
#define CO_E_INIT_CLASS_CACHE
#define CO_E_INIT_RPC_CHANNEL
#define CO_E_INIT_TLS_SET_CHANNEL_CONTROL
#define CO_E_INIT_TLS_CHANNEL_CONTROL
#define CO_E_INIT_UNACCEPTED_USER_ALLOCATOR
#define CO_E_INIT_SCM_MUTEX_EXISTS
#define CO_E_INIT_SCM_FILE_MAPPING_EXISTS
#define CO_E_INIT_SCM_MAP_VIEW_OF_FILE
#define CO_E_INIT_SCM_EXEC_FAILURE
#define CO_E_INIT_ONLY_SINGLE_THREADED
#define CO_E_CANT_REMOTE
#define CO_E_BAD_SERVER_NAME
#define CO_E_WRONG_SERVER_IDENTITY
#define CO_E_OLE1DDE_DISABLED
#define CO_E_RUNAS_SYNTAX
#define CO_E_CREATEPROCESS_FAILURE
#define CO_E_RUNAS_CREATEPROCESS_FAILURE
#define CO_E_RUNAS_LOGON_FAILURE
#define CO_E_LAUNCH_PERMSSION_DENIED
#define CO_E_START_SERVICE_FAILURE
#define CO_E_REMOTE_COMMUNICATION_FAILURE
#define CO_E_SERVER_START_TIMEOUT
#define CO_E_CLSREG_INCONSISTENT
#define CO_E_IIDREG_INCONSISTENT
#define CO_E_NOT_SUPPORTED
#define CO_E_RELOAD_DLL
#define CO_E_MSI_ERROR
#define CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT
#define CO_E_SERVER_PAUSED
#define CO_E_SERVER_NOT_PAUSED
#define CO_E_CLASS_DISABLED
#define CO_E_CLRNOTAVAILABLE
#define CO_E_ASYNC_WORK_REJECTED
#define CO_E_SERVER_INIT_TIMEOUT
#define CO_E_NO_SECCTX_IN_ACTIVATE
#define CO_E_TRACKER_CONFIG
#define CO_E_THREADPOOL_CONFIG
#define CO_E_SXS_CONFIG
#define CO_E_MALFORMED_SPN
#define S_OK
#define S_FALSE
#define OLE_E_FIRST
#define OLE_E_LAST
#define OLE_S_FIRST
#define OLE_S_LAST
#define OLE_E_OLEVERB
#define OLE_E_ADVF
#define OLE_E_ENUM_NOMORE
#define OLE_E_ADVISENOTSUPPORTED
#define OLE_E_NOCONNECTION
#define OLE_E_NOTRUNNING
#define OLE_E_NOCACHE
#define OLE_E_BLANK
#define OLE_E_CLASSDIFF
#define OLE_E_CANT_GETMONIKER
#define OLE_E_CANT_BINDTOSOURCE
#define OLE_E_STATIC
#define OLE_E_PROMPTSAVECANCELLED
#define OLE_E_INVALIDRECT
#define OLE_E_WRONGCOMPOBJ
#define OLE_E_INVALIDHWND
#define OLE_E_NOT_INPLACEACTIVE
#define OLE_E_CANTCONVERT
#define OLE_E_NOSTORAGE
#define DV_E_FORMATETC
#define DV_E_DVTARGETDEVICE
#define DV_E_STGMEDIUM
#define DV_E_STATDATA
#define DV_E_LINDEX
#define DV_E_TYMED
#define DV_E_CLIPFORMAT
#define DV_E_DVASPECT
#define DV_E_DVTARGETDEVICE_SIZE
#define DV_E_NOIVIEWOBJECT
#define DRAGDROP_E_FIRST
#define DRAGDROP_E_LAST
#define DRAGDROP_S_FIRST
#define DRAGDROP_S_LAST
#define DRAGDROP_E_NOTREGISTERED
#define DRAGDROP_E_ALREADYREGISTERED
#define DRAGDROP_E_INVALIDHWND
#define CLASSFACTORY_E_FIRST
#define CLASSFACTORY_E_LAST
#define CLASSFACTORY_S_FIRST
#define CLASSFACTORY_S_LAST
#define CLASS_E_NOAGGREGATION
#define CLASS_E_CLASSNOTAVAILABLE
#define CLASS_E_NOTLICENSED
#define MARSHAL_E_FIRST
#define MARSHAL_E_LAST
#define MARSHAL_S_FIRST
#define MARSHAL_S_LAST
#define DATA_E_FIRST
#define DATA_E_LAST
#define DATA_S_FIRST
#define DATA_S_LAST
#define VIEW_E_FIRST
#define VIEW_E_LAST
#define VIEW_S_FIRST
#define VIEW_S_LAST
#define VIEW_E_DRAW
#define REGDB_E_FIRST
#define REGDB_E_LAST
#define REGDB_S_FIRST
#define REGDB_S_LAST
#define REGDB_E_READREGDB
#define REGDB_E_WRITEREGDB
#define REGDB_E_KEYMISSING
#define REGDB_E_INVALIDVALUE
#define REGDB_E_CLASSNOTREG
#define REGDB_E_IIDNOTREG
#define REGDB_E_BADTHREADINGMODEL
#define CAT_E_FIRST
#define CAT_E_LAST
#define CAT_E_CATIDNOEXIST
#define CAT_E_NODESCRIPTION
#define CS_E_FIRST
#define CS_E_LAST
#define CS_E_PACKAGE_NOTFOUND
#define CS_E_NOT_DELETABLE
#define CS_E_CLASS_NOTFOUND
#define CS_E_INVALID_VERSION
#define CS_E_NO_CLASSSTORE
#define CS_E_OBJECT_NOTFOUND
#define CS_E_OBJECT_ALREADY_EXISTS
#define CS_E_INVALID_PATH
#define CS_E_NETWORK_ERROR
#define CS_E_ADMIN_LIMIT_EXCEEDED
#define CS_E_SCHEMA_MISMATCH
#define CS_E_INTERNAL_ERROR
#define CACHE_E_FIRST
#define CACHE_E_LAST
#define CACHE_S_FIRST
#define CACHE_S_LAST
#define CACHE_E_NOCACHE_UPDATED
#define OLEOBJ_E_FIRST
#define OLEOBJ_E_LAST
#define OLEOBJ_S_FIRST
#define OLEOBJ_S_LAST
#define OLEOBJ_E_NOVERBS
#define OLEOBJ_E_INVALIDVERB
#define CLIENTSITE_E_FIRST
#define CLIENTSITE_E_LAST
#define CLIENTSITE_S_FIRST
#define CLIENTSITE_S_LAST
#define INPLACE_E_NOTUNDOABLE
#define INPLACE_E_NOTOOLSPACE
#define INPLACE_E_FIRST
#define INPLACE_E_LAST
#define INPLACE_S_FIRST
#define INPLACE_S_LAST
#define ENUM_E_FIRST
#define ENUM_E_LAST
#define ENUM_S_FIRST
#define ENUM_S_LAST
#define CONVERT10_E_FIRST
#define CONVERT10_E_LAST
#define CONVERT10_S_FIRST
#define CONVERT10_S_LAST
#define CONVERT10_E_OLESTREAM_GET
#define CONVERT10_E_OLESTREAM_PUT
#define CONVERT10_E_OLESTREAM_FMT
#define CONVERT10_E_OLESTREAM_BITMAP_TO_DIB
#define CONVERT10_E_STG_FMT
#define CONVERT10_E_STG_NO_STD_STREAM
#define CONVERT10_E_STG_DIB_TO_BITMAP
#define CLIPBRD_E_FIRST
#define CLIPBRD_E_LAST
#define CLIPBRD_S_FIRST
#define CLIPBRD_S_LAST
#define CLIPBRD_E_CANT_OPEN
#define CLIPBRD_E_CANT_EMPTY
#define CLIPBRD_E_CANT_SET
#define CLIPBRD_E_BAD_DATA
#define CLIPBRD_E_CANT_CLOSE
#define MK_E_FIRST
#define MK_E_LAST
#define MK_S_FIRST
#define MK_S_LAST
#define MK_E_CONNECTMANUALLY
#define MK_E_EXCEEDEDDEADLINE
#define MK_E_NEEDGENERIC
#define MK_E_UNAVAILABLE
#define MK_E_SYNTAX
#define MK_E_NOOBJECT
#define MK_E_INVALIDEXTENSION
#define MK_E_INTERMEDIATEINTERFACENOTSUPPORTED
#define MK_E_NOTBINDABLE
#define MK_E_NOTBOUND
#define MK_E_CANTOPENFILE
#define MK_E_MUSTBOTHERUSER
#define MK_E_NOINVERSE
#define MK_E_NOSTORAGE
#define MK_E_NOPREFIX
#define MK_E_ENUMERATION_FAILED
#define CO_E_FIRST
#define CO_E_LAST
#define CO_S_FIRST
#define CO_S_LAST
#define CO_E_NOTINITIALIZED
#define CO_E_ALREADYINITIALIZED
#define CO_E_CANTDETERMINECLASS
#define CO_E_CLASSSTRING
#define CO_E_IIDSTRING
#define CO_E_APPNOTFOUND
#define CO_E_APPSINGLEUSE
#define CO_E_ERRORINAPP
#define CO_E_DLLNOTFOUND
#define CO_E_ERRORINDLL
#define CO_E_WRONGOSFORAPP
#define CO_E_OBJNOTREG
#define CO_E_OBJISREG
#define CO_E_OBJNOTCONNECTED
#define CO_E_APPDIDNTREG
#define CO_E_RELEASED
#define EVENT_E_FIRST
#define EVENT_E_LAST
#define EVENT_S_FIRST
#define EVENT_S_LAST
#define EVENT_S_SOME_SUBSCRIBERS_FAILED
#define EVENT_E_ALL_SUBSCRIBERS_FAILED
#define EVENT_S_NOSUBSCRIBERS
#define EVENT_E_QUERYSYNTAX
#define EVENT_E_QUERYFIELD
#define EVENT_E_INTERNALEXCEPTION
#define EVENT_E_INTERNALERROR
#define EVENT_E_INVALID_PER_USER_SID
#define EVENT_E_USER_EXCEPTION
#define EVENT_E_TOO_MANY_METHODS
#define EVENT_E_MISSING_EVENTCLASS
#define EVENT_E_NOT_ALL_REMOVED
#define EVENT_E_COMPLUS_NOT_INSTALLED
#define EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT
#define EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT
#define EVENT_E_INVALID_EVENT_CLASS_PARTITION
#define EVENT_E_PER_USER_SID_NOT_LOGGED_ON
#define XACT_E_FIRST
#define XACT_E_LAST
#define XACT_S_FIRST
#define XACT_S_LAST
#define XACT_E_ALREADYOTHERSINGLEPHASE
#define XACT_E_CANTRETAIN
#define XACT_E_COMMITFAILED
#define XACT_E_COMMITPREVENTED
#define XACT_E_HEURISTICABORT
#define XACT_E_HEURISTICCOMMIT
#define XACT_E_HEURISTICDAMAGE
#define XACT_E_HEURISTICDANGER
#define XACT_E_ISOLATIONLEVEL
#define XACT_E_NOASYNC
#define XACT_E_NOENLIST
#define XACT_E_NOISORETAIN
#define XACT_E_NORESOURCE
#define XACT_E_NOTCURRENT
#define XACT_E_NOTRANSACTION
#define XACT_E_NOTSUPPORTED
#define XACT_E_UNKNOWNRMGRID
#define XACT_E_WRONGSTATE
#define XACT_E_WRONGUOW
#define XACT_E_XTIONEXISTS
#define XACT_E_NOIMPORTOBJECT
#define XACT_E_INVALIDCOOKIE
#define XACT_E_INDOUBT
#define XACT_E_NOTIMEOUT
#define XACT_E_ALREADYINPROGRESS
#define XACT_E_ABORTED
#define XACT_E_LOGFULL
#define XACT_E_TMNOTAVAILABLE
#define XACT_E_CONNECTION_DOWN
#define XACT_E_CONNECTION_DENIED
#define XACT_E_REENLISTTIMEOUT
#define XACT_E_TIP_CONNECT_FAILED
#define XACT_E_TIP_PROTOCOL_ERROR
#define XACT_E_TIP_PULL_FAILED
#define XACT_E_DEST_TMNOTAVAILABLE
#define XACT_E_TIP_DISABLED
#define XACT_E_NETWORK_TX_DISABLED
#define XACT_E_PARTNER_NETWORK_TX_DISABLED
#define XACT_E_XA_TX_DISABLED
#define XACT_E_UNABLE_TO_READ_DTC_CONFIG
#define XACT_E_UNABLE_TO_LOAD_DTC_PROXY
#define XACT_E_ABORTING
#define XACT_E_CLERKNOTFOUND
#define XACT_E_CLERKEXISTS
#define XACT_E_RECOVERYINPROGRESS
#define XACT_E_TRANSACTIONCLOSED
#define XACT_E_INVALIDLSN
#define XACT_E_REPLAYREQUEST
#define XACT_S_ASYNC
#define XACT_S_DEFECT
#define XACT_S_READONLY
#define XACT_S_SOMENORETAIN
#define XACT_S_OKINFORM
#define XACT_S_MADECHANGESCONTENT
#define XACT_S_MADECHANGESINFORM
#define XACT_S_ALLNORETAIN
#define XACT_S_ABORTING
#define XACT_S_SINGLEPHASE
#define XACT_S_LOCALLY_OK
#define XACT_S_LASTRESOURCEMANAGER
#define CONTEXT_E_FIRST
#define CONTEXT_E_LAST
#define CONTEXT_S_FIRST
#define CONTEXT_S_LAST
#define CONTEXT_E_ABORTED
#define CONTEXT_E_ABORTING
#define CONTEXT_E_NOCONTEXT
#define CONTEXT_E_WOULD_DEADLOCK
#define CONTEXT_E_SYNCH_TIMEOUT
#define CONTEXT_E_OLDREF
#define CONTEXT_E_ROLENOTFOUND
#define CONTEXT_E_TMNOTAVAILABLE
#define CO_E_ACTIVATIONFAILED
#define CO_E_ACTIVATIONFAILED_EVENTLOGGED
#define CO_E_ACTIVATIONFAILED_CATALOGERROR
#define CO_E_ACTIVATIONFAILED_TIMEOUT
#define CO_E_INITIALIZATIONFAILED
#define CONTEXT_E_NOJIT
#define CONTEXT_E_NOTRANSACTION
#define CO_E_THREADINGMODEL_CHANGED
#define CO_E_NOIISINTRINSICS
#define CO_E_NOCOOKIES
#define CO_E_DBERROR
#define CO_E_NOTPOOLED
#define CO_E_NOTCONSTRUCTED
#define CO_E_NOSYNCHRONIZATION
#define CO_E_ISOLEVELMISMATCH
#define OLE_S_USEREG
#define OLE_S_STATIC
#define OLE_S_MAC_CLIPFORMAT
#define DRAGDROP_S_DROP
#define DRAGDROP_S_CANCEL
#define DRAGDROP_S_USEDEFAULTCURSORS
#define DATA_S_SAMEFORMATETC
#define VIEW_S_ALREADY_FROZEN
#define CACHE_S_FORMATETC_NOTSUPPORTED
#define CACHE_S_SAMECACHE
#define CACHE_S_SOMECACHES_NOTUPDATED
#define OLEOBJ_S_INVALIDVERB
#define OLEOBJ_S_CANNOT_DOVERB_NOW
#define OLEOBJ_S_INVALIDHWND
#define INPLACE_S_TRUNCATED
#define CONVERT10_S_NO_PRESENTATION
#define MK_S_REDUCED_TO_SELF
#define MK_S_ME
#define MK_S_HIM
#define MK_S_US
#define MK_S_MONIKERALREADYREGISTERED
#define SCHED_S_TASK_READY
#define SCHED_S_TASK_RUNNING
#define SCHED_S_TASK_DISABLED
#define SCHED_S_TASK_HAS_NOT_RUN
#define SCHED_S_TASK_NO_MORE_RUNS
#define SCHED_S_TASK_NOT_SCHEDULED
#define SCHED_S_TASK_TERMINATED
#define SCHED_S_TASK_NO_VALID_TRIGGERS
#define SCHED_S_EVENT_TRIGGER
#define SCHED_E_TRIGGER_NOT_FOUND
#define SCHED_E_TASK_NOT_READY
#define SCHED_E_TASK_NOT_RUNNING
#define SCHED_E_SERVICE_NOT_INSTALLED
#define SCHED_E_CANNOT_OPEN_TASK
#define SCHED_E_INVALID_TASK
#define SCHED_E_ACCOUNT_INFORMATION_NOT_SET
#define SCHED_E_ACCOUNT_NAME_NOT_FOUND
#define SCHED_E_ACCOUNT_DBASE_CORRUPT
#define SCHED_E_NO_SECURITY_SERVICES
#define SCHED_E_UNKNOWN_OBJECT_VERSION
#define SCHED_E_UNSUPPORTED_ACCOUNT_OPTION
#define SCHED_E_SERVICE_NOT_RUNNING
#define CO_E_CLASS_CREATE_FAILED
#define CO_E_SCM_ERROR
#define CO_E_SCM_RPC_FAILURE
#define CO_E_BAD_PATH
#define CO_E_SERVER_EXEC_FAILURE
#define CO_E_OBJSRV_RPC_FAILURE
#define MK_E_NO_NORMALIZED
#define CO_E_SERVER_STOPPING
#define MEM_E_INVALID_ROOT
#define MEM_E_INVALID_LINK
#define MEM_E_INVALID_SIZE
#define CO_S_NOTALLINTERFACES
#define CO_S_MACHINENAMENOTFOUND
#define DISP_E_UNKNOWNINTERFACE
#define DISP_E_MEMBERNOTFOUND
#define DISP_E_PARAMNOTFOUND
#define DISP_E_TYPEMISMATCH
#define DISP_E_UNKNOWNNAME
#define DISP_E_NONAMEDARGS
#define DISP_E_BADVARTYPE
#define DISP_E_EXCEPTION
#define DISP_E_OVERFLOW
#define DISP_E_BADINDEX
#define DISP_E_UNKNOWNLCID
#define DISP_E_ARRAYISLOCKED
#define DISP_E_BADPARAMCOUNT
#define DISP_E_PARAMNOTOPTIONAL
#define DISP_E_BADCALLEE
#define DISP_E_NOTACOLLECTION
#define DISP_E_DIVBYZERO
#define DISP_E_BUFFERTOOSMALL
#define TYPE_E_BUFFERTOOSMALL
#define TYPE_E_FIELDNOTFOUND
#define TYPE_E_INVDATAREAD
#define TYPE_E_UNSUPFORMAT
#define TYPE_E_REGISTRYACCESS
#define TYPE_E_LIBNOTREGISTERED
#define TYPE_E_UNDEFINEDTYPE
#define TYPE_E_QUALIFIEDNAMEDISALLOWED
#define TYPE_E_INVALIDSTATE
#define TYPE_E_WRONGTYPEKIND
#define TYPE_E_ELEMENTNOTFOUND
#define TYPE_E_AMBIGUOUSNAME
#define TYPE_E_NAMECONFLICT
#define TYPE_E_UNKNOWNLCID
#define TYPE_E_DLLFUNCTIONNOTFOUND
#define TYPE_E_BADMODULEKIND
#define TYPE_E_SIZETOOBIG
#define TYPE_E_DUPLICATEID
#define TYPE_E_INVALIDID
#define TYPE_E_TYPEMISMATCH
#define TYPE_E_OUTOFBOUNDS
#define TYPE_E_IOERROR
#define TYPE_E_CANTCREATETMPFILE
#define TYPE_E_CANTLOADLIBRARY
#define TYPE_E_INCONSISTENTPROPFUNCS
#define TYPE_E_CIRCULARTYPE
#define STG_E_INVALIDFUNCTION
#define STG_E_FILENOTFOUND
#define STG_E_PATHNOTFOUND
#define STG_E_TOOMANYOPENFILES
#define STG_E_ACCESSDENIED
#define STG_E_INVALIDHANDLE
#define STG_E_INSUFFICIENTMEMORY
#define STG_E_INVALIDPOINTER
#define STG_E_NOMOREFILES
#define STG_E_DISKISWRITEPROTECTED
#define STG_E_SEEKERROR
#define STG_E_WRITEFAULT
#define STG_E_READFAULT
#define STG_E_SHAREVIOLATION
#define STG_E_LOCKVIOLATION
#define STG_E_FILEALREADYEXISTS
#define STG_E_INVALIDPARAMETER
#define STG_E_MEDIUMFULL
#define STG_E_PROPSETMISMATCHED
#define STG_E_ABNORMALAPIEXIT
#define STG_E_INVALIDHEADER
#define STG_E_INVALIDNAME
#define STG_E_UNKNOWN
#define STG_E_UNIMPLEMENTEDFUNCTION
#define STG_E_INVALIDFLAG
#define STG_E_INUSE
#define STG_E_NOTCURRENT
#define STG_E_REVERTED
#define STG_E_CANTSAVE
#define STG_E_OLDFORMAT
#define STG_E_OLDDLL
#define STG_E_SHAREREQUIRED
#define STG_E_NOTFILEBASEDSTORAGE
#define STG_E_EXTANTMARSHALLINGS
#define STG_E_DOCFILECORRUPT
#define STG_E_BADBASEADDRESS
#define STG_E_DOCFILETOOLARGE
#define STG_E_NOTSIMPLEFORMAT
#define STG_E_INCOMPLETE
#define STG_E_TERMINATED
#define STG_S_CONVERTED
#define STG_S_BLOCK
#define STG_S_RETRYNOW
#define STG_S_MONITORING
#define STG_S_MULTIPLEOPENS
#define STG_S_CONSOLIDATIONFAILED
#define STG_S_CANNOTCONSOLIDATE
#define STG_E_STATUS_COPY_PROTECTION_FAILURE
#define STG_E_CSS_AUTHENTICATION_FAILURE
#define STG_E_CSS_KEY_NOT_PRESENT
#define STG_E_CSS_KEY_NOT_ESTABLISHED
#define STG_E_CSS_SCRAMBLED_SECTOR
#define STG_E_CSS_REGION_MISMATCH
#define STG_E_RESETS_EXHAUSTED
#define RPC_E_CALL_REJECTED
#define RPC_E_CALL_CANCELED
#define RPC_E_CANTPOST_INSENDCALL
#define RPC_E_CANTCALLOUT_INASYNCCALL
#define RPC_E_CANTCALLOUT_INEXTERNALCALL
#define RPC_E_CONNECTION_TERMINATED
#define RPC_E_SERVER_DIED
#define RPC_E_CLIENT_DIED
#define RPC_E_INVALID_DATAPACKET
#define RPC_E_CANTTRANSMIT_CALL
#define RPC_E_CLIENT_CANTMARSHAL_DATA
#define RPC_E_CLIENT_CANTUNMARSHAL_DATA
#define RPC_E_SERVER_CANTMARSHAL_DATA
#define RPC_E_SERVER_CANTUNMARSHAL_DATA
#define RPC_E_INVALID_DATA
#define RPC_E_INVALID_PARAMETER
#define RPC_E_CANTCALLOUT_AGAIN
#define RPC_E_SERVER_DIED_DNE
#define RPC_E_SYS_CALL_FAILED
#define RPC_E_OUT_OF_RESOURCES
#define RPC_E_ATTEMPTED_MULTITHREAD
#define RPC_E_NOT_REGISTERED
#define RPC_E_FAULT
#define RPC_E_SERVERFAULT
#define RPC_E_CHANGED_MODE
#define RPC_E_INVALIDMETHOD
#define RPC_E_DISCONNECTED
#define RPC_E_RETRY
#define RPC_E_SERVERCALL_RETRYLATER
#define RPC_E_SERVERCALL_REJECTED
#define RPC_E_INVALID_CALLDATA
#define RPC_E_CANTCALLOUT_ININPUTSYNCCALL
#define RPC_E_WRONG_THREAD
#define RPC_E_THREAD_NOT_INIT
#define RPC_E_VERSION_MISMATCH
#define RPC_E_INVALID_HEADER
#define RPC_E_INVALID_EXTENSION
#define RPC_E_INVALID_IPID
#define RPC_E_INVALID_OBJECT
#define RPC_S_CALLPENDING
#define RPC_S_WAITONTIMER
#define RPC_E_CALL_COMPLETE
#define RPC_E_UNSECURE_CALL
#define RPC_E_TOO_LATE
#define RPC_E_NO_GOOD_SECURITY_PACKAGES
#define RPC_E_ACCESS_DENIED
#define RPC_E_REMOTE_DISABLED
#define RPC_E_INVALID_OBJREF
#define RPC_E_NO_CONTEXT
#define RPC_E_TIMEOUT
#define RPC_E_NO_SYNC
#define RPC_E_FULLSIC_REQUIRED
#define RPC_E_INVALID_STD_NAME
#define CO_E_FAILEDTOIMPERSONATE
#define CO_E_FAILEDTOGETSECCTX
#define CO_E_FAILEDTOOPENTHREADTOKEN
#define CO_E_FAILEDTOGETTOKENINFO
#define CO_E_TRUSTEEDOESNTMATCHCLIENT
#define CO_E_FAILEDTOQUERYCLIENTBLANKET
#define CO_E_FAILEDTOSETDACL
#define CO_E_ACCESSCHECKFAILED
#define CO_E_NETACCESSAPIFAILED
#define CO_E_WRONGTRUSTEENAMESYNTAX
#define CO_E_INVALIDSID
#define CO_E_CONVERSIONFAILED
#define CO_E_NOMATCHINGSIDFOUND
#define CO_E_LOOKUPACCSIDFAILED
#define CO_E_NOMATCHINGNAMEFOUND
#define CO_E_LOOKUPACCNAMEFAILED
#define CO_E_SETSERLHNDLFAILED
#define CO_E_FAILEDTOGETWINDIR
#define CO_E_PATHTOOLONG
#define CO_E_FAILEDTOGENUUID
#define CO_E_FAILEDTOCREATEFILE
#define CO_E_FAILEDTOCLOSEHANDLE
#define CO_E_EXCEEDSYSACLLIMIT
#define CO_E_ACESINWRONGORDER
#define CO_E_INCOMPATIBLESTREAMVERSION
#define CO_E_FAILEDTOOPENPROCESSTOKEN
#define CO_E_DECODEFAILED
#define CO_E_ACNOTINITIALIZED
#define CO_E_CANCEL_DISABLED
#define RPC_E_UNEXPECTED
#define ERROR_AUDITING_DISABLED
#define ERROR_ALL_SIDS_FILTERED
#define NTE_BAD_UID
#define NTE_BAD_HASH
#define NTE_BAD_KEY
#define NTE_BAD_LEN
#define NTE_BAD_DATA
#define NTE_BAD_SIGNATURE
#define NTE_BAD_VER
#define NTE_BAD_ALGID
#define NTE_BAD_FLAGS
#define NTE_BAD_TYPE
#define NTE_BAD_KEY_STATE
#define NTE_BAD_HASH_STATE
#define NTE_NO_KEY
#define NTE_NO_MEMORY
#define NTE_EXISTS
#define NTE_PERM
#define NTE_NOT_FOUND
#define NTE_DOUBLE_ENCRYPT
#define NTE_BAD_PROVIDER
#define NTE_BAD_PROV_TYPE
#define NTE_BAD_PUBLIC_KEY
#define NTE_BAD_KEYSET
#define NTE_PROV_TYPE_NOT_DEF
#define NTE_PROV_TYPE_ENTRY_BAD
#define NTE_KEYSET_NOT_DEF
#define NTE_KEYSET_ENTRY_BAD
#define NTE_PROV_TYPE_NO_MATCH
#define NTE_SIGNATURE_FILE_BAD
#define NTE_PROVIDER_DLL_FAIL
#define NTE_PROV_DLL_NOT_FOUND
#define NTE_BAD_KEYSET_PARAM
#define NTE_FAIL
#define NTE_SYS_ERR
#define NTE_SILENT_CONTEXT
#define NTE_TOKEN_KEYSET_STORAGE_FULL
#define NTE_TEMPORARY_PROFILE
#define NTE_FIXEDPARAMETER
#define SEC_E_INSUFFICIENT_MEMORY
#define SEC_E_INVALID_HANDLE
#define SEC_E_UNSUPPORTED_FUNCTION
#define SEC_E_TARGET_UNKNOWN
#define SEC_E_INTERNAL_ERROR
#define SEC_E_SECPKG_NOT_FOUND
#define SEC_E_NOT_OWNER
#define SEC_E_CANNOT_INSTALL
#define SEC_E_INVALID_TOKEN
#define SEC_E_CANNOT_PACK
#define SEC_E_QOP_NOT_SUPPORTED
#define SEC_E_NO_IMPERSONATION
#define SEC_E_LOGON_DENIED
#define SEC_E_UNKNOWN_CREDENTIALS
#define SEC_E_NO_CREDENTIALS
#define SEC_E_MESSAGE_ALTERED
#define SEC_E_OUT_OF_SEQUENCE
#define SEC_E_NO_AUTHENTICATING_AUTHORITY
#define SEC_I_CONTINUE_NEEDED
#define SEC_I_COMPLETE_NEEDED
#define SEC_I_COMPLETE_AND_CONTINUE
#define SEC_I_LOCAL_LOGON
#define SEC_E_BAD_PKGID
#define SEC_E_CONTEXT_EXPIRED
#define SEC_I_CONTEXT_EXPIRED
#define SEC_E_INCOMPLETE_MESSAGE
#define SEC_E_INCOMPLETE_CREDENTIALS
#define SEC_E_BUFFER_TOO_SMALL
#define SEC_I_INCOMPLETE_CREDENTIALS
#define SEC_I_RENEGOTIATE
#define SEC_E_WRONG_PRINCIPAL
#define SEC_I_NO_LSA_CONTEXT
#define SEC_E_TIME_SKEW
#define SEC_E_UNTRUSTED_ROOT
#define SEC_E_ILLEGAL_MESSAGE
#define SEC_E_CERT_UNKNOWN
#define SEC_E_CERT_EXPIRED
#define SEC_E_ENCRYPT_FAILURE
#define SEC_E_DECRYPT_FAILURE
#define SEC_E_ALGORITHM_MISMATCH
#define SEC_E_SECURITY_QOS_FAILED
#define SEC_E_UNFINISHED_CONTEXT_DELETED
#define SEC_E_NO_TGT_REPLY
#define SEC_E_NO_IP_ADDRESSES
#define SEC_E_WRONG_CREDENTIAL_HANDLE
#define SEC_E_CRYPTO_SYSTEM_INVALID
#define SEC_E_MAX_REFERRALS_EXCEEDED
#define SEC_E_MUST_BE_KDC
#define SEC_E_STRONG_CRYPTO_NOT_SUPPORTED
#define SEC_E_TOO_MANY_PRINCIPALS
#define SEC_E_NO_PA_DATA
#define SEC_E_PKINIT_NAME_MISMATCH
#define SEC_E_SMARTCARD_LOGON_REQUIRED
#define SEC_E_SHUTDOWN_IN_PROGRESS
#define SEC_E_KDC_INVALID_REQUEST
#define SEC_E_KDC_UNABLE_TO_REFER
#define SEC_E_KDC_UNKNOWN_ETYPE
#define SEC_E_UNSUPPORTED_PREAUTH
#define SEC_E_DELEGATION_REQUIRED
#define SEC_E_BAD_BINDINGS
#define SEC_E_MULTIPLE_ACCOUNTS
#define SEC_E_NO_KERB_KEY
#define SEC_E_CERT_WRONG_USAGE
#define SEC_E_DOWNGRADE_DETECTED
#define SEC_E_SMARTCARD_CERT_REVOKED
#define SEC_E_ISSUING_CA_UNTRUSTED
#define SEC_E_REVOCATION_OFFLINE_C
#define SEC_E_PKINIT_CLIENT_FAILURE
#define SEC_E_SMARTCARD_CERT_EXPIRED
#define SEC_E_NO_S4U_PROT_SUPPORT
#define SEC_E_CROSSREALM_DELEGATION_FAILURE
#define SEC_E_REVOCATION_OFFLINE_KDC
#define SEC_E_ISSUING_CA_UNTRUSTED_KDC
#define SEC_E_KDC_CERT_EXPIRED
#define SEC_E_KDC_CERT_REVOKED
#define SEC_E_NO_SPM
#define SEC_E_NOT_SUPPORTED
#define CRYPT_E_MSG_ERROR
#define CRYPT_E_UNKNOWN_ALGO
#define CRYPT_E_OID_FORMAT
#define CRYPT_E_INVALID_MSG_TYPE
#define CRYPT_E_UNEXPECTED_ENCODING
#define CRYPT_E_AUTH_ATTR_MISSING
#define CRYPT_E_HASH_VALUE
#define CRYPT_E_INVALID_INDEX
#define CRYPT_E_ALREADY_DECRYPTED
#define CRYPT_E_NOT_DECRYPTED
#define CRYPT_E_RECIPIENT_NOT_FOUND
#define CRYPT_E_CONTROL_TYPE
#define CRYPT_E_ISSUER_SERIALNUMBER
#define CRYPT_E_SIGNER_NOT_FOUND
#define CRYPT_E_ATTRIBUTES_MISSING
#define CRYPT_E_STREAM_MSG_NOT_READY
#define CRYPT_E_STREAM_INSUFFICIENT_DATA
#define CRYPT_I_NEW_PROTECTION_REQUIRED
#define CRYPT_E_BAD_LEN
#define CRYPT_E_BAD_ENCODE
#define CRYPT_E_FILE_ERROR
#define CRYPT_E_NOT_FOUND
#define CRYPT_E_EXISTS
#define CRYPT_E_NO_PROVIDER
#define CRYPT_E_SELF_SIGNED
#define CRYPT_E_DELETED_PREV
#define CRYPT_E_NO_MATCH
#define CRYPT_E_UNEXPECTED_MSG_TYPE
#define CRYPT_E_NO_KEY_PROPERTY
#define CRYPT_E_NO_DECRYPT_CERT
#define CRYPT_E_BAD_MSG
#define CRYPT_E_NO_SIGNER
#define CRYPT_E_PENDING_CLOSE
#define CRYPT_E_REVOKED
#define CRYPT_E_NO_REVOCATION_DLL
#define CRYPT_E_NO_REVOCATION_CHECK
#define CRYPT_E_REVOCATION_OFFLINE
#define CRYPT_E_NOT_IN_REVOCATION_DATABASE
#define CRYPT_E_INVALID_NUMERIC_STRING
#define CRYPT_E_INVALID_PRINTABLE_STRING
#define CRYPT_E_INVALID_IA5_STRING
#define CRYPT_E_INVALID_X500_STRING
#define CRYPT_E_NOT_CHAR_STRING
#define CRYPT_E_FILERESIZED
#define CRYPT_E_SECURITY_SETTINGS
#define CRYPT_E_NO_VERIFY_USAGE_DLL
#define CRYPT_E_NO_VERIFY_USAGE_CHECK
#define CRYPT_E_VERIFY_USAGE_OFFLINE
#define CRYPT_E_NOT_IN_CTL
#define CRYPT_E_NO_TRUSTED_SIGNER
#define CRYPT_E_MISSING_PUBKEY_PARA
#define CRYPT_E_OSS_ERROR
#define OSS_MORE_BUF
#define OSS_NEGATIVE_UINTEGER
#define OSS_PDU_RANGE
#define OSS_MORE_INPUT
#define OSS_DATA_ERROR
#define OSS_BAD_ARG
#define OSS_BAD_VERSION
#define OSS_OUT_MEMORY
#define OSS_PDU_MISMATCH
#define OSS_LIMITED
#define OSS_BAD_PTR
#define OSS_BAD_TIME
#define OSS_INDEFINITE_NOT_SUPPORTED
#define OSS_MEM_ERROR
#define OSS_BAD_TABLE
#define OSS_TOO_LONG
#define OSS_CONSTRAINT_VIOLATED
#define OSS_FATAL_ERROR
#define OSS_ACCESS_SERIALIZATION_ERROR
#define OSS_NULL_TBL
#define OSS_NULL_FCN
#define OSS_BAD_ENCRULES
#define OSS_UNAVAIL_ENCRULES
#define OSS_CANT_OPEN_TRACE_WINDOW
#define OSS_UNIMPLEMENTED
#define OSS_OID_DLL_NOT_LINKED
#define OSS_CANT_OPEN_TRACE_FILE
#define OSS_TRACE_FILE_ALREADY_OPEN
#define OSS_TABLE_MISMATCH
#define OSS_TYPE_NOT_SUPPORTED
#define OSS_REAL_DLL_NOT_LINKED
#define OSS_REAL_CODE_NOT_LINKED
#define OSS_OUT_OF_RANGE
#define OSS_COPIER_DLL_NOT_LINKED
#define OSS_CONSTRAINT_DLL_NOT_LINKED
#define OSS_COMPARATOR_DLL_NOT_LINKED
#define OSS_COMPARATOR_CODE_NOT_LINKED
#define OSS_MEM_MGR_DLL_NOT_LINKED
#define OSS_PDV_DLL_NOT_LINKED
#define OSS_PDV_CODE_NOT_LINKED
#define OSS_API_DLL_NOT_LINKED
#define OSS_BERDER_DLL_NOT_LINKED
#define OSS_PER_DLL_NOT_LINKED
#define OSS_OPEN_TYPE_ERROR
#define OSS_MUTEX_NOT_CREATED
#define OSS_CANT_CLOSE_TRACE_FILE
#define CRYPT_E_ASN1_ERROR
#define CRYPT_E_ASN1_INTERNAL
#define CRYPT_E_ASN1_EOD
#define CRYPT_E_ASN1_CORRUPT
#define CRYPT_E_ASN1_LARGE
#define CRYPT_E_ASN1_CONSTRAINT
#define CRYPT_E_ASN1_MEMORY
#define CRYPT_E_ASN1_OVERFLOW
#define CRYPT_E_ASN1_BADPDU
#define CRYPT_E_ASN1_BADARGS
#define CRYPT_E_ASN1_BADREAL
#define CRYPT_E_ASN1_BADTAG
#define CRYPT_E_ASN1_CHOICE
#define CRYPT_E_ASN1_RULE
#define CRYPT_E_ASN1_UTF8
#define CRYPT_E_ASN1_PDU_TYPE
#define CRYPT_E_ASN1_NYI
#define CRYPT_E_ASN1_EXTENDED
#define CRYPT_E_ASN1_NOEOD
#define CERTSRV_E_BAD_REQUESTSUBJECT
#define CERTSRV_E_NO_REQUEST
#define CERTSRV_E_BAD_REQUESTSTATUS
#define CERTSRV_E_PROPERTY_EMPTY
#define CERTSRV_E_INVALID_CA_CERTIFICATE
#define CERTSRV_E_SERVER_SUSPENDED
#define CERTSRV_E_ENCODING_LENGTH
#define CERTSRV_E_ROLECONFLICT
#define CERTSRV_E_RESTRICTEDOFFICER
#define CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED
#define CERTSRV_E_NO_VALID_KRA
#define CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL
#define CERTSRV_E_NO_CAADMIN_DEFINED
#define CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE
#define CERTSRV_E_NO_DB_SESSIONS
#define CERTSRV_E_ALIGNMENT_FAULT
#define CERTSRV_E_ENROLL_DENIED
#define CERTSRV_E_TEMPLATE_DENIED
#define CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE
#define CERTSRV_E_UNSUPPORTED_CERT_TYPE
#define CERTSRV_E_NO_CERT_TYPE
#define CERTSRV_E_TEMPLATE_CONFLICT
#define CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED
#define CERTSRV_E_ARCHIVED_KEY_REQUIRED
#define CERTSRV_E_SMIME_REQUIRED
#define CERTSRV_E_BAD_RENEWAL_SUBJECT
#define CERTSRV_E_BAD_TEMPLATE_VERSION
#define CERTSRV_E_TEMPLATE_POLICY_REQUIRED
#define CERTSRV_E_SIGNATURE_POLICY_REQUIRED
#define CERTSRV_E_SIGNATURE_COUNT
#define CERTSRV_E_SIGNATURE_REJECTED
#define CERTSRV_E_ISSUANCE_POLICY_REQUIRED
#define CERTSRV_E_SUBJECT_UPN_REQUIRED
#define CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED
#define CERTSRV_E_SUBJECT_DNS_REQUIRED
#define CERTSRV_E_ARCHIVED_KEY_UNEXPECTED
#define CERTSRV_E_KEY_LENGTH
#define CERTSRV_E_SUBJECT_EMAIL_REQUIRED
#define CERTSRV_E_UNKNOWN_CERT_TYPE
#define CERTSRV_E_CERT_TYPE_OVERLAP
#define XENROLL_E_KEY_NOT_EXPORTABLE
#define XENROLL_E_CANNOT_ADD_ROOT_CERT
#define XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND
#define XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH
#define XENROLL_E_RESPONSE_KA_HASH_MISMATCH
#define XENROLL_E_KEYSPEC_SMIME_MISMATCH
#define TRUST_E_SYSTEM_ERROR
#define TRUST_E_NO_SIGNER_CERT
#define TRUST_E_COUNTER_SIGNER
#define TRUST_E_CERT_SIGNATURE
#define TRUST_E_TIME_STAMP
#define TRUST_E_BAD_DIGEST
#define TRUST_E_BASIC_CONSTRAINTS
#define TRUST_E_FINANCIAL_CRITERIA
#define MSSIPOTF_E_OUTOFMEMRANGE
#define MSSIPOTF_E_CANTGETOBJECT
#define MSSIPOTF_E_NOHEADTABLE
#define MSSIPOTF_E_BAD_MAGICNUMBER
#define MSSIPOTF_E_BAD_OFFSET_TABLE
#define MSSIPOTF_E_TABLE_TAGORDER
#define MSSIPOTF_E_TABLE_LONGWORD
#define MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT
#define MSSIPOTF_E_TABLES_OVERLAP
#define MSSIPOTF_E_TABLE_PADBYTES
#define MSSIPOTF_E_FILETOOSMALL
#define MSSIPOTF_E_TABLE_CHECKSUM
#define MSSIPOTF_E_FILE_CHECKSUM
#define MSSIPOTF_E_FAILED_POLICY
#define MSSIPOTF_E_FAILED_HINTS_CHECK
#define MSSIPOTF_E_NOT_OPENTYPE
#define MSSIPOTF_E_FILE
#define MSSIPOTF_E_CRYPT
#define MSSIPOTF_E_BADVERSION
#define MSSIPOTF_E_DSIG_STRUCTURE
#define MSSIPOTF_E_PCONST_CHECK
#define MSSIPOTF_E_STRUCTURE
#define NTE_OP_OK
#define TRUST_E_PROVIDER_UNKNOWN
#define TRUST_E_ACTION_UNKNOWN
#define TRUST_E_SUBJECT_FORM_UNKNOWN
#define TRUST_E_SUBJECT_NOT_TRUSTED
#define DIGSIG_E_ENCODE
#define DIGSIG_E_DECODE
#define DIGSIG_E_EXTENSIBILITY
#define DIGSIG_E_CRYPTO
#define PERSIST_E_SIZEDEFINITE
#define PERSIST_E_SIZEINDEFINITE
#define PERSIST_E_NOTSELFSIZING
#define TRUST_E_NOSIGNATURE
#define CERT_E_EXPIRED
#define CERT_E_VALIDITYPERIODNESTING
#define CERT_E_ROLE
#define CERT_E_PATHLENCONST
#define CERT_E_CRITICAL
#define CERT_E_PURPOSE
#define CERT_E_ISSUERCHAINING
#define CERT_E_MALFORMED
#define CERT_E_UNTRUSTEDROOT
#define CERT_E_CHAINING
#define TRUST_E_FAIL
#define CERT_E_REVOKED
#define CERT_E_UNTRUSTEDTESTROOT
#define CERT_E_REVOCATION_FAILURE
#define CERT_E_CN_NO_MATCH
#define CERT_E_WRONG_USAGE
#define TRUST_E_EXPLICIT_DISTRUST
#define CERT_E_UNTRUSTEDCA
#define CERT_E_INVALID_POLICY
#define CERT_E_INVALID_NAME
#define HRESULT_FROM_SETUPAPI
#define SPAPI_E_EXPECTED_SECTION_NAME
#define SPAPI_E_BAD_SECTION_NAME_LINE
#define SPAPI_E_SECTION_NAME_TOO_LONG
#define SPAPI_E_GENERAL_SYNTAX
#define SPAPI_E_WRONG_INF_STYLE
#define SPAPI_E_SECTION_NOT_FOUND
#define SPAPI_E_LINE_NOT_FOUND
#define SPAPI_E_NO_BACKUP
#define SPAPI_E_NO_ASSOCIATED_CLASS
#define SPAPI_E_CLASS_MISMATCH
#define SPAPI_E_DUPLICATE_FOUND
#define SPAPI_E_NO_DRIVER_SELECTED
#define SPAPI_E_KEY_DOES_NOT_EXIST
#define SPAPI_E_INVALID_DEVINST_NAME
#define SPAPI_E_INVALID_CLASS
#define SPAPI_E_DEVINST_ALREADY_EXISTS
#define SPAPI_E_DEVINFO_NOT_REGISTERED
#define SPAPI_E_INVALID_REG_PROPERTY
#define SPAPI_E_NO_INF
#define SPAPI_E_NO_SUCH_DEVINST
#define SPAPI_E_CANT_LOAD_CLASS_ICON
#define SPAPI_E_INVALID_CLASS_INSTALLER
#define SPAPI_E_DI_DO_DEFAULT
#define SPAPI_E_DI_NOFILECOPY
#define SPAPI_E_INVALID_HWPROFILE
#define SPAPI_E_NO_DEVICE_SELECTED
#define SPAPI_E_DEVINFO_LIST_LOCKED
#define SPAPI_E_DEVINFO_DATA_LOCKED
#define SPAPI_E_DI_BAD_PATH
#define SPAPI_E_NO_CLASSINSTALL_PARAMS
#define SPAPI_E_FILEQUEUE_LOCKED
#define SPAPI_E_BAD_SERVICE_INSTALLSECT
#define SPAPI_E_NO_CLASS_DRIVER_LIST
#define SPAPI_E_NO_ASSOCIATED_SERVICE
#define SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE
#define SPAPI_E_DEVICE_INTERFACE_ACTIVE
#define SPAPI_E_DEVICE_INTERFACE_REMOVED
#define SPAPI_E_BAD_INTERFACE_INSTALLSECT
#define SPAPI_E_NO_SUCH_INTERFACE_CLASS
#define SPAPI_E_INVALID_REFERENCE_STRING
#define SPAPI_E_INVALID_MACHINENAME
#define SPAPI_E_REMOTE_COMM_FAILURE
#define SPAPI_E_MACHINE_UNAVAILABLE
#define SPAPI_E_NO_CONFIGMGR_SERVICES
#define SPAPI_E_INVALID_PROPPAGE_PROVIDER
#define SPAPI_E_NO_SUCH_DEVICE_INTERFACE
#define SPAPI_E_DI_POSTPROCESSING_REQUIRED
#define SPAPI_E_INVALID_COINSTALLER
#define SPAPI_E_NO_COMPAT_DRIVERS
#define SPAPI_E_NO_DEVICE_ICON
#define SPAPI_E_INVALID_INF_LOGCONFIG
#define SPAPI_E_DI_DONT_INSTALL
#define SPAPI_E_INVALID_FILTER_DRIVER
#define SPAPI_E_NON_WINDOWS_NT_DRIVER
#define SPAPI_E_NON_WINDOWS_DRIVER
#define SPAPI_E_NO_CATALOG_FOR_OEM_INF
#define SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE
#define SPAPI_E_NOT_DISABLEABLE
#define SPAPI_E_CANT_REMOVE_DEVINST
#define SPAPI_E_INVALID_TARGET
#define SPAPI_E_DRIVER_NONNATIVE
#define SPAPI_E_IN_WOW64
#define SPAPI_E_SET_SYSTEM_RESTORE_POINT
#define SPAPI_E_INCORRECTLY_COPIED_INF
#define SPAPI_E_SCE_DISABLED
#define SPAPI_E_UNKNOWN_EXCEPTION
#define SPAPI_E_PNP_REGISTRY_ERROR
#define SPAPI_E_REMOTE_REQUEST_UNSUPPORTED
#define SPAPI_E_NOT_AN_INSTALLED_OEM_INF
#define SPAPI_E_INF_IN_USE_BY_DEVICES
#define SPAPI_E_DI_FUNCTION_OBSOLETE
#define SPAPI_E_NO_AUTHENTICODE_CATALOG
#define SPAPI_E_AUTHENTICODE_DISALLOWED
#define SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER
#define SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED
#define SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED
#define SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH
#define SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE
#define SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW
#define SPAPI_E_ERROR_NOT_INSTALLED
#define SCARD_S_SUCCESS
#define SCARD_F_INTERNAL_ERROR
#define SCARD_E_CANCELLED
#define SCARD_E_INVALID_HANDLE
#define SCARD_E_INVALID_PARAMETER
#define SCARD_E_INVALID_TARGET
#define SCARD_E_NO_MEMORY
#define SCARD_F_WAITED_TOO_LONG
#define SCARD_E_INSUFFICIENT_BUFFER
#define SCARD_E_UNKNOWN_READER
#define SCARD_E_TIMEOUT
#define SCARD_E_SHARING_VIOLATION
#define SCARD_E_NO_SMARTCARD
#define SCARD_E_UNKNOWN_CARD
#define SCARD_E_CANT_DISPOSE
#define SCARD_E_PROTO_MISMATCH
#define SCARD_E_NOT_READY
#define SCARD_E_INVALID_VALUE
#define SCARD_E_SYSTEM_CANCELLED
#define SCARD_F_COMM_ERROR
#define SCARD_F_UNKNOWN_ERROR
#define SCARD_E_INVALID_ATR
#define SCARD_E_NOT_TRANSACTED
#define SCARD_E_READER_UNAVAILABLE
#define SCARD_P_SHUTDOWN
#define SCARD_E_PCI_TOO_SMALL
#define SCARD_E_READER_UNSUPPORTED
#define SCARD_E_DUPLICATE_READER
#define SCARD_E_CARD_UNSUPPORTED
#define SCARD_E_NO_SERVICE
#define SCARD_E_SERVICE_STOPPED
#define SCARD_E_UNEXPECTED
#define SCARD_E_ICC_INSTALLATION
#define SCARD_E_ICC_CREATEORDER
#define SCARD_E_UNSUPPORTED_FEATURE
#define SCARD_E_DIR_NOT_FOUND
#define SCARD_E_FILE_NOT_FOUND
#define SCARD_E_NO_DIR
#define SCARD_E_NO_FILE
#define SCARD_E_NO_ACCESS
#define SCARD_E_WRITE_TOO_MANY
#define SCARD_E_BAD_SEEK
#define SCARD_E_INVALID_CHV
#define SCARD_E_UNKNOWN_RES_MNG
#define SCARD_E_NO_SUCH_CERTIFICATE
#define SCARD_E_CERTIFICATE_UNAVAILABLE
#define SCARD_E_NO_READERS_AVAILABLE
#define SCARD_E_COMM_DATA_LOST
#define SCARD_E_NO_KEY_CONTAINER
#define SCARD_E_SERVER_TOO_BUSY
#define SCARD_W_UNSUPPORTED_CARD
#define SCARD_W_UNRESPONSIVE_CARD
#define SCARD_W_UNPOWERED_CARD
#define SCARD_W_RESET_CARD
#define SCARD_W_REMOVED_CARD
#define SCARD_W_SECURITY_VIOLATION
#define SCARD_W_WRONG_CHV
#define SCARD_W_CHV_BLOCKED
#define SCARD_W_EOF
#define SCARD_W_CANCELLED_BY_USER
#define SCARD_W_CARD_NOT_AUTHENTICATED
#define SCARD_W_CACHE_ITEM_NOT_FOUND
#define SCARD_W_CACHE_ITEM_STALE
#define COMADMIN_E_OBJECTERRORS
#define COMADMIN_E_OBJECTINVALID
#define COMADMIN_E_KEYMISSING
#define COMADMIN_E_ALREADYINSTALLED
#define COMADMIN_E_APP_FILE_WRITEFAIL
#define COMADMIN_E_APP_FILE_READFAIL
#define COMADMIN_E_APP_FILE_VERSION
#define COMADMIN_E_BADPATH
#define COMADMIN_E_APPLICATIONEXISTS
#define COMADMIN_E_ROLEEXISTS
#define COMADMIN_E_CANTCOPYFILE
#define COMADMIN_E_NOUSER
#define COMADMIN_E_INVALIDUSERIDS
#define COMADMIN_E_NOREGISTRYCLSID
#define COMADMIN_E_BADREGISTRYPROGID
#define COMADMIN_E_AUTHENTICATIONLEVEL
#define COMADMIN_E_USERPASSWDNOTVALID
#define COMADMIN_E_CLSIDORIIDMISMATCH
#define COMADMIN_E_REMOTEINTERFACE
#define COMADMIN_E_DLLREGISTERSERVER
#define COMADMIN_E_NOSERVERSHARE
#define COMADMIN_E_DLLLOADFAILED
#define COMADMIN_E_BADREGISTRYLIBID
#define COMADMIN_E_APPDIRNOTFOUND
#define COMADMIN_E_REGISTRARFAILED
#define COMADMIN_E_COMPFILE_DOESNOTEXIST
#define COMADMIN_E_COMPFILE_LOADDLLFAIL
#define COMADMIN_E_COMPFILE_GETCLASSOBJ
#define COMADMIN_E_COMPFILE_CLASSNOTAVAIL
#define COMADMIN_E_COMPFILE_BADTLB
#define COMADMIN_E_COMPFILE_NOTINSTALLABLE
#define COMADMIN_E_NOTCHANGEABLE
#define COMADMIN_E_NOTDELETEABLE
#define COMADMIN_E_SESSION
#define COMADMIN_E_COMP_MOVE_LOCKED
#define COMADMIN_E_COMP_MOVE_BAD_DEST
#define COMADMIN_E_REGISTERTLB
#define COMADMIN_E_SYSTEMAPP
#define COMADMIN_E_COMPFILE_NOREGISTRAR
#define COMADMIN_E_COREQCOMPINSTALLED
#define COMADMIN_E_SERVICENOTINSTALLED
#define COMADMIN_E_PROPERTYSAVEFAILED
#define COMADMIN_E_OBJECTEXISTS
#define COMADMIN_E_COMPONENTEXISTS
#define COMADMIN_E_REGFILE_CORRUPT
#define COMADMIN_E_PROPERTY_OVERFLOW
#define COMADMIN_E_NOTINREGISTRY
#define COMADMIN_E_OBJECTNOTPOOLABLE
#define COMADMIN_E_APPLID_MATCHES_CLSID
#define COMADMIN_E_ROLE_DOES_NOT_EXIST
#define COMADMIN_E_START_APP_NEEDS_COMPONENTS
#define COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM
#define COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY
#define COMADMIN_E_CAN_NOT_START_APP
#define COMADMIN_E_CAN_NOT_EXPORT_SYS_APP
#define COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT
#define COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER
#define COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE
#define COMADMIN_E_BASE_PARTITION_ONLY
#define COMADMIN_E_START_APP_DISABLED
#define COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME
#define COMADMIN_E_CAT_INVALID_PARTITION_NAME
#define COMADMIN_E_CAT_PARTITION_IN_USE
#define COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES
#define COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED
#define COMADMIN_E_AMBIGUOUS_APPLICATION_NAME
#define COMADMIN_E_AMBIGUOUS_PARTITION_NAME
#define COMADMIN_E_REGDB_NOTINITIALIZED
#define COMADMIN_E_REGDB_NOTOPEN
#define COMADMIN_E_REGDB_SYSTEMERR
#define COMADMIN_E_REGDB_ALREADYRUNNING
#define COMADMIN_E_MIG_VERSIONNOTSUPPORTED
#define COMADMIN_E_MIG_SCHEMANOTFOUND
#define COMADMIN_E_CAT_BITNESSMISMATCH
#define COMADMIN_E_CAT_UNACCEPTABLEBITNESS
#define COMADMIN_E_CAT_WRONGAPPBITNESS
#define COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED
#define COMADMIN_E_CAT_SERVERFAULT
#define COMQC_E_APPLICATION_NOT_QUEUED
#define COMQC_E_NO_QUEUEABLE_INTERFACES
#define COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE
#define COMQC_E_NO_IPERSISTSTREAM
#define COMQC_E_BAD_MESSAGE
#define COMQC_E_UNAUTHENTICATED
#define COMQC_E_UNTRUSTED_ENQUEUER
#define MSDTC_E_DUPLICATE_RESOURCE
#define COMADMIN_E_OBJECT_PARENT_MISSING
#define COMADMIN_E_OBJECT_DOES_NOT_EXIST
#define COMADMIN_E_APP_NOT_RUNNING
#define COMADMIN_E_INVALID_PARTITION
#define COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE
#define COMADMIN_E_USER_IN_SET
#define COMADMIN_E_CANTRECYCLELIBRARYAPPS
#define COMADMIN_E_CANTRECYCLESERVICEAPPS
#define COMADMIN_E_PROCESSALREADYRECYCLED
#define COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED
#define COMADMIN_E_CANTMAKEINPROCSERVICE
#define COMADMIN_E_PROGIDINUSEBYCLSID
#define COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET
#define COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED
#define COMADMIN_E_PARTITION_ACCESSDENIED
#define COMADMIN_E_PARTITION_MSI_ONLY
#define COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT
#define COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS
#define COMADMIN_E_COMP_MOVE_SOURCE
#define COMADMIN_E_COMP_MOVE_DEST
#define COMADMIN_E_COMP_MOVE_PRIVATE
#define COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET
#define COMADMIN_E_CANNOT_ALIAS_EVENTCLASS
#define COMADMIN_E_PRIVATE_ACCESSDENIED
#define COMADMIN_E_SAFERINVALID
#define COMADMIN_E_REGISTRY_ACCESSDENIED
#define COMADMIN_E_PARTITIONS_DISABLED

#define VSS_E_BAD_STATE
#define VSS_E_LEGACY_PROVIDER
#define VSS_E_RESYNC_IN_PROGRESS
#define VSS_E_SNAPSHOT_NOT_IN_SET
#define VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED
#define VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED
#define VSS_E_NESTED_VOLUME_LIMIT
#define VSS_E_OBJECT_NOT_FOUND
#define VSS_E_PROVIDER_NOT_REGISTERED
#define VSS_E_PROVIDER_VETO
#define VSS_E_VOLUME_NOT_SUPPORTED
#define VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER
#define VSS_E_UNEXPECTED
#define VSS_E_UNEXPECTED_PROVIDER_ERROR
#define VSS_E_UNSELECTED_VOLUME
#define VSS_E_CANNOT_REVERT_DISKID
#define VSS_E_INVALID_XML_DOCUMENT
#define VSS_E_OBJECT_ALREADY_EXISTS
# 3273 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winerror.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/fltwinerror.h" 1 3






#define _FLT_WINERROR_



#define FILTER_HRESULT_FROM_FLT_NTSTATUS
#define FACILITY_USERMODE_FILTER_MANAGER

#define ERROR_FLT_IO_COMPLETE
#define ERROR_FLT_NO_HANDLER_DEFINED
#define ERROR_FLT_CONTEXT_ALREADY_DEFINED
#define ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST
#define ERROR_FLT_DISALLOW_FAST_IO
#define ERROR_FLT_INVALID_NAME_REQUEST
#define ERROR_FLT_NOT_SAFE_TO_POST_OPERATION
#define ERROR_FLT_NOT_INITIALIZED
#define ERROR_FLT_FILTER_NOT_READY
#define ERROR_FLT_POST_OPERATION_CLEANUP
#define ERROR_FLT_INTERNAL_ERROR
#define ERROR_FLT_DELETING_OBJECT
#define ERROR_FLT_MUST_BE_NONPAGED_POOL
#define ERROR_FLT_DUPLICATE_ENTRY
#define ERROR_FLT_CBDQ_DISABLED
#define ERROR_FLT_DO_NOT_ATTACH
#define ERROR_FLT_DO_NOT_DETACH
#define ERROR_FLT_INSTANCE_ALTITUDE_COLLISION
#define ERROR_FLT_INSTANCE_NAME_COLLISION
#define ERROR_FLT_FILTER_NOT_FOUND
#define ERROR_FLT_VOLUME_NOT_FOUND
#define ERROR_FLT_INSTANCE_NOT_FOUND
#define ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND
#define ERROR_FLT_INVALID_CONTEXT_REGISTRATION
#define ERROR_FLT_NAME_CACHE_MISS
#define ERROR_FLT_NO_DEVICE_OBJECT
#define ERROR_FLT_VOLUME_ALREADY_MOUNTED
#define ERROR_FLT_ALREADY_ENLISTED
#define ERROR_FLT_CONTEXT_ALREADY_LINKED
#define ERROR_FLT_NO_WAITER_FOR_REPLY
#define ERROR_FLT_REGISTRATION_BUSY
# 3274 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winerror.h" 2 3

#undef __IN__WINERROR_
# 2374 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/timezoneapi.h" 1 3





#define _TIMEZONEAPI_H_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/timezoneapi.h" 3
#define TIME_ZONE_ID_INVALID

  typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
  } TIME_ZONE_INFORMATION,*PTIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;

  typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
  } DYNAMIC_TIME_ZONE_INFORMATION,*PDYNAMIC_TIME_ZONE_INFORMATION;

  __attribute__((dllimport)) WINBOOL SystemTimeToTzSpecificLocalTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime);
  __attribute__((dllimport)) WINBOOL TzSpecificLocalTimeToSystemTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime);
  __attribute__((dllimport)) WINBOOL FileTimeToSystemTime (const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) WINBOOL SystemTimeToFileTime (const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) DWORD GetTimeZoneInformation (LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
# 64 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/timezoneapi.h" 3
  __attribute__((dllimport)) WINBOOL SetTimeZoneInformation (const TIME_ZONE_INFORMATION *lpTimeZoneInformation);
# 2375 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 2 3



#define TC_NORMAL
#define TC_HARDERR
#define TC_GP_TRAP
#define TC_SIGNAL

#define AC_LINE_OFFLINE
#define AC_LINE_ONLINE
#define AC_LINE_BACKUP_POWER
#define AC_LINE_UNKNOWN

#define BATTERY_FLAG_HIGH
#define BATTERY_FLAG_LOW
#define BATTERY_FLAG_CRITICAL
#define BATTERY_FLAG_CHARGING
#define BATTERY_FLAG_NO_BATTERY
#define BATTERY_FLAG_UNKNOWN

#define BATTERY_PERCENTAGE_UNKNOWN

#define BATTERY_LIFE_UNKNOWN

  typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
  } SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;

  __attribute__((dllimport)) WINBOOL GetSystemPowerStatus (LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
  __attribute__((dllimport)) WINBOOL SetSystemPowerState (WINBOOL fSuspend, WINBOOL fForce);
# 2423 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL AllocateUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL FreeUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL MapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL MapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) HANDLE CreateJobObjectA (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE CreateJobObjectW (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE OpenJobObjectA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE OpenJobObjectW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) WINBOOL AssignProcessToJobObject (HANDLE hJob, HANDLE hProcess);
  __attribute__((dllimport)) WINBOOL TerminateJobObject (HANDLE hJob, UINT uExitCode);
  __attribute__((dllimport)) WINBOOL QueryInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
  __attribute__((dllimport)) WINBOOL SetInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
  __attribute__((dllimport)) WINBOOL CreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
  __attribute__((dllimport)) HANDLE FindFirstVolumeA (LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindNextVolumeA (HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) HANDLE FindFirstVolumeMountPointA (LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) HANDLE FindFirstVolumeMountPointW (LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindNextVolumeMountPointA (HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindNextVolumeMountPointW (HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL FindVolumeMountPointClose (HANDLE hFindVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL SetVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
  __attribute__((dllimport)) WINBOOL SetVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
  __attribute__((dllimport)) WINBOOL DeleteVolumeMountPointA (LPCSTR lpszVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL GetVolumeNameForVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL GetVolumePathNameA (LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL GetVolumePathNamesForVolumeNameA (LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);





#define FindFirstVolume
#define FindNextVolume
#define DeleteVolumeMountPoint
#define GetVolumeNameForVolumeMountPoint
#define GetVolumePathName
#define GetVolumePathNamesForVolumeName


#define CreateJobObject
#define OpenJobObject
#define FindFirstVolumeMountPoint
#define FindNextVolumeMountPoint
#define SetVolumeMountPoint

#define ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID
#define ACTCTX_FLAG_LANGID_VALID
#define ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID
#define ACTCTX_FLAG_RESOURCE_NAME_VALID
#define ACTCTX_FLAG_SET_PROCESS_DEFAULT
#define ACTCTX_FLAG_APPLICATION_NAME_VALID
#define ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF
#define ACTCTX_FLAG_HMODULE_VALID

  typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXA,*PACTCTXA;

  typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXW,*PACTCTXW;

  typedef ACTCTXA ACTCTX;
  typedef PACTCTXA PACTCTX;

  typedef const ACTCTXA *PCACTCTXA;
  typedef const ACTCTXW *PCACTCTXW;

  typedef PCACTCTXA PCACTCTX;

  __attribute__((dllimport)) HANDLE CreateActCtxA (PCACTCTXA pActCtx);
  __attribute__((dllimport)) HANDLE CreateActCtxW (PCACTCTXW pActCtx);
  __attribute__((dllimport)) void AddRefActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) void ReleaseActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) WINBOOL ZombifyActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) WINBOOL ActivateActCtx (HANDLE hActCtx, ULONG_PTR *lpCookie);
  __attribute__((dllimport)) WINBOOL DeactivateActCtx (DWORD dwFlags, ULONG_PTR ulCookie);
  __attribute__((dllimport)) WINBOOL GetCurrentActCtx (HANDLE *lphActCtx);

#define CreateActCtx
#define DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION

  typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
  } ACTCTX_SECTION_KEYED_DATA_2600,*PACTCTX_SECTION_KEYED_DATA_2600;

  typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

  typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
  } ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,*PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
  } ACTCTX_SECTION_KEYED_DATA,*PACTCTX_SECTION_KEYED_DATA;

  typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

#define FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX
#define FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS
#define FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA

  __attribute__((dllimport)) WINBOOL FindActCtxSectionStringA (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
  __attribute__((dllimport)) WINBOOL FindActCtxSectionStringW (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
  __attribute__((dllimport)) WINBOOL FindActCtxSectionGuid (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, const GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);

#define FindActCtxSectionString


  typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
  } ACTIVATION_CONTEXT_BASIC_INFORMATION,*PACTIVATION_CONTEXT_BASIC_INFORMATION;

  typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

#define ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED


#define QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX
#define QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE
#define QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
#define QUERY_ACTCTX_FLAG_NO_ADDREF

  __attribute__((dllimport)) WINBOOL QueryActCtxW (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

  typedef WINBOOL ( *PQUERYACTCTXW_FUNC) (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

  __attribute__((dllimport)) DWORD WTSGetActiveConsoleSessionId (void);
  __attribute__((dllimport)) WINBOOL GetNumaProcessorNode (UCHAR Processor, PUCHAR NodeNumber);
  __attribute__((dllimport)) WINBOOL GetNumaNodeProcessorMask (UCHAR Node, PULONGLONG ProcessorMask);
  __attribute__((dllimport)) WINBOOL GetNumaAvailableMemoryNode (UCHAR Node, PULONGLONG AvailableBytes);
# 2611 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  typedef DWORD ( *APPLICATION_RECOVERY_CALLBACK) (PVOID pvParameter);

#define RESTART_MAX_CMD_LINE

#define RESTART_NO_CRASH
#define RESTART_NO_HANG
#define RESTART_NO_PATCH
#define RESTART_NO_REBOOT

#define RECOVERY_DEFAULT_PING_INTERVAL
#define RECOVERY_MAX_PING_INTERVAL
# 2888 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
  __attribute__((dllimport)) WINBOOL CopyContext (PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source);



  __attribute__((dllimport)) WINBOOL InitializeContext (PVOID Buffer, DWORD ContextFlags, PCONTEXT *Context, PDWORD ContextLength);

  __attribute__((dllimport)) DWORD64 GetEnabledXStateFeatures (void);
  __attribute__((dllimport)) WINBOOL GetXStateFeaturesMask (PCONTEXT Context, PDWORD64 FeatureMask);
  __attribute__((dllimport)) PVOID LocateXStateFeature (PCONTEXT Context, DWORD FeatureId, PDWORD Length);





  __attribute__((dllimport)) WINBOOL SetXStateFeaturesMask (PCONTEXT Context, DWORD64 FeatureMask);
# 2919 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#define MICROSOFT_WINDOWS_WINBASE_INTERLOCKED_CPLUSPLUS_H_INCLUDED


#define MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS
# 3049 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winbase.h" 3
#undef MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS
#define MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS
# 71 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 1 3






#define _WINGDI_







#define WINGDIAPI





#define WINSPOOLAPI
# 34 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 3
#define R2_BLACK
#define R2_NOTMERGEPEN
#define R2_MASKNOTPEN
#define R2_NOTCOPYPEN
#define R2_MASKPENNOT
#define R2_NOT
#define R2_XORPEN
#define R2_NOTMASKPEN
#define R2_MASKPEN
#define R2_NOTXORPEN
#define R2_NOP
#define R2_MERGENOTPEN
#define R2_COPYPEN
#define R2_MERGEPENNOT
#define R2_MERGEPEN
#define R2_WHITE
#define R2_LAST

#define SRCCOPY
#define SRCPAINT
#define SRCAND
#define SRCINVERT
#define SRCERASE
#define NOTSRCCOPY
#define NOTSRCERASE
#define MERGECOPY
#define MERGEPAINT
#define PATCOPY
#define PATPAINT
#define PATINVERT
#define DSTINVERT
#define BLACKNESS
#define WHITENESS
#define NOMIRRORBITMAP
#define CAPTUREBLT
#define MAKEROP4


#define GDI_ERROR
#define HGDI_ERROR

#define ERROR
#define NULLREGION
#define SIMPLEREGION
#define COMPLEXREGION
#define RGN_ERROR

#define RGN_AND
#define RGN_OR
#define RGN_XOR
#define RGN_DIFF
#define RGN_COPY
#define RGN_MIN
#define RGN_MAX

#define BLACKONWHITE
#define WHITEONBLACK
#define COLORONCOLOR
#define HALFTONE
#define MAXSTRETCHBLTMODE

#define STRETCH_ANDSCANS
#define STRETCH_ORSCANS
#define STRETCH_DELETESCANS
#define STRETCH_HALFTONE

#define ALTERNATE
#define WINDING
#define POLYFILL_LAST

#define LAYOUT_RTL
#define LAYOUT_BTT
#define LAYOUT_VBH
#define LAYOUT_ORIENTATIONMASK
#define LAYOUT_BITMAPORIENTATIONPRESERVED

#define TA_NOUPDATECP
#define TA_UPDATECP

#define TA_LEFT
#define TA_RIGHT
#define TA_CENTER

#define TA_TOP
#define TA_BOTTOM
#define TA_BASELINE
#define TA_RTLREADING
#define TA_MASK

#define VTA_BASELINE
#define VTA_LEFT
#define VTA_RIGHT
#define VTA_CENTER
#define VTA_BOTTOM
#define VTA_TOP

#define ETO_OPAQUE
#define ETO_CLIPPED
#define ETO_GLYPH_INDEX
#define ETO_RTLREADING
#define ETO_NUMERICSLOCAL
#define ETO_NUMERICSLATIN
#define ETO_IGNORELANGUAGE
#define ETO_PDY




#define ASPECT_FILTERING

#define DCB_RESET
#define DCB_ACCUMULATE
#define DCB_DIRTY
#define DCB_SET
#define DCB_ENABLE
#define DCB_DISABLE



#define META_SETBKCOLOR
#define META_SETBKMODE
#define META_SETMAPMODE
#define META_SETROP2
#define META_SETRELABS
#define META_SETPOLYFILLMODE
#define META_SETSTRETCHBLTMODE
#define META_SETTEXTCHAREXTRA
#define META_SETTEXTCOLOR
#define META_SETTEXTJUSTIFICATION
#define META_SETWINDOWORG
#define META_SETWINDOWEXT
#define META_SETVIEWPORTORG
#define META_SETVIEWPORTEXT
#define META_OFFSETWINDOWORG
#define META_SCALEWINDOWEXT
#define META_OFFSETVIEWPORTORG
#define META_SCALEVIEWPORTEXT
#define META_LINETO
#define META_MOVETO
#define META_EXCLUDECLIPRECT
#define META_INTERSECTCLIPRECT
#define META_ARC
#define META_ELLIPSE
#define META_FLOODFILL
#define META_PIE
#define META_RECTANGLE
#define META_ROUNDRECT
#define META_PATBLT
#define META_SAVEDC
#define META_SETPIXEL
#define META_OFFSETCLIPRGN
#define META_TEXTOUT
#define META_BITBLT
#define META_STRETCHBLT
#define META_POLYGON
#define META_POLYLINE
#define META_ESCAPE
#define META_RESTOREDC
#define META_FILLREGION
#define META_FRAMEREGION
#define META_INVERTREGION
#define META_PAINTREGION
#define META_SELECTCLIPREGION
#define META_SELECTOBJECT
#define META_SETTEXTALIGN
#define META_CHORD
#define META_SETMAPPERFLAGS
#define META_EXTTEXTOUT
#define META_SETDIBTODEV
#define META_SELECTPALETTE
#define META_REALIZEPALETTE
#define META_ANIMATEPALETTE
#define META_SETPALENTRIES
#define META_POLYPOLYGON
#define META_RESIZEPALETTE
#define META_DIBBITBLT
#define META_DIBSTRETCHBLT
#define META_DIBCREATEPATTERNBRUSH
#define META_STRETCHDIB
#define META_EXTFLOODFILL
#define META_SETLAYOUT
#define META_DELETEOBJECT
#define META_CREATEPALETTE
#define META_CREATEPATTERNBRUSH
#define META_CREATEPENINDIRECT
#define META_CREATEFONTINDIRECT
#define META_CREATEBRUSHINDIRECT
#define META_CREATEREGION


  typedef struct _DRAWPATRECT {
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
  } DRAWPATRECT,*PDRAWPATRECT;




#define NEWFRAME
#define ABORTDOC
#define NEXTBAND
#define SETCOLORTABLE
#define GETCOLORTABLE
#define FLUSHOUTPUT
#define DRAFTMODE
#define QUERYESCSUPPORT
#define SETABORTPROC
#define STARTDOC
#define ENDDOC
#define GETPHYSPAGESIZE
#define GETPRINTINGOFFSET
#define GETSCALINGFACTOR
#define MFCOMMENT
#define GETPENWIDTH
#define SETCOPYCOUNT
#define SELECTPAPERSOURCE
#define DEVICEDATA
#define PASSTHROUGH
#define GETTECHNOLGY
#define GETTECHNOLOGY
#define SETLINECAP
#define SETLINEJOIN
#define SETMITERLIMIT
#define BANDINFO
#define DRAWPATTERNRECT
#define GETVECTORPENSIZE
#define GETVECTORBRUSHSIZE
#define ENABLEDUPLEX
#define GETSETPAPERBINS
#define GETSETPRINTORIENT
#define ENUMPAPERBINS
#define SETDIBSCALING
#define EPSPRINTING
#define ENUMPAPERMETRICS
#define GETSETPAPERMETRICS
#define POSTSCRIPT_DATA
#define POSTSCRIPT_IGNORE
#define MOUSETRAILS
#define GETDEVICEUNITS

#define GETEXTENDEDTEXTMETRICS
#define GETEXTENTTABLE
#define GETPAIRKERNTABLE
#define GETTRACKKERNTABLE
#define EXTTEXTOUT
#define GETFACENAME
#define DOWNLOADFACE
#define ENABLERELATIVEWIDTHS
#define ENABLEPAIRKERNING
#define SETKERNTRACK
#define SETALLJUSTVALUES
#define SETCHARSET

#define STRETCHBLT
#define METAFILE_DRIVER
#define GETSETSCREENPARAMS
#define QUERYDIBSUPPORT
#define BEGIN_PATH
#define CLIP_TO_PATH
#define END_PATH
#define EXT_DEVICE_CAPS
#define RESTORE_CTM
#define SAVE_CTM
#define SET_ARC_DIRECTION
#define SET_BACKGROUND_COLOR
#define SET_POLY_MODE
#define SET_SCREEN_ANGLE
#define SET_SPREAD
#define TRANSFORM_CTM
#define SET_CLIP_BOX
#define SET_BOUNDS
#define SET_MIRROR_MODE
#define OPENCHANNEL
#define DOWNLOADHEADER
#define CLOSECHANNEL
#define POSTSCRIPT_PASSTHROUGH
#define ENCAPSULATED_POSTSCRIPT

#define POSTSCRIPT_IDENTIFY
#define POSTSCRIPT_INJECTION

#define CHECKJPEGFORMAT
#define CHECKPNGFORMAT

#define GET_PS_FEATURESETTING
#define GDIPLUS_TS_QUERYVER
#define GDIPLUS_TS_RECORD






#define SPCLPASSTHROUGH2

#define PSIDENT_GDICENTRIC
#define PSIDENT_PSCENTRIC


  typedef struct _PSINJECTDATA {
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
  } PSINJECTDATA,*PPSINJECTDATA;


#define PSINJECT_BEGINSTREAM
#define PSINJECT_PSADOBE
#define PSINJECT_PAGESATEND
#define PSINJECT_PAGES

#define PSINJECT_DOCNEEDEDRES
#define PSINJECT_DOCSUPPLIEDRES
#define PSINJECT_PAGEORDER
#define PSINJECT_ORIENTATION
#define PSINJECT_BOUNDINGBOX
#define PSINJECT_DOCUMENTPROCESSCOLORS

#define PSINJECT_COMMENTS
#define PSINJECT_BEGINDEFAULTS
#define PSINJECT_ENDDEFAULTS
#define PSINJECT_BEGINPROLOG
#define PSINJECT_ENDPROLOG
#define PSINJECT_BEGINSETUP
#define PSINJECT_ENDSETUP
#define PSINJECT_TRAILER
#define PSINJECT_EOF
#define PSINJECT_ENDSTREAM
#define PSINJECT_DOCUMENTPROCESSCOLORSATEND

#define PSINJECT_PAGENUMBER
#define PSINJECT_BEGINPAGESETUP
#define PSINJECT_ENDPAGESETUP
#define PSINJECT_PAGETRAILER
#define PSINJECT_PLATECOLOR

#define PSINJECT_SHOWPAGE
#define PSINJECT_PAGEBBOX
#define PSINJECT_ENDPAGECOMMENTS

#define PSINJECT_VMSAVE
#define PSINJECT_VMRESTORE

#define FEATURESETTING_NUP
#define FEATURESETTING_OUTPUT
#define FEATURESETTING_PSLEVEL
#define FEATURESETTING_CUSTPAPER
#define FEATURESETTING_MIRROR
#define FEATURESETTING_NEGATIVE
#define FEATURESETTING_PROTOCOL

#define FEATURESETTING_PRIVATE_BEGIN
#define FEATURESETTING_PRIVATE_END


  typedef struct _PSFEATURE_OUTPUT {
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
  } PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;

  typedef struct _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
  } PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;


#define PSPROTOCOL_ASCII
#define PSPROTOCOL_BCP
#define PSPROTOCOL_TBCP
#define PSPROTOCOL_BINARY

#define QDI_SETDIBITS
#define QDI_GETDIBITS
#define QDI_DIBTOSCREEN
#define QDI_STRETCHDIB

#define SP_NOTREPORTED
#define SP_ERROR
#define SP_APPABORT
#define SP_USERABORT
#define SP_OUTOFDISK
#define SP_OUTOFMEMORY

#define PR_JOBSTATUS

#define OBJ_PEN
#define OBJ_BRUSH
#define OBJ_DC
#define OBJ_METADC
#define OBJ_PAL
#define OBJ_FONT
#define OBJ_BITMAP
#define OBJ_REGION
#define OBJ_METAFILE
#define OBJ_MEMDC
#define OBJ_EXTPEN
#define OBJ_ENHMETADC
#define OBJ_ENHMETAFILE
#define OBJ_COLORSPACE

#define GDI_OBJ_LAST

#define MWT_IDENTITY
#define MWT_LEFTMULTIPLY
#define MWT_RIGHTMULTIPLY

#define MWT_MIN
#define MWT_MAX

#define _XFORM_

  typedef struct tagXFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM,*PXFORM,*LPXFORM;

  typedef struct tagBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP,*PBITMAP,*NPBITMAP,*LPBITMAP;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 470 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3
  typedef struct tagRGBTRIPLE {
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
  } RGBTRIPLE;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 476 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3

  typedef struct tagRGBQUAD {
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
  } RGBQUAD;



  typedef RGBQUAD *LPRGBQUAD;


#define CS_ENABLE
#define CS_DISABLE
#define CS_DELETE_TRANSFORM

#define LCS_SIGNATURE

#define LCS_sRGB
#define LCS_WINDOWS_COLOR_SPACE


  typedef LONG LCSCSTYPE;
#define LCS_CALIBRATED_RGB

  typedef LONG LCSGAMUTMATCH;
#define LCS_GM_BUSINESS
#define LCS_GM_GRAPHICS
#define LCS_GM_IMAGES
#define LCS_GM_ABS_COLORIMETRIC

#define CM_OUT_OF_GAMUT
#define CM_IN_GAMUT

#define ICM_ADDPROFILE
#define ICM_DELETEPROFILE
#define ICM_QUERYPROFILE
#define ICM_SETDEFAULTPROFILE
#define ICM_REGISTERICMATCHER
#define ICM_UNREGISTERICMATCHER
#define ICM_QUERYMATCH

#define GetKValue
#define GetYValue
#define GetMValue
#define GetCValue

#define CMYK

  typedef long FXPT16DOT16,*LPFXPT16DOT16;
  typedef long FXPT2DOT30,*LPFXPT2DOT30;

  typedef struct tagCIEXYZ {
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
  } CIEXYZ;


  typedef CIEXYZ *LPCIEXYZ;


  typedef struct tagICEXYZTRIPLE {
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
  } CIEXYZTRIPLE;


  typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;



  typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
  } LOGCOLORSPACEA,*LPLOGCOLORSPACEA;

  typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
  } LOGCOLORSPACEW,*LPLOGCOLORSPACEW;

  typedef LOGCOLORSPACEA LOGCOLORSPACE;
  typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;



  typedef struct tagBITMAPCOREHEADER {
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
  } BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;



  typedef struct tagBITMAPINFOHEADER {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
  } BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;



  typedef struct {
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
  } BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;

  typedef struct {
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
  } BITMAPV5HEADER,*LPBITMAPV5HEADER,*PBITMAPV5HEADER;


#define PROFILE_LINKED
#define PROFILE_EMBEDDED

#define BI_RGB
#define BI_RLE8
#define BI_RLE4
#define BI_BITFIELDS
#define BI_JPEG
#define BI_PNG


  typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
  } BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;



  typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
  } BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 682 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3
  typedef struct tagBITMAPFILEHEADER {
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
  } BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 690 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3


#define MAKEPOINTS




  typedef struct tagFONTSIGNATURE {
    DWORD fsUsb[4];
    DWORD fsCsb[2];
  } FONTSIGNATURE,*PFONTSIGNATURE,*LPFONTSIGNATURE;

  typedef struct tagCHARSETINFO {
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
  } CHARSETINFO,*PCHARSETINFO,*NPCHARSETINFO,*LPCHARSETINFO;


#define TCI_SRCCHARSET
#define TCI_SRCCODEPAGE
#define TCI_SRCFONTSIG
#define TCI_SRCLOCALE


  typedef struct tagLOCALESIGNATURE {
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
  } LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;





  typedef struct tagHANDLETABLE {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE,*PHANDLETABLE,*LPHANDLETABLE;

  typedef struct tagMETARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;


  typedef struct tagMETARECORD *PMETARECORD;


  typedef struct tagMETARECORD *LPMETARECORD;

  typedef struct tagMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT,*LPMETAFILEPICT;



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 751 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3
  typedef struct tagMETAHEADER {
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
  } METAHEADER;
  typedef struct tagMETAHEADER *PMETAHEADER;
  typedef struct tagMETAHEADER *LPMETAHEADER;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 764 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3



  typedef struct tagENHMETARECORD {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
  } ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;

  typedef struct tagENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
  } ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;




#define TMPF_FIXED_PITCH
#define TMPF_VECTOR
#define TMPF_DEVICE
#define TMPF_TRUETYPE





  typedef BYTE BCHAR;




#define _TEXTMETRIC_DEFINED

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack4.h" 1 3






#pragma pack(push,4)
# 815 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3

  typedef struct tagTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICA,*PTEXTMETRICA,*NPTEXTMETRICA,*LPTEXTMETRICA;

  typedef struct tagTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICW,*PTEXTMETRICW,*NPTEXTMETRICW,*LPTEXTMETRICW;

  typedef TEXTMETRICA TEXTMETRIC;
  typedef PTEXTMETRICA PTEXTMETRIC;
  typedef NPTEXTMETRICA NPTEXTMETRIC;
  typedef LPTEXTMETRICA LPTEXTMETRIC;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 867 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3



#define NTM_REGULAR
#define NTM_BOLD
#define NTM_ITALIC

#define NTM_NONNEGATIVE_AC
#define NTM_PS_OPENTYPE
#define NTM_TT_OPENTYPE
#define NTM_MULTIPLEMASTER
#define NTM_TYPE1
#define NTM_DSIG


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack4.h" 1 3






#pragma pack(push,4)
# 883 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3
  typedef struct tagNEWTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICA,*PNEWTEXTMETRICA,*NPNEWTEXTMETRICA,*LPNEWTEXTMETRICA;

  typedef struct tagNEWTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICW,*PNEWTEXTMETRICW,*NPNEWTEXTMETRICW,*LPNEWTEXTMETRICW;

  typedef NEWTEXTMETRICA NEWTEXTMETRIC;
  typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
  typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
  typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 943 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 2 3

  typedef struct tagNEWTEXTMETRICEXA {
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXA;

  typedef struct tagNEWTEXTMETRICEXW {
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXW;

  typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;




  typedef struct tagPELARRAY {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY,*PPELARRAY,*NPPELARRAY,*LPPELARRAY;


  typedef struct tagLOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH,*PLOGBRUSH,*NPLOGBRUSH,*LPLOGBRUSH;

  typedef struct tagLOGBRUSH32 {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32,*PLOGBRUSH32,*NPLOGBRUSH32,*LPLOGBRUSH32;


  typedef LOGBRUSH PATTERN;
  typedef PATTERN *PPATTERN;
  typedef PATTERN *NPPATTERN;
  typedef PATTERN *LPPATTERN;



  typedef struct tagLOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN,*PLOGPEN,*NPLOGPEN,*LPLOGPEN;



  typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN,*PEXTLOGPEN,*NPEXTLOGPEN,*LPEXTLOGPEN;



  typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;


#define _PALETTEENTRY_DEFINED
  typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
  } PALETTEENTRY,*PPALETTEENTRY,*LPPALETTEENTRY;



#define _LOGPALETTE_DEFINED
  typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
  } LOGPALETTE,*PLOGPALETTE,*NPLOGPALETTE,*LPLOGPALETTE;



#define LF_FACESIZE


  typedef struct tagLOGFONTA {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
  } LOGFONTA,*PLOGFONTA,*NPLOGFONTA,*LPLOGFONTA;

  typedef struct tagLOGFONTW {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
  } LOGFONTW,*PLOGFONTW,*NPLOGFONTW,*LPLOGFONTW;

  typedef LOGFONTA LOGFONT;
  typedef PLOGFONTA PLOGFONT;
  typedef NPLOGFONTA NPLOGFONT;
  typedef LPLOGFONTA LPLOGFONT;


#define LF_FULLFACESIZE


  typedef struct tagENUMLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
  } ENUMLOGFONTA,*LPENUMLOGFONTA;

  typedef struct tagENUMLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
  } ENUMLOGFONTW,*LPENUMLOGFONTW;

  typedef ENUMLOGFONTA ENUMLOGFONT;
  typedef LPENUMLOGFONTA LPENUMLOGFONT;

  typedef struct tagENUMLOGFONTEXA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
  } ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;

  typedef struct tagENUMLOGFONTEXW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
  } ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;

  typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
  typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;


#define OUT_DEFAULT_PRECIS
#define OUT_STRING_PRECIS
#define OUT_CHARACTER_PRECIS
#define OUT_STROKE_PRECIS
#define OUT_TT_PRECIS
#define OUT_DEVICE_PRECIS
#define OUT_RASTER_PRECIS
#define OUT_TT_ONLY_PRECIS
#define OUT_OUTLINE_PRECIS
#define OUT_SCREEN_OUTLINE_PRECIS
#define OUT_PS_ONLY_PRECIS

#define CLIP_DEFAULT_PRECIS
#define CLIP_CHARACTER_PRECIS
#define CLIP_STROKE_PRECIS
#define CLIP_MASK
#define CLIP_LH_ANGLES
#define CLIP_TT_ALWAYS



#define CLIP_EMBEDDED

#define DEFAULT_QUALITY
#define DRAFT_QUALITY
#define PROOF_QUALITY
#define NONANTIALIASED_QUALITY
#define ANTIALIASED_QUALITY

#define CLEARTYPE_QUALITY
#define CLEARTYPE_NATURAL_QUALITY

#define DEFAULT_PITCH
#define FIXED_PITCH
#define VARIABLE_PITCH
#define MONO_FONT

#define ANSI_CHARSET
#define DEFAULT_CHARSET
#define SYMBOL_CHARSET
#define SHIFTJIS_CHARSET
#define HANGEUL_CHARSET
#define HANGUL_CHARSET
#define GB2312_CHARSET
#define CHINESEBIG5_CHARSET
#define OEM_CHARSET
#define JOHAB_CHARSET
#define HEBREW_CHARSET
#define ARABIC_CHARSET
#define GREEK_CHARSET
#define TURKISH_CHARSET
#define VIETNAMESE_CHARSET
#define THAI_CHARSET
#define EASTEUROPE_CHARSET
#define RUSSIAN_CHARSET

#define MAC_CHARSET
#define BALTIC_CHARSET

#define FS_LATIN1
#define FS_LATIN2
#define FS_CYRILLIC
#define FS_GREEK
#define FS_TURKISH
#define FS_HEBREW
#define FS_ARABIC
#define FS_BALTIC
#define FS_VIETNAMESE
#define FS_THAI
#define FS_JISJAPAN
#define FS_CHINESESIMP
#define FS_WANSUNG
#define FS_CHINESETRAD
#define FS_JOHAB
#define FS_SYMBOL

#define FF_DONTCARE
#define FF_ROMAN

#define FF_SWISS

#define FF_MODERN

#define FF_SCRIPT
#define FF_DECORATIVE

#define FW_DONTCARE
#define FW_THIN
#define FW_EXTRALIGHT
#define FW_LIGHT
#define FW_NORMAL
#define FW_MEDIUM
#define FW_SEMIBOLD
#define FW_BOLD
#define FW_EXTRABOLD
#define FW_HEAVY

#define FW_ULTRALIGHT
#define FW_REGULAR
#define FW_DEMIBOLD
#define FW_ULTRABOLD
#define FW_BLACK

#define PANOSE_COUNT
#define PAN_FAMILYTYPE_INDEX
#define PAN_SERIFSTYLE_INDEX
#define PAN_WEIGHT_INDEX
#define PAN_PROPORTION_INDEX
#define PAN_CONTRAST_INDEX
#define PAN_STROKEVARIATION_INDEX
#define PAN_ARMSTYLE_INDEX
#define PAN_LETTERFORM_INDEX
#define PAN_MIDLINE_INDEX
#define PAN_XHEIGHT_INDEX

#define PAN_CULTURE_LATIN


  typedef struct tagPANOSE {
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
  } PANOSE,*LPPANOSE;

#define PAN_ANY
#define PAN_NO_FIT

#define PAN_FAMILY_TEXT_DISPLAY
#define PAN_FAMILY_SCRIPT
#define PAN_FAMILY_DECORATIVE
#define PAN_FAMILY_PICTORIAL

#define PAN_SERIF_COVE
#define PAN_SERIF_OBTUSE_COVE
#define PAN_SERIF_SQUARE_COVE
#define PAN_SERIF_OBTUSE_SQUARE_COVE
#define PAN_SERIF_SQUARE
#define PAN_SERIF_THIN
#define PAN_SERIF_BONE
#define PAN_SERIF_EXAGGERATED
#define PAN_SERIF_TRIANGLE
#define PAN_SERIF_NORMAL_SANS
#define PAN_SERIF_OBTUSE_SANS
#define PAN_SERIF_PERP_SANS
#define PAN_SERIF_FLARED
#define PAN_SERIF_ROUNDED

#define PAN_WEIGHT_VERY_LIGHT
#define PAN_WEIGHT_LIGHT
#define PAN_WEIGHT_THIN
#define PAN_WEIGHT_BOOK
#define PAN_WEIGHT_MEDIUM
#define PAN_WEIGHT_DEMI
#define PAN_WEIGHT_BOLD
#define PAN_WEIGHT_HEAVY
#define PAN_WEIGHT_BLACK
#define PAN_WEIGHT_NORD

#define PAN_PROP_OLD_STYLE
#define PAN_PROP_MODERN
#define PAN_PROP_EVEN_WIDTH
#define PAN_PROP_EXPANDED
#define PAN_PROP_CONDENSED
#define PAN_PROP_VERY_EXPANDED
#define PAN_PROP_VERY_CONDENSED
#define PAN_PROP_MONOSPACED

#define PAN_CONTRAST_NONE
#define PAN_CONTRAST_VERY_LOW
#define PAN_CONTRAST_LOW
#define PAN_CONTRAST_MEDIUM_LOW
#define PAN_CONTRAST_MEDIUM
#define PAN_CONTRAST_MEDIUM_HIGH
#define PAN_CONTRAST_HIGH
#define PAN_CONTRAST_VERY_HIGH

#define PAN_STROKE_GRADUAL_DIAG
#define PAN_STROKE_GRADUAL_TRAN
#define PAN_STROKE_GRADUAL_VERT
#define PAN_STROKE_GRADUAL_HORZ
#define PAN_STROKE_RAPID_VERT
#define PAN_STROKE_RAPID_HORZ
#define PAN_STROKE_INSTANT_VERT

#define PAN_STRAIGHT_ARMS_HORZ
#define PAN_STRAIGHT_ARMS_WEDGE
#define PAN_STRAIGHT_ARMS_VERT
#define PAN_STRAIGHT_ARMS_SINGLE_SERIF
#define PAN_STRAIGHT_ARMS_DOUBLE_SERIF
#define PAN_BENT_ARMS_HORZ
#define PAN_BENT_ARMS_WEDGE
#define PAN_BENT_ARMS_VERT
#define PAN_BENT_ARMS_SINGLE_SERIF
#define PAN_BENT_ARMS_DOUBLE_SERIF

#define PAN_LETT_NORMAL_CONTACT
#define PAN_LETT_NORMAL_WEIGHTED
#define PAN_LETT_NORMAL_BOXED
#define PAN_LETT_NORMAL_FLATTENED
#define PAN_LETT_NORMAL_ROUNDED
#define PAN_LETT_NORMAL_OFF_CENTER
#define PAN_LETT_NORMAL_SQUARE
#define PAN_LETT_OBLIQUE_CONTACT
#define PAN_LETT_OBLIQUE_WEIGHTED
#define PAN_LETT_OBLIQUE_BOXED
#define PAN_LETT_OBLIQUE_FLATTENED
#define PAN_LETT_OBLIQUE_ROUNDED
#define PAN_LETT_OBLIQUE_OFF_CENTER
#define PAN_LETT_OBLIQUE_SQUARE

#define PAN_MIDLINE_STANDARD_TRIMMED
#define PAN_MIDLINE_STANDARD_POINTED
#define PAN_MIDLINE_STANDARD_SERIFED
#define PAN_MIDLINE_HIGH_TRIMMED
#define PAN_MIDLINE_HIGH_POINTED
#define PAN_MIDLINE_HIGH_SERIFED
#define PAN_MIDLINE_CONSTANT_TRIMMED
#define PAN_MIDLINE_CONSTANT_POINTED
#define PAN_MIDLINE_CONSTANT_SERIFED
#define PAN_MIDLINE_LOW_TRIMMED
#define PAN_MIDLINE_LOW_POINTED
#define PAN_MIDLINE_LOW_SERIFED

#define PAN_XHEIGHT_CONSTANT_SMALL
#define PAN_XHEIGHT_CONSTANT_STD
#define PAN_XHEIGHT_CONSTANT_LARGE
#define PAN_XHEIGHT_DUCKING_SMALL
#define PAN_XHEIGHT_DUCKING_STD
#define PAN_XHEIGHT_DUCKING_LARGE

#define ELF_VENDOR_SIZE

  typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTA,*PEXTLOGFONTA,*NPEXTLOGFONTA,*LPEXTLOGFONTA;

  typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTW,*PEXTLOGFONTW,*NPEXTLOGFONTW,*LPEXTLOGFONTW;

  typedef EXTLOGFONTA EXTLOGFONT;
  typedef PEXTLOGFONTA PEXTLOGFONT;
  typedef NPEXTLOGFONTA NPEXTLOGFONT;
  typedef LPEXTLOGFONTA LPEXTLOGFONT;


#define ELF_VERSION
#define ELF_CULTURE_LATIN

#define RASTER_FONTTYPE
#define DEVICE_FONTTYPE
#define TRUETYPE_FONTTYPE

#define RGB
#define PALETTERGB
#define PALETTEINDEX

#define PC_RESERVED
#define PC_EXPLICIT
#define PC_NOCOLLAPSE

#define GetRValue
#define GetGValue
#define GetBValue

#define TRANSPARENT
#define OPAQUE
#define BKMODE_LAST

#define GM_COMPATIBLE
#define GM_ADVANCED
#define GM_LAST

#define PT_CLOSEFIGURE
#define PT_LINETO
#define PT_BEZIERTO
#define PT_MOVETO

#define MM_TEXT
#define MM_LOMETRIC
#define MM_HIMETRIC
#define MM_LOENGLISH
#define MM_HIENGLISH
#define MM_TWIPS
#define MM_ISOTROPIC
#define MM_ANISOTROPIC

#define MM_MIN
#define MM_MAX
#define MM_MAX_FIXEDSCALE

#define ABSOLUTE
#define RELATIVE

#define WHITE_BRUSH
#define LTGRAY_BRUSH
#define GRAY_BRUSH
#define DKGRAY_BRUSH
#define BLACK_BRUSH
#define NULL_BRUSH
#define HOLLOW_BRUSH
#define WHITE_PEN
#define BLACK_PEN
#define NULL_PEN
#define OEM_FIXED_FONT
#define ANSI_FIXED_FONT
#define ANSI_VAR_FONT
#define SYSTEM_FONT
#define DEVICE_DEFAULT_FONT
#define DEFAULT_PALETTE
#define SYSTEM_FIXED_FONT
#define DEFAULT_GUI_FONT
#define DC_BRUSH
#define DC_PEN

#define STOCK_LAST

#define CLR_INVALID

#define BS_SOLID
#define BS_NULL
#define BS_HOLLOW
#define BS_HATCHED
#define BS_PATTERN
#define BS_INDEXED
#define BS_DIBPATTERN
#define BS_DIBPATTERNPT
#define BS_PATTERN8X8
#define BS_DIBPATTERN8X8
#define BS_MONOPATTERN

#define HS_HORIZONTAL
#define HS_VERTICAL
#define HS_FDIAGONAL
#define HS_BDIAGONAL
#define HS_CROSS
#define HS_DIAGCROSS
#define HS_API_MAX

#define PS_SOLID
#define PS_DASH
#define PS_DOT
#define PS_DASHDOT
#define PS_DASHDOTDOT
#define PS_NULL
#define PS_INSIDEFRAME
#define PS_USERSTYLE
#define PS_ALTERNATE
#define PS_STYLE_MASK

#define PS_ENDCAP_ROUND
#define PS_ENDCAP_SQUARE
#define PS_ENDCAP_FLAT
#define PS_ENDCAP_MASK

#define PS_JOIN_ROUND
#define PS_JOIN_BEVEL
#define PS_JOIN_MITER
#define PS_JOIN_MASK

#define PS_COSMETIC
#define PS_GEOMETRIC
#define PS_TYPE_MASK

#define AD_COUNTERCLOCKWISE
#define AD_CLOCKWISE

#define DRIVERVERSION
#define TECHNOLOGY
#define HORZSIZE
#define VERTSIZE
#define HORZRES
#define VERTRES
#define BITSPIXEL
#define PLANES
#define NUMBRUSHES
#define NUMPENS
#define NUMMARKERS
#define NUMFONTS
#define NUMCOLORS
#define PDEVICESIZE
#define CURVECAPS
#define LINECAPS
#define POLYGONALCAPS
#define TEXTCAPS
#define CLIPCAPS
#define RASTERCAPS
#define ASPECTX
#define ASPECTY
#define ASPECTXY

#define LOGPIXELSX
#define LOGPIXELSY

#define SIZEPALETTE
#define NUMRESERVED
#define COLORRES

#define PHYSICALWIDTH
#define PHYSICALHEIGHT
#define PHYSICALOFFSETX
#define PHYSICALOFFSETY
#define SCALINGFACTORX
#define SCALINGFACTORY

#define VREFRESH
#define DESKTOPVERTRES
#define DESKTOPHORZRES
#define BLTALIGNMENT

#define SHADEBLENDCAPS
#define COLORMGMTCAPS


#define DT_PLOTTER
#define DT_RASDISPLAY
#define DT_RASPRINTER
#define DT_RASCAMERA
#define DT_CHARSTREAM
#define DT_METAFILE
#define DT_DISPFILE

#define CC_NONE
#define CC_CIRCLES
#define CC_PIE
#define CC_CHORD
#define CC_ELLIPSES
#define CC_WIDE
#define CC_STYLED
#define CC_WIDESTYLED
#define CC_INTERIORS
#define CC_ROUNDRECT

#define LC_NONE
#define LC_POLYLINE
#define LC_MARKER
#define LC_POLYMARKER
#define LC_WIDE
#define LC_STYLED
#define LC_WIDESTYLED
#define LC_INTERIORS

#define PC_NONE
#define PC_POLYGON
#define PC_RECTANGLE
#define PC_WINDPOLYGON
#define PC_TRAPEZOID
#define PC_SCANLINE
#define PC_WIDE
#define PC_STYLED
#define PC_WIDESTYLED
#define PC_INTERIORS
#define PC_POLYPOLYGON
#define PC_PATHS

#define CP_NONE
#define CP_RECTANGLE
#define CP_REGION

#define TC_OP_CHARACTER
#define TC_OP_STROKE
#define TC_CP_STROKE
#define TC_CR_90
#define TC_CR_ANY
#define TC_SF_X_YINDEP
#define TC_SA_DOUBLE
#define TC_SA_INTEGER
#define TC_SA_CONTIN
#define TC_EA_DOUBLE
#define TC_IA_ABLE
#define TC_UA_ABLE
#define TC_SO_ABLE
#define TC_RA_ABLE
#define TC_VA_ABLE
#define TC_RESERVED
#define TC_SCROLLBLT


#define RC_NONE
#define RC_BITBLT
#define RC_BANDING
#define RC_SCALING
#define RC_BITMAP64
#define RC_GDI20_OUTPUT
#define RC_GDI20_STATE
#define RC_SAVEBITMAP
#define RC_DI_BITMAP
#define RC_PALETTE
#define RC_DIBTODEV
#define RC_BIGFONT
#define RC_STRETCHBLT
#define RC_FLOODFILL
#define RC_STRETCHDIB
#define RC_OP_DX_OUTPUT
#define RC_DEVBITS

#define SB_NONE
#define SB_CONST_ALPHA
#define SB_PIXEL_ALPHA
#define SB_PREMULT_ALPHA

#define SB_GRAD_RECT
#define SB_GRAD_TRI

#define CM_NONE
#define CM_DEVICE_ICM
#define CM_GAMMA_RAMP
#define CM_CMYK_COLOR

#define DIB_RGB_COLORS
#define DIB_PAL_COLORS

#define SYSPAL_ERROR
#define SYSPAL_STATIC
#define SYSPAL_NOSTATIC
#define SYSPAL_NOSTATIC256

#define CBM_INIT

#define FLOODFILLBORDER
#define FLOODFILLSURFACE

#define CCHDEVICENAME

#define CCHFORMNAME


  typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;

  typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      __extension__ struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;

  typedef DEVMODEA DEVMODE;
  typedef PDEVMODEA PDEVMODE;
  typedef NPDEVMODEA NPDEVMODE;
  typedef LPDEVMODEA LPDEVMODE;


#define DM_SPECVERSION

#define DM_ORIENTATION
#define DM_PAPERSIZE
#define DM_PAPERLENGTH
#define DM_PAPERWIDTH
#define DM_SCALE
#define DM_POSITION
#define DM_NUP
#define DM_DISPLAYORIENTATION
#define DM_COPIES
#define DM_DEFAULTSOURCE
#define DM_PRINTQUALITY
#define DM_COLOR
#define DM_DUPLEX
#define DM_YRESOLUTION
#define DM_TTOPTION
#define DM_COLLATE
#define DM_FORMNAME
#define DM_LOGPIXELS
#define DM_BITSPERPEL
#define DM_PELSWIDTH
#define DM_PELSHEIGHT
#define DM_DISPLAYFLAGS
#define DM_DISPLAYFREQUENCY
#define DM_ICMMETHOD
#define DM_ICMINTENT
#define DM_MEDIATYPE
#define DM_DITHERTYPE
#define DM_PANNINGWIDTH
#define DM_PANNINGHEIGHT
#define DM_DISPLAYFIXEDOUTPUT

#define DMORIENT_PORTRAIT
#define DMORIENT_LANDSCAPE

#define DMPAPER_FIRST
#define DMPAPER_LETTER
#define DMPAPER_LETTERSMALL
#define DMPAPER_TABLOID
#define DMPAPER_LEDGER
#define DMPAPER_LEGAL
#define DMPAPER_STATEMENT
#define DMPAPER_EXECUTIVE
#define DMPAPER_A3
#define DMPAPER_A4
#define DMPAPER_A4SMALL
#define DMPAPER_A5
#define DMPAPER_B4
#define DMPAPER_B5
#define DMPAPER_FOLIO
#define DMPAPER_QUARTO
#define DMPAPER_10X14
#define DMPAPER_11X17
#define DMPAPER_NOTE
#define DMPAPER_ENV_9
#define DMPAPER_ENV_10
#define DMPAPER_ENV_11
#define DMPAPER_ENV_12
#define DMPAPER_ENV_14
#define DMPAPER_CSHEET
#define DMPAPER_DSHEET
#define DMPAPER_ESHEET
#define DMPAPER_ENV_DL
#define DMPAPER_ENV_C5
#define DMPAPER_ENV_C3
#define DMPAPER_ENV_C4
#define DMPAPER_ENV_C6
#define DMPAPER_ENV_C65
#define DMPAPER_ENV_B4
#define DMPAPER_ENV_B5
#define DMPAPER_ENV_B6
#define DMPAPER_ENV_ITALY
#define DMPAPER_ENV_MONARCH
#define DMPAPER_ENV_PERSONAL
#define DMPAPER_FANFOLD_US
#define DMPAPER_FANFOLD_STD_GERMAN
#define DMPAPER_FANFOLD_LGL_GERMAN
#define DMPAPER_ISO_B4
#define DMPAPER_JAPANESE_POSTCARD
#define DMPAPER_9X11
#define DMPAPER_10X11
#define DMPAPER_15X11
#define DMPAPER_ENV_INVITE
#define DMPAPER_RESERVED_48
#define DMPAPER_RESERVED_49
#define DMPAPER_LETTER_EXTRA
#define DMPAPER_LEGAL_EXTRA
#define DMPAPER_TABLOID_EXTRA
#define DMPAPER_A4_EXTRA
#define DMPAPER_LETTER_TRANSVERSE
#define DMPAPER_A4_TRANSVERSE
#define DMPAPER_LETTER_EXTRA_TRANSVERSE
#define DMPAPER_A_PLUS
#define DMPAPER_B_PLUS
#define DMPAPER_LETTER_PLUS
#define DMPAPER_A4_PLUS
#define DMPAPER_A5_TRANSVERSE
#define DMPAPER_B5_TRANSVERSE
#define DMPAPER_A3_EXTRA
#define DMPAPER_A5_EXTRA
#define DMPAPER_B5_EXTRA
#define DMPAPER_A2
#define DMPAPER_A3_TRANSVERSE
#define DMPAPER_A3_EXTRA_TRANSVERSE
#define DMPAPER_DBL_JAPANESE_POSTCARD
#define DMPAPER_A6
#define DMPAPER_JENV_KAKU2
#define DMPAPER_JENV_KAKU3
#define DMPAPER_JENV_CHOU3
#define DMPAPER_JENV_CHOU4
#define DMPAPER_LETTER_ROTATED
#define DMPAPER_A3_ROTATED
#define DMPAPER_A4_ROTATED
#define DMPAPER_A5_ROTATED
#define DMPAPER_B4_JIS_ROTATED
#define DMPAPER_B5_JIS_ROTATED
#define DMPAPER_JAPANESE_POSTCARD_ROTATED
#define DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED
#define DMPAPER_A6_ROTATED
#define DMPAPER_JENV_KAKU2_ROTATED
#define DMPAPER_JENV_KAKU3_ROTATED
#define DMPAPER_JENV_CHOU3_ROTATED
#define DMPAPER_JENV_CHOU4_ROTATED
#define DMPAPER_B6_JIS
#define DMPAPER_B6_JIS_ROTATED
#define DMPAPER_12X11
#define DMPAPER_JENV_YOU4
#define DMPAPER_JENV_YOU4_ROTATED
#define DMPAPER_P16K
#define DMPAPER_P32K
#define DMPAPER_P32KBIG
#define DMPAPER_PENV_1
#define DMPAPER_PENV_2
#define DMPAPER_PENV_3
#define DMPAPER_PENV_4
#define DMPAPER_PENV_5
#define DMPAPER_PENV_6
#define DMPAPER_PENV_7
#define DMPAPER_PENV_8
#define DMPAPER_PENV_9
#define DMPAPER_PENV_10
#define DMPAPER_P16K_ROTATED
#define DMPAPER_P32K_ROTATED
#define DMPAPER_P32KBIG_ROTATED
#define DMPAPER_PENV_1_ROTATED
#define DMPAPER_PENV_2_ROTATED
#define DMPAPER_PENV_3_ROTATED
#define DMPAPER_PENV_4_ROTATED
#define DMPAPER_PENV_5_ROTATED
#define DMPAPER_PENV_6_ROTATED
#define DMPAPER_PENV_7_ROTATED
#define DMPAPER_PENV_8_ROTATED
#define DMPAPER_PENV_9_ROTATED
#define DMPAPER_PENV_10_ROTATED

#define DMPAPER_LAST

#define DMPAPER_USER

#define DMBIN_FIRST
#define DMBIN_UPPER
#define DMBIN_ONLYONE
#define DMBIN_LOWER
#define DMBIN_MIDDLE
#define DMBIN_MANUAL
#define DMBIN_ENVELOPE
#define DMBIN_ENVMANUAL
#define DMBIN_AUTO
#define DMBIN_TRACTOR
#define DMBIN_SMALLFMT
#define DMBIN_LARGEFMT
#define DMBIN_LARGECAPACITY
#define DMBIN_CASSETTE
#define DMBIN_FORMSOURCE
#define DMBIN_LAST

#define DMBIN_USER

#define DMRES_DRAFT
#define DMRES_LOW
#define DMRES_MEDIUM
#define DMRES_HIGH

#define DMCOLOR_MONOCHROME
#define DMCOLOR_COLOR

#define DMDUP_SIMPLEX
#define DMDUP_VERTICAL
#define DMDUP_HORIZONTAL

#define DMTT_BITMAP
#define DMTT_DOWNLOAD
#define DMTT_SUBDEV
#define DMTT_DOWNLOAD_OUTLINE

#define DMCOLLATE_FALSE
#define DMCOLLATE_TRUE

#define DMDO_DEFAULT
#define DMDO_90
#define DMDO_180
#define DMDO_270

#define DMDFO_DEFAULT
#define DMDFO_STRETCH
#define DMDFO_CENTER

#define DM_INTERLACED
#define DMDISPLAYFLAGS_TEXTMODE

#define DMNUP_SYSTEM
#define DMNUP_ONEUP

#define DMICMMETHOD_NONE
#define DMICMMETHOD_SYSTEM
#define DMICMMETHOD_DRIVER
#define DMICMMETHOD_DEVICE

#define DMICMMETHOD_USER

#define DMICM_SATURATE
#define DMICM_CONTRAST
#define DMICM_COLORIMETRIC
#define DMICM_ABS_COLORIMETRIC

#define DMICM_USER

#define DMMEDIA_STANDARD
#define DMMEDIA_TRANSPARENCY
#define DMMEDIA_GLOSSY

#define DMMEDIA_USER

#define DMDITHER_NONE
#define DMDITHER_COARSE
#define DMDITHER_FINE
#define DMDITHER_LINEART
#define DMDITHER_ERRORDIFFUSION
#define DMDITHER_RESERVED6
#define DMDITHER_RESERVED7
#define DMDITHER_RESERVED8
#define DMDITHER_RESERVED9
#define DMDITHER_GRAYSCALE

#define DMDITHER_USER


  typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
  } DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;

  typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
  } DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;

  typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
  typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
  typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;


#define DISPLAY_DEVICE_ATTACHED_TO_DESKTOP
#define DISPLAY_DEVICE_MULTI_DRIVER
#define DISPLAY_DEVICE_PRIMARY_DEVICE
#define DISPLAY_DEVICE_MIRRORING_DRIVER
#define DISPLAY_DEVICE_VGA_COMPATIBLE
#define DISPLAY_DEVICE_REMOVABLE



#define DISPLAY_DEVICE_TS_COMPATIBLE



#define DISPLAY_DEVICE_MODESPRUNED
#define DISPLAY_DEVICE_REMOTE
#define DISPLAY_DEVICE_DISCONNECT

#define DISPLAY_DEVICE_ACTIVE
#define DISPLAY_DEVICE_ATTACHED
# 2312 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 3
#define RDH_RECTANGLES


  typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
  } RGNDATAHEADER,*PRGNDATAHEADER;

  typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
  } RGNDATA,*PRGNDATA,*NPRGNDATA,*LPRGNDATA;


#define SYSRGN


  typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
  } ABC,*PABC,*NPABC,*LPABC;

  typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
  } ABCFLOAT,*PABCFLOAT,*NPABCFLOAT,*LPABCFLOAT;





  typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*NPOUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;

  typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*NPOUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;

  typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
  typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
  typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
  typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;




  typedef struct tagPOLYTEXTA {
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTA,*PPOLYTEXTA,*NPPOLYTEXTA,*LPPOLYTEXTA;

  typedef struct tagPOLYTEXTW {
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTW,*PPOLYTEXTW,*NPPOLYTEXTW,*LPPOLYTEXTW;

  typedef POLYTEXTA POLYTEXT;
  typedef PPOLYTEXTA PPOLYTEXT;
  typedef NPPOLYTEXTA NPPOLYTEXT;
  typedef LPPOLYTEXTA LPPOLYTEXT;



  typedef struct _FIXED {
    WORD fract;
    short value;
  } FIXED;

  typedef struct _MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
  } MAT2,*LPMAT2;

  typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
  } GLYPHMETRICS,*LPGLYPHMETRICS;


#define GGO_METRICS
#define GGO_BITMAP
#define GGO_NATIVE
#define GGO_BEZIER
#define GGO_GRAY2_BITMAP
#define GGO_GRAY4_BITMAP
#define GGO_GRAY8_BITMAP
#define GGO_GLYPH_INDEX
#define GGO_UNHINTED

#define TT_POLYGON_TYPE

#define TT_PRIM_LINE
#define TT_PRIM_QSPLINE
#define TT_PRIM_CSPLINE


  typedef struct tagPOINTFX {
    FIXED x;
    FIXED y;
  } POINTFX,*LPPOINTFX;

  typedef struct tagTTPOLYCURVE {
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
  } TTPOLYCURVE,*LPTTPOLYCURVE;

  typedef struct tagTTPOLYGONHEADER {
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
  } TTPOLYGONHEADER,*LPTTPOLYGONHEADER;


#define GCP_DBCS
#define GCP_REORDER
#define GCP_USEKERNING
#define GCP_GLYPHSHAPE
#define GCP_LIGATE
#define GCP_DIACRITIC
#define GCP_KASHIDA
#define GCP_ERROR
#define FLI_MASK

#define GCP_JUSTIFY
#define FLI_GLYPHS
#define GCP_CLASSIN
#define GCP_MAXEXTENT
#define GCP_JUSTIFYIN
#define GCP_DISPLAYZWG
#define GCP_SYMSWAPOFF
#define GCP_NUMERICOVERRIDE
#define GCP_NEUTRALOVERRIDE
#define GCP_NUMERICSLATIN
#define GCP_NUMERICSLOCAL

#define GCPCLASS_LATIN
#define GCPCLASS_HEBREW
#define GCPCLASS_ARABIC
#define GCPCLASS_NEUTRAL
#define GCPCLASS_LOCALNUMBER
#define GCPCLASS_LATINNUMBER
#define GCPCLASS_LATINNUMERICTERMINATOR
#define GCPCLASS_LATINNUMERICSEPARATOR
#define GCPCLASS_NUMERICSEPARATOR
#define GCPCLASS_PREBOUNDLTR
#define GCPCLASS_PREBOUNDRTL
#define GCPCLASS_POSTBOUNDLTR
#define GCPCLASS_POSTBOUNDRTL

#define GCPGLYPH_LINKBEFORE
#define GCPGLYPH_LINKAFTER


  typedef struct tagGCP_RESULTSA {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSA,*LPGCP_RESULTSA;
  typedef struct tagGCP_RESULTSW {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSW,*LPGCP_RESULTSW;

  typedef GCP_RESULTSA GCP_RESULTS;
  typedef LPGCP_RESULTSA LPGCP_RESULTS;

  typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
  } RASTERIZER_STATUS,*LPRASTERIZER_STATUS;


#define TT_AVAILABLE
#define TT_ENABLED


  typedef struct tagPIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
  } PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;


#define PFD_TYPE_RGBA
#define PFD_TYPE_COLORINDEX

#define PFD_MAIN_PLANE
#define PFD_OVERLAY_PLANE
#define PFD_UNDERLAY_PLANE

#define PFD_DOUBLEBUFFER
#define PFD_STEREO
#define PFD_DRAW_TO_WINDOW
#define PFD_DRAW_TO_BITMAP
#define PFD_SUPPORT_GDI
#define PFD_SUPPORT_OPENGL
#define PFD_GENERIC_FORMAT
#define PFD_NEED_PALETTE
#define PFD_NEED_SYSTEM_PALETTE
#define PFD_SWAP_EXCHANGE
#define PFD_SWAP_COPY
#define PFD_SWAP_LAYER_BUFFERS
#define PFD_GENERIC_ACCELERATED
#define PFD_SUPPORT_DIRECTDRAW
#define PFD_DIRECT3D_ACCELERATED
#define PFD_SUPPORT_COMPOSITION

#define PFD_DEPTH_DONTCARE
#define PFD_DOUBLEBUFFER_DONTCARE
#define PFD_STEREO_DONTCARE



  typedef int ( *OLDFONTENUMPROCA)(const LOGFONTA *,const TEXTMETRICA *,DWORD,LPARAM);
  typedef int ( *OLDFONTENUMPROCW)(const LOGFONTW *,const TEXTMETRICW *,DWORD,LPARAM);

#define OLDFONTENUMPROC







  typedef OLDFONTENUMPROCA FONTENUMPROCA;
  typedef OLDFONTENUMPROCW FONTENUMPROCW;

  typedef FONTENUMPROCA FONTENUMPROC;

  typedef int ( *GOBJENUMPROC)(LPVOID,LPARAM);
  typedef void ( *LINEDDAPROC)(int,int,LPARAM);

#define AddFontResource
#define CopyMetaFile
#define CreateDC
#define CreateFontIndirect
#define CreateFont
#define CreateIC
#define CreateMetaFile
#define CreateScalableFontResource


  __attribute__((dllimport)) int AddFontResourceA(LPCSTR);
  __attribute__((dllimport)) int AddFontResourceW(LPCWSTR);
  __attribute__((dllimport)) WINBOOL AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,const PALETTEENTRY *ppe);
  __attribute__((dllimport)) WINBOOL Arc(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
  __attribute__((dllimport)) WINBOOL BitBlt(HDC hdc,int x,int y,int cx,int cy,HDC hdcSrc,int x1,int y1,DWORD rop);
  __attribute__((dllimport)) WINBOOL CancelDC(HDC hdc);
  __attribute__((dllimport)) WINBOOL Chord(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
  __attribute__((dllimport)) int ChoosePixelFormat(HDC hdc,const PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) HMETAFILE CloseMetaFile(HDC hdc);
  __attribute__((dllimport)) int CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode);
  __attribute__((dllimport)) HMETAFILE CopyMetaFileA(HMETAFILE,LPCSTR);
  __attribute__((dllimport)) HMETAFILE CopyMetaFileW(HMETAFILE,LPCWSTR);
  __attribute__((dllimport)) HBITMAP CreateBitmap(int nWidth,int nHeight,UINT nPlanes,UINT nBitCount,const void *lpBits);
  __attribute__((dllimport)) HBITMAP CreateBitmapIndirect(const BITMAP *pbm);
  __attribute__((dllimport)) HBRUSH CreateBrushIndirect(const LOGBRUSH *plbrush);
  __attribute__((dllimport)) HBITMAP CreateCompatibleBitmap(HDC hdc,int cx,int cy);
  __attribute__((dllimport)) HBITMAP CreateDiscardableBitmap(HDC hdc,int cx,int cy);
  __attribute__((dllimport)) HDC CreateCompatibleDC(HDC hdc);
  __attribute__((dllimport)) HDC CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
  __attribute__((dllimport)) HDC CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
  __attribute__((dllimport)) HBITMAP CreateDIBitmap(HDC hdc,const BITMAPINFOHEADER *pbmih,DWORD flInit,const void *pjBits,const BITMAPINFO *pbmi,UINT iUsage);
  __attribute__((dllimport)) HBRUSH CreateDIBPatternBrush(HGLOBAL h,UINT iUsage);
  __attribute__((dllimport)) HBRUSH CreateDIBPatternBrushPt(const void *lpPackedDIB,UINT iUsage);
  __attribute__((dllimport)) HRGN CreateEllipticRgn(int x1,int y1,int x2,int y2);
  __attribute__((dllimport)) HRGN CreateEllipticRgnIndirect(const RECT *lprect);
  __attribute__((dllimport)) HFONT CreateFontIndirectA(const LOGFONTA *lplf);
  __attribute__((dllimport)) HFONT CreateFontIndirectW(const LOGFONTW *lplf);
  __attribute__((dllimport)) HFONT CreateFontA(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName);
  __attribute__((dllimport)) HFONT CreateFontW(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName);
  __attribute__((dllimport)) HBRUSH CreateHatchBrush(int iHatch,COLORREF color);
  __attribute__((dllimport)) HDC CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
  __attribute__((dllimport)) HDC CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
  __attribute__((dllimport)) HDC CreateMetaFileA(LPCSTR pszFile);
  __attribute__((dllimport)) HDC CreateMetaFileW(LPCWSTR pszFile);
  __attribute__((dllimport)) HPALETTE CreatePalette(const LOGPALETTE *plpal);
  __attribute__((dllimport)) HPEN CreatePen(int iStyle,int cWidth,COLORREF color);
  __attribute__((dllimport)) HPEN CreatePenIndirect(const LOGPEN *plpen);
  __attribute__((dllimport)) HRGN CreatePolyPolygonRgn(const POINT *pptl,const INT *pc,int cPoly,int iMode);
  __attribute__((dllimport)) HBRUSH CreatePatternBrush(HBITMAP hbm);
  __attribute__((dllimport)) HRGN CreateRectRgn(int x1,int y1,int x2,int y2);
  __attribute__((dllimport)) HRGN CreateRectRgnIndirect(const RECT *lprect);
  __attribute__((dllimport)) HRGN CreateRoundRectRgn(int x1,int y1,int x2,int y2,int w,int h);
  __attribute__((dllimport)) WINBOOL CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath);
  __attribute__((dllimport)) WINBOOL CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath);
  __attribute__((dllimport)) HBRUSH CreateSolidBrush(COLORREF color);
  __attribute__((dllimport)) WINBOOL DeleteDC(HDC hdc);
  __attribute__((dllimport)) WINBOOL DeleteMetaFile(HMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL DeleteObject(HGDIOBJ ho);
  __attribute__((dllimport)) int DescribePixelFormat(HDC hdc,int iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd);

  typedef UINT ( *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
  typedef DWORD ( *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);


#define DM_UPDATE
#define DM_COPY
#define DM_PROMPT
#define DM_MODIFY

#define DM_IN_BUFFER
#define DM_IN_PROMPT
#define DM_OUT_BUFFER
#define DM_OUT_DEFAULT

#define DC_FIELDS
#define DC_PAPERS
#define DC_PAPERSIZE
#define DC_MINEXTENT
#define DC_MAXEXTENT
#define DC_BINS
#define DC_DUPLEX
#define DC_SIZE
#define DC_EXTRA
#define DC_VERSION
#define DC_DRIVER
#define DC_BINNAMES
#define DC_ENUMRESOLUTIONS
#define DC_FILEDEPENDENCIES
#define DC_TRUETYPE
#define DC_PAPERNAMES
#define DC_ORIENTATION
#define DC_COPIES
#define DC_BINADJUST
#define DC_EMF_COMPLIANT
#define DC_DATATYPE_PRODUCED
#define DC_COLLATE
#define DC_MANUFACTURER
#define DC_MODEL
#define DC_PERSONALITY
#define DC_PRINTRATE
#define DC_PRINTRATEUNIT
#define PRINTRATEUNIT_PPM
#define PRINTRATEUNIT_CPS
#define PRINTRATEUNIT_LPM
#define PRINTRATEUNIT_IPM
#define DC_PRINTERMEM
#define DC_MEDIAREADY
#define DC_STAPLE
#define DC_PRINTRATEPPM
#define DC_COLORDEVICE
#define DC_NUP
#define DC_MEDIATYPENAMES
#define DC_MEDIATYPES

#define DCTT_BITMAP
#define DCTT_DOWNLOAD
#define DCTT_SUBDEV
#define DCTT_DOWNLOAD_OUTLINE

#define DCBA_FACEUPNONE
#define DCBA_FACEUPCENTER
#define DCBA_FACEUPLEFT
#define DCBA_FACEUPRIGHT
#define DCBA_FACEDOWNNONE
#define DCBA_FACEDOWNCENTER
#define DCBA_FACEDOWNLEFT
#define DCBA_FACEDOWNRIGHT


#define DeviceCapabilities
#define EnumFontFamiliesEx
#define EnumFontFamilies
#define EnumFonts
#define GetCharWidth
#define GetCharWidth32
#define GetCharWidthFloat
#define GetCharABCWidths
#define GetCharABCWidthsFloat
#define GetGlyphOutline
#define GetMetaFile

  __attribute__((dllimport)) int DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,const DEVMODEA *pDevMode);
  __attribute__((dllimport)) int DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,const DEVMODEW *pDevMode);
  __attribute__((dllimport)) int DrawEscape(HDC hdc,int iEscape,int cjIn,LPCSTR lpIn);
  __attribute__((dllimport)) WINBOOL Ellipse(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) int EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags);
  __attribute__((dllimport)) int EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags);
  __attribute__((dllimport)) int EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) int EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) int EnumObjects(HDC hdc,int nType,GOBJENUMPROC lpFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL EqualRgn(HRGN hrgn1,HRGN hrgn2);
  __attribute__((dllimport)) int Escape(HDC hdc,int iEscape,int cjIn,LPCSTR pvIn,LPVOID pvOut);
  __attribute__((dllimport)) int ExtEscape(HDC hdc,int iEscape,int cjInput,LPCSTR lpInData,int cjOutput,LPSTR lpOutData);
  __attribute__((dllimport)) int ExcludeClipRect(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) HRGN ExtCreateRegion(const XFORM *lpx,DWORD nCount,const RGNDATA *lpData);
  __attribute__((dllimport)) WINBOOL ExtFloodFill(HDC hdc,int x,int y,COLORREF color,UINT type);
  __attribute__((dllimport)) WINBOOL FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr);
  __attribute__((dllimport)) WINBOOL FloodFill(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,int w,int h);
  __attribute__((dllimport)) int GetROP2(HDC hdc);
  __attribute__((dllimport)) WINBOOL GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) COLORREF GetBkColor(HDC hdc);
  __attribute__((dllimport)) COLORREF GetDCBrushColor(HDC hdc);
  __attribute__((dllimport)) COLORREF GetDCPenColor(HDC hdc);
  __attribute__((dllimport)) int GetBkMode(HDC hdc);
  __attribute__((dllimport)) LONG GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits);
  __attribute__((dllimport)) WINBOOL GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize);
  __attribute__((dllimport)) UINT GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags);
  __attribute__((dllimport)) WINBOOL GetBrushOrgEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  __attribute__((dllimport)) WINBOOL GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  __attribute__((dllimport)) WINBOOL GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  __attribute__((dllimport)) WINBOOL GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  __attribute__((dllimport)) WINBOOL GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  __attribute__((dllimport)) int GetClipBox(HDC hdc,LPRECT lprect);
  __attribute__((dllimport)) int GetClipRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) int GetMetaRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) HGDIOBJ GetCurrentObject(HDC hdc,UINT type);
  __attribute__((dllimport)) WINBOOL GetCurrentPositionEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) int GetDeviceCaps(HDC hdc,int index);
  __attribute__((dllimport)) int GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage);
  __attribute__((dllimport)) DWORD GetFontData (HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer);
  __attribute__((dllimport)) DWORD GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
  __attribute__((dllimport)) DWORD GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
  __attribute__((dllimport)) int GetGraphicsMode(HDC hdc);
  __attribute__((dllimport)) int GetMapMode(HDC hdc);
  __attribute__((dllimport)) UINT GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData);
  __attribute__((dllimport)) HMETAFILE GetMetaFileA(LPCSTR lpName);
  __attribute__((dllimport)) HMETAFILE GetMetaFileW(LPCWSTR lpName);
  __attribute__((dllimport)) COLORREF GetNearestColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) UINT GetNearestPaletteIndex(HPALETTE h,COLORREF color);
  __attribute__((dllimport)) DWORD GetObjectType(HGDIOBJ h);



#define GetOutlineTextMetrics

  __attribute__((dllimport)) UINT GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm);
  __attribute__((dllimport)) UINT GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm);


#define GetTextExtentPoint
#define GetTextExtentPoint32
#define GetTextExtentExPoint
#define GetCharacterPlacement

  __attribute__((dllimport)) UINT GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  __attribute__((dllimport)) COLORREF GetPixel(HDC hdc,int x,int y);
  __attribute__((dllimport)) int GetPixelFormat(HDC hdc);
  __attribute__((dllimport)) int GetPolyFillMode(HDC hdc);
  __attribute__((dllimport)) WINBOOL GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes);
  __attribute__((dllimport)) int GetRandomRgn (HDC hdc,HRGN hrgn,INT i);
  __attribute__((dllimport)) DWORD GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData);
  __attribute__((dllimport)) int GetRgnBox(HRGN hrgn,LPRECT lprc);
  __attribute__((dllimport)) HGDIOBJ GetStockObject(int i);
  __attribute__((dllimport)) int GetStretchBltMode(HDC hdc);
  __attribute__((dllimport)) UINT GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  __attribute__((dllimport)) UINT GetSystemPaletteUse(HDC hdc);
  __attribute__((dllimport)) int GetTextCharacterExtra(HDC hdc);
  __attribute__((dllimport)) UINT GetTextAlign(HDC hdc);
  __attribute__((dllimport)) COLORREF GetTextColor(HDC hdc);
  __attribute__((dllimport)) WINBOOL GetTextExtentPointA(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL GetTextExtentPointW(HDC hdc,LPCWSTR lpString,int c,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl);
  __attribute__((dllimport)) WINBOOL GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,int c,LPSIZE psizl);
  __attribute__((dllimport)) WINBOOL GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) WINBOOL GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) int GetTextCharset(HDC hdc);
  __attribute__((dllimport)) int GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL TranslateCharsetInfo(DWORD *lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags);
  __attribute__((dllimport)) DWORD GetFontLanguageInfo(HDC hdc);
  __attribute__((dllimport)) DWORD GetCharacterPlacementA(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags);
  __attribute__((dllimport)) DWORD GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags);

  typedef struct tagWCRANGE {
    WCHAR wcLow;
    USHORT cGlyphs;
  } WCRANGE,*PWCRANGE,*LPWCRANGE;

  typedef struct tagGLYPHSET {
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
  } GLYPHSET,*PGLYPHSET,*LPGLYPHSET;

#define GS_8BIT_INDICES

#define GGI_MARK_NONEXISTING_GLYPHS

#define GetGlyphIndices

  __attribute__((dllimport)) DWORD GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs);
  __attribute__((dllimport)) DWORD GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl);
  __attribute__((dllimport)) DWORD GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,int c,LPWORD pgi,DWORD fl);
  __attribute__((dllimport)) WINBOOL GetTextExtentPointI(HDC hdc,LPWORD pgiIn,int cgi,LPSIZE psize);
  __attribute__((dllimport)) WINBOOL GetTextExtentExPointI (HDC hdc,LPWORD lpwszString,int cwchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) WINBOOL GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths);
  __attribute__((dllimport)) WINBOOL GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc);

#define STAMP_DESIGNVECTOR
#define STAMP_AXESLIST
#define MM_MAX_NUMAXES

  typedef struct tagDESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
  } DESIGNVECTOR,*PDESIGNVECTOR,*LPDESIGNVECTOR;

#define AddFontResourceEx
#define RemoveFontResourceEx

  __attribute__((dllimport)) int AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res);
  __attribute__((dllimport)) int AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res);
  __attribute__((dllimport)) WINBOOL RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv);
  __attribute__((dllimport)) WINBOOL RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv);
  __attribute__((dllimport)) HANDLE AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD *pNumFonts);
  __attribute__((dllimport)) WINBOOL RemoveFontMemResourceEx(HANDLE h);

#define FR_PRIVATE
#define FR_NOT_ENUM

#define MM_MAX_AXES_NAMELEN

  typedef struct tagAXISINFOA {
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
  } AXISINFOA,*PAXISINFOA,*LPAXISINFOA;

  typedef struct tagAXISINFOW {
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
  } AXISINFOW,*PAXISINFOW,*LPAXISINFOW;

  typedef AXISINFOA AXISINFO;
  typedef PAXISINFOA PAXISINFO;
  typedef LPAXISINFOA LPAXISINFO;

  typedef struct tagAXESLISTA {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
  } AXESLISTA,*PAXESLISTA,*LPAXESLISTA;

  typedef struct tagAXESLISTW {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
  } AXESLISTW,*PAXESLISTW,*LPAXESLISTW;

  typedef AXESLISTA AXESLIST;
  typedef PAXESLISTA PAXESLIST;
  typedef LPAXESLISTA LPAXESLIST;

  typedef struct tagENUMLOGFONTEXDVA {
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVA,*PENUMLOGFONTEXDVA,*LPENUMLOGFONTEXDVA;

  typedef struct tagENUMLOGFONTEXDVW {
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVW,*PENUMLOGFONTEXDVW,*LPENUMLOGFONTEXDVW;

  typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
  typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
  typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;

#define CreateFontIndirectEx

  __attribute__((dllimport)) HFONT CreateFontIndirectExA(const ENUMLOGFONTEXDVA *);
  __attribute__((dllimport)) HFONT CreateFontIndirectExW(const ENUMLOGFONTEXDVW *);


  typedef struct tagENUMTEXTMETRICA {
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
  } ENUMTEXTMETRICA,*PENUMTEXTMETRICA,*LPENUMTEXTMETRICA;
  typedef struct tagENUMTEXTMETRICW
  {
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
  } ENUMTEXTMETRICW,*PENUMTEXTMETRICW,*LPENUMTEXTMETRICW;

  typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
  typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
  typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;


#define ResetDC
#define RemoveFontResource

  __attribute__((dllimport)) WINBOOL GetViewportExtEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) WINBOOL GetViewportOrgEx(HDC hdc,LPPOINT lppoint);
  __attribute__((dllimport)) WINBOOL GetWindowExtEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) WINBOOL GetWindowOrgEx(HDC hdc,LPPOINT lppoint);
  __attribute__((dllimport)) int IntersectClipRect(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) WINBOOL InvertRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) WINBOOL LineDDA(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data);
  __attribute__((dllimport)) WINBOOL LineTo(HDC hdc,int x,int y);
  __attribute__((dllimport)) WINBOOL MaskBlt(HDC hdcDest,int xDest,int yDest,int width,int height,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD rop);
  __attribute__((dllimport)) WINBOOL PlgBlt(HDC hdcDest,const POINT *lpPoint,HDC hdcSrc,int xSrc,int ySrc,int width,int height,HBITMAP hbmMask,int xMask,int yMask);
  __attribute__((dllimport)) int OffsetClipRgn(HDC hdc,int x,int y);
  __attribute__((dllimport)) int OffsetRgn(HRGN hrgn,int x,int y);
  __attribute__((dllimport)) WINBOOL PatBlt(HDC hdc,int x,int y,int w,int h,DWORD rop);
  __attribute__((dllimport)) WINBOOL Pie(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
  __attribute__((dllimport)) WINBOOL PlayMetaFile(HDC hdc,HMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL PaintRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) WINBOOL PolyPolygon(HDC hdc,const POINT *apt,const INT *asz,int csz);
  __attribute__((dllimport)) WINBOOL PtInRegion(HRGN hrgn,int x,int y);
  __attribute__((dllimport)) WINBOOL PtVisible(HDC hdc,int x,int y);
  __attribute__((dllimport)) WINBOOL RectInRegion(HRGN hrgn,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL RectVisible(HDC hdc,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL Rectangle(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) WINBOOL RestoreDC(HDC hdc,int nSavedDC);
  __attribute__((dllimport)) HDC ResetDCA(HDC hdc,const DEVMODEA *lpdm);
  __attribute__((dllimport)) HDC ResetDCW(HDC hdc,const DEVMODEW *lpdm);
  __attribute__((dllimport)) UINT RealizePalette(HDC hdc);
  __attribute__((dllimport)) WINBOOL RemoveFontResourceA(LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL RemoveFontResourceW(LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL RoundRect(HDC hdc,int left,int top,int right,int bottom,int width,int height);
  __attribute__((dllimport)) WINBOOL ResizePalette(HPALETTE hpal,UINT n);
  __attribute__((dllimport)) int SaveDC(HDC hdc);
  __attribute__((dllimport)) int SelectClipRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) int ExtSelectClipRgn(HDC hdc,HRGN hrgn,int mode);
  __attribute__((dllimport)) int SetMetaRgn(HDC hdc);
  __attribute__((dllimport)) HGDIOBJ SelectObject(HDC hdc,HGDIOBJ h);
  __attribute__((dllimport)) HPALETTE SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd);
  __attribute__((dllimport)) COLORREF SetBkColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) COLORREF SetDCBrushColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) COLORREF SetDCPenColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) int SetBkMode(HDC hdc,int mode);
  __attribute__((dllimport)) LONG SetBitmapBits(HBITMAP hbm,DWORD cb,const void *pvBits);
  __attribute__((dllimport)) UINT SetBoundsRect(HDC hdc,const RECT *lprect,UINT flags);
  __attribute__((dllimport)) int SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,const void *lpBits,const BITMAPINFO *lpbmi,UINT ColorUse);
  __attribute__((dllimport)) int SetDIBitsToDevice(HDC hdc,int xDest,int yDest,DWORD w,DWORD h,int xSrc,int ySrc,UINT StartScan,UINT cLines,const void *lpvBits,const BITMAPINFO *lpbmi,UINT ColorUse);
  __attribute__((dllimport)) DWORD SetMapperFlags(HDC hdc,DWORD flags);
  __attribute__((dllimport)) int SetGraphicsMode(HDC hdc,int iMode);
  __attribute__((dllimport)) int SetMapMode(HDC hdc,int iMode);
  __attribute__((dllimport)) DWORD SetLayout(HDC hdc,DWORD l);
  __attribute__((dllimport)) DWORD GetLayout(HDC hdc);
  __attribute__((dllimport)) HMETAFILE SetMetaFileBitsEx(UINT cbBuffer,const BYTE *lpData);
  __attribute__((dllimport)) UINT SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,const PALETTEENTRY *pPalEntries);
  __attribute__((dllimport)) COLORREF SetPixel(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL SetPixelV(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL SetPixelFormat(HDC hdc,int format,const PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) int SetPolyFillMode(HDC hdc,int mode);
  __attribute__((dllimport)) WINBOOL StretchBlt(HDC hdcDest,int xDest,int yDest,int wDest,int hDest,HDC hdcSrc,int xSrc,int ySrc,int wSrc,int hSrc,DWORD rop);
  __attribute__((dllimport)) WINBOOL SetRectRgn(HRGN hrgn,int left,int top,int right,int bottom);
  __attribute__((dllimport)) int StretchDIBits(HDC hdc,int xDest,int yDest,int DestWidth,int DestHeight,int xSrc,int ySrc,int SrcWidth,int SrcHeight,const void *lpBits,const BITMAPINFO *lpbmi,UINT iUsage,DWORD rop);
  __attribute__((dllimport)) int SetROP2(HDC hdc,int rop2);
  __attribute__((dllimport)) int SetStretchBltMode(HDC hdc,int mode);
  __attribute__((dllimport)) UINT SetSystemPaletteUse(HDC hdc,UINT use);
  __attribute__((dllimport)) int SetTextCharacterExtra(HDC hdc,int extra);
  __attribute__((dllimport)) COLORREF SetTextColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) UINT SetTextAlign(HDC hdc,UINT align);
  __attribute__((dllimport)) WINBOOL SetTextJustification(HDC hdc,int extra,int count);
  __attribute__((dllimport)) WINBOOL UpdateColors(HDC hdc);
# 3124 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wingdi.h" 3
  typedef USHORT COLOR16;

  typedef struct _TRIVERTEX {
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
  } TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;


  typedef struct _GRADIENT_TRIANGLE {
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
  } GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

  typedef struct _GRADIENT_RECT {
    ULONG UpperLeft;
    ULONG LowerRight;
  } GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;


  typedef struct _BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
  } BLENDFUNCTION,*PBLENDFUNCTION;


#define AC_SRC_OVER
#define AC_SRC_ALPHA

  __attribute__((dllimport)) WINBOOL AlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
  __attribute__((dllimport)) WINBOOL GdiAlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
  __attribute__((dllimport)) WINBOOL TransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);
  __attribute__((dllimport)) WINBOOL GdiTransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);

#define GRADIENT_FILL_RECT_H
#define GRADIENT_FILL_RECT_V
#define GRADIENT_FILL_TRIANGLE
#define GRADIENT_FILL_OP_FLAG

  __attribute__((dllimport)) WINBOOL GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
  __attribute__((dllimport)) WINBOOL GdiGradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);



#define CopyEnhMetaFile
#define CreateEnhMetaFile
#define GetEnhMetaFile
#define GetEnhMetaFileDescription

  __attribute__((dllimport)) WINBOOL PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs);

  typedef int ( *MFENUMPROC)(HDC hdc,HANDLETABLE *lpht,METARECORD *lpMR,int nObj,LPARAM lParam);

  __attribute__((dllimport)) WINBOOL EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC lpProc,LPARAM lParam);

  typedef int ( *ENHMFENUMPROC)(HDC hdc,HANDLETABLE *lpht,const ENHMETARECORD *lpmr,int hHandles,LPARAM data);

  __attribute__((dllimport)) HENHMETAFILE CloseEnhMetaFile(HDC hdc);
  __attribute__((dllimport)) HENHMETAFILE CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName);
  __attribute__((dllimport)) HENHMETAFILE CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName);
  __attribute__((dllimport)) HDC CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,const RECT *lprc,LPCSTR lpDesc);
  __attribute__((dllimport)) HDC CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,const RECT *lprc,LPCWSTR lpDesc);
  __attribute__((dllimport)) WINBOOL DeleteEnhMetaFile(HENHMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC lpProc,LPVOID lpParam,const RECT *lpRect);
  __attribute__((dllimport)) HENHMETAFILE GetEnhMetaFileA(LPCSTR lpName);
  __attribute__((dllimport)) HENHMETAFILE GetEnhMetaFileW(LPCWSTR lpName);
  __attribute__((dllimport)) UINT GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData);
  __attribute__((dllimport)) UINT GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription);
  __attribute__((dllimport)) UINT GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription);
  __attribute__((dllimport)) UINT GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader);
  __attribute__((dllimport)) UINT GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries);
  __attribute__((dllimport)) UINT GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) UINT GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef);
  __attribute__((dllimport)) WINBOOL PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,const ENHMETARECORD *pmr,UINT cht);
  __attribute__((dllimport)) HENHMETAFILE SetEnhMetaFileBits(UINT nSize,const BYTE *pb);
  __attribute__((dllimport)) HENHMETAFILE SetWinMetaFileBits(UINT nSize,const BYTE *lpMeta16Data,HDC hdcRef,const METAFILEPICT *lpMFP);
  __attribute__((dllimport)) WINBOOL GdiComment(HDC hdc,UINT nSize,const BYTE *lpData);



#define GetTextMetrics

  __attribute__((dllimport)) WINBOOL GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm);
  __attribute__((dllimport)) WINBOOL GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm);


  typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
  } DIBSECTION,*LPDIBSECTION,*PDIBSECTION;

  __attribute__((dllimport)) WINBOOL AngleArc(HDC hdc,int x,int y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle);
  __attribute__((dllimport)) WINBOOL PolyPolyline(HDC hdc,const POINT *apt,const DWORD *asz,DWORD csz);
  __attribute__((dllimport)) WINBOOL GetWorldTransform(HDC hdc,LPXFORM lpxf);
  __attribute__((dllimport)) WINBOOL SetWorldTransform(HDC hdc,const XFORM *lpxf);
  __attribute__((dllimport)) WINBOOL ModifyWorldTransform(HDC hdc,const XFORM *lpxf,DWORD mode);
  __attribute__((dllimport)) WINBOOL CombineTransform(LPXFORM lpxfOut,const XFORM *lpxf1,const XFORM *lpxf2);
  __attribute__((dllimport)) HBITMAP CreateDIBSection(HDC hdc,const BITMAPINFO *lpbmi,UINT usage,void **ppvBits,HANDLE hSection,DWORD offset);
  __attribute__((dllimport)) UINT GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD *prgbq);
  __attribute__((dllimport)) UINT SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,const RGBQUAD *prgbq);

#define CA_NEGATIVE
#define CA_LOG_FILTER

#define ILLUMINANT_DEVICE_DEFAULT
#define ILLUMINANT_A
#define ILLUMINANT_B
#define ILLUMINANT_C
#define ILLUMINANT_D50
#define ILLUMINANT_D55
#define ILLUMINANT_D65
#define ILLUMINANT_D75
#define ILLUMINANT_F2
#define ILLUMINANT_MAX_INDEX

#define ILLUMINANT_TUNGSTEN
#define ILLUMINANT_DAYLIGHT
#define ILLUMINANT_FLUORESCENT
#define ILLUMINANT_NTSC

#define RGB_GAMMA_MIN
#define RGB_GAMMA_MAX

#define REFERENCE_WHITE_MIN
#define REFERENCE_WHITE_MAX
#define REFERENCE_BLACK_MIN
#define REFERENCE_BLACK_MAX

#define COLOR_ADJ_MIN
#define COLOR_ADJ_MAX

  typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
  } COLORADJUSTMENT,*PCOLORADJUSTMENT,*LPCOLORADJUSTMENT;

  __attribute__((dllimport)) WINBOOL SetColorAdjustment(HDC hdc,const COLORADJUSTMENT *lpca);
  __attribute__((dllimport)) WINBOOL GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca);
  __attribute__((dllimport)) HPALETTE CreateHalftonePalette(HDC hdc);

  typedef WINBOOL ( *ABORTPROC)(HDC,int);

  typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOA,*LPDOCINFOA;

  typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOW,*LPDOCINFOW;

  typedef DOCINFOA DOCINFO;
  typedef LPDOCINFOA LPDOCINFO;

#define DI_APPBANDING
#define DI_ROPS_READ_DESTINATION

#define StartDoc
#define GetObject
#define TextOut
#define ExtTextOut
#define PolyTextOut
#define GetTextFace

  __attribute__((dllimport)) int StartDocA(HDC hdc,const DOCINFOA *lpdi);
  __attribute__((dllimport)) int StartDocW(HDC hdc,const DOCINFOW *lpdi);
  __attribute__((dllimport)) int EndDoc(HDC hdc);
  __attribute__((dllimport)) int StartPage(HDC hdc);
  __attribute__((dllimport)) int EndPage(HDC hdc);
  __attribute__((dllimport)) int AbortDoc(HDC hdc);
  __attribute__((dllimport)) int SetAbortProc(HDC hdc,ABORTPROC lpProc);
  __attribute__((dllimport)) WINBOOL AbortPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL ArcTo(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
  __attribute__((dllimport)) WINBOOL BeginPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL CloseFigure(HDC hdc);
  __attribute__((dllimport)) WINBOOL EndPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL FillPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL FlattenPath(HDC hdc);
  __attribute__((dllimport)) int GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,int cpt);
  __attribute__((dllimport)) HRGN PathToRegion(HDC hdc);
  __attribute__((dllimport)) WINBOOL PolyDraw(HDC hdc,const POINT *apt,const BYTE *aj,int cpt);
  __attribute__((dllimport)) WINBOOL SelectClipPath(HDC hdc,int mode);
  __attribute__((dllimport)) int SetArcDirection(HDC hdc,int dir);
  __attribute__((dllimport)) WINBOOL SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old);
  __attribute__((dllimport)) WINBOOL StrokeAndFillPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL StrokePath(HDC hdc);
  __attribute__((dllimport)) WINBOOL WidenPath(HDC hdc);
  __attribute__((dllimport)) HPEN ExtCreatePen(DWORD iPenStyle,DWORD cWidth,const LOGBRUSH *plbrush,DWORD cStyle,const DWORD *pstyle);
  __attribute__((dllimport)) WINBOOL GetMiterLimit(HDC hdc,PFLOAT plimit);
  __attribute__((dllimport)) int GetArcDirection(HDC hdc);
  __attribute__((dllimport)) int GetObjectA(HANDLE h,int c,LPVOID pv);
  __attribute__((dllimport)) int GetObjectW(HANDLE h,int c,LPVOID pv);
  __attribute__((dllimport)) WINBOOL MoveToEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL TextOutA(HDC hdc,int x,int y,LPCSTR lpString,int c);
  __attribute__((dllimport)) WINBOOL TextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int c);
  __attribute__((dllimport)) WINBOOL ExtTextOutA(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCSTR lpString,UINT c,const INT *lpDx);
  __attribute__((dllimport)) WINBOOL ExtTextOutW(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCWSTR lpString,UINT c,const INT *lpDx);
  __attribute__((dllimport)) WINBOOL PolyTextOutA(HDC hdc,const POLYTEXTA *ppt,int nstrings);
  __attribute__((dllimport)) WINBOOL PolyTextOutW(HDC hdc,const POLYTEXTW *ppt,int nstrings);
  __attribute__((dllimport)) HRGN CreatePolygonRgn(const POINT *pptl,int cPoint,int iMode);
  __attribute__((dllimport)) WINBOOL DPtoLP(HDC hdc,LPPOINT lppt,int c);
  __attribute__((dllimport)) WINBOOL LPtoDP(HDC hdc,LPPOINT lppt,int c);
  __attribute__((dllimport)) WINBOOL Polygon(HDC hdc,const POINT *apt,int cpt);
  __attribute__((dllimport)) WINBOOL Polyline(HDC hdc,const POINT *apt,int cpt);
  __attribute__((dllimport)) WINBOOL PolyBezier(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL PolyBezierTo(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL PolylineTo(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL SetViewportExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL SetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL SetWindowExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL SetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL OffsetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL OffsetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL ScaleViewportExtEx(HDC hdc,int xn,int dx,int yn,int yd,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL ScaleWindowExtEx(HDC hdc,int xn,int xd,int yn,int yd,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL SetBitmapDimensionEx(HBITMAP hbm,int w,int h,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL SetBrushOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) int GetTextFaceA(HDC hdc,int c,LPSTR lpName);
  __attribute__((dllimport)) int GetTextFaceW(HDC hdc,int c,LPWSTR lpName);

#define FONTMAPPER_MAX

  typedef struct tagKERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
  } KERNINGPAIR,*LPKERNINGPAIR;

#define GetKerningPairs

  __attribute__((dllimport)) DWORD GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  __attribute__((dllimport)) DWORD GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  __attribute__((dllimport)) WINBOOL GetDCOrgEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL FixBrushOrgEx(HDC hdc,int x,int y,LPPOINT ptl);
  __attribute__((dllimport)) WINBOOL UnrealizeObject(HGDIOBJ h);
  __attribute__((dllimport)) WINBOOL GdiFlush();
  __attribute__((dllimport)) DWORD GdiSetBatchLimit(DWORD dw);
  __attribute__((dllimport)) DWORD GdiGetBatchLimit();

#define ICM_OFF
#define ICM_ON
#define ICM_QUERY
#define ICM_DONE_OUTSIDEDC

  typedef int ( *ICMENUMPROCA)(LPSTR,LPARAM);
  typedef int ( *ICMENUMPROCW)(LPWSTR,LPARAM);

#define ICMENUMPROC
#define EnumICMProfiles
#define UpdateICMRegKey
#define GetLogColorSpace
#define CreateColorSpace
#define GetICMProfile
#define SetICMProfile

  __attribute__((dllimport)) int SetICMMode(HDC hdc,int mode);
  __attribute__((dllimport)) WINBOOL CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount);
  __attribute__((dllimport)) HCOLORSPACE GetColorSpace(HDC hdc);
  __attribute__((dllimport)) WINBOOL GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize);
  __attribute__((dllimport)) WINBOOL GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize);
  __attribute__((dllimport)) HCOLORSPACE CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
  __attribute__((dllimport)) HCOLORSPACE CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
  __attribute__((dllimport)) HCOLORSPACE SetColorSpace(HDC hdc,HCOLORSPACE hcs);
  __attribute__((dllimport)) WINBOOL DeleteColorSpace(HCOLORSPACE hcs);
  __attribute__((dllimport)) WINBOOL GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename);
  __attribute__((dllimport)) WINBOOL GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename);
  __attribute__((dllimport)) WINBOOL SetICMProfileA(HDC hdc,LPSTR lpFileName);
  __attribute__((dllimport)) WINBOOL SetICMProfileW(HDC hdc,LPWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  __attribute__((dllimport)) WINBOOL SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  __attribute__((dllimport)) WINBOOL ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action);
  __attribute__((dllimport)) int EnumICMProfilesA(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int EnumICMProfilesW(HDC hdc,ICMENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command);
  __attribute__((dllimport)) WINBOOL UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command);
  __attribute__((dllimport)) WINBOOL ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num);



#define ENHMETA_SIGNATURE
#define ENHMETA_STOCK_OBJECT

#define EMR_HEADER
#define EMR_POLYBEZIER
#define EMR_POLYGON
#define EMR_POLYLINE
#define EMR_POLYBEZIERTO
#define EMR_POLYLINETO
#define EMR_POLYPOLYLINE
#define EMR_POLYPOLYGON
#define EMR_SETWINDOWEXTEX
#define EMR_SETWINDOWORGEX
#define EMR_SETVIEWPORTEXTEX
#define EMR_SETVIEWPORTORGEX
#define EMR_SETBRUSHORGEX
#define EMR_EOF
#define EMR_SETPIXELV
#define EMR_SETMAPPERFLAGS
#define EMR_SETMAPMODE
#define EMR_SETBKMODE
#define EMR_SETPOLYFILLMODE
#define EMR_SETROP2
#define EMR_SETSTRETCHBLTMODE
#define EMR_SETTEXTALIGN
#define EMR_SETCOLORADJUSTMENT
#define EMR_SETTEXTCOLOR
#define EMR_SETBKCOLOR
#define EMR_OFFSETCLIPRGN
#define EMR_MOVETOEX
#define EMR_SETMETARGN
#define EMR_EXCLUDECLIPRECT
#define EMR_INTERSECTCLIPRECT
#define EMR_SCALEVIEWPORTEXTEX
#define EMR_SCALEWINDOWEXTEX
#define EMR_SAVEDC
#define EMR_RESTOREDC
#define EMR_SETWORLDTRANSFORM
#define EMR_MODIFYWORLDTRANSFORM
#define EMR_SELECTOBJECT
#define EMR_CREATEPEN
#define EMR_CREATEBRUSHINDIRECT
#define EMR_DELETEOBJECT
#define EMR_ANGLEARC
#define EMR_ELLIPSE
#define EMR_RECTANGLE
#define EMR_ROUNDRECT
#define EMR_ARC
#define EMR_CHORD
#define EMR_PIE
#define EMR_SELECTPALETTE
#define EMR_CREATEPALETTE
#define EMR_SETPALETTEENTRIES
#define EMR_RESIZEPALETTE
#define EMR_REALIZEPALETTE
#define EMR_EXTFLOODFILL
#define EMR_LINETO
#define EMR_ARCTO
#define EMR_POLYDRAW
#define EMR_SETARCDIRECTION
#define EMR_SETMITERLIMIT
#define EMR_BEGINPATH
#define EMR_ENDPATH
#define EMR_CLOSEFIGURE
#define EMR_FILLPATH
#define EMR_STROKEANDFILLPATH
#define EMR_STROKEPATH
#define EMR_FLATTENPATH
#define EMR_WIDENPATH
#define EMR_SELECTCLIPPATH
#define EMR_ABORTPATH

#define EMR_GDICOMMENT
#define EMR_FILLRGN
#define EMR_FRAMERGN
#define EMR_INVERTRGN
#define EMR_PAINTRGN
#define EMR_EXTSELECTCLIPRGN
#define EMR_BITBLT
#define EMR_STRETCHBLT
#define EMR_MASKBLT
#define EMR_PLGBLT
#define EMR_SETDIBITSTODEVICE
#define EMR_STRETCHDIBITS
#define EMR_EXTCREATEFONTINDIRECTW
#define EMR_EXTTEXTOUTA
#define EMR_EXTTEXTOUTW
#define EMR_POLYBEZIER16
#define EMR_POLYGON16
#define EMR_POLYLINE16
#define EMR_POLYBEZIERTO16
#define EMR_POLYLINETO16
#define EMR_POLYPOLYLINE16
#define EMR_POLYPOLYGON16
#define EMR_POLYDRAW16
#define EMR_CREATEMONOBRUSH
#define EMR_CREATEDIBPATTERNBRUSHPT
#define EMR_EXTCREATEPEN
#define EMR_POLYTEXTOUTA
#define EMR_POLYTEXTOUTW

#define EMR_SETICMMODE
#define EMR_CREATECOLORSPACE
#define EMR_SETCOLORSPACE
#define EMR_DELETECOLORSPACE
#define EMR_GLSRECORD
#define EMR_GLSBOUNDEDRECORD
#define EMR_PIXELFORMAT
#define EMR_RESERVED_105
#define EMR_RESERVED_106
#define EMR_RESERVED_107
#define EMR_RESERVED_108
#define EMR_RESERVED_109
#define EMR_RESERVED_110
#define EMR_COLORCORRECTPALETTE
#define EMR_SETICMPROFILEA
#define EMR_SETICMPROFILEW
#define EMR_ALPHABLEND
#define EMR_SETLAYOUT
#define EMR_TRANSPARENTBLT
#define EMR_RESERVED_117
#define EMR_GRADIENTFILL
#define EMR_RESERVED_119
#define EMR_RESERVED_120
#define EMR_COLORMATCHTOTARGETW
#define EMR_CREATECOLORSPACEW

#define EMR_MIN

#define EMR_MAX

  typedef struct tagEMR {
    DWORD iType;
    DWORD nSize;
  } EMR,*PEMR;

  typedef struct tagEMRTEXT {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
  } EMRTEXT,*PEMRTEXT;

  typedef struct tagABORTPATH {
    EMR emr;
  } EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;

  typedef struct tagEMRSELECTCLIPPATH {
    EMR emr;
    DWORD iMode;
  } EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETLAYOUT,*PEMRSETLAYOUT,
    EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETICMMODE,
    *PEMRSETICMMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;

  typedef struct tagEMRSETMITERLIMIT {
    EMR emr;
    FLOAT eMiterLimit;
  } EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;

  typedef struct tagEMRRESTOREDC {
    EMR emr;
    LONG iRelative;
  } EMRRESTOREDC,*PEMRRESTOREDC;

  typedef struct tagEMRSETARCDIRECTION {
    EMR emr;
    DWORD iArcDirection;

  } EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;

  typedef struct tagEMRSETMAPPERFLAGS {
    EMR emr;
    DWORD dwFlags;
  } EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;

  typedef struct tagEMRSETTEXTCOLOR {
    EMR emr;
    COLORREF crColor;
  } EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;

  typedef struct tagEMRSELECTOBJECT {
    EMR emr;
    DWORD ihObject;
  } EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;

  typedef struct tagEMRSELECTPALETTE {
    EMR emr;
    DWORD ihPal;
  } EMRSELECTPALETTE,*PEMRSELECTPALETTE;

  typedef struct tagEMRRESIZEPALETTE {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
  } EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;

  typedef struct tagEMRSETPALETTEENTRIES {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
  } EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;

  typedef struct tagEMRSETCOLORADJUSTMENT {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
  } EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;

  typedef struct tagEMRGDICOMMENT {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGDICOMMENT,*PEMRGDICOMMENT;

  typedef struct tagEMREOF {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
  } EMREOF,*PEMREOF;

  typedef struct tagEMRLINETO {
    EMR emr;
    POINTL ptl;
  } EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;

  typedef struct tagEMROFFSETCLIPRGN {
    EMR emr;
    POINTL ptlOffset;
  } EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;

  typedef struct tagEMRFILLPATH {
    EMR emr;
    RECTL rclBounds;
  } EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;

  typedef struct tagEMREXCLUDECLIPRECT {
    EMR emr;
    RECTL rclClip;
  } EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;

  typedef struct tagEMRSETVIEWPORTORGEX {
    EMR emr;
    POINTL ptlOrigin;
  } EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;

  typedef struct tagEMRSETVIEWPORTEXTEX {
    EMR emr;
    SIZEL szlExtent;
  } EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;

  typedef struct tagEMRSCALEVIEWPORTEXTEX {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
  } EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;

  typedef struct tagEMRSETWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
  } EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;

  typedef struct tagEMRMODIFYWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
    DWORD iMode;
  } EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;

  typedef struct tagEMRSETPIXELV {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
  } EMRSETPIXELV,*PEMRSETPIXELV;

  typedef struct tagEMREXTFLOODFILL {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
  } EMREXTFLOODFILL,*PEMREXTFLOODFILL;

  typedef struct tagEMRELLIPSE {
    EMR emr;
    RECTL rclBox;
  } EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;

  typedef struct tagEMRROUNDRECT {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
  } EMRROUNDRECT,*PEMRROUNDRECT;

  typedef struct tagEMRARC {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
  } EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;

  typedef struct tagEMRANGLEARC {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
  } EMRANGLEARC,*PEMRANGLEARC;

  typedef struct tagEMRPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
  } EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;

  typedef struct tagEMRPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
  } EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;

  typedef struct tagEMRPOLYDRAW {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW,*PEMRPOLYDRAW;

  typedef struct tagEMRPOLYDRAW16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW16,*PEMRPOLYDRAW16;

  typedef struct tagEMRPOLYPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
  } EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;

  typedef struct tagEMRPOLYPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
  } EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;

  typedef struct tagEMRINVERTRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
  } EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;

  typedef struct tagEMRFILLRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
  } EMRFILLRGN,*PEMRFILLRGN;

  typedef struct tagEMRFRAMERGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
  } EMRFRAMERGN,*PEMRFRAMERGN;

  typedef struct tagEMREXTSELECTCLIPRGN {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
  } EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;

  typedef struct tagEMREXTTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
  } EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;

  typedef struct tagEMRPOLYTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
  } EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;

  typedef struct tagEMRBITBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
  } EMRBITBLT,*PEMRBITBLT;

  typedef struct tagEMRSTRETCHBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRSTRETCHBLT,*PEMRSTRETCHBLT;

  typedef struct tagEMRMASKBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRMASKBLT,*PEMRMASKBLT;

  typedef struct tagEMRPLGBLT {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRPLGBLT,*PEMRPLGBLT;

  typedef struct tagEMRSETDIBITSTODEVICE {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
  } EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;

  typedef struct tagEMRSTRETCHDIBITS {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
  } EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;

  typedef struct tagEMREXTCREATEFONTINDIRECTW {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
  } EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;

  typedef struct tagEMRCREATEPALETTE {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
  } EMRCREATEPALETTE,*PEMRCREATEPALETTE;

  typedef struct tagEMRCREATEPEN {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
  } EMRCREATEPEN,*PEMRCREATEPEN;

  typedef struct tagEMREXTCREATEPEN {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
  } EMREXTCREATEPEN,*PEMREXTCREATEPEN;

  typedef struct tagEMRCREATEBRUSHINDIRECT {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
  } EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;

  typedef struct tagEMRCREATEMONOBRUSH {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;

  typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;

  typedef struct tagEMRFORMAT {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
  } EMRFORMAT,*PEMRFORMAT;

  typedef struct tagEMRGLSRECORD {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSRECORD,*PEMRGLSRECORD;

  typedef struct tagEMRGLSBOUNDEDRECORD {
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;

  typedef struct tagEMRPIXELFORMAT {
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
  } EMRPIXELFORMAT,*PEMRPIXELFORMAT;

  typedef struct tagEMRCREATECOLORSPACE {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
  } EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;

  typedef struct tagEMRSETCOLORSPACE {
    EMR emr;
    DWORD ihCS;
  } EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;

  typedef struct tagEMREXTESCAPE {
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
  } EMREXTESCAPE,*PEMREXTESCAPE,EMRDRAWESCAPE,*PEMRDRAWESCAPE;

  typedef struct tagEMRNAMEDESCAPE {
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
  } EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;

#define SETICMPROFILE_EMBEDED

  typedef struct tagEMRSETICMPROFILE {
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRSETICMPROFILE,*PEMRSETICMPROFILE,EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;

#define CREATECOLORSPACE_EMBEDED

  typedef struct tagEMRCREATECOLORSPACEW {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
  } EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;

#define COLORMATCHTOTARGET_EMBEDED

  typedef struct tagCOLORMATCHTOTARGET {
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;

  typedef struct tagCOLORCORRECTPALETTE {
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
  } EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;

  typedef struct tagEMRALPHABLEND {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRALPHABLEND,*PEMRALPHABLEND;

  typedef struct tagEMRGRADIENTFILL {
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
  } EMRGRADIENTFILL,*PEMRGRADIENTFILL;

  typedef struct tagEMRTRANSPARENTBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;

#define GDICOMMENT_IDENTIFIER
#define GDICOMMENT_WINDOWS_METAFILE
#define GDICOMMENT_BEGINGROUP
#define GDICOMMENT_ENDGROUP
#define GDICOMMENT_MULTIFORMATS
#define EPS_SIGNATURE
#define GDICOMMENT_UNICODE_STRING
#define GDICOMMENT_UNICODE_END


#define wglUseFontBitmaps

  __attribute__((dllimport)) WINBOOL wglCopyContext(HGLRC,HGLRC,UINT);
  __attribute__((dllimport)) HGLRC wglCreateContext(HDC);
  __attribute__((dllimport)) HGLRC wglCreateLayerContext(HDC,int);
  __attribute__((dllimport)) WINBOOL wglDeleteContext(HGLRC);
  __attribute__((dllimport)) HGLRC wglGetCurrentContext(void);
  __attribute__((dllimport)) HDC wglGetCurrentDC(void);
  __attribute__((dllimport)) PROC wglGetProcAddress(LPCSTR);
  __attribute__((dllimport)) WINBOOL wglMakeCurrent(HDC,HGLRC);
  __attribute__((dllimport)) WINBOOL wglShareLists(HGLRC,HGLRC);
  __attribute__((dllimport)) WINBOOL wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
  __attribute__((dllimport)) WINBOOL wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
  __attribute__((dllimport)) WINBOOL SwapBuffers(HDC);

  typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
  } POINTFLOAT,*PPOINTFLOAT;

  typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
  } GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;

#define WGL_FONT_LINES
#define WGL_FONT_POLYGONS

#define wglUseFontOutlines

  __attribute__((dllimport)) WINBOOL wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
  __attribute__((dllimport)) WINBOOL wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);

  typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
  } LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;

#define LPD_DOUBLEBUFFER
#define LPD_STEREO
#define LPD_SUPPORT_GDI
#define LPD_SUPPORT_OPENGL
#define LPD_SHARE_DEPTH
#define LPD_SHARE_STENCIL
#define LPD_SHARE_ACCUM
#define LPD_SWAP_EXCHANGE
#define LPD_SWAP_COPY
#define LPD_TRANSPARENT

#define LPD_TYPE_RGBA
#define LPD_TYPE_COLORINDEX

#define WGL_SWAP_MAIN_PLANE
#define WGL_SWAP_OVERLAY1
#define WGL_SWAP_OVERLAY2
#define WGL_SWAP_OVERLAY3
#define WGL_SWAP_OVERLAY4
#define WGL_SWAP_OVERLAY5
#define WGL_SWAP_OVERLAY6
#define WGL_SWAP_OVERLAY7
#define WGL_SWAP_OVERLAY8
#define WGL_SWAP_OVERLAY9
#define WGL_SWAP_OVERLAY10
#define WGL_SWAP_OVERLAY11
#define WGL_SWAP_OVERLAY12
#define WGL_SWAP_OVERLAY13
#define WGL_SWAP_OVERLAY14
#define WGL_SWAP_OVERLAY15
#define WGL_SWAP_UNDERLAY1
#define WGL_SWAP_UNDERLAY2
#define WGL_SWAP_UNDERLAY3
#define WGL_SWAP_UNDERLAY4
#define WGL_SWAP_UNDERLAY5
#define WGL_SWAP_UNDERLAY6
#define WGL_SWAP_UNDERLAY7
#define WGL_SWAP_UNDERLAY8
#define WGL_SWAP_UNDERLAY9
#define WGL_SWAP_UNDERLAY10
#define WGL_SWAP_UNDERLAY11
#define WGL_SWAP_UNDERLAY12
#define WGL_SWAP_UNDERLAY13
#define WGL_SWAP_UNDERLAY14
#define WGL_SWAP_UNDERLAY15

  __attribute__((dllimport)) WINBOOL wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
  __attribute__((dllimport)) int wglSetLayerPaletteEntries(HDC,int,int,int,const COLORREF *);
  __attribute__((dllimport)) int wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF *);
  __attribute__((dllimport)) WINBOOL wglRealizeLayerPalette(HDC,int,WINBOOL);
  __attribute__((dllimport)) WINBOOL wglSwapLayerBuffers(HDC,UINT);

  typedef struct _WGLSWAP {
    HDC hdc;
    UINT uiFlags;
  } WGLSWAP,*PWGLSWAP,*LPWGLSWAP;

#define WGL_SWAPMULTIPLE_MAX

  __attribute__((dllimport)) DWORD wglSwapMultipleBuffers(UINT,const WGLSWAP *);
# 72 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 1 3






#define _WINUSER_
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/stdarg.h" 1 3 4
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdarg.h" 1 3 4
# 2 "C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/stdarg.h" 2 3 4
# 22 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3


  typedef HANDLE HDWP;
  typedef void MENUTEMPLATEA;
  typedef void MENUTEMPLATEW;
  typedef PVOID LPMENUTEMPLATEA;
  typedef PVOID LPMENUTEMPLATEW;

  typedef MENUTEMPLATEA MENUTEMPLATE;
  typedef LPMENUTEMPLATEA LPMENUTEMPLATE;

  typedef LRESULT ( *WNDPROC)(HWND,UINT,WPARAM,LPARAM);
  typedef INT_PTR ( *DLGPROC)(HWND,UINT,WPARAM,LPARAM);
  typedef void ( *TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
  typedef WINBOOL ( *GRAYSTRINGPROC)(HDC,LPARAM,int);
  typedef WINBOOL ( *WNDENUMPROC)(HWND,LPARAM);
  typedef LRESULT ( *HOOKPROC)(int code,WPARAM wParam,LPARAM lParam);
  typedef void ( *SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
  typedef WINBOOL ( *PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
  typedef WINBOOL ( *PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
  typedef WINBOOL ( *PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
  typedef WINBOOL ( *PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
  typedef int ( *EDITWORDBREAKPROCA)(LPSTR lpch,int ichCurrent,int cch,int code);
  typedef int ( *EDITWORDBREAKPROCW)(LPWSTR lpch,int ichCurrent,int cch,int code);
  typedef WINBOOL ( *DRAWSTATEPROC)(HDC hdc,LPARAM lData,WPARAM wData,int cx,int cy);

  typedef PROPENUMPROCA PROPENUMPROC;
  typedef PROPENUMPROCEXA PROPENUMPROCEX;
  typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;

  typedef WINBOOL ( *NAMEENUMPROCA)(LPSTR,LPARAM);
  typedef WINBOOL ( *NAMEENUMPROCW)(LPWSTR,LPARAM);
  typedef NAMEENUMPROCA WINSTAENUMPROCA;
  typedef NAMEENUMPROCA DESKTOPENUMPROCA;
  typedef NAMEENUMPROCW WINSTAENUMPROCW;
  typedef NAMEENUMPROCW DESKTOPENUMPROCW;

  typedef WINSTAENUMPROCA WINSTAENUMPROC;
  typedef DESKTOPENUMPROCA DESKTOPENUMPROC;

#define IS_INTRESOURCE
#define MAKEINTRESOURCEA
#define MAKEINTRESOURCEW
#define MAKEINTRESOURCE



#define RT_CURSOR
#define RT_BITMAP
#define RT_ICON
#define RT_MENU
#define RT_DIALOG
#define RT_STRING
#define RT_FONTDIR
#define RT_FONT
#define RT_ACCELERATOR
#define RT_RCDATA
#define RT_MESSAGETABLE

#define DIFFERENCE
#define RT_GROUP_CURSOR
#define RT_GROUP_ICON
#define RT_VERSION
#define RT_DLGINCLUDE
#define RT_PLUGPLAY
#define RT_VXD
#define RT_ANICURSOR
#define RT_ANIICON
#define RT_HTML
# 100 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define RT_MANIFEST
#define CREATEPROCESS_MANIFEST_RESOURCE_ID
#define ISOLATIONAWARE_MANIFEST_RESOURCE_ID
#define ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID
#define MINIMUM_RESERVED_MANIFEST_RESOURCE_ID
#define MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID



#define wvsprintf
#define wsprintf

  __attribute__((dllimport)) int wvsprintfA(LPSTR,LPCSTR,va_list arglist);
  __attribute__((dllimport)) int wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) wsprintfA(LPSTR,LPCSTR,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) wsprintfW(LPWSTR,LPCWSTR,...);

#define SETWALLPAPER_DEFAULT


#define SB_HORZ
#define SB_VERT
#define SB_CTL
#define SB_BOTH

#define SB_LINEUP
#define SB_LINELEFT
#define SB_LINEDOWN
#define SB_LINERIGHT
#define SB_PAGEUP
#define SB_PAGELEFT
#define SB_PAGEDOWN
#define SB_PAGERIGHT
#define SB_THUMBPOSITION
#define SB_THUMBTRACK
#define SB_TOP
#define SB_LEFT
#define SB_BOTTOM
#define SB_RIGHT
#define SB_ENDSCROLL



#define SW_HIDE
#define SW_SHOWNORMAL
#define SW_NORMAL
#define SW_SHOWMINIMIZED
#define SW_SHOWMAXIMIZED
#define SW_MAXIMIZE
#define SW_SHOWNOACTIVATE
#define SW_SHOW
#define SW_MINIMIZE
#define SW_SHOWMINNOACTIVE
#define SW_SHOWNA
#define SW_RESTORE
#define SW_SHOWDEFAULT
#define SW_FORCEMINIMIZE
#define SW_MAX

#define HIDE_WINDOW
#define SHOW_OPENWINDOW
#define SHOW_ICONWINDOW
#define SHOW_FULLSCREEN
#define SHOW_OPENNOACTIVATE

#define SW_PARENTCLOSING
#define SW_OTHERZOOM
#define SW_PARENTOPENING
#define SW_OTHERUNZOOM


#define AW_HOR_POSITIVE
#define AW_HOR_NEGATIVE
#define AW_VER_POSITIVE
#define AW_VER_NEGATIVE
#define AW_CENTER
#define AW_HIDE
#define AW_ACTIVATE
#define AW_SLIDE
#define AW_BLEND

#define KF_EXTENDED
#define KF_DLGMODE
#define KF_MENUMODE
#define KF_ALTDOWN
#define KF_REPEAT
#define KF_UP



#define VK_LBUTTON
#define VK_RBUTTON
#define VK_CANCEL
#define VK_MBUTTON
#define VK_XBUTTON1
#define VK_XBUTTON2
#define VK_BACK
#define VK_TAB
#define VK_CLEAR
#define VK_RETURN
#define VK_SHIFT
#define VK_CONTROL
#define VK_MENU
#define VK_PAUSE
#define VK_CAPITAL
#define VK_KANA
#define VK_HANGEUL
#define VK_HANGUL
#define VK_JUNJA
#define VK_FINAL
#define VK_HANJA
#define VK_KANJI
#define VK_ESCAPE
#define VK_CONVERT
#define VK_NONCONVERT
#define VK_ACCEPT
#define VK_MODECHANGE
#define VK_SPACE
#define VK_PRIOR
#define VK_NEXT
#define VK_END
#define VK_HOME
#define VK_LEFT
#define VK_UP
#define VK_RIGHT
#define VK_DOWN
#define VK_SELECT
#define VK_PRINT
#define VK_EXECUTE
#define VK_SNAPSHOT
#define VK_INSERT
#define VK_DELETE
#define VK_HELP

#define VK_LWIN
#define VK_RWIN
#define VK_APPS
#define VK_SLEEP
#define VK_NUMPAD0
#define VK_NUMPAD1
#define VK_NUMPAD2
#define VK_NUMPAD3
#define VK_NUMPAD4
#define VK_NUMPAD5
#define VK_NUMPAD6
#define VK_NUMPAD7
#define VK_NUMPAD8
#define VK_NUMPAD9
#define VK_MULTIPLY
#define VK_ADD
#define VK_SEPARATOR
#define VK_SUBTRACT
#define VK_DECIMAL
#define VK_DIVIDE
#define VK_F1
#define VK_F2
#define VK_F3
#define VK_F4
#define VK_F5
#define VK_F6
#define VK_F7
#define VK_F8
#define VK_F9
#define VK_F10
#define VK_F11
#define VK_F12
#define VK_F13
#define VK_F14
#define VK_F15
#define VK_F16
#define VK_F17
#define VK_F18
#define VK_F19
#define VK_F20
#define VK_F21
#define VK_F22
#define VK_F23
#define VK_F24
#define VK_NUMLOCK
#define VK_SCROLL
#define VK_OEM_NEC_EQUAL
#define VK_OEM_FJ_JISHO
#define VK_OEM_FJ_MASSHOU
#define VK_OEM_FJ_TOUROKU
#define VK_OEM_FJ_LOYA
#define VK_OEM_FJ_ROYA
#define VK_LSHIFT
#define VK_RSHIFT
#define VK_LCONTROL
#define VK_RCONTROL
#define VK_LMENU
#define VK_RMENU
#define VK_BROWSER_BACK
#define VK_BROWSER_FORWARD
#define VK_BROWSER_REFRESH
#define VK_BROWSER_STOP
#define VK_BROWSER_SEARCH
#define VK_BROWSER_FAVORITES
#define VK_BROWSER_HOME
#define VK_VOLUME_MUTE
#define VK_VOLUME_DOWN
#define VK_VOLUME_UP
#define VK_MEDIA_NEXT_TRACK
#define VK_MEDIA_PREV_TRACK
#define VK_MEDIA_STOP
#define VK_MEDIA_PLAY_PAUSE
#define VK_LAUNCH_MAIL
#define VK_LAUNCH_MEDIA_SELECT
#define VK_LAUNCH_APP1
#define VK_LAUNCH_APP2
#define VK_OEM_1
#define VK_OEM_PLUS
#define VK_OEM_COMMA
#define VK_OEM_MINUS
#define VK_OEM_PERIOD
#define VK_OEM_2
#define VK_OEM_3
#define VK_OEM_4
#define VK_OEM_5
#define VK_OEM_6
#define VK_OEM_7
#define VK_OEM_8
#define VK_OEM_AX
#define VK_OEM_102
#define VK_ICO_HELP
#define VK_ICO_00
#define VK_PROCESSKEY
#define VK_ICO_CLEAR
#define VK_PACKET
#define VK_OEM_RESET
#define VK_OEM_JUMP
#define VK_OEM_PA1
#define VK_OEM_PA2
#define VK_OEM_PA3
#define VK_OEM_WSCTRL
#define VK_OEM_CUSEL
#define VK_OEM_ATTN
#define VK_OEM_FINISH
#define VK_OEM_COPY
#define VK_OEM_AUTO
#define VK_OEM_ENLW
#define VK_OEM_BACKTAB
#define VK_ATTN
#define VK_CRSEL
#define VK_EXSEL
#define VK_EREOF
#define VK_PLAY
#define VK_ZOOM
#define VK_NONAME
#define VK_PA1
#define VK_OEM_CLEAR




#define WH_MIN
#define WH_MSGFILTER
#define WH_JOURNALRECORD
#define WH_JOURNALPLAYBACK
#define WH_KEYBOARD
#define WH_GETMESSAGE
#define WH_CALLWNDPROC
#define WH_CBT
#define WH_SYSMSGFILTER
#define WH_MOUSE
#define WH_HARDWARE
#define WH_DEBUG
#define WH_SHELL
#define WH_FOREGROUNDIDLE
#define WH_CALLWNDPROCRET

#define WH_KEYBOARD_LL
#define WH_MOUSE_LL

#define WH_MAX

#define WH_MINHOOK
#define WH_MAXHOOK

#define HC_ACTION
#define HC_GETNEXT
#define HC_SKIP
#define HC_NOREMOVE
#define HC_NOREM
#define HC_SYSMODALON
#define HC_SYSMODALOFF

#define HCBT_MOVESIZE
#define HCBT_MINMAX
#define HCBT_QS
#define HCBT_CREATEWND
#define HCBT_DESTROYWND
#define HCBT_ACTIVATE
#define HCBT_CLICKSKIPPED
#define HCBT_KEYSKIPPED
#define HCBT_SYSCOMMAND
#define HCBT_SETFOCUS

  typedef struct tagCBT_CREATEWNDA {
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDA,*LPCBT_CREATEWNDA;

  typedef struct tagCBT_CREATEWNDW {
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDW,*LPCBT_CREATEWNDW;

  typedef CBT_CREATEWNDA CBT_CREATEWND;
  typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;

  typedef struct tagCBTACTIVATESTRUCT
  {
    WINBOOL fMouse;
    HWND hWndActive;
  } CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;

  typedef struct tagWTSSESSION_NOTIFICATION {
    DWORD cbSize;
    DWORD dwSessionId;

  } WTSSESSION_NOTIFICATION,*PWTSSESSION_NOTIFICATION;

#define WTS_CONSOLE_CONNECT
#define WTS_CONSOLE_DISCONNECT
#define WTS_REMOTE_CONNECT
#define WTS_REMOTE_DISCONNECT
#define WTS_SESSION_LOGON
#define WTS_SESSION_LOGOFF
#define WTS_SESSION_LOCK
#define WTS_SESSION_UNLOCK
#define WTS_SESSION_REMOTE_CONTROL

#define MSGF_DIALOGBOX
#define MSGF_MESSAGEBOX
#define MSGF_MENU
#define MSGF_SCROLLBAR
#define MSGF_NEXTWINDOW
#define MSGF_MAX
#define MSGF_USER

#define HSHELL_WINDOWCREATED
#define HSHELL_WINDOWDESTROYED
#define HSHELL_ACTIVATESHELLWINDOW

#define HSHELL_WINDOWACTIVATED
#define HSHELL_GETMINRECT
#define HSHELL_REDRAW
#define HSHELL_TASKMAN
#define HSHELL_LANGUAGE
#define HSHELL_SYSMENU
#define HSHELL_ENDTASK
#define HSHELL_ACCESSIBILITYSTATE
#define HSHELL_APPCOMMAND
#define HSHELL_WINDOWREPLACED
#define HSHELL_WINDOWREPLACING
#define HSHELL_HIGHBIT
#define HSHELL_FLASH
#define HSHELL_RUDEAPPACTIVATED

#define ACCESS_STICKYKEYS
#define ACCESS_FILTERKEYS
#define ACCESS_MOUSEKEYS

#define APPCOMMAND_BROWSER_BACKWARD
#define APPCOMMAND_BROWSER_FORWARD
#define APPCOMMAND_BROWSER_REFRESH
#define APPCOMMAND_BROWSER_STOP
#define APPCOMMAND_BROWSER_SEARCH
#define APPCOMMAND_BROWSER_FAVORITES
#define APPCOMMAND_BROWSER_HOME
#define APPCOMMAND_VOLUME_MUTE
#define APPCOMMAND_VOLUME_DOWN
#define APPCOMMAND_VOLUME_UP
#define APPCOMMAND_MEDIA_NEXTTRACK
#define APPCOMMAND_MEDIA_PREVIOUSTRACK
#define APPCOMMAND_MEDIA_STOP
#define APPCOMMAND_MEDIA_PLAY_PAUSE
#define APPCOMMAND_LAUNCH_MAIL
#define APPCOMMAND_LAUNCH_MEDIA_SELECT
#define APPCOMMAND_LAUNCH_APP1
#define APPCOMMAND_LAUNCH_APP2
#define APPCOMMAND_BASS_DOWN
#define APPCOMMAND_BASS_BOOST
#define APPCOMMAND_BASS_UP
#define APPCOMMAND_TREBLE_DOWN
#define APPCOMMAND_TREBLE_UP
#define APPCOMMAND_MICROPHONE_VOLUME_MUTE
#define APPCOMMAND_MICROPHONE_VOLUME_DOWN
#define APPCOMMAND_MICROPHONE_VOLUME_UP
#define APPCOMMAND_HELP
#define APPCOMMAND_FIND
#define APPCOMMAND_NEW
#define APPCOMMAND_OPEN
#define APPCOMMAND_CLOSE
#define APPCOMMAND_SAVE
#define APPCOMMAND_PRINT
#define APPCOMMAND_UNDO
#define APPCOMMAND_REDO
#define APPCOMMAND_COPY
#define APPCOMMAND_CUT
#define APPCOMMAND_PASTE
#define APPCOMMAND_REPLY_TO_MAIL
#define APPCOMMAND_FORWARD_MAIL
#define APPCOMMAND_SEND_MAIL
#define APPCOMMAND_SPELL_CHECK
#define APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE
#define APPCOMMAND_MIC_ON_OFF_TOGGLE
#define APPCOMMAND_CORRECTION_LIST
#define APPCOMMAND_MEDIA_PLAY
#define APPCOMMAND_MEDIA_PAUSE
#define APPCOMMAND_MEDIA_RECORD
#define APPCOMMAND_MEDIA_FAST_FORWARD
#define APPCOMMAND_MEDIA_REWIND
#define APPCOMMAND_MEDIA_CHANNEL_UP
#define APPCOMMAND_MEDIA_CHANNEL_DOWN

#define FAPPCOMMAND_MOUSE
#define FAPPCOMMAND_KEY
#define FAPPCOMMAND_OEM
#define FAPPCOMMAND_MASK

#define GET_APPCOMMAND_LPARAM
#define GET_DEVICE_LPARAM
#define GET_MOUSEORKEY_LPARAM
#define GET_FLAGS_LPARAM
#define GET_KEYSTATE_LPARAM

  typedef struct {
    HWND hwnd;
    RECT rc;
  } SHELLHOOKINFO,*LPSHELLHOOKINFO;

  typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
  } EVENTMSG,*PEVENTMSGMSG,*NPEVENTMSGMSG,*LPEVENTMSGMSG;

  typedef struct tagEVENTMSG *PEVENTMSG,*NPEVENTMSG,*LPEVENTMSG;

  typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPSTRUCT,*PCWPSTRUCT,*NPCWPSTRUCT,*LPCWPSTRUCT;

  typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPRETSTRUCT,*PCWPRETSTRUCT,*NPCWPRETSTRUCT,*LPCWPRETSTRUCT;

#define LLKHF_EXTENDED
#define LLKHF_INJECTED
#define LLKHF_ALTDOWN
#define LLKHF_UP

#define LLMHF_INJECTED

  typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KBDLLHOOKSTRUCT,*LPKBDLLHOOKSTRUCT,*PKBDLLHOOKSTRUCT;

  typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MSLLHOOKSTRUCT,*LPMSLLHOOKSTRUCT,*PMSLLHOOKSTRUCT;

  typedef struct tagDEBUGHOOKINFO {
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
  } DEBUGHOOKINFO,*PDEBUGHOOKINFO,*NPDEBUGHOOKINFO,*LPDEBUGHOOKINFO;

  typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
  } MOUSEHOOKSTRUCT,*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;






  typedef struct tagMOUSEHOOKSTRUCTEX {
    MOUSEHOOKSTRUCT _unnamed;
    DWORD mouseData;
  } MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;


  typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
  } HARDWAREHOOKSTRUCT,*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;


#define HKL_PREV
#define HKL_NEXT

#define KLF_ACTIVATE
#define KLF_SUBSTITUTE_OK
#define KLF_REORDER
#define KLF_REPLACELANG
#define KLF_NOTELLSHELL
#define KLF_SETFORPROCESS
#define KLF_SHIFTLOCK
#define KLF_RESET

#define INPUTLANGCHANGE_SYSCHARSET
#define INPUTLANGCHANGE_FORWARD
#define INPUTLANGCHANGE_BACKWARD

#define KL_NAMELENGTH

#define LoadKeyboardLayout
#define GetKeyboardLayoutName

  __attribute__((dllimport)) HKL LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags);
  __attribute__((dllimport)) HKL LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags);
  __attribute__((dllimport)) HKL ActivateKeyboardLayout(HKL hkl,UINT Flags);
  __attribute__((dllimport)) int ToUnicodeEx(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl);
  __attribute__((dllimport)) WINBOOL UnloadKeyboardLayout(HKL hkl);
  __attribute__((dllimport)) WINBOOL GetKeyboardLayoutNameA(LPSTR pwszKLID);
  __attribute__((dllimport)) WINBOOL GetKeyboardLayoutNameW(LPWSTR pwszKLID);
  __attribute__((dllimport)) int GetKeyboardLayoutList(int nBuff,HKL *lpList);
  __attribute__((dllimport)) HKL GetKeyboardLayout(DWORD idThread);

  typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;

#define GMMP_USE_DISPLAY_POINTS
#define GMMP_USE_HIGH_RESOLUTION_POINTS

  __attribute__((dllimport)) int GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution);



#define DESKTOP_READOBJECTS
#define DESKTOP_CREATEWINDOW
#define DESKTOP_CREATEMENU
#define DESKTOP_HOOKCONTROL
#define DESKTOP_JOURNALRECORD
#define DESKTOP_JOURNALPLAYBACK
#define DESKTOP_ENUMERATE
#define DESKTOP_WRITEOBJECTS
#define DESKTOP_SWITCHDESKTOP

#define DF_ALLOWOTHERACCOUNTHOOK



#define CreateDesktop

  __attribute__((dllimport)) HDESK CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HDESK CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);



#define OpenDesktop
#define EnumDesktops

  __attribute__((dllimport)) HDESK OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HDESK OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HDESK OpenInputDesktop(DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL SwitchDesktop(HDESK hDesktop);
  __attribute__((dllimport)) WINBOOL SetThreadDesktop(HDESK hDesktop);
  __attribute__((dllimport)) WINBOOL CloseDesktop(HDESK hDesktop);
  __attribute__((dllimport)) HDESK GetThreadDesktop(DWORD dwThreadId);



#define WINSTA_ENUMDESKTOPS
#define WINSTA_READATTRIBUTES
#define WINSTA_ACCESSCLIPBOARD
#define WINSTA_CREATEDESKTOP
#define WINSTA_WRITEATTRIBUTES
#define WINSTA_ACCESSGLOBALATOMS
#define WINSTA_EXITWINDOWS
#define WINSTA_ENUMERATE
#define WINSTA_READSCREEN
#define WINSTA_ALL_ACCESS

#define CWF_CREATE_ONLY

#define WSF_VISIBLE

#define CreateWindowStation
#define OpenWindowStation
#define EnumWindowStations

  __attribute__((dllimport)) HWINSTA CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HWINSTA CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HWINSTA OpenWindowStationA(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HWINSTA OpenWindowStationW(LPCWSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL CloseWindowStation(HWINSTA hWinSta);
  __attribute__((dllimport)) WINBOOL SetProcessWindowStation(HWINSTA hWinSta);
  __attribute__((dllimport)) HWINSTA GetProcessWindowStation(void);



  __attribute__((dllimport)) WINBOOL SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID);
  __attribute__((dllimport)) WINBOOL GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded);

#define UOI_FLAGS
#define UOI_NAME
#define UOI_TYPE
#define UOI_USER_SID

  typedef struct tagUSEROBJECTFLAGS {
    WINBOOL fInherit;
    WINBOOL fReserved;
    DWORD dwFlags;
  } USEROBJECTFLAGS,*PUSEROBJECTFLAGS;

#define GetUserObjectInformation
#define SetUserObjectInformation

  __attribute__((dllimport)) WINBOOL GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
  __attribute__((dllimport)) WINBOOL SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);


  typedef struct tagWNDCLASSEXA {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
  } WNDCLASSEXA,*PWNDCLASSEXA,*NPWNDCLASSEXA,*LPWNDCLASSEXA;

  typedef struct tagWNDCLASSEXW {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
  } WNDCLASSEXW,*PWNDCLASSEXW,*NPWNDCLASSEXW,*LPWNDCLASSEXW;

  typedef WNDCLASSEXA WNDCLASSEX;
  typedef PWNDCLASSEXA PWNDCLASSEX;
  typedef NPWNDCLASSEXA NPWNDCLASSEX;
  typedef LPWNDCLASSEXA LPWNDCLASSEX;

  typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
  } WNDCLASSA,*PWNDCLASSA,*NPWNDCLASSA,*LPWNDCLASSA;

  typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
  } WNDCLASSW,*PWNDCLASSW,*NPWNDCLASSW,*LPWNDCLASSW;

  typedef WNDCLASSA WNDCLASS;
  typedef PWNDCLASSA PWNDCLASS;
  typedef NPWNDCLASSA NPWNDCLASS;
  typedef LPWNDCLASSA LPWNDCLASS;

  __attribute__((dllimport)) WINBOOL IsHungAppWindow(HWND hwnd);
  __attribute__((dllimport)) void DisableProcessWindowsGhosting(void);


  typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
  } MSG,*PMSG,*NPMSG,*LPMSG;

#define POINTSTOPOINT

#define POINTTOPOINTS
#define MAKEWPARAM
#define MAKELPARAM
#define MAKELRESULT



#define GWL_WNDPROC
#define GWL_HINSTANCE
#define GWL_HWNDPARENT
#define GWL_STYLE
#define GWL_EXSTYLE
#define GWL_USERDATA
#define GWL_ID


#undef GWL_WNDPROC
#undef GWL_HINSTANCE
#undef GWL_HWNDPARENT
#undef GWL_USERDATA


#define GWLP_WNDPROC
#define GWLP_HINSTANCE
#define GWLP_HWNDPARENT
#define GWLP_USERDATA
#define GWLP_ID

#define GCL_MENUNAME
#define GCL_HBRBACKGROUND
#define GCL_HCURSOR
#define GCL_HICON
#define GCL_HMODULE
#define GCL_CBWNDEXTRA
#define GCL_CBCLSEXTRA
#define GCL_WNDPROC
#define GCL_STYLE
#define GCW_ATOM
#define GCL_HICONSM



#undef GCL_MENUNAME
#undef GCL_HBRBACKGROUND
#undef GCL_HCURSOR
#undef GCL_HICON
#undef GCL_HMODULE
#undef GCL_WNDPROC
#undef GCL_HICONSM


#define GCLP_MENUNAME
#define GCLP_HBRBACKGROUND
#define GCLP_HCURSOR
#define GCLP_HICON
#define GCLP_HMODULE
#define GCLP_WNDPROC
#define GCLP_HICONSM




#define WM_NULL
#define WM_CREATE
#define WM_DESTROY
#define WM_MOVE
#define WM_SIZE

#define WM_ACTIVATE

#define WA_INACTIVE
#define WA_ACTIVE
#define WA_CLICKACTIVE

#define WM_SETFOCUS
#define WM_KILLFOCUS
#define WM_ENABLE
#define WM_SETREDRAW
#define WM_SETTEXT
#define WM_GETTEXT
#define WM_GETTEXTLENGTH
#define WM_PAINT
#define WM_CLOSE

#define WM_QUERYENDSESSION
#define WM_QUERYOPEN
#define WM_ENDSESSION

#define WM_QUIT
#define WM_ERASEBKGND
#define WM_SYSCOLORCHANGE
#define WM_SHOWWINDOW
#define WM_WININICHANGE
#define WM_SETTINGCHANGE
#define WM_DEVMODECHANGE
#define WM_ACTIVATEAPP
#define WM_FONTCHANGE
#define WM_TIMECHANGE
#define WM_CANCELMODE
#define WM_SETCURSOR
#define WM_MOUSEACTIVATE
#define WM_CHILDACTIVATE
#define WM_QUEUESYNC

#define WM_GETMINMAXINFO

  typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
  } MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;

#define WM_PAINTICON
#define WM_ICONERASEBKGND
#define WM_NEXTDLGCTL
#define WM_SPOOLERSTATUS
#define WM_DRAWITEM
#define WM_MEASUREITEM
#define WM_DELETEITEM
#define WM_VKEYTOITEM
#define WM_CHARTOITEM
#define WM_SETFONT
#define WM_GETFONT
#define WM_SETHOTKEY
#define WM_GETHOTKEY
#define WM_QUERYDRAGICON
#define WM_COMPAREITEM

#define WM_GETOBJECT

#define WM_COMPACTING
#define WM_COMMNOTIFY
#define WM_WINDOWPOSCHANGING
#define WM_WINDOWPOSCHANGED

#define WM_POWER

#define PWR_OK
#define PWR_FAIL
#define PWR_SUSPENDREQUEST
#define PWR_SUSPENDRESUME
#define PWR_CRITICALRESUME

#define WM_COPYDATA
#define WM_CANCELJOURNAL

  typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
  } COPYDATASTRUCT,*PCOPYDATASTRUCT;

  typedef struct tagMDINEXTMENU {
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
  } MDINEXTMENU,*PMDINEXTMENU,*LPMDINEXTMENU;

#define WM_NOTIFY
#define WM_INPUTLANGCHANGEREQUEST
#define WM_INPUTLANGCHANGE
#define WM_TCARD
#define WM_HELP
#define WM_USERCHANGED
#define WM_NOTIFYFORMAT

#define NFR_ANSI
#define NFR_UNICODE
#define NF_QUERY
#define NF_REQUERY

#define WM_CONTEXTMENU
#define WM_STYLECHANGING
#define WM_STYLECHANGED
#define WM_DISPLAYCHANGE
#define WM_GETICON
#define WM_SETICON

#define WM_NCCREATE
#define WM_NCDESTROY
#define WM_NCCALCSIZE
#define WM_NCHITTEST
#define WM_NCPAINT
#define WM_NCACTIVATE
#define WM_GETDLGCODE

#define WM_SYNCPAINT

#define WM_NCMOUSEMOVE
#define WM_NCLBUTTONDOWN
#define WM_NCLBUTTONUP
#define WM_NCLBUTTONDBLCLK
#define WM_NCRBUTTONDOWN
#define WM_NCRBUTTONUP
#define WM_NCRBUTTONDBLCLK
#define WM_NCMBUTTONDOWN
#define WM_NCMBUTTONUP
#define WM_NCMBUTTONDBLCLK

#define WM_NCXBUTTONDOWN
#define WM_NCXBUTTONUP
#define WM_NCXBUTTONDBLCLK
#define WM_INPUT
#define WM_KEYFIRST
#define WM_KEYDOWN
#define WM_KEYUP
#define WM_CHAR
#define WM_DEADCHAR
#define WM_SYSKEYDOWN
#define WM_SYSKEYUP
#define WM_SYSCHAR
#define WM_SYSDEADCHAR
#define WM_UNICHAR
#define WM_KEYLAST
#define UNICODE_NOCHAR
#define WM_IME_STARTCOMPOSITION
#define WM_IME_ENDCOMPOSITION
#define WM_IME_COMPOSITION
#define WM_IME_KEYLAST
#define WM_INITDIALOG
#define WM_COMMAND
#define WM_SYSCOMMAND
#define WM_TIMER
#define WM_HSCROLL
#define WM_VSCROLL
#define WM_INITMENU
#define WM_INITMENUPOPUP
#define WM_MENUSELECT




#define WM_MENUCHAR
#define WM_ENTERIDLE

#define WM_MENURBUTTONUP
#define WM_MENUDRAG
#define WM_MENUGETOBJECT
#define WM_UNINITMENUPOPUP
#define WM_MENUCOMMAND


#define WM_CHANGEUISTATE
#define WM_UPDATEUISTATE
#define WM_QUERYUISTATE

#define UIS_SET
#define UIS_CLEAR
#define UIS_INITIALIZE

#define UISF_HIDEFOCUS
#define UISF_HIDEACCEL
#define UISF_ACTIVE



#define WM_CTLCOLORMSGBOX
#define WM_CTLCOLOREDIT
#define WM_CTLCOLORLISTBOX
#define WM_CTLCOLORBTN
#define WM_CTLCOLORDLG
#define WM_CTLCOLORSCROLLBAR
#define WM_CTLCOLORSTATIC
#define MN_GETHMENU

#define WM_MOUSEFIRST
#define WM_MOUSEMOVE
#define WM_LBUTTONDOWN
#define WM_LBUTTONUP
#define WM_LBUTTONDBLCLK
#define WM_RBUTTONDOWN
#define WM_RBUTTONUP
#define WM_RBUTTONDBLCLK
#define WM_MBUTTONDOWN
#define WM_MBUTTONUP
#define WM_MBUTTONDBLCLK
#define WM_MOUSEWHEEL
#define WM_XBUTTONDOWN
#define WM_XBUTTONUP
#define WM_XBUTTONDBLCLK




#define WM_MOUSELAST


#define WHEEL_DELTA
#define GET_WHEEL_DELTA_WPARAM

#define WHEEL_PAGESCROLL

#define GET_KEYSTATE_WPARAM
#define GET_NCHITTEST_WPARAM
#define GET_XBUTTON_WPARAM

#define XBUTTON1
#define XBUTTON2

#define WM_PARENTNOTIFY
#define WM_ENTERMENULOOP
#define WM_EXITMENULOOP

#define WM_NEXTMENU
#define WM_SIZING
#define WM_CAPTURECHANGED
#define WM_MOVING

#define WM_POWERBROADCAST


#define PBT_APMQUERYSUSPEND
#define PBT_APMQUERYSTANDBY

#define PBT_APMQUERYSUSPENDFAILED
#define PBT_APMQUERYSTANDBYFAILED

#define PBT_APMSUSPEND
#define PBT_APMSTANDBY

#define PBT_APMRESUMECRITICAL
#define PBT_APMRESUMESUSPEND
#define PBT_APMRESUMESTANDBY

#define PBTF_APMRESUMEFROMFAILURE

#define PBT_APMBATTERYLOW
#define PBT_APMPOWERSTATUSCHANGE

#define PBT_APMOEMEVENT
#define PBT_APMRESUMEAUTOMATIC



#define PBT_POWERSETTINGCHANGE


#define WM_DEVICECHANGE

#define WM_MDICREATE
#define WM_MDIDESTROY
#define WM_MDIACTIVATE
#define WM_MDIRESTORE
#define WM_MDINEXT
#define WM_MDIMAXIMIZE
#define WM_MDITILE
#define WM_MDICASCADE
#define WM_MDIICONARRANGE
#define WM_MDIGETACTIVE

#define WM_MDISETMENU
#define WM_ENTERSIZEMOVE
#define WM_EXITSIZEMOVE
#define WM_DROPFILES
#define WM_MDIREFRESHMENU

#define WM_IME_SETCONTEXT
#define WM_IME_NOTIFY
#define WM_IME_CONTROL
#define WM_IME_COMPOSITIONFULL
#define WM_IME_SELECT
#define WM_IME_CHAR
#define WM_IME_REQUEST
#define WM_IME_KEYDOWN
#define WM_IME_KEYUP

#define WM_MOUSEHOVER
#define WM_MOUSELEAVE
#define WM_NCMOUSEHOVER
#define WM_NCMOUSELEAVE
#define WM_WTSSESSION_CHANGE
#define WM_TABLET_FIRST
#define WM_TABLET_LAST
#define WM_CUT
#define WM_COPY
#define WM_PASTE
#define WM_CLEAR
#define WM_UNDO
#define WM_RENDERFORMAT
#define WM_RENDERALLFORMATS
#define WM_DESTROYCLIPBOARD
#define WM_DRAWCLIPBOARD
#define WM_PAINTCLIPBOARD
#define WM_VSCROLLCLIPBOARD
#define WM_SIZECLIPBOARD
#define WM_ASKCBFORMATNAME
#define WM_CHANGECBCHAIN
#define WM_HSCROLLCLIPBOARD
#define WM_QUERYNEWPALETTE
#define WM_PALETTEISCHANGING
#define WM_PALETTECHANGED
#define WM_HOTKEY
#define WM_PRINT
#define WM_PRINTCLIENT
#define WM_APPCOMMAND
#define WM_THEMECHANGED
#define WM_HANDHELDFIRST
#define WM_HANDHELDLAST
#define WM_AFXFIRST
#define WM_AFXLAST
#define WM_PENWINFIRST
#define WM_PENWINLAST
#define WM_APP
#define WM_USER

#define WMSZ_LEFT
#define WMSZ_RIGHT
#define WMSZ_TOP
#define WMSZ_TOPLEFT
#define WMSZ_TOPRIGHT
#define WMSZ_BOTTOM
#define WMSZ_BOTTOMLEFT
#define WMSZ_BOTTOMRIGHT



#define HTERROR
#define HTTRANSPARENT
#define HTNOWHERE
#define HTCLIENT
#define HTCAPTION
#define HTSYSMENU
#define HTGROWBOX
#define HTSIZE
#define HTMENU
#define HTHSCROLL
#define HTVSCROLL
#define HTMINBUTTON
#define HTMAXBUTTON
#define HTLEFT
#define HTRIGHT
#define HTTOP
#define HTTOPLEFT
#define HTTOPRIGHT
#define HTBOTTOM
#define HTBOTTOMLEFT
#define HTBOTTOMRIGHT
#define HTBORDER
#define HTREDUCE
#define HTZOOM
#define HTSIZEFIRST
#define HTSIZELAST
#define HTOBJECT
#define HTCLOSE
#define HTHELP

#define SMTO_NORMAL
#define SMTO_BLOCK
#define SMTO_ABORTIFHUNG
#define SMTO_NOTIMEOUTIFNOTHUNG


#define MA_ACTIVATE
#define MA_ACTIVATEANDEAT
#define MA_NOACTIVATE
#define MA_NOACTIVATEANDEAT

#define ICON_SMALL
#define ICON_BIG
#define ICON_SMALL2

#define RegisterWindowMessage

  __attribute__((dllimport)) UINT RegisterWindowMessageA(LPCSTR lpString);
  __attribute__((dllimport)) UINT RegisterWindowMessageW(LPCWSTR lpString);

#define SIZE_RESTORED
#define SIZE_MINIMIZED
#define SIZE_MAXIMIZED
#define SIZE_MAXSHOW
#define SIZE_MAXHIDE

#define SIZENORMAL
#define SIZEICONIC
#define SIZEFULLSCREEN
#define SIZEZOOMSHOW
#define SIZEZOOMHIDE

  typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
  } WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;

  typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
  } NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;

#define WVR_ALIGNTOP
#define WVR_ALIGNLEFT
#define WVR_ALIGNBOTTOM
#define WVR_ALIGNRIGHT
#define WVR_HREDRAW
#define WVR_VREDRAW
#define WVR_REDRAW
#define WVR_VALIDRECTS



#define MK_LBUTTON
#define MK_RBUTTON
#define MK_SHIFT
#define MK_CONTROL
#define MK_MBUTTON
#define MK_XBUTTON1
#define MK_XBUTTON2



#define TME_HOVER
#define TME_LEAVE
#define TME_NONCLIENT
#define TME_QUERY
#define TME_CANCEL

#define HOVER_DEFAULT


  typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
  } TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;

  __attribute__((dllimport)) WINBOOL TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);




#define WS_OVERLAPPED
#define WS_POPUP
#define WS_CHILD
#define WS_MINIMIZE
#define WS_VISIBLE
#define WS_DISABLED
#define WS_CLIPSIBLINGS
#define WS_CLIPCHILDREN
#define WS_MAXIMIZE
#define WS_CAPTION
#define WS_BORDER
#define WS_DLGFRAME
#define WS_VSCROLL
#define WS_HSCROLL
#define WS_SYSMENU
#define WS_THICKFRAME
#define WS_GROUP
#define WS_TABSTOP
#define WS_MINIMIZEBOX
#define WS_MAXIMIZEBOX
#define WS_TILED
#define WS_ICONIC
#define WS_SIZEBOX
#define WS_TILEDWINDOW
#define WS_OVERLAPPEDWINDOW
#define WS_POPUPWINDOW
#define WS_CHILDWINDOW

#define WS_EX_DLGMODALFRAME
#define WS_EX_NOPARENTNOTIFY
#define WS_EX_TOPMOST
#define WS_EX_ACCEPTFILES
#define WS_EX_TRANSPARENT
#define WS_EX_MDICHILD
#define WS_EX_TOOLWINDOW
#define WS_EX_WINDOWEDGE
#define WS_EX_CLIENTEDGE
#define WS_EX_CONTEXTHELP
#define WS_EX_RIGHT
#define WS_EX_LEFT
#define WS_EX_RTLREADING
#define WS_EX_LTRREADING
#define WS_EX_LEFTSCROLLBAR
#define WS_EX_RIGHTSCROLLBAR
#define WS_EX_CONTROLPARENT
#define WS_EX_STATICEDGE
#define WS_EX_APPWINDOW
#define WS_EX_OVERLAPPEDWINDOW
#define WS_EX_PALETTEWINDOW
#define WS_EX_LAYERED
#define WS_EX_NOINHERITLAYOUT
#define WS_EX_LAYOUTRTL
#define WS_EX_COMPOSITED
#define WS_EX_NOACTIVATE

#define CS_VREDRAW
#define CS_HREDRAW
#define CS_DBLCLKS
#define CS_OWNDC
#define CS_CLASSDC
#define CS_PARENTDC
#define CS_NOCLOSE
#define CS_SAVEBITS
#define CS_BYTEALIGNCLIENT
#define CS_BYTEALIGNWINDOW
#define CS_GLOBALCLASS
#define CS_IME
#define CS_DROPSHADOW


#define PRF_CHECKVISIBLE
#define PRF_NONCLIENT
#define PRF_CLIENT
#define PRF_ERASEBKGND
#define PRF_CHILDREN
#define PRF_OWNED

#define BDR_RAISEDOUTER
#define BDR_SUNKENOUTER
#define BDR_RAISEDINNER
#define BDR_SUNKENINNER

#define BDR_OUTER
#define BDR_INNER
#define BDR_RAISED
#define BDR_SUNKEN

#define EDGE_RAISED
#define EDGE_SUNKEN
#define EDGE_ETCHED
#define EDGE_BUMP

#define BF_LEFT
#define BF_TOP
#define BF_RIGHT
#define BF_BOTTOM

#define BF_TOPLEFT
#define BF_TOPRIGHT
#define BF_BOTTOMLEFT
#define BF_BOTTOMRIGHT
#define BF_RECT

#define BF_DIAGONAL

#define BF_DIAGONAL_ENDTOPRIGHT
#define BF_DIAGONAL_ENDTOPLEFT
#define BF_DIAGONAL_ENDBOTTOMLEFT
#define BF_DIAGONAL_ENDBOTTOMRIGHT

#define BF_MIDDLE
#define BF_SOFT
#define BF_ADJUST
#define BF_FLAT
#define BF_MONO

  __attribute__((dllimport)) WINBOOL DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);

#define DFC_CAPTION
#define DFC_MENU
#define DFC_SCROLL
#define DFC_BUTTON
#define DFC_POPUPMENU

#define DFCS_CAPTIONCLOSE
#define DFCS_CAPTIONMIN
#define DFCS_CAPTIONMAX
#define DFCS_CAPTIONRESTORE
#define DFCS_CAPTIONHELP

#define DFCS_MENUARROW
#define DFCS_MENUCHECK
#define DFCS_MENUBULLET
#define DFCS_MENUARROWRIGHT
#define DFCS_SCROLLUP
#define DFCS_SCROLLDOWN
#define DFCS_SCROLLLEFT
#define DFCS_SCROLLRIGHT
#define DFCS_SCROLLCOMBOBOX
#define DFCS_SCROLLSIZEGRIP
#define DFCS_SCROLLSIZEGRIPRIGHT

#define DFCS_BUTTONCHECK
#define DFCS_BUTTONRADIOIMAGE
#define DFCS_BUTTONRADIOMASK
#define DFCS_BUTTONRADIO
#define DFCS_BUTTON3STATE
#define DFCS_BUTTONPUSH

#define DFCS_INACTIVE
#define DFCS_PUSHED
#define DFCS_CHECKED

#define DFCS_TRANSPARENT
#define DFCS_HOT

#define DFCS_ADJUSTRECT
#define DFCS_FLAT
#define DFCS_MONO

  __attribute__((dllimport)) WINBOOL DrawFrameControl(HDC,LPRECT,UINT,UINT);

#define DC_ACTIVE
#define DC_SMALLCAP
#define DC_ICON
#define DC_TEXT
#define DC_INBUTTON
#define DC_GRADIENT
#define DC_BUTTONS

  __attribute__((dllimport)) WINBOOL DrawCaption(HWND hwnd,HDC hdc,const RECT *lprect,UINT flags);

#define IDANI_OPEN
#define IDANI_CAPTION

  __attribute__((dllimport)) WINBOOL DrawAnimatedRects(HWND hwnd,int idAni,const RECT *lprcFrom,const RECT *lprcTo);



#define CF_TEXT
#define CF_BITMAP
#define CF_METAFILEPICT
#define CF_SYLK
#define CF_DIF
#define CF_TIFF
#define CF_OEMTEXT
#define CF_DIB
#define CF_PALETTE
#define CF_PENDATA
#define CF_RIFF
#define CF_WAVE
#define CF_UNICODETEXT
#define CF_ENHMETAFILE
#define CF_HDROP
#define CF_LOCALE
#define CF_DIBV5
#define CF_MAX

#define CF_OWNERDISPLAY
#define CF_DSPTEXT
#define CF_DSPBITMAP
#define CF_DSPMETAFILEPICT
#define CF_DSPENHMETAFILE

#define CF_PRIVATEFIRST
#define CF_PRIVATELAST

#define CF_GDIOBJFIRST
#define CF_GDIOBJLAST


#define FVIRTKEY
#define FNOINVERT
#define FSHIFT
#define FCONTROL
#define FALT

  typedef struct tagACCEL {
    BYTE fVirt;
    WORD key;
    WORD cmd;
  } ACCEL,*LPACCEL;

  typedef struct tagPAINTSTRUCT {
    HDC hdc;
    WINBOOL fErase;
    RECT rcPaint;
    WINBOOL fRestore;
    WINBOOL fIncUpdate;
    BYTE rgbReserved[32];
  } PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;

  typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTA,*LPCREATESTRUCTA;

  typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTW,*LPCREATESTRUCTW;

  typedef CREATESTRUCTA CREATESTRUCT;
  typedef LPCREATESTRUCTA LPCREATESTRUCT;

  typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
  } WINDOWPLACEMENT;
  typedef WINDOWPLACEMENT *PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;

#define WPF_SETMINPOSITION
#define WPF_RESTORETOMAXIMIZED
#define WPF_ASYNCWINDOWPLACEMENT

  typedef struct tagNMHDR {
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
  } NMHDR;

  typedef NMHDR *LPNMHDR;

  typedef struct tagSTYLESTRUCT {
    DWORD styleOld;
    DWORD styleNew;
  } STYLESTRUCT,*LPSTYLESTRUCT;

#define ODT_MENU
#define ODT_LISTBOX
#define ODT_COMBOBOX
#define ODT_BUTTON
#define ODT_STATIC

#define ODA_DRAWENTIRE
#define ODA_SELECT
#define ODA_FOCUS

#define ODS_SELECTED
#define ODS_GRAYED
#define ODS_DISABLED
#define ODS_CHECKED
#define ODS_FOCUS
#define ODS_DEFAULT
#define ODS_COMBOBOXEDIT
#define ODS_HOTLIGHT
#define ODS_INACTIVE
#define ODS_NOACCEL
#define ODS_NOFOCUSRECT

  typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
  } MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;

  typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
  } DRAWITEMSTRUCT,*PDRAWITEMSTRUCT,*LPDRAWITEMSTRUCT;

  typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
  } DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;

  typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
  } COMPAREITEMSTRUCT,*PCOMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;


#define GetMessage
#define DispatchMessage
#define PeekMessage

  __attribute__((dllimport)) WINBOOL GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
  __attribute__((dllimport)) WINBOOL GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
  __attribute__((dllimport)) WINBOOL TranslateMessage(const MSG *lpMsg);
  __attribute__((dllimport)) LRESULT DispatchMessageA(const MSG *lpMsg);
  __attribute__((dllimport)) LRESULT DispatchMessageW(const MSG *lpMsg);
  __attribute__((dllimport)) WINBOOL SetMessageQueue(int cMessagesMax);
  __attribute__((dllimport)) WINBOOL PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
  __attribute__((dllimport)) WINBOOL PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);

#define PM_NOREMOVE
#define PM_REMOVE
#define PM_NOYIELD
#define PM_QS_INPUT
#define PM_QS_POSTMESSAGE
#define PM_QS_PAINT
#define PM_QS_SENDMESSAGE


  __attribute__((dllimport)) WINBOOL RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
  __attribute__((dllimport)) WINBOOL UnregisterHotKey(HWND hWnd,int id);

#define MOD_ALT
#define MOD_CONTROL
#define MOD_SHIFT
#define MOD_WIN




#define IDHOT_SNAPWINDOW
#define IDHOT_SNAPDESKTOP
# 1770 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define ENDSESSION_LOGOFF

#define EWX_LOGOFF
#define EWX_SHUTDOWN
#define EWX_REBOOT
#define EWX_FORCE
#define EWX_POWEROFF
#define EWX_FORCEIFHUNG

#define ExitWindows

#define SendMessage
#define SendMessageTimeout
#define SendNotifyMessage
#define SendMessageCallback

  __attribute__((dllimport)) WINBOOL ExitWindowsEx(UINT uFlags,DWORD dwReason);
  __attribute__((dllimport)) WINBOOL SwapMouseButton(WINBOOL fSwap);
  __attribute__((dllimport)) DWORD GetMessagePos(void);
  __attribute__((dllimport)) LONG GetMessageTime(void);
  __attribute__((dllimport)) LPARAM GetMessageExtraInfo(void);
  __attribute__((dllimport)) WINBOOL IsWow64Message(void);
  __attribute__((dllimport)) LPARAM SetMessageExtraInfo(LPARAM lParam);
  __attribute__((dllimport)) LRESULT SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
  __attribute__((dllimport)) LRESULT SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
  __attribute__((dllimport)) WINBOOL SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);

  typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
  } BSMINFO,*PBSMINFO;

#define BroadcastSystemMessageEx
#define BroadcastSystemMessage

  __attribute__((dllimport)) long BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
  __attribute__((dllimport)) long BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
  __attribute__((dllimport)) long BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) long BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);

#define BSM_ALLCOMPONENTS
#define BSM_VXDS
#define BSM_NETDRIVER
#define BSM_INSTALLABLEDRIVERS
#define BSM_APPLICATIONS
#define BSM_ALLDESKTOPS

#define BSF_QUERY
#define BSF_IGNORECURRENTTASK
#define BSF_FLUSHDISK
#define BSF_NOHANG
#define BSF_POSTMESSAGE
#define BSF_FORCEIFHUNG
#define BSF_NOTIMEOUTIFNOTHUNG
#define BSF_ALLOWSFW
#define BSF_SENDNOTIFYMESSAGE
#define BSF_RETURNHDESK
#define BSF_LUID

#define BROADCAST_QUERY_DENY

  typedef PVOID HDEVNOTIFY;
  typedef HDEVNOTIFY *PHDEVNOTIFY;

#define DEVICE_NOTIFY_WINDOW_HANDLE
#define DEVICE_NOTIFY_SERVICE_HANDLE
#define DEVICE_NOTIFY_ALL_INTERFACE_CLASSES

#define RegisterDeviceNotification
#define PostMessage
#define PostThreadMessage
#define PostAppMessage
#define DefWindowProc
#define CallWindowProc
#define RegisterClass
#define UnregisterClass
#define GetClassInfo
#define RegisterClassEx
#define GetClassInfoEx


  typedef HANDLE HPOWERNOTIFY;
  typedef HPOWERNOTIFY *PHPOWERNOTIFY;

  typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
  } POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;

  extern const GUID GUID_POWERSCHEME_PERSONALITY;
  extern const GUID GUID_MIN_POWER_SAVINGS;
  extern const GUID GUID_MAX_POWER_SAVINGS;
  extern const GUID GUID_TYPICAL_POWER_SAVINGS;
  extern const GUID GUID_ACDC_POWER_SOURCE;
  extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
  extern const GUID GUID_IDLE_BACKGROUND_TASK;
  extern const GUID GUID_SYSTEM_AWAYMODE;
  extern const GUID GUID_MONITOR_POWER_ON;


  __attribute__((dllimport)) HDEVNOTIFY RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
  __attribute__((dllimport)) HDEVNOTIFY RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);




  __attribute__((dllimport)) WINBOOL UnregisterDeviceNotification(HDEVNOTIFY Handle);
  __attribute__((dllimport)) WINBOOL PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL PostMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL PostThreadMessageA(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL PostThreadMessageW(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
#define PostAppMessageA
#define PostAppMessageW

#define HWND_BROADCAST
#define HWND_MESSAGE

  __attribute__((dllimport)) WINBOOL AttachThreadInput(DWORD idAttach,DWORD idAttachTo,WINBOOL fAttach);
  __attribute__((dllimport)) WINBOOL ReplyMessage(LRESULT lResult);
  __attribute__((dllimport)) WINBOOL WaitMessage(void);
  __attribute__((dllimport)) DWORD WaitForInputIdle(HANDLE hProcess,DWORD dwMilliseconds);
  __attribute__((dllimport)) LRESULT DefWindowProcA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT DefWindowProcW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) void PostQuitMessage(int nExitCode);
  __attribute__((dllimport)) LRESULT CallWindowProcA(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT CallWindowProcW(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL InSendMessage(void);
  __attribute__((dllimport)) DWORD InSendMessageEx(LPVOID lpReserved);

#define ISMEX_NOSEND
#define ISMEX_SEND
#define ISMEX_NOTIFY
#define ISMEX_CALLBACK
#define ISMEX_REPLIED

  __attribute__((dllimport)) UINT GetDoubleClickTime(void);
  __attribute__((dllimport)) WINBOOL SetDoubleClickTime(UINT);
  __attribute__((dllimport)) ATOM RegisterClassA(const WNDCLASSA *lpWndClass);
  __attribute__((dllimport)) ATOM RegisterClassW(const WNDCLASSW *lpWndClass);
  __attribute__((dllimport)) WINBOOL UnregisterClassA(LPCSTR lpClassName,HINSTANCE hInstance);
  __attribute__((dllimport)) WINBOOL UnregisterClassW(LPCWSTR lpClassName,HINSTANCE hInstance);
  __attribute__((dllimport)) WINBOOL GetClassInfoA(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass);
  __attribute__((dllimport)) WINBOOL GetClassInfoW(HINSTANCE hInstance,LPCWSTR lpClassName,LPWNDCLASSW lpWndClass);
  __attribute__((dllimport)) ATOM RegisterClassExA(const WNDCLASSEXA *);
  __attribute__((dllimport)) ATOM RegisterClassExW(const WNDCLASSEXW *);
  __attribute__((dllimport)) WINBOOL GetClassInfoExA(HINSTANCE hInstance,LPCSTR lpszClass,LPWNDCLASSEXA lpwcx);
  __attribute__((dllimport)) WINBOOL GetClassInfoExW(HINSTANCE hInstance,LPCWSTR lpszClass,LPWNDCLASSEXW lpwcx);

#define CW_USEDEFAULT

#define HWND_DESKTOP

  typedef BOOLEAN ( *PREGISTERCLASSNAMEW)(LPCWSTR);

#define CreateWindowEx
#define CreateWindow

  __attribute__((dllimport)) HWND CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
  __attribute__((dllimport)) HWND CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
#define CreateWindowA
#define CreateWindowW
  __attribute__((dllimport)) WINBOOL IsWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL IsMenu(HMENU hMenu);
  __attribute__((dllimport)) WINBOOL IsChild(HWND hWndParent,HWND hWnd);
  __attribute__((dllimport)) WINBOOL DestroyWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL ShowWindow(HWND hWnd,int nCmdShow);
  __attribute__((dllimport)) WINBOOL AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags);


  __attribute__((dllimport)) WINBOOL UpdateLayeredWindow(HWND hWnd,HDC hdcDst,POINT *pptDst,SIZE *psize,HDC hdcSrc,POINT *pptSrc,COLORREF crKey,BLENDFUNCTION *pblend,DWORD dwFlags);

  typedef struct tagUPDATELAYEREDWINDOWINFO {
    DWORD cbSize;
    HDC hdcDst;
    POINT const *pptDst;
    SIZE const *psize;
    HDC hdcSrc;
    POINT const *pptSrc;
    COLORREF crKey;
    BLENDFUNCTION const *pblend;
    DWORD dwFlags;
    RECT const *prcDirty;
  } UPDATELAYEREDWINDOWINFO,*PUPDATELAYEREDWINDOWINFO;

  __attribute__((dllimport)) WINBOOL UpdateLayeredWindowIndirect(HWND hWnd,UPDATELAYEREDWINDOWINFO const *pULWInfo);

  __attribute__((dllimport)) WINBOOL GetLayeredWindowAttributes(HWND hwnd,COLORREF *pcrKey,BYTE *pbAlpha,DWORD *pdwFlags);

#define PW_CLIENTONLY

  __attribute__((dllimport)) WINBOOL PrintWindow(HWND hwnd,HDC hdcBlt,UINT nFlags);
  __attribute__((dllimport)) WINBOOL SetLayeredWindowAttributes(HWND hwnd,COLORREF crKey,BYTE bAlpha,DWORD dwFlags);

#define LWA_COLORKEY
#define LWA_ALPHA

#define ULW_COLORKEY
#define ULW_ALPHA
#define ULW_OPAQUE

#define ULW_EX_NORESIZE

  __attribute__((dllimport)) WINBOOL ShowWindowAsync(HWND hWnd,int nCmdShow);
  __attribute__((dllimport)) WINBOOL FlashWindow(HWND hWnd,WINBOOL bInvert);

  typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
  } FLASHWINFO,*PFLASHWINFO;

  __attribute__((dllimport)) WINBOOL FlashWindowEx(PFLASHWINFO pfwi);

#define FLASHW_STOP
#define FLASHW_CAPTION
#define FLASHW_TRAY
#define FLASHW_ALL
#define FLASHW_TIMER
#define FLASHW_TIMERNOFG

  __attribute__((dllimport)) WINBOOL ShowOwnedPopups(HWND hWnd,WINBOOL fShow);
  __attribute__((dllimport)) WINBOOL OpenIcon(HWND hWnd);
  __attribute__((dllimport)) WINBOOL CloseWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL MoveWindow(HWND hWnd,int X,int Y,int nWidth,int nHeight,WINBOOL bRepaint);
  __attribute__((dllimport)) WINBOOL SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) WINBOOL GetWindowPlacement(HWND hWnd,WINDOWPLACEMENT *lpwndpl);
  __attribute__((dllimport)) WINBOOL SetWindowPlacement(HWND hWnd,const WINDOWPLACEMENT *lpwndpl);


  __attribute__((dllimport)) HDWP BeginDeferWindowPos(int nNumWindows);
  __attribute__((dllimport)) HDWP DeferWindowPos(HDWP hWinPosInfo,HWND hWnd,HWND hWndInsertAfter,int x,int y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) WINBOOL EndDeferWindowPos(HDWP hWinPosInfo);


  __attribute__((dllimport)) WINBOOL IsWindowVisible(HWND hWnd);
  __attribute__((dllimport)) WINBOOL IsIconic(HWND hWnd);
  __attribute__((dllimport)) WINBOOL AnyPopup(void);
  __attribute__((dllimport)) WINBOOL BringWindowToTop(HWND hWnd);
  __attribute__((dllimport)) WINBOOL IsZoomed(HWND hWnd);

#define SWP_NOSIZE
#define SWP_NOMOVE
#define SWP_NOZORDER
#define SWP_NOREDRAW
#define SWP_NOACTIVATE
#define SWP_FRAMECHANGED
#define SWP_SHOWWINDOW
#define SWP_HIDEWINDOW
#define SWP_NOCOPYBITS
#define SWP_NOOWNERZORDER
#define SWP_NOSENDCHANGING

#define SWP_DRAWFRAME
#define SWP_NOREPOSITION
#define SWP_DEFERERASE
#define SWP_ASYNCWINDOWPOS

#define HWND_TOP
#define HWND_BOTTOM
#define HWND_TOPMOST
#define HWND_NOTOPMOST



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack2.h" 1 3






#pragma pack(push,2)
# 2045 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3

  typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
  } DLGTEMPLATE;

  typedef DLGTEMPLATE *LPDLGTEMPLATEA;
  typedef DLGTEMPLATE *LPDLGTEMPLATEW;

  typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

  typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
  typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

  typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;

  typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
  } DLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

  typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

  typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 2087 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3

#define CreateDialogParam
#define CreateDialogIndirectParam
#define CreateDialog
#define CreateDialogIndirect
#define DialogBoxParam
#define DialogBoxIndirectParam
#define DialogBox
#define DialogBoxIndirect
#define SetDlgItemText
#define GetDlgItemText
#define SendDlgItemMessage
#define DefDlgProc

  __attribute__((dllimport)) HWND CreateDialogParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#define CreateDialogA
#define CreateDialogW
#define CreateDialogIndirectA
#define CreateDialogIndirectW
  __attribute__((dllimport)) INT_PTR DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#define DialogBoxA
#define DialogBoxW
#define DialogBoxIndirectA
#define DialogBoxIndirectW
  __attribute__((dllimport)) WINBOOL EndDialog(HWND hDlg,INT_PTR nResult);
  __attribute__((dllimport)) HWND GetDlgItem(HWND hDlg,int nIDDlgItem);
  __attribute__((dllimport)) WINBOOL SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,WINBOOL bSigned);
  __attribute__((dllimport)) UINT GetDlgItemInt(HWND hDlg,int nIDDlgItem,WINBOOL *lpTranslated,WINBOOL bSigned);
  __attribute__((dllimport)) WINBOOL SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString);
  __attribute__((dllimport)) UINT GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax);
  __attribute__((dllimport)) UINT GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax);
  __attribute__((dllimport)) WINBOOL CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
  __attribute__((dllimport)) WINBOOL CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton);
  __attribute__((dllimport)) UINT IsDlgButtonChecked(HWND hDlg,int nIDButton);
  __attribute__((dllimport)) LRESULT SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) HWND GetNextDlgGroupItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
  __attribute__((dllimport)) HWND GetNextDlgTabItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
  __attribute__((dllimport)) int GetDlgCtrlID(HWND hWnd);
  __attribute__((dllimport)) long GetDialogBaseUnits(void);
  __attribute__((dllimport)) LRESULT DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);

#define DLGWINDOWEXTRA




#define CallMsgFilter

  __attribute__((dllimport)) WINBOOL CallMsgFilterA(LPMSG lpMsg,int nCode);
  __attribute__((dllimport)) WINBOOL CallMsgFilterW(LPMSG lpMsg,int nCode);




#define RegisterClipboardFormat
#define GetClipboardFormatName

  __attribute__((dllimport)) WINBOOL OpenClipboard(HWND hWndNewOwner);
  __attribute__((dllimport)) WINBOOL CloseClipboard(void);
  __attribute__((dllimport)) DWORD GetClipboardSequenceNumber(void);
  __attribute__((dllimport)) HWND GetClipboardOwner(void);
  __attribute__((dllimport)) HWND SetClipboardViewer(HWND hWndNewViewer);
  __attribute__((dllimport)) HWND GetClipboardViewer(void);
  __attribute__((dllimport)) WINBOOL ChangeClipboardChain(HWND hWndRemove,HWND hWndNewNext);
  __attribute__((dllimport)) HANDLE SetClipboardData(UINT uFormat,HANDLE hMem);
  __attribute__((dllimport)) HANDLE GetClipboardData(UINT uFormat);
  __attribute__((dllimport)) UINT RegisterClipboardFormatA(LPCSTR lpszFormat);
  __attribute__((dllimport)) UINT RegisterClipboardFormatW(LPCWSTR lpszFormat);
  __attribute__((dllimport)) int CountClipboardFormats(void);
  __attribute__((dllimport)) UINT EnumClipboardFormats(UINT format);
  __attribute__((dllimport)) int GetClipboardFormatNameA(UINT format,LPSTR lpszFormatName,int cchMaxCount);
  __attribute__((dllimport)) int GetClipboardFormatNameW(UINT format,LPWSTR lpszFormatName,int cchMaxCount);
  __attribute__((dllimport)) WINBOOL EmptyClipboard(void);
  __attribute__((dllimport)) WINBOOL IsClipboardFormatAvailable(UINT format);
  __attribute__((dllimport)) int GetPriorityClipboardFormat(UINT *paFormatPriorityList,int cFormats);
  __attribute__((dllimport)) HWND GetOpenClipboardWindow(void);


#define CharToOem
#define OemToChar
#define CharToOemBuff
#define OemToCharBuff
#define CharUpper
#define CharUpperBuff
#define CharLower
#define CharLowerBuff
#define CharNext
#define CharPrev

  __attribute__((dllimport)) WINBOOL CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst);
  __attribute__((dllimport)) WINBOOL CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) LPSTR CharUpperA(LPSTR lpsz);
  __attribute__((dllimport)) LPWSTR CharUpperW(LPWSTR lpsz);
  __attribute__((dllimport)) DWORD CharUpperBuffA(LPSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) DWORD CharUpperBuffW(LPWSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) LPSTR CharLowerA(LPSTR lpsz);
  __attribute__((dllimport)) LPWSTR CharLowerW(LPWSTR lpsz);
  __attribute__((dllimport)) DWORD CharLowerBuffA(LPSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) DWORD CharLowerBuffW(LPWSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) LPSTR CharNextA(LPCSTR lpsz);
  __attribute__((dllimport)) LPWSTR CharNextW(LPCWSTR lpsz);
  __attribute__((dllimport)) LPSTR CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent);
  __attribute__((dllimport)) LPWSTR CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
  __attribute__((dllimport)) LPSTR CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags);
  __attribute__((dllimport)) LPSTR CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags);

#define AnsiToOem
#define OemToAnsi
#define AnsiToOemBuff
#define OemToAnsiBuff
#define AnsiUpper
#define AnsiUpperBuff
#define AnsiLower
#define AnsiLowerBuff
#define AnsiNext
#define AnsiPrev



#define IsCharAlpha
#define IsCharAlphaNumeric
#define IsCharUpper
#define IsCharLower

  __attribute__((dllimport)) WINBOOL IsCharAlphaA(CHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharAlphaW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharAlphaNumericA(CHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharAlphaNumericW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharUpperA(CHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharUpperW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharLowerA(CHAR ch);
  __attribute__((dllimport)) WINBOOL IsCharLowerW(WCHAR ch);


#define GetKeyNameText
#define VkKeyScan
#define VkKeyScanEx

  __attribute__((dllimport)) HWND SetFocus(HWND hWnd);
  __attribute__((dllimport)) HWND GetActiveWindow(void);
  __attribute__((dllimport)) HWND GetFocus(void);
  __attribute__((dllimport)) UINT GetKBCodePage(void);
  __attribute__((dllimport)) SHORT GetKeyState(int nVirtKey);
  __attribute__((dllimport)) SHORT GetAsyncKeyState(int vKey);
  __attribute__((dllimport)) WINBOOL GetKeyboardState(PBYTE lpKeyState);
  __attribute__((dllimport)) WINBOOL SetKeyboardState(LPBYTE lpKeyState);
  __attribute__((dllimport)) int GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize);
  __attribute__((dllimport)) int GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize);
  __attribute__((dllimport)) int GetKeyboardType(int nTypeFlag);
  __attribute__((dllimport)) int ToAscii(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags);
  __attribute__((dllimport)) int ToAsciiEx(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl);
  __attribute__((dllimport)) int ToUnicode(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags);
  __attribute__((dllimport)) DWORD OemKeyScan(WORD wOemChar);
  __attribute__((dllimport)) SHORT VkKeyScanA(CHAR ch);
  __attribute__((dllimport)) SHORT VkKeyScanW(WCHAR ch);
  __attribute__((dllimport)) SHORT VkKeyScanExA(CHAR ch,HKL dwhkl);
  __attribute__((dllimport)) SHORT VkKeyScanExW(WCHAR ch,HKL dwhkl);

#define KEYEVENTF_EXTENDEDKEY
#define KEYEVENTF_KEYUP
#define KEYEVENTF_UNICODE
#define KEYEVENTF_SCANCODE

  __attribute__((dllimport)) void keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo);

#define MOUSEEVENTF_MOVE
#define MOUSEEVENTF_LEFTDOWN
#define MOUSEEVENTF_LEFTUP
#define MOUSEEVENTF_RIGHTDOWN
#define MOUSEEVENTF_RIGHTUP
#define MOUSEEVENTF_MIDDLEDOWN
#define MOUSEEVENTF_MIDDLEUP
#define MOUSEEVENTF_XDOWN
#define MOUSEEVENTF_XUP
#define MOUSEEVENTF_WHEEL
#define MOUSEEVENTF_VIRTUALDESK
#define MOUSEEVENTF_ABSOLUTE

  __attribute__((dllimport)) void mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo);

  typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEINPUT,*PMOUSEINPUT,*LPMOUSEINPUT;

  typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KEYBDINPUT,*PKEYBDINPUT,*LPKEYBDINPUT;

  typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
  } HARDWAREINPUT,*PHARDWAREINPUT,*LPHARDWAREINPUT;

#define INPUT_MOUSE
#define INPUT_KEYBOARD
#define INPUT_HARDWARE

  typedef struct tagINPUT {
    DWORD type;
    __extension__ union {
      MOUSEINPUT mi;
      KEYBDINPUT ki;
      HARDWAREINPUT hi;
    } ;
  } INPUT,*PINPUT,*LPINPUT;

  __attribute__((dllimport)) UINT SendInput(UINT cInputs,LPINPUT pInputs,int cbSize);

  typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
  } LASTINPUTINFO,*PLASTINPUTINFO;

#define MapVirtualKey
#define MapVirtualKeyEx

  __attribute__((dllimport)) WINBOOL GetLastInputInfo(PLASTINPUTINFO plii);
  __attribute__((dllimport)) UINT MapVirtualKeyA(UINT uCode,UINT uMapType);
  __attribute__((dllimport)) UINT MapVirtualKeyW(UINT uCode,UINT uMapType);
  __attribute__((dllimport)) UINT MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl);
  __attribute__((dllimport)) UINT MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl);
  __attribute__((dllimport)) WINBOOL GetInputState(void);
  __attribute__((dllimport)) DWORD GetQueueStatus(UINT flags);
  __attribute__((dllimport)) HWND GetCapture(void);
  __attribute__((dllimport)) HWND SetCapture(HWND hWnd);
  __attribute__((dllimport)) WINBOOL ReleaseCapture(void);
  __attribute__((dllimport)) DWORD MsgWaitForMultipleObjects(DWORD nCount,const HANDLE *pHandles,WINBOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask);
  __attribute__((dllimport)) DWORD MsgWaitForMultipleObjectsEx(DWORD nCount,const HANDLE *pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags);

#define MWMO_WAITALL
#define MWMO_ALERTABLE
#define MWMO_INPUTAVAILABLE

#define QS_KEY
#define QS_MOUSEMOVE
#define QS_MOUSEBUTTON
#define QS_POSTMESSAGE
#define QS_TIMER
#define QS_PAINT
#define QS_SENDMESSAGE
#define QS_HOTKEY
#define QS_ALLPOSTMESSAGE
#define QS_RAWINPUT
#define QS_MOUSE
#define QS_INPUT
#define QS_ALLEVENTS
#define QS_ALLINPUT

#define USER_TIMER_MAXIMUM
#define USER_TIMER_MINIMUM

#define LoadAccelerators
#define CreateAcceleratorTable
#define CopyAcceleratorTable

  __attribute__((dllimport)) UINT_PTR SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
  __attribute__((dllimport)) WINBOOL KillTimer(HWND hWnd,UINT_PTR uIDEvent);
  __attribute__((dllimport)) WINBOOL IsWindowUnicode(HWND hWnd);
  __attribute__((dllimport)) WINBOOL EnableWindow(HWND hWnd,WINBOOL bEnable);
  __attribute__((dllimport)) WINBOOL IsWindowEnabled(HWND hWnd);
  __attribute__((dllimport)) HACCEL LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
  __attribute__((dllimport)) HACCEL LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName);
  __attribute__((dllimport)) HACCEL CreateAcceleratorTableA(LPACCEL paccel,int cAccel);
  __attribute__((dllimport)) HACCEL CreateAcceleratorTableW(LPACCEL paccel,int cAccel);
  __attribute__((dllimport)) WINBOOL DestroyAcceleratorTable(HACCEL hAccel);
  __attribute__((dllimport)) int CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
  __attribute__((dllimport)) int CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);



#define TranslateAccelerator

  __attribute__((dllimport)) int TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
  __attribute__((dllimport)) int TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);




#define SM_CXSCREEN
#define SM_CYSCREEN
#define SM_CXVSCROLL
#define SM_CYHSCROLL
#define SM_CYCAPTION
#define SM_CXBORDER
#define SM_CYBORDER
#define SM_CXDLGFRAME
#define SM_CYDLGFRAME
#define SM_CYVTHUMB
#define SM_CXHTHUMB
#define SM_CXICON
#define SM_CYICON
#define SM_CXCURSOR
#define SM_CYCURSOR
#define SM_CYMENU
#define SM_CXFULLSCREEN
#define SM_CYFULLSCREEN
#define SM_CYKANJIWINDOW
#define SM_MOUSEPRESENT
#define SM_CYVSCROLL
#define SM_CXHSCROLL
#define SM_DEBUG
#define SM_SWAPBUTTON
#define SM_RESERVED1
#define SM_RESERVED2
#define SM_RESERVED3
#define SM_RESERVED4
#define SM_CXMIN
#define SM_CYMIN
#define SM_CXSIZE
#define SM_CYSIZE
#define SM_CXFRAME
#define SM_CYFRAME
#define SM_CXMINTRACK
#define SM_CYMINTRACK
#define SM_CXDOUBLECLK
#define SM_CYDOUBLECLK
#define SM_CXICONSPACING
#define SM_CYICONSPACING
#define SM_MENUDROPALIGNMENT
#define SM_PENWINDOWS
#define SM_DBCSENABLED
#define SM_CMOUSEBUTTONS

#define SM_CXFIXEDFRAME
#define SM_CYFIXEDFRAME
#define SM_CXSIZEFRAME
#define SM_CYSIZEFRAME

#define SM_SECURE
#define SM_CXEDGE
#define SM_CYEDGE
#define SM_CXMINSPACING
#define SM_CYMINSPACING
#define SM_CXSMICON
#define SM_CYSMICON
#define SM_CYSMCAPTION
#define SM_CXSMSIZE
#define SM_CYSMSIZE
#define SM_CXMENUSIZE
#define SM_CYMENUSIZE
#define SM_ARRANGE
#define SM_CXMINIMIZED
#define SM_CYMINIMIZED
#define SM_CXMAXTRACK
#define SM_CYMAXTRACK
#define SM_CXMAXIMIZED
#define SM_CYMAXIMIZED
#define SM_NETWORK
#define SM_CLEANBOOT
#define SM_CXDRAG
#define SM_CYDRAG
#define SM_SHOWSOUNDS
#define SM_CXMENUCHECK
#define SM_CYMENUCHECK
#define SM_SLOWMACHINE
#define SM_MIDEASTENABLED
#define SM_MOUSEWHEELPRESENT
#define SM_XVIRTUALSCREEN
#define SM_YVIRTUALSCREEN
#define SM_CXVIRTUALSCREEN
#define SM_CYVIRTUALSCREEN
#define SM_CMONITORS
#define SM_SAMEDISPLAYFORMAT
#define SM_IMMENABLED
#define SM_CXFOCUSBORDER
#define SM_CYFOCUSBORDER
#define SM_TABLETPC
#define SM_MEDIACENTER
#define SM_STARTER
#define SM_SERVERR2


#define SM_CMETRICS


#define SM_REMOTESESSION
#define SM_SHUTTINGDOWN
#define SM_REMOTECONTROL
#define SM_CARETBLINKINGENABLED
# 2517 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
  __attribute__((dllimport)) int GetSystemMetrics(int nIndex);




#define LoadMenu
#define LoadMenuIndirect
#define ChangeMenu
#define GetMenuString
#define InsertMenu
#define AppendMenu
#define ModifyMenu

  __attribute__((dllimport)) HMENU LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
  __attribute__((dllimport)) HMENU LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName);
  __attribute__((dllimport)) HMENU LoadMenuIndirectA(const MENUTEMPLATEA *lpMenuTemplate);
  __attribute__((dllimport)) HMENU LoadMenuIndirectW(const MENUTEMPLATEW *lpMenuTemplate);
  __attribute__((dllimport)) HMENU GetMenu(HWND hWnd);
  __attribute__((dllimport)) WINBOOL SetMenu(HWND hWnd,HMENU hMenu);
  __attribute__((dllimport)) WINBOOL ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags);
  __attribute__((dllimport)) WINBOOL ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags);
  __attribute__((dllimport)) WINBOOL HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite);
  __attribute__((dllimport)) int GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags);
  __attribute__((dllimport)) int GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags);
  __attribute__((dllimport)) UINT GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
  __attribute__((dllimport)) WINBOOL DrawMenuBar(HWND hWnd);

#define PMB_ACTIVE

  __attribute__((dllimport)) HMENU GetSystemMenu(HWND hWnd,WINBOOL bRevert);
  __attribute__((dllimport)) HMENU CreateMenu(void);
  __attribute__((dllimport)) HMENU CreatePopupMenu(void);
  __attribute__((dllimport)) WINBOOL DestroyMenu(HMENU hMenu);
  __attribute__((dllimport)) DWORD CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck);
  __attribute__((dllimport)) WINBOOL EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable);
  __attribute__((dllimport)) HMENU GetSubMenu(HMENU hMenu,int nPos);
  __attribute__((dllimport)) UINT GetMenuItemID(HMENU hMenu,int nPos);
  __attribute__((dllimport)) int GetMenuItemCount(HMENU hMenu);
  __attribute__((dllimport)) WINBOOL InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
  __attribute__((dllimport)) WINBOOL DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
  __attribute__((dllimport)) WINBOOL SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
  __attribute__((dllimport)) LONG GetMenuCheckMarkDimensions(void);
  __attribute__((dllimport)) WINBOOL TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,const RECT *prcRect);

#define MNC_IGNORE
#define MNC_CLOSE
#define MNC_EXECUTE
#define MNC_SELECT

  typedef struct tagTPMPARAMS {
    UINT cbSize;
    RECT rcExclude;
  } TPMPARAMS;

  typedef TPMPARAMS *LPTPMPARAMS;

  __attribute__((dllimport)) WINBOOL TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);

#define MNS_NOCHECK
#define MNS_MODELESS
#define MNS_DRAGDROP
#define MNS_AUTODISMISS
#define MNS_NOTIFYBYPOS
#define MNS_CHECKORBMP

#define MIM_MAXHEIGHT
#define MIM_BACKGROUND
#define MIM_HELPID
#define MIM_MENUDATA
#define MIM_STYLE
#define MIM_APPLYTOSUBMENUS

  typedef struct tagMENUINFO {
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
  } MENUINFO,*LPMENUINFO;

  typedef MENUINFO const *LPCMENUINFO;

  __attribute__((dllimport)) WINBOOL GetMenuInfo(HMENU,LPMENUINFO);
  __attribute__((dllimport)) WINBOOL SetMenuInfo(HMENU,LPCMENUINFO);
  __attribute__((dllimport)) WINBOOL EndMenu(void);

#define MND_CONTINUE
#define MND_ENDMENU

  typedef struct tagMENUGETOBJECTINFO {
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
  } MENUGETOBJECTINFO,*PMENUGETOBJECTINFO;

#define MNGOF_TOPGAP
#define MNGOF_BOTTOMGAP

#define MNGO_NOINTERFACE
#define MNGO_NOERROR

#define MIIM_STATE
#define MIIM_ID
#define MIIM_SUBMENU
#define MIIM_CHECKMARKS
#define MIIM_TYPE
#define MIIM_DATA

#define MIIM_STRING
#define MIIM_BITMAP
#define MIIM_FTYPE

#define HBMMENU_CALLBACK
#define HBMMENU_SYSTEM
#define HBMMENU_MBAR_RESTORE
#define HBMMENU_MBAR_MINIMIZE
#define HBMMENU_MBAR_CLOSE
#define HBMMENU_MBAR_CLOSE_D
#define HBMMENU_MBAR_MINIMIZE_D
#define HBMMENU_POPUP_CLOSE
#define HBMMENU_POPUP_RESTORE
#define HBMMENU_POPUP_MAXIMIZE
#define HBMMENU_POPUP_MINIMIZE

  typedef struct tagMENUITEMINFOA {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOA,*LPMENUITEMINFOA;

  typedef struct tagMENUITEMINFOW {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOW,*LPMENUITEMINFOW;

  typedef MENUITEMINFOA MENUITEMINFO;
  typedef LPMENUITEMINFOA LPMENUITEMINFO;

  typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
  typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

  typedef LPCMENUITEMINFOA LPCMENUITEMINFO;

#define InsertMenuItem
#define GetMenuItemInfo
#define SetMenuItemInfo

  __attribute__((dllimport)) WINBOOL InsertMenuItemA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOA lpmi);
  __attribute__((dllimport)) WINBOOL InsertMenuItemW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOW lpmi);
  __attribute__((dllimport)) WINBOOL GetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii);
  __attribute__((dllimport)) WINBOOL GetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOW lpmii);
  __attribute__((dllimport)) WINBOOL SetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii);
  __attribute__((dllimport)) WINBOOL SetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOW lpmii);

#define GMDI_USEDISABLED
#define GMDI_GOINTOPOPUPS

  __attribute__((dllimport)) UINT GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags);
  __attribute__((dllimport)) WINBOOL SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos);
  __attribute__((dllimport)) WINBOOL GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem);
  __attribute__((dllimport)) int MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen);

#define TPM_LEFTBUTTON
#define TPM_RIGHTBUTTON
#define TPM_LEFTALIGN
#define TPM_CENTERALIGN
#define TPM_RIGHTALIGN
#define TPM_TOPALIGN
#define TPM_VCENTERALIGN
#define TPM_BOTTOMALIGN

#define TPM_HORIZONTAL
#define TPM_VERTICAL
#define TPM_NONOTIFY
#define TPM_RETURNCMD
#define TPM_RECURSE
#define TPM_HORPOSANIMATION
#define TPM_HORNEGANIMATION
#define TPM_VERPOSANIMATION
#define TPM_VERNEGANIMATION
#define TPM_NOANIMATION
#define TPM_LAYOUTRTL


  typedef struct tagDROPSTRUCT {
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
  } DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;

#define DOF_EXECUTABLE
#define DOF_DOCUMENT
#define DOF_DIRECTORY
#define DOF_MULTIPLE
#define DOF_PROGMAN
#define DOF_SHELLDATA

#define DO_DROPFILE
#define DO_PRINTFILE

  __attribute__((dllimport)) DWORD DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur);
  __attribute__((dllimport)) WINBOOL DragDetect(HWND hwnd,POINT pt);
  __attribute__((dllimport)) WINBOOL DrawIcon(HDC hDC,int X,int Y,HICON hIcon);



#define DT_TOP
#define DT_LEFT
#define DT_CENTER
#define DT_RIGHT
#define DT_VCENTER
#define DT_BOTTOM
#define DT_WORDBREAK
#define DT_SINGLELINE
#define DT_EXPANDTABS
#define DT_TABSTOP
#define DT_NOCLIP
#define DT_EXTERNALLEADING
#define DT_CALCRECT
#define DT_NOPREFIX
#define DT_INTERNAL

#define DT_EDITCONTROL
#define DT_PATH_ELLIPSIS
#define DT_END_ELLIPSIS
#define DT_MODIFYSTRING
#define DT_RTLREADING
#define DT_WORD_ELLIPSIS
#define DT_NOFULLWIDTHCHARBREAK
#define DT_HIDEPREFIX
#define DT_PREFIXONLY

  typedef struct tagDRAWTEXTPARAMS {
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
  } DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;

#define DrawText
#define DrawTextEx

  __attribute__((dllimport)) int DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format);
  __attribute__((dllimport)) int DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format);
  __attribute__((dllimport)) int DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
  __attribute__((dllimport)) int DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);


#define GrayString
#define DrawState
#define TabbedTextOut
#define GetTabbedTextExtent

  __attribute__((dllimport)) WINBOOL GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
  __attribute__((dllimport)) WINBOOL GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);

#define DST_COMPLEX
#define DST_TEXT
#define DST_PREFIXTEXT
#define DST_ICON
#define DST_BITMAP

#define DSS_NORMAL
#define DSS_UNION
#define DSS_DISABLED
#define DSS_MONO
#define DSS_HIDEPREFIX
#define DSS_PREFIXONLY
#define DSS_RIGHT

  __attribute__((dllimport)) WINBOOL DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) WINBOOL DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) LONG TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
  __attribute__((dllimport)) LONG TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
  __attribute__((dllimport)) DWORD GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
  __attribute__((dllimport)) DWORD GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
  __attribute__((dllimport)) WINBOOL UpdateWindow(HWND hWnd);
  __attribute__((dllimport)) HWND SetActiveWindow(HWND hWnd);
  __attribute__((dllimport)) HWND GetForegroundWindow(void);
  __attribute__((dllimport)) WINBOOL PaintDesktop(HDC hdc);
  __attribute__((dllimport)) void SwitchToThisWindow(HWND hwnd,WINBOOL fUnknown);
  __attribute__((dllimport)) WINBOOL SetForegroundWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL AllowSetForegroundWindow(DWORD dwProcessId);

#define ASFW_ANY

  __attribute__((dllimport)) WINBOOL LockSetForegroundWindow(UINT uLockCode);

#define LSFW_LOCK
#define LSFW_UNLOCK

  __attribute__((dllimport)) HWND WindowFromDC(HDC hDC);
  __attribute__((dllimport)) HDC GetDC(HWND hWnd);
  __attribute__((dllimport)) HDC GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);

#define DCX_WINDOW
#define DCX_CACHE
#define DCX_NORESETATTRS
#define DCX_CLIPCHILDREN
#define DCX_CLIPSIBLINGS
#define DCX_PARENTCLIP
#define DCX_EXCLUDERGN
#define DCX_INTERSECTRGN
#define DCX_EXCLUDEUPDATE
#define DCX_INTERSECTUPDATE
#define DCX_LOCKWINDOWUPDATE

#define DCX_VALIDATE

  __attribute__((dllimport)) HDC GetWindowDC(HWND hWnd);
  __attribute__((dllimport)) int ReleaseDC(HWND hWnd,HDC hDC);
  __attribute__((dllimport)) HDC BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
  __attribute__((dllimport)) WINBOOL EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint);
  __attribute__((dllimport)) WINBOOL GetUpdateRect(HWND hWnd,LPRECT lpRect,WINBOOL bErase);
  __attribute__((dllimport)) int GetUpdateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
  __attribute__((dllimport)) int SetWindowRgn(HWND hWnd,HRGN hRgn,WINBOOL bRedraw);
  __attribute__((dllimport)) int GetWindowRgn(HWND hWnd,HRGN hRgn);
  __attribute__((dllimport)) int GetWindowRgnBox(HWND hWnd,LPRECT lprc);
  __attribute__((dllimport)) int ExcludeUpdateRgn(HDC hDC,HWND hWnd);
  __attribute__((dllimport)) WINBOOL InvalidateRect(HWND hWnd,const RECT *lpRect,WINBOOL bErase);
  __attribute__((dllimport)) WINBOOL ValidateRect(HWND hWnd,const RECT *lpRect);
  __attribute__((dllimport)) WINBOOL InvalidateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
  __attribute__((dllimport)) WINBOOL ValidateRgn(HWND hWnd,HRGN hRgn);
  __attribute__((dllimport)) WINBOOL RedrawWindow(HWND hWnd,const RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);

#define RDW_INVALIDATE
#define RDW_INTERNALPAINT
#define RDW_ERASE

#define RDW_VALIDATE
#define RDW_NOINTERNALPAINT
#define RDW_NOERASE

#define RDW_NOCHILDREN
#define RDW_ALLCHILDREN

#define RDW_UPDATENOW
#define RDW_ERASENOW

#define RDW_FRAME
#define RDW_NOFRAME

  __attribute__((dllimport)) WINBOOL LockWindowUpdate(HWND hWndLock);
  __attribute__((dllimport)) WINBOOL ScrollWindow(HWND hWnd,int XAmount,int YAmount,const RECT *lpRect,const RECT *lpClipRect);
  __attribute__((dllimport)) WINBOOL ScrollDC(HDC hDC,int dx,int dy,const RECT *lprcScroll,const RECT *lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate);
  __attribute__((dllimport)) int ScrollWindowEx(HWND hWnd,int dx,int dy,const RECT *prcScroll,const RECT *prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags);

#define SW_SCROLLCHILDREN
#define SW_INVALIDATE
#define SW_ERASE
#define SW_SMOOTHSCROLL


  __attribute__((dllimport)) int SetScrollPos(HWND hWnd,int nBar,int nPos,WINBOOL bRedraw);
  __attribute__((dllimport)) int GetScrollPos(HWND hWnd,int nBar);
  __attribute__((dllimport)) WINBOOL SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,WINBOOL bRedraw);
  __attribute__((dllimport)) WINBOOL GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos);
  __attribute__((dllimport)) WINBOOL ShowScrollBar(HWND hWnd,int wBar,WINBOOL bShow);
  __attribute__((dllimport)) WINBOOL EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows);

#define ESB_ENABLE_BOTH
#define ESB_DISABLE_BOTH

#define ESB_DISABLE_LEFT
#define ESB_DISABLE_RIGHT

#define ESB_DISABLE_UP
#define ESB_DISABLE_DOWN

#define ESB_DISABLE_LTUP
#define ESB_DISABLE_RTDN


#define SetProp
#define GetProp
#define RemoveProp
#define EnumPropsEx
#define EnumProps
#define SetWindowText
#define GetWindowText
#define GetWindowTextLength

  __attribute__((dllimport)) WINBOOL SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
  __attribute__((dllimport)) WINBOOL SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData);
  __attribute__((dllimport)) HANDLE GetPropA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) HANDLE GetPropW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) HANDLE RemovePropA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) HANDLE RemovePropW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) int EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) int EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) int EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc);
  __attribute__((dllimport)) int EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc);
  __attribute__((dllimport)) WINBOOL SetWindowTextA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL SetWindowTextW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) int GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
  __attribute__((dllimport)) int GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount);
  __attribute__((dllimport)) int GetWindowTextLengthA(HWND hWnd);
  __attribute__((dllimport)) int GetWindowTextLengthW(HWND hWnd);
  __attribute__((dllimport)) WINBOOL GetClientRect(HWND hWnd,LPRECT lpRect);
  __attribute__((dllimport)) WINBOOL GetWindowRect(HWND hWnd,LPRECT lpRect);
  __attribute__((dllimport)) WINBOOL AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu);
  __attribute__((dllimport)) WINBOOL AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu,DWORD dwExStyle);

#define HELPINFO_WINDOW
#define HELPINFO_MENUITEM

  typedef struct tagHELPINFO {
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
  } HELPINFO,*LPHELPINFO;

  __attribute__((dllimport)) WINBOOL SetWindowContextHelpId(HWND,DWORD);
  __attribute__((dllimport)) DWORD GetWindowContextHelpId(HWND);
  __attribute__((dllimport)) WINBOOL SetMenuContextHelpId(HMENU,DWORD);
  __attribute__((dllimport)) DWORD GetMenuContextHelpId(HMENU);



#define MB_OK
#define MB_OKCANCEL
#define MB_ABORTRETRYIGNORE
#define MB_YESNOCANCEL
#define MB_YESNO
#define MB_RETRYCANCEL
#define MB_CANCELTRYCONTINUE
#define MB_ICONHAND
#define MB_ICONQUESTION
#define MB_ICONEXCLAMATION
#define MB_ICONASTERISK
#define MB_USERICON
#define MB_ICONWARNING
#define MB_ICONERROR
#define MB_ICONINFORMATION
#define MB_ICONSTOP
#define MB_DEFBUTTON1
#define MB_DEFBUTTON2
#define MB_DEFBUTTON3
#define MB_DEFBUTTON4
#define MB_APPLMODAL
#define MB_SYSTEMMODAL
#define MB_TASKMODAL
#define MB_HELP
#define MB_NOFOCUS
#define MB_SETFOREGROUND
#define MB_DEFAULT_DESKTOP_ONLY
#define MB_TOPMOST
#define MB_RIGHT
#define MB_RTLREADING
#define MB_SERVICE_NOTIFICATION
#define MB_SERVICE_NOTIFICATION_NT3X
#define MB_TYPEMASK
#define MB_ICONMASK
#define MB_DEFMASK
#define MB_MODEMASK
#define MB_MISCMASK

#define MessageBox
#define MessageBoxEx

  __attribute__((dllimport)) int MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType);
  __attribute__((dllimport)) int MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType);
  __attribute__((dllimport)) int MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId);
  __attribute__((dllimport)) int MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId);

  typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

  typedef struct tagMSGBOXPARAMSA {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;

  typedef struct tagMSGBOXPARAMSW {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;

  typedef MSGBOXPARAMSA MSGBOXPARAMS;
  typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
  typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;

#define MessageBoxIndirect

  __attribute__((dllimport)) int MessageBoxIndirectA(const MSGBOXPARAMSA *lpmbp);
  __attribute__((dllimport)) int MessageBoxIndirectW(const MSGBOXPARAMSW *lpmbp);
  __attribute__((dllimport)) WINBOOL MessageBeep(UINT uType);


  __attribute__((dllimport)) int ShowCursor(WINBOOL bShow);
  __attribute__((dllimport)) WINBOOL SetCursorPos(int X,int Y);
  __attribute__((dllimport)) HCURSOR SetCursor(HCURSOR hCursor);
  __attribute__((dllimport)) WINBOOL GetCursorPos(LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL ClipCursor(const RECT *lpRect);
  __attribute__((dllimport)) WINBOOL GetClipCursor(LPRECT lpRect);
  __attribute__((dllimport)) HCURSOR GetCursor(void);
  __attribute__((dllimport)) WINBOOL CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight);
  __attribute__((dllimport)) UINT GetCaretBlinkTime(void);
  __attribute__((dllimport)) WINBOOL SetCaretBlinkTime(UINT uMSeconds);
  __attribute__((dllimport)) WINBOOL DestroyCaret(void);
  __attribute__((dllimport)) WINBOOL HideCaret(HWND hWnd);
  __attribute__((dllimport)) WINBOOL ShowCaret(HWND hWnd);
  __attribute__((dllimport)) WINBOOL SetCaretPos(int X,int Y);
  __attribute__((dllimport)) WINBOOL GetCaretPos(LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL ClientToScreen(HWND hWnd,LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL ScreenToClient(HWND hWnd,LPPOINT lpPoint);
  __attribute__((dllimport)) int MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
  __attribute__((dllimport)) HWND WindowFromPoint(POINT Point);
  __attribute__((dllimport)) HWND ChildWindowFromPoint(HWND hWndParent,POINT Point);

#define CWP_ALL
#define CWP_SKIPINVISIBLE
#define CWP_SKIPDISABLED
#define CWP_SKIPTRANSPARENT

  __attribute__((dllimport)) HWND ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags);



#define CTLCOLOR_MSGBOX
#define CTLCOLOR_EDIT
#define CTLCOLOR_LISTBOX
#define CTLCOLOR_BTN
#define CTLCOLOR_DLG
#define CTLCOLOR_SCROLLBAR
#define CTLCOLOR_STATIC
#define CTLCOLOR_MAX

#define COLOR_SCROLLBAR
#define COLOR_BACKGROUND
#define COLOR_ACTIVECAPTION
#define COLOR_INACTIVECAPTION
#define COLOR_MENU
#define COLOR_WINDOW
#define COLOR_WINDOWFRAME
#define COLOR_MENUTEXT
#define COLOR_WINDOWTEXT
#define COLOR_CAPTIONTEXT
#define COLOR_ACTIVEBORDER
#define COLOR_INACTIVEBORDER
#define COLOR_APPWORKSPACE
#define COLOR_HIGHLIGHT
#define COLOR_HIGHLIGHTTEXT
#define COLOR_BTNFACE
#define COLOR_BTNSHADOW
#define COLOR_GRAYTEXT
#define COLOR_BTNTEXT
#define COLOR_INACTIVECAPTIONTEXT
#define COLOR_BTNHIGHLIGHT

#define COLOR_3DDKSHADOW
#define COLOR_3DLIGHT
#define COLOR_INFOTEXT
#define COLOR_INFOBK

#define COLOR_HOTLIGHT
#define COLOR_GRADIENTACTIVECAPTION
#define COLOR_GRADIENTINACTIVECAPTION
#define COLOR_MENUHILIGHT
#define COLOR_MENUBAR

#define COLOR_DESKTOP
#define COLOR_3DFACE
#define COLOR_3DSHADOW
#define COLOR_3DHIGHLIGHT
#define COLOR_3DHILIGHT
#define COLOR_BTNHILIGHT

  __attribute__((dllimport)) DWORD GetSysColor(int nIndex);
  __attribute__((dllimport)) HBRUSH GetSysColorBrush(int nIndex);
  __attribute__((dllimport)) WINBOOL SetSysColors(int cElements,const INT *lpaElements,const COLORREF *lpaRgbValues);


  __attribute__((dllimport)) WINBOOL DrawFocusRect(HDC hDC,const RECT *lprc);
  __attribute__((dllimport)) int FillRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
  __attribute__((dllimport)) int FrameRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
  __attribute__((dllimport)) WINBOOL InvertRect(HDC hDC,const RECT *lprc);
  __attribute__((dllimport)) WINBOOL SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom);
  __attribute__((dllimport)) WINBOOL SetRectEmpty(LPRECT lprc);
  __attribute__((dllimport)) WINBOOL CopyRect(LPRECT lprcDst,const RECT *lprcSrc);
  __attribute__((dllimport)) WINBOOL InflateRect(LPRECT lprc,int dx,int dy);
  __attribute__((dllimport)) WINBOOL IntersectRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL UnionRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL SubtractRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL OffsetRect(LPRECT lprc,int dx,int dy);
  __attribute__((dllimport)) WINBOOL IsRectEmpty(const RECT *lprc);
  __attribute__((dllimport)) WINBOOL EqualRect(const RECT *lprc1,const RECT *lprc2);
  __attribute__((dllimport)) WINBOOL PtInRect(const RECT *lprc,POINT pt);



#define GetWindowLong
#define SetWindowLong

  __attribute__((dllimport)) WORD GetWindowWord(HWND hWnd,int nIndex);
  __attribute__((dllimport)) WORD SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord);
  __attribute__((dllimport)) LONG GetWindowLongA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG GetWindowLongW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
  __attribute__((dllimport)) LONG SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong);



#define GetWindowLongPtr
#define SetWindowLongPtr

  __attribute__((dllimport)) LONG_PTR GetWindowLongPtrA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG_PTR GetWindowLongPtrW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG_PTR SetWindowLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
  __attribute__((dllimport)) LONG_PTR SetWindowLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
# 3189 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define GetClassLong
#define SetClassLong

  __attribute__((dllimport)) WORD GetClassWord(HWND hWnd,int nIndex);
  __attribute__((dllimport)) WORD SetClassWord(HWND hWnd,int nIndex,WORD wNewWord);
  __attribute__((dllimport)) DWORD GetClassLongA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) DWORD GetClassLongW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) DWORD SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong);
  __attribute__((dllimport)) DWORD SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong);



#define GetClassLongPtr
#define SetClassLongPtr

  __attribute__((dllimport)) ULONG_PTR GetClassLongPtrA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) ULONG_PTR GetClassLongPtrW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) ULONG_PTR SetClassLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
  __attribute__((dllimport)) ULONG_PTR SetClassLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
# 3219 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define FindWindow
#define FindWindowEx
#define GetClassName

  __attribute__((dllimport)) WINBOOL GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
  __attribute__((dllimport)) WINBOOL SetProcessDefaultLayout(DWORD dwDefaultLayout);
  __attribute__((dllimport)) HWND GetDesktopWindow(void);
  __attribute__((dllimport)) HWND GetParent(HWND hWnd);
  __attribute__((dllimport)) HWND SetParent(HWND hWndChild,HWND hWndNewParent);
  __attribute__((dllimport)) WINBOOL EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) HWND FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
  __attribute__((dllimport)) HWND FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName);
  __attribute__((dllimport)) HWND FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
  __attribute__((dllimport)) HWND FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow);
  __attribute__((dllimport)) HWND GetShellWindow(void);
  __attribute__((dllimport)) WINBOOL RegisterShellHookWindow(HWND hwnd);
  __attribute__((dllimport)) WINBOOL DeregisterShellHookWindow(HWND hwnd);
  __attribute__((dllimport)) WINBOOL EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam);

#define EnumTaskWindows

  __attribute__((dllimport)) int GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
  __attribute__((dllimport)) int GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount);
  __attribute__((dllimport)) HWND GetTopWindow(HWND hWnd);

#define GetNextWindow
#define GetSysModalWindow
#define SetSysModalWindow

  __attribute__((dllimport)) DWORD GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
  __attribute__((dllimport)) WINBOOL IsGUIThread(WINBOOL bConvert);

#define GetWindowTask

  __attribute__((dllimport)) HWND GetLastActivePopup(HWND hWnd);

#define GW_HWNDFIRST
#define GW_HWNDLAST
#define GW_HWNDNEXT
#define GW_HWNDPREV
#define GW_OWNER
#define GW_CHILD
#define GW_ENABLEDPOPUP
#define GW_MAX

  __attribute__((dllimport)) HWND GetWindow(HWND hWnd,UINT uCmd);



#define SetWindowsHook
#define SetWindowsHookEx

  __attribute__((dllimport)) HHOOK SetWindowsHookA(int nFilterType,HOOKPROC pfnFilterProc);
  __attribute__((dllimport)) HHOOK SetWindowsHookW(int nFilterType,HOOKPROC pfnFilterProc);
  __attribute__((dllimport)) WINBOOL UnhookWindowsHook(int nCode,HOOKPROC pfnFilterProc);
  __attribute__((dllimport)) HHOOK SetWindowsHookExA(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
  __attribute__((dllimport)) HHOOK SetWindowsHookExW(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
  __attribute__((dllimport)) WINBOOL UnhookWindowsHookEx(HHOOK hhk);
  __attribute__((dllimport)) LRESULT CallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam);
#define DefHookProc




#define MF_INSERT
#define MF_CHANGE
#define MF_APPEND
#define MF_DELETE
#define MF_REMOVE
#define MF_BYCOMMAND
#define MF_BYPOSITION
#define MF_SEPARATOR
#define MF_ENABLED
#define MF_GRAYED
#define MF_DISABLED
#define MF_UNCHECKED
#define MF_CHECKED
#define MF_USECHECKBITMAPS
#define MF_STRING
#define MF_BITMAP
#define MF_OWNERDRAW
#define MF_POPUP
#define MF_MENUBARBREAK
#define MF_MENUBREAK
#define MF_UNHILITE
#define MF_HILITE
#define MF_DEFAULT
#define MF_SYSMENU
#define MF_HELP
#define MF_RIGHTJUSTIFY
#define MF_MOUSESELECT
#define MF_END

#define MFT_STRING
#define MFT_BITMAP
#define MFT_MENUBARBREAK
#define MFT_MENUBREAK
#define MFT_OWNERDRAW
#define MFT_RADIOCHECK
#define MFT_SEPARATOR
#define MFT_RIGHTORDER
#define MFT_RIGHTJUSTIFY

#define MFS_GRAYED
#define MFS_DISABLED
#define MFS_CHECKED
#define MFS_HILITE
#define MFS_ENABLED
#define MFS_UNCHECKED
#define MFS_UNHILITE
#define MFS_DEFAULT

  __attribute__((dllimport)) WINBOOL CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags);

  typedef struct {
    WORD versionNumber;
    WORD offset;
  } MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;

  typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
  } MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
#define MF_END




#define SC_SIZE
#define SC_MOVE
#define SC_MINIMIZE
#define SC_MAXIMIZE
#define SC_NEXTWINDOW
#define SC_PREVWINDOW
#define SC_CLOSE
#define SC_VSCROLL
#define SC_HSCROLL
#define SC_MOUSEMENU
#define SC_KEYMENU
#define SC_ARRANGE
#define SC_RESTORE
#define SC_TASKLIST
#define SC_SCREENSAVE
#define SC_HOTKEY
#define SC_DEFAULT
#define SC_MONITORPOWER
#define SC_CONTEXTHELP
#define SC_SEPARATOR
#define SC_ICON
#define SC_ZOOM


#define LoadBitmap
#define LoadCursor
#define LoadCursorFromFile

  __attribute__((dllimport)) HBITMAP LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
  __attribute__((dllimport)) HBITMAP LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName);
  __attribute__((dllimport)) HCURSOR LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName);
  __attribute__((dllimport)) HCURSOR LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName);
  __attribute__((dllimport)) HCURSOR LoadCursorFromFileA(LPCSTR lpFileName);
  __attribute__((dllimport)) HCURSOR LoadCursorFromFileW(LPCWSTR lpFileName);
  __attribute__((dllimport)) HCURSOR CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,const void *pvANDPlane,const void *pvXORPlane);
  __attribute__((dllimport)) WINBOOL DestroyCursor(HCURSOR hCursor);

#define CopyCursor

#define IDC_ARROW
#define IDC_IBEAM
#define IDC_WAIT
#define IDC_CROSS
#define IDC_UPARROW
#define IDC_SIZE
#define IDC_ICON
#define IDC_SIZENWSE
#define IDC_SIZENESW
#define IDC_SIZEWE
#define IDC_SIZENS
#define IDC_SIZEALL
#define IDC_NO
#define IDC_HAND
#define IDC_APPSTARTING
#define IDC_HELP

  __attribute__((dllimport)) WINBOOL SetSystemCursor(HCURSOR hcur,DWORD id);

  typedef struct _ICONINFO {
    WINBOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
  } ICONINFO;
  typedef ICONINFO *PICONINFO;

#define LoadIcon
#define PrivateExtractIcons

  __attribute__((dllimport)) HICON LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName);
  __attribute__((dllimport)) HICON LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName);
  __attribute__((dllimport)) UINT PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
  __attribute__((dllimport)) UINT PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
  __attribute__((dllimport)) HICON CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,const BYTE *lpbANDbits,const BYTE *lpbXORbits);
  __attribute__((dllimport)) WINBOOL DestroyIcon(HICON hIcon);
  __attribute__((dllimport)) int LookupIconIdFromDirectory(PBYTE presbits,WINBOOL fIcon);
  __attribute__((dllimport)) int LookupIconIdFromDirectoryEx(PBYTE presbits,WINBOOL fIcon,int cxDesired,int cyDesired,UINT Flags);
  __attribute__((dllimport)) HICON CreateIconFromResource(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer);
  __attribute__((dllimport)) HICON CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags);

  typedef struct tagCURSORSHAPE {
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
  } CURSORSHAPE,*LPCURSORSHAPE;

#define IMAGE_BITMAP
#define IMAGE_ICON
#define IMAGE_CURSOR
#define IMAGE_ENHMETAFILE

#define LR_DEFAULTCOLOR
#define LR_MONOCHROME
#define LR_COLOR
#define LR_COPYRETURNORG
#define LR_COPYDELETEORG
#define LR_LOADFROMFILE
#define LR_LOADTRANSPARENT
#define LR_DEFAULTSIZE
#define LR_VGACOLOR
#define LR_LOADMAP3DCOLORS
#define LR_CREATEDIBSECTION
#define LR_COPYFROMRESOURCE
#define LR_SHARED

#define LoadImage

  __attribute__((dllimport)) HANDLE LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad);
  __attribute__((dllimport)) HANDLE LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad);
  __attribute__((dllimport)) HANDLE CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags);

#define DI_MASK
#define DI_IMAGE
#define DI_NORMAL
#define DI_COMPAT
#define DI_DEFAULTSIZE
#define DI_NOMIRROR

  __attribute__((dllimport)) WINBOOL DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags);
  __attribute__((dllimport)) HICON CreateIconIndirect(PICONINFO piconinfo);
  __attribute__((dllimport)) HICON CopyIcon(HICON hIcon);
  __attribute__((dllimport)) WINBOOL GetIconInfo(HICON hIcon,PICONINFO piconinfo);

#define RES_ICON
#define RES_CURSOR
# 3546 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define ORD_LANGDRIVER
# 3558 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
#define IDI_APPLICATION
#define IDI_HAND
#define IDI_QUESTION
#define IDI_EXCLAMATION
#define IDI_ASTERISK
#define IDI_WINLOGO


#define IDI_WARNING
#define IDI_ERROR
#define IDI_INFORMATION


#define IDOK
#define IDCANCEL
#define IDABORT
#define IDRETRY
#define IDIGNORE
#define IDYES
#define IDNO
#define IDCLOSE
#define IDHELP
#define IDTRYAGAIN
#define IDCONTINUE


#define IDTIMEOUT





#define ES_LEFT
#define ES_CENTER
#define ES_RIGHT
#define ES_MULTILINE
#define ES_UPPERCASE
#define ES_LOWERCASE
#define ES_PASSWORD
#define ES_AUTOVSCROLL
#define ES_AUTOHSCROLL
#define ES_NOHIDESEL
#define ES_OEMCONVERT
#define ES_READONLY
#define ES_WANTRETURN
#define ES_NUMBER


#define EN_SETFOCUS
#define EN_KILLFOCUS
#define EN_CHANGE
#define EN_UPDATE
#define EN_ERRSPACE
#define EN_MAXTEXT
#define EN_HSCROLL
#define EN_VSCROLL
#define EN_ALIGN_LTR_EC
#define EN_ALIGN_RTL_EC

#define EC_LEFTMARGIN
#define EC_RIGHTMARGIN
#define EC_USEFONTINFO

#define EMSIS_COMPOSITIONSTRING

#define EIMES_GETCOMPSTRATONCE
#define EIMES_CANCELCOMPSTRINFOCUS
#define EIMES_COMPLETECOMPSTRKILLFOCUS



#define EM_GETSEL
#define EM_SETSEL
#define EM_GETRECT
#define EM_SETRECT
#define EM_SETRECTNP
#define EM_SCROLL
#define EM_LINESCROLL
#define EM_SCROLLCARET
#define EM_GETMODIFY
#define EM_SETMODIFY
#define EM_GETLINECOUNT
#define EM_LINEINDEX
#define EM_SETHANDLE
#define EM_GETHANDLE
#define EM_GETTHUMB
#define EM_LINELENGTH
#define EM_REPLACESEL
#define EM_GETLINE
#define EM_LIMITTEXT
#define EM_CANUNDO
#define EM_UNDO
#define EM_FMTLINES
#define EM_LINEFROMCHAR
#define EM_SETTABSTOPS
#define EM_SETPASSWORDCHAR
#define EM_EMPTYUNDOBUFFER
#define EM_GETFIRSTVISIBLELINE
#define EM_SETREADONLY
#define EM_SETWORDBREAKPROC
#define EM_GETWORDBREAKPROC
#define EM_GETPASSWORDCHAR
#define EM_SETMARGINS
#define EM_GETMARGINS
#define EM_SETLIMITTEXT
#define EM_GETLIMITTEXT
#define EM_POSFROMCHAR
#define EM_CHARFROMPOS
#define EM_SETIMESTATUS
#define EM_GETIMESTATUS


#define WB_LEFT
#define WB_RIGHT
#define WB_ISDELIMITER

#define BS_PUSHBUTTON
#define BS_DEFPUSHBUTTON
#define BS_CHECKBOX
#define BS_AUTOCHECKBOX
#define BS_RADIOBUTTON
#define BS_3STATE
#define BS_AUTO3STATE
#define BS_GROUPBOX
#define BS_USERBUTTON
#define BS_AUTORADIOBUTTON
#define BS_PUSHBOX
#define BS_OWNERDRAW
#define BS_TYPEMASK
#define BS_LEFTTEXT
#define BS_TEXT
#define BS_ICON
#define BS_BITMAP
#define BS_LEFT
#define BS_RIGHT
#define BS_CENTER
#define BS_TOP
#define BS_BOTTOM
#define BS_VCENTER
#define BS_PUSHLIKE
#define BS_MULTILINE
#define BS_NOTIFY
#define BS_FLAT
#define BS_RIGHTBUTTON

#define BN_CLICKED
#define BN_PAINT
#define BN_HILITE
#define BN_UNHILITE
#define BN_DISABLE
#define BN_DOUBLECLICKED
#define BN_PUSHED
#define BN_UNPUSHED
#define BN_DBLCLK
#define BN_SETFOCUS
#define BN_KILLFOCUS

#define BM_GETCHECK
#define BM_SETCHECK
#define BM_GETSTATE
#define BM_SETSTATE
#define BM_SETSTYLE
#define BM_CLICK
#define BM_GETIMAGE
#define BM_SETIMAGE

#define BST_UNCHECKED
#define BST_CHECKED
#define BST_INDETERMINATE
#define BST_PUSHED
#define BST_FOCUS

#define SS_LEFT
#define SS_CENTER
#define SS_RIGHT
#define SS_ICON
#define SS_BLACKRECT
#define SS_GRAYRECT
#define SS_WHITERECT
#define SS_BLACKFRAME
#define SS_GRAYFRAME
#define SS_WHITEFRAME
#define SS_USERITEM
#define SS_SIMPLE
#define SS_LEFTNOWORDWRAP
#define SS_OWNERDRAW
#define SS_BITMAP
#define SS_ENHMETAFILE
#define SS_ETCHEDHORZ
#define SS_ETCHEDVERT
#define SS_ETCHEDFRAME
#define SS_TYPEMASK
#define SS_REALSIZECONTROL
#define SS_NOPREFIX
#define SS_NOTIFY
#define SS_CENTERIMAGE
#define SS_RIGHTJUST
#define SS_REALSIZEIMAGE
#define SS_SUNKEN
#define SS_EDITCONTROL
#define SS_ENDELLIPSIS
#define SS_PATHELLIPSIS
#define SS_WORDELLIPSIS
#define SS_ELLIPSISMASK



#define STM_SETICON
#define STM_GETICON
#define STM_SETIMAGE
#define STM_GETIMAGE
#define STN_CLICKED
#define STN_DBLCLK
#define STN_ENABLE
#define STN_DISABLE
#define STM_MSGMAX


#define WC_DIALOG

#define DWL_MSGRESULT
#define DWL_DLGPROC
#define DWL_USER



#undef DWL_MSGRESULT
#undef DWL_DLGPROC
#undef DWL_USER


#define DWLP_MSGRESULT
#define DWLP_DLGPROC
#define DWLP_USER



#define IsDialogMessage

  __attribute__((dllimport)) WINBOOL IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
  __attribute__((dllimport)) WINBOOL IsDialogMessageW(HWND hDlg,LPMSG lpMsg);


#define DlgDirList
#define DlgDirSelectEx
#define DlgDirListComboBox
#define DlgDirSelectComboBoxEx

  __attribute__((dllimport)) WINBOOL MapDialogRect(HWND hDlg,LPRECT lpRect);
  __attribute__((dllimport)) int DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
  __attribute__((dllimport)) int DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);

#define DDL_READWRITE
#define DDL_READONLY
#define DDL_HIDDEN
#define DDL_SYSTEM
#define DDL_DIRECTORY
#define DDL_ARCHIVE

#define DDL_POSTMSGS
#define DDL_DRIVES
#define DDL_EXCLUSIVE

  __attribute__((dllimport)) WINBOOL DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox);
  __attribute__((dllimport)) WINBOOL DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox);
  __attribute__((dllimport)) int DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
  __attribute__((dllimport)) int DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
  __attribute__((dllimport)) WINBOOL DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox);
  __attribute__((dllimport)) WINBOOL DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox);

#define DS_ABSALIGN
#define DS_SYSMODAL
#define DS_LOCALEDIT
#define DS_SETFONT
#define DS_MODALFRAME
#define DS_NOIDLEMSG
#define DS_SETFOREGROUND

#define DS_3DLOOK
#define DS_FIXEDSYS
#define DS_NOFAILCREATE
#define DS_CONTROL
#define DS_CENTER
#define DS_CENTERMOUSE
#define DS_CONTEXTHELP

#define DS_SHELLFONT





#define DM_GETDEFID
#define DM_SETDEFID
#define DM_REPOSITION

#define DC_HASDEFID

#define DLGC_WANTARROWS
#define DLGC_WANTTAB
#define DLGC_WANTALLKEYS
#define DLGC_WANTMESSAGE
#define DLGC_HASSETSEL
#define DLGC_DEFPUSHBUTTON
#define DLGC_UNDEFPUSHBUTTON
#define DLGC_RADIOBUTTON
#define DLGC_WANTCHARS
#define DLGC_STATIC
#define DLGC_BUTTON

#define LB_CTLCODE

#define LB_OKAY
#define LB_ERR
#define LB_ERRSPACE

#define LBN_ERRSPACE
#define LBN_SELCHANGE
#define LBN_DBLCLK
#define LBN_SELCANCEL
#define LBN_SETFOCUS
#define LBN_KILLFOCUS



#define LB_ADDSTRING
#define LB_INSERTSTRING
#define LB_DELETESTRING
#define LB_SELITEMRANGEEX
#define LB_RESETCONTENT
#define LB_SETSEL
#define LB_SETCURSEL
#define LB_GETSEL
#define LB_GETCURSEL
#define LB_GETTEXT
#define LB_GETTEXTLEN
#define LB_GETCOUNT
#define LB_SELECTSTRING
#define LB_DIR
#define LB_GETTOPINDEX
#define LB_FINDSTRING
#define LB_GETSELCOUNT
#define LB_GETSELITEMS
#define LB_SETTABSTOPS
#define LB_GETHORIZONTALEXTENT
#define LB_SETHORIZONTALEXTENT
#define LB_SETCOLUMNWIDTH
#define LB_ADDFILE
#define LB_SETTOPINDEX
#define LB_GETITEMRECT
#define LB_GETITEMDATA
#define LB_SETITEMDATA
#define LB_SELITEMRANGE
#define LB_SETANCHORINDEX
#define LB_GETANCHORINDEX
#define LB_SETCARETINDEX
#define LB_GETCARETINDEX
#define LB_SETITEMHEIGHT
#define LB_GETITEMHEIGHT
#define LB_FINDSTRINGEXACT
#define LB_SETLOCALE
#define LB_GETLOCALE
#define LB_SETCOUNT
#define LB_INITSTORAGE
#define LB_ITEMFROMPOINT



#define LB_GETLISTBOXINFO
#define LB_MSGMAX




#define LBS_NOTIFY
#define LBS_SORT
#define LBS_NOREDRAW
#define LBS_MULTIPLESEL
#define LBS_OWNERDRAWFIXED
#define LBS_OWNERDRAWVARIABLE
#define LBS_HASSTRINGS
#define LBS_USETABSTOPS
#define LBS_NOINTEGRALHEIGHT
#define LBS_MULTICOLUMN
#define LBS_WANTKEYBOARDINPUT
#define LBS_EXTENDEDSEL
#define LBS_DISABLENOSCROLL
#define LBS_NODATA
#define LBS_NOSEL
#define LBS_COMBOBOX

#define LBS_STANDARD


#define CB_OKAY
#define CB_ERR
#define CB_ERRSPACE

#define CBN_ERRSPACE
#define CBN_SELCHANGE
#define CBN_DBLCLK
#define CBN_SETFOCUS
#define CBN_KILLFOCUS
#define CBN_EDITCHANGE
#define CBN_EDITUPDATE
#define CBN_DROPDOWN
#define CBN_CLOSEUP
#define CBN_SELENDOK
#define CBN_SELENDCANCEL



#define CBS_SIMPLE
#define CBS_DROPDOWN
#define CBS_DROPDOWNLIST
#define CBS_OWNERDRAWFIXED
#define CBS_OWNERDRAWVARIABLE
#define CBS_AUTOHSCROLL
#define CBS_OEMCONVERT
#define CBS_SORT
#define CBS_HASSTRINGS
#define CBS_NOINTEGRALHEIGHT
#define CBS_DISABLENOSCROLL
#define CBS_UPPERCASE
#define CBS_LOWERCASE



#define CB_GETEDITSEL
#define CB_LIMITTEXT
#define CB_SETEDITSEL
#define CB_ADDSTRING
#define CB_DELETESTRING
#define CB_DIR
#define CB_GETCOUNT
#define CB_GETCURSEL
#define CB_GETLBTEXT
#define CB_GETLBTEXTLEN
#define CB_INSERTSTRING
#define CB_RESETCONTENT
#define CB_FINDSTRING
#define CB_SELECTSTRING
#define CB_SETCURSEL
#define CB_SHOWDROPDOWN
#define CB_GETITEMDATA
#define CB_SETITEMDATA
#define CB_GETDROPPEDCONTROLRECT
#define CB_SETITEMHEIGHT
#define CB_GETITEMHEIGHT
#define CB_SETEXTENDEDUI
#define CB_GETEXTENDEDUI
#define CB_GETDROPPEDSTATE
#define CB_FINDSTRINGEXACT
#define CB_SETLOCALE
#define CB_GETLOCALE
#define CB_GETTOPINDEX
#define CB_SETTOPINDEX
#define CB_GETHORIZONTALEXTENT
#define CB_SETHORIZONTALEXTENT
#define CB_GETDROPPEDWIDTH
#define CB_SETDROPPEDWIDTH
#define CB_INITSTORAGE



#define CB_GETCOMBOBOXINFO
#define CB_MSGMAX




#define SBS_HORZ
#define SBS_VERT
#define SBS_TOPALIGN
#define SBS_LEFTALIGN
#define SBS_BOTTOMALIGN
#define SBS_RIGHTALIGN
#define SBS_SIZEBOXTOPLEFTALIGN
#define SBS_SIZEBOXBOTTOMRIGHTALIGN
#define SBS_SIZEBOX
#define SBS_SIZEGRIP



#define SBM_SETPOS
#define SBM_GETPOS
#define SBM_SETRANGE
#define SBM_SETRANGEREDRAW
#define SBM_GETRANGE
#define SBM_ENABLE_ARROWS
#define SBM_SETSCROLLINFO
#define SBM_GETSCROLLINFO
#define SBM_GETSCROLLBARINFO

#define SIF_RANGE
#define SIF_PAGE
#define SIF_POS
#define SIF_DISABLENOSCROLL
#define SIF_TRACKPOS
#define SIF_ALL

  typedef struct tagSCROLLINFO {
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
  } SCROLLINFO,*LPSCROLLINFO;
  typedef SCROLLINFO const *LPCSCROLLINFO;

  __attribute__((dllimport)) int SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,WINBOOL redraw);
  __attribute__((dllimport)) WINBOOL GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi);





#define MDIS_ALLCHILDSTYLES

#define MDITILE_VERTICAL
#define MDITILE_HORIZONTAL
#define MDITILE_SKIPDISABLED
#define MDITILE_ZORDER

  typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTA,*LPMDICREATESTRUCTA;

  typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTW,*LPMDICREATESTRUCTW;

  typedef MDICREATESTRUCTA MDICREATESTRUCT;
  typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;

  typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
  } CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;

#define DefFrameProc
#define DefMDIChildProc
#define CreateMDIWindow

  __attribute__((dllimport)) LRESULT DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);


  __attribute__((dllimport)) WINBOOL TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg);


  __attribute__((dllimport)) UINT ArrangeIconicWindows(HWND hWnd);
  __attribute__((dllimport)) HWND CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
  __attribute__((dllimport)) HWND CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
  __attribute__((dllimport)) WORD TileWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);
  __attribute__((dllimport)) WORD CascadeWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);





  typedef DWORD HELPPOLY;
  typedef struct tagMULTIKEYHELPA {
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
  } MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;

  typedef struct tagMULTIKEYHELPW {
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
  } MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;

  typedef MULTIKEYHELPA MULTIKEYHELP;
  typedef PMULTIKEYHELPA PMULTIKEYHELP;
  typedef LPMULTIKEYHELPA LPMULTIKEYHELP;

  typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
  } HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;

  typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
  } HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;

  typedef HELPWININFOA HELPWININFO;
  typedef PHELPWININFOA PHELPWININFO;
  typedef LPHELPWININFOA LPHELPWININFO;

#define HELP_CONTEXT
#define HELP_QUIT
#define HELP_INDEX
#define HELP_CONTENTS
#define HELP_HELPONHELP
#define HELP_SETINDEX
#define HELP_SETCONTENTS
#define HELP_CONTEXTPOPUP
#define HELP_FORCEFILE
#define HELP_KEY
#define HELP_COMMAND
#define HELP_PARTIALKEY
#define HELP_MULTIKEY
#define HELP_SETWINPOS
#define HELP_CONTEXTMENU
#define HELP_FINDER
#define HELP_WM_HELP
#define HELP_SETPOPUP_POS

#define HELP_TCARD
#define HELP_TCARD_DATA
#define HELP_TCARD_OTHER_CALLER

#define IDH_NO_HELP
#define IDH_MISSING_CONTEXT
#define IDH_GENERIC_HELP_BUTTON
#define IDH_OK
#define IDH_CANCEL
#define IDH_HELP

#define WinHelp

  __attribute__((dllimport)) WINBOOL WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);


#define GR_GDIOBJECTS
#define GR_USEROBJECTS

  __attribute__((dllimport)) DWORD GetGuiResources(HANDLE hProcess,DWORD uiFlags);



#define SPI_GETBEEP
#define SPI_SETBEEP
#define SPI_GETMOUSE
#define SPI_SETMOUSE
#define SPI_GETBORDER
#define SPI_SETBORDER
#define SPI_GETKEYBOARDSPEED
#define SPI_SETKEYBOARDSPEED
#define SPI_LANGDRIVER
#define SPI_ICONHORIZONTALSPACING
#define SPI_GETSCREENSAVETIMEOUT
#define SPI_SETSCREENSAVETIMEOUT
#define SPI_GETSCREENSAVEACTIVE
#define SPI_SETSCREENSAVEACTIVE
#define SPI_GETGRIDGRANULARITY
#define SPI_SETGRIDGRANULARITY
#define SPI_SETDESKWALLPAPER
#define SPI_SETDESKPATTERN
#define SPI_GETKEYBOARDDELAY
#define SPI_SETKEYBOARDDELAY
#define SPI_ICONVERTICALSPACING
#define SPI_GETICONTITLEWRAP
#define SPI_SETICONTITLEWRAP
#define SPI_GETMENUDROPALIGNMENT
#define SPI_SETMENUDROPALIGNMENT
#define SPI_SETDOUBLECLKWIDTH
#define SPI_SETDOUBLECLKHEIGHT
#define SPI_GETICONTITLELOGFONT
#define SPI_SETDOUBLECLICKTIME
#define SPI_SETMOUSEBUTTONSWAP
#define SPI_SETICONTITLELOGFONT
#define SPI_GETFASTTASKSWITCH
#define SPI_SETFASTTASKSWITCH
#define SPI_SETDRAGFULLWINDOWS
#define SPI_GETDRAGFULLWINDOWS
#define SPI_GETNONCLIENTMETRICS
#define SPI_SETNONCLIENTMETRICS
#define SPI_GETMINIMIZEDMETRICS
#define SPI_SETMINIMIZEDMETRICS
#define SPI_GETICONMETRICS
#define SPI_SETICONMETRICS
#define SPI_SETWORKAREA
#define SPI_GETWORKAREA
#define SPI_SETPENWINDOWS

#define SPI_GETHIGHCONTRAST
#define SPI_SETHIGHCONTRAST
#define SPI_GETKEYBOARDPREF
#define SPI_SETKEYBOARDPREF
#define SPI_GETSCREENREADER
#define SPI_SETSCREENREADER
#define SPI_GETANIMATION
#define SPI_SETANIMATION
#define SPI_GETFONTSMOOTHING
#define SPI_SETFONTSMOOTHING
#define SPI_SETDRAGWIDTH
#define SPI_SETDRAGHEIGHT
#define SPI_SETHANDHELD
#define SPI_GETLOWPOWERTIMEOUT
#define SPI_GETPOWEROFFTIMEOUT
#define SPI_SETLOWPOWERTIMEOUT
#define SPI_SETPOWEROFFTIMEOUT
#define SPI_GETLOWPOWERACTIVE
#define SPI_GETPOWEROFFACTIVE
#define SPI_SETLOWPOWERACTIVE
#define SPI_SETPOWEROFFACTIVE
#define SPI_SETCURSORS
#define SPI_SETICONS
#define SPI_GETDEFAULTINPUTLANG
#define SPI_SETDEFAULTINPUTLANG
#define SPI_SETLANGTOGGLE
#define SPI_GETWINDOWSEXTENSION
#define SPI_SETMOUSETRAILS
#define SPI_GETMOUSETRAILS
#define SPI_SETSCREENSAVERRUNNING
#define SPI_SCREENSAVERRUNNING
#define SPI_GETFILTERKEYS
#define SPI_SETFILTERKEYS
#define SPI_GETTOGGLEKEYS
#define SPI_SETTOGGLEKEYS
#define SPI_GETMOUSEKEYS
#define SPI_SETMOUSEKEYS
#define SPI_GETSHOWSOUNDS
#define SPI_SETSHOWSOUNDS
#define SPI_GETSTICKYKEYS
#define SPI_SETSTICKYKEYS
#define SPI_GETACCESSTIMEOUT
#define SPI_SETACCESSTIMEOUT
#define SPI_GETSERIALKEYS
#define SPI_SETSERIALKEYS
#define SPI_GETSOUNDSENTRY
#define SPI_SETSOUNDSENTRY
#define SPI_GETSNAPTODEFBUTTON
#define SPI_SETSNAPTODEFBUTTON
#define SPI_GETMOUSEHOVERWIDTH
#define SPI_SETMOUSEHOVERWIDTH
#define SPI_GETMOUSEHOVERHEIGHT
#define SPI_SETMOUSEHOVERHEIGHT
#define SPI_GETMOUSEHOVERTIME
#define SPI_SETMOUSEHOVERTIME
#define SPI_GETWHEELSCROLLLINES
#define SPI_SETWHEELSCROLLLINES
#define SPI_GETMENUSHOWDELAY
#define SPI_SETMENUSHOWDELAY
#define SPI_GETWHEELSCROLLCHARS
#define SPI_SETWHEELSCROLLCHARS
#define SPI_GETSHOWIMEUI
#define SPI_SETSHOWIMEUI
#define SPI_GETMOUSESPEED
#define SPI_SETMOUSESPEED
#define SPI_GETSCREENSAVERRUNNING
#define SPI_GETDESKWALLPAPER
#define SPI_GETAUDIODESCRIPTION
#define SPI_SETAUDIODESCRIPTION
#define SPI_GETSCREENSAVESECURE
#define SPI_SETSCREENSAVESECURE
#define SPI_GETHUNGAPPTIMEOUT
#define SPI_SETHUNGAPPTIMEOUT
#define SPI_GETWAITTOKILLTIMEOUT
#define SPI_SETWAITTOKILLTIMEOUT
#define SPI_GETWAITTOKILLSERVICETIMEOUT
#define SPI_SETWAITTOKILLSERVICETIMEOUT
#define SPI_GETMOUSEDOCKTHRESHOLD
#define SPI_SETMOUSEDOCKTHRESHOLD
#define SPI_GETPENDOCKTHRESHOLD
#define SPI_SETPENDOCKTHRESHOLD
#define SPI_GETWINARRANGING
#define SPI_SETWINARRANGING
#define SPI_GETMOUSEDRAGOUTTHRESHOLD
#define SPI_SETMOUSEDRAGOUTTHRESHOLD
#define SPI_GETPENDRAGOUTTHRESHOLD
#define SPI_SETPENDRAGOUTTHRESHOLD
#define SPI_GETMOUSESIDEMOVETHRESHOLD
#define SPI_SETMOUSESIDEMOVETHRESHOLD
#define SPI_GETPENSIDEMOVETHRESHOLD
#define SPI_SETPENSIDEMOVETHRESHOLD
#define SPI_GETDRAGFROMMAXIMIZE
#define SPI_SETDRAGFROMMAXIMIZE
#define SPI_GETSNAPSIZING
#define SPI_GETDOCKMOVING
#define SPI_SETDOCKMOVING






#define SPI_GETACTIVEWINDOWTRACKING
#define SPI_SETACTIVEWINDOWTRACKING
#define SPI_GETMENUANIMATION
#define SPI_SETMENUANIMATION
#define SPI_GETCOMBOBOXANIMATION
#define SPI_SETCOMBOBOXANIMATION
#define SPI_GETLISTBOXSMOOTHSCROLLING
#define SPI_SETLISTBOXSMOOTHSCROLLING
#define SPI_GETGRADIENTCAPTIONS
#define SPI_SETGRADIENTCAPTIONS
#define SPI_GETKEYBOARDCUES
#define SPI_SETKEYBOARDCUES
#define SPI_GETMENUUNDERLINES
#define SPI_SETMENUUNDERLINES
#define SPI_GETACTIVEWNDTRKZORDER
#define SPI_SETACTIVEWNDTRKZORDER
#define SPI_GETHOTTRACKING
#define SPI_SETHOTTRACKING
#define SPI_GETMENUFADE
#define SPI_SETMENUFADE
#define SPI_GETSELECTIONFADE
#define SPI_SETSELECTIONFADE
#define SPI_GETTOOLTIPANIMATION
#define SPI_SETTOOLTIPANIMATION
#define SPI_GETTOOLTIPFADE
#define SPI_SETTOOLTIPFADE
#define SPI_GETCURSORSHADOW
#define SPI_SETCURSORSHADOW
#define SPI_GETMOUSESONAR
#define SPI_SETMOUSESONAR
#define SPI_GETMOUSECLICKLOCK
#define SPI_SETMOUSECLICKLOCK
#define SPI_GETMOUSEVANISH
#define SPI_SETMOUSEVANISH
#define SPI_GETFLATMENU
#define SPI_SETFLATMENU
#define SPI_GETDROPSHADOW
#define SPI_SETDROPSHADOW
#define SPI_GETBLOCKSENDINPUTRESETS
#define SPI_SETBLOCKSENDINPUTRESETS
#define SPI_GETUIEFFECTS
#define SPI_SETUIEFFECTS
#define SPI_GETDISABLEOVERLAPPEDCONTENT
#define SPI_SETDISABLEOVERLAPPEDCONTENT
#define SPI_GETCLIENTAREAANIMATION
#define SPI_SETCLIENTAREAANIMATION
#define SPI_GETCLEARTYPE
#define SPI_SETCLEARTYPE
#define SPI_GETFOREGROUNDLOCKTIMEOUT
#define SPI_SETFOREGROUNDLOCKTIMEOUT
#define SPI_GETACTIVEWNDTRKTIMEOUT
#define SPI_SETACTIVEWNDTRKTIMEOUT
#define SPI_GETFOREGROUNDFLASHCOUNT
#define SPI_SETFOREGROUNDFLASHCOUNT
#define SPI_GETCARETWIDTH
#define SPI_SETCARETWIDTH
#define SPI_GETMOUSECLICKLOCKTIME
#define SPI_SETMOUSECLICKLOCKTIME
#define SPI_GETFONTSMOOTHINGTYPE
#define SPI_SETFONTSMOOTHINGTYPE

#define FE_FONTSMOOTHINGSTANDARD
#define FE_FONTSMOOTHINGCLEARTYPE
#define FE_FONTSMOOTHINGDOCKING

#define SPI_GETFONTSMOOTHINGCONTRAST
#define SPI_SETFONTSMOOTHINGCONTRAST
#define SPI_GETFOCUSBORDERWIDTH
#define SPI_SETFOCUSBORDERWIDTH
#define SPI_GETFOCUSBORDERHEIGHT
#define SPI_SETFOCUSBORDERHEIGHT
#define SPI_GETFONTSMOOTHINGORIENTATION
#define SPI_SETFONTSMOOTHINGORIENTATION
#define SPI_GETMESSAGEDURATION
#define SPI_SETMESSAGEDURATION

#define FE_FONTSMOOTHINGORIENTATIONBGR
#define FE_FONTSMOOTHINGORIENTATIONRGB

#define SPIF_UPDATEINIFILE
#define SPIF_SENDWININICHANGE
#define SPIF_SENDCHANGE

#define METRICS_USEDEFAULT


  typedef struct tagNONCLIENTMETRICSA {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
  } NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,*LPNONCLIENTMETRICSA;

  typedef struct tagNONCLIENTMETRICSW {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
  } NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,*LPNONCLIENTMETRICSW;

  typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
  typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
  typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;



#define ARW_BOTTOMLEFT
#define ARW_BOTTOMRIGHT
#define ARW_TOPLEFT
#define ARW_TOPRIGHT
#define ARW_STARTMASK
#define ARW_STARTRIGHT
#define ARW_STARTTOP

#define ARW_LEFT
#define ARW_RIGHT
#define ARW_UP
#define ARW_DOWN
#define ARW_HIDE

  typedef struct tagMINIMIZEDMETRICS {
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
  } MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;



  typedef struct tagICONMETRICSA {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
  } ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;

  typedef struct tagICONMETRICSW {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
  } ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;

  typedef ICONMETRICSA ICONMETRICS;
  typedef PICONMETRICSA PICONMETRICS;
  typedef LPICONMETRICSA LPICONMETRICS;



  typedef struct tagANIMATIONINFO {
    UINT cbSize;
    int iMinAnimate;
  } ANIMATIONINFO,*LPANIMATIONINFO;

  typedef struct tagSERIALKEYSA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSA,*LPSERIALKEYSA;

  typedef struct tagSERIALKEYSW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSW,*LPSERIALKEYSW;

  typedef SERIALKEYSA SERIALKEYS;
  typedef LPSERIALKEYSA LPSERIALKEYS;

#define SERKF_SERIALKEYSON
#define SERKF_AVAILABLE
#define SERKF_INDICATOR

  typedef struct tagHIGHCONTRASTA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
  } HIGHCONTRASTA,*LPHIGHCONTRASTA;

  typedef struct tagHIGHCONTRASTW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
  } HIGHCONTRASTW,*LPHIGHCONTRASTW;

  typedef HIGHCONTRASTA HIGHCONTRAST;
  typedef LPHIGHCONTRASTA LPHIGHCONTRAST;

#define HCF_HIGHCONTRASTON
#define HCF_AVAILABLE
#define HCF_HOTKEYACTIVE
#define HCF_CONFIRMHOTKEY
#define HCF_HOTKEYSOUND
#define HCF_INDICATOR
#define HCF_HOTKEYAVAILABLE
#define HCF_LOGONDESKTOP
#define HCF_DEFAULTDESKTOP

#define CDS_UPDATEREGISTRY
#define CDS_TEST
#define CDS_FULLSCREEN
#define CDS_GLOBAL
#define CDS_SET_PRIMARY
#define CDS_VIDEOPARAMETERS
#define CDS_RESET
#define CDS_NORESET

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/tvout.h" 1 3






#define __TVOUT__

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/tvout.h" 2 3

typedef struct _VIDEOPARAMETERS {
  GUID Guid;
  ULONG dwOffset;
  ULONG dwCommand;
  ULONG dwFlags;
  ULONG dwMode;
  ULONG dwTVStandard;
  ULONG dwAvailableModes;
  ULONG dwAvailableTVStandard;
  ULONG dwFlickerFilter;
  ULONG dwOverScanX;
  ULONG dwOverScanY;
  ULONG dwMaxUnscaledX;
  ULONG dwMaxUnscaledY;
  ULONG dwPositionX;
  ULONG dwPositionY;
  ULONG dwBrightness;
  ULONG dwContrast;
  ULONG dwCPType;
  ULONG dwCPCommand;
  ULONG dwCPStandard;
  ULONG dwCPKey;
  ULONG bCP_APSTriggerBits;
  UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS,*PVIDEOPARAMETERS,*LPVIDEOPARAMETERS;

#define VP_COMMAND_GET
#define VP_COMMAND_SET

#define VP_FLAGS_TV_MODE
#define VP_FLAGS_TV_STANDARD
#define VP_FLAGS_FLICKER
#define VP_FLAGS_OVERSCAN
#define VP_FLAGS_MAX_UNSCALED
#define VP_FLAGS_POSITION
#define VP_FLAGS_BRIGHTNESS
#define VP_FLAGS_CONTRAST
#define VP_FLAGS_COPYPROTECT

#define VP_MODE_WIN_GRAPHICS
#define VP_MODE_TV_PLAYBACK

#define VP_TV_STANDARD_NTSC_M
#define VP_TV_STANDARD_NTSC_M_J
#define VP_TV_STANDARD_PAL_B
#define VP_TV_STANDARD_PAL_D
#define VP_TV_STANDARD_PAL_H
#define VP_TV_STANDARD_PAL_I
#define VP_TV_STANDARD_PAL_M
#define VP_TV_STANDARD_PAL_N
#define VP_TV_STANDARD_SECAM_B
#define VP_TV_STANDARD_SECAM_D
#define VP_TV_STANDARD_SECAM_G
#define VP_TV_STANDARD_SECAM_H
#define VP_TV_STANDARD_SECAM_K
#define VP_TV_STANDARD_SECAM_K1
#define VP_TV_STANDARD_SECAM_L
#define VP_TV_STANDARD_WIN_VGA
#define VP_TV_STANDARD_NTSC_433
#define VP_TV_STANDARD_PAL_G
#define VP_TV_STANDARD_PAL_60
#define VP_TV_STANDARD_SECAM_L1

#define VP_CP_TYPE_APS_TRIGGER
#define VP_CP_TYPE_MACROVISION
#define VP_CP_CMD_ACTIVATE
#define VP_CP_CMD_DEACTIVATE
#define VP_CP_CMD_CHANGE
# 4611 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 2 3

#define DISP_CHANGE_SUCCESSFUL
#define DISP_CHANGE_RESTART
#define DISP_CHANGE_FAILED
#define DISP_CHANGE_BADMODE
#define DISP_CHANGE_NOTUPDATED
#define DISP_CHANGE_BADFLAGS
#define DISP_CHANGE_BADPARAM
#define DISP_CHANGE_BADDUALVIEW




#define ChangeDisplaySettings
#define ChangeDisplaySettingsEx
#define EnumDisplaySettings
#define EnumDisplaySettingsEx
#define EnumDisplayDevices

  __attribute__((dllimport)) LONG ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) LONG ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) LONG ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
  __attribute__((dllimport)) LONG ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);

#define ENUM_CURRENT_SETTINGS
#define ENUM_REGISTRY_SETTINGS

  __attribute__((dllimport)) WINBOOL EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
  __attribute__((dllimport)) WINBOOL EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode);
  __attribute__((dllimport)) WINBOOL EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags);

#define EDS_RAWMODE

  __attribute__((dllimport)) WINBOOL EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags);



#define SystemParametersInfo

  __attribute__((dllimport)) WINBOOL SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
  __attribute__((dllimport)) WINBOOL SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);


  typedef struct tagFILTERKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
  } FILTERKEYS,*LPFILTERKEYS;

#define FKF_FILTERKEYSON
#define FKF_AVAILABLE
#define FKF_HOTKEYACTIVE
#define FKF_CONFIRMHOTKEY
#define FKF_HOTKEYSOUND
#define FKF_INDICATOR
#define FKF_CLICKON

  typedef struct tagSTICKYKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } STICKYKEYS,*LPSTICKYKEYS;

#define SKF_STICKYKEYSON
#define SKF_AVAILABLE
#define SKF_HOTKEYACTIVE
#define SKF_CONFIRMHOTKEY
#define SKF_HOTKEYSOUND
#define SKF_INDICATOR
#define SKF_AUDIBLEFEEDBACK
#define SKF_TRISTATE
#define SKF_TWOKEYSOFF
#define SKF_LALTLATCHED
#define SKF_LCTLLATCHED
#define SKF_LSHIFTLATCHED
#define SKF_RALTLATCHED
#define SKF_RCTLLATCHED
#define SKF_RSHIFTLATCHED
#define SKF_LWINLATCHED
#define SKF_RWINLATCHED
#define SKF_LALTLOCKED
#define SKF_LCTLLOCKED
#define SKF_LSHIFTLOCKED
#define SKF_RALTLOCKED
#define SKF_RCTLLOCKED
#define SKF_RSHIFTLOCKED
#define SKF_LWINLOCKED
#define SKF_RWINLOCKED

  typedef struct tagMOUSEKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
  } MOUSEKEYS,*LPMOUSEKEYS;

#define MKF_MOUSEKEYSON
#define MKF_AVAILABLE
#define MKF_HOTKEYACTIVE
#define MKF_CONFIRMHOTKEY
#define MKF_HOTKEYSOUND
#define MKF_INDICATOR
#define MKF_MODIFIERS
#define MKF_REPLACENUMBERS
#define MKF_LEFTBUTTONSEL
#define MKF_RIGHTBUTTONSEL
#define MKF_LEFTBUTTONDOWN
#define MKF_RIGHTBUTTONDOWN
#define MKF_MOUSEMODE

  typedef struct tagACCESSTIMEOUT {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
  } ACCESSTIMEOUT,*LPACCESSTIMEOUT;

#define ATF_TIMEOUTON
#define ATF_ONOFFFEEDBACK

#define SSGF_NONE
#define SSGF_DISPLAY

#define SSTF_NONE
#define SSTF_CHARS
#define SSTF_BORDER
#define SSTF_DISPLAY

#define SSWF_NONE
#define SSWF_TITLE
#define SSWF_WINDOW
#define SSWF_DISPLAY
#define SSWF_CUSTOM

  typedef struct tagSOUNDSENTRYA {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYA,*LPSOUNDSENTRYA;

  typedef struct tagSOUNDSENTRYW {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYW,*LPSOUNDSENTRYW;

  typedef SOUNDSENTRYA SOUNDSENTRY;
  typedef LPSOUNDSENTRYA LPSOUNDSENTRY;

#define SSF_SOUNDSENTRYON
#define SSF_AVAILABLE
#define SSF_INDICATOR

  typedef struct tagTOGGLEKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } TOGGLEKEYS,*LPTOGGLEKEYS;

#define TKF_TOGGLEKEYSON
#define TKF_AVAILABLE
#define TKF_HOTKEYACTIVE
#define TKF_CONFIRMHOTKEY
#define TKF_HOTKEYSOUND
#define TKF_INDICATOR

  __attribute__((dllimport)) void SetDebugErrorLevel(DWORD dwLevel);

#define SLE_ERROR
#define SLE_MINORERROR
#define SLE_WARNING

  __attribute__((dllimport)) void SetLastErrorEx(DWORD dwErrCode,DWORD dwType);
  __attribute__((dllimport)) int InternalGetWindowText(HWND hWnd,LPWSTR pString,int cchMaxCount);


  __attribute__((dllimport)) WINBOOL EndTask(HWND hWnd,WINBOOL fShutDown,WINBOOL fForce);


#define MONITOR_DEFAULTTONULL
#define MONITOR_DEFAULTTOPRIMARY
#define MONITOR_DEFAULTTONEAREST

  __attribute__((dllimport)) HMONITOR MonitorFromPoint(POINT pt,DWORD dwFlags);
  __attribute__((dllimport)) HMONITOR MonitorFromRect(LPCRECT lprc,DWORD dwFlags);
  __attribute__((dllimport)) HMONITOR MonitorFromWindow(HWND hwnd,DWORD dwFlags);

#define MONITORINFOF_PRIMARY





  typedef struct tagMONITORINFO {
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
  } MONITORINFO,*LPMONITORINFO;
# 4846 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
  typedef struct tagMONITORINFOEXA {
    __extension__ struct {
      DWORD cbSize;
      RECT rcMonitor;
      RECT rcWork;
      DWORD dwFlags;
    };
    CHAR szDevice[32];
  } MONITORINFOEXA,*LPMONITORINFOEXA;

  typedef struct tagMONITORINFOEXW {
    __extension__ struct {
      DWORD cbSize;
      RECT rcMonitor;
      RECT rcWork;
      DWORD dwFlags;
    };
    WCHAR szDevice[32];
  } MONITORINFOEXW,*LPMONITORINFOEXW;

  typedef MONITORINFOEXA MONITORINFOEX;
  typedef LPMONITORINFOEXA LPMONITORINFOEX;


#define GetMonitorInfo

  __attribute__((dllimport)) WINBOOL GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi);
  __attribute__((dllimport)) WINBOOL GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi);

  typedef WINBOOL ( *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);

  __attribute__((dllimport)) WINBOOL EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData);


  __attribute__((dllimport)) void NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild);

  typedef void ( *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime);

  __attribute__((dllimport)) HWINEVENTHOOK SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL IsWinEventHookInstalled(DWORD event);

#define WINEVENT_OUTOFCONTEXT
#define WINEVENT_SKIPOWNTHREAD
#define WINEVENT_SKIPOWNPROCESS
#define WINEVENT_INCONTEXT

  __attribute__((dllimport)) WINBOOL UnhookWinEvent(HWINEVENTHOOK hWinEventHook);

#define CHILDID_SELF
#define INDEXID_OBJECT
#define INDEXID_CONTAINER

#define OBJID_WINDOW
#define OBJID_SYSMENU
#define OBJID_TITLEBAR
#define OBJID_MENU
#define OBJID_CLIENT
#define OBJID_VSCROLL
#define OBJID_HSCROLL
#define OBJID_SIZEGRIP
#define OBJID_CARET
#define OBJID_CURSOR
#define OBJID_ALERT
#define OBJID_SOUND
#define OBJID_QUERYCLASSNAMEIDX
#define OBJID_NATIVEOM

#define EVENT_MIN
#define EVENT_MAX

#define EVENT_SYSTEM_SOUND
#define EVENT_SYSTEM_ALERT
#define EVENT_SYSTEM_FOREGROUND
#define EVENT_SYSTEM_MENUSTART
#define EVENT_SYSTEM_MENUEND
#define EVENT_SYSTEM_MENUPOPUPSTART
#define EVENT_SYSTEM_MENUPOPUPEND
#define EVENT_SYSTEM_CAPTURESTART
#define EVENT_SYSTEM_CAPTUREEND
#define EVENT_SYSTEM_MOVESIZESTART
#define EVENT_SYSTEM_MOVESIZEEND
#define EVENT_SYSTEM_CONTEXTHELPSTART
#define EVENT_SYSTEM_CONTEXTHELPEND
#define EVENT_SYSTEM_DRAGDROPSTART
#define EVENT_SYSTEM_DRAGDROPEND
#define EVENT_SYSTEM_DIALOGSTART
#define EVENT_SYSTEM_DIALOGEND
#define EVENT_SYSTEM_SCROLLINGSTART
#define EVENT_SYSTEM_SCROLLINGEND
#define EVENT_SYSTEM_SWITCHSTART
#define EVENT_SYSTEM_SWITCHEND
#define EVENT_SYSTEM_MINIMIZESTART
#define EVENT_SYSTEM_MINIMIZEEND

#define EVENT_CONSOLE_CARET
#define EVENT_CONSOLE_UPDATE_REGION
#define EVENT_CONSOLE_UPDATE_SIMPLE
#define EVENT_CONSOLE_UPDATE_SCROLL
#define EVENT_CONSOLE_LAYOUT
#define EVENT_CONSOLE_START_APPLICATION
#define EVENT_CONSOLE_END_APPLICATION

#define CONSOLE_APPLICATION_16BIT

#define CONSOLE_CARET_SELECTION
#define CONSOLE_CARET_VISIBLE

#define EVENT_OBJECT_CREATE
#define EVENT_OBJECT_DESTROY
#define EVENT_OBJECT_SHOW
#define EVENT_OBJECT_HIDE
#define EVENT_OBJECT_REORDER

#define EVENT_OBJECT_FOCUS
#define EVENT_OBJECT_SELECTION
#define EVENT_OBJECT_SELECTIONADD
#define EVENT_OBJECT_SELECTIONREMOVE
#define EVENT_OBJECT_SELECTIONWITHIN

#define EVENT_OBJECT_STATECHANGE

#define EVENT_OBJECT_LOCATIONCHANGE

#define EVENT_OBJECT_NAMECHANGE
#define EVENT_OBJECT_DESCRIPTIONCHANGE
#define EVENT_OBJECT_VALUECHANGE
#define EVENT_OBJECT_PARENTCHANGE
#define EVENT_OBJECT_HELPCHANGE
#define EVENT_OBJECT_DEFACTIONCHANGE
#define EVENT_OBJECT_ACCELERATORCHANGE

#define SOUND_SYSTEM_STARTUP
#define SOUND_SYSTEM_SHUTDOWN
#define SOUND_SYSTEM_BEEP
#define SOUND_SYSTEM_ERROR
#define SOUND_SYSTEM_QUESTION
#define SOUND_SYSTEM_WARNING
#define SOUND_SYSTEM_INFORMATION
#define SOUND_SYSTEM_MAXIMIZE
#define SOUND_SYSTEM_MINIMIZE
#define SOUND_SYSTEM_RESTOREUP
#define SOUND_SYSTEM_RESTOREDOWN
#define SOUND_SYSTEM_APPSTART
#define SOUND_SYSTEM_FAULT
#define SOUND_SYSTEM_APPEND
#define SOUND_SYSTEM_MENUCOMMAND
#define SOUND_SYSTEM_MENUPOPUP
#define CSOUND_SYSTEM

#define ALERT_SYSTEM_INFORMATIONAL
#define ALERT_SYSTEM_WARNING
#define ALERT_SYSTEM_ERROR
#define ALERT_SYSTEM_QUERY
#define ALERT_SYSTEM_CRITICAL
#define CALERT_SYSTEM

  typedef struct tagGUITHREADINFO {
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
  } GUITHREADINFO,*PGUITHREADINFO,*LPGUITHREADINFO;

#define GUI_CARETBLINKING
#define GUI_INMOVESIZE
#define GUI_INMENUMODE
#define GUI_SYSTEMMENUMODE
#define GUI_POPUPMENUMODE
#define GUI_16BITTASK

#define GetWindowModuleFileName

  __attribute__((dllimport)) WINBOOL GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui);
  __attribute__((dllimport)) UINT GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax);
  __attribute__((dllimport)) UINT GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax);


#define STATE_SYSTEM_UNAVAILABLE
#define STATE_SYSTEM_SELECTED
#define STATE_SYSTEM_FOCUSED
#define STATE_SYSTEM_PRESSED
#define STATE_SYSTEM_CHECKED
#define STATE_SYSTEM_MIXED
#define STATE_SYSTEM_INDETERMINATE
#define STATE_SYSTEM_READONLY
#define STATE_SYSTEM_HOTTRACKED
#define STATE_SYSTEM_DEFAULT
#define STATE_SYSTEM_EXPANDED
#define STATE_SYSTEM_COLLAPSED
#define STATE_SYSTEM_BUSY
#define STATE_SYSTEM_FLOATING
#define STATE_SYSTEM_MARQUEED
#define STATE_SYSTEM_ANIMATED
#define STATE_SYSTEM_INVISIBLE
#define STATE_SYSTEM_OFFSCREEN
#define STATE_SYSTEM_SIZEABLE
#define STATE_SYSTEM_MOVEABLE
#define STATE_SYSTEM_SELFVOICING
#define STATE_SYSTEM_FOCUSABLE
#define STATE_SYSTEM_SELECTABLE
#define STATE_SYSTEM_LINKED
#define STATE_SYSTEM_TRAVERSED
#define STATE_SYSTEM_MULTISELECTABLE
#define STATE_SYSTEM_EXTSELECTABLE
#define STATE_SYSTEM_ALERT_LOW
#define STATE_SYSTEM_ALERT_MEDIUM
#define STATE_SYSTEM_ALERT_HIGH
#define STATE_SYSTEM_PROTECTED
#define STATE_SYSTEM_VALID


#define CCHILDREN_TITLEBAR
#define CCHILDREN_SCROLLBAR

  typedef struct tagCURSORINFO {
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
  } CURSORINFO,*PCURSORINFO,*LPCURSORINFO;

#define CURSOR_SHOWING

  __attribute__((dllimport)) WINBOOL GetCursorInfo(PCURSORINFO pci);

  typedef struct tagWINDOWINFO {
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
  } WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;

#define WS_ACTIVECAPTION

  __attribute__((dllimport)) WINBOOL GetWindowInfo(HWND hwnd,PWINDOWINFO pwi);

  typedef struct tagTITLEBARINFO {
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
  } TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;

  __attribute__((dllimport)) WINBOOL GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti);

  typedef struct tagMENUBARINFO {
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    WINBOOL fBarFocused:1;
    WINBOOL fFocused:1;
  } MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;

  __attribute__((dllimport)) WINBOOL GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi);

  typedef struct tagSCROLLBARINFO {
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
  } SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;

  __attribute__((dllimport)) WINBOOL GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi);

  typedef struct tagCOMBOBOXINFO {
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
  } COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;

  __attribute__((dllimport)) WINBOOL GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi);

#define GA_PARENT
#define GA_ROOT
#define GA_ROOTOWNER

  __attribute__((dllimport)) HWND GetAncestor(HWND hwnd,UINT gaFlags);
  __attribute__((dllimport)) HWND RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords);
  __attribute__((dllimport)) UINT RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax);
  __attribute__((dllimport)) UINT RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax);

#define RealGetWindowClass

  typedef struct tagALTTABINFO {
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
  } ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;

#define GetAltTabInfo

  __attribute__((dllimport)) WINBOOL GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText);
  __attribute__((dllimport)) WINBOOL GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText);
  __attribute__((dllimport)) DWORD GetListBoxInfo(HWND hwnd);


  __attribute__((dllimport)) WINBOOL LockWorkStation(void);
  __attribute__((dllimport)) WINBOOL UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,WINBOOL bGrant);

  struct HRAWINPUT__ { int unused; }; typedef struct HRAWINPUT__ *HRAWINPUT;

#define GET_RAWINPUT_CODE_WPARAM

#define RIM_INPUT
#define RIM_INPUTSINK

  typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
  } RAWINPUTHEADER,*PRAWINPUTHEADER,*LPRAWINPUTHEADER;

#define RIM_TYPEMOUSE
#define RIM_TYPEKEYBOARD
#define RIM_TYPEHID

  typedef struct tagRAWMOUSE {
    USHORT usFlags;
    __extension__ union {
      ULONG ulButtons;
      __extension__ struct {
 USHORT usButtonFlags;
 USHORT usButtonData;
      };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
  } RAWMOUSE,*PRAWMOUSE,*LPRAWMOUSE;

#define RI_MOUSE_LEFT_BUTTON_DOWN
#define RI_MOUSE_LEFT_BUTTON_UP
#define RI_MOUSE_RIGHT_BUTTON_DOWN
#define RI_MOUSE_RIGHT_BUTTON_UP
#define RI_MOUSE_MIDDLE_BUTTON_DOWN
#define RI_MOUSE_MIDDLE_BUTTON_UP

#define RI_MOUSE_BUTTON_1_DOWN
#define RI_MOUSE_BUTTON_1_UP
#define RI_MOUSE_BUTTON_2_DOWN
#define RI_MOUSE_BUTTON_2_UP
#define RI_MOUSE_BUTTON_3_DOWN
#define RI_MOUSE_BUTTON_3_UP

#define RI_MOUSE_BUTTON_4_DOWN
#define RI_MOUSE_BUTTON_4_UP
#define RI_MOUSE_BUTTON_5_DOWN
#define RI_MOUSE_BUTTON_5_UP

#define RI_MOUSE_WHEEL

#define MOUSE_MOVE_RELATIVE
#define MOUSE_MOVE_ABSOLUTE
#define MOUSE_VIRTUAL_DESKTOP
#define MOUSE_ATTRIBUTES_CHANGED

  typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
  } RAWKEYBOARD,*PRAWKEYBOARD,*LPRAWKEYBOARD;

#define KEYBOARD_OVERRUN_MAKE_CODE

#define RI_KEY_MAKE
#define RI_KEY_BREAK
#define RI_KEY_E0
#define RI_KEY_E1
#define RI_KEY_TERMSRV_SET_LED
#define RI_KEY_TERMSRV_SHADOW

  typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
  } RAWHID,*PRAWHID,*LPRAWHID;

  typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
      RAWMOUSE mouse;
      RAWKEYBOARD keyboard;
      RAWHID hid;
    } data;
  } RAWINPUT,*PRAWINPUT,*LPRAWINPUT;


#define RAWINPUT_ALIGN




#define NEXTRAWINPUTBLOCK

#define RID_INPUT
#define RID_HEADER

  __attribute__((dllimport)) UINT GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader);

#define RIDI_PREPARSEDDATA
#define RIDI_DEVICENAME
#define RIDI_DEVICEINFO

  typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
  } RID_DEVICE_INFO_MOUSE,*PRID_DEVICE_INFO_MOUSE;

  typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
  } RID_DEVICE_INFO_KEYBOARD,*PRID_DEVICE_INFO_KEYBOARD;

  typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
  } RID_DEVICE_INFO_HID,*PRID_DEVICE_INFO_HID;

  typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    __extension__ union {
      RID_DEVICE_INFO_MOUSE mouse;
      RID_DEVICE_INFO_KEYBOARD keyboard;
      RID_DEVICE_INFO_HID hid;
    } ;
  } RID_DEVICE_INFO,*PRID_DEVICE_INFO,*LPRID_DEVICE_INFO;

#define GetRawInputDeviceInfo

  __attribute__((dllimport)) UINT GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
  __attribute__((dllimport)) UINT GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
  __attribute__((dllimport)) UINT GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader);

  typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
  } RAWINPUTDEVICE,*PRAWINPUTDEVICE,*LPRAWINPUTDEVICE;

  typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE;

#define RIDEV_REMOVE
#define RIDEV_EXCLUDE
#define RIDEV_PAGEONLY
#define RIDEV_NOLEGACY
#define RIDEV_INPUTSINK
#define RIDEV_CAPTUREMOUSE
#define RIDEV_NOHOTKEYS
#define RIDEV_APPKEYS
#define RIDEV_EXMODEMASK
#define RIDEV_EXMODE

#define MAPVK_VK_TO_VSC
#define MAPVK_VSC_TO_VK
#define MAPVK_VK_TO_CHAR
#define MAPVK_VSC_TO_VK_EX
# 5386 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winuser.h" 3
  __attribute__((dllimport)) WINBOOL RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices,UINT uiNumDevices,UINT cbSize);
  __attribute__((dllimport)) UINT GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices,PUINT puiNumDevices,UINT cbSize);

  typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
  } RAWINPUTDEVICELIST,*PRAWINPUTDEVICELIST;

  __attribute__((dllimport)) UINT GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList,PUINT puiNumDevices,UINT cbSize);
  __attribute__((dllimport)) LRESULT DefRawInputProc(PRAWINPUT *paRawInput,INT nInput,UINT cbSizeHeader);
# 73 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 1 3






#define _WINNLS_
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/datetimeapi.h" 1 3






#define _DATETIMEAPI_H_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/datetimeapi.h" 3
  __attribute__((dllimport)) int GetTimeFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
  __attribute__((dllimport)) int GetDateFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);



  __attribute__((dllimport)) int GetDateFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
  __attribute__((dllimport)) int GetDateFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
  __attribute__((dllimport)) int GetTimeFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
  __attribute__((dllimport)) int GetTimeFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);

#define GetDateFormat
#define GetTimeFormat
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 2 3
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define WINNORMALIZEAPI




#define MAX_LEADBYTES
#define MAX_DEFAULTCHAR

#define HIGH_SURROGATE_START
#define HIGH_SURROGATE_END
#define LOW_SURROGATE_START
#define LOW_SURROGATE_END

#define MB_PRECOMPOSED
#define MB_COMPOSITE
#define MB_USEGLYPHCHARS
#define MB_ERR_INVALID_CHARS
#define WC_DISCARDNS
#define WC_SEPCHARS
#define WC_DEFAULTCHAR



#define WC_COMPOSITECHECK
#define WC_NO_BEST_FIT_CHARS

#define CT_CTYPE1
#define CT_CTYPE2
#define CT_CTYPE3

#define C1_UPPER
#define C1_LOWER
#define C1_DIGIT
#define C1_SPACE
#define C1_PUNCT
#define C1_CNTRL
#define C1_BLANK
#define C1_XDIGIT
#define C1_ALPHA
#define C1_DEFINED

#define C2_LEFTTORIGHT
#define C2_RIGHTTOLEFT
#define C2_EUROPENUMBER
#define C2_EUROPESEPARATOR
#define C2_EUROPETERMINATOR
#define C2_ARABICNUMBER
#define C2_COMMONSEPARATOR
#define C2_BLOCKSEPARATOR
#define C2_SEGMENTSEPARATOR
#define C2_WHITESPACE
#define C2_OTHERNEUTRAL

#define C2_NOTAPPLICABLE

#define C3_NONSPACING
#define C3_DIACRITIC
#define C3_VOWELMARK
#define C3_SYMBOL
#define C3_KATAKANA
#define C3_HIRAGANA
#define C3_HALFWIDTH
#define C3_FULLWIDTH
#define C3_IDEOGRAPH
#define C3_KASHIDA
#define C3_LEXICAL
#define C3_HIGHSURROGATE
#define C3_LOWSURROGATE
#define C3_ALPHA

#define C3_NOTAPPLICABLE

#define NORM_IGNORECASE
#define NORM_IGNORENONSPACE
#define NORM_IGNORESYMBOLS

#define LINGUISTIC_IGNORECASE
#define LINGUISTIC_IGNOREDIACRITIC

#define NORM_IGNOREKANATYPE
#define NORM_IGNOREWIDTH
#define NORM_LINGUISTIC_CASING

#define MAP_FOLDCZONE
#define MAP_PRECOMPOSED
#define MAP_COMPOSITE
#define MAP_FOLDDIGITS

#define MAP_EXPAND_LIGATURES

#define LCMAP_LOWERCASE
#define LCMAP_UPPERCASE




#define LCMAP_SORTKEY
#define LCMAP_BYTEREV

#define LCMAP_HIRAGANA
#define LCMAP_KATAKANA
#define LCMAP_HALFWIDTH
#define LCMAP_FULLWIDTH

#define LCMAP_LINGUISTIC_CASING

#define LCMAP_SIMPLIFIED_CHINESE
#define LCMAP_TRADITIONAL_CHINESE






#define FIND_STARTSWITH
#define FIND_ENDSWITH
#define FIND_FROMSTART
#define FIND_FROMEND

#define LGRPID_INSTALLED
#define LGRPID_SUPPORTED

#define LCID_INSTALLED
#define LCID_SUPPORTED
#define LCID_ALTERNATE_SORTS
# 164 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define CP_INSTALLED
#define CP_SUPPORTED

#define SORT_STRINGSORT





#define CSTR_LESS_THAN
#define CSTR_EQUAL
#define CSTR_GREATER_THAN

#define CP_ACP
#define CP_OEMCP
#define CP_MACCP
#define CP_THREAD_ACP
#define CP_SYMBOL

#define CP_UTF7
#define CP_UTF8

#define CTRY_DEFAULT

#define CTRY_ALBANIA
#define CTRY_ALGERIA
#define CTRY_ARGENTINA
#define CTRY_ARMENIA
#define CTRY_AUSTRALIA
#define CTRY_AUSTRIA
#define CTRY_AZERBAIJAN
#define CTRY_BAHRAIN
#define CTRY_BELARUS
#define CTRY_BELGIUM
#define CTRY_BELIZE
#define CTRY_BOLIVIA
#define CTRY_BRAZIL
#define CTRY_BRUNEI_DARUSSALAM
#define CTRY_BULGARIA
#define CTRY_CANADA
#define CTRY_CARIBBEAN
#define CTRY_CHILE
#define CTRY_COLOMBIA
#define CTRY_COSTA_RICA
#define CTRY_CROATIA
#define CTRY_CZECH
#define CTRY_DENMARK
#define CTRY_DOMINICAN_REPUBLIC
#define CTRY_ECUADOR
#define CTRY_EGYPT
#define CTRY_EL_SALVADOR
#define CTRY_ESTONIA
#define CTRY_FAEROE_ISLANDS
#define CTRY_FINLAND
#define CTRY_FRANCE
#define CTRY_GEORGIA
#define CTRY_GERMANY
#define CTRY_GREECE
#define CTRY_GUATEMALA
#define CTRY_HONDURAS
#define CTRY_HONG_KONG
#define CTRY_HUNGARY
#define CTRY_ICELAND
#define CTRY_INDIA
#define CTRY_INDONESIA
#define CTRY_IRAN
#define CTRY_IRAQ
#define CTRY_IRELAND
#define CTRY_ISRAEL
#define CTRY_ITALY
#define CTRY_JAMAICA
#define CTRY_JAPAN
#define CTRY_JORDAN
#define CTRY_KAZAKSTAN
#define CTRY_KENYA
#define CTRY_KUWAIT
#define CTRY_KYRGYZSTAN
#define CTRY_LATVIA
#define CTRY_LEBANON
#define CTRY_LIBYA
#define CTRY_LIECHTENSTEIN
#define CTRY_LITHUANIA
#define CTRY_LUXEMBOURG
#define CTRY_MACAU
#define CTRY_MACEDONIA
#define CTRY_MALAYSIA
#define CTRY_MALDIVES
#define CTRY_MEXICO
#define CTRY_MONACO
#define CTRY_MONGOLIA
#define CTRY_MOROCCO
#define CTRY_NETHERLANDS
#define CTRY_NEW_ZEALAND
#define CTRY_NICARAGUA
#define CTRY_NORWAY
#define CTRY_OMAN
#define CTRY_PAKISTAN
#define CTRY_PANAMA
#define CTRY_PARAGUAY
#define CTRY_PERU
#define CTRY_PHILIPPINES
#define CTRY_POLAND
#define CTRY_PORTUGAL
#define CTRY_PRCHINA
#define CTRY_PUERTO_RICO
#define CTRY_QATAR
#define CTRY_ROMANIA
#define CTRY_RUSSIA
#define CTRY_SAUDI_ARABIA
#define CTRY_SERBIA
#define CTRY_SINGAPORE
#define CTRY_SLOVAK
#define CTRY_SLOVENIA
#define CTRY_SOUTH_AFRICA
#define CTRY_SOUTH_KOREA
#define CTRY_SPAIN
#define CTRY_SWEDEN
#define CTRY_SWITZERLAND
#define CTRY_SYRIA
#define CTRY_TAIWAN
#define CTRY_TATARSTAN
#define CTRY_THAILAND
#define CTRY_TRINIDAD_Y_TOBAGO
#define CTRY_TUNISIA
#define CTRY_TURKEY
#define CTRY_UAE
#define CTRY_UKRAINE
#define CTRY_UNITED_KINGDOM
#define CTRY_UNITED_STATES
#define CTRY_URUGUAY
#define CTRY_UZBEKISTAN
#define CTRY_VENEZUELA
#define CTRY_VIET_NAM
#define CTRY_YEMEN
#define CTRY_ZIMBABWE

#define LOCALE_SLOCALIZEDDISPLAYNAME




#define LOCALE_RETURN_NUMBER
#define LOCALE_USE_CP_ACP
#define LOCALE_NOUSEROVERRIDE
# 318 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define LOCALE_SENGLISHLANGUAGENAME
#define LOCALE_SNATIVELANGUAGENAME

#define LOCALE_SLOCALIZEDCOUNTRYNAME
#define LOCALE_SENGLISHCOUNTRYNAME
#define LOCALE_SNATIVECOUNTRYNAME

#define LOCALE_SLANGUAGE



#define LOCALE_SENGLANGUAGE
#define LOCALE_SNATIVELANGNAME
#define LOCALE_SCOUNTRY
#define LOCALE_SENGCOUNTRY
#define LOCALE_SNATIVECTRYNAME

#define LOCALE_ILANGUAGE

#define LOCALE_SABBREVLANGNAME

#define LOCALE_ICOUNTRY
#define LOCALE_SABBREVCTRYNAME
#define LOCALE_IGEOID

#define LOCALE_IDEFAULTLANGUAGE
#define LOCALE_IDEFAULTCOUNTRY
#define LOCALE_IDEFAULTCODEPAGE
#define LOCALE_IDEFAULTANSICODEPAGE
#define LOCALE_IDEFAULTMACCODEPAGE

#define LOCALE_SLIST
#define LOCALE_IMEASURE

#define LOCALE_SDECIMAL
#define LOCALE_STHOUSAND
#define LOCALE_SGROUPING
#define LOCALE_IDIGITS
#define LOCALE_ILZERO
#define LOCALE_INEGNUMBER
#define LOCALE_SNATIVEDIGITS

#define LOCALE_SCURRENCY
#define LOCALE_SINTLSYMBOL
#define LOCALE_SMONDECIMALSEP
#define LOCALE_SMONTHOUSANDSEP
#define LOCALE_SMONGROUPING
#define LOCALE_ICURRDIGITS
#define LOCALE_IINTLCURRDIGITS
#define LOCALE_ICURRENCY
#define LOCALE_INEGCURR

#define LOCALE_SDATE
#define LOCALE_STIME
#define LOCALE_SSHORTDATE
#define LOCALE_SLONGDATE
#define LOCALE_STIMEFORMAT
#define LOCALE_IDATE
#define LOCALE_ILDATE
#define LOCALE_ITIME
#define LOCALE_ITIMEMARKPOSN
#define LOCALE_ICENTURY
#define LOCALE_ITLZERO
#define LOCALE_IDAYLZERO
#define LOCALE_IMONLZERO
#define LOCALE_S1159
#define LOCALE_S2359

#define LOCALE_ICALENDARTYPE
#define LOCALE_IOPTIONALCALENDAR
#define LOCALE_IFIRSTDAYOFWEEK
#define LOCALE_IFIRSTWEEKOFYEAR

#define LOCALE_SDAYNAME1
#define LOCALE_SDAYNAME2
#define LOCALE_SDAYNAME3
#define LOCALE_SDAYNAME4
#define LOCALE_SDAYNAME5
#define LOCALE_SDAYNAME6
#define LOCALE_SDAYNAME7
#define LOCALE_SABBREVDAYNAME1
#define LOCALE_SABBREVDAYNAME2
#define LOCALE_SABBREVDAYNAME3
#define LOCALE_SABBREVDAYNAME4
#define LOCALE_SABBREVDAYNAME5
#define LOCALE_SABBREVDAYNAME6
#define LOCALE_SABBREVDAYNAME7
#define LOCALE_SMONTHNAME1
#define LOCALE_SMONTHNAME2
#define LOCALE_SMONTHNAME3
#define LOCALE_SMONTHNAME4
#define LOCALE_SMONTHNAME5
#define LOCALE_SMONTHNAME6
#define LOCALE_SMONTHNAME7
#define LOCALE_SMONTHNAME8
#define LOCALE_SMONTHNAME9
#define LOCALE_SMONTHNAME10
#define LOCALE_SMONTHNAME11
#define LOCALE_SMONTHNAME12
#define LOCALE_SMONTHNAME13
#define LOCALE_SABBREVMONTHNAME1
#define LOCALE_SABBREVMONTHNAME2
#define LOCALE_SABBREVMONTHNAME3
#define LOCALE_SABBREVMONTHNAME4
#define LOCALE_SABBREVMONTHNAME5
#define LOCALE_SABBREVMONTHNAME6
#define LOCALE_SABBREVMONTHNAME7
#define LOCALE_SABBREVMONTHNAME8
#define LOCALE_SABBREVMONTHNAME9
#define LOCALE_SABBREVMONTHNAME10
#define LOCALE_SABBREVMONTHNAME11
#define LOCALE_SABBREVMONTHNAME12
#define LOCALE_SABBREVMONTHNAME13

#define LOCALE_SPOSITIVESIGN
#define LOCALE_SNEGATIVESIGN
#define LOCALE_IPOSSIGNPOSN
#define LOCALE_INEGSIGNPOSN
#define LOCALE_IPOSSYMPRECEDES
#define LOCALE_IPOSSEPBYSPACE
#define LOCALE_INEGSYMPRECEDES
#define LOCALE_INEGSEPBYSPACE

#define LOCALE_FONTSIGNATURE
#define LOCALE_SISO639LANGNAME
#define LOCALE_SISO3166CTRYNAME

#define LOCALE_IDEFAULTEBCDICCODEPAGE
#define LOCALE_IPAPERSIZE
#define LOCALE_SENGCURRNAME
#define LOCALE_SNATIVECURRNAME
#define LOCALE_SYEARMONTH
#define LOCALE_SSORTNAME
#define LOCALE_IDIGITSUBSTITUTION
# 488 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define TIME_NOMINUTESORSECONDS
#define TIME_NOSECONDS
#define TIME_NOTIMEMARKER
#define TIME_FORCE24HOURFORMAT

#define DATE_SHORTDATE
#define DATE_LONGDATE
#define DATE_USE_ALT_CALENDAR

#define DATE_YEARMONTH
#define DATE_LTRREADING
#define DATE_RTLREADING




#define CAL_NOUSEROVERRIDE
#define CAL_USE_CP_ACP
#define CAL_RETURN_NUMBER




#define CAL_ICALINTVALUE
#define CAL_SCALNAME
#define CAL_IYEAROFFSETRANGE
#define CAL_SERASTRING
#define CAL_SSHORTDATE
#define CAL_SLONGDATE
#define CAL_SDAYNAME1
#define CAL_SDAYNAME2
#define CAL_SDAYNAME3
#define CAL_SDAYNAME4
#define CAL_SDAYNAME5
#define CAL_SDAYNAME6
#define CAL_SDAYNAME7
#define CAL_SABBREVDAYNAME1
#define CAL_SABBREVDAYNAME2
#define CAL_SABBREVDAYNAME3
#define CAL_SABBREVDAYNAME4
#define CAL_SABBREVDAYNAME5
#define CAL_SABBREVDAYNAME6
#define CAL_SABBREVDAYNAME7

#define CAL_SMONTHNAME1
#define CAL_SMONTHNAME2
#define CAL_SMONTHNAME3
#define CAL_SMONTHNAME4
#define CAL_SMONTHNAME5
#define CAL_SMONTHNAME6
#define CAL_SMONTHNAME7
#define CAL_SMONTHNAME8
#define CAL_SMONTHNAME9
#define CAL_SMONTHNAME10
#define CAL_SMONTHNAME11
#define CAL_SMONTHNAME12
#define CAL_SMONTHNAME13
#define CAL_SABBREVMONTHNAME1
#define CAL_SABBREVMONTHNAME2
#define CAL_SABBREVMONTHNAME3
#define CAL_SABBREVMONTHNAME4
#define CAL_SABBREVMONTHNAME5
#define CAL_SABBREVMONTHNAME6
#define CAL_SABBREVMONTHNAME7
#define CAL_SABBREVMONTHNAME8
#define CAL_SABBREVMONTHNAME9
#define CAL_SABBREVMONTHNAME10
#define CAL_SABBREVMONTHNAME11
#define CAL_SABBREVMONTHNAME12
#define CAL_SABBREVMONTHNAME13
#define CAL_SYEARMONTH
#define CAL_ITWODIGITYEARMAX
# 574 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define ENUM_ALL_CALENDARS

#define CAL_GREGORIAN
#define CAL_GREGORIAN_US
#define CAL_JAPAN
#define CAL_TAIWAN
#define CAL_KOREA
#define CAL_HIJRI
#define CAL_THAI
#define CAL_HEBREW
#define CAL_GREGORIAN_ME_FRENCH
#define CAL_GREGORIAN_ARABIC
#define CAL_GREGORIAN_XLIT_ENGLISH
#define CAL_GREGORIAN_XLIT_FRENCH
#define CAL_UMALQURA

#define LGRPID_WESTERN_EUROPE
#define LGRPID_CENTRAL_EUROPE
#define LGRPID_BALTIC
#define LGRPID_GREEK
#define LGRPID_CYRILLIC
#define LGRPID_TURKIC
#define LGRPID_TURKISH
#define LGRPID_JAPANESE
#define LGRPID_KOREAN
#define LGRPID_TRADITIONAL_CHINESE
#define LGRPID_SIMPLIFIED_CHINESE
#define LGRPID_THAI
#define LGRPID_HEBREW
#define LGRPID_ARABIC
#define LGRPID_VIETNAMESE
#define LGRPID_INDIC
#define LGRPID_GEORGIAN
#define LGRPID_ARMENIAN
# 644 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
  typedef DWORD LGRPID;
  typedef DWORD LCTYPE;
  typedef DWORD CALTYPE;
  typedef DWORD CALID;

  typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
  } CPINFO,*LPCPINFO;
  typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
  } CPINFOEXA,*LPCPINFOEXA;

  typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
  } CPINFOEXW,*LPCPINFOEXW;

  typedef CPINFOEXA CPINFOEX;
  typedef LPCPINFOEXA LPCPINFOEX;

  typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTA,*LPNUMBERFMTA;
  typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTW,*LPNUMBERFMTW;

  typedef NUMBERFMTA NUMBERFMT;
  typedef LPNUMBERFMTA LPNUMBERFMT;

  typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
  } CURRENCYFMTA,*LPCURRENCYFMTA;

  typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
  } CURRENCYFMTW,*LPCURRENCYFMTW;

  typedef CURRENCYFMTA CURRENCYFMT;
  typedef LPCURRENCYFMTA LPCURRENCYFMT;

  enum SYSNLS_FUNCTION {
    COMPARE_STRING = 0x1
  };

  typedef DWORD NLS_FUNCTION;
# 735 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
  typedef struct _nlsversioninfo {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
  } NLSVERSIONINFO,*LPNLSVERSIONINFO;


  typedef struct _nlsversioninfoex {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
  } NLSVERSIONINFOEX,*LPNLSVERSIONINFOEX;

  typedef LONG GEOID;
  typedef DWORD GEOTYPE;
  typedef DWORD GEOCLASS;

#define GEOID_NOT_AVAILABLE

  enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000a,
    GEO_OFFICIALLANGUAGES = 0x000b,
    GEO_ISO_UN_NUMBER = 0x000c,
    GEO_PARENT = 0x000d
  };

  enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
  };
# 798 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
  typedef WINBOOL ( *LANGUAGEGROUP_ENUMPROCA) (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
  typedef WINBOOL ( *LANGGROUPLOCALE_ENUMPROCA) (LGRPID, LCID, LPSTR, LONG_PTR);
  typedef WINBOOL ( *UILANGUAGE_ENUMPROCA) (LPSTR, LONG_PTR);
  typedef WINBOOL ( *CODEPAGE_ENUMPROCA) (LPSTR);
  typedef WINBOOL ( *DATEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL ( *DATEFMT_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL ( *TIMEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL ( *CALINFO_ENUMPROCA) (LPSTR);
  typedef WINBOOL ( *CALINFO_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL ( *LOCALE_ENUMPROCA) (LPSTR);
  typedef WINBOOL ( *LOCALE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL ( *LANGUAGEGROUP_ENUMPROCW) (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
  typedef WINBOOL ( *LANGGROUPLOCALE_ENUMPROCW) (LGRPID, LCID, LPWSTR, LONG_PTR);
  typedef WINBOOL ( *UILANGUAGE_ENUMPROCW) (LPWSTR, LONG_PTR);
  typedef WINBOOL ( *CODEPAGE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL ( *DATEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL ( *DATEFMT_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL ( *TIMEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL ( *CALINFO_ENUMPROCW) (LPWSTR);
  typedef WINBOOL ( *CALINFO_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL ( *GEO_ENUMPROC) (GEOID);
# 857 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define LANGUAGEGROUP_ENUMPROC
#define LANGGROUPLOCALE_ENUMPROC
#define UILANGUAGE_ENUMPROC
#define CODEPAGE_ENUMPROC
#define DATEFMT_ENUMPROC
#define DATEFMT_ENUMPROCEX
#define TIMEFMT_ENUMPROC
#define CALINFO_ENUMPROC
#define CALINFO_ENUMPROCEX
#define LOCALE_ENUMPROC


  typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
  } FILEMUIINFO,*PFILEMUIINFO;


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stringapiset.h" 1 3






#define _APISETSTRING_




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stringapiset.h" 2 3






  __attribute__((dllimport)) int CompareStringW (LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
  __attribute__((dllimport)) int FoldStringW (DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stringapiset.h" 3
  __attribute__((dllimport)) WINBOOL GetStringTypeExW (LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stringapiset.h" 3
  __attribute__((dllimport)) WINBOOL GetStringTypeW (DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) int MultiByteToWideChar (UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
  __attribute__((dllimport)) int WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
# 887 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 2 3


#define IS_HIGH_SURROGATE
#define IS_LOW_SURROGATE
#define IS_SURROGATE_PAIR

#define FILEMUIINFO_GET_CULTURE
#define FILEMUIINFO_GET_MAIN_TYPEIDS
#define FILEMUIINFO_GET_MAIN_TYPEID
#define FILEMUIINFO_GET_MAIN_TYPENAMES
#define FILEMUIINFO_GET_MUI_TYPEIDS
#define FILEMUIINFO_GET_MUI_TYPEID
#define FILEMUIINFO_GET_MUI_TYPENAMES

  __attribute__((dllimport)) WINBOOL IsValidCodePage (UINT CodePage);



  __attribute__((dllimport)) UINT GetACP (void);
  __attribute__((dllimport)) UINT GetOEMCP (void);
  __attribute__((dllimport)) int CompareStringA (LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2);
  __attribute__((dllimport)) int LCMapStringW (LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) int LCMapStringA (LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) int GetLocaleInfoW (LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
  __attribute__((dllimport)) int GetLocaleInfoA (LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
  __attribute__((dllimport)) WINBOOL IsDBCSLeadByte (BYTE TestChar);
  __attribute__((dllimport)) WINBOOL IsDBCSLeadByteEx (UINT CodePage, BYTE TestChar);
  __attribute__((dllimport)) int GetNumberFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int cchNumber);
  __attribute__((dllimport)) int GetNumberFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber);
  __attribute__((dllimport)) int GetCurrencyFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
  __attribute__((dllimport)) int GetCurrencyFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
  __attribute__((dllimport)) WINBOOL EnumCalendarInfoA (CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL EnumCalendarInfoW (CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL EnumCalendarInfoExA (CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL EnumCalendarInfoExW (CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL EnumTimeFormatsA (TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumTimeFormatsW (TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDateFormatsA (DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDateFormatsW (DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDateFormatsExA (DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumDateFormatsExW (DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL IsValidLanguageGroup (LGRPID LanguageGroup, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL GetNLSVersion (NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
  __attribute__((dllimport)) WINBOOL IsNLSDefinedString (NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
  __attribute__((dllimport)) WINBOOL IsValidLocale (LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL SetLocaleInfoA (LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
  __attribute__((dllimport)) WINBOOL SetLocaleInfoW (LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
  __attribute__((dllimport)) int GetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
  __attribute__((dllimport)) int GetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
  __attribute__((dllimport)) WINBOOL SetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
  __attribute__((dllimport)) WINBOOL SetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
# 946 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define SetLocaleInfo
#define GetCalendarInfo
#define SetCalendarInfo
# 959 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define CompareString
#define LCMapString
#define GetLocaleInfo





#define GetNumberFormat
#define GetCurrencyFormat
#define EnumCalendarInfo
#define EnumCalendarInfoEx
#define EnumTimeFormats
#define EnumDateFormats
#define EnumDateFormatsEx




  __attribute__((dllimport)) int GetGeoInfoA (GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
  __attribute__((dllimport)) int GetGeoInfoW (GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
  __attribute__((dllimport)) WINBOOL EnumSystemGeoID (GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
  __attribute__((dllimport)) GEOID GetUserGeoID (GEOCLASS GeoClass);
  __attribute__((dllimport)) WINBOOL GetCPInfo (UINT CodePage, LPCPINFO lpCPInfo);
  __attribute__((dllimport)) WINBOOL GetCPInfoExA (UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
  __attribute__((dllimport)) WINBOOL GetCPInfoExW (UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);






#define GetGeoInfo
#define GetCPInfoEx




  __attribute__((dllimport)) WINBOOL SetUserGeoID (GEOID GeoId);
  __attribute__((dllimport)) LCID ConvertDefaultLocale (LCID Locale);
  __attribute__((dllimport)) LCID GetThreadLocale (void);
  __attribute__((dllimport)) WINBOOL SetThreadLocale (LCID Locale);
  __attribute__((dllimport)) LANGID GetSystemDefaultUILanguage (void);
  __attribute__((dllimport)) LANGID GetUserDefaultUILanguage (void);
  __attribute__((dllimport)) LANGID GetSystemDefaultLangID (void);
  __attribute__((dllimport)) LANGID GetUserDefaultLangID (void);
  __attribute__((dllimport)) LCID GetSystemDefaultLCID (void);
  __attribute__((dllimport)) LCID GetUserDefaultLCID (void);
  __attribute__((dllimport)) LANGID SetThreadUILanguage (LANGID LangId);
  __attribute__((dllimport)) WINBOOL GetStringTypeExA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) WINBOOL GetStringTypeA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) int FoldStringA (DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) WINBOOL EnumSystemLocalesA (LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumSystemLocalesW (LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumSystemLanguageGroupsA (LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumSystemLanguageGroupsW (LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumLanguageGroupLocalesA (LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumLanguageGroupLocalesW (LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumUILanguagesA (UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL EnumUILanguagesW (UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
# 1034 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnls.h" 3
#define FoldString
#define GetStringTypeEx


#define EnumSystemLocales
#define EnumSystemLanguageGroups
#define EnumLanguageGroupLocales
#define EnumUILanguages




  __attribute__((dllimport)) WINBOOL EnumSystemCodePagesA (CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL EnumSystemCodePagesW (CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);

#define EnumSystemCodePages
# 74 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincon.h" 1 3






#define _WINCON_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincon.h" 3
  typedef struct _COORD {
    SHORT X;
    SHORT Y;
  } COORD,*PCOORD;

  typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
  } SMALL_RECT,*PSMALL_RECT;

  typedef struct _KEY_EVENT_RECORD {
    WINBOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
  } KEY_EVENT_RECORD,*PKEY_EVENT_RECORD;

#define RIGHT_ALT_PRESSED
#define LEFT_ALT_PRESSED
#define RIGHT_CTRL_PRESSED
#define LEFT_CTRL_PRESSED
#define SHIFT_PRESSED
#define NUMLOCK_ON
#define SCROLLLOCK_ON
#define CAPSLOCK_ON
#define ENHANCED_KEY
#define NLS_DBCSCHAR
#define NLS_ALPHANUMERIC
#define NLS_KATAKANA
#define NLS_HIRAGANA
#define NLS_ROMAN
#define NLS_IME_CONVERSION
#define NLS_IME_DISABLE

  typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
  } MOUSE_EVENT_RECORD,*PMOUSE_EVENT_RECORD;

#define FROM_LEFT_1ST_BUTTON_PRESSED
#define RIGHTMOST_BUTTON_PRESSED
#define FROM_LEFT_2ND_BUTTON_PRESSED
#define FROM_LEFT_3RD_BUTTON_PRESSED
#define FROM_LEFT_4TH_BUTTON_PRESSED

#define MOUSE_MOVED
#define DOUBLE_CLICK
#define MOUSE_WHEELED




  typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
  } WINDOW_BUFFER_SIZE_RECORD,*PWINDOW_BUFFER_SIZE_RECORD;

  typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
  } MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;

  typedef struct _FOCUS_EVENT_RECORD {
    WINBOOL bSetFocus;
  } FOCUS_EVENT_RECORD,*PFOCUS_EVENT_RECORD;

  typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
      KEY_EVENT_RECORD KeyEvent;
      MOUSE_EVENT_RECORD MouseEvent;
      WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
      MENU_EVENT_RECORD MenuEvent;
      FOCUS_EVENT_RECORD FocusEvent;
    } Event;
  } INPUT_RECORD,*PINPUT_RECORD;

#define KEY_EVENT
#define MOUSE_EVENT
#define WINDOW_BUFFER_SIZE_EVENT
#define MENU_EVENT
#define FOCUS_EVENT

  typedef struct _CHAR_INFO {
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } Char;
    WORD Attributes;
  } CHAR_INFO,*PCHAR_INFO;

#define FOREGROUND_BLUE
#define FOREGROUND_GREEN
#define FOREGROUND_RED
#define FOREGROUND_INTENSITY
#define BACKGROUND_BLUE
#define BACKGROUND_GREEN
#define BACKGROUND_RED
#define BACKGROUND_INTENSITY
#define COMMON_LVB_LEADING_BYTE
#define COMMON_LVB_TRAILING_BYTE
#define COMMON_LVB_GRID_HORIZONTAL
#define COMMON_LVB_GRID_LVERTICAL
#define COMMON_LVB_GRID_RVERTICAL
#define COMMON_LVB_REVERSE_VIDEO
#define COMMON_LVB_UNDERSCORE

#define COMMON_LVB_SBCSDBCS

  typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
  } CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;

  typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    WINBOOL bVisible;
  } CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;

  typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
  } CONSOLE_FONT_INFO,*PCONSOLE_FONT_INFO;

  typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
  } CONSOLE_SELECTION_INFO,*PCONSOLE_SELECTION_INFO;

#define CONSOLE_NO_SELECTION
#define CONSOLE_SELECTION_IN_PROGRESS
#define CONSOLE_SELECTION_NOT_EMPTY
#define CONSOLE_MOUSE_SELECTION
#define CONSOLE_MOUSE_DOWN

  typedef WINBOOL ( *PHANDLER_ROUTINE)(DWORD CtrlType);

#define CTRL_C_EVENT
#define CTRL_BREAK_EVENT
#define CTRL_CLOSE_EVENT

#define CTRL_LOGOFF_EVENT
#define CTRL_SHUTDOWN_EVENT

#define ENABLE_PROCESSED_INPUT
#define ENABLE_LINE_INPUT
#define ENABLE_ECHO_INPUT
#define ENABLE_WINDOW_INPUT
#define ENABLE_MOUSE_INPUT
#define ENABLE_INSERT_MODE
#define ENABLE_QUICK_EDIT_MODE
#define ENABLE_EXTENDED_FLAGS
#define ENABLE_AUTO_POSITION

#define ENABLE_PROCESSED_OUTPUT
#define ENABLE_WRAP_AT_EOL_OUTPUT



#define PeekConsoleInput
#define ReadConsoleInput
#define WriteConsoleInput
#define ReadConsoleOutput
#define WriteConsoleOutput
#define ReadConsoleOutputCharacter
#define WriteConsoleOutputCharacter
#define FillConsoleOutputCharacter
#define ScrollConsoleScreenBuffer
#define GetConsoleTitle
#define SetConsoleTitle
#define ReadConsole
#define WriteConsole
#define AddConsoleAlias
#define GetConsoleAlias
#define GetConsoleAliasesLength
#define GetConsoleAliasExesLength
#define GetConsoleAliases
#define GetConsoleAliasExes

  __attribute__((dllimport)) WINBOOL PeekConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL PeekConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL ReadConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL WriteConsoleInputA(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
  __attribute__((dllimport)) WINBOOL WriteConsoleInputW(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
  __attribute__((dllimport)) WINBOOL ReadConsoleOutputA(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
  __attribute__((dllimport)) WINBOOL ReadConsoleOutputW(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
  __attribute__((dllimport)) WINBOOL WriteConsoleOutputA(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
  __attribute__((dllimport)) WINBOOL WriteConsoleOutputW(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
  __attribute__((dllimport)) WINBOOL ReadConsoleOutputCharacterA(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
  __attribute__((dllimport)) WINBOOL ReadConsoleOutputCharacterW(HANDLE hConsoleOutput,LPWSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
  __attribute__((dllimport)) WINBOOL ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead);
  __attribute__((dllimport)) WINBOOL WriteConsoleOutputCharacterA(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL WriteConsoleOutputCharacterW(HANDLE hConsoleOutput,LPCWSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL WriteConsoleOutputAttribute(HANDLE hConsoleOutput,const WORD *lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
  __attribute__((dllimport)) WINBOOL FillConsoleOutputCharacterA(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL FillConsoleOutputCharacterW(HANDLE hConsoleOutput,WCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
  __attribute__((dllimport)) WINBOOL GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode);
  __attribute__((dllimport)) WINBOOL GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpNumberOfEvents);
  __attribute__((dllimport)) WINBOOL GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
  __attribute__((dllimport)) COORD GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
  __attribute__((dllimport)) WINBOOL GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
  __attribute__((dllimport)) WINBOOL GetCurrentConsoleFont(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont);
  __attribute__((dllimport)) COORD GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont);
  __attribute__((dllimport)) WINBOOL GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
  __attribute__((dllimport)) WINBOOL GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
  __attribute__((dllimport)) WINBOOL SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode);
  __attribute__((dllimport)) WINBOOL SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
  __attribute__((dllimport)) WINBOOL FlushConsoleInputBuffer(HANDLE hConsoleInput);
  __attribute__((dllimport)) WINBOOL SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize);
  __attribute__((dllimport)) WINBOOL SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition);
  __attribute__((dllimport)) WINBOOL SetConsoleCursorInfo(HANDLE hConsoleOutput,const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo);
  __attribute__((dllimport)) WINBOOL ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
  __attribute__((dllimport)) WINBOOL ScrollConsoleScreenBufferW(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
  __attribute__((dllimport)) WINBOOL SetConsoleWindowInfo(HANDLE hConsoleOutput,WINBOOL bAbsolute,const SMALL_RECT *lpConsoleWindow);
  __attribute__((dllimport)) WINBOOL SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes);
  __attribute__((dllimport)) WINBOOL SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine,WINBOOL Add);
  __attribute__((dllimport)) WINBOOL GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId);
  __attribute__((dllimport)) WINBOOL AllocConsole(void);
  __attribute__((dllimport)) WINBOOL FreeConsole(void);
  __attribute__((dllimport)) WINBOOL AttachConsole(DWORD dwProcessId);

#define ATTACH_PARENT_PROCESS

  __attribute__((dllimport)) DWORD GetConsoleTitleA(LPSTR lpConsoleTitle,DWORD nSize);
  __attribute__((dllimport)) DWORD GetConsoleTitleW(LPWSTR lpConsoleTitle,DWORD nSize);
  __attribute__((dllimport)) WINBOOL SetConsoleTitleA(LPCSTR lpConsoleTitle);
  __attribute__((dllimport)) WINBOOL SetConsoleTitleW(LPCWSTR lpConsoleTitle);
  __attribute__((dllimport)) WINBOOL ReadConsoleA(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL WriteConsoleA(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL WriteConsoleW(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);

#define CONSOLE_TEXTMODE_BUFFER

  __attribute__((dllimport)) HANDLE CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,const SECURITY_ATTRIBUTES *lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData);
  __attribute__((dllimport)) UINT GetConsoleCP(void);
  __attribute__((dllimport)) WINBOOL SetConsoleCP(UINT wCodePageID);
  __attribute__((dllimport)) UINT GetConsoleOutputCP(void);
  __attribute__((dllimport)) WINBOOL SetConsoleOutputCP(UINT wCodePageID);

#define CONSOLE_FULLSCREEN
#define CONSOLE_FULLSCREEN_HARDWARE
  __attribute__((dllimport)) WINBOOL GetConsoleDisplayMode(LPDWORD lpModeFlags);

#define CONSOLE_FULLSCREEN_MODE
#define CONSOLE_WINDOWED_MODE
  __attribute__((dllimport)) WINBOOL SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);

  __attribute__((dllimport)) HWND GetConsoleWindow(void);
  __attribute__((dllimport)) DWORD GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount);
  __attribute__((dllimport)) WINBOOL AddConsoleAliasA(LPSTR Source,LPSTR Target,LPSTR ExeName);
  __attribute__((dllimport)) WINBOOL AddConsoleAliasW(LPWSTR Source,LPWSTR Target,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasA(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasW(LPWSTR Source,LPWSTR TargetBuffer,DWORD TargetBufferLength,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasesLengthA(LPSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasesLengthW(LPWSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasExesLengthA(void);
  __attribute__((dllimport)) DWORD GetConsoleAliasExesLengthW(void);
  __attribute__((dllimport)) DWORD GetConsoleAliasesA(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasesW(LPWSTR AliasBuffer,DWORD AliasBufferLength,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD GetConsoleAliasExesA(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength);
  __attribute__((dllimport)) DWORD GetConsoleAliasExesW(LPWSTR ExeNameBuffer,DWORD ExeNameBufferLength);





typedef struct _CONSOLE_FONT_INFOEX {
  ULONG cbSize;
  DWORD nFont;
  COORD dwFontSize;
  UINT FontFamily;
  UINT FontWeight;
  WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

typedef struct _CONSOLE_HISTORY_INFO {
  UINT cbSize;
  UINT HistoryBufferSize;
  UINT NumberOfHistoryBuffers;
  DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

typedef struct _CONSOLE_READCONSOLE_CONTROL {
  ULONG nLength;
  ULONG nInitialChars;
  ULONG dwCtrlWakeupMask;
  ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  ULONG cbSize;
  COORD dwSize;
  COORD dwCursorPosition;
  WORD wAttributes;
  SMALL_RECT srWindow;
  COORD dwMaximumWindowSize;
  WORD wPopupAttributes;
  WINBOOL bFullscreenSupported;
  COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

WINBOOL GetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);
# 350 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincon.h" 3
__attribute__((dllimport)) WINBOOL GetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

__attribute__((dllimport)) WINBOOL GetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);

__attribute__((dllimport)) WINBOOL SetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);

__attribute__((dllimport)) WINBOOL SetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

__attribute__((dllimport)) WINBOOL SetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);
# 75 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winver.h" 1 3






#define VER_H

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winver.h" 2 3






#define VS_FILE_INFO
#define VS_VERSION_INFO
#define VS_USER_DEFINED

#define VS_FFI_SIGNATURE
#define VS_FFI_STRUCVERSION
#define VS_FFI_FILEFLAGSMASK

#define VS_FF_DEBUG
#define VS_FF_PRERELEASE
#define VS_FF_PATCHED
#define VS_FF_PRIVATEBUILD
#define VS_FF_INFOINFERRED
#define VS_FF_SPECIALBUILD

#define VOS_UNKNOWN
#define VOS_DOS
#define VOS_OS216
#define VOS_OS232
#define VOS_NT
#define VOS_WINCE

#define VOS__BASE
#define VOS__WINDOWS16
#define VOS__PM16
#define VOS__PM32
#define VOS__WINDOWS32

#define VOS_DOS_WINDOWS16
#define VOS_DOS_WINDOWS32
#define VOS_OS216_PM16
#define VOS_OS232_PM32
#define VOS_NT_WINDOWS32

#define VFT_UNKNOWN
#define VFT_APP
#define VFT_DLL
#define VFT_DRV
#define VFT_FONT
#define VFT_VXD
#define VFT_STATIC_LIB

#define VFT2_UNKNOWN
#define VFT2_DRV_PRINTER
#define VFT2_DRV_KEYBOARD
#define VFT2_DRV_LANGUAGE
#define VFT2_DRV_DISPLAY
#define VFT2_DRV_MOUSE
#define VFT2_DRV_NETWORK
#define VFT2_DRV_SYSTEM
#define VFT2_DRV_INSTALLABLE
#define VFT2_DRV_SOUND
#define VFT2_DRV_COMM
#define VFT2_DRV_INPUTMETHOD
#define VFT2_DRV_VERSIONED_PRINTER

#define VFT2_FONT_RASTER
#define VFT2_FONT_VECTOR
#define VFT2_FONT_TRUETYPE

#define VFFF_ISSHAREDFILE

#define VFF_CURNEDEST
#define VFF_FILEINUSE
#define VFF_BUFFTOOSMALL

#define VIFF_FORCEINSTALL
#define VIFF_DONTDELETEOLD

#define VIF_TEMPFILE
#define VIF_MISMATCH
#define VIF_SRCOLD

#define VIF_DIFFLANG
#define VIF_DIFFCODEPG
#define VIF_DIFFTYPE

#define VIF_WRITEPROT
#define VIF_FILEINUSE
#define VIF_OUTOFSPACE
#define VIF_ACCESSVIOLATION
#define VIF_SHARINGVIOLATION
#define VIF_CANNOTCREATE
#define VIF_CANNOTDELETE
#define VIF_CANNOTRENAME
#define VIF_CANNOTDELETECUR
#define VIF_OUTOFMEMORY

#define VIF_CANNOTREADSRC
#define VIF_CANNOTREADDST

#define VIF_BUFFTOOSMALL
#define VIF_CANNOTLOADLZ32
#define VIF_CANNOTLOADCABINET



  typedef struct tagVS_FIXEDFILEINFO
  {
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
  } VS_FIXEDFILEINFO;

#define VerFindFile
#define VerInstallFile
#define GetFileVersionInfoSize
#define GetFileVersionInfo
#define VerLanguageName
#define VerQueryValue

  DWORD VerFindFileA(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen);
  DWORD VerFindFileW(DWORD uFlags,LPWSTR szFileName,LPWSTR szWinDir,LPWSTR szAppDir,LPWSTR szCurDir,PUINT lpuCurDirLen,LPWSTR szDestDir,PUINT lpuDestDirLen);
  DWORD VerInstallFileA(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD VerInstallFileW(DWORD uFlags,LPWSTR szSrcFileName,LPWSTR szDestFileName,LPWSTR szSrcDir,LPWSTR szDestDir,LPWSTR szCurDir,LPWSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD GetFileVersionInfoSizeA(LPCSTR lptstrFilename,LPDWORD lpdwHandle);
  DWORD GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle);
  WINBOOL GetFileVersionInfoA(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  WINBOOL GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  DWORD VerLanguageNameA(DWORD wLang,LPSTR szLang,DWORD nSize);
  DWORD VerLanguageNameW(DWORD wLang,LPWSTR szLang,DWORD nSize);
  WINBOOL VerQueryValueA(const LPVOID pBlock,LPCSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
  WINBOOL VerQueryValueW(const LPVOID pBlock,LPCWSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
# 76 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winreg.h" 1 3






#define _WINREG_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winreg.h" 3
#define RRF_RT_REG_NONE
#define RRF_RT_REG_SZ
#define RRF_RT_REG_EXPAND_SZ
#define RRF_RT_REG_BINARY
#define RRF_RT_REG_DWORD
#define RRF_RT_REG_MULTI_SZ
#define RRF_RT_REG_QWORD

#define RRF_RT_DWORD
#define RRF_RT_QWORD
#define RRF_RT_ANY

#define RRF_NOEXPAND
#define RRF_ZEROONFAILURE

  typedef ACCESS_MASK REGSAM;
  typedef LONG LSTATUS;

#define HKEY_CLASSES_ROOT
#define HKEY_CURRENT_USER
#define HKEY_LOCAL_MACHINE
#define HKEY_USERS
#define HKEY_PERFORMANCE_DATA
#define HKEY_PERFORMANCE_TEXT
#define HKEY_PERFORMANCE_NLSTEXT
#define HKEY_CURRENT_CONFIG
#define HKEY_DYN_DATA

#define REG_SECURE_CONNECTION


#define _PROVIDER_STRUCTS_DEFINED

#define PROVIDER_KEEPS_VALUE_LENGTH
  struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
  };

  typedef struct val_context *PVALCONTEXT;

  typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEA,*PPVALUEA;

  typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEW,*PPVALUEW;

  typedef PVALUEA PVALUE;
  typedef PPVALUEA PPVALUE;

  typedef DWORD __attribute__((__cdecl__)) QUERYHANDLER(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD *total_outlen,DWORD input_blen);

  typedef QUERYHANDLER *PQUERYHANDLER;

  typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
  } REG_PROVIDER;

  typedef struct provider_info *PPROVIDER;

  typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTA,*PVALENTA;

  typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTW,*PVALENTW;

  typedef VALENTA VALENT;
  typedef PVALENTA PVALENT;


#define WIN31_CLASS

#define RegConnectRegistry
#define RegConnectRegistryEx
#define RegCreateKey
#define RegCreateKeyEx
#define RegDeleteKey
#define RegDeleteKeyEx
#define RegDeleteValue
#define RegEnumKey
#define RegEnumKeyEx
#define RegEnumValue
#define RegLoadKey
#define RegOpenKey
#define RegOpenKeyEx
#define RegQueryInfoKey
#define RegQueryValue
#define RegQueryMultipleValues
#define RegQueryValueEx
#define RegReplaceKey
#define RegRestoreKey
#define RegSaveKey
#define RegSetValue
#define RegSetValueEx
#define RegUnLoadKey
#define RegGetValue
#define InitiateSystemShutdown
#define AbortSystemShutdown

  __attribute__((dllimport)) LONG RegCloseKey(HKEY hKey);
  __attribute__((dllimport)) LONG RegOverridePredefKey(HKEY hKey,HKEY hNewHKey);
  __attribute__((dllimport)) LONG RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegDisablePredefinedCache();
  __attribute__((dllimport)) LONG RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegConnectRegistryW(LPCWSTR lpMachineName,HKEY hKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegConnectRegistryExA(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegConnectRegistryExW(LPCWSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegCreateKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
  __attribute__((dllimport)) LONG RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
  __attribute__((dllimport)) LONG RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey);
  __attribute__((dllimport)) LONG RegDeleteKeyW(HKEY hKey,LPCWSTR lpSubKey);
  __attribute__((dllimport)) LONG RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
  __attribute__((dllimport)) LONG RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
  __attribute__((dllimport)) LONG RegDisableReflectionKey(HKEY hBase);
  __attribute__((dllimport)) LONG RegEnableReflectionKey(HKEY hBase);
  __attribute__((dllimport)) LONG RegQueryReflectionKey(HKEY hBase,WINBOOL *bIsReflectionDisabled);
  __attribute__((dllimport)) LONG RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
  __attribute__((dllimport)) LONG RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName);
  __attribute__((dllimport)) LONG RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName);
  __attribute__((dllimport)) LONG RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,DWORD cchName);
  __attribute__((dllimport)) LONG RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPWSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG RegEnumValueW(HKEY hKey,DWORD dwIndex,LPWSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG RegFlushKey(HKEY hKey);
  __attribute__((dllimport)) LONG RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor);
  __attribute__((dllimport)) LONG RegLoadKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile);
  __attribute__((dllimport)) LONG RegLoadKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpFile);
  __attribute__((dllimport)) LONG RegNotifyChangeKeyValue(HKEY hKey,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,WINBOOL fAsynchronous);
  __attribute__((dllimport)) LONG RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegOpenKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG RegQueryInfoKeyW(HKEY hKey,LPWSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData);
  __attribute__((dllimport)) LONG RegQueryValueW(HKEY hKey,LPCWSTR lpSubKey,LPWSTR lpData,PLONG lpcbData);
  __attribute__((dllimport)) LONG RegQueryMultipleValuesA(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize);
  __attribute__((dllimport)) LONG RegQueryMultipleValuesW(HKEY hKey,PVALENTW val_list,DWORD num_vals,LPWSTR lpValueBuf,LPDWORD ldwTotsize);
  __attribute__((dllimport)) LONG RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG RegReplaceKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile);
  __attribute__((dllimport)) LONG RegReplaceKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpNewFile,LPCWSTR lpOldFile);
  __attribute__((dllimport)) LONG RegRestoreKeyA(HKEY hKey,LPCSTR lpFile,DWORD dwFlags);
  __attribute__((dllimport)) LONG RegRestoreKeyW(HKEY hKey,LPCWSTR lpFile,DWORD dwFlags);
  __attribute__((dllimport)) LONG RegSaveKeyA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) LONG RegSaveKeyW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) LONG RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) LONG RegSetValueA(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData);
  __attribute__((dllimport)) LONG RegSetValueW(HKEY hKey,LPCWSTR lpSubKey,DWORD dwType,LPCWSTR lpData,DWORD cbData);
  __attribute__((dllimport)) LONG RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
  __attribute__((dllimport)) LONG RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
  __attribute__((dllimport)) LONG RegUnLoadKeyA(HKEY hKey,LPCSTR lpSubKey);
  __attribute__((dllimport)) LONG RegUnLoadKeyW(HKEY hKey,LPCWSTR lpSubKey);
  __attribute__((dllimport)) LONG RegGetValueA(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
  __attribute__((dllimport)) LONG RegGetValueW(HKEY hkey,LPCWSTR lpSubKey,LPCWSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
  __attribute__((dllimport)) WINBOOL InitiateSystemShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
  __attribute__((dllimport)) WINBOOL InitiateSystemShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
  __attribute__((dllimport)) WINBOOL AbortSystemShutdownA(LPSTR lpMachineName);
  __attribute__((dllimport)) WINBOOL AbortSystemShutdownW(LPWSTR lpMachineName);

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/reason.h" 1 3






#define SENTINEL_Reason

#define SHTDN_REASON_FLAG_COMMENT_REQUIRED
#define SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED
#define SHTDN_REASON_FLAG_CLEAN_UI
#define SHTDN_REASON_FLAG_DIRTY_UI
#define SHTDN_REASON_FLAG_USER_DEFINED
#define SHTDN_REASON_FLAG_PLANNED
#define SHTDN_REASON_MAJOR_OTHER
#define SHTDN_REASON_MAJOR_NONE
#define SHTDN_REASON_MAJOR_HARDWARE
#define SHTDN_REASON_MAJOR_OPERATINGSYSTEM
#define SHTDN_REASON_MAJOR_SOFTWARE
#define SHTDN_REASON_MAJOR_APPLICATION
#define SHTDN_REASON_MAJOR_SYSTEM
#define SHTDN_REASON_MAJOR_POWER
#define SHTDN_REASON_MAJOR_LEGACY_API
#define SHTDN_REASON_MINOR_OTHER
#define SHTDN_REASON_MINOR_NONE
#define SHTDN_REASON_MINOR_MAINTENANCE
#define SHTDN_REASON_MINOR_INSTALLATION
#define SHTDN_REASON_MINOR_UPGRADE
#define SHTDN_REASON_MINOR_RECONFIG
#define SHTDN_REASON_MINOR_HUNG
#define SHTDN_REASON_MINOR_UNSTABLE
#define SHTDN_REASON_MINOR_DISK
#define SHTDN_REASON_MINOR_PROCESSOR
#define SHTDN_REASON_MINOR_NETWORKCARD
#define SHTDN_REASON_MINOR_POWER_SUPPLY
#define SHTDN_REASON_MINOR_CORDUNPLUGGED
#define SHTDN_REASON_MINOR_ENVIRONMENT
#define SHTDN_REASON_MINOR_HARDWARE_DRIVER
#define SHTDN_REASON_MINOR_OTHERDRIVER
#define SHTDN_REASON_MINOR_BLUESCREEN
#define SHTDN_REASON_MINOR_SERVICEPACK
#define SHTDN_REASON_MINOR_HOTFIX
#define SHTDN_REASON_MINOR_SECURITYFIX
#define SHTDN_REASON_MINOR_SECURITY
#define SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY
#define SHTDN_REASON_MINOR_WMI
#define SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL
#define SHTDN_REASON_MINOR_HOTFIX_UNINSTALL
#define SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL
#define SHTDN_REASON_MINOR_MMC
#define SHTDN_REASON_MINOR_SYSTEMRESTORE
#define SHTDN_REASON_MINOR_TERMSRV
#define SHTDN_REASON_MINOR_DC_PROMOTION
#define SHTDN_REASON_MINOR_DC_DEMOTION
#define SHTDN_REASON_UNKNOWN
#define SHTDN_REASON_LEGACY_API
#define SHTDN_REASON_VALID_BIT_MASK

#define PCLEANUI
#define UCLEANUI
#define PDIRTYUI
#define UDIRTYUI

#define MAX_REASON_NAME_LEN
#define MAX_REASON_DESC_LEN
#define MAX_REASON_BUGID_LEN
#define MAX_REASON_COMMENT_LEN
#define SHUTDOWN_TYPE_LEN

#define POLICY_SHOWREASONUI_NEVER
#define POLICY_SHOWREASONUI_ALWAYS
#define POLICY_SHOWREASONUI_WORKSTATIONONLY
#define POLICY_SHOWREASONUI_SERVERONLY

#define SNAPSHOT_POLICY_NEVER
#define SNAPSHOT_POLICY_ALWAYS
#define SNAPSHOT_POLICY_UNPLANNED

#define MAX_NUM_REASONS
# 206 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winreg.h" 2 3

#define REASON_SWINSTALL
#define REASON_HWINSTALL
#define REASON_SERVICEHANG
#define REASON_UNSTABLE
#define REASON_SWHWRECONF
#define REASON_OTHER
#define REASON_UNKNOWN
#define REASON_LEGACY_API
#define REASON_PLANNED_FLAG

#define MAX_SHUTDOWN_TIMEOUT

#define InitiateSystemShutdownEx
#define RegSaveKeyEx

  __attribute__((dllimport)) WINBOOL InitiateSystemShutdownExA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
  __attribute__((dllimport)) WINBOOL InitiateSystemShutdownExW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
  __attribute__((dllimport)) LONG RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
  __attribute__((dllimport)) LONG RegSaveKeyExW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
  __attribute__((dllimport)) LONG Wow64Win32ApiEntry (DWORD dwFuncNumber,DWORD dwFlag,DWORD dwRes);
# 77 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnetwk.h" 1 3





#define _WINNETWK_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnetwk.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wnnc.h" 1 3






#define _WNNC_





#define WNNC_NET_MSNET
#define WNNC_NET_LANMAN
#define WNNC_NET_SMB
#define WNNC_NET_NETWARE
#define WNNC_NET_VINES
#define WNNC_NET_10NET
#define WNNC_NET_LOCUS
#define WNNC_NET_SUN_PC_NFS
#define WNNC_NET_LANSTEP
#define WNNC_NET_9TILES
#define WNNC_NET_LANTASTIC
#define WNNC_NET_AS400
#define WNNC_NET_FTP_NFS
#define WNNC_NET_PATHWORKS
#define WNNC_NET_LIFENET
#define WNNC_NET_POWERLAN
#define WNNC_NET_BWNFS
#define WNNC_NET_COGENT
#define WNNC_NET_FARALLON
#define WNNC_NET_APPLETALK
#define WNNC_NET_INTERGRAPH
#define WNNC_NET_SYMFONET
#define WNNC_NET_CLEARCASE
#define WNNC_NET_FRONTIER
#define WNNC_NET_BMC
#define WNNC_NET_DCE
#define WNNC_NET_AVID
#define WNNC_NET_DOCUSPACE
#define WNNC_NET_MANGOSOFT
#define WNNC_NET_SERNET
#define WNNC_NET_RIVERFRONT1
#define WNNC_NET_RIVERFRONT2
#define WNNC_NET_DECORB
#define WNNC_NET_PROTSTOR
#define WNNC_NET_FJ_REDIR
#define WNNC_NET_DISTINCT
#define WNNC_NET_TWINS
#define WNNC_NET_RDR2SAMPLE
#define WNNC_NET_CSC
#define WNNC_NET_3IN1
#define WNNC_NET_EXTENDNET
#define WNNC_NET_STAC
#define WNNC_NET_FOXBAT
#define WNNC_NET_YAHOO
#define WNNC_NET_EXIFS
#define WNNC_NET_DAV
#define WNNC_NET_KNOWARE
#define WNNC_NET_OBJECT_DIRE
#define WNNC_NET_MASFAX
#define WNNC_NET_HOB_NFS
#define WNNC_NET_SHIVA
#define WNNC_NET_IBMAL
#define WNNC_NET_LOCK
#define WNNC_NET_TERMSRV
#define WNNC_NET_SRT
#define WNNC_NET_QUINCY
#define WNNC_NET_OPENAFS
#define WNNC_NET_AVID1
#define WNNC_NET_DFS
#define WNNC_NET_KWNP
#define WNNC_NET_ZENWORKS
#define WNNC_NET_DRIVEONWEB
#define WNNC_NET_VMWARE
#define WNNC_NET_RSFX
#define WNNC_NET_MFILES
#define WNNC_NET_MS_NFS
#define WNNC_NET_GOOGLE
#define WNNC_NET_NDFS

#define WNNC_CRED_MANAGER
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winnetwk.h" 2 3

#define RESOURCE_CONNECTED
#define RESOURCE_GLOBALNET
#define RESOURCE_REMEMBERED
#define RESOURCE_RECENT
#define RESOURCE_CONTEXT

#define RESOURCETYPE_ANY
#define RESOURCETYPE_DISK
#define RESOURCETYPE_PRINT
#define RESOURCETYPE_RESERVED

#define RESOURCETYPE_UNKNOWN

#define RESOURCEUSAGE_CONNECTABLE
#define RESOURCEUSAGE_CONTAINER
#define RESOURCEUSAGE_NOLOCALDEVICE
#define RESOURCEUSAGE_SIBLING
#define RESOURCEUSAGE_ATTACHED
#define RESOURCEUSAGE_ALL
#define RESOURCEUSAGE_RESERVED

#define RESOURCEDISPLAYTYPE_GENERIC
#define RESOURCEDISPLAYTYPE_DOMAIN
#define RESOURCEDISPLAYTYPE_SERVER
#define RESOURCEDISPLAYTYPE_SHARE
#define RESOURCEDISPLAYTYPE_FILE
#define RESOURCEDISPLAYTYPE_GROUP
#define RESOURCEDISPLAYTYPE_NETWORK
#define RESOURCEDISPLAYTYPE_ROOT
#define RESOURCEDISPLAYTYPE_SHAREADMIN
#define RESOURCEDISPLAYTYPE_DIRECTORY
#define RESOURCEDISPLAYTYPE_TREE
#define RESOURCEDISPLAYTYPE_NDSCONTAINER

  typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
  } NETRESOURCEA,*LPNETRESOURCEA;
  typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
  } NETRESOURCEW,*LPNETRESOURCEW;

  typedef NETRESOURCEA NETRESOURCE;
  typedef LPNETRESOURCEA LPNETRESOURCE;

#define NETPROPERTY_PERSISTENT

#define CONNECT_UPDATE_PROFILE
#define CONNECT_UPDATE_RECENT
#define CONNECT_TEMPORARY
#define CONNECT_INTERACTIVE
#define CONNECT_PROMPT
#define CONNECT_NEED_DRIVE
#define CONNECT_REFCOUNT
#define CONNECT_REDIRECT
#define CONNECT_LOCALDRIVE
#define CONNECT_CURRENT_MEDIA
#define CONNECT_DEFERRED
#define CONNECT_RESERVED
#define CONNECT_COMMANDLINE
#define CONNECT_CMD_SAVECRED




#define WNetAddConnection
#define WNetAddConnection2
#define WNetAddConnection3
#define WNetCancelConnection
#define WNetCancelConnection2
#define WNetGetConnection
#define WNetRestoreConnection
#define WNetUseConnection

  DWORD WNetAddConnectionA(LPCSTR lpRemoteName,LPCSTR lpPassword,LPCSTR lpLocalName);
  DWORD WNetAddConnectionW(LPCWSTR lpRemoteName,LPCWSTR lpPassword,LPCWSTR lpLocalName);
  DWORD WNetAddConnection2A(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD WNetAddConnection2W(LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD WNetAddConnection3A(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD WNetAddConnection3W(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD WNetCancelConnectionA(LPCSTR lpName,WINBOOL fForce);
  DWORD WNetCancelConnectionW(LPCWSTR lpName,WINBOOL fForce);
  DWORD WNetCancelConnection2A(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD WNetCancelConnection2W(LPCWSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD WNetGetConnectionA(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength);
  DWORD WNetGetConnectionW(LPCWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnLength);
  DWORD WNetRestoreConnectionA(HWND hwndParent,LPCSTR lpDevice);
  DWORD WNetUseConnectionA(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD WNetUseConnectionW(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserID,DWORD dwFlags,LPWSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD WNetConnectionDialog(HWND hwnd,DWORD dwType);
  DWORD WNetDisconnectDialog(HWND hwnd,DWORD dwType);



  DWORD WNetRestoreConnectionW(HWND hwndParent,LPCWSTR lpDevice);


  typedef struct _CONNECTDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;

  typedef struct _CONNECTDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;

  typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
  typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;

#define CONNDLG_RO_PATH
#define CONNDLG_CONN_POINT
#define CONNDLG_USE_MRU
#define CONNDLG_HIDE_BOX

#define CONNDLG_PERSIST
#define CONNDLG_NOT_PERSIST

#define WNetConnectionDialog1

  DWORD WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct);
  DWORD WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct);

  typedef struct _DISCDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;

  typedef struct _DISCDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;

  typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
  typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;

#define DISC_UPDATE_PROFILE
#define DISC_NO_FORCE

#define WNetDisconnectDialog1
#define WNetOpenEnum
#define WNetEnumResource
#define WNetGetResourceParent
#define WNetGetResourceInformation

  DWORD WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct);
  DWORD WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct);
  DWORD WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum);
  DWORD WNetOpenEnumW(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum);
  DWORD WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD WNetEnumResourceW(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD WNetCloseEnum(HANDLE hEnum);
  DWORD WNetGetResourceParentA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD WNetGetResourceParentW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR *lplpSystem);
  DWORD WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPWSTR *lplpSystem);

#define UNIVERSAL_NAME_INFO_LEVEL
#define REMOTE_NAME_INFO_LEVEL

  typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;

  typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;

  typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
  typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;

  typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
  } REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;

  typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
  } REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;

  typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
  typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;

#define WNetGetUniversalName
#define WNetGetUser
#define WNetGetProviderName

  DWORD WNetGetUniversalNameA(LPCSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD WNetGetUniversalNameW(LPCWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD WNetGetUserA(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength);
  DWORD WNetGetUserW(LPCWSTR lpName,LPWSTR lpUserName,LPDWORD lpnLength);

#define WNFMT_MULTILINE
#define WNFMT_ABBREVIATED
#define WNFMT_INENUM
#define WNFMT_CONNECTION

  DWORD WNetGetProviderNameA(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize);
  DWORD WNetGetProviderNameW(DWORD dwNetType,LPWSTR lpProviderName,LPDWORD lpBufferSize);

  typedef struct _NETINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
  } NETINFOSTRUCT,*LPNETINFOSTRUCT;

#define NETINFO_DLL16
#define NETINFO_DISKRED
#define NETINFO_PRINTERRED

#define WNetGetNetworkInformation

  DWORD WNetGetNetworkInformationA(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);
  DWORD WNetGetNetworkInformationW(LPCWSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);

  typedef UINT ( *PFNGETPROFILEPATHA) (LPCSTR pszUsername,LPSTR pszBuffer,UINT cbBuffer);
  typedef UINT ( *PFNGETPROFILEPATHW) (LPCWSTR pszUsername,LPWSTR pszBuffer,UINT cbBuffer);

#define PFNGETPROFILEPATH

  typedef UINT ( *PFNRECONCILEPROFILEA) (LPCSTR pszCentralFile,LPCSTR pszLocalFile,DWORD dwFlags);
  typedef UINT ( *PFNRECONCILEPROFILEW) (LPCWSTR pszCentralFile,LPCWSTR pszLocalFile,DWORD dwFlags);

#define PFNRECONCILEPROFILE

#define RP_LOGON
#define RP_INIFILE

  typedef WINBOOL ( *PFNPROCESSPOLICIESA) (HWND hwnd,LPCSTR pszPath,LPCSTR pszUsername,LPCSTR pszComputerName,DWORD dwFlags);
  typedef WINBOOL ( *PFNPROCESSPOLICIESW) (HWND hwnd,LPCWSTR pszPath,LPCWSTR pszUsername,LPCWSTR pszComputerName,DWORD dwFlags);

#define PFNPROCESSPOLICIES

#define PP_DISPLAYERRORS

#define WNetGetLastError

  DWORD WNetGetLastErrorA(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize);
  DWORD WNetGetLastErrorW(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD nErrorBufSize,LPWSTR lpNameBuf,DWORD nNameBufSize);

#define WN_SUCCESS
#define WN_NO_ERROR
#define WN_NOT_SUPPORTED
#define WN_CANCEL
#define WN_RETRY
#define WN_NET_ERROR
#define WN_MORE_DATA
#define WN_BAD_POINTER
#define WN_BAD_VALUE
#define WN_BAD_USER
#define WN_BAD_PASSWORD
#define WN_ACCESS_DENIED
#define WN_FUNCTION_BUSY
#define WN_WINDOWS_ERROR
#define WN_OUT_OF_MEMORY
#define WN_NO_NETWORK
#define WN_EXTENDED_ERROR
#define WN_BAD_LEVEL
#define WN_BAD_HANDLE
#define WN_NOT_INITIALIZING
#define WN_NO_MORE_DEVICES
#define WN_NOT_CONNECTED
#define WN_OPEN_FILES
#define WN_DEVICE_IN_USE
#define WN_BAD_NETNAME
#define WN_BAD_LOCALNAME
#define WN_ALREADY_CONNECTED
#define WN_DEVICE_ERROR
#define WN_CONNECTION_CLOSED
#define WN_NO_NET_OR_BAD_PATH
#define WN_BAD_PROVIDER
#define WN_CANNOT_OPEN_PROFILE
#define WN_BAD_PROFILE
#define WN_BAD_DEV_TYPE
#define WN_DEVICE_ALREADY_REMEMBERED
#define WN_CONNECTED_OTHER_PASSWORD
#define WN_CONNECTED_OTHER_PASSWORD_DEFAULT
#define WN_NO_MORE_ENTRIES
#define WN_NOT_CONTAINER
#define WN_NOT_AUTHENTICATED
#define WN_NOT_LOGGED_ON
#define WN_NOT_VALIDATED

  typedef struct _NETCONNECTINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
  } NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;

#define WNCON_FORNETCARD
#define WNCON_NOTROUTED
#define WNCON_SLOWLINK
#define WNCON_DYNAMIC

#define MultinetGetConnectionPerformance

  DWORD MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
  DWORD MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
# 78 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/virtdisk.h" 1 3






#define _INC_VIRTDISK
# 79 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/cderr.h" 1 3






#define _INC_CDERR

#define CDERR_DIALOGFAILURE

#define CDERR_GENERALCODES
#define CDERR_STRUCTSIZE
#define CDERR_INITIALIZATION
#define CDERR_NOTEMPLATE
#define CDERR_NOHINSTANCE
#define CDERR_LOADSTRFAILURE
#define CDERR_FINDRESFAILURE
#define CDERR_LOADRESFAILURE
#define CDERR_LOCKRESFAILURE
#define CDERR_MEMALLOCFAILURE
#define CDERR_MEMLOCKFAILURE
#define CDERR_NOHOOK
#define CDERR_REGISTERMSGFAIL

#define PDERR_PRINTERCODES
#define PDERR_SETUPFAILURE
#define PDERR_PARSEFAILURE
#define PDERR_RETDEFFAILURE
#define PDERR_LOADDRVFAILURE
#define PDERR_GETDEVMODEFAIL
#define PDERR_INITFAILURE
#define PDERR_NODEVICES
#define PDERR_NODEFAULTPRN
#define PDERR_DNDMMISMATCH
#define PDERR_CREATEICFAILURE
#define PDERR_PRINTERNOTFOUND
#define PDERR_DEFAULTDIFFERENT

#define CFERR_CHOOSEFONTCODES
#define CFERR_NOFONTS
#define CFERR_MAXLESSTHANMIN

#define FNERR_FILENAMECODES
#define FNERR_SUBCLASSFAILURE
#define FNERR_INVALIDFILENAME
#define FNERR_BUFFERTOOSMALL

#define FRERR_FINDREPLACECODES
#define FRERR_BUFFERLENGTHZERO

#define CCERR_CHOOSECOLORCODES
# 82 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/dde.h" 1 3






#define _DDEHEADER_INCLUDED_







#define WM_DDE_FIRST
#define WM_DDE_INITIATE
#define WM_DDE_TERMINATE
#define WM_DDE_ADVISE
#define WM_DDE_UNADVISE
#define WM_DDE_ACK
#define WM_DDE_DATA
#define WM_DDE_REQUEST
#define WM_DDE_POKE
#define WM_DDE_EXECUTE
#define WM_DDE_LAST

  typedef struct {
    unsigned short bAppReturnCode:8,reserved:6,fBusy:1,fAck:1;
  } DDEACK;

  typedef struct {
    unsigned short reserved:14,fDeferUpd:1,fAckReq:1;
    short cfFormat;
  } DDEADVISE;

  typedef struct {
    unsigned short unused:12,fResponse:1,fRelease:1,reserved:1,fAckReq:1;
    short cfFormat;
    BYTE Value[1];
  } DDEDATA;

  typedef struct {
    unsigned short unused:13,fRelease:1,fReserved:2;
    short cfFormat;
    BYTE Value[1];

  } DDEPOKE;

  typedef struct {
    unsigned short unused:13,fRelease:1,fDeferUpd:1,fAckReq:1;
    short cfFormat;
  } DDELN;

  typedef struct {
    unsigned short unused:12,fAck:1,fRelease:1,fReserved:1,fAckReq:1;
    short cfFormat;
    BYTE rgb[1];
  } DDEUP;

  WINBOOL DdeSetQualityOfService(HWND hwndClient,const SECURITY_QUALITY_OF_SERVICE *pqosNew,PSECURITY_QUALITY_OF_SERVICE pqosPrev);
  WINBOOL ImpersonateDdeClientWindow(HWND hWndClient,HWND hWndServer);
  LPARAM PackDDElParam(UINT msg,UINT_PTR uiLo,UINT_PTR uiHi);
  WINBOOL UnpackDDElParam(UINT msg,LPARAM lParam,PUINT_PTR puiLo,PUINT_PTR puiHi);
  WINBOOL FreeDDElParam(UINT msg,LPARAM lParam);
  LPARAM ReuseDDElParam(LPARAM lParam,UINT msgIn,UINT msgOut,UINT_PTR uiLo,UINT_PTR uiHi);
# 83 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ddeml.h" 1 3






#define _INC_DDEMLH







  struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
  struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
  struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
  struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;
#define EXPENTRY

  typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
  } HSZPAIR, *PHSZPAIR;

  typedef struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
  } CONVCONTEXT, *PCONVCONTEXT;

  typedef struct tagCONVINFO {
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
  } CONVINFO, *PCONVINFO;

#define XST_NULL
#define XST_INCOMPLETE
#define XST_CONNECTED
#define XST_INIT1
#define XST_INIT2
#define XST_REQSENT
#define XST_DATARCVD
#define XST_POKESENT
#define XST_POKEACKRCVD
#define XST_EXECSENT
#define XST_EXECACKRCVD
#define XST_ADVSENT
#define XST_UNADVSENT
#define XST_ADVACKRCVD
#define XST_UNADVACKRCVD
#define XST_ADVDATASENT
#define XST_ADVDATAACKRCVD

#define CADV_LATEACK

#define ST_CONNECTED
#define ST_ADVISE
#define ST_ISLOCAL
#define ST_BLOCKED
#define ST_CLIENT
#define ST_TERMINATED
#define ST_INLIST
#define ST_BLOCKNEXT
#define ST_ISSELF

#define DDE_FACK
#define DDE_FBUSY
#define DDE_FDEFERUPD
#define DDE_FACKREQ
#define DDE_FRELEASE
#define DDE_FREQUESTED
#define DDE_FAPPSTATUS
#define DDE_FNOTPROCESSED

#define DDE_FACKRESERVED
#define DDE_FADVRESERVED
#define DDE_FDATRESERVED
#define DDE_FPOKRESERVED

#define MSGF_DDEMGR

#define CP_WINANSI
#define CP_WINUNICODE

#define XTYPF_NOBLOCK
#define XTYPF_NODATA
#define XTYPF_ACKREQ

#define XCLASS_MASK
#define XCLASS_BOOL
#define XCLASS_DATA
#define XCLASS_FLAGS
#define XCLASS_NOTIFICATION

#define XTYP_ERROR
#define XTYP_ADVDATA
#define XTYP_ADVREQ
#define XTYP_ADVSTART
#define XTYP_ADVSTOP
#define XTYP_EXECUTE
#define XTYP_CONNECT
#define XTYP_CONNECT_CONFIRM
#define XTYP_XACT_COMPLETE
#define XTYP_POKE
#define XTYP_REGISTER
#define XTYP_REQUEST
#define XTYP_DISCONNECT
#define XTYP_UNREGISTER
#define XTYP_WILDCONNECT

#define XTYP_MASK
#define XTYP_SHIFT

#define TIMEOUT_ASYNC

#define QID_SYNC




#define CP_WINNEUTRAL


#define SZDDESYS_TOPIC
#define SZDDESYS_ITEM_TOPICS
#define SZDDESYS_ITEM_SYSITEMS
#define SZDDESYS_ITEM_RTNMSG
#define SZDDESYS_ITEM_STATUS
#define SZDDESYS_ITEM_FORMATS
#define SZDDESYS_ITEM_HELP
#define SZDDE_ITEM_ITEMLIST

#define DdeInitialize

  typedef HDDEDATA FNCALLBACK(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
  typedef HDDEDATA ( *PFNCALLBACK)(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);

#define CBR_BLOCK

  UINT DdeInitializeA(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
  UINT DdeInitializeW(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);

#define CBF_FAIL_SELFCONNECTIONS
#define CBF_FAIL_CONNECTIONS
#define CBF_FAIL_ADVISES
#define CBF_FAIL_EXECUTES
#define CBF_FAIL_POKES
#define CBF_FAIL_REQUESTS
#define CBF_FAIL_ALLSVRXACTIONS

#define CBF_SKIP_CONNECT_CONFIRMS
#define CBF_SKIP_REGISTRATIONS
#define CBF_SKIP_UNREGISTRATIONS
#define CBF_SKIP_DISCONNECTS
#define CBF_SKIP_ALLNOTIFICATIONS

#define APPCMD_CLIENTONLY
#define APPCMD_FILTERINITS
#define APPCMD_MASK

#define APPCLASS_STANDARD
#define APPCLASS_MASK

  WINBOOL DdeUninitialize(DWORD idInst);
  HCONVLIST DdeConnectList(DWORD idInst,HSZ hszService,HSZ hszTopic,HCONVLIST hConvList,PCONVCONTEXT pCC);
  HCONV DdeQueryNextServer(HCONVLIST hConvList,HCONV hConvPrev);
  WINBOOL DdeDisconnectList(HCONVLIST hConvList);
  HCONV DdeConnect(DWORD idInst,HSZ hszService,HSZ hszTopic,PCONVCONTEXT pCC);
  WINBOOL DdeDisconnect(HCONV hConv);
  HCONV DdeReconnect(HCONV hConv);
  UINT DdeQueryConvInfo(HCONV hConv,DWORD idTransaction,PCONVINFO pConvInfo);
  WINBOOL DdeSetUserHandle(HCONV hConv,DWORD id,DWORD_PTR hUser);
  WINBOOL DdeAbandonTransaction(DWORD idInst,HCONV hConv,DWORD idTransaction);
  WINBOOL DdePostAdvise(DWORD idInst,HSZ hszTopic,HSZ hszItem);
  WINBOOL DdeEnableCallback(DWORD idInst,HCONV hConv,UINT wCmd);
  WINBOOL DdeImpersonateClient(HCONV hConv);

#define EC_ENABLEALL
#define EC_ENABLEONE
#define EC_DISABLE
#define EC_QUERYWAITING

#define DNS_REGISTER
#define DNS_UNREGISTER
#define DNS_FILTERON
#define DNS_FILTEROFF

  HDDEDATA DdeNameService(DWORD idInst,HSZ hsz1,HSZ hsz2,UINT afCmd);
  HDDEDATA DdeClientTransaction(LPBYTE pData,DWORD cbData,HCONV hConv,HSZ hszItem,UINT wFmt,UINT wType,DWORD dwTimeout,LPDWORD pdwResult);
  HDDEDATA DdeCreateDataHandle(DWORD idInst,LPBYTE pSrc,DWORD cb,DWORD cbOff,HSZ hszItem,UINT wFmt,UINT afCmd);
  HDDEDATA DdeAddData(HDDEDATA hData,LPBYTE pSrc,DWORD cb,DWORD cbOff);
  DWORD DdeGetData(HDDEDATA hData,LPBYTE pDst,DWORD cbMax,DWORD cbOff);
  LPBYTE DdeAccessData(HDDEDATA hData,LPDWORD pcbDataSize);
  WINBOOL DdeUnaccessData(HDDEDATA hData);
  WINBOOL DdeFreeDataHandle(HDDEDATA hData);

#define HDATA_APPOWNED

  UINT DdeGetLastError(DWORD idInst);

#define DMLERR_NO_ERROR
#define DMLERR_FIRST

#define DMLERR_ADVACKTIMEOUT
#define DMLERR_BUSY
#define DMLERR_DATAACKTIMEOUT
#define DMLERR_DLL_NOT_INITIALIZED
#define DMLERR_DLL_USAGE
#define DMLERR_EXECACKTIMEOUT
#define DMLERR_INVALIDPARAMETER
#define DMLERR_LOW_MEMORY
#define DMLERR_MEMORY_ERROR
#define DMLERR_NOTPROCESSED
#define DMLERR_NO_CONV_ESTABLISHED
#define DMLERR_POKEACKTIMEOUT
#define DMLERR_POSTMSG_FAILED
#define DMLERR_REENTRANCY
#define DMLERR_SERVER_DIED
#define DMLERR_SYS_ERROR
#define DMLERR_UNADVACKTIMEOUT
#define DMLERR_UNFOUND_QUEUE_ID

#define DMLERR_LAST

  HSZ DdeCreateStringHandleA(DWORD idInst,LPCSTR psz,int iCodePage);
  HSZ DdeCreateStringHandleW(DWORD idInst,LPCWSTR psz,int iCodePage);
  DWORD DdeQueryStringA(DWORD idInst,HSZ hsz,LPSTR psz,DWORD cchMax,int iCodePage);
  DWORD DdeQueryStringW(DWORD idInst,HSZ hsz,LPWSTR psz,DWORD cchMax,int iCodePage);
  WINBOOL DdeFreeStringHandle(DWORD idInst,HSZ hsz);
  WINBOOL DdeKeepStringHandle(DWORD idInst,HSZ hsz);
  int DdeCmpStringHandles(HSZ hsz1,HSZ hsz2);

#define DdeCreateStringHandle
#define DdeQueryString


  typedef struct tagDDEML_MSG_HOOK_DATA {
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
  } DDEML_MSG_HOOK_DATA,*PDDEML_MSG_HOOK_DATA;

  typedef struct tagMONMSGSTRUCT {
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
  } MONMSGSTRUCT,*PMONMSGSTRUCT;

  typedef struct tagMONCBSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
  } MONCBSTRUCT,*PMONCBSTRUCT;

  typedef struct tagMONHSZSTRUCTA {
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
  } MONHSZSTRUCTA,*PMONHSZSTRUCTA;

  typedef struct tagMONHSZSTRUCTW {
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
  } MONHSZSTRUCTW,*PMONHSZSTRUCTW;

  typedef MONHSZSTRUCTA MONHSZSTRUCT;
  typedef PMONHSZSTRUCTA PMONHSZSTRUCT;

#define MH_CREATE
#define MH_KEEP
#define MH_DELETE
#define MH_CLEANUP

  typedef struct tagMONERRSTRUCT {
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
  } MONERRSTRUCT,*PMONERRSTRUCT;

  typedef struct tagMONLINKSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    WINBOOL fEstablished;
    WINBOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    WINBOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
  } MONLINKSTRUCT,*PMONLINKSTRUCT;

  typedef struct tagMONCONVSTRUCT {
    UINT cb;
    WINBOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
  } MONCONVSTRUCT,*PMONCONVSTRUCT;

#define MAX_MONITORS
#define APPCLASS_MONITOR
#define XTYP_MONITOR

#define MF_HSZ_INFO
#define MF_SENDMSGS
#define MF_POSTMSGS
#define MF_CALLBACKS
#define MF_ERRORS
#define MF_LINKS
#define MF_CONV

#define MF_MASK
# 84 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/dlgs.h" 1 3






#define _DLGSH_INCLUDED_

#define ctlFirst
#define ctlLast

#define psh1
#define psh2
#define psh3
#define psh4
#define psh5
#define psh6
#define psh7
#define psh8
#define psh9
#define psh10
#define psh11
#define psh12
#define psh13
#define psh14
#define psh15
#define pshHelp
#define psh16

#define chx1
#define chx2
#define chx3
#define chx4
#define chx5
#define chx6
#define chx7
#define chx8
#define chx9
#define chx10
#define chx11
#define chx12
#define chx13
#define chx14
#define chx15
#define chx16

#define rad1
#define rad2
#define rad3
#define rad4
#define rad5
#define rad6
#define rad7
#define rad8
#define rad9
#define rad10
#define rad11
#define rad12
#define rad13
#define rad14
#define rad15
#define rad16

#define grp1
#define grp2
#define grp3
#define grp4
#define frm1
#define frm2
#define frm3
#define frm4
#define rct1
#define rct2
#define rct3
#define rct4
#define ico1
#define ico2
#define ico3
#define ico4

#define stc1
#define stc2
#define stc3
#define stc4
#define stc5
#define stc6
#define stc7
#define stc8
#define stc9
#define stc10
#define stc11
#define stc12
#define stc13
#define stc14
#define stc15
#define stc16
#define stc17
#define stc18
#define stc19
#define stc20
#define stc21
#define stc22
#define stc23
#define stc24
#define stc25
#define stc26
#define stc27
#define stc28
#define stc29
#define stc30
#define stc31
#define stc32

#define lst1
#define lst2
#define lst3
#define lst4
#define lst5
#define lst6
#define lst7
#define lst8
#define lst9
#define lst10
#define lst11
#define lst12
#define lst13
#define lst14
#define lst15
#define lst16

#define cmb1
#define cmb2
#define cmb3
#define cmb4
#define cmb5
#define cmb6
#define cmb7
#define cmb8
#define cmb9
#define cmb10
#define cmb11
#define cmb12
#define cmb13
#define cmb14
#define cmb15
#define cmb16

#define edt1
#define edt2
#define edt3
#define edt4
#define edt5
#define edt6
#define edt7
#define edt8
#define edt9
#define edt10
#define edt11
#define edt12
#define edt13
#define edt14
#define edt15
#define edt16

#define scr1
#define scr2
#define scr3
#define scr4
#define scr5
#define scr6
#define scr7
#define scr8

#define ctl1

#define FILEOPENORD
#define MULTIFILEOPENORD
#define PRINTDLGORD
#define PRNSETUPDLGORD
#define FINDDLGORD
#define REPLACEDLGORD
#define FONTDLGORD
#define FORMATDLGORD31
#define FORMATDLGORD30
#define RUNDLGORD

#define PAGESETUPDLGORD
#define NEWFILEOPENORD
#define PRINTDLGEXORD
#define PAGESETUPDLGORDMOTIF
#define COLORMGMTDLGORD
#define NEWFILEOPENV2ORD

typedef struct tagCRGB {
  BYTE bRed;
  BYTE bGreen;
  BYTE bBlue;
  BYTE bExtra;
} CRGB;
# 85 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/lzexpand.h" 1 3






#define _LZEXPAND_







#define LZERROR_BADINHANDLE
#define LZERROR_BADOUTHANDLE
#define LZERROR_READ
#define LZERROR_WRITE
#define LZERROR_GLOBALLOC
#define LZERROR_GLOBLOCK
#define LZERROR_BADVALUE
#define LZERROR_UNKNOWNALG

#define GetExpandedName
#define LZOpenFile

  INT LZStart(void);
  void LZDone(void);
  LONG CopyLZFile(INT,INT);
  LONG LZCopy(INT,INT);
  INT LZInit(INT);
  INT GetExpandedNameA(LPSTR,LPSTR);
  INT GetExpandedNameW(LPWSTR,LPWSTR);
  INT LZOpenFileA(LPSTR,LPOFSTRUCT,WORD);
  INT LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD);
  LONG LZSeek(INT,LONG,INT);
  INT LZRead(INT,LPSTR,INT);
  void LZClose(INT);
# 86 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/mmsystem.h" 1 3






#define _INC_MMSYSTEM


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/mmsystem.h" 2 3






#define WINMMAPI



#define _loadds
#define _huge

#define MAXPNAMELEN
#define MAXERRORLENGTH
#define MAX_JOYSTICKOEMVXDNAME

  typedef UINT MMVERSION;
  typedef UINT MMRESULT;

#define _MMRESULT_


#define DEFINED_LPUINT
  typedef UINT *LPUINT;


  typedef struct mmtime_tag {
    UINT wType;
    union {
      DWORD ms;
      DWORD sample;
      DWORD cb;
      DWORD ticks;
      struct {
 BYTE hour;
 BYTE min;
 BYTE sec;
 BYTE frame;
 BYTE fps;
 BYTE dummy;
 BYTE pad[2];
      } smpte;
      struct {
 DWORD songptrpos;
      } midi;
    } u;
  } MMTIME,*PMMTIME, *NPMMTIME,*LPMMTIME;

#define TIME_MS
#define TIME_SAMPLES
#define TIME_BYTES
#define TIME_SMPTE
#define TIME_MIDI
#define TIME_TICKS


#define MAKEFOURCC




#define MM_JOY1MOVE
#define MM_JOY2MOVE
#define MM_JOY1ZMOVE
#define MM_JOY2ZMOVE
#define MM_JOY1BUTTONDOWN
#define MM_JOY2BUTTONDOWN
#define MM_JOY1BUTTONUP
#define MM_JOY2BUTTONUP

#define MM_MCINOTIFY

#define MM_WOM_OPEN
#define MM_WOM_CLOSE
#define MM_WOM_DONE

#define MM_WIM_OPEN
#define MM_WIM_CLOSE
#define MM_WIM_DATA

#define MM_MIM_OPEN
#define MM_MIM_CLOSE
#define MM_MIM_DATA
#define MM_MIM_LONGDATA
#define MM_MIM_ERROR
#define MM_MIM_LONGERROR

#define MM_MOM_OPEN
#define MM_MOM_CLOSE
#define MM_MOM_DONE


#define MM_DRVM_OPEN
#define MM_DRVM_CLOSE
#define MM_DRVM_DATA
#define MM_DRVM_ERROR


#define MM_STREAM_OPEN
#define MM_STREAM_CLOSE
#define MM_STREAM_DONE
#define MM_STREAM_ERROR

#define MM_MOM_POSITIONCB


#define MM_MCISIGNAL


#define MM_MIM_MOREDATA

#define MM_MIXM_LINE_CHANGE
#define MM_MIXM_CONTROL_CHANGE

#define MMSYSERR_BASE
#define WAVERR_BASE
#define MIDIERR_BASE
#define TIMERR_BASE
#define JOYERR_BASE
#define MCIERR_BASE
#define MIXERR_BASE

#define MCI_STRING_OFFSET
#define MCI_VD_OFFSET
#define MCI_CD_OFFSET
#define MCI_WAVE_OFFSET
#define MCI_SEQ_OFFSET

#define MMSYSERR_NOERROR
#define MMSYSERR_ERROR
#define MMSYSERR_BADDEVICEID
#define MMSYSERR_NOTENABLED
#define MMSYSERR_ALLOCATED
#define MMSYSERR_INVALHANDLE
#define MMSYSERR_NODRIVER
#define MMSYSERR_NOMEM
#define MMSYSERR_NOTSUPPORTED
#define MMSYSERR_BADERRNUM
#define MMSYSERR_INVALFLAG
#define MMSYSERR_INVALPARAM
#define MMSYSERR_HANDLEBUSY

#define MMSYSERR_INVALIDALIAS
#define MMSYSERR_BADDB
#define MMSYSERR_KEYNOTFOUND
#define MMSYSERR_READERROR
#define MMSYSERR_WRITEERROR
#define MMSYSERR_DELETEERROR
#define MMSYSERR_VALNOTFOUND
#define MMSYSERR_NODRIVERCB
#define MMSYSERR_MOREDATA
#define MMSYSERR_LASTERROR

  struct HDRVR__ { int unused; }; typedef struct HDRVR__ *HDRVR;



  typedef struct DRVCONFIGINFOEX {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
  } DRVCONFIGINFOEX,*PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX,*LPDRVCONFIGINFOEX;


#define DRV_LOAD
#define DRV_ENABLE
#define DRV_OPEN
#define DRV_CLOSE
#define DRV_DISABLE
#define DRV_FREE
#define DRV_CONFIGURE
#define DRV_QUERYCONFIGURE
#define DRV_INSTALL
#define DRV_REMOVE
#define DRV_EXITSESSION
#define DRV_POWER
#define DRV_RESERVED
#define DRV_USER

  typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
  } DRVCONFIGINFO,*PDRVCONFIGINFO, *NPDRVCONFIGINFO,*LPDRVCONFIGINFO;

#define DRVCNF_CANCEL
#define DRVCNF_OK
#define DRVCNF_RESTART

  typedef LRESULT ( *DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);

  __attribute__((dllimport)) LRESULT CloseDriver(HDRVR hDriver,LPARAM lParam1,LPARAM lParam2);
  __attribute__((dllimport)) HDRVR OpenDriver(LPCWSTR szDriverName,LPCWSTR szSectionName,LPARAM lParam2);
  __attribute__((dllimport)) LRESULT SendDriverMessage(HDRVR hDriver,UINT message,LPARAM lParam1,LPARAM lParam2);
  __attribute__((dllimport)) HMODULE DrvGetModuleHandle(HDRVR hDriver);
  __attribute__((dllimport)) HMODULE GetDriverModuleHandle(HDRVR hDriver);
  __attribute__((dllimport)) LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier,HDRVR hdrvr,UINT uMsg,LPARAM lParam1,LPARAM lParam2);


#define DRV_CANCEL
#define DRV_OK
#define DRV_RESTART
#define DRV_MCI_FIRST
#define DRV_MCI_LAST


#define CALLBACK_TYPEMASK
#define CALLBACK_NULL
#define CALLBACK_WINDOW
#define CALLBACK_TASK
#define CALLBACK_FUNCTION
#define CALLBACK_THREAD
#define CALLBACK_EVENT
  typedef void ( DRVCALLBACK)(HDRVR hdrvr,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);

  typedef DRVCALLBACK *LPDRVCALLBACK;
  typedef DRVCALLBACK *PDRVCALLBACK;


#define OutputDebugStr




  __attribute__((dllimport)) WINBOOL sndPlaySoundA(LPCSTR pszSound,UINT fuSound);
  __attribute__((dllimport)) WINBOOL sndPlaySoundW(LPCWSTR pszSound,UINT fuSound);

#define sndPlaySound

#define SND_SYNC
#define SND_ASYNC
#define SND_NODEFAULT
#define SND_MEMORY
#define SND_LOOP
#define SND_NOSTOP
#define SND_NOWAIT
#define SND_ALIAS
#define SND_ALIAS_ID
#define SND_FILENAME
#define SND_RESOURCE
#define SND_PURGE
#define SND_APPLICATION

#define SND_ALIAS_START

#define sndAlias

#define SND_ALIAS_SYSTEMASTERISK
#define SND_ALIAS_SYSTEMQUESTION
#define SND_ALIAS_SYSTEMHAND
#define SND_ALIAS_SYSTEMEXIT
#define SND_ALIAS_SYSTEMSTART
#define SND_ALIAS_SYSTEMWELCOME
#define SND_ALIAS_SYSTEMEXCLAMATION
#define SND_ALIAS_SYSTEMDEFAULT

  __attribute__((dllimport)) WINBOOL PlaySoundA(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound);
  __attribute__((dllimport)) WINBOOL PlaySoundW(LPCWSTR pszSound,HMODULE hmod,DWORD fdwSound);

#define PlaySound




#define WAVERR_BADFORMAT
#define WAVERR_STILLPLAYING
#define WAVERR_UNPREPARED
#define WAVERR_SYNC
#define WAVERR_LASTERROR

  struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
  struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
  struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;
  typedef HWAVEIN *LPHWAVEIN;
  typedef HWAVEOUT *LPHWAVEOUT;
  typedef DRVCALLBACK WAVECALLBACK;
  typedef WAVECALLBACK *LPWAVECALLBACK;

#define WOM_OPEN
#define WOM_CLOSE
#define WOM_DONE
#define WIM_OPEN
#define WIM_CLOSE
#define WIM_DATA

#define WAVE_MAPPER

#define WAVE_FORMAT_QUERY
#define WAVE_ALLOWSYNC
#define WAVE_MAPPED
#define WAVE_FORMAT_DIRECT
#define WAVE_FORMAT_DIRECT_QUERY

  typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
  } WAVEHDR,*PWAVEHDR, *NPWAVEHDR,*LPWAVEHDR;

#define WHDR_DONE
#define WHDR_PREPARED
#define WHDR_BEGINLOOP
#define WHDR_ENDLOOP
#define WHDR_INQUEUE

  typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
  } WAVEOUTCAPSA,*PWAVEOUTCAPSA,*NPWAVEOUTCAPSA,*LPWAVEOUTCAPSA;

  typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
  } WAVEOUTCAPSW,*PWAVEOUTCAPSW,*NPWAVEOUTCAPSW,*LPWAVEOUTCAPSW;

  typedef WAVEOUTCAPSA WAVEOUTCAPS;
  typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
  typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
  typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;

  typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEOUTCAPS2A,*PWAVEOUTCAPS2A,*NPWAVEOUTCAPS2A,*LPWAVEOUTCAPS2A;

  typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEOUTCAPS2W,*PWAVEOUTCAPS2W,*NPWAVEOUTCAPS2W,*LPWAVEOUTCAPS2W;

  typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
  typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
  typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
  typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;

#define WAVECAPS_PITCH
#define WAVECAPS_PLAYBACKRATE
#define WAVECAPS_VOLUME
#define WAVECAPS_LRVOLUME
#define WAVECAPS_SYNC
#define WAVECAPS_SAMPLEACCURATE

  typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
  } WAVEINCAPSA,*PWAVEINCAPSA,*NPWAVEINCAPSA,*LPWAVEINCAPSA;

  typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
  } WAVEINCAPSW,*PWAVEINCAPSW,*NPWAVEINCAPSW,*LPWAVEINCAPSW;

  typedef WAVEINCAPSA WAVEINCAPS;
  typedef PWAVEINCAPSA PWAVEINCAPS;
  typedef NPWAVEINCAPSA NPWAVEINCAPS;
  typedef LPWAVEINCAPSA LPWAVEINCAPS;

  typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEINCAPS2A,*PWAVEINCAPS2A,*NPWAVEINCAPS2A,*LPWAVEINCAPS2A;

  typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEINCAPS2W,*PWAVEINCAPS2W,*NPWAVEINCAPS2W,*LPWAVEINCAPS2W;

  typedef WAVEINCAPS2A WAVEINCAPS2;
  typedef PWAVEINCAPS2A PWAVEINCAPS2;
  typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
  typedef LPWAVEINCAPS2A LPWAVEINCAPS2;

#define WAVE_INVALIDFORMAT
#define WAVE_FORMAT_1M08
#define WAVE_FORMAT_1S08
#define WAVE_FORMAT_1M16
#define WAVE_FORMAT_1S16
#define WAVE_FORMAT_2M08
#define WAVE_FORMAT_2S08
#define WAVE_FORMAT_2M16
#define WAVE_FORMAT_2S16
#define WAVE_FORMAT_4M08
#define WAVE_FORMAT_4S08
#define WAVE_FORMAT_4M16
#define WAVE_FORMAT_4S16

#define WAVE_FORMAT_44M08
#define WAVE_FORMAT_44S08
#define WAVE_FORMAT_44M16
#define WAVE_FORMAT_44S16
#define WAVE_FORMAT_48M08
#define WAVE_FORMAT_48S08
#define WAVE_FORMAT_48M16
#define WAVE_FORMAT_48S16
#define WAVE_FORMAT_96M08
#define WAVE_FORMAT_96S08
#define WAVE_FORMAT_96M16
#define WAVE_FORMAT_96S16


  typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
  } WAVEFORMAT,*PWAVEFORMAT, *NPWAVEFORMAT,*LPWAVEFORMAT;

#define WAVE_FORMAT_PCM

  typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
  } PCMWAVEFORMAT,*PPCMWAVEFORMAT, *NPPCMWAVEFORMAT,*LPPCMWAVEFORMAT;



#define _WAVEFORMATEX_

  typedef struct tWAVEFORMATEX {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
  } WAVEFORMATEX,*PWAVEFORMATEX, *NPWAVEFORMATEX,*LPWAVEFORMATEX;

  typedef const WAVEFORMATEX *LPCWAVEFORMATEX;

  __attribute__((dllimport)) UINT waveOutGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID,LPWAVEOUTCAPSA pwoc,UINT cbwoc);
  __attribute__((dllimport)) MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID,LPWAVEOUTCAPSW pwoc,UINT cbwoc);

#define waveOutGetDevCaps

  __attribute__((dllimport)) MMRESULT waveOutGetVolume(HWAVEOUT hwo,LPDWORD pdwVolume);
  __attribute__((dllimport)) MMRESULT waveOutSetVolume(HWAVEOUT hwo,DWORD dwVolume);
  __attribute__((dllimport)) MMRESULT waveOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
  __attribute__((dllimport)) MMRESULT waveOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);

#define waveOutGetErrorText

  __attribute__((dllimport)) MMRESULT waveOutOpen(LPHWAVEOUT phwo,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT waveOutClose(HWAVEOUT hwo);
  __attribute__((dllimport)) MMRESULT waveOutPrepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveOutWrite(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveOutPause(HWAVEOUT hwo);
  __attribute__((dllimport)) MMRESULT waveOutRestart(HWAVEOUT hwo);
  __attribute__((dllimport)) MMRESULT waveOutReset(HWAVEOUT hwo);
  __attribute__((dllimport)) MMRESULT waveOutBreakLoop(HWAVEOUT hwo);
  __attribute__((dllimport)) MMRESULT waveOutGetPosition(HWAVEOUT hwo,LPMMTIME pmmt,UINT cbmmt);
  __attribute__((dllimport)) MMRESULT waveOutGetPitch(HWAVEOUT hwo,LPDWORD pdwPitch);
  __attribute__((dllimport)) MMRESULT waveOutSetPitch(HWAVEOUT hwo,DWORD dwPitch);
  __attribute__((dllimport)) MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo,LPDWORD pdwRate);
  __attribute__((dllimport)) MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo,DWORD dwRate);
  __attribute__((dllimport)) MMRESULT waveOutGetID(HWAVEOUT hwo,LPUINT puDeviceID);
  __attribute__((dllimport)) MMRESULT waveOutMessage(HWAVEOUT hwo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
  __attribute__((dllimport)) UINT waveInGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID,LPWAVEINCAPSA pwic,UINT cbwic);
  __attribute__((dllimport)) MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID,LPWAVEINCAPSW pwic,UINT cbwic);

#define waveInGetDevCaps

  __attribute__((dllimport)) MMRESULT waveInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
  __attribute__((dllimport)) MMRESULT waveInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);

#define waveInGetErrorText

  __attribute__((dllimport)) MMRESULT waveInOpen(LPHWAVEIN phwi,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT waveInClose(HWAVEIN hwi);
  __attribute__((dllimport)) MMRESULT waveInPrepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveInUnprepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveInAddBuffer(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
  __attribute__((dllimport)) MMRESULT waveInStart(HWAVEIN hwi);
  __attribute__((dllimport)) MMRESULT waveInStop(HWAVEIN hwi);
  __attribute__((dllimport)) MMRESULT waveInReset(HWAVEIN hwi);
  __attribute__((dllimport)) MMRESULT waveInGetPosition(HWAVEIN hwi,LPMMTIME pmmt,UINT cbmmt);
  __attribute__((dllimport)) MMRESULT waveInGetID(HWAVEIN hwi,LPUINT puDeviceID);
  __attribute__((dllimport)) MMRESULT waveInMessage(HWAVEIN hwi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);




#define MIDIERR_UNPREPARED
#define MIDIERR_STILLPLAYING
#define MIDIERR_NOMAP
#define MIDIERR_NOTREADY
#define MIDIERR_NODEVICE
#define MIDIERR_INVALIDSETUP
#define MIDIERR_BADOPENMODE
#define MIDIERR_DONT_CONTINUE
#define MIDIERR_LASTERROR

  struct HMIDI__ { int unused; }; typedef struct HMIDI__ *HMIDI;
  struct HMIDIIN__ { int unused; }; typedef struct HMIDIIN__ *HMIDIIN;
  struct HMIDIOUT__ { int unused; }; typedef struct HMIDIOUT__ *HMIDIOUT;
  struct HMIDISTRM__ { int unused; }; typedef struct HMIDISTRM__ *HMIDISTRM;
  typedef HMIDI *LPHMIDI;
  typedef HMIDIIN *LPHMIDIIN;
  typedef HMIDIOUT *LPHMIDIOUT;
  typedef HMIDISTRM *LPHMIDISTRM;
  typedef DRVCALLBACK MIDICALLBACK;
  typedef MIDICALLBACK *LPMIDICALLBACK;
#define MIDIPATCHSIZE
  typedef WORD PATCHARRAY[128];
  typedef WORD *LPPATCHARRAY;
  typedef WORD KEYARRAY[128];
  typedef WORD *LPKEYARRAY;

#define MIM_OPEN
#define MIM_CLOSE
#define MIM_DATA
#define MIM_LONGDATA
#define MIM_ERROR
#define MIM_LONGERROR
#define MOM_OPEN
#define MOM_CLOSE
#define MOM_DONE

#define MIM_MOREDATA
#define MOM_POSITIONCB

#define MIDIMAPPER
#define MIDI_MAPPER

#define MIDI_IO_STATUS

#define MIDI_CACHE_ALL
#define MIDI_CACHE_BESTFIT
#define MIDI_CACHE_QUERY
#define MIDI_UNCACHE

  typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
  } MIDIOUTCAPSA,*PMIDIOUTCAPSA,*NPMIDIOUTCAPSA,*LPMIDIOUTCAPSA;

  typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
  } MIDIOUTCAPSW,*PMIDIOUTCAPSW,*NPMIDIOUTCAPSW,*LPMIDIOUTCAPSW;

  typedef MIDIOUTCAPSA MIDIOUTCAPS;
  typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
  typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
  typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;

  typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIOUTCAPS2A,*PMIDIOUTCAPS2A,*NPMIDIOUTCAPS2A,*LPMIDIOUTCAPS2A;

  typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIOUTCAPS2W,*PMIDIOUTCAPS2W,*NPMIDIOUTCAPS2W,*LPMIDIOUTCAPS2W;

  typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
  typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
  typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
  typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;

#define MOD_MIDIPORT
#define MOD_SYNTH
#define MOD_SQSYNTH
#define MOD_FMSYNTH
#define MOD_MAPPER
#define MOD_WAVETABLE
#define MOD_SWSYNTH

#define MIDICAPS_VOLUME
#define MIDICAPS_LRVOLUME
#define MIDICAPS_CACHE
#define MIDICAPS_STREAM

  typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
  } MIDIINCAPSA,*PMIDIINCAPSA,*NPMIDIINCAPSA,*LPMIDIINCAPSA;

  typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
  } MIDIINCAPSW,*PMIDIINCAPSW,*NPMIDIINCAPSW,*LPMIDIINCAPSW;

  typedef MIDIINCAPSA MIDIINCAPS;
  typedef PMIDIINCAPSA PMIDIINCAPS;
  typedef NPMIDIINCAPSA NPMIDIINCAPS;
  typedef LPMIDIINCAPSA LPMIDIINCAPS;

  typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIINCAPS2A,*PMIDIINCAPS2A,*NPMIDIINCAPS2A,*LPMIDIINCAPS2A;

  typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIINCAPS2W,*PMIDIINCAPS2W,*NPMIDIINCAPS2W,*LPMIDIINCAPS2W;

  typedef MIDIINCAPS2A MIDIINCAPS2;
  typedef PMIDIINCAPS2A PMIDIINCAPS2;
  typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
  typedef LPMIDIINCAPS2A LPMIDIINCAPS2;

  typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;
    DWORD dwOffset;
    DWORD_PTR dwReserved[8];
  } MIDIHDR,*PMIDIHDR, *NPMIDIHDR,*LPMIDIHDR;

  typedef struct midievent_tag {
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
  } MIDIEVENT;

  typedef struct midistrmbuffver_tag {
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
  } MIDISTRMBUFFVER;

#define MHDR_DONE
#define MHDR_PREPARED
#define MHDR_INQUEUE
#define MHDR_ISSTRM

#define MEVT_F_SHORT
#define MEVT_F_LONG
#define MEVT_F_CALLBACK

#define MEVT_EVENTTYPE
#define MEVT_EVENTPARM

#define MEVT_SHORTMSG
#define MEVT_TEMPO
#define MEVT_NOP

#define MEVT_LONGMSG
#define MEVT_COMMENT
#define MEVT_VERSION

#define MIDISTRM_ERROR

#define MIDIPROP_SET
#define MIDIPROP_GET

#define MIDIPROP_TIMEDIV
#define MIDIPROP_TEMPO

  typedef struct midiproptimediv_tag {
    DWORD cbStruct;
    DWORD dwTimeDiv;
  } MIDIPROPTIMEDIV,*LPMIDIPROPTIMEDIV;

  typedef struct midiproptempo_tag {
    DWORD cbStruct;
    DWORD dwTempo;
  } MIDIPROPTEMPO,*LPMIDIPROPTEMPO;

  __attribute__((dllimport)) UINT midiOutGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT midiStreamOpen(LPHMIDISTRM phms,LPUINT puDeviceID,DWORD cMidi,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT midiStreamClose(HMIDISTRM hms);
  __attribute__((dllimport)) MMRESULT midiStreamProperty(HMIDISTRM hms,LPBYTE lppropdata,DWORD dwProperty);
  __attribute__((dllimport)) MMRESULT midiStreamPosition(HMIDISTRM hms,LPMMTIME lpmmt,UINT cbmmt);
  __attribute__((dllimport)) MMRESULT midiStreamOut(HMIDISTRM hms,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiStreamPause(HMIDISTRM hms);
  __attribute__((dllimport)) MMRESULT midiStreamRestart(HMIDISTRM hms);
  __attribute__((dllimport)) MMRESULT midiStreamStop(HMIDISTRM hms);
  __attribute__((dllimport)) MMRESULT midiConnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
  __attribute__((dllimport)) MMRESULT midiDisconnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
  __attribute__((dllimport)) MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID,LPMIDIOUTCAPSA pmoc,UINT cbmoc);
  __attribute__((dllimport)) MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID,LPMIDIOUTCAPSW pmoc,UINT cbmoc);

#define midiOutGetDevCaps

  __attribute__((dllimport)) MMRESULT midiOutGetVolume(HMIDIOUT hmo,LPDWORD pdwVolume);
  __attribute__((dllimport)) MMRESULT midiOutSetVolume(HMIDIOUT hmo,DWORD dwVolume);
  __attribute__((dllimport)) MMRESULT midiOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
  __attribute__((dllimport)) MMRESULT midiOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);

#define midiOutGetErrorText

  __attribute__((dllimport)) MMRESULT midiOutOpen(LPHMIDIOUT phmo,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT midiOutClose(HMIDIOUT hmo);
  __attribute__((dllimport)) MMRESULT midiOutPrepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiOutShortMsg(HMIDIOUT hmo,DWORD dwMsg);
  __attribute__((dllimport)) MMRESULT midiOutLongMsg(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiOutReset(HMIDIOUT hmo);
  __attribute__((dllimport)) MMRESULT midiOutCachePatches(HMIDIOUT hmo,UINT uBank,LPWORD pwpa,UINT fuCache);
  __attribute__((dllimport)) MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo,UINT uPatch,LPWORD pwkya,UINT fuCache);
  __attribute__((dllimport)) MMRESULT midiOutGetID(HMIDIOUT hmo,LPUINT puDeviceID);
  __attribute__((dllimport)) MMRESULT midiOutMessage(HMIDIOUT hmo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
  __attribute__((dllimport)) UINT midiInGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID,LPMIDIINCAPSA pmic,UINT cbmic);
  __attribute__((dllimport)) MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID,LPMIDIINCAPSW pmic,UINT cbmic);

#define midiInGetDevCaps

  __attribute__((dllimport)) MMRESULT midiInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
  __attribute__((dllimport)) MMRESULT midiInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);

#define midiInGetErrorText

  __attribute__((dllimport)) MMRESULT midiInOpen(LPHMIDIIN phmi,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT midiInClose(HMIDIIN hmi);
  __attribute__((dllimport)) MMRESULT midiInPrepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiInUnprepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiInAddBuffer(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
  __attribute__((dllimport)) MMRESULT midiInStart(HMIDIIN hmi);
  __attribute__((dllimport)) MMRESULT midiInStop(HMIDIIN hmi);
  __attribute__((dllimport)) MMRESULT midiInReset(HMIDIIN hmi);
  __attribute__((dllimport)) MMRESULT midiInGetID(HMIDIIN hmi,LPUINT puDeviceID);
  __attribute__((dllimport)) MMRESULT midiInMessage(HMIDIIN hmi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);




#define AUX_MAPPER

  typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
  } AUXCAPSA,*PAUXCAPSA,*NPAUXCAPSA,*LPAUXCAPSA;

  typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
  } AUXCAPSW,*PAUXCAPSW,*NPAUXCAPSW,*LPAUXCAPSW;

  typedef AUXCAPSA AUXCAPS;
  typedef PAUXCAPSA PAUXCAPS;
  typedef NPAUXCAPSA NPAUXCAPS;
  typedef LPAUXCAPSA LPAUXCAPS;

  typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } AUXCAPS2A,*PAUXCAPS2A,*NPAUXCAPS2A,*LPAUXCAPS2A;

  typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } AUXCAPS2W,*PAUXCAPS2W,*NPAUXCAPS2W,*LPAUXCAPS2W;

  typedef AUXCAPS2A AUXCAPS2;
  typedef PAUXCAPS2A PAUXCAPS2;
  typedef NPAUXCAPS2A NPAUXCAPS2;
  typedef LPAUXCAPS2A LPAUXCAPS2;

#define AUXCAPS_CDAUDIO
#define AUXCAPS_AUXIN

#define AUXCAPS_VOLUME
#define AUXCAPS_LRVOLUME

  __attribute__((dllimport)) UINT auxGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID,LPAUXCAPSA pac,UINT cbac);
  __attribute__((dllimport)) MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID,LPAUXCAPSW pac,UINT cbac);

#define auxGetDevCaps

  __attribute__((dllimport)) MMRESULT auxSetVolume(UINT uDeviceID,DWORD dwVolume);
  __attribute__((dllimport)) MMRESULT auxGetVolume(UINT uDeviceID,LPDWORD pdwVolume);
  __attribute__((dllimport)) MMRESULT auxOutMessage(UINT uDeviceID,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);




  struct HMIXEROBJ__ { int unused; }; typedef struct HMIXEROBJ__ *HMIXEROBJ;
  typedef HMIXEROBJ *LPHMIXEROBJ;

  struct HMIXER__ { int unused; }; typedef struct HMIXER__ *HMIXER;
  typedef HMIXER *LPHMIXER;

#define MIXER_SHORT_NAME_CHARS
#define MIXER_LONG_NAME_CHARS

#define MIXERR_INVALLINE
#define MIXERR_INVALCONTROL
#define MIXERR_INVALVALUE
#define MIXERR_LASTERROR

#define MIXER_OBJECTF_HANDLE
#define MIXER_OBJECTF_MIXER
#define MIXER_OBJECTF_HMIXER
#define MIXER_OBJECTF_WAVEOUT
#define MIXER_OBJECTF_HWAVEOUT
#define MIXER_OBJECTF_WAVEIN
#define MIXER_OBJECTF_HWAVEIN
#define MIXER_OBJECTF_MIDIOUT
#define MIXER_OBJECTF_HMIDIOUT
#define MIXER_OBJECTF_MIDIIN
#define MIXER_OBJECTF_HMIDIIN
#define MIXER_OBJECTF_AUX

  __attribute__((dllimport)) UINT mixerGetNumDevs(void);

  typedef struct tagMIXERCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
  } MIXERCAPSA,*PMIXERCAPSA,*LPMIXERCAPSA;

  typedef struct tagMIXERCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
  } MIXERCAPSW,*PMIXERCAPSW,*LPMIXERCAPSW;

  typedef MIXERCAPSA MIXERCAPS;
  typedef PMIXERCAPSA PMIXERCAPS;
  typedef LPMIXERCAPSA LPMIXERCAPS;

  typedef struct tagMIXERCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIXERCAPS2A,*PMIXERCAPS2A,*LPMIXERCAPS2A;

  typedef struct tagMIXERCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIXERCAPS2W,*PMIXERCAPS2W,*LPMIXERCAPS2W;

  typedef MIXERCAPS2A MIXERCAPS2;
  typedef PMIXERCAPS2A PMIXERCAPS2;
  typedef LPMIXERCAPS2A LPMIXERCAPS2;

  __attribute__((dllimport)) MMRESULT mixerGetDevCapsA(UINT_PTR uMxId,LPMIXERCAPSA pmxcaps,UINT cbmxcaps);
  __attribute__((dllimport)) MMRESULT mixerGetDevCapsW(UINT_PTR uMxId,LPMIXERCAPSW pmxcaps,UINT cbmxcaps);

#define mixerGetDevCaps

  __attribute__((dllimport)) MMRESULT mixerOpen(LPHMIXER phmx,UINT uMxId,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
  __attribute__((dllimport)) MMRESULT mixerClose(HMIXER hmx);
  __attribute__((dllimport)) DWORD mixerMessage(HMIXER hmx,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);

  typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
      DWORD dwType;
      DWORD dwDeviceID;
      WORD wMid;
      WORD wPid;
      MMVERSION vDriverVersion;
      CHAR szPname[32];
    } Target;
  } MIXERLINEA,*PMIXERLINEA,*LPMIXERLINEA;

  typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
      DWORD dwType;
      DWORD dwDeviceID;
      WORD wMid;
      WORD wPid;
      MMVERSION vDriverVersion;
      WCHAR szPname[32];
    } Target;
  } MIXERLINEW,*PMIXERLINEW,*LPMIXERLINEW;

  typedef MIXERLINEA MIXERLINE;
  typedef PMIXERLINEA PMIXERLINE;
  typedef LPMIXERLINEA LPMIXERLINE;

#define MIXERLINE_LINEF_ACTIVE
#define MIXERLINE_LINEF_DISCONNECTED
#define MIXERLINE_LINEF_SOURCE

#define MIXERLINE_COMPONENTTYPE_DST_FIRST
#define MIXERLINE_COMPONENTTYPE_DST_UNDEFINED
#define MIXERLINE_COMPONENTTYPE_DST_DIGITAL
#define MIXERLINE_COMPONENTTYPE_DST_LINE
#define MIXERLINE_COMPONENTTYPE_DST_MONITOR
#define MIXERLINE_COMPONENTTYPE_DST_SPEAKERS
#define MIXERLINE_COMPONENTTYPE_DST_HEADPHONES
#define MIXERLINE_COMPONENTTYPE_DST_TELEPHONE
#define MIXERLINE_COMPONENTTYPE_DST_WAVEIN
#define MIXERLINE_COMPONENTTYPE_DST_VOICEIN
#define MIXERLINE_COMPONENTTYPE_DST_LAST
#define MIXERLINE_COMPONENTTYPE_SRC_FIRST
#define MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED
#define MIXERLINE_COMPONENTTYPE_SRC_DIGITAL
#define MIXERLINE_COMPONENTTYPE_SRC_LINE
#define MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE
#define MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER
#define MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC
#define MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE
#define MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER
#define MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT
#define MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY
#define MIXERLINE_COMPONENTTYPE_SRC_ANALOG
#define MIXERLINE_COMPONENTTYPE_SRC_LAST

#define MIXERLINE_TARGETTYPE_UNDEFINED
#define MIXERLINE_TARGETTYPE_WAVEOUT
#define MIXERLINE_TARGETTYPE_WAVEIN
#define MIXERLINE_TARGETTYPE_MIDIOUT
#define MIXERLINE_TARGETTYPE_MIDIIN
#define MIXERLINE_TARGETTYPE_AUX

  __attribute__((dllimport)) MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj,LPMIXERLINEA pmxl,DWORD fdwInfo);
  __attribute__((dllimport)) MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj,LPMIXERLINEW pmxl,DWORD fdwInfo);

#define mixerGetLineInfo

#define MIXER_GETLINEINFOF_DESTINATION
#define MIXER_GETLINEINFOF_SOURCE
#define MIXER_GETLINEINFOF_LINEID
#define MIXER_GETLINEINFOF_COMPONENTTYPE
#define MIXER_GETLINEINFOF_TARGETTYPE

#define MIXER_GETLINEINFOF_QUERYMASK

  __attribute__((dllimport)) MMRESULT mixerGetID(HMIXEROBJ hmxobj,UINT *puMxId,DWORD fdwId);

  typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
      __extension__ struct {
 LONG lMinimum;
 LONG lMaximum;
      } ;
      __extension__ struct {
 DWORD dwMinimum;
 DWORD dwMaximum;
      } ;
      DWORD dwReserved[6];
    } Bounds;
    union {
      DWORD cSteps;
      DWORD cbCustomData;
      DWORD dwReserved[6];
    } Metrics;
  } MIXERCONTROLA,*PMIXERCONTROLA,*LPMIXERCONTROLA;

  typedef struct tagMIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
      __extension__ struct {
 LONG lMinimum;
 LONG lMaximum;
      } ;
      __extension__ struct {
 DWORD dwMinimum;
 DWORD dwMaximum;
      } ;
      DWORD dwReserved[6];
    } Bounds;
    union {
      DWORD cSteps;
      DWORD cbCustomData;
      DWORD dwReserved[6];
    } Metrics;
  } MIXERCONTROLW,*PMIXERCONTROLW,*LPMIXERCONTROLW;

  typedef MIXERCONTROLA MIXERCONTROL;
  typedef PMIXERCONTROLA PMIXERCONTROL;
  typedef LPMIXERCONTROLA LPMIXERCONTROL;

#define MIXERCONTROL_CONTROLF_UNIFORM
#define MIXERCONTROL_CONTROLF_MULTIPLE
#define MIXERCONTROL_CONTROLF_DISABLED

#define MIXERCONTROL_CT_CLASS_MASK
#define MIXERCONTROL_CT_CLASS_CUSTOM
#define MIXERCONTROL_CT_CLASS_METER
#define MIXERCONTROL_CT_CLASS_SWITCH
#define MIXERCONTROL_CT_CLASS_NUMBER
#define MIXERCONTROL_CT_CLASS_SLIDER
#define MIXERCONTROL_CT_CLASS_FADER
#define MIXERCONTROL_CT_CLASS_TIME
#define MIXERCONTROL_CT_CLASS_LIST

#define MIXERCONTROL_CT_SUBCLASS_MASK

#define MIXERCONTROL_CT_SC_SWITCH_BOOLEAN
#define MIXERCONTROL_CT_SC_SWITCH_BUTTON

#define MIXERCONTROL_CT_SC_METER_POLLED

#define MIXERCONTROL_CT_SC_TIME_MICROSECS
#define MIXERCONTROL_CT_SC_TIME_MILLISECS

#define MIXERCONTROL_CT_SC_LIST_SINGLE
#define MIXERCONTROL_CT_SC_LIST_MULTIPLE

#define MIXERCONTROL_CT_UNITS_MASK
#define MIXERCONTROL_CT_UNITS_CUSTOM
#define MIXERCONTROL_CT_UNITS_BOOLEAN
#define MIXERCONTROL_CT_UNITS_SIGNED
#define MIXERCONTROL_CT_UNITS_UNSIGNED
#define MIXERCONTROL_CT_UNITS_DECIBELS
#define MIXERCONTROL_CT_UNITS_PERCENT

#define MIXERCONTROL_CONTROLTYPE_CUSTOM
#define MIXERCONTROL_CONTROLTYPE_BOOLEANMETER
#define MIXERCONTROL_CONTROLTYPE_SIGNEDMETER
#define MIXERCONTROL_CONTROLTYPE_PEAKMETER
#define MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER
#define MIXERCONTROL_CONTROLTYPE_BOOLEAN
#define MIXERCONTROL_CONTROLTYPE_ONOFF
#define MIXERCONTROL_CONTROLTYPE_MUTE
#define MIXERCONTROL_CONTROLTYPE_MONO
#define MIXERCONTROL_CONTROLTYPE_LOUDNESS
#define MIXERCONTROL_CONTROLTYPE_STEREOENH
#define MIXERCONTROL_CONTROLTYPE_BASS_BOOST
#define MIXERCONTROL_CONTROLTYPE_BUTTON
#define MIXERCONTROL_CONTROLTYPE_DECIBELS
#define MIXERCONTROL_CONTROLTYPE_SIGNED
#define MIXERCONTROL_CONTROLTYPE_UNSIGNED
#define MIXERCONTROL_CONTROLTYPE_PERCENT
#define MIXERCONTROL_CONTROLTYPE_SLIDER
#define MIXERCONTROL_CONTROLTYPE_PAN
#define MIXERCONTROL_CONTROLTYPE_QSOUNDPAN
#define MIXERCONTROL_CONTROLTYPE_FADER
#define MIXERCONTROL_CONTROLTYPE_VOLUME
#define MIXERCONTROL_CONTROLTYPE_BASS
#define MIXERCONTROL_CONTROLTYPE_TREBLE
#define MIXERCONTROL_CONTROLTYPE_EQUALIZER
#define MIXERCONTROL_CONTROLTYPE_SINGLESELECT
#define MIXERCONTROL_CONTROLTYPE_MUX
#define MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT
#define MIXERCONTROL_CONTROLTYPE_MIXER
#define MIXERCONTROL_CONTROLTYPE_MICROTIME
#define MIXERCONTROL_CONTROLTYPE_MILLITIME

  typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    __extension__ union {
      DWORD dwControlID;
      DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
  } MIXERLINECONTROLSA,*PMIXERLINECONTROLSA,*LPMIXERLINECONTROLSA;

  typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    __extension__ union {
      DWORD dwControlID;
      DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
  } MIXERLINECONTROLSW,*PMIXERLINECONTROLSW,*LPMIXERLINECONTROLSW;

  typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
  typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
  typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;

  __attribute__((dllimport)) MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSA pmxlc,DWORD fdwControls);
  __attribute__((dllimport)) MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSW pmxlc,DWORD fdwControls);

#define mixerGetLineControls

#define MIXER_GETLINECONTROLSF_ALL
#define MIXER_GETLINECONTROLSF_ONEBYID
#define MIXER_GETLINECONTROLSF_ONEBYTYPE

#define MIXER_GETLINECONTROLSF_QUERYMASK

  typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    __extension__ union {
      HWND hwndOwner;
      DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
  } MIXERCONTROLDETAILS,*PMIXERCONTROLDETAILS,*LPMIXERCONTROLDETAILS;

  typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
  } MIXERCONTROLDETAILS_LISTTEXTA,*PMIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
  typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
  } MIXERCONTROLDETAILS_LISTTEXTW,*PMIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;

  typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
  typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
  typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;

  typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG fValue;
  } MIXERCONTROLDETAILS_BOOLEAN,*PMIXERCONTROLDETAILS_BOOLEAN,*LPMIXERCONTROLDETAILS_BOOLEAN;

  typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG lValue;
  } MIXERCONTROLDETAILS_SIGNED,*PMIXERCONTROLDETAILS_SIGNED,*LPMIXERCONTROLDETAILS_SIGNED;

  typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD dwValue;
  } MIXERCONTROLDETAILS_UNSIGNED,*PMIXERCONTROLDETAILS_UNSIGNED,*LPMIXERCONTROLDETAILS_UNSIGNED;

  __attribute__((dllimport)) MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
  __attribute__((dllimport)) MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);

#define mixerGetControlDetails

#define MIXER_GETCONTROLDETAILSF_VALUE
#define MIXER_GETCONTROLDETAILSF_LISTTEXT

#define MIXER_GETCONTROLDETAILSF_QUERYMASK

  __attribute__((dllimport)) MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);

#define MIXER_SETCONTROLDETAILSF_VALUE
#define MIXER_SETCONTROLDETAILSF_CUSTOM

#define MIXER_SETCONTROLDETAILSF_QUERYMASK




#define TIMERR_NOERROR
#define TIMERR_NOCANDO
#define TIMERR_STRUCT

  typedef void ( TIMECALLBACK)(UINT uTimerID,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
  typedef TIMECALLBACK *LPTIMECALLBACK;

#define TIME_ONESHOT
#define TIME_PERIODIC

#define TIME_CALLBACK_FUNCTION
#define TIME_CALLBACK_EVENT_SET
#define TIME_CALLBACK_EVENT_PULSE
#define TIME_KILL_SYNCHRONOUS

  typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
  } TIMECAPS,*PTIMECAPS, *NPTIMECAPS,*LPTIMECAPS;

  __attribute__((dllimport)) MMRESULT timeGetSystemTime(LPMMTIME pmmt,UINT cbmmt);
  __attribute__((dllimport)) DWORD timeGetTime(void);
  __attribute__((dllimport)) MMRESULT timeSetEvent(UINT uDelay,UINT uResolution,LPTIMECALLBACK fptc,DWORD_PTR dwUser,UINT fuEvent);
  __attribute__((dllimport)) MMRESULT timeKillEvent(UINT uTimerID);
  __attribute__((dllimport)) MMRESULT timeGetDevCaps(LPTIMECAPS ptc,UINT cbtc);
  __attribute__((dllimport)) MMRESULT timeBeginPeriod(UINT uPeriod);
  __attribute__((dllimport)) MMRESULT timeEndPeriod(UINT uPeriod);




#define JOYERR_NOERROR
#define JOYERR_PARMS
#define JOYERR_NOCANDO
#define JOYERR_UNPLUGGED

#define JOY_BUTTON1
#define JOY_BUTTON2
#define JOY_BUTTON3
#define JOY_BUTTON4
#define JOY_BUTTON1CHG
#define JOY_BUTTON2CHG
#define JOY_BUTTON3CHG
#define JOY_BUTTON4CHG

#define JOY_BUTTON5
#define JOY_BUTTON6
#define JOY_BUTTON7
#define JOY_BUTTON8
#define JOY_BUTTON9
#define JOY_BUTTON10
#define JOY_BUTTON11
#define JOY_BUTTON12
#define JOY_BUTTON13
#define JOY_BUTTON14
#define JOY_BUTTON15
#define JOY_BUTTON16
#define JOY_BUTTON17
#define JOY_BUTTON18
#define JOY_BUTTON19
#define JOY_BUTTON20
#define JOY_BUTTON21
#define JOY_BUTTON22
#define JOY_BUTTON23
#define JOY_BUTTON24
#define JOY_BUTTON25
#define JOY_BUTTON26
#define JOY_BUTTON27
#define JOY_BUTTON28
#define JOY_BUTTON29
#define JOY_BUTTON30
#define JOY_BUTTON31
#define JOY_BUTTON32

#define JOY_POVCENTERED
#define JOY_POVFORWARD
#define JOY_POVRIGHT
#define JOY_POVBACKWARD
#define JOY_POVLEFT

#define JOY_RETURNX
#define JOY_RETURNY
#define JOY_RETURNZ
#define JOY_RETURNR
#define JOY_RETURNU
#define JOY_RETURNV
#define JOY_RETURNPOV
#define JOY_RETURNBUTTONS
#define JOY_RETURNRAWDATA
#define JOY_RETURNPOVCTS
#define JOY_RETURNCENTERED
#define JOY_USEDEADZONE
#define JOY_RETURNALL
#define JOY_CAL_READALWAYS
#define JOY_CAL_READXYONLY
#define JOY_CAL_READ3
#define JOY_CAL_READ4
#define JOY_CAL_READXONLY
#define JOY_CAL_READYONLY
#define JOY_CAL_READ5
#define JOY_CAL_READ6
#define JOY_CAL_READZONLY
#define JOY_CAL_READRONLY
#define JOY_CAL_READUONLY
#define JOY_CAL_READVONLY

#define JOYSTICKID1
#define JOYSTICKID2

#define JOYCAPS_HASZ
#define JOYCAPS_HASR
#define JOYCAPS_HASU
#define JOYCAPS_HASV
#define JOYCAPS_HASPOV
#define JOYCAPS_POV4DIR
#define JOYCAPS_POVCTS

  typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
  } JOYCAPSA,*PJOYCAPSA,*NPJOYCAPSA,*LPJOYCAPSA;

  typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
  } JOYCAPSW,*PJOYCAPSW,*NPJOYCAPSW,*LPJOYCAPSW;

  typedef JOYCAPSA JOYCAPS;
  typedef PJOYCAPSA PJOYCAPS;
  typedef NPJOYCAPSA NPJOYCAPS;
  typedef LPJOYCAPSA LPJOYCAPS;

  typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } JOYCAPS2A,*PJOYCAPS2A,*NPJOYCAPS2A,*LPJOYCAPS2A;

  typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } JOYCAPS2W,*PJOYCAPS2W,*NPJOYCAPS2W,*LPJOYCAPS2W;

  typedef JOYCAPS2A JOYCAPS2;
  typedef PJOYCAPS2A PJOYCAPS2;
  typedef NPJOYCAPS2A NPJOYCAPS2;
  typedef LPJOYCAPS2A LPJOYCAPS2;

  typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
  } JOYINFO,*PJOYINFO, *NPJOYINFO,*LPJOYINFO;

  typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
  } JOYINFOEX,*PJOYINFOEX, *NPJOYINFOEX,*LPJOYINFOEX;

  __attribute__((dllimport)) UINT joyGetNumDevs(void);
  __attribute__((dllimport)) MMRESULT joyGetDevCapsA(UINT_PTR uJoyID,LPJOYCAPSA pjc,UINT cbjc);
  __attribute__((dllimport)) MMRESULT joyGetDevCapsW(UINT_PTR uJoyID,LPJOYCAPSW pjc,UINT cbjc);

#define joyGetDevCaps

  __attribute__((dllimport)) MMRESULT joyGetPos(UINT uJoyID,LPJOYINFO pji);
  __attribute__((dllimport)) MMRESULT joyGetPosEx(UINT uJoyID,LPJOYINFOEX pji);
  __attribute__((dllimport)) MMRESULT joyGetThreshold(UINT uJoyID,LPUINT puThreshold);
  __attribute__((dllimport)) MMRESULT joyReleaseCapture(UINT uJoyID);
  __attribute__((dllimport)) MMRESULT joySetCapture(HWND hwnd,UINT uJoyID,UINT uPeriod,WINBOOL fChanged);
  __attribute__((dllimport)) MMRESULT joySetThreshold(UINT uJoyID,UINT uThreshold);




#define MMIOERR_BASE
#define MMIOERR_FILENOTFOUND
#define MMIOERR_OUTOFMEMORY
#define MMIOERR_CANNOTOPEN
#define MMIOERR_CANNOTCLOSE
#define MMIOERR_CANNOTREAD
#define MMIOERR_CANNOTWRITE
#define MMIOERR_CANNOTSEEK
#define MMIOERR_CANNOTEXPAND
#define MMIOERR_CHUNKNOTFOUND
#define MMIOERR_UNBUFFERED
#define MMIOERR_PATHNOTFOUND
#define MMIOERR_ACCESSDENIED
#define MMIOERR_SHARINGVIOLATION
#define MMIOERR_NETWORKERROR
#define MMIOERR_TOOMANYOPENFILES
#define MMIOERR_INVALIDFILE

#define CFSEPCHAR

  typedef DWORD FOURCC;
  typedef char *HPSTR;
  struct HMMIO__ { int unused; }; typedef struct HMMIO__ *HMMIO;
  typedef LRESULT ( MMIOPROC)(LPSTR lpmmioinfo,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
  typedef MMIOPROC *LPMMIOPROC;

  typedef struct _MMIOINFO {
    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;
    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;
    LONG lDiskOffset;
    DWORD adwInfo[3];
    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
  } MMIOINFO,*PMMIOINFO, *NPMMIOINFO,*LPMMIOINFO;

  typedef const MMIOINFO *LPCMMIOINFO;

  typedef struct _MMCKINFO {
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
  } MMCKINFO,*PMMCKINFO, *NPMMCKINFO,*LPMMCKINFO;

  typedef const MMCKINFO *LPCMMCKINFO;

#define MMIO_RWMODE
#define MMIO_SHAREMODE

#define MMIO_CREATE
#define MMIO_PARSE
#define MMIO_DELETE
#define MMIO_EXIST
#define MMIO_ALLOCBUF
#define MMIO_GETTEMP

#define MMIO_DIRTY

#define MMIO_READ
#define MMIO_WRITE
#define MMIO_READWRITE

#define MMIO_COMPAT
#define MMIO_EXCLUSIVE
#define MMIO_DENYWRITE
#define MMIO_DENYREAD
#define MMIO_DENYNONE

#define MMIO_FHOPEN
#define MMIO_EMPTYBUF
#define MMIO_TOUPPER
#define MMIO_INSTALLPROC
#define MMIO_GLOBALPROC
#define MMIO_REMOVEPROC
#define MMIO_UNICODEPROC
#define MMIO_FINDPROC
#define MMIO_FINDCHUNK
#define MMIO_FINDRIFF
#define MMIO_FINDLIST
#define MMIO_CREATERIFF
#define MMIO_CREATELIST

#define MMIOM_READ
#define MMIOM_WRITE
#define MMIOM_SEEK
#define MMIOM_OPEN
#define MMIOM_CLOSE
#define MMIOM_WRITEFLUSH
#define MMIOM_RENAME

#define MMIOM_USER

#define FOURCC_RIFF
#define FOURCC_LIST

#define FOURCC_DOS
#define FOURCC_MEM







#define MMIO_DEFAULTBUFFER

#define mmioFOURCC

  __attribute__((dllimport)) FOURCC mmioStringToFOURCCA(LPCSTR sz,UINT uFlags);
  __attribute__((dllimport)) FOURCC mmioStringToFOURCCW(LPCWSTR sz,UINT uFlags);

#define mmioStringToFOURCC

  __attribute__((dllimport)) LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);
  __attribute__((dllimport)) LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);

#define mmioInstallIOProc

  __attribute__((dllimport)) HMMIO mmioOpenA(LPSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);
  __attribute__((dllimport)) HMMIO mmioOpenW(LPWSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);

#define mmioOpen

  __attribute__((dllimport)) MMRESULT mmioRenameA(LPCSTR pszFileName,LPCSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);
  __attribute__((dllimport)) MMRESULT mmioRenameW(LPCWSTR pszFileName,LPCWSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);

#define mmioRename

  __attribute__((dllimport)) MMRESULT mmioClose(HMMIO hmmio,UINT fuClose);
  __attribute__((dllimport)) LONG mmioRead(HMMIO hmmio,HPSTR pch,LONG cch);
  __attribute__((dllimport)) LONG mmioWrite(HMMIO hmmio,const char *pch,LONG cch);
  __attribute__((dllimport)) LONG mmioSeek(HMMIO hmmio,LONG lOffset,int iOrigin);
  __attribute__((dllimport)) MMRESULT mmioGetInfo(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuInfo);
  __attribute__((dllimport)) MMRESULT mmioSetInfo(HMMIO hmmio,LPCMMIOINFO pmmioinfo,UINT fuInfo);
  __attribute__((dllimport)) MMRESULT mmioSetBuffer(HMMIO hmmio,LPSTR pchBuffer,LONG cchBuffer,UINT fuBuffer);
  __attribute__((dllimport)) MMRESULT mmioFlush(HMMIO hmmio,UINT fuFlush);
  __attribute__((dllimport)) MMRESULT mmioAdvance(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuAdvance);
  __attribute__((dllimport)) LRESULT mmioSendMessage(HMMIO hmmio,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
  __attribute__((dllimport)) MMRESULT mmioDescend(HMMIO hmmio,LPMMCKINFO pmmcki,const MMCKINFO *pmmckiParent,UINT fuDescend);
  __attribute__((dllimport)) MMRESULT mmioAscend(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuAscend);
  __attribute__((dllimport)) MMRESULT mmioCreateChunk(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuCreate);





#define _MCIERROR_
  typedef DWORD MCIERROR;



#define _MCIDEVICEID_
  typedef UINT MCIDEVICEID;


  typedef UINT ( *YIELDPROC)(MCIDEVICEID mciId,DWORD dwYieldData);

  __attribute__((dllimport)) MCIERROR mciSendCommandA(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);
  __attribute__((dllimport)) MCIERROR mciSendCommandW(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);

#define mciSendCommand

  __attribute__((dllimport)) MCIERROR mciSendStringA(LPCSTR lpstrCommand,LPSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);
  __attribute__((dllimport)) MCIERROR mciSendStringW(LPCWSTR lpstrCommand,LPWSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);

#define mciSendString

  __attribute__((dllimport)) MCIDEVICEID mciGetDeviceIDA(LPCSTR pszDevice);
  __attribute__((dllimport)) MCIDEVICEID mciGetDeviceIDW(LPCWSTR pszDevice);

#define mciGetDeviceID

  __attribute__((dllimport)) MCIDEVICEID mciGetDeviceIDFromElementIDA(DWORD dwElementID,LPCSTR lpstrType);
  __attribute__((dllimport)) MCIDEVICEID mciGetDeviceIDFromElementIDW(DWORD dwElementID,LPCWSTR lpstrType);

#define mciGetDeviceIDFromElementID

  __attribute__((dllimport)) WINBOOL mciGetErrorStringA(MCIERROR mcierr,LPSTR pszText,UINT cchText);
  __attribute__((dllimport)) WINBOOL mciGetErrorStringW(MCIERROR mcierr,LPWSTR pszText,UINT cchText);

#define mciGetErrorString

  __attribute__((dllimport)) WINBOOL mciSetYieldProc(MCIDEVICEID mciId,YIELDPROC fpYieldProc,DWORD dwYieldData);
  __attribute__((dllimport)) HTASK mciGetCreatorTask(MCIDEVICEID mciId);
  __attribute__((dllimport)) YIELDPROC mciGetYieldProc(MCIDEVICEID mciId,LPDWORD pdwYieldData);

#define MCIERR_INVALID_DEVICE_ID
#define MCIERR_UNRECOGNIZED_KEYWORD
#define MCIERR_UNRECOGNIZED_COMMAND
#define MCIERR_HARDWARE
#define MCIERR_INVALID_DEVICE_NAME
#define MCIERR_OUT_OF_MEMORY
#define MCIERR_DEVICE_OPEN
#define MCIERR_CANNOT_LOAD_DRIVER
#define MCIERR_MISSING_COMMAND_STRING
#define MCIERR_PARAM_OVERFLOW
#define MCIERR_MISSING_STRING_ARGUMENT
#define MCIERR_BAD_INTEGER
#define MCIERR_PARSER_INTERNAL
#define MCIERR_DRIVER_INTERNAL
#define MCIERR_MISSING_PARAMETER
#define MCIERR_UNSUPPORTED_FUNCTION
#define MCIERR_FILE_NOT_FOUND
#define MCIERR_DEVICE_NOT_READY
#define MCIERR_INTERNAL
#define MCIERR_DRIVER
#define MCIERR_CANNOT_USE_ALL
#define MCIERR_MULTIPLE
#define MCIERR_EXTENSION_NOT_FOUND
#define MCIERR_OUTOFRANGE
#define MCIERR_FLAGS_NOT_COMPATIBLE
#define MCIERR_FILE_NOT_SAVED
#define MCIERR_DEVICE_TYPE_REQUIRED
#define MCIERR_DEVICE_LOCKED
#define MCIERR_DUPLICATE_ALIAS
#define MCIERR_BAD_CONSTANT
#define MCIERR_MUST_USE_SHAREABLE
#define MCIERR_MISSING_DEVICE_NAME
#define MCIERR_BAD_TIME_FORMAT
#define MCIERR_NO_CLOSING_QUOTE
#define MCIERR_DUPLICATE_FLAGS
#define MCIERR_INVALID_FILE
#define MCIERR_NULL_PARAMETER_BLOCK
#define MCIERR_UNNAMED_RESOURCE
#define MCIERR_NEW_REQUIRES_ALIAS
#define MCIERR_NOTIFY_ON_AUTO_OPEN
#define MCIERR_NO_ELEMENT_ALLOWED
#define MCIERR_NONAPPLICABLE_FUNCTION
#define MCIERR_ILLEGAL_FOR_AUTO_OPEN
#define MCIERR_FILENAME_REQUIRED
#define MCIERR_EXTRA_CHARACTERS
#define MCIERR_DEVICE_NOT_INSTALLED
#define MCIERR_GET_CD
#define MCIERR_SET_CD
#define MCIERR_SET_DRIVE
#define MCIERR_DEVICE_LENGTH
#define MCIERR_DEVICE_ORD_LENGTH
#define MCIERR_NO_INTEGER
#define MCIERR_WAVE_OUTPUTSINUSE
#define MCIERR_WAVE_SETOUTPUTINUSE
#define MCIERR_WAVE_INPUTSINUSE
#define MCIERR_WAVE_SETINPUTINUSE
#define MCIERR_WAVE_OUTPUTUNSPECIFIED
#define MCIERR_WAVE_INPUTUNSPECIFIED
#define MCIERR_WAVE_OUTPUTSUNSUITABLE
#define MCIERR_WAVE_SETOUTPUTUNSUITABLE
#define MCIERR_WAVE_INPUTSUNSUITABLE
#define MCIERR_WAVE_SETINPUTUNSUITABLE
#define MCIERR_SEQ_DIV_INCOMPATIBLE
#define MCIERR_SEQ_PORT_INUSE
#define MCIERR_SEQ_PORT_NONEXISTENT
#define MCIERR_SEQ_PORT_MAPNODEVICE
#define MCIERR_SEQ_PORT_MISCERROR
#define MCIERR_SEQ_TIMER
#define MCIERR_SEQ_PORTUNSPECIFIED
#define MCIERR_SEQ_NOMIDIPRESENT
#define MCIERR_NO_WINDOW
#define MCIERR_CREATEWINDOW
#define MCIERR_FILE_READ
#define MCIERR_FILE_WRITE
#define MCIERR_NO_IDENTITY
#define MCIERR_CUSTOM_DRIVER_BASE

#define MCI_FIRST

#define MCI_OPEN
#define MCI_CLOSE
#define MCI_ESCAPE
#define MCI_PLAY
#define MCI_SEEK
#define MCI_STOP
#define MCI_PAUSE
#define MCI_INFO
#define MCI_GETDEVCAPS
#define MCI_SPIN
#define MCI_SET
#define MCI_STEP
#define MCI_RECORD
#define MCI_SYSINFO
#define MCI_BREAK
#define MCI_SAVE
#define MCI_STATUS
#define MCI_CUE
#define MCI_REALIZE
#define MCI_WINDOW
#define MCI_PUT
#define MCI_WHERE
#define MCI_FREEZE
#define MCI_UNFREEZE
#define MCI_LOAD
#define MCI_CUT
#define MCI_COPY
#define MCI_PASTE
#define MCI_UPDATE
#define MCI_RESUME
#define MCI_DELETE

#define MCI_USER_MESSAGES
#define MCI_LAST

#define MCI_ALL_DEVICE_ID

#define MCI_DEVTYPE_VCR
#define MCI_DEVTYPE_VIDEODISC
#define MCI_DEVTYPE_OVERLAY
#define MCI_DEVTYPE_CD_AUDIO
#define MCI_DEVTYPE_DAT
#define MCI_DEVTYPE_SCANNER
#define MCI_DEVTYPE_ANIMATION
#define MCI_DEVTYPE_DIGITAL_VIDEO
#define MCI_DEVTYPE_OTHER
#define MCI_DEVTYPE_WAVEFORM_AUDIO
#define MCI_DEVTYPE_SEQUENCER

#define MCI_DEVTYPE_FIRST
#define MCI_DEVTYPE_LAST

#define MCI_DEVTYPE_FIRST_USER

#define MCI_MODE_NOT_READY
#define MCI_MODE_STOP
#define MCI_MODE_PLAY
#define MCI_MODE_RECORD
#define MCI_MODE_SEEK
#define MCI_MODE_PAUSE
#define MCI_MODE_OPEN

#define MCI_FORMAT_MILLISECONDS
#define MCI_FORMAT_HMS
#define MCI_FORMAT_MSF
#define MCI_FORMAT_FRAMES
#define MCI_FORMAT_SMPTE_24
#define MCI_FORMAT_SMPTE_25
#define MCI_FORMAT_SMPTE_30
#define MCI_FORMAT_SMPTE_30DROP
#define MCI_FORMAT_BYTES
#define MCI_FORMAT_SAMPLES
#define MCI_FORMAT_TMSF

#define MCI_MSF_MINUTE
#define MCI_MSF_SECOND
#define MCI_MSF_FRAME

#define MCI_MAKE_MSF

#define MCI_TMSF_TRACK
#define MCI_TMSF_MINUTE
#define MCI_TMSF_SECOND
#define MCI_TMSF_FRAME

#define MCI_MAKE_TMSF

#define MCI_HMS_HOUR
#define MCI_HMS_MINUTE
#define MCI_HMS_SECOND

#define MCI_MAKE_HMS

#define MCI_NOTIFY_SUCCESSFUL
#define MCI_NOTIFY_SUPERSEDED
#define MCI_NOTIFY_ABORTED
#define MCI_NOTIFY_FAILURE

#define MCI_NOTIFY
#define MCI_WAIT
#define MCI_FROM
#define MCI_TO
#define MCI_TRACK

#define MCI_OPEN_SHAREABLE
#define MCI_OPEN_ELEMENT
#define MCI_OPEN_ALIAS
#define MCI_OPEN_ELEMENT_ID
#define MCI_OPEN_TYPE_ID
#define MCI_OPEN_TYPE

#define MCI_SEEK_TO_START
#define MCI_SEEK_TO_END

#define MCI_STATUS_ITEM
#define MCI_STATUS_START

#define MCI_STATUS_LENGTH
#define MCI_STATUS_POSITION
#define MCI_STATUS_NUMBER_OF_TRACKS
#define MCI_STATUS_MODE
#define MCI_STATUS_MEDIA_PRESENT
#define MCI_STATUS_TIME_FORMAT
#define MCI_STATUS_READY
#define MCI_STATUS_CURRENT_TRACK

#define MCI_INFO_PRODUCT
#define MCI_INFO_FILE
#define MCI_INFO_MEDIA_UPC
#define MCI_INFO_MEDIA_IDENTITY
#define MCI_INFO_NAME
#define MCI_INFO_COPYRIGHT

#define MCI_GETDEVCAPS_ITEM

#define MCI_GETDEVCAPS_CAN_RECORD
#define MCI_GETDEVCAPS_HAS_AUDIO
#define MCI_GETDEVCAPS_HAS_VIDEO
#define MCI_GETDEVCAPS_DEVICE_TYPE
#define MCI_GETDEVCAPS_USES_FILES
#define MCI_GETDEVCAPS_COMPOUND_DEVICE
#define MCI_GETDEVCAPS_CAN_EJECT
#define MCI_GETDEVCAPS_CAN_PLAY
#define MCI_GETDEVCAPS_CAN_SAVE

#define MCI_SYSINFO_QUANTITY
#define MCI_SYSINFO_OPEN
#define MCI_SYSINFO_NAME
#define MCI_SYSINFO_INSTALLNAME

#define MCI_SET_DOOR_OPEN
#define MCI_SET_DOOR_CLOSED
#define MCI_SET_TIME_FORMAT
#define MCI_SET_AUDIO
#define MCI_SET_VIDEO
#define MCI_SET_ON
#define MCI_SET_OFF

#define MCI_SET_AUDIO_ALL
#define MCI_SET_AUDIO_LEFT
#define MCI_SET_AUDIO_RIGHT

#define MCI_BREAK_KEY
#define MCI_BREAK_HWND
#define MCI_BREAK_OFF

#define MCI_RECORD_INSERT
#define MCI_RECORD_OVERWRITE

#define MCI_SAVE_FILE

#define MCI_LOAD_FILE

  typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR dwCallback;
  } MCI_GENERIC_PARMS,*PMCI_GENERIC_PARMS,*LPMCI_GENERIC_PARMS;

  typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
  } MCI_OPEN_PARMSA,*PMCI_OPEN_PARMSA,*LPMCI_OPEN_PARMSA;

  typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
  } MCI_OPEN_PARMSW,*PMCI_OPEN_PARMSW,*LPMCI_OPEN_PARMSW;

  typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
  typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
  typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;

  typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_PLAY_PARMS,*PMCI_PLAY_PARMS,*LPMCI_PLAY_PARMS;

  typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTo;
  } MCI_SEEK_PARMS,*PMCI_SEEK_PARMS,*LPMCI_SEEK_PARMS;

  typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
  } MCI_STATUS_PARMS,*PMCI_STATUS_PARMS,*LPMCI_STATUS_PARMS;

  typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
  } MCI_INFO_PARMSA,*LPMCI_INFO_PARMSA;
  typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
  } MCI_INFO_PARMSW,*LPMCI_INFO_PARMSW;

  typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
  typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;

  typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
  } MCI_GETDEVCAPS_PARMS,*PMCI_GETDEVCAPS_PARMS,*LPMCI_GETDEVCAPS_PARMS;

  typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
  } MCI_SYSINFO_PARMSA,*PMCI_SYSINFO_PARMSA,*LPMCI_SYSINFO_PARMSA;

  typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
  } MCI_SYSINFO_PARMSW,*PMCI_SYSINFO_PARMSW,*LPMCI_SYSINFO_PARMSW;

  typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
  typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
  typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;

  typedef struct tagMCI_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
  } MCI_SET_PARMS,*PMCI_SET_PARMS,*LPMCI_SET_PARMS;

  typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR dwCallback;
    int nVirtKey;
    HWND hwndBreak;
  } MCI_BREAK_PARMS,*PMCI_BREAK_PARMS,*LPMCI_BREAK_PARMS;

  typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
  } MCI_SAVE_PARMSA,*PMCI_SAVE_PARMSA,*LPMCI_SAVE_PARMSA;

  typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
  } MCI_SAVE_PARMSW,*PMCI_SAVE_PARMSW,*LPMCI_SAVE_PARMSW;

  typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
  typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
  typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;

  typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
  } MCI_LOAD_PARMSA,*PMCI_LOAD_PARMSA,*LPMCI_LOAD_PARMSA;

  typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
  } MCI_LOAD_PARMSW,*PMCI_LOAD_PARMSW,*LPMCI_LOAD_PARMSW;

  typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
  typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
  typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;

  typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_RECORD_PARMS,*LPMCI_RECORD_PARMS;

#define MCI_VD_MODE_PARK

#define MCI_VD_MEDIA_CLV
#define MCI_VD_MEDIA_CAV
#define MCI_VD_MEDIA_OTHER

#define MCI_VD_FORMAT_TRACK

#define MCI_VD_PLAY_REVERSE
#define MCI_VD_PLAY_FAST
#define MCI_VD_PLAY_SPEED
#define MCI_VD_PLAY_SCAN
#define MCI_VD_PLAY_SLOW

#define MCI_VD_SEEK_REVERSE

#define MCI_VD_STATUS_SPEED
#define MCI_VD_STATUS_FORWARD
#define MCI_VD_STATUS_MEDIA_TYPE
#define MCI_VD_STATUS_SIDE
#define MCI_VD_STATUS_DISC_SIZE

#define MCI_VD_GETDEVCAPS_CLV
#define MCI_VD_GETDEVCAPS_CAV

#define MCI_VD_SPIN_UP
#define MCI_VD_SPIN_DOWN

#define MCI_VD_GETDEVCAPS_CAN_REVERSE
#define MCI_VD_GETDEVCAPS_FAST_RATE
#define MCI_VD_GETDEVCAPS_SLOW_RATE
#define MCI_VD_GETDEVCAPS_NORMAL_RATE

#define MCI_VD_STEP_FRAMES
#define MCI_VD_STEP_REVERSE

#define MCI_VD_ESCAPE_STRING

  typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
  } MCI_VD_PLAY_PARMS,*PMCI_VD_PLAY_PARMS,*LPMCI_VD_PLAY_PARMS;

  typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
  } MCI_VD_STEP_PARMS,*PMCI_VD_STEP_PARMS,*LPMCI_VD_STEP_PARMS;

  typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
  } MCI_VD_ESCAPE_PARMSA,*PMCI_VD_ESCAPE_PARMSA,*LPMCI_VD_ESCAPE_PARMSA;

  typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
  } MCI_VD_ESCAPE_PARMSW,*PMCI_VD_ESCAPE_PARMSW,*LPMCI_VD_ESCAPE_PARMSW;

  typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
  typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
  typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;

#define MCI_CDA_STATUS_TYPE_TRACK
#define MCI_CDA_TRACK_AUDIO
#define MCI_CDA_TRACK_OTHER

#define MCI_WAVE_PCM
#define MCI_WAVE_MAPPER

#define MCI_WAVE_OPEN_BUFFER

#define MCI_WAVE_SET_FORMATTAG
#define MCI_WAVE_SET_CHANNELS
#define MCI_WAVE_SET_SAMPLESPERSEC
#define MCI_WAVE_SET_AVGBYTESPERSEC
#define MCI_WAVE_SET_BLOCKALIGN
#define MCI_WAVE_SET_BITSPERSAMPLE

#define MCI_WAVE_INPUT
#define MCI_WAVE_OUTPUT

#define MCI_WAVE_STATUS_FORMATTAG
#define MCI_WAVE_STATUS_CHANNELS
#define MCI_WAVE_STATUS_SAMPLESPERSEC
#define MCI_WAVE_STATUS_AVGBYTESPERSEC
#define MCI_WAVE_STATUS_BLOCKALIGN
#define MCI_WAVE_STATUS_BITSPERSAMPLE
#define MCI_WAVE_STATUS_LEVEL

#define MCI_WAVE_SET_ANYINPUT
#define MCI_WAVE_SET_ANYOUTPUT

#define MCI_WAVE_GETDEVCAPS_INPUTS
#define MCI_WAVE_GETDEVCAPS_OUTPUTS

  typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
  } MCI_WAVE_OPEN_PARMSA,*PMCI_WAVE_OPEN_PARMSA,*LPMCI_WAVE_OPEN_PARMSA;

  typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
  } MCI_WAVE_OPEN_PARMSW,*PMCI_WAVE_OPEN_PARMSW,*LPMCI_WAVE_OPEN_PARMSW;

  typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
  typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
  typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;

  typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_WAVE_DELETE_PARMS,*PMCI_WAVE_DELETE_PARMS,*LPMCI_WAVE_DELETE_PARMS;

  typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    UINT wInput;
    UINT wOutput;
    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
  } MCI_WAVE_SET_PARMS,*PMCI_WAVE_SET_PARMS,*LPMCI_WAVE_SET_PARMS;

#define MCI_SEQ_DIV_PPQN
#define MCI_SEQ_DIV_SMPTE_24
#define MCI_SEQ_DIV_SMPTE_25
#define MCI_SEQ_DIV_SMPTE_30DROP
#define MCI_SEQ_DIV_SMPTE_30

#define MCI_SEQ_FORMAT_SONGPTR
#define MCI_SEQ_FILE
#define MCI_SEQ_MIDI
#define MCI_SEQ_SMPTE
#define MCI_SEQ_NONE
#define MCI_SEQ_MAPPER

#define MCI_SEQ_STATUS_TEMPO
#define MCI_SEQ_STATUS_PORT
#define MCI_SEQ_STATUS_SLAVE
#define MCI_SEQ_STATUS_MASTER
#define MCI_SEQ_STATUS_OFFSET
#define MCI_SEQ_STATUS_DIVTYPE
#define MCI_SEQ_STATUS_NAME
#define MCI_SEQ_STATUS_COPYRIGHT

#define MCI_SEQ_SET_TEMPO
#define MCI_SEQ_SET_PORT
#define MCI_SEQ_SET_SLAVE
#define MCI_SEQ_SET_MASTER
#define MCI_SEQ_SET_OFFSET

  typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
  } MCI_SEQ_SET_PARMS,*PMCI_SEQ_SET_PARMS,*LPMCI_SEQ_SET_PARMS;

#define MCI_ANIM_OPEN_WS
#define MCI_ANIM_OPEN_PARENT
#define MCI_ANIM_OPEN_NOSTATIC

#define MCI_ANIM_PLAY_SPEED
#define MCI_ANIM_PLAY_REVERSE
#define MCI_ANIM_PLAY_FAST
#define MCI_ANIM_PLAY_SLOW
#define MCI_ANIM_PLAY_SCAN

#define MCI_ANIM_STEP_REVERSE
#define MCI_ANIM_STEP_FRAMES

#define MCI_ANIM_STATUS_SPEED
#define MCI_ANIM_STATUS_FORWARD
#define MCI_ANIM_STATUS_HWND
#define MCI_ANIM_STATUS_HPAL
#define MCI_ANIM_STATUS_STRETCH

#define MCI_ANIM_INFO_TEXT

#define MCI_ANIM_GETDEVCAPS_CAN_REVERSE
#define MCI_ANIM_GETDEVCAPS_FAST_RATE
#define MCI_ANIM_GETDEVCAPS_SLOW_RATE
#define MCI_ANIM_GETDEVCAPS_NORMAL_RATE
#define MCI_ANIM_GETDEVCAPS_PALETTES
#define MCI_ANIM_GETDEVCAPS_CAN_STRETCH
#define MCI_ANIM_GETDEVCAPS_MAX_WINDOWS

#define MCI_ANIM_REALIZE_NORM
#define MCI_ANIM_REALIZE_BKGD

#define MCI_ANIM_WINDOW_HWND
#define MCI_ANIM_WINDOW_STATE
#define MCI_ANIM_WINDOW_TEXT
#define MCI_ANIM_WINDOW_ENABLE_STRETCH
#define MCI_ANIM_WINDOW_DISABLE_STRETCH

#define MCI_ANIM_WINDOW_DEFAULT

#define MCI_ANIM_RECT
#define MCI_ANIM_PUT_SOURCE
#define MCI_ANIM_PUT_DESTINATION

#define MCI_ANIM_WHERE_SOURCE
#define MCI_ANIM_WHERE_DESTINATION

#define MCI_ANIM_UPDATE_HDC

  typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_ANIM_OPEN_PARMSA,*PMCI_ANIM_OPEN_PARMSA,*LPMCI_ANIM_OPEN_PARMSA;

  typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_ANIM_OPEN_PARMSW,*PMCI_ANIM_OPEN_PARMSW,*LPMCI_ANIM_OPEN_PARMSW;

  typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
  typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
  typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;

  typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
  } MCI_ANIM_PLAY_PARMS,*PMCI_ANIM_PLAY_PARMS,*LPMCI_ANIM_PLAY_PARMS;

  typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
  } MCI_ANIM_STEP_PARMS,*PMCI_ANIM_STEP_PARMS,*LPMCI_ANIM_STEP_PARMS;

  typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
  } MCI_ANIM_WINDOW_PARMSA,*PMCI_ANIM_WINDOW_PARMSA,*LPMCI_ANIM_WINDOW_PARMSA;

  typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
  } MCI_ANIM_WINDOW_PARMSW,*PMCI_ANIM_WINDOW_PARMSW,*LPMCI_ANIM_WINDOW_PARMSW;

  typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
  typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
  typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;

  typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

  } MCI_ANIM_RECT_PARMS;

  typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
  typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;

  typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
  } MCI_ANIM_UPDATE_PARMS,*PMCI_ANIM_UPDATE_PARMS,*LPMCI_ANIM_UPDATE_PARMS;

#define MCI_OVLY_OPEN_WS
#define MCI_OVLY_OPEN_PARENT

#define MCI_OVLY_STATUS_HWND
#define MCI_OVLY_STATUS_STRETCH

#define MCI_OVLY_INFO_TEXT

#define MCI_OVLY_GETDEVCAPS_CAN_STRETCH
#define MCI_OVLY_GETDEVCAPS_CAN_FREEZE
#define MCI_OVLY_GETDEVCAPS_MAX_WINDOWS

#define MCI_OVLY_WINDOW_HWND
#define MCI_OVLY_WINDOW_STATE
#define MCI_OVLY_WINDOW_TEXT
#define MCI_OVLY_WINDOW_ENABLE_STRETCH
#define MCI_OVLY_WINDOW_DISABLE_STRETCH

#define MCI_OVLY_WINDOW_DEFAULT

#define MCI_OVLY_RECT
#define MCI_OVLY_PUT_SOURCE
#define MCI_OVLY_PUT_DESTINATION
#define MCI_OVLY_PUT_FRAME
#define MCI_OVLY_PUT_VIDEO

#define MCI_OVLY_WHERE_SOURCE
#define MCI_OVLY_WHERE_DESTINATION
#define MCI_OVLY_WHERE_FRAME
#define MCI_OVLY_WHERE_VIDEO

  typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_OVLY_OPEN_PARMSA,*PMCI_OVLY_OPEN_PARMSA,*LPMCI_OVLY_OPEN_PARMSA;

  typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_OVLY_OPEN_PARMSW,*PMCI_OVLY_OPEN_PARMSW,*LPMCI_OVLY_OPEN_PARMSW;

  typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
  typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
  typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;

  typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
  } MCI_OVLY_WINDOW_PARMSA,*PMCI_OVLY_WINDOW_PARMSA,*LPMCI_OVLY_WINDOW_PARMSA;

  typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
  } MCI_OVLY_WINDOW_PARMSW,*PMCI_OVLY_WINDOW_PARMSW,*LPMCI_OVLY_WINDOW_PARMSW;

  typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
  typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
  typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;

  typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

  } MCI_OVLY_RECT_PARMS,*PMCI_OVLY_RECT_PARMS,*LPMCI_OVLY_RECT_PARMS;

  typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
  } MCI_OVLY_SAVE_PARMSA,*PMCI_OVLY_SAVE_PARMSA,*LPMCI_OVLY_SAVE_PARMSA;

  typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
  } MCI_OVLY_SAVE_PARMSW,*PMCI_OVLY_SAVE_PARMSW,*LPMCI_OVLY_SAVE_PARMSW;

  typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
  typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
  typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;

  typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
  } MCI_OVLY_LOAD_PARMSA,*PMCI_OVLY_LOAD_PARMSA,*LPMCI_OVLY_LOAD_PARMSA;

  typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
  } MCI_OVLY_LOAD_PARMSW,*PMCI_OVLY_LOAD_PARMSW,*LPMCI_OVLY_LOAD_PARMSW;

  typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
  typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
  typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;



#define NEWTRANSPARENT
#define QUERYROPSUPPORT


#define SELECTDIB
#define DIBINDEX
# 2636 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/mmsystem.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 2637 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/mmsystem.h" 2 3
# 87 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/nb30.h" 1 3






#define NCB_INCLUDED





#define NCBNAMSZ
#define MAX_LANA

  typedef struct _NCB {
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void ( *ncb_post)(struct _NCB *);
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;

    UCHAR ncb_reserve[18];



    HANDLE ncb_event;

  } NCB,*PNCB;

  typedef struct _ADAPTER_STATUS {
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;
    WORD iframe_recv_err;
    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;
    WORD iframe_xmit_err;
    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
  } ADAPTER_STATUS,*PADAPTER_STATUS;

  typedef struct _NAME_BUFFER {
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
  } NAME_BUFFER,*PNAME_BUFFER;

#define NAME_FLAGS_MASK

#define GROUP_NAME
#define UNIQUE_NAME

#define REGISTERING
#define REGISTERED
#define DEREGISTERED
#define DUPLICATE
#define DUPLICATE_DEREG

  typedef struct _SESSION_HEADER {
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
  } SESSION_HEADER,*PSESSION_HEADER;

  typedef struct _SESSION_BUFFER {
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
  } SESSION_BUFFER,*PSESSION_BUFFER;

#define LISTEN_OUTSTANDING
#define CALL_PENDING
#define SESSION_ESTABLISHED
#define HANGUP_PENDING
#define HANGUP_COMPLETE
#define SESSION_ABORTED

  typedef struct _LANA_ENUM {
    UCHAR length;
    UCHAR lana[254 +1];
  } LANA_ENUM,*PLANA_ENUM;

  typedef struct _FIND_NAME_HEADER {
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
  } FIND_NAME_HEADER,*PFIND_NAME_HEADER;

  typedef struct _FIND_NAME_BUFFER {
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
  } FIND_NAME_BUFFER,*PFIND_NAME_BUFFER;

  typedef struct _ACTION_HEADER {
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
  } ACTION_HEADER,*PACTION_HEADER;

#define ALL_TRANSPORTS
#define MS_NBF

#define NCBCALL
#define NCBLISTEN
#define NCBHANGUP
#define NCBSEND
#define NCBRECV
#define NCBRECVANY
#define NCBCHAINSEND
#define NCBDGSEND
#define NCBDGRECV
#define NCBDGSENDBC
#define NCBDGRECVBC
#define NCBADDNAME
#define NCBDELNAME
#define NCBRESET
#define NCBASTAT
#define NCBSSTAT
#define NCBCANCEL
#define NCBADDGRNAME
#define NCBENUM
#define NCBUNLINK
#define NCBSENDNA
#define NCBCHAINSENDNA
#define NCBLANSTALERT
#define NCBACTION
#define NCBFINDNAME
#define NCBTRACE

#define ASYNCH

#define NRC_GOODRET

#define NRC_BUFLEN
#define NRC_ILLCMD
#define NRC_CMDTMO
#define NRC_INCOMP
#define NRC_BADDR
#define NRC_SNUMOUT
#define NRC_NORES
#define NRC_SCLOSED
#define NRC_CMDCAN
#define NRC_DUPNAME
#define NRC_NAMTFUL
#define NRC_ACTSES
#define NRC_LOCTFUL
#define NRC_REMTFUL
#define NRC_ILLNN
#define NRC_NOCALL
#define NRC_NOWILD
#define NRC_INUSE
#define NRC_NAMERR
#define NRC_SABORT
#define NRC_NAMCONF
#define NRC_IFBUSY
#define NRC_TOOMANY
#define NRC_BRIDGE
#define NRC_CANOCCR
#define NRC_CANCEL
#define NRC_DUPENV
#define NRC_ENVNOTDEF
#define NRC_OSRESNOTAV
#define NRC_MAXAPPS
#define NRC_NOSAPS
#define NRC_NORESOURCES
#define NRC_INVADDRESS
#define NRC_INVDDID
#define NRC_LOCKFAIL
#define NRC_OPENERR
#define NRC_SYSTEM

#define NRC_PENDING

  UCHAR Netbios(PNCB pncb);

#define NCB_POST
# 88 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 1 3
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3



#define __RPC_H__





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 1 3




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 6 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 2 3
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#define __RPC_WIN64__
# 39 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3



#define __MIDL_USER_DEFINED
#define midl_user_allocate
#define midl_user_free


  typedef void *I_RPC_HANDLE;
  typedef long RPC_STATUS;

#define RPC_UNICODE_SUPPORTED
#define __RPC_FAR
#define __RPC_API
#define __RPC_USER
#define __RPC_STUB
#define RPC_ENTRY






#define RPCRTAPI





#define RPCNSAPI




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 1 3






#define __RPCDCE_H__
# 31 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 1 3





#define __specstrings
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 3
#define SAL__deref_in
#define SAL__deref_in_ecount
#define SAL__deref_in_bcount

#define SAL__deref_in_opt
#define SAL__deref_in_ecount_opt
#define SAL__deref_in_bcount_opt

#define SAL__deref_opt_in
#define SAL__deref_opt_in_ecount
#define SAL__deref_opt_in_bcount

#define SAL__deref_opt_in_opt
#define SAL__deref_opt_in_ecount_opt
#define SAL__deref_opt_in_bcount_opt

#define SAL__out_awcount
#define SAL__in_awcount



#define SAL__null
#define SAL__notnull
#define SAL__maybenull
#define SAL__readonly
#define SAL__notreadonly
#define SAL__maybereadonly
#define SAL__valid
#define SAL__notvalid
#define SAL__maybevalid
#define SAL__readableTo
#define SAL__elem_readableTo
#define SAL__byte_readableTo
#define SAL__writableTo
#define SAL__elem_writableTo
#define SAL__byte_writableTo
#define SAL__deref
#define SAL__pre
#define SAL__post
#define SAL__precond
#define SAL__postcond
#define SAL__exceptthat
#define SAL__execeptthat
#define SAL__inner_success
#define SAL__inner_checkReturn
#define SAL__inner_typefix
#define SAL__inner_override
#define SAL__inner_callback
#define SAL__inner_blocksOn
#define SAL__inner_fallthrough_dec
#define SAL__inner_fallthrough
#define __refparam
#define SAL__inner_control_entrypoint
#define SAL__inner_data_entrypoint

#define SAL__ecount
#define SAL__bcount

#define SAL__in
#define SAL__in_opt
#define SAL__in_nz
#define SAL__in_nz_opt
#define SAL__in_z
#define SAL__in_z_opt
#define SAL__in_ecount
#define SAL__in_ecount_nz
#define SAL__in_ecount_z
#define SAL__in_bcount
#define SAL__in_bcount_z
#define SAL__in_bcount_nz
#define SAL__in_ecount_opt
#define SAL__in_bcount_opt
#define SAL__in_ecount_z_opt
#define SAL__in_bcount_z_opt
#define SAL__in_ecount_nz_opt
#define SAL__in_bcount_nz_opt

#define SAL__out
#define SAL__out_ecount
#define SAL__out_z
#define SAL__out_nz
#define SAL__out_nz_opt
#define SAL__out_z_opt
#define SAL__out_ecount_part
#define SAL__out_ecount_full
#define SAL__out_ecount_nz
#define SAL__out_ecount_z
#define SAL__out_ecount_part_z
#define SAL__out_ecount_full_z
#define SAL__out_bcount
#define SAL__out_bcount_part
#define SAL__out_bcount_full
#define SAL__out_bcount_z
#define SAL__out_bcount_part_z
#define SAL__out_bcount_full_z
#define SAL__out_bcount_nz

#define SAL__inout
#define SAL__inout_ecount
#define SAL__inout_bcount
#define SAL__inout_ecount_part
#define SAL__inout_bcount_part
#define SAL__inout_ecount_full
#define SAL__inout_bcount_full
#define SAL__inout_z
#define SAL__inout_ecount_z
#define SAL__inout_bcount_z
#define SAL__inout_nz
#define SAL__inout_ecount_nz
#define SAL__inout_bcount_nz
#define SAL__ecount_opt
#define SAL__bcount_opt
#define SAL__out_opt
#define SAL__out_ecount_opt
#define SAL__out_bcount_opt
#define SAL__out_ecount_part_opt
#define SAL__out_bcount_part_opt
#define SAL__out_ecount_full_opt
#define SAL__out_bcount_full_opt
#define SAL__out_ecount_z_opt
#define SAL__out_bcount_z_opt
#define SAL__out_ecount_part_z_opt
#define SAL__out_bcount_part_z_opt
#define SAL__out_ecount_full_z_opt
#define SAL__out_bcount_full_z_opt
#define SAL__out_ecount_nz_opt
#define SAL__out_bcount_nz_opt
#define SAL__inout_opt
#define SAL__inout_ecount_opt
#define SAL__inout_bcount_opt
#define SAL__inout_ecount_part_opt
#define SAL__inout_bcount_part_opt
#define SAL__inout_ecount_full_opt
#define SAL__inout_bcount_full_opt
#define SAL__inout_z_opt
#define SAL__inout_ecount_z_opt
#define SAL__inout_bcount_z_opt
#define SAL__inout_nz_opt
#define SAL__inout_ecount_nz_opt
#define SAL__inout_bcount_nz_opt
#define SAL__deref_ecount
#define SAL__deref_bcount
#define SAL__deref_out
#define SAL__deref_out_ecount
#define SAL__deref_out_bcount
#define SAL__deref_out_ecount_part
#define SAL__deref_out_bcount_part
#define SAL__deref_out_ecount_full
#define SAL__deref_out_bcount_full
#define SAL__deref_out_z
#define SAL__deref_out_ecount_z
#define SAL__deref_out_bcount_z
#define SAL__deref_out_nz
#define SAL__deref_out_ecount_nz
#define SAL__deref_out_bcount_nz
#define SAL__deref_inout
#define SAL__deref_inout_ecount
#define SAL__deref_inout_bcount
#define SAL__deref_inout_ecount_part
#define SAL__deref_inout_bcount_part
#define SAL__deref_inout_ecount_full
#define SAL__deref_inout_bcount_full
#define SAL__deref_inout_z
#define SAL__deref_inout_ecount_z
#define SAL__deref_inout_bcount_z
#define SAL__deref_inout_nz
#define SAL__deref_inout_ecount_nz
#define SAL__deref_inout_bcount_nz
#define SAL__deref_ecount_opt
#define SAL__deref_bcount_opt
#define SAL__deref_out_opt
#define SAL__deref_out_ecount_opt
#define SAL__deref_out_bcount_opt
#define SAL__deref_out_ecount_part_opt
#define SAL__deref_out_bcount_part_opt
#define SAL__deref_out_ecount_full_opt
#define SAL__deref_out_bcount_full_opt
#define SAL__deref_out_z_opt
#define SAL__deref_out_ecount_z_opt
#define SAL__deref_out_bcount_z_opt
#define SAL__deref_out_nz_opt
#define SAL__deref_out_ecount_nz_opt
#define SAL__deref_out_bcount_nz_opt
#define SAL__deref_inout_opt
#define SAL__deref_inout_ecount_opt
#define SAL__deref_inout_bcount_opt
#define SAL__deref_inout_ecount_part_opt
#define SAL__deref_inout_bcount_part_opt
#define SAL__deref_inout_ecount_full_opt
#define SAL__deref_inout_bcount_full_opt
#define SAL__deref_inout_z_opt
#define SAL__deref_inout_ecount_z_opt
#define SAL__deref_inout_bcount_z_opt
#define SAL__deref_inout_nz_opt
#define SAL__deref_inout_ecount_nz_opt
#define SAL__deref_inout_bcount_nz_opt
#define SAL__deref_opt_ecount
#define SAL__deref_opt_bcount
#define SAL__deref_opt_out
#define SAL__deref_opt_out_z
#define SAL__deref_opt_out_ecount
#define SAL__deref_opt_out_bcount
#define SAL__deref_opt_out_ecount_part
#define SAL__deref_opt_out_bcount_part
#define SAL__deref_opt_out_ecount_full
#define SAL__deref_opt_out_bcount_full
#define SAL__deref_opt_inout
#define SAL__deref_opt_inout_ecount
#define SAL__deref_opt_inout_bcount
#define SAL__deref_opt_inout_ecount_part
#define SAL__deref_opt_inout_bcount_part
#define SAL__deref_opt_inout_ecount_full
#define SAL__deref_opt_inout_bcount_full
#define SAL__deref_opt_inout_z
#define SAL__deref_opt_inout_ecount_z
#define SAL__deref_opt_inout_bcount_z
#define SAL__deref_opt_inout_nz
#define SAL__deref_opt_inout_ecount_nz
#define SAL__deref_opt_inout_bcount_nz
#define SAL__deref_opt_ecount_opt
#define SAL__deref_opt_bcount_opt
#define SAL__deref_opt_out_opt
#define SAL__deref_opt_out_ecount_opt
#define SAL__deref_opt_out_bcount_opt
#define SAL__deref_opt_out_ecount_part_opt
#define SAL__deref_opt_out_bcount_part_opt
#define SAL__deref_opt_out_ecount_full_opt
#define SAL__deref_opt_out_bcount_full_opt
#define SAL__deref_opt_out_z_opt
#define SAL__deref_opt_out_ecount_z_opt
#define SAL__deref_opt_out_bcount_z_opt
#define SAL__deref_opt_out_nz_opt
#define SAL__deref_opt_out_ecount_nz_opt
#define SAL__deref_opt_out_bcount_nz_opt
#define SAL__deref_opt_inout_opt
#define SAL__deref_opt_inout_ecount_opt
#define SAL__deref_opt_inout_bcount_opt
#define SAL__deref_opt_inout_ecount_part_opt
#define SAL__deref_opt_inout_bcount_part_opt
#define SAL__deref_opt_inout_ecount_full_opt
#define SAL__deref_opt_inout_bcount_full_opt
#define SAL__deref_opt_inout_z_opt
#define SAL__deref_opt_inout_ecount_z_opt
#define SAL__deref_opt_inout_bcount_z_opt
#define SAL__deref_opt_inout_nz_opt
#define SAL__deref_opt_inout_ecount_nz_opt
#define SAL__deref_opt_inout_bcount_nz_opt

#define SAL__success
#define SAL__nullterminated
#define SAL__nullnullterminated
#define SAL__reserved
#define SAL__checkReturn
#define SAL__typefix
#define SAL__override
#define SAL__callback
#define SAL__format_string
#define SAL__blocksOn
#define SAL__control_entrypoint
#define SAL__data_entrypoint
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 2 3

  typedef unsigned char *RPC_CSTR;
  typedef unsigned short *RPC_WSTR;
  typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
  typedef RPC_BINDING_HANDLE handle_t;

#define rpc_binding_handle_t

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 2 3


#define UUID_DEFINED
  typedef GUID UUID;

#define uuid_t



  typedef struct _RPC_BINDING_VECTOR {
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
  } RPC_BINDING_VECTOR;

#define rpc_binding_vector_t


  typedef struct _UUID_VECTOR {
    unsigned long Count;
    UUID *Uuid[1];
  } UUID_VECTOR;

#define uuid_vector_t


  typedef void *RPC_IF_HANDLE;


#define IFID_DEFINED
  typedef struct _RPC_IF_ID {
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
  } RPC_IF_ID;


#define RPC_C_BINDING_INFINITE_TIMEOUT
#define RPC_C_BINDING_MIN_TIMEOUT
#define RPC_C_BINDING_DEFAULT_TIMEOUT
#define RPC_C_BINDING_MAX_TIMEOUT

#define RPC_C_CANCEL_INFINITE_TIMEOUT

#define RPC_C_LISTEN_MAX_CALLS_DEFAULT
#define RPC_C_PROTSEQ_MAX_REQS_DEFAULT

#define RPC_C_BIND_TO_ALL_NICS
#define RPC_C_USE_INTERNET_PORT
#define RPC_C_USE_INTRANET_PORT
#define RPC_C_DONT_FAIL

#define RPC_C_MQ_TEMPORARY
#define RPC_C_MQ_PERMANENT
#define RPC_C_MQ_CLEAR_ON_OPEN
#define RPC_C_MQ_USE_EXISTING_SECURITY
#define RPC_C_MQ_AUTHN_LEVEL_NONE
#define RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY
#define RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY

#define RPC_C_OPT_MQ_DELIVERY
#define RPC_C_OPT_MQ_PRIORITY
#define RPC_C_OPT_MQ_JOURNAL
#define RPC_C_OPT_MQ_ACKNOWLEDGE
#define RPC_C_OPT_MQ_AUTHN_SERVICE
#define RPC_C_OPT_MQ_AUTHN_LEVEL
#define RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE
#define RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED
#define RPC_C_OPT_BINDING_NONCAUSAL
#define RPC_C_OPT_SECURITY_CALLBACK
#define RPC_C_OPT_UNIQUE_BINDING
#define RPC_C_OPT_CALL_TIMEOUT
#define RPC_C_OPT_DONT_LINGER
#define RPC_C_OPT_MAX_OPTIONS

#define RPC_C_MQ_EXPRESS
#define RPC_C_MQ_RECOVERABLE

#define RPC_C_MQ_JOURNAL_NONE
#define RPC_C_MQ_JOURNAL_DEADLETTER
#define RPC_C_MQ_JOURNAL_ALWAYS

#define RPC_C_FULL_CERT_CHAIN

  typedef struct _RPC_PROTSEQ_VECTORA {
    unsigned int Count;
    unsigned char *Protseq[1];
  } RPC_PROTSEQ_VECTORA;

  typedef struct _RPC_PROTSEQ_VECTORW {
    unsigned int Count;
    unsigned short *Protseq[1];
  } RPC_PROTSEQ_VECTORW;

#define RPC_PROTSEQ_VECTOR

  typedef struct _RPC_POLICY {
    unsigned int Length;
    unsigned long EndpointFlags;
    unsigned long NICFlags;
  } RPC_POLICY,*PRPC_POLICY;

  typedef void RPC_OBJECT_INQ_FN(UUID *ObjectUuid,UUID *TypeUuid,RPC_STATUS *Status);
  typedef RPC_STATUS RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid,void *Context);
  typedef void RPC_SECURITY_CALLBACK_FN(void *Context);

#define RPC_MGR_EPV

  typedef struct {
    unsigned int Count;
    unsigned long Stats[1];
  } RPC_STATS_VECTOR;

#define RPC_C_STATS_CALLS_IN
#define RPC_C_STATS_CALLS_OUT
#define RPC_C_STATS_PKTS_IN
#define RPC_C_STATS_PKTS_OUT

  typedef struct {
    unsigned long Count;
    RPC_IF_ID *IfId[1];
  } RPC_IF_ID_VECTOR;

#define RpcBindingFromStringBinding
#define RpcBindingToStringBinding
#define RpcStringBindingCompose
#define RpcStringBindingParse
#define RpcStringFree
#define RpcNetworkIsProtseqValid
#define RpcNetworkInqProtseqs
#define RpcProtseqVectorFree
#define RpcServerUseProtseq
#define RpcServerUseProtseqEx
#define RpcServerUseProtseqEp
#define RpcServerUseProtseqEpEx
#define RpcServerUseProtseqIf
#define RpcServerUseProtseqIfEx
#define RpcMgmtInqServerPrincName
#define RpcServerInqDefaultPrincName
#define RpcNsBindingInqEntryName

  __attribute__((dllimport)) RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR optionValue);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR *pOptionValue);
  __attribute__((dllimport)) RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding,RPC_BINDING_HANDLE *Binding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding,RPC_BINDING_HANDLE *Binding);
  __attribute__((dllimport)) RPC_STATUS RpcSsGetContextBinding(void *ContextHandle,RPC_BINDING_HANDLE *Binding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
  __attribute__((dllimport)) RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc,unsigned long *AuthnLevel);
  __attribute__((dllimport)) RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding,RPC_CSTR *StringBinding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding,RPC_WSTR *StringBinding);
  __attribute__((dllimport)) RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector);
  __attribute__((dllimport)) RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid,RPC_CSTR Protseq,RPC_CSTR NetworkAddr,RPC_CSTR Endpoint,RPC_CSTR Options,RPC_CSTR *StringBinding);
  __attribute__((dllimport)) RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid,RPC_WSTR Protseq,RPC_WSTR NetworkAddr,RPC_WSTR Endpoint,RPC_WSTR Options,RPC_WSTR *StringBinding);
  __attribute__((dllimport)) RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding,RPC_CSTR *ObjUuid,RPC_CSTR *Protseq,RPC_CSTR *NetworkAddr,RPC_CSTR *Endpoint,RPC_CSTR *NetworkOptions);
  __attribute__((dllimport)) RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding,RPC_WSTR *ObjUuid,RPC_WSTR *Protseq,RPC_WSTR *NetworkAddr,RPC_WSTR *Endpoint,RPC_WSTR *NetworkOptions);
  __attribute__((dllimport)) RPC_STATUS RpcStringFreeA(RPC_CSTR *String);
  __attribute__((dllimport)) RPC_STATUS RpcStringFreeW(RPC_WSTR *String);
  __attribute__((dllimport)) RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle,RPC_IF_ID *RpcIfId);
  __attribute__((dllimport)) RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq);
  __attribute__((dllimport)) RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding,unsigned int *Timeout);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding,unsigned int Timeout);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout);
  __attribute__((dllimport)) RPC_STATUS RpcNetworkInqProtseqsA (RPC_PROTSEQ_VECTORA **ProtseqVector);
  __attribute__((dllimport)) RPC_STATUS RpcNetworkInqProtseqsW (RPC_PROTSEQ_VECTORW **ProtseqVector);
  __attribute__((dllimport)) RPC_STATUS RpcObjectInqType(UUID *ObjUuid,UUID *TypeUuid);
  __attribute__((dllimport)) RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn);
  __attribute__((dllimport)) RPC_STATUS RpcObjectSetType(UUID *ObjUuid,UUID *TypeUuid);
  __attribute__((dllimport)) RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector);
  __attribute__((dllimport)) RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector);
  __attribute__((dllimport)) RPC_STATUS RpcServerInqBindings (RPC_BINDING_VECTOR **BindingVector);
  __attribute__((dllimport)) RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void **MgrEpv);
  __attribute__((dllimport)) RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads,unsigned int MaxCalls,unsigned int DontWait);
  __attribute__((dllimport)) RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv);
  __attribute__((dllimport)) RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,RPC_IF_CALLBACK_FN *IfCallback);
  __attribute__((dllimport)) RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,unsigned int MaxRpcSize,RPC_IF_CALLBACK_FN *IfCallbackFn);
  __attribute__((dllimport)) RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,unsigned int WaitForCallsToComplete);
  __attribute__((dllimport)) RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,int RundownContextHandles);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
  __attribute__((dllimport)) RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
  __attribute__((dllimport)) void RpcServerYield ();
  __attribute__((dllimport)) RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding,RPC_STATS_VECTOR **Statistics);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtWaitServerListen(void);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize);
  __attribute__((dllimport)) void RpcSsDontSerializeContext(void);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtEnableIdleCleanup(void);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding,RPC_IF_ID_VECTOR **IfIdVector);
  __attribute__((dllimport)) RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_CSTR *ServerPrincName);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_WSTR *ServerPrincName);
  __attribute__((dllimport)) RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc,RPC_CSTR *PrincName);
  __attribute__((dllimport)) RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc,RPC_WSTR *PrincName);
  __attribute__((dllimport)) RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding,RPC_IF_HANDLE IfSpec);
  __attribute__((dllimport)) RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR *EntryName);
  __attribute__((dllimport)) RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR *EntryName);

  typedef void *RPC_AUTH_IDENTITY_HANDLE;
  typedef void *RPC_AUTHZ_HANDLE;

#define RPC_C_AUTHN_LEVEL_DEFAULT
#define RPC_C_AUTHN_LEVEL_NONE
#define RPC_C_AUTHN_LEVEL_CONNECT
#define RPC_C_AUTHN_LEVEL_CALL
#define RPC_C_AUTHN_LEVEL_PKT
#define RPC_C_AUTHN_LEVEL_PKT_INTEGRITY
#define RPC_C_AUTHN_LEVEL_PKT_PRIVACY

#define RPC_C_IMP_LEVEL_DEFAULT
#define RPC_C_IMP_LEVEL_ANONYMOUS
#define RPC_C_IMP_LEVEL_IDENTIFY
#define RPC_C_IMP_LEVEL_IMPERSONATE
#define RPC_C_IMP_LEVEL_DELEGATE

#define RPC_C_QOS_IDENTITY_STATIC
#define RPC_C_QOS_IDENTITY_DYNAMIC

#define RPC_C_QOS_CAPABILITIES_DEFAULT
#define RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH
#define RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC
#define RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY
#define RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE
#define RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT

#define RPC_C_PROTECT_LEVEL_DEFAULT
#define RPC_C_PROTECT_LEVEL_NONE
#define RPC_C_PROTECT_LEVEL_CONNECT
#define RPC_C_PROTECT_LEVEL_CALL
#define RPC_C_PROTECT_LEVEL_PKT
#define RPC_C_PROTECT_LEVEL_PKT_INTEGRITY
#define RPC_C_PROTECT_LEVEL_PKT_PRIVACY

#define RPC_C_AUTHN_NONE
#define RPC_C_AUTHN_DCE_PRIVATE
#define RPC_C_AUTHN_DCE_PUBLIC
#define RPC_C_AUTHN_DEC_PUBLIC
#define RPC_C_AUTHN_GSS_NEGOTIATE
#define RPC_C_AUTHN_WINNT
#define RPC_C_AUTHN_GSS_SCHANNEL
#define RPC_C_AUTHN_GSS_KERBEROS
#define RPC_C_AUTHN_DPA
#define RPC_C_AUTHN_MSN
#define RPC_C_AUTHN_DIGEST
#define RPC_C_AUTHN_MQ
#define RPC_C_AUTHN_DEFAULT

#define RPC_C_NO_CREDENTIALS

#define RPC_C_SECURITY_QOS_VERSION
#define RPC_C_SECURITY_QOS_VERSION_1

  typedef struct _RPC_SECURITY_QOS {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
  } RPC_SECURITY_QOS,*PRPC_SECURITY_QOS;


#define _AUTH_IDENTITY_DEFINED

#define SEC_WINNT_AUTH_IDENTITY_ANSI
#define SEC_WINNT_AUTH_IDENTITY_UNICODE

  typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
    unsigned short *User;
    unsigned long UserLength;
    unsigned short *Domain;
    unsigned long DomainLength;
    unsigned short *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
  } SEC_WINNT_AUTH_IDENTITY_W,*PSEC_WINNT_AUTH_IDENTITY_W;

  typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
    unsigned char *User;
    unsigned long UserLength;
    unsigned char *Domain;
    unsigned long DomainLength;
    unsigned char *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
  } SEC_WINNT_AUTH_IDENTITY_A,*PSEC_WINNT_AUTH_IDENTITY_A;

#define SEC_WINNT_AUTH_IDENTITY
#define PSEC_WINNT_AUTH_IDENTITY
#define _SEC_WINNT_AUTH_IDENTITY

#define RPC_C_SECURITY_QOS_VERSION_2

#define RPC_C_AUTHN_INFO_TYPE_HTTP

#define RPC_C_HTTP_AUTHN_TARGET_SERVER
#define RPC_C_HTTP_AUTHN_TARGET_PROXY

#define RPC_C_HTTP_AUTHN_SCHEME_BASIC
#define RPC_C_HTTP_AUTHN_SCHEME_NTLM
#define RPC_C_HTTP_AUTHN_SCHEME_PASSPORT
#define RPC_C_HTTP_AUTHN_SCHEME_DIGEST
#define RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE
#define RPC_C_HTTP_AUTHN_SCHEME_CERT

#define RPC_C_HTTP_FLAG_USE_SSL
#define RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME
#define RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID

  typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
  } RPC_HTTP_TRANSPORT_CREDENTIALS_W,*PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

  typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
  } RPC_HTTP_TRANSPORT_CREDENTIALS_A,*PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

  typedef struct _RPC_SECURITY_QOS_V2_W {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
  } RPC_SECURITY_QOS_V2_W,*PRPC_SECURITY_QOS_V2_W;

  typedef struct _RPC_SECURITY_QOS_V2_A {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
  } RPC_SECURITY_QOS_V2_A,*PRPC_SECURITY_QOS_V2_A;

#define RPC_C_SECURITY_QOS_VERSION_3

  typedef struct _RPC_SECURITY_QOS_V3_W {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
    void *Sid;
  } RPC_SECURITY_QOS_V3_W,*PRPC_SECURITY_QOS_V3_W;

  typedef struct _RPC_SECURITY_QOS_V3_A {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
    void *Sid;
  } RPC_SECURITY_QOS_V3_A,*PRPC_SECURITY_QOS_V3_A;


#define RPC_SECURITY_QOS_V2
#define PRPC_SECURITY_QOS_V2
#define _RPC_SECURITY_QOS_V2
#define RPC_HTTP_TRANSPORT_CREDENTIALS
#define PRPC_HTTP_TRANSPORT_CREDENTIALS
#define _RPC_HTTP_TRANSPORT_CREDENTIALS
#define RPC_SECURITY_QOS_V3
#define PRPC_SECURITY_QOS_V3
#define _RPC_SECURITY_QOS_V3

  typedef enum _RPC_HTTP_REDIRECTOR_STAGE {
    RPCHTTP_RS_REDIRECT = 1,RPCHTTP_RS_ACCESS_1,RPCHTTP_RS_SESSION,RPCHTTP_RS_ACCESS_2,RPCHTTP_RS_INTERFACE
  } RPC_HTTP_REDIRECTOR_STAGE;

  typedef RPC_STATUS ( *RPC_NEW_HTTP_PROXY_CHANNEL)(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,unsigned short *ServerName,unsigned short *ServerPort,unsigned short *RemoteUser,unsigned short *AuthType,void *ResourceUuid,void *Metadata,void *SessionId,void *Interface,void *Reserved,unsigned long Flags,unsigned short **NewServerName,unsigned short **NewServerPort);
  typedef void ( *RPC_HTTP_PROXY_FREE_STRING)(unsigned short *String);

#define RPC_C_AUTHZ_NONE
#define RPC_C_AUTHZ_NAME
#define RPC_C_AUTHZ_DCE
#define RPC_C_AUTHZ_DEFAULT

  __attribute__((dllimport)) RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle);
  __attribute__((dllimport)) RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle);
  __attribute__((dllimport)) RPC_STATUS RpcRevertToSelf();
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQos);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
  __attribute__((dllimport)) RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQOS);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);
  __attribute__((dllimport)) RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);

  typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg,unsigned short *ServerPrincName,unsigned long KeyVer,void **Key,RPC_STATUS *Status);

  __attribute__((dllimport)) RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);
  __attribute__((dllimport)) RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);

#define RpcBindingInqAuthClient
#define RpcBindingInqAuthClientEx
#define RpcBindingInqAuthInfo
#define RpcBindingSetAuthInfo
#define RpcServerRegisterAuthInfo
#define RpcBindingInqAuthInfoEx
#define RpcBindingSetAuthInfoEx


  typedef struct {
    unsigned char *UserName;
    unsigned char *ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
  } RPC_CLIENT_INFORMATION1,*PRPC_CLIENT_INFORMATION1;


#define UuidFromString
#define UuidToString
#define RpcEpRegisterNoReplace
#define RpcEpRegister
#define DceErrorInqText

#define DCE_C_ERROR_STRING_LEN

  __attribute__((dllimport)) RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding,RPC_BINDING_HANDLE *ServerBinding);
  __attribute__((dllimport)) __attribute__((noreturn)) void RpcRaiseException(RPC_STATUS exception);
  __attribute__((dllimport)) RPC_STATUS RpcTestCancel();
  __attribute__((dllimport)) RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle);
  __attribute__((dllimport)) RPC_STATUS RpcCancelThread(void *Thread);
  __attribute__((dllimport)) RPC_STATUS RpcCancelThreadEx(void *Thread,long Timeout);
  __attribute__((dllimport)) RPC_STATUS UuidCreate(UUID *Uuid);
  __attribute__((dllimport)) RPC_STATUS UuidCreateSequential(UUID *Uuid);
  __attribute__((dllimport)) RPC_STATUS UuidToStringA(UUID *Uuid,RPC_CSTR *StringUuid);
  __attribute__((dllimport)) RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid,UUID *Uuid);
  __attribute__((dllimport)) RPC_STATUS UuidToStringW(UUID *Uuid,RPC_WSTR *StringUuid);
  __attribute__((dllimport)) RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid,UUID *Uuid);
  __attribute__((dllimport)) signed int UuidCompare(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
  __attribute__((dllimport)) RPC_STATUS UuidCreateNil(UUID *NilUuid);
  __attribute__((dllimport)) int UuidEqual(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
  __attribute__((dllimport)) unsigned short UuidHash(UUID *Uuid,RPC_STATUS *Status);
  __attribute__((dllimport)) int UuidIsNil(UUID *Uuid,RPC_STATUS *Status);
  __attribute__((dllimport)) RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector);
  __attribute__((dllimport)) RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus,RPC_CSTR ErrorText);
  __attribute__((dllimport)) RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus,RPC_WSTR ErrorText);

  typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;

#define RPC_C_EP_ALL_ELTS
#define RPC_C_EP_MATCH_BY_IF
#define RPC_C_EP_MATCH_BY_OBJ
#define RPC_C_EP_MATCH_BY_BOTH

#define RPC_C_VERS_ALL
#define RPC_C_VERS_COMPATIBLE
#define RPC_C_VERS_EXACT
#define RPC_C_VERS_MAJOR_ONLY
#define RPC_C_VERS_UPTO

#define RpcMgmtEpEltInqNext

  __attribute__((dllimport)) RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,UUID *ObjectUuid,RPC_EP_INQ_HANDLE *InquiryContext);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_CSTR *Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_WSTR *Annotation);
  __attribute__((dllimport)) RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding,RPC_IF_ID *IfId,RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);

  typedef int ( *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding,unsigned long RequestedMgmtOperation,RPC_STATUS *Status);

#define RPC_C_MGMT_INQ_IF_IDS
#define RPC_C_MGMT_INQ_PRINC_NAME
#define RPC_C_MGMT_INQ_STATS
#define RPC_C_MGMT_IS_SERVER_LISTEN
#define RPC_C_MGMT_STOP_SERVER_LISTEN

  __attribute__((dllimport)) RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);

#define RPC_C_PARM_MAX_PACKET_LENGTH
#define RPC_C_PARM_BUFFER_LENGTH

#define RPC_IF_AUTOLISTEN
#define RPC_IF_OLE
#define RPC_IF_ALLOW_UNKNOWN_AUTHORITY
#define RPC_IF_ALLOW_SECURE_ONLY
#define RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH
#define RPC_IF_ALLOW_LOCAL_ONLY
#define RPC_IF_SEC_NO_CACHE
# 623 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdcep.h" 1 3






#define __RPCDCEP_H__







  typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
  } RPC_VERSION;

  typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
  } RPC_SYNTAX_IDENTIFIER,*PRPC_SYNTAX_IDENTIFIER;

  typedef struct _RPC_MESSAGE {
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void *Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void *RpcInterfaceInformation;
    void *ReservedForRuntime;
    void *ManagerEpv;
    void *ImportContext;
    unsigned long RpcFlags;
  } RPC_MESSAGE,*PRPC_MESSAGE;

  typedef RPC_STATUS RPC_FORWARD_FUNCTION(UUID *InterfaceId,RPC_VERSION *InterfaceVersion,UUID *ObjectId,unsigned char *Rpcpro,void **ppDestEndpoint);

  enum RPC_ADDRESS_CHANGE_TYPE {
    PROTOCOL_NOT_LOADED = 1,PROTOCOL_LOADED,PROTOCOL_ADDRESS_CHANGE
  };

  typedef void RPC_ADDRESS_CHANGE_FN(void *arg);

#define RPC_CONTEXT_HANDLE_DEFAULT_GUARD

#define RPC_CONTEXT_HANDLE_DEFAULT_FLAGS
#define RPC_CONTEXT_HANDLE_FLAGS
#define RPC_CONTEXT_HANDLE_SERIALIZE
#define RPC_CONTEXT_HANDLE_DONT_SERIALIZE

#define RPC_NCA_FLAGS_DEFAULT
#define RPC_NCA_FLAGS_IDEMPOTENT
#define RPC_NCA_FLAGS_BROADCAST
#define RPC_NCA_FLAGS_MAYBE

#define RPC_BUFFER_COMPLETE
#define RPC_BUFFER_PARTIAL
#define RPC_BUFFER_EXTRA
#define RPC_BUFFER_ASYNC
#define RPC_BUFFER_NONOTIFY

#define RPCFLG_MESSAGE
#define RPCFLG_AUTO_COMPLETE
#define RPCFLG_LOCAL_CALL
#define RPCFLG_INPUT_SYNCHRONOUS
#define RPCFLG_ASYNCHRONOUS
#define RPCFLG_NON_NDR

#define RPCFLG_HAS_MULTI_SYNTAXES
#define RPCFLG_HAS_CALLBACK

#define RPC_FLAGS_VALID_BIT

  typedef void ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);

  typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION *DispatchTable;
    LONG_PTR Reserved;
  } RPC_DISPATCH_TABLE,*PRPC_DISPATCH_TABLE;

  typedef struct _RPC_PROTSEQ_ENDPOINT {
    unsigned char *RpcProtocolSequence;
    unsigned char *Endpoint;
  } RPC_PROTSEQ_ENDPOINT,*PRPC_PROTSEQ_ENDPOINT;

#define NT351_INTERFACE_SIZE
#define RPC_INTERFACE_HAS_PIPES

  typedef struct _RPC_SERVER_INTERFACE {
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags;
  } RPC_SERVER_INTERFACE,*PRPC_SERVER_INTERFACE;

  typedef struct _RPC_CLIENT_INTERFACE {
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const *InterpreterInfo;
    unsigned int Flags;
  } RPC_CLIENT_INTERFACE,*PRPC_CLIENT_INTERFACE;

  __attribute__((dllimport)) RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message,UUID *ObjectUuid);
  __attribute__((dllimport)) RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcSend(PRPC_MESSAGE Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message,unsigned int Size);
  __attribute__((dllimport)) RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message,unsigned int NewSize);

  typedef void *I_RPC_MUTEX;

#define I_RpcNsBindingSetEntryName
#define I_RpcServerUseProtseqEp2
#define I_RpcServerUseProtseq2
#define I_RpcBindingInqDynamicEndpoint

  __attribute__((dllimport)) void I_RpcRequestMutex(I_RPC_MUTEX *Mutex);
  __attribute__((dllimport)) void I_RpcClearMutex(I_RPC_MUTEX Mutex);
  __attribute__((dllimport)) void I_RpcDeleteMutex(I_RPC_MUTEX Mutex);
  __attribute__((dllimport)) void * I_RpcAllocate(unsigned int Size);
  __attribute__((dllimport)) void I_RpcFree(void *Object);
  __attribute__((dllimport)) void I_RpcPauseExecution(unsigned long Milliseconds);
  __attribute__((dllimport)) RPC_STATUS I_RpcGetExtendedError();

  typedef void ( *PRPC_RUNDOWN)(void *AssociationContext);

  __attribute__((dllimport)) RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle,PRPC_RUNDOWN RundownRoutine,void *Context);
  __attribute__((dllimport)) RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle);
  __attribute__((dllimport)) RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle(void);
  __attribute__((dllimport)) RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle,void **AssociationContext);
  __attribute__((dllimport)) void * I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle);
  __attribute__((dllimport)) void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle,void *ServerContextList);
  __attribute__((dllimport)) RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
  __attribute__((dllimport)) RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding,unsigned short **StringBinding);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding,void **SecurityContextHandle);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding,RPC_CSTR WireId);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqMarshalledTargetInfo (RPC_BINDING_HANDLE Binding,unsigned long *MarshalledTargetInfoLength,RPC_CSTR *MarshalledTargetInfo);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding,unsigned long *Pid);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding,void **AsyncHandle);
  __attribute__((dllimport)) RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR EntryName);
  __attribute__((dllimport)) RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR EntryName);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,void *Policy);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,void *Policy);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding,RPC_WSTR *DynamicEndpoint);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding,RPC_CSTR *DynamicEndpoint);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context);

#define TRANSPORT_TYPE_CN
#define TRANSPORT_TYPE_DG
#define TRANSPORT_TYPE_LPC
#define TRANSPORT_TYPE_WMSG

  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding,unsigned int *Type);

  typedef struct _RPC_TRANSFER_SYNTAX {
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
  } RPC_TRANSFER_SYNTAX;

  __attribute__((dllimport)) RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle,RPC_TRANSFER_SYNTAX *TransferSyntaxes,unsigned int TransferSyntaxSize,unsigned int *TransferSyntaxCount);
  __attribute__((dllimport)) RPC_STATUS I_UuidCreate(UUID *Uuid);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle,unsigned int *ClientLocalFlag);
  __attribute__((dllimport)) RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding,void **ConnId,int *pfFirstCall);
  __attribute__((dllimport)) void I_RpcSsDontSerializeContext(void);
  __attribute__((dllimport)) RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress);
  __attribute__((dllimport)) RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction);
  RPC_ADDRESS_CHANGE_FN * I_RpcServerInqAddressChangeFn();
  RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn);

#define RPC_P_ADDR_FORMAT_TCP_IPV4
#define RPC_P_ADDR_FORMAT_TCP_IPV6

  __attribute__((dllimport)) RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding,void *Buffer,unsigned long *BufferSize,unsigned long *AddressFormat);
  __attribute__((dllimport)) void I_RpcSessionStrictContextHandle();
  __attribute__((dllimport)) RPC_STATUS I_RpcTurnOnEEInfoPropagation(void);
  __attribute__((dllimport)) RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize,unsigned long *SendBuffSize);
  __attribute__((dllimport)) RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize,unsigned long SendBuffSize);

  typedef void (*RPCLT_PDU_FILTER_FUNC)(void *Buffer,unsigned int BufferLength,int fDatagram);
  typedef void (__attribute__((__cdecl__)) *RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter);
# 219 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdcep.h" 3
  __attribute__((dllimport)) RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type);
  __attribute__((dllimport)) long I_RpcMapWin32Status(RPC_STATUS Status);

  typedef struct _RPC_C_OPT_METADATA_DESCRIPTOR {
    unsigned long BufferSize;
    char *Buffer;
  } RPC_C_OPT_METADATA_DESCRIPTOR;

  typedef struct _RDR_CALLOUT_STATE {
    RPC_STATUS LastError;
    void *LastEEInfo;
    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char MetadataPresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;
  } RDR_CALLOUT_STATE;

  typedef RPC_STATUS ( *I_RpcProxyIsValidMachineFn)(char *pszMachine,char *pszDotMachine,unsigned long dwPortNumber);
  typedef RPC_STATUS ( *I_RpcProxyGetClientAddressFn)(void *Context,char *Buffer,unsigned long *BufferLength);
  typedef RPC_STATUS ( *I_RpcProxyGetConnectionTimeoutFn)(unsigned long *ConnectionTimeout);
  typedef RPC_STATUS ( *I_RpcPerformCalloutFn)(void *Context,RDR_CALLOUT_STATE *CallOutState,RPC_HTTP_REDIRECTOR_STAGE Stage);
  typedef void ( *I_RpcFreeCalloutStateFn)(RDR_CALLOUT_STATE *CallOutState);

  typedef struct tagI_RpcProxyCallbackInterface {
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
  } I_RpcProxyCallbackInterface;

#define RPC_PROXY_CONNECTION_TYPE_IN_PROXY
#define RPC_PROXY_CONNECTION_TYPE_OUT_PROXY

  __attribute__((dllimport)) RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType,unsigned short *ServerAddress,unsigned short *ServerPort,unsigned short *MinConnTimeout,void *ConnectionParameter,RDR_CALLOUT_STATE *CallOutState,I_RpcProxyCallbackInterface *ProxyCallbackInterface);
  __attribute__((dllimport)) RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter,RPC_STATUS RpcStatus);
  __attribute__((dllimport)) void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus,RDR_CALLOUT_STATE *CallOutState,unsigned short *DllName);
# 624 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcdce.h" 2 3
# 75 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcnsi.h" 1 3






#define __RPCNSI_H__



typedef void *RPC_NS_HANDLE;

#define RPC_C_NS_SYNTAX_DEFAULT
#define RPC_C_NS_SYNTAX_DCE

#define RPC_C_PROFILE_DEFAULT_ELT
#define RPC_C_PROFILE_ALL_ELT
#define RPC_C_PROFILE_ALL_ELTS
#define RPC_C_PROFILE_MATCH_BY_IF
#define RPC_C_PROFILE_MATCH_BY_MBR
#define RPC_C_PROFILE_MATCH_BY_BOTH

#define RPC_C_NS_DEFAULT_EXP_AGE

__attribute__((dllimport)) RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext,RPC_BINDING_VECTOR **BindingVec);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax,RPC_CSTR GroupName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext,RPC_CSTR *MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax,RPC_WSTR GroupName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext,RPC_WSTR *MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName,unsigned long Priority,RPC_CSTR Annotation);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_CSTR MemberName,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_CSTR *MemberName,unsigned long *Priority,RPC_CSTR *Annotation);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName,unsigned long Priority,RPC_WSTR Annotation);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_WSTR MemberName,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_WSTR *MemberName,unsigned long *Priority,RPC_WSTR *Annotation);
__attribute__((dllimport)) RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext,UUID *ObjUuid);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_CSTR *ExpandedName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle,unsigned long ExpirationAge);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge);
__attribute__((dllimport)) RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_WSTR *ExpandedName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
__attribute__((dllimport)) RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext,RPC_BINDING_HANDLE *Binding);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext);
__attribute__((dllimport)) RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec,RPC_BINDING_HANDLE *Binding);

#define RpcNsBindingLookupBegin
#define RpcNsBindingImportBegin
#define RpcNsBindingExport
#define RpcNsBindingUnexport
#define RpcNsGroupDelete
#define RpcNsGroupMbrAdd
#define RpcNsGroupMbrRemove
#define RpcNsGroupMbrInqBegin
#define RpcNsGroupMbrInqNext
#define RpcNsEntryExpandName
#define RpcNsEntryObjectInqBegin
#define RpcNsMgmtBindingUnexport
#define RpcNsMgmtEntryCreate
#define RpcNsMgmtEntryDelete
#define RpcNsMgmtEntryInqIfIds
#define RpcNsProfileDelete
#define RpcNsProfileEltAdd
#define RpcNsProfileEltRemove
#define RpcNsProfileEltInqBegin
#define RpcNsProfileEltInqNext
#define RpcNsBindingExportPnP
#define RpcNsBindingUnexportPnP
# 77 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcnterr.h" 1 3






#define __RPCNTERR_H__

#define RPC_S_OK
#define RPC_S_INVALID_ARG
#define RPC_S_OUT_OF_MEMORY
#define RPC_S_OUT_OF_THREADS
#define RPC_S_INVALID_LEVEL
#define RPC_S_BUFFER_TOO_SMALL
#define RPC_S_INVALID_SECURITY_DESC
#define RPC_S_ACCESS_DENIED
#define RPC_S_SERVER_OUT_OF_MEMORY
#define RPC_S_ASYNC_CALL_PENDING
#define RPC_S_UNKNOWN_PRINCIPAL
#define RPC_S_TIMEOUT

#define RPC_X_NO_MEMORY
#define RPC_X_INVALID_BOUND
#define RPC_X_INVALID_TAG
#define RPC_X_ENUM_VALUE_TOO_LARGE
#define RPC_X_SS_CONTEXT_MISMATCH
#define RPC_X_INVALID_BUFFER
#define RPC_X_PIPE_APP_MEMORY
#define RPC_X_INVALID_PIPE_OPERATION
# 79 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3






#define RpcTryExcept
#define RpcExcept
#define RpcEndExcept
#define RpcTryFinally
#define RpcFinally
#define RpcEndFinally

#define RpcExceptionCode
#define RpcAbnormalTermination


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcasync.h" 1 3






#define __RPCASYNC_H__



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcasync.h" 2 3






#define RPC_ASYNC_VERSION_1_0

  typedef enum _RPC_NOTIFICATION_TYPES {
    RpcNotificationTypeNone,RpcNotificationTypeEvent,RpcNotificationTypeApc,RpcNotificationTypeIoc,RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback
  } RPC_NOTIFICATION_TYPES;

  typedef enum _RPC_ASYNC_EVENT {
    RpcCallComplete,RpcSendComplete,RpcReceiveComplete
  } RPC_ASYNC_EVENT;

  struct _RPC_ASYNC_STATE;

  typedef void RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync,void *Context,RPC_ASYNC_EVENT Event);
  typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

  typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    union {
      struct {
 PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
 HANDLE hThread;
      } APC;
      struct {
 HANDLE hIOPort;
 DWORD dwNumberOfBytesTransferred;
 DWORD_PTR dwCompletionKey;
 LPOVERLAPPED lpOverlapped;
      } IOC;
      struct {
 HWND hWnd;
 UINT Msg;
      } HWND;
      HANDLE hEvent;
      PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    } u;
    LONG_PTR Reserved[4];
  } RPC_ASYNC_STATE,*PRPC_ASYNC_STATE;

#define RPC_C_NOTIFY_ON_SEND_COMPLETE
#define RPC_C_INFINITE_TIMEOUT

#define RpcAsyncGetCallHandle

  __attribute__((dllimport)) RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync,unsigned int Size);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync,void *Reply);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync,WINBOOL fAbort);
  __attribute__((dllimport)) RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout);

  typedef enum tagExtendedErrorParamTypes {
    eeptAnsiString = 1,eeptUnicodeString,eeptLongVal,eeptShortVal,eeptPointerVal,eeptNone,eeptBinary
  } ExtendedErrorParamTypes;

#define MaxNumberOfEEInfoParams
#define RPC_EEINFO_VERSION

  typedef struct tagBinaryParam {
    void *Buffer;
    short Size;
  } BinaryParam;

  typedef struct tagRPC_EE_INFO_PARAM {
    ExtendedErrorParamTypes ParameterType;
    union {
      LPSTR AnsiString;
      LPWSTR UnicodeString;
      long LVal;
      short SVal;
      ULONGLONG PVal;
      BinaryParam BVal;
    } u;
  } RPC_EE_INFO_PARAM;

#define EEInfoPreviousRecordsMissing
#define EEInfoNextRecordsMissing
#define EEInfoUseFileTime

#define EEInfoGCCOM
#define EEInfoGCFRS

  typedef struct tagRPC_EXTENDED_ERROR_INFO {
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union {
      SYSTEMTIME SystemTime;
      FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
  } RPC_EXTENDED_ERROR_INFO;

  typedef struct tagRPC_ERROR_ENUM_HANDLE {
    ULONG Signature;
    void *CurrentPos;
    void *Head;
  } RPC_ERROR_ENUM_HANDLE;

  __attribute__((dllimport)) RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
  __attribute__((dllimport)) RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle,WINBOOL CopyStrings,RPC_EXTENDED_ERROR_INFO *ErrorInfo);
  __attribute__((dllimport)) RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
  __attribute__((dllimport)) RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
  __attribute__((dllimport)) RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle,int *Records);
  __attribute__((dllimport)) RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle,PVOID *ErrorBlob,size_t *BlobSize);
  __attribute__((dllimport)) RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob,size_t BlobSize,RPC_ERROR_ENUM_HANDLE *EnumHandle);
  __attribute__((dllimport)) RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo);
  __attribute__((dllimport)) void RpcErrorClearInformation(void);
  __attribute__((dllimport)) RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding,WINBOOL ImpersonateOnReturn,PVOID Reserved1,PLARGE_INTEGER pExpirationTime,LUID Reserved2,DWORD Reserved3,PVOID Reserved4,PVOID *pAuthzClientContext);
  __attribute__((dllimport)) RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext);
  __attribute__((dllimport)) RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);
  __attribute__((dllimport)) RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);

#define RPC_CALL_ATTRIBUTES_VERSION
#define RPC_QUERY_SERVER_PRINCIPAL_NAME
#define RPC_QUERY_CLIENT_PRINCIPAL_NAME

  typedef struct tagRPC_CALL_ATTRIBUTES_V1_W {
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    WINBOOL NullSession;
  } RPC_CALL_ATTRIBUTES_V1_W;

  typedef struct tagRPC_CALL_ATTRIBUTES_V1_A {
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    WINBOOL NullSession;
  } RPC_CALL_ATTRIBUTES_V1_A;

#define RPC_CALL_ATTRIBUTES_V1
#define RpcServerInqCallAttributes

  __attribute__((dllimport)) RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);
  __attribute__((dllimport)) RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);

  typedef RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;

  RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message,PRPC_ASYNC_STATE pAsync);
  RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
  int I_RpcExceptionFilter(unsigned long ExceptionCode);

typedef union _RPC_ASYNC_NOTIFICATION_INFO {
  struct {
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    HANDLE hThread;
  } APC;
  struct {
    HANDLE hIOPort;
    DWORD dwNumberOfBytesTransferred;
    DWORD_PTR dwCompletionKey;
    LPOVERLAPPED lpOverlapped;
  } IOC;
  struct {
    HWND hWnd;
    UINT Msg;
  } HWND;
  HANDLE hEvent;
  PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

RPC_STATUS RpcBindingBind(
  PRPC_ASYNC_STATE pAsync,
  RPC_BINDING_HANDLE Binding,
  RPC_IF_HANDLE IfSpec
);

RPC_STATUS RpcBindingUnbind(
  RPC_BINDING_HANDLE Binding
);

typedef enum _RpcCallType {
  rctInvalid,
  rctNormal,
  rctTraining,
  rctGuaranteed
} RpcCallType;

typedef enum _RpcLocalAddressFormat {
  rlafInvalid,
  rlafIPv4,
  rlafIPv6
} RpcLocalAddressFormat;

typedef enum _RPC_NOTIFICATIONS {
  RpcNotificationCallNone = 0,
  RpcNotificationClientDisconnect = 1,
  RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;

typedef enum _RpcCallClientLocality {
  rcclInvalid,
  rcclLocal,
  rcclRemote,
  rcclClientUnknownLocality
} RpcCallClientLocality;

RPC_STATUS RpcServerSubscribeForNotification(
  RPC_BINDING_HANDLE Binding,
  DWORD Notification,
  RPC_NOTIFICATION_TYPES NotificationType,
  RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
);

RPC_STATUS RpcServerUnsubscribeForNotification(
  RPC_BINDING_HANDLE Binding,
  RPC_NOTIFICATIONS Notification,
  unsigned long *NotificationsQueued
);
# 331 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcasync.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 332 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcasync.h" 2 3
# 97 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 101 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3
# 89 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 1 3







#define _INC_SHELLAPI


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 1 3





#define __specstrings
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/specstrings.h" 3
#define SAL__deref_in
#define SAL__deref_in_ecount
#define SAL__deref_in_bcount

#define SAL__deref_in_opt
#define SAL__deref_in_ecount_opt
#define SAL__deref_in_bcount_opt

#define SAL__deref_opt_in
#define SAL__deref_opt_in_ecount
#define SAL__deref_opt_in_bcount

#define SAL__deref_opt_in_opt
#define SAL__deref_opt_in_ecount_opt
#define SAL__deref_opt_in_bcount_opt

#define SAL__out_awcount
#define SAL__in_awcount



#define SAL__null
#define SAL__notnull
#define SAL__maybenull
#define SAL__readonly
#define SAL__notreadonly
#define SAL__maybereadonly
#define SAL__valid
#define SAL__notvalid
#define SAL__maybevalid
#define SAL__readableTo
#define SAL__elem_readableTo
#define SAL__byte_readableTo
#define SAL__writableTo
#define SAL__elem_writableTo
#define SAL__byte_writableTo
#define SAL__deref
#define SAL__pre
#define SAL__post
#define SAL__precond
#define SAL__postcond
#define SAL__exceptthat
#define SAL__execeptthat
#define SAL__inner_success
#define SAL__inner_checkReturn
#define SAL__inner_typefix
#define SAL__inner_override
#define SAL__inner_callback
#define SAL__inner_blocksOn
#define SAL__inner_fallthrough_dec
#define SAL__inner_fallthrough
#define __refparam
#define SAL__inner_control_entrypoint
#define SAL__inner_data_entrypoint

#define SAL__ecount
#define SAL__bcount

#define SAL__in
#define SAL__in_opt
#define SAL__in_nz
#define SAL__in_nz_opt
#define SAL__in_z
#define SAL__in_z_opt
#define SAL__in_ecount
#define SAL__in_ecount_nz
#define SAL__in_ecount_z
#define SAL__in_bcount
#define SAL__in_bcount_z
#define SAL__in_bcount_nz
#define SAL__in_ecount_opt
#define SAL__in_bcount_opt
#define SAL__in_ecount_z_opt
#define SAL__in_bcount_z_opt
#define SAL__in_ecount_nz_opt
#define SAL__in_bcount_nz_opt

#define SAL__out
#define SAL__out_ecount
#define SAL__out_z
#define SAL__out_nz
#define SAL__out_nz_opt
#define SAL__out_z_opt
#define SAL__out_ecount_part
#define SAL__out_ecount_full
#define SAL__out_ecount_nz
#define SAL__out_ecount_z
#define SAL__out_ecount_part_z
#define SAL__out_ecount_full_z
#define SAL__out_bcount
#define SAL__out_bcount_part
#define SAL__out_bcount_full
#define SAL__out_bcount_z
#define SAL__out_bcount_part_z
#define SAL__out_bcount_full_z
#define SAL__out_bcount_nz

#define SAL__inout
#define SAL__inout_ecount
#define SAL__inout_bcount
#define SAL__inout_ecount_part
#define SAL__inout_bcount_part
#define SAL__inout_ecount_full
#define SAL__inout_bcount_full
#define SAL__inout_z
#define SAL__inout_ecount_z
#define SAL__inout_bcount_z
#define SAL__inout_nz
#define SAL__inout_ecount_nz
#define SAL__inout_bcount_nz
#define SAL__ecount_opt
#define SAL__bcount_opt
#define SAL__out_opt
#define SAL__out_ecount_opt
#define SAL__out_bcount_opt
#define SAL__out_ecount_part_opt
#define SAL__out_bcount_part_opt
#define SAL__out_ecount_full_opt
#define SAL__out_bcount_full_opt
#define SAL__out_ecount_z_opt
#define SAL__out_bcount_z_opt
#define SAL__out_ecount_part_z_opt
#define SAL__out_bcount_part_z_opt
#define SAL__out_ecount_full_z_opt
#define SAL__out_bcount_full_z_opt
#define SAL__out_ecount_nz_opt
#define SAL__out_bcount_nz_opt
#define SAL__inout_opt
#define SAL__inout_ecount_opt
#define SAL__inout_bcount_opt
#define SAL__inout_ecount_part_opt
#define SAL__inout_bcount_part_opt
#define SAL__inout_ecount_full_opt
#define SAL__inout_bcount_full_opt
#define SAL__inout_z_opt
#define SAL__inout_ecount_z_opt
#define SAL__inout_bcount_z_opt
#define SAL__inout_nz_opt
#define SAL__inout_ecount_nz_opt
#define SAL__inout_bcount_nz_opt
#define SAL__deref_ecount
#define SAL__deref_bcount
#define SAL__deref_out
#define SAL__deref_out_ecount
#define SAL__deref_out_bcount
#define SAL__deref_out_ecount_part
#define SAL__deref_out_bcount_part
#define SAL__deref_out_ecount_full
#define SAL__deref_out_bcount_full
#define SAL__deref_out_z
#define SAL__deref_out_ecount_z
#define SAL__deref_out_bcount_z
#define SAL__deref_out_nz
#define SAL__deref_out_ecount_nz
#define SAL__deref_out_bcount_nz
#define SAL__deref_inout
#define SAL__deref_inout_ecount
#define SAL__deref_inout_bcount
#define SAL__deref_inout_ecount_part
#define SAL__deref_inout_bcount_part
#define SAL__deref_inout_ecount_full
#define SAL__deref_inout_bcount_full
#define SAL__deref_inout_z
#define SAL__deref_inout_ecount_z
#define SAL__deref_inout_bcount_z
#define SAL__deref_inout_nz
#define SAL__deref_inout_ecount_nz
#define SAL__deref_inout_bcount_nz
#define SAL__deref_ecount_opt
#define SAL__deref_bcount_opt
#define SAL__deref_out_opt
#define SAL__deref_out_ecount_opt
#define SAL__deref_out_bcount_opt
#define SAL__deref_out_ecount_part_opt
#define SAL__deref_out_bcount_part_opt
#define SAL__deref_out_ecount_full_opt
#define SAL__deref_out_bcount_full_opt
#define SAL__deref_out_z_opt
#define SAL__deref_out_ecount_z_opt
#define SAL__deref_out_bcount_z_opt
#define SAL__deref_out_nz_opt
#define SAL__deref_out_ecount_nz_opt
#define SAL__deref_out_bcount_nz_opt
#define SAL__deref_inout_opt
#define SAL__deref_inout_ecount_opt
#define SAL__deref_inout_bcount_opt
#define SAL__deref_inout_ecount_part_opt
#define SAL__deref_inout_bcount_part_opt
#define SAL__deref_inout_ecount_full_opt
#define SAL__deref_inout_bcount_full_opt
#define SAL__deref_inout_z_opt
#define SAL__deref_inout_ecount_z_opt
#define SAL__deref_inout_bcount_z_opt
#define SAL__deref_inout_nz_opt
#define SAL__deref_inout_ecount_nz_opt
#define SAL__deref_inout_bcount_nz_opt
#define SAL__deref_opt_ecount
#define SAL__deref_opt_bcount
#define SAL__deref_opt_out
#define SAL__deref_opt_out_z
#define SAL__deref_opt_out_ecount
#define SAL__deref_opt_out_bcount
#define SAL__deref_opt_out_ecount_part
#define SAL__deref_opt_out_bcount_part
#define SAL__deref_opt_out_ecount_full
#define SAL__deref_opt_out_bcount_full
#define SAL__deref_opt_inout
#define SAL__deref_opt_inout_ecount
#define SAL__deref_opt_inout_bcount
#define SAL__deref_opt_inout_ecount_part
#define SAL__deref_opt_inout_bcount_part
#define SAL__deref_opt_inout_ecount_full
#define SAL__deref_opt_inout_bcount_full
#define SAL__deref_opt_inout_z
#define SAL__deref_opt_inout_ecount_z
#define SAL__deref_opt_inout_bcount_z
#define SAL__deref_opt_inout_nz
#define SAL__deref_opt_inout_ecount_nz
#define SAL__deref_opt_inout_bcount_nz
#define SAL__deref_opt_ecount_opt
#define SAL__deref_opt_bcount_opt
#define SAL__deref_opt_out_opt
#define SAL__deref_opt_out_ecount_opt
#define SAL__deref_opt_out_bcount_opt
#define SAL__deref_opt_out_ecount_part_opt
#define SAL__deref_opt_out_bcount_part_opt
#define SAL__deref_opt_out_ecount_full_opt
#define SAL__deref_opt_out_bcount_full_opt
#define SAL__deref_opt_out_z_opt
#define SAL__deref_opt_out_ecount_z_opt
#define SAL__deref_opt_out_bcount_z_opt
#define SAL__deref_opt_out_nz_opt
#define SAL__deref_opt_out_ecount_nz_opt
#define SAL__deref_opt_out_bcount_nz_opt
#define SAL__deref_opt_inout_opt
#define SAL__deref_opt_inout_ecount_opt
#define SAL__deref_opt_inout_bcount_opt
#define SAL__deref_opt_inout_ecount_part_opt
#define SAL__deref_opt_inout_bcount_part_opt
#define SAL__deref_opt_inout_ecount_full_opt
#define SAL__deref_opt_inout_bcount_full_opt
#define SAL__deref_opt_inout_z_opt
#define SAL__deref_opt_inout_ecount_z_opt
#define SAL__deref_opt_inout_bcount_z_opt
#define SAL__deref_opt_inout_nz_opt
#define SAL__deref_opt_inout_ecount_nz_opt
#define SAL__deref_opt_inout_bcount_nz_opt

#define SAL__success
#define SAL__nullterminated
#define SAL__nullnullterminated
#define SAL__reserved
#define SAL__checkReturn
#define SAL__typefix
#define SAL__override
#define SAL__callback
#define SAL__format_string
#define SAL__blocksOn
#define SAL__control_entrypoint
#define SAL__data_entrypoint
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 2 3



#define WINSHELLAPI
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
#define SHSTDAPI
#define SHSTDAPI_
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
#define SHDOCAPI
#define SHDOCAPI_
# 60 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
  struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;

#define DragQueryFile
#define ShellExecute
#define FindExecutable
#define ShellAbout
#define ExtractAssociatedIcon
#define ExtractAssociatedIconEx
#define ExtractIcon

  __attribute__((dllimport)) UINT DragQueryFileA (HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);
  __attribute__((dllimport)) UINT DragQueryFileW (HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);
  __attribute__((dllimport)) WINBOOL DragQueryPoint (HDROP hDrop, POINT *ppt);
  __attribute__((dllimport)) void DragFinish (HDROP hDrop);
  __attribute__((dllimport)) void DragAcceptFiles (HWND hWnd, WINBOOL fAccept);
  __attribute__((dllimport)) HINSTANCE ShellExecuteA (HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
  __attribute__((dllimport)) HINSTANCE ShellExecuteW (HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
  __attribute__((dllimport)) HINSTANCE FindExecutableA (LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
  __attribute__((dllimport)) HINSTANCE FindExecutableW (LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
  __attribute__((dllimport)) LPWSTR * CommandLineToArgvW (LPCWSTR lpCmdLine, int *pNumArgs);
  __attribute__((dllimport)) INT ShellAboutA (HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
  __attribute__((dllimport)) INT ShellAboutW (HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
  __attribute__((dllimport)) HICON DuplicateIcon (HINSTANCE hInst, HICON hIcon);
  __attribute__((dllimport)) HICON ExtractAssociatedIconA (HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
  __attribute__((dllimport)) HICON ExtractAssociatedIconW (HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);
  __attribute__((dllimport)) HICON ExtractAssociatedIconExA (HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
  __attribute__((dllimport)) HICON ExtractAssociatedIconExW (HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
  __attribute__((dllimport)) HICON ExtractIconA (HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
  __attribute__((dllimport)) HICON ExtractIconW (HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);

  typedef struct _DRAGINFOA {
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPSTR lpFileList;
    DWORD grfKeyState;
  } DRAGINFOA,*LPDRAGINFOA;

  typedef struct _DRAGINFOW {
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPWSTR lpFileList;
    DWORD grfKeyState;
  } DRAGINFOW,*LPDRAGINFOW;

  typedef DRAGINFOA DRAGINFO;
  typedef LPDRAGINFOA LPDRAGINFO;

#define ABM_NEW
#define ABM_REMOVE
#define ABM_QUERYPOS
#define ABM_SETPOS
#define ABM_GETSTATE
#define ABM_GETTASKBARPOS
#define ABM_ACTIVATE
#define ABM_GETAUTOHIDEBAR
#define ABM_SETAUTOHIDEBAR

#define ABM_WINDOWPOSCHANGED
#define ABM_SETSTATE





#define ABN_STATECHANGE
#define ABN_POSCHANGED
#define ABN_FULLSCREENAPP
#define ABN_WINDOWARRANGE

#define ABS_AUTOHIDE
#define ABS_ALWAYSONTOP

#define ABE_LEFT
#define ABE_TOP
#define ABE_RIGHT
#define ABE_BOTTOM

  typedef struct _AppBarData {
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
  } APPBARDATA,*PAPPBARDATA;

  __attribute__((dllimport)) UINT_PTR SHAppBarMessage (DWORD dwMessage, PAPPBARDATA pData);
  __attribute__((dllimport)) DWORD DoEnvironmentSubstA (LPSTR pszSrc, UINT cchSrc);
  __attribute__((dllimport)) DWORD DoEnvironmentSubstW (LPWSTR pszSrc, UINT cchSrc);
  __attribute__((dllimport)) UINT ExtractIconExA (LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
  __attribute__((dllimport)) UINT ExtractIconExW (LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);

#define DoEnvironmentSubst
#define ExtractIconEx

#define EIRESID

#define FO_MOVE
#define FO_COPY
#define FO_DELETE
#define FO_RENAME

#define FOF_MULTIDESTFILES
#define FOF_CONFIRMMOUSE
#define FOF_SILENT
#define FOF_RENAMEONCOLLISION
#define FOF_NOCONFIRMATION
#define FOF_WANTMAPPINGHANDLE
#define FOF_ALLOWUNDO
#define FOF_FILESONLY
#define FOF_SIMPLEPROGRESS
#define FOF_NOCONFIRMMKDIR
#define FOF_NOERRORUI
#define FOF_NOCOPYSECURITYATTRIBS
#define FOF_NORECURSION
#define FOF_NO_CONNECTED_ELEMENTS
#define FOF_WANTNUKEWARNING
#define FOF_NORECURSEREPARSE

#define FOF_NO_UI

  typedef WORD FILEOP_FLAGS;

#define PO_DELETE
#define PO_RENAME
#define PO_PORTCHANGE

#define PO_REN_PORT

  typedef WORD PRINTEROP_FLAGS;

  typedef struct _SHFILEOPSTRUCTA {
    HWND hwnd;
    UINT wFunc;
    LPCSTR pFrom;
    LPCSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
  } SHFILEOPSTRUCTA,*LPSHFILEOPSTRUCTA;

  typedef struct _SHFILEOPSTRUCTW {
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
  } SHFILEOPSTRUCTW,*LPSHFILEOPSTRUCTW;

  typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
  typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;

  __attribute__((dllimport)) int SHFileOperationA (LPSHFILEOPSTRUCTA lpFileOp);
  __attribute__((dllimport)) int SHFileOperationW (LPSHFILEOPSTRUCTW lpFileOp);

#define SHFileOperation

  __attribute__((dllimport)) void SHFreeNameMappings (HANDLE hNameMappings);

  typedef struct _SHNAMEMAPPINGA {
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
  } SHNAMEMAPPINGA,*LPSHNAMEMAPPINGA;

  typedef struct _SHNAMEMAPPINGW {
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
  } SHNAMEMAPPINGW,*LPSHNAMEMAPPINGW;


  typedef SHNAMEMAPPINGA SHNAMEMAPPING;
  typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;

#define SE_ERR_FNF
#define SE_ERR_PNF
#define SE_ERR_ACCESSDENIED
#define SE_ERR_OOM
#define SE_ERR_DLLNOTFOUND

#define SE_ERR_SHARE
#define SE_ERR_ASSOCINCOMPLETE
#define SE_ERR_DDETIMEOUT
#define SE_ERR_DDEFAIL
#define SE_ERR_DDEBUSY
#define SE_ERR_NOASSOC

#define SEE_MASK_DEFAULT
#define SEE_MASK_CLASSNAME
#define SEE_MASK_CLASSKEY

#define SEE_MASK_IDLIST
#define SEE_MASK_INVOKEIDLIST

#define SEE_MASK_ICON

#define SEE_MASK_HOTKEY
#define SEE_MASK_NOCLOSEPROCESS
#define SEE_MASK_CONNECTNETDRV
#define SEE_MASK_NOASYNC
#define SEE_MASK_FLAG_DDEWAIT
#define SEE_MASK_DOENVSUBST
#define SEE_MASK_FLAG_NO_UI
#define SEE_MASK_UNICODE
#define SEE_MASK_NO_CONSOLE
#define SEE_MASK_ASYNCOK
#define SEE_MASK_HMONITOR
#define SEE_MASK_NOZONECHECKS
#define SEE_MASK_NOQUERYCLASSSTORE
#define SEE_MASK_WAITFORINPUTIDLE
#define SEE_MASK_FLAG_LOG_USAGE
# 300 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
  typedef struct _SHELLEXECUTEINFOA {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    __extension__ union {
      HANDLE hIcon;
      HANDLE hMonitor;
    } ;
    HANDLE hProcess;
  } SHELLEXECUTEINFOA,*LPSHELLEXECUTEINFOA;

  typedef struct _SHELLEXECUTEINFOW {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    __extension__ union {
      HANDLE hIcon;
      HANDLE hMonitor;
    } ;
    HANDLE hProcess;
  } SHELLEXECUTEINFOW,*LPSHELLEXECUTEINFOW;

  typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
  typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;

  __attribute__((dllimport)) WINBOOL ShellExecuteExA (SHELLEXECUTEINFOA *pExecInfo);
  __attribute__((dllimport)) WINBOOL ShellExecuteExW (SHELLEXECUTEINFOW *pExecInfo);

#define ShellExecuteEx

  typedef struct _SHCREATEPROCESSINFOW {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    WINBOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
  } SHCREATEPROCESSINFOW,*PSHCREATEPROCESSINFOW;

  __attribute__((dllimport)) WINBOOL SHCreateProcessAsUserW (PSHCREATEPROCESSINFOW pscpi);
# 397 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
  typedef struct _SHQUERYRBINFO {
    DWORD cbSize;
    __extension__ long long i64Size;
    __extension__ long long i64NumItems;
  } SHQUERYRBINFO,*LPSHQUERYRBINFO;

#define SHERB_NOCONFIRMATION
#define SHERB_NOPROGRESSUI
#define SHERB_NOSOUND

  __attribute__((dllimport)) HRESULT SHQueryRecycleBinA (LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
  __attribute__((dllimport)) HRESULT SHQueryRecycleBinW (LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);

#define SHQueryRecycleBin

  __attribute__((dllimport)) HRESULT SHEmptyRecycleBinA (HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
  __attribute__((dllimport)) HRESULT SHEmptyRecycleBinW (HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);

#define SHEmptyRecycleBin
# 439 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
  typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];
    __extension__ union {
      UINT uTimeout;
      UINT uVersion;
    } ;
    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;
    GUID guidItem;



  } NOTIFYICONDATAA,*PNOTIFYICONDATAA;

  typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];
    __extension__ union {
      UINT uTimeout;
      UINT uVersion;
    } ;
    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;
    GUID guidItem;



  } NOTIFYICONDATAW,*PNOTIFYICONDATAW;

  typedef NOTIFYICONDATAA NOTIFYICONDATA;
  typedef PNOTIFYICONDATAA PNOTIFYICONDATA;

#define NOTIFYICONDATAA_V1_SIZE
#define NOTIFYICONDATAW_V1_SIZE
#define NOTIFYICONDATAA_V2_SIZE
#define NOTIFYICONDATAW_V2_SIZE
#define NOTIFYICONDATAA_V3_SIZE
#define NOTIFYICONDATAW_V3_SIZE

#define NOTIFYICONDATA_V1_SIZE
#define NOTIFYICONDATA_V2_SIZE
#define NOTIFYICONDATA_V3_SIZE

#define NIN_SELECT
#define NINF_KEY
#define NIN_KEYSELECT

#define NIN_BALLOONSHOW
#define NIN_BALLOONHIDE
#define NIN_BALLOONTIMEOUT
#define NIN_BALLOONUSERCLICK





#define NIM_ADD
#define NIM_MODIFY
#define NIM_DELETE
#define NIM_SETFOCUS
#define NIM_SETVERSION

#define NOTIFYICON_VERSION




#define NIF_MESSAGE
#define NIF_ICON
#define NIF_TIP
#define NIF_STATE
#define NIF_INFO

#define NIF_GUID






#define NIS_HIDDEN
#define NIS_SHAREDICON

#define NIIF_NONE
#define NIIF_INFO
#define NIIF_WARNING
#define NIIF_ERROR
#define NIIF_USER
#define NIIF_ICON_MASK
#define NIIF_NOSOUND







  typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
  } NOTIFYICONIDENTIFIER,*PNOTIFYICONIDENTIFIER;

  __attribute__((dllimport)) WINBOOL Shell_NotifyIconA (DWORD dwMessage, PNOTIFYICONDATAA lpData);
  __attribute__((dllimport)) WINBOOL Shell_NotifyIconW (DWORD dwMessage, PNOTIFYICONDATAW lpData);

#define Shell_NotifyIcon






#define SHFILEINFO_DEFINED

  typedef struct _SHFILEINFOA {
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    CHAR szDisplayName[260];
    CHAR szTypeName[80];
  } SHFILEINFOA;

  typedef struct _SHFILEINFOW {
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR szDisplayName[260];
    WCHAR szTypeName[80];
  } SHFILEINFOW;

  typedef SHFILEINFOA SHFILEINFO;


#define SHGFI_ICON
#define SHGFI_DISPLAYNAME
#define SHGFI_TYPENAME
#define SHGFI_ATTRIBUTES
#define SHGFI_ICONLOCATION
#define SHGFI_EXETYPE
#define SHGFI_SYSICONINDEX
#define SHGFI_LINKOVERLAY
#define SHGFI_SELECTED
#define SHGFI_ATTR_SPECIFIED

#define SHGFI_LARGEICON
#define SHGFI_SMALLICON
#define SHGFI_OPENICON
#define SHGFI_SHELLICONSIZE
#define SHGFI_PIDL
#define SHGFI_USEFILEATTRIBUTES

#define SHGFI_ADDOVERLAYS
#define SHGFI_OVERLAYINDEX

  __attribute__((dllimport)) DWORD_PTR SHGetFileInfoA (LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
  __attribute__((dllimport)) DWORD_PTR SHGetFileInfoW (LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);

#define SHGetFileInfo
# 739 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
#define SHGetDiskFreeSpace

  __attribute__((dllimport)) WINBOOL SHGetDiskFreeSpaceExA (LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL SHGetDiskFreeSpaceExW (LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL SHGetNewLinkInfoA (LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);
  __attribute__((dllimport)) WINBOOL SHGetNewLinkInfoW (LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);

#define SHGetDiskFreeSpaceEx
#define SHGetNewLinkInfo

#define SHGNLI_PIDL
#define SHGNLI_PREFIXNAME
#define SHGNLI_NOUNIQUE
#define SHGNLI_NOLNK

#define SHGNLI_NOLOCNAME





#define PRINTACTION_OPEN
#define PRINTACTION_PROPERTIES
#define PRINTACTION_NETINSTALL
#define PRINTACTION_NETINSTALLLINK
#define PRINTACTION_TESTPAGE
#define PRINTACTION_OPENNETPRN
#define PRINTACTION_DOCUMENTDEFAULTS
#define PRINTACTION_SERVERPROPERTIES

  __attribute__((dllimport)) WINBOOL SHInvokePrinterCommandA (HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, WINBOOL fModal);
  __attribute__((dllimport)) WINBOOL SHInvokePrinterCommandW (HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, WINBOOL fModal);

#define SHInvokePrinterCommand
# 796 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/shellapi.h" 3
  __attribute__((dllimport)) HRESULT SHLoadNonloadedIconOverlayIdentifiers (void);
  __attribute__((dllimport)) HRESULT SHIsFileAvailableOffline (PCWSTR pwszPath, DWORD *pdwStatus);

#define OFFLINE_STATUS_LOCAL
#define OFFLINE_STATUS_REMOTE
#define OFFLINE_STATUS_INCOMPLETE

  __attribute__((dllimport)) HRESULT SHSetLocalizedName (PCWSTR pszPath, PCWSTR pszResModule, int idsRes);







#define LWSTDAPIV_




  extern __attribute__((dllimport)) int __attribute__((__cdecl__)) ShellMessageBoxA (HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle,...);
  extern __attribute__((dllimport)) int __attribute__((__cdecl__)) ShellMessageBoxW (HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle,...);

#define ShellMessageBox

  __attribute__((dllimport)) WINBOOL IsLFNDriveA (LPCSTR pszPath);
  __attribute__((dllimport)) WINBOOL IsLFNDriveW (LPCWSTR pszPath);

#define IsLFNDrive


  extern HRESULT SHEnumerateUnreadMailAccountsA (HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
  extern HRESULT SHEnumerateUnreadMailAccountsW (HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);
  extern HRESULT SHGetUnreadMailCountA (HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
  extern HRESULT SHGetUnreadMailCountW (HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
  extern HRESULT SHSetUnreadMailCountA (LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
  extern HRESULT SHSetUnreadMailCountW (LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);

#define SHEnumerateUnreadMailAccounts
#define SHGetUnreadMailCount
#define SHSetUnreadMailCount



  extern WINBOOL SHTestTokenMembership (HANDLE hToken, ULONG ulRID);



  __attribute__((dllimport)) HRESULT SHGetImageList (int iImageList, const IID *const riid, void **ppvObj);

#define SHIL_LARGE
#define SHIL_SMALL
#define SHIL_EXTRALARGE
#define SHIL_SYSSMALL




#define SHIL_LAST


  typedef HRESULT ( *PFNCANSHAREFOLDERW) (PCWSTR pszPath);
  typedef HRESULT ( *PFNSHOWSHAREFOLDERUIW) (HWND hwndParent, PCWSTR pszPath);
# 90 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winperf.h" 1 3






#define _WINPERF_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winperf.h" 2 3

#define PERF_DATA_VERSION
#define PERF_DATA_REVISION

typedef struct _PERF_DATA_BLOCK {
  WCHAR Signature[4];
  DWORD LittleEndian;
  DWORD Version;
  DWORD Revision;
  DWORD TotalByteLength;
  DWORD HeaderLength;
  DWORD NumObjectTypes;
  LONG DefaultObject;
  SYSTEMTIME SystemTime;
  LARGE_INTEGER PerfTime;
  LARGE_INTEGER PerfFreq;
  LARGE_INTEGER PerfTime100nSec;
  DWORD SystemNameLength;
  DWORD SystemNameOffset;
} PERF_DATA_BLOCK,*PPERF_DATA_BLOCK;

typedef struct _PERF_OBJECT_TYPE {
  DWORD TotalByteLength;
  DWORD DefinitionLength;
  DWORD HeaderLength;
  DWORD ObjectNameTitleIndex;

  DWORD ObjectNameTitle;



  DWORD ObjectHelpTitleIndex;

  DWORD ObjectHelpTitle;



  DWORD DetailLevel;
  DWORD NumCounters;
  LONG DefaultCounter;
  LONG NumInstances;
  DWORD CodePage;
  LARGE_INTEGER PerfTime;
  LARGE_INTEGER PerfFreq;
} PERF_OBJECT_TYPE,*PPERF_OBJECT_TYPE;

#define PERF_NO_INSTANCES
#define PERF_SIZE_DWORD
#define PERF_SIZE_LARGE
#define PERF_SIZE_ZERO
#define PERF_SIZE_VARIABLE_LEN
#define PERF_TYPE_NUMBER
#define PERF_TYPE_COUNTER
#define PERF_TYPE_TEXT
#define PERF_TYPE_ZERO
#define PERF_NUMBER_HEX
#define PERF_NUMBER_DECIMAL
#define PERF_NUMBER_DEC_1000
#define PERF_COUNTER_VALUE
#define PERF_COUNTER_RATE
#define PERF_COUNTER_FRACTION
#define PERF_COUNTER_BASE
#define PERF_COUNTER_ELAPSED
#define PERF_COUNTER_QUEUELEN
#define PERF_COUNTER_HISTOGRAM
#define PERF_COUNTER_PRECISION
#define PERF_TEXT_UNICODE
#define PERF_TEXT_ASCII
#define PERF_TIMER_TICK
#define PERF_TIMER_100NS
#define PERF_OBJECT_TIMER
#define PERF_DELTA_COUNTER
#define PERF_DELTA_BASE
#define PERF_INVERSE_COUNTER
#define PERF_MULTI_COUNTER

#define PERF_DISPLAY_NO_SUFFIX
#define PERF_DISPLAY_PER_SEC
#define PERF_DISPLAY_PERCENT
#define PERF_DISPLAY_SECONDS
#define PERF_DISPLAY_NOSHOW

#define PERF_COUNTER_COUNTER
#define PERF_COUNTER_TIMER
#define PERF_COUNTER_QUEUELEN_TYPE
#define PERF_COUNTER_LARGE_QUEUELEN_TYPE
#define PERF_COUNTER_100NS_QUEUELEN_TYPE
#define PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE
#define PERF_COUNTER_BULK_COUNT
#define PERF_COUNTER_TEXT
#define PERF_COUNTER_RAWCOUNT
#define PERF_COUNTER_LARGE_RAWCOUNT
#define PERF_COUNTER_RAWCOUNT_HEX
#define PERF_COUNTER_LARGE_RAWCOUNT_HEX
#define PERF_SAMPLE_FRACTION
#define PERF_SAMPLE_COUNTER
#define PERF_COUNTER_NODATA
#define PERF_COUNTER_TIMER_INV
#define PERF_SAMPLE_BASE
#define PERF_AVERAGE_TIMER
#define PERF_AVERAGE_BASE
#define PERF_AVERAGE_BULK
#define PERF_OBJ_TIME_TIMER
#define PERF_100NSEC_TIMER
#define PERF_100NSEC_TIMER_INV
#define PERF_COUNTER_MULTI_TIMER
#define PERF_COUNTER_MULTI_TIMER_INV
#define PERF_COUNTER_MULTI_BASE
#define PERF_100NSEC_MULTI_TIMER
#define PERF_100NSEC_MULTI_TIMER_INV
#define PERF_RAW_FRACTION
#define PERF_LARGE_RAW_FRACTION
#define PERF_RAW_BASE
#define PERF_LARGE_RAW_BASE
#define PERF_ELAPSED_TIME
#define PERF_COUNTER_HISTOGRAM_TYPE
#define PERF_COUNTER_DELTA
#define PERF_COUNTER_LARGE_DELTA
#define PERF_PRECISION_SYSTEM_TIMER
#define PERF_PRECISION_100NS_TIMER
#define PERF_PRECISION_OBJECT_TIMER

#define PERF_PRECISION_TIMESTAMP

#define PERF_DETAIL_NOVICE
#define PERF_DETAIL_ADVANCED
#define PERF_DETAIL_EXPERT
#define PERF_DETAIL_WIZARD

typedef struct _PERF_COUNTER_DEFINITION {
  DWORD ByteLength;
  DWORD CounterNameTitleIndex;

  DWORD CounterNameTitle;



  DWORD CounterHelpTitleIndex;

  DWORD CounterHelpTitle;



  LONG DefaultScale;
  DWORD DetailLevel;
  DWORD CounterType;
  DWORD CounterSize;
  DWORD CounterOffset;
} PERF_COUNTER_DEFINITION,*PPERF_COUNTER_DEFINITION;

#define PERF_NO_UNIQUE_ID

typedef struct _PERF_INSTANCE_DEFINITION {
  DWORD ByteLength;
  DWORD ParentObjectTitleIndex;
  DWORD ParentObjectInstance;
  LONG UniqueID;
  DWORD NameOffset;
  DWORD NameLength;
} PERF_INSTANCE_DEFINITION,*PPERF_INSTANCE_DEFINITION;

typedef struct _PERF_COUNTER_BLOCK {
  DWORD ByteLength;

} PERF_COUNTER_BLOCK,*PPERF_COUNTER_BLOCK;

#define PERF_QUERY_OBJECTS
#define PERF_QUERY_GLOBAL
#define PERF_QUERY_COSTLY

typedef DWORD ( PM_OPEN_PROC)(LPWSTR);
typedef DWORD ( PM_COLLECT_PROC)(LPWSTR,LPVOID *,LPDWORD,LPDWORD);
typedef DWORD ( PM_CLOSE_PROC)(void);
typedef DWORD ( PM_QUERY_PROC)(LPDWORD,LPVOID *,LPDWORD,LPDWORD);

#define MAX_PERF_OBJECTS_IN_QUERY_FUNCTION

#define WINPERF_LOG_NONE
#define WINPERF_LOG_USER
#define WINPERF_LOG_DEBUG
#define WINPERF_LOG_VERBOSE

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 193 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winperf.h" 2 3
# 91 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 1 3






#define _WINSOCKAPI_
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 3
#define UNDEF_WINSOCK_API_LINKAGE

#define WINSOCK_API_LINKAGE




#define WSAAPI







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_timeval.h" 1 3







#define _TIMEVAL_DEFINED

struct timeval
{
 long tv_sec;
 long tv_usec;
};

#define timerisset
#define timercmp


#define timerclear
# 33 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_bsd_types.h" 1 3







#define _BSDTYPES_DEFINED


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_bsd_types.h" 2 3

typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
       
#undef u_long
typedef unsigned long u_long;
       



__extension__

typedef unsigned long long u_int64;
# 34 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/inaddr.h" 1 3
# 15 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/inaddr.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_bsd_types.h" 1 3
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/inaddr.h" 2 3

typedef struct in_addr {
  union {
    struct { u_char s_b1, s_b2, s_b3, s_b4; } S_un_b;
    struct { u_short s_w1, s_w2; } S_un_w;
    u_long S_addr;
  } S_un;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;

#define s_addr
#define s_host
#define s_net
#define s_imp
#define s_impno
#define s_lh
# 35 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_socket_types.h" 1 3







#define ___WSA_SOCKET_TYPES_H


typedef UINT_PTR SOCKET;




#define INVALID_SOCKET
#define SOCKET_ERROR
# 36 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_fd_types.h" 1 3







#define ___WSA_FD_TYPES_H




#define FD_SETSIZE







typedef struct fd_set
{
 u_int fd_count;
 SOCKET fd_array[64];
} fd_set;





int __WSAFDIsSet(SOCKET,fd_set *);






#define FD_CLR
# 56 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_fd_types.h" 3
#define FD_ZERO



#define FD_ISSET
# 89 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_fd_types.h" 3
#define _FD_SET_WINSOCK_DEFINED
#define FD_SET
# 104 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_fd_types.h" 3
typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;
# 37 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_ip_types.h" 1 3







#define _MINGW_IP_TYPES_H







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_bsd_types.h" 1 3
# 17 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_ip_types.h" 2 3






#define h_addr

struct hostent {
 char *h_name;
 char **h_aliases;
 short h_addrtype;
 short h_length;
 char **h_addr_list;
};

struct netent {
 char *n_name;
 char **n_aliases;
 short n_addrtype;
 u_long n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;

 char *s_proto;
 short s_port;




};

struct protoent {
 char *p_name;
 char **p_aliases;
 short p_proto;
};

struct sockproto {
 u_short sp_family;
 u_short sp_protocol;
};

struct linger {
 u_short l_onoff;
 u_short l_linger;
};



struct sockaddr {
 u_short sa_family;
 char sa_data[14];
};

struct sockaddr_in {
 short sin_family;
 u_short sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;

typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;
# 115 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_ip_types.h" 3
typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_ip_mreq1.h" 1 3







#define _MINGW_IP_MREQ1_H



struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};
# 39 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_wsadata.h" 1 3







#define __MINGW_WSADATA_H

#define WSADESCRIPTION_LEN
#define WSASYS_STATUS_LEN

typedef struct WSAData {
 WORD wVersion;
 WORD wHighVersion;

 unsigned short iMaxSockets;
 unsigned short iMaxUdpDg;
 char *lpVendorInfo;
 char szDescription[256 +1];
 char szSystemStatus[128 +1];







} WSADATA, *LPWSADATA;
# 40 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_xmitfile.h" 1 3







#define __MINGW_TRANSMIT_FILE_H

typedef struct _TRANSMIT_FILE_BUFFERS {
 LPVOID Head;
 DWORD HeadLength;
 LPVOID Tail;
 DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3





#define IOCPARM_MASK
#define IOC_VOID
#define IOC_OUT
#define IOC_IN
#define IOC_INOUT

#define _IO
#define _IOR
#define _IOW

#define FIONREAD
#define FIONBIO
#define FIOASYNC

#define SIOCSHIWAT
#define SIOCGHIWAT
#define SIOCSLOWAT
#define SIOCGLOWAT
#define SIOCATMARK

#define IPPROTO_IP
#define IPPROTO_ICMP
#define IPPROTO_IGMP
#define IPPROTO_GGP
#define IPPROTO_TCP
#define IPPROTO_PUP
#define IPPROTO_UDP
#define IPPROTO_IDP
#define IPPROTO_ND

#define IPPROTO_RAW
#define IPPROTO_MAX

#define IPPORT_ECHO
#define IPPORT_DISCARD
#define IPPORT_SYSTAT
#define IPPORT_DAYTIME
#define IPPORT_NETSTAT
#define IPPORT_FTP
#define IPPORT_TELNET
#define IPPORT_SMTP
#define IPPORT_TIMESERVER
#define IPPORT_NAMESERVER
#define IPPORT_WHOIS
#define IPPORT_MTP

#define IPPORT_TFTP
#define IPPORT_RJE
#define IPPORT_FINGER
#define IPPORT_TTYLINK
#define IPPORT_SUPDUP

#define IPPORT_EXECSERVER
#define IPPORT_LOGINSERVER
#define IPPORT_CMDSERVER
#define IPPORT_EFSSERVER

#define IPPORT_BIFFUDP
#define IPPORT_WHOSERVER
#define IPPORT_ROUTESERVER

#define IPPORT_RESERVED

#define IMPLINK_IP
#define IMPLINK_LOWEXPER
#define IMPLINK_HIGHEXPER


#define IN_CLASSA
#define IN_CLASSA_NET
#define IN_CLASSA_NSHIFT
#define IN_CLASSA_HOST
#define IN_CLASSA_MAX

#define IN_CLASSB
#define IN_CLASSB_NET
#define IN_CLASSB_NSHIFT
#define IN_CLASSB_HOST
#define IN_CLASSB_MAX

#define IN_CLASSC
#define IN_CLASSC_NET
#define IN_CLASSC_NSHIFT
#define IN_CLASSC_HOST

#define INADDR_ANY
#define INADDR_LOOPBACK
#define INADDR_BROADCAST
#define INADDR_NONE


#define IP_OPTIONS
#define IP_MULTICAST_IF
#define IP_MULTICAST_TTL
#define IP_MULTICAST_LOOP
#define IP_ADD_MEMBERSHIP
#define IP_DROP_MEMBERSHIP
#define IP_TTL
#define IP_TOS
#define IP_DONTFRAGMENT

#define IP_DEFAULT_MULTICAST_TTL
#define IP_DEFAULT_MULTICAST_LOOP
#define IP_MAX_MEMBERSHIPS

#define SOCK_STREAM
#define SOCK_DGRAM
#define SOCK_RAW
#define SOCK_RDM
#define SOCK_SEQPACKET

#define SO_DEBUG
#define SO_ACCEPTCONN
#define SO_REUSEADDR
#define SO_KEEPALIVE
#define SO_DONTROUTE
#define SO_BROADCAST
#define SO_USELOOPBACK
#define SO_LINGER
#define SO_OOBINLINE

#define SO_DONTLINGER

#define SO_SNDBUF
#define SO_RCVBUF
#define SO_SNDLOWAT
#define SO_RCVLOWAT
#define SO_SNDTIMEO
#define SO_RCVTIMEO
#define SO_ERROR
#define SO_TYPE

#define SO_CONNDATA
#define SO_CONNOPT
#define SO_DISCDATA
#define SO_DISCOPT
#define SO_CONNDATALEN
#define SO_CONNOPTLEN
#define SO_DISCDATALEN
#define SO_DISCOPTLEN

#define SO_OPENTYPE

#define SO_SYNCHRONOUS_ALERT
#define SO_SYNCHRONOUS_NONALERT

#define SO_MAXDG
#define SO_MAXPATHDG
#define SO_UPDATE_ACCEPT_CONTEXT
#define SO_CONNECT_TIME

#define TCP_NODELAY
#define TCP_BSDURGENT

#define AF_UNSPEC
#define AF_UNIX
#define AF_INET
#define AF_IMPLINK
#define AF_PUP
#define AF_CHAOS
#define AF_IPX
#define AF_NS
#define AF_ISO
#define AF_OSI
#define AF_ECMA
#define AF_DATAKIT
#define AF_CCITT
#define AF_SNA
#define AF_DECnet
#define AF_DLI
#define AF_LAT
#define AF_HYLINK
#define AF_APPLETALK
#define AF_NETBIOS
#define AF_VOICEVIEW
#define AF_FIREFOX
#define AF_UNKNOWN1
#define AF_BAN

#define AF_MAX

#define PF_UNSPEC
#define PF_UNIX
#define PF_INET
#define PF_IMPLINK
#define PF_PUP
#define PF_CHAOS
#define PF_NS
#define PF_IPX
#define PF_ISO
#define PF_OSI
#define PF_ECMA
#define PF_DATAKIT
#define PF_CCITT
#define PF_SNA
#define PF_DECnet
#define PF_DLI
#define PF_LAT
#define PF_HYLINK
#define PF_APPLETALK
#define PF_VOICEVIEW
#define PF_FIREFOX
#define PF_UNKNOWN1
#define PF_BAN

#define PF_MAX

#define SOL_SOCKET

#define SOMAXCONN

#define MSG_OOB
#define MSG_PEEK
#define MSG_DONTROUTE

#define MSG_MAXIOVLEN

#define MSG_PARTIAL

#define MAXGETHOSTSTRUCT

#define FD_READ
#define FD_WRITE
#define FD_OOB
#define FD_ACCEPT
#define FD_CONNECT
#define FD_CLOSE

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_wsa_errnos.h" 1 3
# 175 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/psdk_inc/_wsa_errnos.h" 3
#define __WSA_ERR_MACROS_DEFINED
#define h_errno
#define HOST_NOT_FOUND
#define TRY_AGAIN
#define NO_RECOVERY
#define NO_DATA

#define WSANO_ADDRESS
#define NO_ADDRESS
# 275 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsock.h" 2 3


  __attribute__((dllimport)) SOCKET accept(SOCKET s,struct sockaddr *addr,int *addrlen);
  __attribute__((dllimport)) int bind(SOCKET s,const struct sockaddr *name,int namelen);
  __attribute__((dllimport)) int closesocket(SOCKET s);
  __attribute__((dllimport)) int connect(SOCKET s,const struct sockaddr *name,int namelen);
  __attribute__((dllimport)) int ioctlsocket(SOCKET s,long cmd,u_long *argp);
  __attribute__((dllimport)) int getpeername(SOCKET s,struct sockaddr *name,int *namelen);
  __attribute__((dllimport)) int getsockname(SOCKET s,struct sockaddr *name,int *namelen);
  __attribute__((dllimport)) int getsockopt(SOCKET s,int level,int optname,char *optval,int *optlen);

  __attribute__((dllimport)) u_long htonl(u_long hostlong);
  __attribute__((dllimport)) u_short htons(u_short hostshort);

  __attribute__((dllimport)) unsigned long inet_addr(const char *cp);
  __attribute__((dllimport)) char * inet_ntoa(struct in_addr in);
  __attribute__((dllimport)) int listen(SOCKET s,int backlog);

  __attribute__((dllimport)) u_long ntohl(u_long netlong);
  __attribute__((dllimport)) u_short ntohs(u_short netshort);

  __attribute__((dllimport)) int recv(SOCKET s,char *buf,int len,int flags);
  __attribute__((dllimport)) int recvfrom(SOCKET s,char *buf,int len,int flags,struct sockaddr *from,int *fromlen);

  __attribute__((dllimport)) int select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,const PTIMEVAL timeout);

  __attribute__((dllimport)) int send(SOCKET s,const char *buf,int len,int flags);
  __attribute__((dllimport)) int sendto(SOCKET s,const char *buf,int len,int flags,const struct sockaddr *to,int tolen);
  __attribute__((dllimport)) int setsockopt(SOCKET s,int level,int optname,const char *optval,int optlen);
  __attribute__((dllimport)) int shutdown(SOCKET s,int how);
  __attribute__((dllimport)) SOCKET socket(int af,int type,int protocol);
  __attribute__((dllimport)) struct hostent * gethostbyaddr(const char *addr,int len,int type);
  __attribute__((dllimport)) struct hostent * gethostbyname(const char *name);

  __attribute__((dllimport)) int gethostname(char *name,int namelen);

  __attribute__((dllimport)) struct servent * getservbyport(int port,const char *proto);
  __attribute__((dllimport)) struct servent * getservbyname(const char *name,const char *proto);
  __attribute__((dllimport)) struct protoent * getprotobynumber(int number);
  __attribute__((dllimport)) struct protoent * getprotobyname(const char *name);
  __attribute__((dllimport)) int WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData);
  __attribute__((dllimport)) int WSACleanup(void);
  __attribute__((dllimport)) void WSASetLastError(int iError);
  __attribute__((dllimport)) int WSAGetLastError(void);
  __attribute__((dllimport)) WINBOOL WSAIsBlocking(void);
  __attribute__((dllimport)) int WSAUnhookBlockingHook(void);
  __attribute__((dllimport)) FARPROC WSASetBlockingHook(FARPROC lpBlockFunc);
  __attribute__((dllimport)) int WSACancelBlockingCall(void);
  __attribute__((dllimport)) HANDLE WSAAsyncGetServByName(HWND hWnd,u_int wMsg,const char *name,const char *proto,char *buf,int buflen);
  __attribute__((dllimport)) HANDLE WSAAsyncGetServByPort(HWND hWnd,u_int wMsg,int port,const char *proto,char *buf,int buflen);
  __attribute__((dllimport)) HANDLE WSAAsyncGetProtoByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
  __attribute__((dllimport)) HANDLE WSAAsyncGetProtoByNumber(HWND hWnd,u_int wMsg,int number,char *buf,int buflen);
  __attribute__((dllimport)) HANDLE WSAAsyncGetHostByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
  __attribute__((dllimport)) HANDLE WSAAsyncGetHostByAddr(HWND hWnd,u_int wMsg,const char *addr,int len,int type,char *buf,int buflen);
  __attribute__((dllimport)) int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);
  __attribute__((dllimport)) int WSAAsyncSelect(SOCKET s,HWND hWnd,u_int wMsg,long lEvent);
#define __WINSOCK_WS1_SHARED


  int WSARecvEx(SOCKET s,char *buf,int len,int *flags);

#define TF_DISCONNECT
#define TF_REUSE_SOCKET
#define TF_WRITE_BEHIND

  WINBOOL TransmitFile(SOCKET hSocket,HANDLE hFile,DWORD nNumberOfBytesToWrite,DWORD nNumberOfBytesPerSend,LPOVERLAPPED lpOverlapped,LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,DWORD dwReserved);
  WINBOOL AcceptEx(SOCKET sListenSocket,SOCKET sAcceptSocket,PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,LPDWORD lpdwBytesReceived,LPOVERLAPPED lpOverlapped);
  void GetAcceptExSockaddrs(PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,struct sockaddr **LocalSockaddr,LPINT LocalSockaddrLength,struct sockaddr **RemoteSockaddr,LPINT RemoteSockaddrLength);
#define __MSWSOCK_WS1_SHARED

#define WSAMAKEASYNCREPLY
#define WSAMAKESELECTREPLY
#define WSAGETASYNCBUFLEN
#define WSAGETASYNCERROR
#define WSAGETSELECTEVENT
#define WSAGETSELECTERROR






#undef WINSOCK_API_LINKAGE
#undef UNDEF_WINSOCK_API_LINKAGE


#undef WSAAPI
# 93 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 1 3






#define __WINCRYPT_H__

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bcrypt.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bcrypt.h" 3
#define __BCRYPT_H__
# 22 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bcrypt.h" 3
#define _NTSTATUS_PSDK
  typedef LONG NTSTATUS,*PNTSTATUS;



#define BCRYPT_SUCCESS
# 46 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/bcrypt.h" 3
#define BCRYPT_OBJECT_ALIGNMENT

#define BCRYPT_STRUCT_ALIGNMENT

#define BCRYPT_KDF_HASH
#define BCRYPT_KDF_HMAC
#define BCRYPT_KDF_TLS_PRF
#define BCRYPT_KDF_SP80056A_CONCAT

#define KDF_HASH_ALGORITHM
#define KDF_SECRET_PREPEND
#define KDF_SECRET_APPEND
#define KDF_HMAC_KEY
#define KDF_TLS_PRF_LABEL
#define KDF_TLS_PRF_SEED
#define KDF_SECRET_HANDLE
#define KDF_TLS_PRF_PROTOCOL
#define KDF_ALGORITHMID
#define KDF_PARTYUINFO
#define KDF_PARTYVINFO
#define KDF_SUPPPUBINFO
#define KDF_SUPPPRIVINFO
#define KDF_LABEL
#define KDF_CONTEXT
#define KDF_SALT
#define KDF_ITERATION_COUNT
#define KDF_GENERIC_PARAMETER
#define KDF_KEYBITLENGTH

#define KDF_USE_SECRET_AS_HMAC_KEY_FLAG

#define BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION

#define BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG
#define BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG

#define BCRYPT_INIT_AUTH_MODE_INFO




#define BCRYPT_OPAQUE_KEY_BLOB
#define BCRYPT_KEY_DATA_BLOB
#define BCRYPT_AES_WRAP_KEY_BLOB

#define BCRYPT_ALGORITHM_NAME
#define BCRYPT_AUTH_TAG_LENGTH
#define BCRYPT_BLOCK_LENGTH
#define BCRYPT_BLOCK_SIZE_LIST
#define BCRYPT_CHAINING_MODE
#define BCRYPT_CHAIN_MODE_CBC
#define BCRYPT_CHAIN_MODE_CCM
#define BCRYPT_CHAIN_MODE_CFB
#define BCRYPT_CHAIN_MODE_ECB
#define BCRYPT_CHAIN_MODE_GCM
#define BCRYPT_CHAIN_MODE_NA
#define BCRYPT_EFFECTIVE_KEY_LENGTH
#define BCRYPT_HASH_BLOCK_LENGTH
#define BCRYPT_HASH_LENGTH
#define BCRYPT_HASH_OID_LIST
#define BCRYPT_INITIALIZATION_VECTOR
#define BCRYPT_IS_KEYED_HASH
#define BCRYPT_IS_REUSABLE_HASH
#define BCRYPT_KEY_LENGTH
#define BCRYPT_KEY_LENGTHS
#define BCRYPT_KEY_OBJECT_LENGTH
#define BCRYPT_KEY_STRENGTH
#define BCRYPT_MESSAGE_BLOCK_LENGTH
#define BCRYPT_OBJECT_LENGTH
#define BCRYPT_PADDING_SCHEMES
#define BCRYPT_PCP_PLATFORM_TYPE_PROPERTY
#define BCRYPT_PCP_PROVIDER_VERSION_PROPERTY
#define BCRYPT_PRIMITIVE_TYPE
#define BCRYPT_PROVIDER_HANDLE
#define BCRYPT_SIGNATURE_LENGTH

#define BCRYPT_SUPPORTED_PAD_ROUTER
#define BCRYPT_SUPPORTED_PAD_PKCS1_ENC
#define BCRYPT_SUPPORTED_PAD_PKCS1_SIG
#define BCRYPT_SUPPORTED_PAD_OAEP
#define BCRYPT_SUPPORTED_PAD_PSS

#define BCRYPT_PROV_DISPATCH

#define BCRYPT_BLOCK_PADDING

#define BCRYPT_PAD_NONE
#define BCRYPT_PAD_PKCS1
#define BCRYPT_PAD_OAEP
#define BCRYPT_PAD_PSS

#define BCRYPTBUFFER_VERSION

  typedef struct __BCRYPT_KEY_LENGTHS_STRUCT {
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
  } BCRYPT_KEY_LENGTHS_STRUCT;

  typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

  typedef struct _BCRYPT_OID {
    ULONG cbOID;
    PUCHAR pbOID;
  } BCRYPT_OID;

  typedef struct _BCRYPT_OID_LIST {
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
  } BCRYPT_OID_LIST;

  typedef struct _BCRYPT_PKCS1_PADDING_INFO {
    LPCWSTR pszAlgId;
  } BCRYPT_PKCS1_PADDING_INFO;

  typedef struct _BCRYPT_PSS_PADDING_INFO {
    LPCWSTR pszAlgId;
    ULONG cbSalt;
  } BCRYPT_PSS_PADDING_INFO;

  typedef struct _BCRYPT_OAEP_PADDING_INFO {
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
  } BCRYPT_OAEP_PADDING_INFO;

  typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
  } BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO,*PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;



  typedef struct _BCryptBuffer {
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
  } BCryptBuffer,*PBCryptBuffer;

  typedef struct _BCryptBufferDesc {
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
  } BCryptBufferDesc,*PBCryptBufferDesc;




#define BCRYPT_PUBLIC_KEY_BLOB
#define BCRYPT_PRIVATE_KEY_BLOB

#define BCRYPT_RSAPUBLIC_BLOB
#define BCRYPT_RSAPRIVATE_BLOB
#define LEGACY_RSAPUBLIC_BLOB
#define LEGACY_RSAPRIVATE_BLOB

#define BCRYPT_RSAPUBLIC_MAGIC
#define BCRYPT_RSAPRIVATE_MAGIC

#define BCRYPT_RSAFULLPRIVATE_BLOB

#define BCRYPT_RSAFULLPRIVATE_MAGIC

#define BCRYPT_GLOBAL_PARAMETERS
#define BCRYPT_PRIVATE_KEY

#define BCRYPT_ECCPUBLIC_BLOB
#define BCRYPT_ECCPRIVATE_BLOB

#define BCRYPT_ECDH_PUBLIC_P256_MAGIC
#define BCRYPT_ECDH_PRIVATE_P256_MAGIC
#define BCRYPT_ECDH_PUBLIC_P384_MAGIC
#define BCRYPT_ECDH_PRIVATE_P384_MAGIC
#define BCRYPT_ECDH_PUBLIC_P521_MAGIC
#define BCRYPT_ECDH_PRIVATE_P521_MAGIC

#define BCRYPT_ECDSA_PUBLIC_P256_MAGIC
#define BCRYPT_ECDSA_PRIVATE_P256_MAGIC
#define BCRYPT_ECDSA_PUBLIC_P384_MAGIC
#define BCRYPT_ECDSA_PRIVATE_P384_MAGIC
#define BCRYPT_ECDSA_PUBLIC_P521_MAGIC
#define BCRYPT_ECDSA_PRIVATE_P521_MAGIC

#define BCRYPT_DH_PUBLIC_BLOB
#define BCRYPT_DH_PRIVATE_BLOB
#define LEGACY_DH_PUBLIC_BLOB
#define LEGACY_DH_PRIVATE_BLOB

#define BCRYPT_DH_PUBLIC_MAGIC
#define BCRYPT_DH_PRIVATE_MAGIC

#define BCRYPT_DH_PARAMETERS
#define BCRYPT_DH_PARAMETERS_MAGIC

#define BCRYPT_DSA_PUBLIC_BLOB
#define BCRYPT_DSA_PRIVATE_BLOB
#define LEGACY_DSA_PUBLIC_BLOB
#define LEGACY_DSA_PRIVATE_BLOB
#define LEGACY_DSA_V2_PUBLIC_BLOB
#define LEGACY_DSA_V2_PRIVATE_BLOB

#define BCRYPT_DSA_PUBLIC_MAGIC
#define BCRYPT_DSA_PRIVATE_MAGIC
#define BCRYPT_DSA_PUBLIC_MAGIC_V2
#define BCRYPT_DSA_PRIVATE_MAGIC_V2

#define BCRYPT_KEY_DATA_BLOB_MAGIC
#define BCRYPT_KEY_DATA_BLOB_VERSION1

#define BCRYPT_DSA_PARAMETERS
#define BCRYPT_DSA_PARAMETERS_MAGIC
#define BCRYPT_DSA_PARAMETERS_MAGIC_V2

#define MS_PRIMITIVE_PROVIDER
#define MS_PLATFORM_CRYPTO_PROVIDER

#define BCRYPT_RSA_ALGORITHM
#define BCRYPT_RSA_SIGN_ALGORITHM
#define BCRYPT_DH_ALGORITHM
#define BCRYPT_DSA_ALGORITHM
#define BCRYPT_RC2_ALGORITHM
#define BCRYPT_RC4_ALGORITHM
#define BCRYPT_AES_ALGORITHM
#define BCRYPT_DES_ALGORITHM
#define BCRYPT_DESX_ALGORITHM
#define BCRYPT_3DES_ALGORITHM
#define BCRYPT_3DES_112_ALGORITHM
#define BCRYPT_MD2_ALGORITHM
#define BCRYPT_MD4_ALGORITHM
#define BCRYPT_MD5_ALGORITHM
#define BCRYPT_SHA1_ALGORITHM
#define BCRYPT_SHA256_ALGORITHM
#define BCRYPT_SHA384_ALGORITHM
#define BCRYPT_SHA512_ALGORITHM
#define BCRYPT_AES_GMAC_ALGORITHM
#define BCRYPT_AES_CMAC_ALGORITHM
#define BCRYPT_ECDSA_P256_ALGORITHM
#define BCRYPT_ECDSA_P384_ALGORITHM
#define BCRYPT_ECDSA_P521_ALGORITHM
#define BCRYPT_ECDH_P256_ALGORITHM
#define BCRYPT_ECDH_P384_ALGORITHM
#define BCRYPT_ECDH_P521_ALGORITHM
#define BCRYPT_RNG_ALGORITHM
#define BCRYPT_RNG_FIPS186_DSA_ALGORITHM
#define BCRYPT_RNG_DUAL_EC_ALGORITHM
#define BCRYPT_SP800108_CTR_HMAC_ALGORITHM
#define BCRYPT_SP80056A_CONCAT_ALGORITHM
#define BCRYPT_PBKDF2_ALGORITHM
#define BCRYPT_CAPI_KDF_ALGORITHM

#define BCRYPT_CIPHER_INTERFACE
#define BCRYPT_HASH_INTERFACE
#define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE
#define BCRYPT_SECRET_AGREEMENT_INTERFACE
#define BCRYPT_SIGNATURE_INTERFACE
#define BCRYPT_RNG_INTERFACE
#define BCRYPT_KEY_DERIVATION_INTERFACE

#define BCRYPT_ALG_HANDLE_HMAC_FLAG
#define BCRYPT_CAPI_AES_FLAG
#define BCRYPT_HASH_REUSABLE_FLAG

#define BCRYPT_BUFFERS_LOCKED_FLAG

#define BCRYPT_CIPHER_OPERATION
#define BCRYPT_HASH_OPERATION
#define BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION
#define BCRYPT_SECRET_AGREEMENT_OPERATION
#define BCRYPT_SIGNATURE_OPERATION
#define BCRYPT_RNG_OPERATION
#define BCRYPT_KEY_DERIVATION_OPERATION

#define BCRYPT_PUBLIC_KEY_FLAG
#define BCRYPT_PRIVATE_KEY_FLAG

#define BCRYPT_NO_KEY_VALIDATION

#define BCRYPT_RNG_USE_ENTROPY_IN_BUFFER
#define BCRYPT_USE_SYSTEM_PREFERRED_RNG

#define BCRYPT_MAKE_INTERFACE_VERSION
#define BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE

#define BCRYPT_CIPHER_INTERFACE_VERSION_1
#define BCRYPT_HASH_INTERFACE_VERSION_1
#define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE_VERSION_1
#define BCRYPT_SECRET_AGREEMENT_INTERFACE_VERSION_1
#define BCRYPT_SIGNATURE_INTERFACE_VERSION_1
#define BCRYPT_RNG_INTERFACE_VERSION_1

#define CRYPT_MIN_DEPENDENCIES
#define CRYPT_PROCESS_ISOLATE

#define CRYPT_UM
#define CRYPT_KM
#define CRYPT_MM
#define CRYPT_ANY

#define CRYPT_OVERWRITE

#define CRYPT_LOCAL
#define CRYPT_DOMAIN

#define CRYPT_EXCLUSIVE
#define CRYPT_OVERRIDE

#define CRYPT_ALL_FUNCTIONS
#define CRYPT_ALL_PROVIDERS

#define CRYPT_PRIORITY_TOP
#define CRYPT_PRIORITY_BOTTOM

#define CRYPT_DEFAULT_CONTEXT

typedef PVOID BCRYPT_HANDLE;
  typedef PVOID BCRYPT_ALG_HANDLE;
  typedef PVOID BCRYPT_KEY_HANDLE;
  typedef PVOID BCRYPT_HASH_HANDLE;
  typedef PVOID BCRYPT_SECRET_HANDLE;

  typedef struct _BCRYPT_KEY_BLOB {
    ULONG Magic;
  } BCRYPT_KEY_BLOB;

  typedef struct _BCRYPT_RSAKEY_BLOB {
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
  } BCRYPT_RSAKEY_BLOB;

  typedef struct _BCRYPT_ECCKEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
  } BCRYPT_ECCKEY_BLOB,*PBCRYPT_ECCKEY_BLOB;

  typedef struct _BCRYPT_DH_KEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
  } BCRYPT_DH_KEY_BLOB,*PBCRYPT_DH_KEY_BLOB;

  typedef struct _BCRYPT_DH_PARAMETER_HEADER {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
  } BCRYPT_DH_PARAMETER_HEADER;

  typedef struct _BCRYPT_DSA_KEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
  } BCRYPT_DSA_KEY_BLOB,*PBCRYPT_DSA_KEY_BLOB;

  typedef enum {
    DSA_HASH_ALGORITHM_SHA1,
    DSA_HASH_ALGORITHM_SHA256,
    DSA_HASH_ALGORITHM_SHA512
  } HASHALGORITHM_ENUM;

  typedef enum {
    DSA_FIPS186_2,
    DSA_FIPS186_3
  } DSAFIPSVERSION_ENUM;
  typedef struct _BCRYPT_DSA_KEY_BLOB_V2 {
    ULONG dwMagic;
    ULONG cbKey;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
  } BCRYPT_DSA_KEY_BLOB_V2,*PBCRYPT_DSA_KEY_BLOB_V2;

  typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER {
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
  } BCRYPT_KEY_DATA_BLOB_HEADER,*PBCRYPT_KEY_DATA_BLOB_HEADER;

  typedef struct _BCRYPT_DSA_PARAMETER_HEADER {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
  } BCRYPT_DSA_PARAMETER_HEADER;

  typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2 {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
  } BCRYPT_DSA_PARAMETER_HEADER_V2;

  typedef struct _BCRYPT_ALGORITHM_IDENTIFIER {
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;
  } BCRYPT_ALGORITHM_IDENTIFIER;

  typedef struct _BCRYPT_PROVIDER_NAME {
    LPWSTR pszProviderName;
  } BCRYPT_PROVIDER_NAME;

  typedef struct _BCRYPT_INTERFACE_VERSION {
    USHORT MajorVersion;
    USHORT MinorVersion;
  } BCRYPT_INTERFACE_VERSION,*PBCRYPT_INTERFACE_VERSION;

  typedef struct _CRYPT_INTERFACE_REG {
    ULONG dwInterface;
    ULONG dwFlags;
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
  } CRYPT_INTERFACE_REG,*PCRYPT_INTERFACE_REG;

  typedef struct _CRYPT_IMAGE_REG {
    PWSTR pszImage;
    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
  } CRYPT_IMAGE_REG,*PCRYPT_IMAGE_REG;

  typedef struct _CRYPT_PROVIDER_REG {
    ULONG cAliases;
    PWSTR *rgpszAliases;
    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
  } CRYPT_PROVIDER_REG,*PCRYPT_PROVIDER_REG;

  typedef struct _CRYPT_PROVIDERS {
    ULONG cProviders;
    PWSTR *rgpszProviders;
  } CRYPT_PROVIDERS,*PCRYPT_PROVIDERS;

  typedef struct _CRYPT_CONTEXT_CONFIG {
    ULONG dwFlags;
    ULONG dwReserved;
  } CRYPT_CONTEXT_CONFIG,*PCRYPT_CONTEXT_CONFIG;

  typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
    ULONG dwFlags;
    ULONG dwReserved;
  } CRYPT_CONTEXT_FUNCTION_CONFIG,*PCRYPT_CONTEXT_FUNCTION_CONFIG;

  typedef struct _CRYPT_CONTEXTS {
    ULONG cContexts;
    PWSTR *rgpszContexts;
  } CRYPT_CONTEXTS,*PCRYPT_CONTEXTS;

  typedef struct _CRYPT_CONTEXT_FUNCTIONS {
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
  } CRYPT_CONTEXT_FUNCTIONS,*PCRYPT_CONTEXT_FUNCTIONS;

  typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
    ULONG cProviders;
    PWSTR *rgpszProviders;
  } CRYPT_CONTEXT_FUNCTION_PROVIDERS,*PCRYPT_CONTEXT_FUNCTION_PROVIDERS;

  typedef struct _CRYPT_PROPERTY_REF {
    PWSTR pszProperty;
    ULONG cbValue;
    PUCHAR pbValue;
  } CRYPT_PROPERTY_REF,*PCRYPT_PROPERTY_REF;

  typedef struct _CRYPT_IMAGE_REF {
    PWSTR pszImage;
    ULONG dwFlags;
  } CRYPT_IMAGE_REF,*PCRYPT_IMAGE_REF;

  typedef struct _CRYPT_PROVIDER_REF {
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;
    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;
    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
  } CRYPT_PROVIDER_REF,*PCRYPT_PROVIDER_REF;

  typedef struct _CRYPT_PROVIDER_REFS {
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
  } CRYPT_PROVIDER_REFS,*PCRYPT_PROVIDER_REFS;

  NTSTATUS BCryptOpenAlgorithmProvider (BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
  NTSTATUS BCryptEnumAlgorithms (ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags);
  NTSTATUS BCryptEnumProviders (LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags);
  NTSTATUS BCryptGetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptSetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS BCryptCloseAlgorithmProvider (BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
  void BCryptFreeBuffer (PVOID pvBuffer);
  NTSTATUS BCryptGenerateSymmetricKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
  NTSTATUS BCryptGenerateKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags);
  NTSTATUS BCryptEncrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptDecrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptExportKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptImportKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS BCryptImportKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS BCryptDuplicateKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
  NTSTATUS BCryptFinalizeKeyPair (BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
  NTSTATUS BCryptDestroyKey (BCRYPT_KEY_HANDLE hKey);
  NTSTATUS BCryptDestroySecret (BCRYPT_SECRET_HANDLE hSecret);
  NTSTATUS BCryptSignHash (BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptVerifySignature (BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
  NTSTATUS BCryptSecretAgreement (BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags);
  NTSTATUS BCryptDeriveKey (BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptKeyDerivation (BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS BCryptCreateHash (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
  NTSTATUS BCryptHashData (BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS BCryptFinishHash (BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
  NTSTATUS BCryptDuplicateHash (BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
  NTSTATUS BCryptDestroyHash (BCRYPT_HASH_HANDLE hHash);
  NTSTATUS BCryptGenRandom (BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
  NTSTATUS BCryptDeriveKeyCapi (BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
  NTSTATUS BCryptDeriveKeyPBKDF2 (BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
  NTSTATUS BCryptResolveProviders (LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer);
  NTSTATUS BCryptGetFipsAlgorithmMode (BOOLEAN *pfEnabled);

  NTSTATUS BCryptQueryProviderRegistration (LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer);
  NTSTATUS BCryptEnumRegisteredProviders (ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer);
  NTSTATUS BCryptCreateContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
  NTSTATUS BCryptDeleteContext (ULONG dwTable, LPCWSTR pszContext);
  NTSTATUS BCryptEnumContexts (ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer);
  NTSTATUS BCryptConfigureContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
  NTSTATUS BCryptQueryContextConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer);
  NTSTATUS BCryptAddContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
  NTSTATUS BCryptRemoveContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
  NTSTATUS BCryptEnumContextFunctions (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);
  NTSTATUS BCryptConfigureContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
  NTSTATUS BCryptQueryContextFunctionConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
  NTSTATUS BCryptEnumContextFunctionProviders (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);
  NTSTATUS BCryptSetContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
  NTSTATUS BCryptQueryContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue);
  NTSTATUS BCryptRegisterConfigChangeNotify (HANDLE *phEvent);
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ncrypt.h" 1 3






#define _INC_NCRYPT
# 14 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 2 3
# 30 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 3
#define WINIMPM
# 59 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 3
#define WINCRYPT32API
#define WINCRYPT32STRINGAPI

#define GET_ALG_CLASS
#define GET_ALG_TYPE
#define GET_ALG_SID

#define ALG_CLASS_ANY
#define ALG_CLASS_SIGNATURE
#define ALG_CLASS_MSG_ENCRYPT
#define ALG_CLASS_DATA_ENCRYPT
#define ALG_CLASS_HASH
#define ALG_CLASS_KEY_EXCHANGE
#define ALG_CLASS_ALL

#define ALG_TYPE_ANY
#define ALG_TYPE_DSS
#define ALG_TYPE_RSA
#define ALG_TYPE_BLOCK
#define ALG_TYPE_STREAM
#define ALG_TYPE_DH
#define ALG_TYPE_SECURECHANNEL

#define ALG_SID_ANY

#define ALG_SID_RSA_ANY
#define ALG_SID_RSA_PKCS
#define ALG_SID_RSA_MSATWORK
#define ALG_SID_RSA_ENTRUST
#define ALG_SID_RSA_PGP

#define ALG_SID_DSS_ANY
#define ALG_SID_DSS_PKCS
#define ALG_SID_DSS_DMS

#define ALG_SID_DES
#define ALG_SID_3DES
#define ALG_SID_DESX
#define ALG_SID_IDEA
#define ALG_SID_CAST
#define ALG_SID_SAFERSK64
#define ALG_SID_SAFERSK128
#define ALG_SID_3DES_112
#define ALG_SID_CYLINK_MEK
#define ALG_SID_RC5
#define ALG_SID_AES_128
#define ALG_SID_AES_192
#define ALG_SID_AES_256
#define ALG_SID_AES

#define ALG_SID_SKIPJACK
#define ALG_SID_TEK

#define CRYPT_MODE_CBCI
#define CRYPT_MODE_CFBP
#define CRYPT_MODE_OFBP
#define CRYPT_MODE_CBCOFM
#define CRYPT_MODE_CBCOFMI

#define ALG_SID_RC2

#define ALG_SID_RC4
#define ALG_SID_SEAL

#define ALG_SID_DH_SANDF
#define ALG_SID_DH_EPHEM
#define ALG_SID_AGREED_KEY_ANY
#define ALG_SID_KEA

#define ALG_SID_MD2
#define ALG_SID_MD4
#define ALG_SID_MD5
#define ALG_SID_SHA
#define ALG_SID_SHA1
#define ALG_SID_MAC
#define ALG_SID_RIPEMD
#define ALG_SID_RIPEMD160
#define ALG_SID_SSL3SHAMD5
#define ALG_SID_HMAC
#define ALG_SID_TLS1PRF
#define ALG_SID_HASH_REPLACE_OWF
#define ALG_SID_SHA_256
#define ALG_SID_SHA_384
#define ALG_SID_SHA_512

#define ALG_SID_SSL3_MASTER
#define ALG_SID_SCHANNEL_MASTER_HASH
#define ALG_SID_SCHANNEL_MAC_KEY
#define ALG_SID_PCT1_MASTER
#define ALG_SID_SSL2_MASTER
#define ALG_SID_TLS1_MASTER
#define ALG_SID_SCHANNEL_ENC_KEY

#define ALG_SID_EXAMPLE


#define ALGIDDEF
  typedef unsigned int ALG_ID;


#define CALG_MD2
#define CALG_MD4
#define CALG_MD5
#define CALG_SHA
#define CALG_SHA1
#define CALG_MAC
#define CALG_RSA_SIGN
#define CALG_DSS_SIGN
#define CALG_NO_SIGN
#define CALG_RSA_KEYX
#define CALG_DES
#define CALG_3DES_112
#define CALG_3DES
#define CALG_DESX
#define CALG_RC2
#define CALG_RC4
#define CALG_SEAL
#define CALG_DH_SF
#define CALG_DH_EPHEM
#define CALG_AGREEDKEY_ANY
#define CALG_KEA_KEYX
#define CALG_HUGHES_MD5
#define CALG_SKIPJACK
#define CALG_TEK
#define CALG_CYLINK_MEK
#define CALG_SSL3_SHAMD5
#define CALG_SSL3_MASTER
#define CALG_SCHANNEL_MASTER_HASH
#define CALG_SCHANNEL_MAC_KEY
#define CALG_SCHANNEL_ENC_KEY
#define CALG_PCT1_MASTER
#define CALG_SSL2_MASTER
#define CALG_TLS1_MASTER
#define CALG_RC5
#define CALG_HMAC
#define CALG_TLS1PRF
#define CALG_HASH_REPLACE_OWF
#define CALG_AES_128
#define CALG_AES_192
#define CALG_AES_256
#define CALG_AES
#define CALG_SHA_256
#define CALG_SHA_384
#define CALG_SHA_512







#define __HCRYPTKEY__

  typedef ULONG_PTR HCRYPTKEY;
  typedef ULONG_PTR HCRYPTPROV;

  typedef ULONG_PTR HCRYPTHASH;

#define CRYPT_VERIFYCONTEXT
#define CRYPT_NEWKEYSET
#define CRYPT_DELETEKEYSET
#define CRYPT_MACHINE_KEYSET
#define CRYPT_SILENT

#define CRYPT_EXPORTABLE
#define CRYPT_USER_PROTECTED
#define CRYPT_CREATE_SALT
#define CRYPT_UPDATE_KEY
#define CRYPT_NO_SALT
#define CRYPT_PREGEN
#define CRYPT_RECIPIENT
#define CRYPT_INITIATOR
#define CRYPT_ONLINE
#define CRYPT_SF
#define CRYPT_CREATE_IV
#define CRYPT_KEK
#define CRYPT_DATA_KEY
#define CRYPT_VOLATILE
#define CRYPT_SGCKEY
#define CRYPT_ARCHIVABLE

#define RSA1024BIT_KEY

#define CRYPT_SERVER

#define KEY_LENGTH_MASK

#define CRYPT_Y_ONLY
#define CRYPT_SSL2_FALLBACK
#define CRYPT_DESTROYKEY
#define CRYPT_OAEP

#define CRYPT_BLOB_VER3
#define CRYPT_IPSEC_HMAC_KEY

#define CRYPT_DECRYPT_RSA_NO_PADDING_CHECK

#define CRYPT_SECRETDIGEST

#define CRYPT_OWF_REPL_LM_HASH

#define CRYPT_LITTLE_ENDIAN

#define CRYPT_NOHASHOID
#define CRYPT_TYPE2_FORMAT
#define CRYPT_X931_FORMAT

#define CRYPT_MACHINE_DEFAULT
#define CRYPT_USER_DEFAULT
#define CRYPT_DELETE_DEFAULT

#define SIMPLEBLOB
#define PUBLICKEYBLOB
#define PRIVATEKEYBLOB
#define PLAINTEXTKEYBLOB
#define OPAQUEKEYBLOB
#define PUBLICKEYBLOBEX
#define SYMMETRICWRAPKEYBLOB
#define KEYSTATEBLOB

#define AT_KEYEXCHANGE
#define AT_SIGNATURE

#define CRYPT_USERDATA

#define KP_IV
#define KP_SALT
#define KP_PADDING
#define KP_MODE
#define KP_MODE_BITS
#define KP_PERMISSIONS
#define KP_ALGID
#define KP_BLOCKLEN
#define KP_KEYLEN
#define KP_SALT_EX
#define KP_P
#define KP_G
#define KP_Q
#define KP_X
#define KP_Y
#define KP_RA
#define KP_RB
#define KP_INFO
#define KP_EFFECTIVE_KEYLEN
#define KP_SCHANNEL_ALG
#define KP_CLIENT_RANDOM
#define KP_SERVER_RANDOM
#define KP_RP
#define KP_PRECOMP_MD5
#define KP_PRECOMP_SHA
#define KP_CERTIFICATE
#define KP_CLEAR_KEY
#define KP_PUB_EX_LEN
#define KP_PUB_EX_VAL
#define KP_KEYVAL
#define KP_ADMIN_PIN
#define KP_KEYEXCHANGE_PIN
#define KP_SIGNATURE_PIN
#define KP_PREHASH
#define KP_ROUNDS
#define KP_OAEP_PARAMS
#define KP_CMS_KEY_INFO
#define KP_CMS_DH_KEY_INFO
#define KP_PUB_PARAMS
#define KP_VERIFY_PARAMS
#define KP_HIGHEST_VERSION
#define KP_GET_USE_COUNT

#define PKCS5_PADDING
#define RANDOM_PADDING
#define ZERO_PADDING

#define CRYPT_MODE_CBC
#define CRYPT_MODE_ECB
#define CRYPT_MODE_OFB
#define CRYPT_MODE_CFB
#define CRYPT_MODE_CTS

#define CRYPT_ENCRYPT
#define CRYPT_DECRYPT
#define CRYPT_EXPORT
#define CRYPT_READ
#define CRYPT_WRITE
#define CRYPT_MAC
#define CRYPT_EXPORT_KEY
#define CRYPT_IMPORT_KEY
#define CRYPT_ARCHIVE

#define HP_ALGID
#define HP_HASHVAL
#define HP_HASHSIZE
#define HP_HMAC_INFO
#define HP_TLS1PRF_LABEL
#define HP_TLS1PRF_SEED

#define CRYPT_FAILED
#define CRYPT_SUCCEED

#define RCRYPT_SUCCEEDED
#define RCRYPT_FAILED

#define PP_ENUMALGS
#define PP_ENUMCONTAINERS
#define PP_IMPTYPE
#define PP_NAME
#define PP_VERSION
#define PP_CONTAINER
#define PP_CHANGE_PASSWORD
#define PP_KEYSET_SEC_DESCR
#define PP_CERTCHAIN
#define PP_KEY_TYPE_SUBTYPE
#define PP_PROVTYPE
#define PP_KEYSTORAGE
#define PP_APPLI_CERT
#define PP_SYM_KEYSIZE
#define PP_SESSION_KEYSIZE
#define PP_UI_PROMPT
#define PP_ENUMALGS_EX
#define PP_ENUMMANDROOTS
#define PP_ENUMELECTROOTS
#define PP_KEYSET_TYPE
#define PP_ADMIN_PIN
#define PP_KEYEXCHANGE_PIN
#define PP_SIGNATURE_PIN
#define PP_SIG_KEYSIZE_INC
#define PP_KEYX_KEYSIZE_INC
#define PP_UNIQUE_CONTAINER
#define PP_SGC_INFO
#define PP_USE_HARDWARE_RNG
#define PP_KEYSPEC
#define PP_ENUMEX_SIGNING_PROT
#define PP_CRYPT_COUNT_KEY_USE

#define CRYPT_FIRST
#define CRYPT_NEXT
#define CRYPT_SGC_ENUM

#define CRYPT_IMPL_HARDWARE
#define CRYPT_IMPL_SOFTWARE
#define CRYPT_IMPL_MIXED
#define CRYPT_IMPL_UNKNOWN
#define CRYPT_IMPL_REMOVABLE

#define CRYPT_SEC_DESCR
#define CRYPT_PSTORE
#define CRYPT_UI_PROMPT

#define CRYPT_FLAG_PCT1
#define CRYPT_FLAG_SSL2
#define CRYPT_FLAG_SSL3
#define CRYPT_FLAG_TLS1
#define CRYPT_FLAG_IPSEC
#define CRYPT_FLAG_SIGNING

#define CRYPT_SGC
#define CRYPT_FASTSGC

#define PP_CLIENT_HWND
#define PP_CONTEXT_INFO
#define PP_KEYEXCHANGE_KEYSIZE
#define PP_SIGNATURE_KEYSIZE
#define PP_KEYEXCHANGE_ALG
#define PP_SIGNATURE_ALG
#define PP_DELETEKEY

#define PROV_RSA_FULL
#define PROV_RSA_SIG
#define PROV_DSS
#define PROV_FORTEZZA
#define PROV_MS_EXCHANGE
#define PROV_SSL
#define PROV_RSA_SCHANNEL
#define PROV_DSS_DH
#define PROV_EC_ECDSA_SIG
#define PROV_EC_ECNRA_SIG
#define PROV_EC_ECDSA_FULL
#define PROV_EC_ECNRA_FULL
#define PROV_DH_SCHANNEL
#define PROV_SPYRUS_LYNKS
#define PROV_RNG
#define PROV_INTEL_SEC
#define PROV_REPLACE_OWF
#define PROV_RSA_AES

#define MS_DEF_PROV
#define MS_ENHANCED_PROV
#define MS_STRONG_PROV
#define MS_DEF_RSA_SIG_PROV
#define MS_DEF_RSA_SCHANNEL_PROV
#define MS_DEF_DSS_PROV
#define MS_DEF_DSS_DH_PROV
#define MS_ENH_DSS_DH_PROV
#define MS_DEF_DH_SCHANNEL_PROV

#define MS_DEF_PROV_A
#define MS_DEF_PROV_W
#define MS_ENHANCED_PROV_A
#define MS_ENHANCED_PROV_W
#define MS_STRONG_PROV_A
#define MS_STRONG_PROV_W
#define MS_DEF_RSA_SIG_PROV_A
#define MS_DEF_RSA_SIG_PROV_W
#define MS_DEF_RSA_SCHANNEL_PROV_A
#define MS_DEF_RSA_SCHANNEL_PROV_W
#define MS_DEF_DSS_PROV_A
#define MS_DEF_DSS_PROV_W
#define MS_DEF_DSS_DH_PROV_A
#define MS_DEF_DSS_DH_PROV_W
#define MS_ENH_DSS_DH_PROV_A
#define MS_ENH_DSS_DH_PROV_W
#define MS_DEF_DH_SCHANNEL_PROV_A
#define MS_DEF_DH_SCHANNEL_PROV_W

#define MS_SCARD_PROV
#define MS_ENH_RSA_AES_PROV
#define MS_ENH_RSA_AES_PROV_XP

#define MS_SCARD_PROV_A
#define MS_SCARD_PROV_W

#define MS_ENH_RSA_AES_PROV_A
#define MS_ENH_RSA_AES_PROV_W
#define MS_ENH_RSA_AES_PROV_XP_A
#define MS_ENH_RSA_AES_PROV_XP_W

#define MAXUIDLEN

#define EXPO_OFFLOAD_REG_VALUE
#define EXPO_OFFLOAD_FUNC_NAME

#define szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS

#define szFORCE_KEY_PROTECTION

#define dwFORCE_KEY_PROTECTION_DISABLED
#define dwFORCE_KEY_PROTECTION_USER_SELECT
#define dwFORCE_KEY_PROTECTION_HIGH

#define szKEY_CACHE_ENABLED
#define szKEY_CACHE_SECONDS

#define szPRIV_KEY_CACHE_MAX_ITEMS
#define cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT

#define szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS
#define cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT

#define CUR_BLOB_VERSION

  typedef struct _CMS_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
  } CMS_KEY_INFO,*PCMS_KEY_INFO;

  typedef struct _HMAC_Info {
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
  } HMAC_INFO,*PHMAC_INFO;

  typedef struct _SCHANNEL_ALG {
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
  } SCHANNEL_ALG,*PSCHANNEL_ALG;

#define SCHANNEL_MAC_KEY
#define SCHANNEL_ENC_KEY

#define INTERNATIONAL_USAGE

  typedef struct _PROV_ENUMALGS {
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
  } PROV_ENUMALGS;

  typedef struct _PROV_ENUMALGS_EX {
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
  } PROV_ENUMALGS_EX;

  typedef struct _PUBLICKEYSTRUC {
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
  } BLOBHEADER,PUBLICKEYSTRUC;

  typedef struct _RSAPUBKEY {
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;

  } RSAPUBKEY;

  typedef struct _PUBKEY {
    DWORD magic;
    DWORD bitlen;
  } DHPUBKEY,DSSPUBKEY,KEAPUBKEY,TEKPUBKEY;

  typedef struct _DSSSEED {
    DWORD counter;
    BYTE seed[20];
  } DSSSEED;

  typedef struct _PUBKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
  } DHPUBKEY_VER3,DSSPUBKEY_VER3;

  typedef struct _PRIVKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
  } DHPRIVKEY_VER3,DSSPRIVKEY_VER3;

  typedef struct _KEY_TYPE_SUBTYPE {
    DWORD dwKeySpec;
    GUID Type;
    GUID Subtype;
  } KEY_TYPE_SUBTYPE,*PKEY_TYPE_SUBTYPE;

  typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
  } CERT_FORTEZZA_DATA_PROP;

  typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
  } CRYPT_RC4_KEY_STATE,*PCRYPT_RC4_KEY_STATE;

  typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
  } CRYPT_DES_KEY_STATE,*PCRYPT_DES_KEY_STATE;

  typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
  } CRYPT_3DES_KEY_STATE,*PCRYPT_3DES_KEY_STATE;

  typedef struct _CRYPTOAPI_BLOB {
    DWORD cbData;
    BYTE *pbData;
  } CRYPT_INTEGER_BLOB,*PCRYPT_INTEGER_BLOB,CRYPT_UINT_BLOB,*PCRYPT_UINT_BLOB,CRYPT_OBJID_BLOB,*PCRYPT_OBJID_BLOB,CERT_NAME_BLOB,*PCERT_NAME_BLOB,CERT_RDN_VALUE_BLOB,*PCERT_RDN_VALUE_BLOB,CERT_BLOB,*PCERT_BLOB,CRL_BLOB,*PCRL_BLOB,DATA_BLOB,*PDATA_BLOB,CRYPT_DATA_BLOB,*PCRYPT_DATA_BLOB,CRYPT_HASH_BLOB,*PCRYPT_HASH_BLOB,CRYPT_DIGEST_BLOB,*PCRYPT_DIGEST_BLOB,CRYPT_DER_BLOB,*PCRYPT_DER_BLOB,CRYPT_ATTR_BLOB,*PCRYPT_ATTR_BLOB;

  typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
  } CMS_DH_KEY_INFO,*PCMS_DH_KEY_INFO;



#define CryptAcquireContext
#define CryptSignHash
#define CryptVerifySignature

  __attribute__((dllimport)) WINBOOL CryptAcquireContextA(HCRYPTPROV *phProv,LPCSTR szContainer,LPCSTR szProvider,DWORD dwProvType,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptAcquireContextW(HCRYPTPROV *phProv,LPCWSTR szContainer,LPCWSTR szProvider,DWORD dwProvType,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptReleaseContext(HCRYPTPROV hProv,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGenKey(HCRYPTPROV hProv,ALG_ID Algid,DWORD dwFlags,HCRYPTKEY *phKey);
  __attribute__((dllimport)) WINBOOL CryptDeriveKey(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTHASH hBaseData,DWORD dwFlags,HCRYPTKEY *phKey);
  __attribute__((dllimport)) WINBOOL CryptDestroyKey(HCRYPTKEY hKey);
  __attribute__((dllimport)) WINBOOL CryptSetKeyParam(HCRYPTKEY hKey,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGetKeyParam(HCRYPTKEY hKey,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptSetHashParam(HCRYPTHASH hHash,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGetHashParam(HCRYPTHASH hHash,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptSetProvParam(HCRYPTPROV hProv,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGetProvParam(HCRYPTPROV hProv,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGenRandom(HCRYPTPROV hProv,DWORD dwLen,BYTE *pbBuffer);
  __attribute__((dllimport)) WINBOOL CryptGetUserKey(HCRYPTPROV hProv,DWORD dwKeySpec,HCRYPTKEY *phUserKey);
  __attribute__((dllimport)) WINBOOL CryptExportKey(HCRYPTKEY hKey,HCRYPTKEY hExpKey,DWORD dwBlobType,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen);
  __attribute__((dllimport)) WINBOOL CryptImportKey(HCRYPTPROV hProv,const BYTE *pbData,DWORD dwDataLen,HCRYPTKEY hPubKey,DWORD dwFlags,HCRYPTKEY *phKey);
  __attribute__((dllimport)) WINBOOL CryptEncrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen,DWORD dwBufLen);
  __attribute__((dllimport)) WINBOOL CryptDecrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen);
  __attribute__((dllimport)) WINBOOL CryptCreateHash(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTKEY hKey,DWORD dwFlags,HCRYPTHASH *phHash);
  __attribute__((dllimport)) WINBOOL CryptHashData(HCRYPTHASH hHash,const BYTE *pbData,DWORD dwDataLen,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptHashSessionKey(HCRYPTHASH hHash,HCRYPTKEY hKey,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptDestroyHash(HCRYPTHASH hHash);
  __attribute__((dllimport)) WINBOOL CryptSignHashA(HCRYPTHASH hHash,DWORD dwKeySpec,LPCSTR szDescription,DWORD dwFlags,BYTE *pbSignature,DWORD *pdwSigLen);
  __attribute__((dllimport)) WINBOOL CryptSignHashW(HCRYPTHASH hHash,DWORD dwKeySpec,LPCWSTR szDescription,DWORD dwFlags,BYTE *pbSignature,DWORD *pdwSigLen);
  __attribute__((dllimport)) WINBOOL CryptVerifySignatureA(HCRYPTHASH hHash,const BYTE *pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCSTR szDescription,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptVerifySignatureW(HCRYPTHASH hHash,const BYTE *pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCWSTR szDescription,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptSetProviderA(LPCSTR pszProvName,DWORD dwProvType);
  __attribute__((dllimport)) WINBOOL CryptSetProviderW(LPCWSTR pszProvName,DWORD dwProvType);

#define CryptSetProvider
#define CryptSetProviderEx
#define CryptGetDefaultProvider
#define CryptEnumProviderTypes
#define CryptEnumProviders

  __attribute__((dllimport)) WINBOOL CryptSetProviderExA(LPCSTR pszProvName,DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptSetProviderExW(LPCWSTR pszProvName,DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGetDefaultProviderA(DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags,LPSTR pszProvName,DWORD *pcbProvName);
  __attribute__((dllimport)) WINBOOL CryptGetDefaultProviderW(DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags,LPWSTR pszProvName,DWORD *pcbProvName);
  __attribute__((dllimport)) WINBOOL CryptEnumProviderTypesA(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPSTR szTypeName,DWORD *pcbTypeName);
  __attribute__((dllimport)) WINBOOL CryptEnumProviderTypesW(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPWSTR szTypeName,DWORD *pcbTypeName);
  __attribute__((dllimport)) WINBOOL CryptEnumProvidersA(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPSTR szProvName,DWORD *pcbProvName);
  __attribute__((dllimport)) WINBOOL CryptEnumProvidersW(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPWSTR szProvName,DWORD *pcbProvName);
  __attribute__((dllimport)) WINBOOL CryptContextAddRef(HCRYPTPROV hProv,DWORD *pdwReserved,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptDuplicateKey(HCRYPTKEY hKey,DWORD *pdwReserved,DWORD dwFlags,HCRYPTKEY *phKey);
  __attribute__((dllimport)) WINBOOL CryptDuplicateHash(HCRYPTHASH hHash,DWORD *pdwReserved,DWORD dwFlags,HCRYPTHASH *phHash);
  WINBOOL __attribute__((__cdecl__)) GetEncSChannel(BYTE **pData,DWORD *dwDecSize);



  typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
  } CRYPT_BIT_BLOB,*PCRYPT_BIT_BLOB;

  typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
  } CRYPT_ALGORITHM_IDENTIFIER,*PCRYPT_ALGORITHM_IDENTIFIER;

#define szOID_RSA
#define szOID_PKCS
#define szOID_RSA_HASH
#define szOID_RSA_ENCRYPT
#define szOID_PKCS_1
#define szOID_PKCS_2
#define szOID_PKCS_3
#define szOID_PKCS_4
#define szOID_PKCS_5
#define szOID_PKCS_6
#define szOID_PKCS_7
#define szOID_PKCS_8
#define szOID_PKCS_9
#define szOID_PKCS_10
#define szOID_PKCS_12
#define szOID_RSA_RSA
#define szOID_RSA_MD2RSA
#define szOID_RSA_MD4RSA
#define szOID_RSA_MD5RSA
#define szOID_RSA_SHA1RSA
#define szOID_RSA_SETOAEP_RSA
#define szOID_RSA_DH
#define szOID_RSA_data
#define szOID_RSA_signedData
#define szOID_RSA_envelopedData
#define szOID_RSA_signEnvData
#define szOID_RSA_digestedData
#define szOID_RSA_hashedData
#define szOID_RSA_encryptedData
#define szOID_RSA_emailAddr
#define szOID_RSA_unstructName
#define szOID_RSA_contentType
#define szOID_RSA_messageDigest
#define szOID_RSA_signingTime
#define szOID_RSA_counterSign
#define szOID_RSA_challengePwd
#define szOID_RSA_unstructAddr
#define szOID_RSA_extCertAttrs
#define szOID_RSA_certExtensions
#define szOID_RSA_SMIMECapabilities
#define szOID_RSA_preferSignedData
#define szOID_RSA_SMIMEalg
#define szOID_RSA_SMIMEalgESDH
#define szOID_RSA_SMIMEalgCMS3DESwrap
#define szOID_RSA_SMIMEalgCMSRC2wrap
#define szOID_RSA_MD2
#define szOID_RSA_MD4
#define szOID_RSA_MD5

#define szOID_RSA_RC2CBC
#define szOID_RSA_RC4
#define szOID_RSA_DES_EDE3_CBC
#define szOID_RSA_RC5_CBCPad

#define szOID_ANSI_X942
#define szOID_ANSI_X942_DH

#define szOID_X957
#define szOID_X957_DSA
#define szOID_X957_SHA1DSA

#define szOID_DS
#define szOID_DSALG
#define szOID_DSALG_CRPT
#define szOID_DSALG_HASH
#define szOID_DSALG_SIGN
#define szOID_DSALG_RSA

#define szOID_OIW

#define szOID_OIWSEC
#define szOID_OIWSEC_md4RSA
#define szOID_OIWSEC_md5RSA
#define szOID_OIWSEC_md4RSA2
#define szOID_OIWSEC_desECB
#define szOID_OIWSEC_desCBC
#define szOID_OIWSEC_desOFB
#define szOID_OIWSEC_desCFB
#define szOID_OIWSEC_desMAC
#define szOID_OIWSEC_rsaSign
#define szOID_OIWSEC_dsa
#define szOID_OIWSEC_shaDSA
#define szOID_OIWSEC_mdc2RSA
#define szOID_OIWSEC_shaRSA
#define szOID_OIWSEC_dhCommMod
#define szOID_OIWSEC_desEDE
#define szOID_OIWSEC_sha
#define szOID_OIWSEC_mdc2
#define szOID_OIWSEC_dsaComm
#define szOID_OIWSEC_dsaCommSHA
#define szOID_OIWSEC_rsaXchg
#define szOID_OIWSEC_keyHashSeal
#define szOID_OIWSEC_md2RSASign
#define szOID_OIWSEC_md5RSASign
#define szOID_OIWSEC_sha1
#define szOID_OIWSEC_dsaSHA1
#define szOID_OIWSEC_dsaCommSHA1
#define szOID_OIWSEC_sha1RSASign

#define szOID_OIWDIR
#define szOID_OIWDIR_CRPT
#define szOID_OIWDIR_HASH
#define szOID_OIWDIR_SIGN
#define szOID_OIWDIR_md2
#define szOID_OIWDIR_md2RSA

#define szOID_INFOSEC
#define szOID_INFOSEC_sdnsSignature
#define szOID_INFOSEC_mosaicSignature
#define szOID_INFOSEC_sdnsConfidentiality
#define szOID_INFOSEC_mosaicConfidentiality
#define szOID_INFOSEC_sdnsIntegrity
#define szOID_INFOSEC_mosaicIntegrity
#define szOID_INFOSEC_sdnsTokenProtection
#define szOID_INFOSEC_mosaicTokenProtection
#define szOID_INFOSEC_sdnsKeyManagement
#define szOID_INFOSEC_mosaicKeyManagement
#define szOID_INFOSEC_sdnsKMandSig
#define szOID_INFOSEC_mosaicKMandSig
#define szOID_INFOSEC_SuiteASignature
#define szOID_INFOSEC_SuiteAConfidentiality
#define szOID_INFOSEC_SuiteAIntegrity
#define szOID_INFOSEC_SuiteATokenProtection
#define szOID_INFOSEC_SuiteAKeyManagement
#define szOID_INFOSEC_SuiteAKMandSig
#define szOID_INFOSEC_mosaicUpdatedSig
#define szOID_INFOSEC_mosaicKMandUpdSig
#define szOID_INFOSEC_mosaicUpdatedInteg

#define szOID_NIST_AES128_CBC
#define szOID_NIST_AES192_CBC
#define szOID_NIST_AES256_CBC

  typedef struct _CRYPT_OBJID_TABLE {
    DWORD dwAlgId;
    LPCSTR pszObjId;
  } CRYPT_OBJID_TABLE,*PCRYPT_OBJID_TABLE;

  typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
  } CRYPT_HASH_INFO,*PCRYPT_HASH_INFO;

  typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    WINBOOL fCritical;
    CRYPT_OBJID_BLOB Value;
  } CERT_EXTENSION,*PCERT_EXTENSION;

  typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CRYPT_ATTRIBUTE_TYPE_VALUE,*PCRYPT_ATTRIBUTE_TYPE_VALUE;

  typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
  } CRYPT_ATTRIBUTE,*PCRYPT_ATTRIBUTE;

  typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
  } CRYPT_ATTRIBUTES,*PCRYPT_ATTRIBUTES;

  typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
  } CERT_RDN_ATTR,*PCERT_RDN_ATTR;

#define szOID_COMMON_NAME
#define szOID_SUR_NAME
#define szOID_DEVICE_SERIAL_NUMBER
#define szOID_COUNTRY_NAME
#define szOID_LOCALITY_NAME
#define szOID_STATE_OR_PROVINCE_NAME
#define szOID_STREET_ADDRESS
#define szOID_ORGANIZATION_NAME
#define szOID_ORGANIZATIONAL_UNIT_NAME
#define szOID_TITLE
#define szOID_DESCRIPTION
#define szOID_SEARCH_GUIDE
#define szOID_BUSINESS_CATEGORY
#define szOID_POSTAL_ADDRESS
#define szOID_POSTAL_CODE
#define szOID_POST_OFFICE_BOX
#define szOID_PHYSICAL_DELIVERY_OFFICE_NAME
#define szOID_TELEPHONE_NUMBER
#define szOID_TELEX_NUMBER
#define szOID_TELETEXT_TERMINAL_IDENTIFIER
#define szOID_FACSIMILE_TELEPHONE_NUMBER
#define szOID_X21_ADDRESS
#define szOID_INTERNATIONAL_ISDN_NUMBER
#define szOID_REGISTERED_ADDRESS
#define szOID_DESTINATION_INDICATOR
#define szOID_PREFERRED_DELIVERY_METHOD
#define szOID_PRESENTATION_ADDRESS
#define szOID_SUPPORTED_APPLICATION_CONTEXT
#define szOID_MEMBER
#define szOID_OWNER
#define szOID_ROLE_OCCUPANT
#define szOID_SEE_ALSO
#define szOID_USER_PASSWORD
#define szOID_USER_CERTIFICATE
#define szOID_CA_CERTIFICATE
#define szOID_AUTHORITY_REVOCATION_LIST
#define szOID_CERTIFICATE_REVOCATION_LIST
#define szOID_CROSS_CERTIFICATE_PAIR
#define szOID_GIVEN_NAME
#define szOID_INITIALS
#define szOID_DN_QUALIFIER
#define szOID_DOMAIN_COMPONENT
#define szOID_PKCS_12_FRIENDLY_NAME_ATTR
#define szOID_PKCS_12_LOCAL_KEY_ID
#define szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR
#define szOID_LOCAL_MACHINE_KEYSET
#define szOID_KEYID_RDN

#define CERT_RDN_ANY_TYPE
#define CERT_RDN_ENCODED_BLOB
#define CERT_RDN_OCTET_STRING
#define CERT_RDN_NUMERIC_STRING
#define CERT_RDN_PRINTABLE_STRING
#define CERT_RDN_TELETEX_STRING
#define CERT_RDN_T61_STRING
#define CERT_RDN_VIDEOTEX_STRING
#define CERT_RDN_IA5_STRING
#define CERT_RDN_GRAPHIC_STRING
#define CERT_RDN_VISIBLE_STRING
#define CERT_RDN_ISO646_STRING
#define CERT_RDN_GENERAL_STRING
#define CERT_RDN_UNIVERSAL_STRING
#define CERT_RDN_INT4_STRING
#define CERT_RDN_BMP_STRING
#define CERT_RDN_UNICODE_STRING
#define CERT_RDN_UTF8_STRING
#define CERT_RDN_TYPE_MASK
#define CERT_RDN_FLAGS_MASK
#define CERT_RDN_ENABLE_T61_UNICODE_FLAG
#define CERT_RDN_ENABLE_UTF8_UNICODE_FLAG
#define CERT_RDN_FORCE_UTF8_UNICODE_FLAG
#define CERT_RDN_DISABLE_CHECK_TYPE_FLAG
#define CERT_RDN_DISABLE_IE4_UTF8_FLAG

#define IS_CERT_RDN_CHAR_STRING

  typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
  } CERT_RDN,*PCERT_RDN;

  typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
  } CERT_NAME_INFO,*PCERT_NAME_INFO;

  typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
  } CERT_NAME_VALUE,*PCERT_NAME_VALUE;

  typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
  } CERT_PUBLIC_KEY_INFO,*PCERT_PUBLIC_KEY_INFO;

#define CERT_RSA_PUBLIC_KEY_OBJID
#define CERT_DEFAULT_OID_PUBLIC_KEY_SIGN
#define CERT_DEFAULT_OID_PUBLIC_KEY_XCHG

  typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
  } CRYPT_PRIVATE_KEY_INFO,*PCRYPT_PRIVATE_KEY_INFO;

  typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
  } CRYPT_ENCRYPTED_PRIVATE_KEY_INFO,*PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

  typedef WINBOOL ( *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER Algorithm,CRYPT_DATA_BLOB EncryptedPrivateKey,BYTE *pbClearTextKey,DWORD *pcbClearTextKey,LPVOID pVoidDecryptFunc);
  typedef WINBOOL ( *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm,CRYPT_DATA_BLOB *pClearTextPrivateKey,BYTE *pbEncryptedKey,DWORD *pcbEncryptedKey,LPVOID pVoidEncryptFunc);
  typedef WINBOOL ( *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,HCRYPTPROV *phCryptProv,LPVOID pVoidResolveFunc);

  typedef struct _CRYPT_PKCS8_IMPORT_PARAMS {
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
  } CRYPT_PKCS8_IMPORT_PARAMS,*PCRYPT_PKCS8_IMPORT_PARAMS,CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS,*PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;

  typedef struct _CRYPT_PKCS8_EXPORT_PARAMS {
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;
    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
  } CRYPT_PKCS8_EXPORT_PARAMS,*PCRYPT_PKCS8_EXPORT_PARAMS;

  typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CERT_INFO,*PCERT_INFO;

#define CERT_V1
#define CERT_V2
#define CERT_V3

#define CERT_INFO_VERSION_FLAG
#define CERT_INFO_SERIAL_NUMBER_FLAG
#define CERT_INFO_SIGNATURE_ALGORITHM_FLAG
#define CERT_INFO_ISSUER_FLAG
#define CERT_INFO_NOT_BEFORE_FLAG
#define CERT_INFO_NOT_AFTER_FLAG
#define CERT_INFO_SUBJECT_FLAG
#define CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG
#define CERT_INFO_ISSUER_UNIQUE_ID_FLAG
#define CERT_INFO_SUBJECT_UNIQUE_ID_FLAG
#define CERT_INFO_EXTENSION_FLAG

  typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CRL_ENTRY,*PCRL_ENTRY;

  typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CRL_INFO,*PCRL_INFO;

#define CRL_V1
#define CRL_V2

  typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CERT_REQUEST_INFO,*PCERT_REQUEST_INFO;

#define CERT_REQUEST_V1

  typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
  } CERT_KEYGEN_REQUEST_INFO,*PCERT_KEYGEN_REQUEST_INFO;

#define CERT_KEYGEN_REQUEST_V1

  typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
  } CERT_SIGNED_CONTENT_INFO,*PCERT_SIGNED_CONTENT_INFO;

  typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
  } CTL_USAGE,*PCTL_USAGE,CERT_ENHKEY_USAGE,*PCERT_ENHKEY_USAGE;

  typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CTL_ENTRY,*PCTL_ENTRY;

  typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CTL_INFO,*PCTL_INFO;

#define CTL_V1

  typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CRYPT_TIME_STAMP_REQUEST_INFO,*PCRYPT_TIME_STAMP_REQUEST_INFO;

  typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
  } CRYPT_ENROLLMENT_NAME_VALUE_PAIR,*PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;

  typedef struct _CRYPT_CSP_PROVIDER {
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
  } CRYPT_CSP_PROVIDER,*PCRYPT_CSP_PROVIDER;

#define CERT_ENCODING_TYPE_MASK
#define CMSG_ENCODING_TYPE_MASK
#define GET_CERT_ENCODING_TYPE
#define GET_CMSG_ENCODING_TYPE

#define CRYPT_ASN_ENCODING
#define CRYPT_NDR_ENCODING
#define X509_ASN_ENCODING
#define X509_NDR_ENCODING
#define PKCS_7_ASN_ENCODING
#define PKCS_7_NDR_ENCODING

  __attribute__((dllimport)) WINBOOL CryptFormatObject(DWORD dwCertEncodingType,DWORD dwFormatType,DWORD dwFormatStrType,void *pFormatStruct,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,void *pbFormat,DWORD *pcbFormat);

#define CRYPT_FORMAT_STR_MULTI_LINE
#define CRYPT_FORMAT_STR_NO_HEX
#define CRYPT_FORMAT_SIMPLE
#define CRYPT_FORMAT_X509
#define CRYPT_FORMAT_OID
#define CRYPT_FORMAT_RDN_SEMICOLON
#define CRYPT_FORMAT_RDN_CRLF
#define CRYPT_FORMAT_RDN_UNQUOTE
#define CRYPT_FORMAT_RDN_REVERSE
#define CRYPT_FORMAT_COMMA
#define CRYPT_FORMAT_SEMICOLON
#define CRYPT_FORMAT_CRLF

  typedef LPVOID ( *PFN_CRYPT_ALLOC)(size_t cbSize);
  typedef void ( *PFN_CRYPT_FREE)(LPVOID pv);

  typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
  } CRYPT_ENCODE_PARA,*PCRYPT_ENCODE_PARA;

  __attribute__((dllimport)) WINBOOL CryptEncodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,DWORD dwFlags,PCRYPT_ENCODE_PARA pEncodePara,void *pvEncoded,DWORD *pcbEncoded);
  __attribute__((dllimport)) WINBOOL CryptEncodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,BYTE *pbEncoded,DWORD *pcbEncoded);

#define CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG
#define CRYPT_ENCODE_ALLOC_FLAG
#define CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG
#define CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG
#define CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG
#define CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG
#define CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG

  typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
  } CRYPT_DECODE_PARA,*PCRYPT_DECODE_PARA;

  __attribute__((dllimport)) WINBOOL CryptDecodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCRYPT_DECODE_PARA pDecodePara,void *pvStructInfo,DWORD *pcbStructInfo);
  __attribute__((dllimport)) WINBOOL CryptDecodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,void *pvStructInfo,DWORD *pcbStructInfo);

#define CRYPT_DECODE_NOCOPY_FLAG
#define CRYPT_DECODE_TO_BE_SIGNED_FLAG
#define CRYPT_DECODE_SHARE_OID_STRING_FLAG
#define CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG
#define CRYPT_DECODE_ALLOC_FLAG
#define CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG
#define CRYPT_ENCODE_DECODE_NONE
#define X509_CERT
#define X509_CERT_TO_BE_SIGNED
#define X509_CERT_CRL_TO_BE_SIGNED
#define X509_CERT_REQUEST_TO_BE_SIGNED
#define X509_EXTENSIONS
#define X509_NAME_VALUE
#define X509_NAME
#define X509_PUBLIC_KEY_INFO
#define X509_AUTHORITY_KEY_ID
#define X509_KEY_ATTRIBUTES
#define X509_KEY_USAGE_RESTRICTION
#define X509_ALTERNATE_NAME
#define X509_BASIC_CONSTRAINTS
#define X509_KEY_USAGE
#define X509_BASIC_CONSTRAINTS2
#define X509_CERT_POLICIES
#define PKCS_UTC_TIME
#define PKCS_TIME_REQUEST
#define RSA_CSP_PUBLICKEYBLOB
#define X509_UNICODE_NAME
#define X509_KEYGEN_REQUEST_TO_BE_SIGNED
#define PKCS_ATTRIBUTE
#define PKCS_CONTENT_INFO_SEQUENCE_OF_ANY
#define X509_UNICODE_NAME_VALUE
#define X509_ANY_STRING
#define X509_UNICODE_ANY_STRING
#define X509_OCTET_STRING
#define X509_BITS
#define X509_INTEGER
#define X509_MULTI_BYTE_INTEGER
#define X509_ENUMERATED
#define X509_CHOICE_OF_TIME
#define X509_AUTHORITY_KEY_ID2
#define X509_AUTHORITY_INFO_ACCESS
#define X509_CRL_REASON_CODE
#define PKCS_CONTENT_INFO
#define X509_SEQUENCE_OF_ANY
#define X509_CRL_DIST_POINTS
#define X509_ENHANCED_KEY_USAGE
#define PKCS_CTL
#define X509_MULTI_BYTE_UINT
#define X509_DSS_PUBLICKEY
#define X509_DSS_PARAMETERS
#define X509_DSS_SIGNATURE
#define PKCS_RC2_CBC_PARAMETERS
#define PKCS_SMIME_CAPABILITIES
#define PKCS_RSA_PRIVATE_KEY
#define PKCS_PRIVATE_KEY_INFO
#define PKCS_ENCRYPTED_PRIVATE_KEY_INFO
#define X509_PKIX_POLICY_QUALIFIER_USERNOTICE
#define X509_DH_PUBLICKEY
#define X509_DH_PARAMETERS
#define PKCS_ATTRIBUTES
#define PKCS_SORTED_CTL

#define X509_ECC_SIGNATURE

#define X942_DH_PARAMETERS
#define X509_BITS_WITHOUT_TRAILING_ZEROES
#define X942_OTHER_INFO
#define X509_CERT_PAIR
#define X509_ISSUING_DIST_POINT
#define X509_NAME_CONSTRAINTS
#define X509_POLICY_MAPPINGS
#define X509_POLICY_CONSTRAINTS
#define X509_CROSS_CERT_DIST_POINTS
#define CMC_DATA
#define CMC_RESPONSE
#define CMC_STATUS
#define CMC_ADD_EXTENSIONS
#define CMC_ADD_ATTRIBUTES
#define X509_CERTIFICATE_TEMPLATE
#define OCSP_SIGNED_REQUEST
#define OCSP_REQUEST
#define OCSP_RESPONSE
#define OCSP_BASIC_SIGNED_RESPONSE
#define OCSP_BASIC_RESPONSE
#define X509_LOGOTYPE_EXT
#define X509_BIOMETRIC_EXT
#define CNG_RSA_PUBLIC_KEY_BLOB
#define X509_OBJECT_IDENTIFIER
#define X509_ALGORITHM_IDENTIFIER
#define PKCS_RSA_SSA_PSS_PARAMETERS
#define PKCS_RSAES_OAEP_PARAMETERS
#define ECC_CMS_SHARED_INFO
#define PKCS7_SIGNER_INFO
#define CMS_SIGNER_INFO
#define szOID_AUTHORITY_KEY_IDENTIFIER
#define szOID_KEY_ATTRIBUTES
#define szOID_CERT_POLICIES_95
#define szOID_KEY_USAGE_RESTRICTION
#define szOID_SUBJECT_ALT_NAME
#define szOID_ISSUER_ALT_NAME
#define szOID_BASIC_CONSTRAINTS


#define szOID_KEY_USAGE
#define szOID_PRIVATEKEY_USAGE_PERIOD
#define szOID_BASIC_CONSTRAINTS2
#define szOID_CERT_POLICIES
#define szOID_ANY_CERT_POLICY
#define szOID_AUTHORITY_KEY_IDENTIFIER2
#define szOID_SUBJECT_KEY_IDENTIFIER
#define szOID_SUBJECT_ALT_NAME2
#define szOID_ISSUER_ALT_NAME2
#define szOID_CRL_REASON_CODE
#define szOID_REASON_CODE_HOLD
#define szOID_CRL_DIST_POINTS
#define szOID_ENHANCED_KEY_USAGE
#define szOID_CRL_NUMBER
#define szOID_DELTA_CRL_INDICATOR
#define szOID_ISSUING_DIST_POINT
#define szOID_FRESHEST_CRL
#define szOID_NAME_CONSTRAINTS
#define szOID_POLICY_MAPPINGS
#define szOID_LEGACY_POLICY_MAPPINGS
#define szOID_POLICY_CONSTRAINTS
#define szOID_ECC_PUBLIC_KEY
#define szOID_ECDSA_SPECIFIED
#define szOID_RSA_SSA_PSS
#define szOID_RSAES_OAEP
#define szOID_RENEWAL_CERTIFICATE
#define szOID_ENROLLMENT_NAME_VALUE_PAIR
#define szOID_ENROLLMENT_CSP_PROVIDER
#define szOID_OS_VERSION
#define szOID_ENROLLMENT_AGENT
#define szOID_PKIX
#define szOID_PKIX_PE
#define szOID_AUTHORITY_INFO_ACCESS
#define szOID_BIOMETRIC_EXT
#define szOID_LOGOTYPE_EXT
#define szOID_CERT_EXTENSIONS
#define szOID_NEXT_UPDATE_LOCATION
#define szOID_REMOVE_CERTIFICATE
#define szOID_CROSS_CERT_DIST_POINTS
#define szOID_CTL
#define szOID_SORTED_CTL


#define szOID_SERIALIZED



#define szOID_NT_PRINCIPAL_NAME



#define szOID_PRODUCT_UPDATE


#define szOID_ANY_APPLICATION_POLICY

#define szOID_AUTO_ENROLL_CTL_USAGE

#define szOID_ENROLL_CERTTYPE_EXTENSION

#define szOID_CERT_MANIFOLD


#define szOID_CERTSRV_CA_VERSION


#define szOID_CERTSRV_PREVIOUS_CERT_HASH
#define szOID_CRL_VIRTUAL_BASE
#define szOID_CRL_NEXT_PUBLISH
#define szOID_KP_CA_EXCHANGE
#define szOID_KP_KEY_RECOVERY_AGENT
#define szOID_CERTIFICATE_TEMPLATE
#define szOID_ENTERPRISE_OID_ROOT
#define szOID_RDN_DUMMY_SIGNER
#define szOID_APPLICATION_CERT_POLICIES
#define szOID_APPLICATION_POLICY_MAPPINGS
#define szOID_APPLICATION_POLICY_CONSTRAINTS
#define szOID_ARCHIVED_KEY_ATTR
#define szOID_CRL_SELF_CDP
#define szOID_REQUIRE_CERT_CHAIN_POLICY
#define szOID_ARCHIVED_KEY_CERT_HASH
#define szOID_ISSUED_CERT_HASH
#define szOID_DS_EMAIL_REPLICATION
#define szOID_REQUEST_CLIENT_INFO
#define szOID_ENCRYPTED_KEY_HASH
#define szOID_CERTSRV_CROSSCA_VERSION
#define szOID_NTDS_REPLICATION
#define szOID_SUBJECT_DIR_ATTRS
#define szOID_PKIX_KP
#define szOID_PKIX_KP_SERVER_AUTH
#define szOID_PKIX_KP_CLIENT_AUTH
#define szOID_PKIX_KP_CODE_SIGNING
#define szOID_PKIX_KP_EMAIL_PROTECTION
#define szOID_PKIX_KP_IPSEC_END_SYSTEM
#define szOID_PKIX_KP_IPSEC_TUNNEL
#define szOID_PKIX_KP_IPSEC_USER
#define szOID_PKIX_KP_TIMESTAMP_SIGNING
#define szOID_IPSEC_KP_IKE_INTERMEDIATE
#define szOID_KP_CTL_USAGE_SIGNING
#define szOID_KP_TIME_STAMP_SIGNING


#define szOID_SERVER_GATED_CRYPTO



#define szOID_SGC_NETSCAPE

#define szOID_KP_EFS
#define szOID_EFS_RECOVERY
#define szOID_WHQL_CRYPTO
#define szOID_NT5_CRYPTO
#define szOID_OEM_WHQL_CRYPTO
#define szOID_EMBEDDED_NT_CRYPTO
#define szOID_ROOT_LIST_SIGNER
#define szOID_KP_QUALIFIED_SUBORDINATION
#define szOID_KP_KEY_RECOVERY
#define szOID_KP_DOCUMENT_SIGNING
#define szOID_KP_LIFETIME_SIGNING
#define szOID_KP_MOBILE_DEVICE_SOFTWARE


#define szOID_DRM



#define szOID_DRM_INDIVIDUALIZATION



#define szOID_LICENSES



#define szOID_LICENSE_SERVER



#define szOID_KP_SMARTCARD_LOGON


#define szOID_YESNO_TRUST_ATTR

#define szOID_PKIX_POLICY_QUALIFIER_CPS
#define szOID_PKIX_POLICY_QUALIFIER_USERNOTICE

#define szOID_CERT_POLICIES_95_QUALIFIER1

  typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CERT_EXTENSIONS,*PCERT_EXTENSIONS;

#define CERT_UNICODE_RDN_ERR_INDEX_MASK
#define CERT_UNICODE_RDN_ERR_INDEX_SHIFT
#define CERT_UNICODE_ATTR_ERR_INDEX_MASK
#define CERT_UNICODE_ATTR_ERR_INDEX_SHIFT
#define CERT_UNICODE_VALUE_ERR_INDEX_MASK
#define CERT_UNICODE_VALUE_ERR_INDEX_SHIFT

#define GET_CERT_UNICODE_RDN_ERR_INDEX
#define GET_CERT_UNICODE_ATTR_ERR_INDEX
#define GET_CERT_UNICODE_VALUE_ERR_INDEX

  typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
  } CERT_AUTHORITY_KEY_ID_INFO,*PCERT_AUTHORITY_KEY_ID_INFO;

  typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
  } CERT_PRIVATE_KEY_VALIDITY,*PCERT_PRIVATE_KEY_VALIDITY;

  typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
  } CERT_KEY_ATTRIBUTES_INFO,*PCERT_KEY_ATTRIBUTES_INFO;

#define CERT_DIGITAL_SIGNATURE_KEY_USAGE
#define CERT_NON_REPUDIATION_KEY_USAGE
#define CERT_KEY_ENCIPHERMENT_KEY_USAGE
#define CERT_DATA_ENCIPHERMENT_KEY_USAGE
#define CERT_KEY_AGREEMENT_KEY_USAGE
#define CERT_KEY_CERT_SIGN_KEY_USAGE
#define CERT_OFFLINE_CRL_SIGN_KEY_USAGE
#define CERT_CRL_SIGN_KEY_USAGE
#define CERT_ENCIPHER_ONLY_KEY_USAGE

#define CERT_DECIPHER_ONLY_KEY_USAGE

  typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
  } CERT_POLICY_ID,*PCERT_POLICY_ID;

  typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
  } CERT_KEY_USAGE_RESTRICTION_INFO,*PCERT_KEY_USAGE_RESTRICTION_INFO;

  typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CERT_OTHER_NAME,*PCERT_OTHER_NAME;

  typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    __extension__ union {
      PCERT_OTHER_NAME pOtherName;
      LPWSTR pwszRfc822Name;
      LPWSTR pwszDNSName;






      CERT_NAME_BLOB DirectoryName;





      LPWSTR pwszURL;
      CRYPT_DATA_BLOB IPAddress;
      LPSTR pszRegisteredID;
    };
  } CERT_ALT_NAME_ENTRY,*PCERT_ALT_NAME_ENTRY;

#define CERT_ALT_NAME_OTHER_NAME
#define CERT_ALT_NAME_RFC822_NAME
#define CERT_ALT_NAME_DNS_NAME
#define CERT_ALT_NAME_X400_ADDRESS
#define CERT_ALT_NAME_DIRECTORY_NAME
#define CERT_ALT_NAME_EDI_PARTY_NAME
#define CERT_ALT_NAME_URL
#define CERT_ALT_NAME_IP_ADDRESS
#define CERT_ALT_NAME_REGISTERED_ID

  typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
  } CERT_ALT_NAME_INFO,*PCERT_ALT_NAME_INFO;

#define CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK
#define CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT
#define CERT_ALT_NAME_VALUE_ERR_INDEX_MASK
#define CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT

#define GET_CERT_ALT_NAME_ENTRY_ERR_INDEX
#define GET_CERT_ALT_NAME_VALUE_ERR_INDEX

  typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
  } CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;

#define CERT_CA_SUBJECT_FLAG
#define CERT_END_ENTITY_SUBJECT_FLAG

  typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    WINBOOL fCA;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
  } CERT_BASIC_CONSTRAINTS2_INFO,*PCERT_BASIC_CONSTRAINTS2_INFO;

  typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
  } CERT_POLICY_QUALIFIER_INFO,*PCERT_POLICY_QUALIFIER_INFO;

  typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
  } CERT_POLICY_INFO,*PCERT_POLICY_INFO;

  typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
  } CERT_POLICIES_INFO,*PCERT_POLICIES_INFO;

  typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
  } CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,*PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

  typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
  } CERT_POLICY_QUALIFIER_USER_NOTICE,*PCERT_POLICY_QUALIFIER_USER_NOTICE;

  typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
  } CPS_URLS,*PCPS_URLS;

  typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
  } CERT_POLICY95_QUALIFIER1,*PCERT_POLICY95_QUALIFIER1;

  typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
  } CERT_POLICY_MAPPING,*PCERT_POLICY_MAPPING;

  typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
  } CERT_POLICY_MAPPINGS_INFO,*PCERT_POLICY_MAPPINGS_INFO;

  typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    WINBOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;
    WINBOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
  } CERT_POLICY_CONSTRAINTS_INFO,*PCERT_POLICY_CONSTRAINTS_INFO;

  typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
  } CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY,*PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

  typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
  } CRYPT_CONTENT_INFO,*PCRYPT_CONTENT_INFO;

  typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
  } CRYPT_SEQUENCE_OF_ANY,*PCRYPT_SEQUENCE_OF_ANY;

  typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;

    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
  } CERT_AUTHORITY_KEY_ID2_INFO,*PCERT_AUTHORITY_KEY_ID2_INFO;

  typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
  } CERT_ACCESS_DESCRIPTION,*PCERT_ACCESS_DESCRIPTION;

  typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
  } CERT_AUTHORITY_INFO_ACCESS,*PCERT_AUTHORITY_INFO_ACCESS;

#define szOID_PKIX_ACC_DESCR
#define szOID_PKIX_OCSP
#define szOID_PKIX_CA_ISSUERS

#define CRL_REASON_UNSPECIFIED
#define CRL_REASON_KEY_COMPROMISE
#define CRL_REASON_CA_COMPROMISE
#define CRL_REASON_AFFILIATION_CHANGED
#define CRL_REASON_SUPERSEDED
#define CRL_REASON_CESSATION_OF_OPERATION
#define CRL_REASON_CERTIFICATE_HOLD
#define CRL_REASON_REMOVE_FROM_CRL

  typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    __extension__ union {
      CERT_ALT_NAME_INFO FullName;
    };
  } CRL_DIST_POINT_NAME,*PCRL_DIST_POINT_NAME;

#define CRL_DIST_POINT_NO_NAME
#define CRL_DIST_POINT_FULL_NAME
#define CRL_DIST_POINT_ISSUER_RDN_NAME

  typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
  } CRL_DIST_POINT,*PCRL_DIST_POINT;

#define CRL_REASON_UNUSED_FLAG
#define CRL_REASON_KEY_COMPROMISE_FLAG
#define CRL_REASON_CA_COMPROMISE_FLAG
#define CRL_REASON_AFFILIATION_CHANGED_FLAG
#define CRL_REASON_SUPERSEDED_FLAG
#define CRL_REASON_CESSATION_OF_OPERATION_FLAG
#define CRL_REASON_CERTIFICATE_HOLD_FLAG

  typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
  } CRL_DIST_POINTS_INFO,*PCRL_DIST_POINTS_INFO;

#define CRL_DIST_POINT_ERR_INDEX_MASK
#define CRL_DIST_POINT_ERR_INDEX_SHIFT
#define GET_CRL_DIST_POINT_ERR_INDEX

#define CRL_DIST_POINT_ERR_CRL_ISSUER_BIT
#define IS_CRL_DIST_POINT_ERR_CRL_ISSUER

  typedef struct _CROSS_CERT_DIST_POINTS_INFO {
    DWORD dwSyncDeltaTime;
    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
  } CROSS_CERT_DIST_POINTS_INFO,*PCROSS_CERT_DIST_POINTS_INFO;

#define CROSS_CERT_DIST_POINT_ERR_INDEX_MASK
#define CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT
#define GET_CROSS_CERT_DIST_POINT_ERR_INDEX

  typedef struct _CERT_PAIR {
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
  } CERT_PAIR,*PCERT_PAIR;

  typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    WINBOOL fOnlyContainsUserCerts;
    WINBOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    WINBOOL fIndirectCRL;
  } CRL_ISSUING_DIST_POINT,*PCRL_ISSUING_DIST_POINT;

  typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    WINBOOL fMaximum;
    DWORD dwMaximum;
  } CERT_GENERAL_SUBTREE,*PCERT_GENERAL_SUBTREE;

  typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
  } CERT_NAME_CONSTRAINTS_INFO,*PCERT_NAME_CONSTRAINTS_INFO;

#define CERT_EXCLUDED_SUBTREE_BIT
#define IS_CERT_EXCLUDED_SUBTREE

#define SORTED_CTL_EXT_FLAGS_OFFSET
#define SORTED_CTL_EXT_COUNT_OFFSET
#define SORTED_CTL_EXT_MAX_COLLISION_OFFSET
#define SORTED_CTL_EXT_HASH_BUCKET_OFFSET

#define SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG

  typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
  } CERT_DSS_PARAMETERS,*PCERT_DSS_PARAMETERS;

#define CERT_DSS_R_LEN
#define CERT_DSS_S_LEN
#define CERT_DSS_SIGNATURE_LEN

#define CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN

  typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
  } CERT_DH_PARAMETERS,*PCERT_DH_PARAMETERS;

  typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
  } CERT_X942_DH_VALIDATION_PARAMS,*PCERT_X942_DH_VALIDATION_PARAMS;

  typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
  } CERT_X942_DH_PARAMETERS,*PCERT_X942_DH_PARAMETERS;

#define CRYPT_X942_COUNTER_BYTE_LENGTH
#define CRYPT_X942_KEY_LENGTH_BYTE_LENGTH
#define CRYPT_X942_PUB_INFO_BYTE_LENGTH
  typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
  } CRYPT_X942_OTHER_INFO,*PCRYPT_X942_OTHER_INFO;

  typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    WINBOOL fIV;
    BYTE rgbIV[8];
  } CRYPT_RC2_CBC_PARAMETERS,*PCRYPT_RC2_CBC_PARAMETERS;

#define CRYPT_RC2_40BIT_VERSION
#define CRYPT_RC2_56BIT_VERSION
#define CRYPT_RC2_64BIT_VERSION
#define CRYPT_RC2_128BIT_VERSION

  typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
  } CRYPT_SMIME_CAPABILITY,*PCRYPT_SMIME_CAPABILITY;

  typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
  } CRYPT_SMIME_CAPABILITIES,*PCRYPT_SMIME_CAPABILITIES;

#define szOID_VERISIGN_PRIVATE_6_9
#define szOID_VERISIGN_ONSITE_JURISDICTION_HASH
#define szOID_VERISIGN_BITSTRING_6_13
#define szOID_VERISIGN_ISS_STRONG_CRYPTO
#define szOID_NETSCAPE
#define szOID_NETSCAPE_CERT_EXTENSION
#define szOID_NETSCAPE_CERT_TYPE
#define szOID_NETSCAPE_BASE_URL
#define szOID_NETSCAPE_REVOCATION_URL
#define szOID_NETSCAPE_CA_REVOCATION_URL
#define szOID_NETSCAPE_CERT_RENEWAL_URL
#define szOID_NETSCAPE_CA_POLICY_URL
#define szOID_NETSCAPE_SSL_SERVER_NAME
#define szOID_NETSCAPE_COMMENT
#define szOID_NETSCAPE_DATA_TYPE
#define szOID_NETSCAPE_CERT_SEQUENCE

#define NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE
#define NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE
#define NETSCAPE_SMIME_CERT_TYPE
#define NETSCAPE_SIGN_CERT_TYPE
#define NETSCAPE_SSL_CA_CERT_TYPE
#define NETSCAPE_SMIME_CA_CERT_TYPE
#define NETSCAPE_SIGN_CA_CERT_TYPE

#define szOID_CT_PKI_DATA
#define szOID_CT_PKI_RESPONSE
#define szOID_PKIX_NO_SIGNATURE
#define szOID_CMC
#define szOID_CMC_STATUS_INFO
#define szOID_CMC_IDENTIFICATION
#define szOID_CMC_IDENTITY_PROOF
#define szOID_CMC_DATA_RETURN
#define szOID_CMC_TRANSACTION_ID
#define szOID_CMC_SENDER_NONCE
#define szOID_CMC_RECIPIENT_NONCE
#define szOID_CMC_ADD_EXTENSIONS
#define szOID_CMC_ENCRYPTED_POP
#define szOID_CMC_DECRYPTED_POP
#define szOID_CMC_LRA_POP_WITNESS
#define szOID_CMC_GET_CERT
#define szOID_CMC_GET_CRL
#define szOID_CMC_REVOKE_REQUEST
#define szOID_CMC_REG_INFO
#define szOID_CMC_RESPONSE_INFO
#define szOID_CMC_QUERY_PENDING
#define szOID_CMC_ID_POP_LINK_RANDOM
#define szOID_CMC_ID_POP_LINK_WITNESS
#define szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE

#define szOID_CMC_ADD_ATTRIBUTES

  typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
  } CMC_TAGGED_ATTRIBUTE,*PCMC_TAGGED_ATTRIBUTE;

  typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
  } CMC_TAGGED_CERT_REQUEST,*PCMC_TAGGED_CERT_REQUEST;

  typedef struct _CMC_TAGGED_REQUEST {
    DWORD dwTaggedRequestChoice;
    __extension__ union {
      PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    };
  } CMC_TAGGED_REQUEST,*PCMC_TAGGED_REQUEST;

#define CMC_TAGGED_CERT_REQUEST_CHOICE

  typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
  } CMC_TAGGED_CONTENT_INFO,*PCMC_TAGGED_CONTENT_INFO;

  typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CMC_TAGGED_OTHER_MSG,*PCMC_TAGGED_OTHER_MSG;

  typedef struct _CMC_DATA_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
  } CMC_DATA_INFO,*PCMC_DATA_INFO;

  typedef struct _CMC_RESPONSE_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
  } CMC_RESPONSE_INFO,*PCMC_RESPONSE_INFO;

  typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
  } CMC_PEND_INFO,*PCMC_PEND_INFO;

  typedef struct _CMC_STATUS_INFO {
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    __extension__ union {
      DWORD dwFailInfo;
      PCMC_PEND_INFO pPendInfo;
    };
  } CMC_STATUS_INFO,*PCMC_STATUS_INFO;

#define CMC_OTHER_INFO_NO_CHOICE
#define CMC_OTHER_INFO_FAIL_CHOICE
#define CMC_OTHER_INFO_PEND_CHOICE

#define CMC_STATUS_SUCCESS
#define CMC_STATUS_FAILED
#define CMC_STATUS_PENDING
#define CMC_STATUS_NO_SUPPORT
#define CMC_STATUS_CONFIRM_REQUIRED
#define CMC_FAIL_BAD_ALG
#define CMC_FAIL_BAD_MESSAGE_CHECK
#define CMC_FAIL_BAD_REQUEST
#define CMC_FAIL_BAD_TIME
#define CMC_FAIL_BAD_CERT_ID
#define CMC_FAIL_UNSUPORTED_EXT
#define CMC_FAIL_MUST_ARCHIVE_KEYS
#define CMC_FAIL_BAD_IDENTITY
#define CMC_FAIL_POP_REQUIRED
#define CMC_FAIL_POP_FAILED
#define CMC_FAIL_NO_KEY_REUSE
#define CMC_FAIL_INTERNAL_CA_ERROR
#define CMC_FAIL_TRY_LATER

  typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CMC_ADD_EXTENSIONS_INFO,*PCMC_ADD_EXTENSIONS_INFO;

  typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CMC_ADD_ATTRIBUTES_INFO,*PCMC_ADD_ATTRIBUTES_INFO;

  typedef struct _CERT_TEMPLATE_EXT {
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    WINBOOL fMinorVersion;
    DWORD dwMinorVersion;
  } CERT_TEMPLATE_EXT,*PCERT_TEMPLATE_EXT;

  typedef void *HCRYPTOIDFUNCSET;
  typedef void *HCRYPTOIDFUNCADDR;

#define CRYPT_OID_ENCODE_OBJECT_FUNC
#define CRYPT_OID_DECODE_OBJECT_FUNC
#define CRYPT_OID_ENCODE_OBJECT_EX_FUNC
#define CRYPT_OID_DECODE_OBJECT_EX_FUNC
#define CRYPT_OID_CREATE_COM_OBJECT_FUNC
#define CRYPT_OID_VERIFY_REVOCATION_FUNC
#define CRYPT_OID_VERIFY_CTL_USAGE_FUNC
#define CRYPT_OID_FORMAT_OBJECT_FUNC
#define CRYPT_OID_FIND_OID_INFO_FUNC
#define CRYPT_OID_FIND_LOCALIZED_NAME_FUNC

#define CRYPT_OID_REGPATH
#define CRYPT_OID_REG_ENCODING_TYPE_PREFIX
#define CRYPT_OID_REG_DLL_VALUE_NAME
#define CRYPT_OID_REG_FUNC_NAME_VALUE_NAME
#define CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A

#define CRYPT_OID_REG_FLAGS_VALUE_NAME

#define CRYPT_DEFAULT_OID

  typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
  } CRYPT_OID_FUNC_ENTRY,*PCRYPT_OID_FUNC_ENTRY;

#define CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG

  __attribute__((dllimport)) WINBOOL CryptInstallOIDFunctionAddress(HMODULE hModule,DWORD dwEncodingType,LPCSTR pszFuncName,DWORD cFuncEntry,const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],DWORD dwFlags);
  __attribute__((dllimport)) HCRYPTOIDFUNCSET CryptInitOIDFunctionSet(LPCSTR pszFuncName,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCSTR pszOID,DWORD dwFlags,void **ppvFuncAddr,HCRYPTOIDFUNCADDR *phFuncAddr);

#define CRYPT_GET_INSTALLED_OID_FUNC_FLAG

  __attribute__((dllimport)) WINBOOL CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPWSTR pwszDllList,DWORD *pcchDllList);
  __attribute__((dllimport)) WINBOOL CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCWSTR pwszDll,DWORD dwFlags,void **ppvFuncAddr,HCRYPTOIDFUNCADDR *phFuncAddr);
  __attribute__((dllimport)) WINBOOL CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptRegisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszDll,LPCSTR pszOverrideFuncName);
  __attribute__((dllimport)) WINBOOL CryptUnregisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID);
  __attribute__((dllimport)) WINBOOL CryptRegisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,DWORD dwIndex,LPCWSTR pwszDll);

#define CRYPT_REGISTER_FIRST_INDEX
#define CRYPT_REGISTER_LAST_INDEX

  __attribute__((dllimport)) WINBOOL CryptUnregisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCWSTR pwszDll);
  __attribute__((dllimport)) WINBOOL CryptSetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD dwValueType,const BYTE *pbValueData,DWORD cbValueData);
  __attribute__((dllimport)) WINBOOL CryptGetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD *pdwValueType,BYTE *pbValueData,DWORD *pcbValueData);

  typedef WINBOOL ( *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD cValue,const DWORD rgdwValueType[],LPCWSTR const rgpwszValueName[],const BYTE *const rgpbValueData[],const DWORD rgcbValueData[],void *pvArg);

  __attribute__((dllimport)) WINBOOL CryptEnumOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD dwFlags,void *pvArg,PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);

#define CRYPT_MATCH_ANY_ENCODING_TYPE

  typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    __extension__ union {
      DWORD dwValue;
      ALG_ID Algid;
      DWORD dwLength;
    };
    CRYPT_DATA_BLOB ExtraInfo;
  } CRYPT_OID_INFO,*PCRYPT_OID_INFO;
  typedef const CRYPT_OID_INFO CCRYPT_OID_INFO,*PCCRYPT_OID_INFO;

#define CRYPT_HASH_ALG_OID_GROUP_ID
#define CRYPT_ENCRYPT_ALG_OID_GROUP_ID
#define CRYPT_PUBKEY_ALG_OID_GROUP_ID
#define CRYPT_SIGN_ALG_OID_GROUP_ID
#define CRYPT_RDN_ATTR_OID_GROUP_ID
#define CRYPT_EXT_OR_ATTR_OID_GROUP_ID
#define CRYPT_ENHKEY_USAGE_OID_GROUP_ID
#define CRYPT_POLICY_OID_GROUP_ID
#define CRYPT_TEMPLATE_OID_GROUP_ID
#define CRYPT_LAST_OID_GROUP_ID
#define CRYPT_FIRST_ALG_OID_GROUP_ID
#define CRYPT_LAST_ALG_OID_GROUP_ID

#define CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG
#define CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG
#define CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG

  __attribute__((dllimport)) PCCRYPT_OID_INFO CryptFindOIDInfo(DWORD dwKeyType,void *pvKey,DWORD dwGroupId);

#define CRYPT_OID_INFO_OID_KEY
#define CRYPT_OID_INFO_NAME_KEY
#define CRYPT_OID_INFO_ALGID_KEY
#define CRYPT_OID_INFO_SIGN_KEY

  __attribute__((dllimport)) WINBOOL CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo,DWORD dwFlags);

#define CRYPT_INSTALL_OID_INFO_BEFORE_FLAG

  __attribute__((dllimport)) WINBOOL CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo);

  typedef WINBOOL ( *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo,void *pvArg);

  __attribute__((dllimport)) WINBOOL CryptEnumOIDInfo(DWORD dwGroupId,DWORD dwFlags,void *pvArg,PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
  __attribute__((dllimport)) LPCWSTR CryptFindLocalizedName(LPCWSTR pwszCryptName);

#define CRYPT_LOCALIZED_NAME_ENCODING_TYPE
#define CRYPT_LOCALIZED_NAME_OID

  typedef void *HCRYPTMSG;

#define szOID_PKCS_7_DATA
#define szOID_PKCS_7_SIGNED
#define szOID_PKCS_7_ENVELOPED
#define szOID_PKCS_7_SIGNEDANDENVELOPED
#define szOID_PKCS_7_DIGESTED
#define szOID_PKCS_7_ENCRYPTED

#define szOID_PKCS_9_CONTENT_TYPE
#define szOID_PKCS_9_MESSAGE_DIGEST

#define CMSG_DATA
#define CMSG_SIGNED
#define CMSG_ENVELOPED
#define CMSG_SIGNED_AND_ENVELOPED
#define CMSG_HASHED
#define CMSG_ENCRYPTED

#define CMSG_ALL_FLAGS
#define CMSG_DATA_FLAG
#define CMSG_SIGNED_FLAG
#define CMSG_ENVELOPED_FLAG
#define CMSG_SIGNED_AND_ENVELOPED_FLAG
#define CMSG_HASHED_FLAG
#define CMSG_ENCRYPTED_FLAG

  typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
  } CERT_ISSUER_SERIAL_NUMBER,*PCERT_ISSUER_SERIAL_NUMBER;

  typedef struct _CERT_ID {
    DWORD dwIdChoice;
    __extension__ union {
      CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
      CRYPT_HASH_BLOB KeyId;
      CRYPT_HASH_BLOB HashId;
    };
  } CERT_ID,*PCERT_ID;

#define CERT_ID_ISSUER_SERIAL_NUMBER
#define CERT_ID_KEY_IDENTIFIER
#define CERT_ID_SHA1_HASH

  typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD cbSize;
    PCERT_INFO pCertInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;





  } CMSG_SIGNER_ENCODE_INFO,*PCMSG_SIGNER_ENCODE_INFO;

  typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;




  } CMSG_SIGNED_ENCODE_INFO,*PCMSG_SIGNED_ENCODE_INFO;

  typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,*PCMSG_RECIPIENT_ENCODE_INFO;

  typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCERT_INFO *rgpRecipients;
# 2185 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 3
  } CMSG_ENVELOPED_ENCODE_INFO,*PCMSG_ENVELOPED_ENCODE_INFO;

  typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
  } CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

  typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

  typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    DWORD dwKeyChoice;
    __extension__ union {
      PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
      PCERT_ID pSenderId;
    };
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
  } CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;

#define CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE
#define CMSG_KEY_AGREE_STATIC_KEY_CHOICE

  typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    __extension__ union {

      HCRYPTKEY hKeyEncryptionKey;
      void *pvKeyEncryptionKey;
    };
    CRYPT_DATA_BLOB KeyId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,*PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

#define CMSG_MAIL_LIST_HANDLE_KEY_CHOICE

  struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD dwRecipientChoice;
    __extension__ union {
      PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
      PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
      PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    };
  };

#define CMSG_KEY_TRANS_RECIPIENT
#define CMSG_KEY_AGREE_RECIPIENT
#define CMSG_MAIL_LIST_RECIPIENT

  typedef struct _CMSG_RC2_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
  } CMSG_RC2_AUX_INFO,*PCMSG_RC2_AUX_INFO;

  typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD cbSize;
    DWORD dwFlags;
  } CMSG_SP3_COMPATIBLE_AUX_INFO,*PCMSG_SP3_COMPATIBLE_AUX_INFO;

#define CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG

  typedef struct _CMSG_RC4_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
  } CMSG_RC4_AUX_INFO,*PCMSG_RC4_AUX_INFO;

#define CMSG_RC4_NO_SALT_FLAG

  typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
  } CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO,*PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

  typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
  } CMSG_HASHED_ENCODE_INFO,*PCMSG_HASHED_ENCODE_INFO;

  typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
  } CMSG_ENCRYPTED_ENCODE_INFO,*PCMSG_ENCRYPTED_ENCODE_INFO;

  typedef WINBOOL ( *PFN_CMSG_STREAM_OUTPUT)(const void *pvArg,BYTE *pbData,DWORD cbData,WINBOOL fFinal);

#define CMSG_INDEFINITE_LENGTH

  typedef struct _CMSG_STREAM_INFO {
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
  } CMSG_STREAM_INFO,*PCMSG_STREAM_INFO;

#define CMSG_BARE_CONTENT_FLAG
#define CMSG_LENGTH_ONLY_FLAG
#define CMSG_DETACHED_FLAG
#define CMSG_AUTHENTICATED_ATTRIBUTES_FLAG
#define CMSG_CONTENTS_OCTETS_FLAG
#define CMSG_MAX_LENGTH_FLAG

#define CMSG_CMS_ENCAPSULATED_CONTENT_FLAG

#define CMSG_CRYPT_RELEASE_CONTEXT_FLAG

  __attribute__((dllimport)) HCRYPTMSG CryptMsgOpenToEncode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const *pvMsgEncodeInfo,LPSTR pszInnerContentObjID,PCMSG_STREAM_INFO pStreamInfo);
  __attribute__((dllimport)) DWORD CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const *pvMsgEncodeInfo,LPSTR pszInnerContentObjID,DWORD cbData);
  __attribute__((dllimport)) HCRYPTMSG CryptMsgOpenToDecode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,HCRYPTPROV hCryptProv,PCERT_INFO pRecipientInfo,PCMSG_STREAM_INFO pStreamInfo);
  __attribute__((dllimport)) HCRYPTMSG CryptMsgDuplicate(HCRYPTMSG hCryptMsg);
  __attribute__((dllimport)) WINBOOL CryptMsgClose(HCRYPTMSG hCryptMsg);
  __attribute__((dllimport)) WINBOOL CryptMsgUpdate(HCRYPTMSG hCryptMsg,const BYTE *pbData,DWORD cbData,WINBOOL fFinal);
  __attribute__((dllimport)) WINBOOL CryptMsgGetParam(HCRYPTMSG hCryptMsg,DWORD dwParamType,DWORD dwIndex,void *pvData,DWORD *pcbData);

#define CMSG_TYPE_PARAM
#define CMSG_CONTENT_PARAM
#define CMSG_BARE_CONTENT_PARAM
#define CMSG_INNER_CONTENT_TYPE_PARAM
#define CMSG_SIGNER_COUNT_PARAM
#define CMSG_SIGNER_INFO_PARAM
#define CMSG_SIGNER_CERT_INFO_PARAM
#define CMSG_SIGNER_HASH_ALGORITHM_PARAM
#define CMSG_SIGNER_AUTH_ATTR_PARAM
#define CMSG_SIGNER_UNAUTH_ATTR_PARAM
#define CMSG_CERT_COUNT_PARAM
#define CMSG_CERT_PARAM
#define CMSG_CRL_COUNT_PARAM
#define CMSG_CRL_PARAM
#define CMSG_ENVELOPE_ALGORITHM_PARAM
#define CMSG_RECIPIENT_COUNT_PARAM
#define CMSG_RECIPIENT_INDEX_PARAM
#define CMSG_RECIPIENT_INFO_PARAM
#define CMSG_HASH_ALGORITHM_PARAM
#define CMSG_HASH_DATA_PARAM
#define CMSG_COMPUTED_HASH_PARAM
#define CMSG_ENCRYPT_PARAM
#define CMSG_ENCRYPTED_DIGEST
#define CMSG_ENCODED_SIGNER
#define CMSG_ENCODED_MESSAGE
#define CMSG_VERSION_PARAM
#define CMSG_ATTR_CERT_COUNT_PARAM
#define CMSG_ATTR_CERT_PARAM
#define CMSG_CMS_RECIPIENT_COUNT_PARAM
#define CMSG_CMS_RECIPIENT_INDEX_PARAM
#define CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM
#define CMSG_CMS_RECIPIENT_INFO_PARAM
#define CMSG_UNPROTECTED_ATTR_PARAM
#define CMSG_SIGNER_CERT_ID_PARAM
#define CMSG_CMS_SIGNER_INFO_PARAM

  typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
  } CMSG_SIGNER_INFO,*PCMSG_SIGNER_INFO;

  typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
  } CMSG_CMS_SIGNER_INFO,*PCMSG_CMS_SIGNER_INFO;

  typedef CRYPT_ATTRIBUTES CMSG_ATTR;
  typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;

#define CMSG_SIGNED_DATA_V1
#define CMSG_SIGNED_DATA_V3
#define CMSG_SIGNED_DATA_PKCS_1_5_VERSION
#define CMSG_SIGNED_DATA_CMS_VERSION

#define CMSG_SIGNER_INFO_V1
#define CMSG_SIGNER_INFO_V3
#define CMSG_SIGNER_INFO_PKCS_1_5_VERSION
#define CMSG_SIGNER_INFO_CMS_VERSION

#define CMSG_HASHED_DATA_V0
#define CMSG_HASHED_DATA_V2
#define CMSG_HASHED_DATA_PKCS_1_5_VERSION
#define CMSG_HASHED_DATA_CMS_VERSION

#define CMSG_ENVELOPED_DATA_V0
#define CMSG_ENVELOPED_DATA_V2
#define CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION
#define CMSG_ENVELOPED_DATA_CMS_VERSION

  typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;
    CERT_ID RecipientId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
  } CMSG_KEY_TRANS_RECIPIENT_INFO,*PCMSG_KEY_TRANS_RECIPIENT_INFO;

  typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
    CERT_ID RecipientId;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

  typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    __extension__ union {
      CERT_ID OriginatorCertId;
      CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    };
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
  } CMSG_KEY_AGREE_RECIPIENT_INFO,*PCMSG_KEY_AGREE_RECIPIENT_INFO;

#define CMSG_KEY_AGREE_ORIGINATOR_CERT
#define CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY

  typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_MAIL_LIST_RECIPIENT_INFO,*PCMSG_MAIL_LIST_RECIPIENT_INFO;

  typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    __extension__ union {
      PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
      PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
      PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    };
  } CMSG_CMS_RECIPIENT_INFO,*PCMSG_CMS_RECIPIENT_INFO;

#define CMSG_ENVELOPED_RECIPIENT_V0
#define CMSG_ENVELOPED_RECIPIENT_V2
#define CMSG_ENVELOPED_RECIPIENT_V3
#define CMSG_ENVELOPED_RECIPIENT_V4
#define CMSG_KEY_TRANS_PKCS_1_5_VERSION
#define CMSG_KEY_TRANS_CMS_VERSION
#define CMSG_KEY_AGREE_VERSION
#define CMSG_MAIL_LIST_VERSION

  __attribute__((dllimport)) WINBOOL CryptMsgControl(HCRYPTMSG hCryptMsg,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);

#define CMSG_CTRL_VERIFY_SIGNATURE
#define CMSG_CTRL_DECRYPT
#define CMSG_CTRL_VERIFY_HASH
#define CMSG_CTRL_ADD_SIGNER
#define CMSG_CTRL_DEL_SIGNER
#define CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR
#define CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR
#define CMSG_CTRL_ADD_CERT
#define CMSG_CTRL_DEL_CERT
#define CMSG_CTRL_ADD_CRL
#define CMSG_CTRL_DEL_CRL
#define CMSG_CTRL_ADD_ATTR_CERT
#define CMSG_CTRL_DEL_ATTR_CERT
#define CMSG_CTRL_KEY_TRANS_DECRYPT
#define CMSG_CTRL_KEY_AGREE_DECRYPT
#define CMSG_CTRL_MAIL_LIST_DECRYPT
#define CMSG_CTRL_VERIFY_SIGNATURE_EX
#define CMSG_CTRL_ADD_CMS_SIGNER_INFO

  typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
  } CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA,*PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;

#define CMSG_VERIFY_SIGNER_PUBKEY
#define CMSG_VERIFY_SIGNER_CERT
#define CMSG_VERIFY_SIGNER_CHAIN
#define CMSG_VERIFY_SIGNER_NULL

  typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    DWORD dwRecipientIndex;
  } CMSG_CTRL_DECRYPT_PARA,*PCMSG_CTRL_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
  } CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,*PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
  } CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,*PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    __extension__ union {
      HCRYPTKEY hKeyEncryptionKey;
      void *pvKeyEncryptionKey;
    };
  } CMSG_CTRL_MAIL_LIST_DECRYPT_PARA,*PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
  } CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;

  typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
  } CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;

  WINBOOL CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,PCERT_INFO pciCountersigner);
  WINBOOL CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,DWORD dwSignerType,void *pvSigner,DWORD dwFlags,void *pvReserved);
  WINBOOL CryptMsgCountersign(HCRYPTMSG hCryptMsg,DWORD dwIndex,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
  WINBOOL CryptMsgCountersignEncoded(DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners,PBYTE pbCountersignature,PDWORD pcbCountersignature);

  typedef void *( *PFN_CMSG_ALLOC)(size_t cb);
  typedef void ( *PFN_CMSG_FREE)(void *pv);

#define CMSG_OID_GEN_ENCRYPT_KEY_FUNC
  typedef WINBOOL ( *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PVOID pvEncryptAuxInfo,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PFN_CMSG_ALLOC pfnAlloc,HCRYPTKEY *phEncryptKey,PBYTE *ppbEncryptParameters,PDWORD pcbEncryptParameters);

#define CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC
  typedef WINBOOL ( *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv,HCRYPTKEY hEncryptKey,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PBYTE pbData,PDWORD pcbData);

#define CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC
  typedef WINBOOL ( *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv,DWORD dwKeySpec,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,PBYTE pbEncodedKey,DWORD cbEncodedKey,HCRYPTKEY *phEncryptKey);

#define CMSG_DEFAULT_INSTALLABLE_FUNC_OID

  typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    HCRYPTKEY hContentEncryptKey;
    DWORD dwFlags;
  } CMSG_CONTENT_ENCRYPT_INFO,*PCMSG_CONTENT_ENCRYPT_INFO;

#define CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG

#define CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG
#define CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG

#define CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC
  typedef WINBOOL ( *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,DWORD dwFlags,void *pvReserved);

  typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
  } CMSG_KEY_TRANS_ENCRYPT_INFO,*PCMSG_KEY_TRANS_ENCRYPT_INFO;

#define CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG

#define CMSG_OID_EXPORT_KEY_TRANS_FUNC
  typedef WINBOOL ( *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,DWORD dwFlags,void *pvReserved);

  typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
  } CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,*PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

  typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    __extension__ union {
      CERT_ID OriginatorCertId;
      CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    };
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
  } CMSG_KEY_AGREE_ENCRYPT_INFO,*PCMSG_KEY_AGREE_ENCRYPT_INFO;

#define CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG
#define CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG
#define CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG
#define CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG
#define CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG

#define CMSG_OID_EXPORT_KEY_AGREE_FUNC

  typedef WINBOOL ( *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,DWORD dwFlags,void *pvReserved);

  typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
  } CMSG_MAIL_LIST_ENCRYPT_INFO,*PCMSG_MAIL_LIST_ENCRYPT_INFO;

#define CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG

#define CMSG_OID_EXPORT_MAIL_LIST_FUNC
  typedef WINBOOL ( *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,DWORD dwFlags,void *pvReserved);

#define CMSG_OID_IMPORT_KEY_TRANS_FUNC
  typedef WINBOOL ( *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);

#define CMSG_OID_IMPORT_KEY_AGREE_FUNC
  typedef WINBOOL ( *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);

#define CMSG_OID_IMPORT_MAIL_LIST_FUNC
  typedef WINBOOL ( *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);

  typedef void *HCERTSTORE;

  typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
  } CERT_CONTEXT,*PCERT_CONTEXT;

  typedef const CERT_CONTEXT *PCCERT_CONTEXT;

  typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
  } CRL_CONTEXT,*PCRL_CONTEXT;

  typedef const CRL_CONTEXT *PCCRL_CONTEXT;

  typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
  } CTL_CONTEXT,*PCTL_CONTEXT;

  typedef const CTL_CONTEXT *PCCTL_CONTEXT;

#define CERT_KEY_PROV_HANDLE_PROP_ID
#define CERT_KEY_PROV_INFO_PROP_ID
#define CERT_SHA1_HASH_PROP_ID
#define CERT_MD5_HASH_PROP_ID
#define CERT_HASH_PROP_ID
#define CERT_KEY_CONTEXT_PROP_ID
#define CERT_KEY_SPEC_PROP_ID
#define CERT_IE30_RESERVED_PROP_ID
#define CERT_PUBKEY_HASH_RESERVED_PROP_ID
#define CERT_ENHKEY_USAGE_PROP_ID
#define CERT_CTL_USAGE_PROP_ID
#define CERT_NEXT_UPDATE_LOCATION_PROP_ID
#define CERT_FRIENDLY_NAME_PROP_ID
#define CERT_PVK_FILE_PROP_ID
#define CERT_DESCRIPTION_PROP_ID
#define CERT_ACCESS_STATE_PROP_ID
#define CERT_SIGNATURE_HASH_PROP_ID
#define CERT_SMART_CARD_DATA_PROP_ID
#define CERT_EFS_PROP_ID
#define CERT_FORTEZZA_DATA_PROP_ID
#define CERT_ARCHIVED_PROP_ID
#define CERT_KEY_IDENTIFIER_PROP_ID
#define CERT_AUTO_ENROLL_PROP_ID
#define CERT_PUBKEY_ALG_PARA_PROP_ID
#define CERT_CROSS_CERT_DIST_POINTS_PROP_ID
#define CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID
#define CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID
#define CERT_ENROLLMENT_PROP_ID
#define CERT_DATE_STAMP_PROP_ID
#define CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID
#define CERT_SUBJECT_NAME_MD5_HASH_PROP_ID
#define CERT_EXTENDED_ERROR_INFO_PROP_ID
#define CERT_RENEWAL_PROP_ID
#define CERT_ARCHIVED_KEY_HASH_PROP_ID
#define CERT_AUTO_ENROLL_RETRY_PROP_ID
#define CERT_AIA_URL_RETRIEVED_PROP_ID
#define CERT_REQUEST_ORIGINATOR_PROP_ID
#define CERT_FIRST_RESERVED_PROP_ID
#define CERT_LAST_RESERVED_PROP_ID
#define CERT_FIRST_USER_PROP_ID
#define CERT_LAST_USER_PROP_ID

#define IS_CERT_HASH_PROP_ID
#define IS_PUBKEY_HASH_PROP_ID
#define IS_CHAIN_HASH_PROP_ID

#define szOID_CERT_PROP_ID_PREFIX
#define szOID_CERT_KEY_IDENTIFIER_PROP_ID
#define szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID
#define szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID

#define CERT_ACCESS_STATE_WRITE_PERSIST_FLAG

#define CERT_ACCESS_STATE_SYSTEM_STORE_FLAG

#define CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG

  typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
  } CRYPT_KEY_PROV_PARAM,*PCRYPT_KEY_PROV_PARAM;

  typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
  } CRYPT_KEY_PROV_INFO,*PCRYPT_KEY_PROV_INFO;

#define CERT_SET_KEY_PROV_HANDLE_PROP_ID
#define CERT_SET_KEY_CONTEXT_PROP_ID

  typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
  } CERT_KEY_CONTEXT,*PCERT_KEY_CONTEXT;

#define CERT_STORE_PROV_MSG
#define CERT_STORE_PROV_MEMORY
#define CERT_STORE_PROV_FILE
#define CERT_STORE_PROV_REG

#define CERT_STORE_PROV_PKCS7
#define CERT_STORE_PROV_SERIALIZED
#define CERT_STORE_PROV_FILENAME_A
#define CERT_STORE_PROV_FILENAME_W
#define CERT_STORE_PROV_FILENAME
#define CERT_STORE_PROV_SYSTEM_A
#define CERT_STORE_PROV_SYSTEM_W
#define CERT_STORE_PROV_SYSTEM

#define CERT_STORE_PROV_COLLECTION
#define CERT_STORE_PROV_SYSTEM_REGISTRY_A
#define CERT_STORE_PROV_SYSTEM_REGISTRY_W
#define CERT_STORE_PROV_SYSTEM_REGISTRY
#define CERT_STORE_PROV_PHYSICAL_W
#define CERT_STORE_PROV_PHYSICAL
#define CERT_STORE_PROV_SMART_CARD_W
#define CERT_STORE_PROV_SMART_CARD
#define CERT_STORE_PROV_LDAP_W
#define CERT_STORE_PROV_LDAP
#define sz_CERT_STORE_PROV_MEMORY
#define sz_CERT_STORE_PROV_FILENAME_W
#define sz_CERT_STORE_PROV_FILENAME
#define sz_CERT_STORE_PROV_SYSTEM_W
#define sz_CERT_STORE_PROV_SYSTEM
#define sz_CERT_STORE_PROV_PKCS7
#define sz_CERT_STORE_PROV_SERIALIZED
#define sz_CERT_STORE_PROV_COLLECTION
#define sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W
#define sz_CERT_STORE_PROV_SYSTEM_REGISTRY
#define sz_CERT_STORE_PROV_PHYSICAL_W
#define sz_CERT_STORE_PROV_PHYSICAL
#define sz_CERT_STORE_PROV_SMART_CARD_W
#define sz_CERT_STORE_PROV_SMART_CARD
#define sz_CERT_STORE_PROV_LDAP_W
#define sz_CERT_STORE_PROV_LDAP
#define CERT_STORE_SIGNATURE_FLAG
#define CERT_STORE_TIME_VALIDITY_FLAG
#define CERT_STORE_REVOCATION_FLAG
#define CERT_STORE_NO_CRL_FLAG
#define CERT_STORE_NO_ISSUER_FLAG
#define CERT_STORE_BASE_CRL_FLAG
#define CERT_STORE_DELTA_CRL_FLAG
#define CERT_STORE_NO_CRYPT_RELEASE_FLAG
#define CERT_STORE_SET_LOCALIZED_NAME_FLAG
#define CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG
#define CERT_STORE_DELETE_FLAG
#define CERT_STORE_UNSAFE_PHYSICAL_FLAG
#define CERT_STORE_SHARE_STORE_FLAG
#define CERT_STORE_SHARE_CONTEXT_FLAG
#define CERT_STORE_MANIFOLD_FLAG
#define CERT_STORE_ENUM_ARCHIVED_FLAG
#define CERT_STORE_UPDATE_KEYID_FLAG
#define CERT_STORE_BACKUP_RESTORE_FLAG
#define CERT_STORE_READONLY_FLAG
#define CERT_STORE_OPEN_EXISTING_FLAG
#define CERT_STORE_CREATE_NEW_FLAG
#define CERT_STORE_MAXIMUM_ALLOWED_FLAG

#define CERT_SYSTEM_STORE_MASK
#define CERT_SYSTEM_STORE_RELOCATE_FLAG

  typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    __extension__ union {
      HKEY hKeyBase;
      void *pvBase;
    };
    __extension__ union {
      void *pvSystemStore;
      LPCSTR pszSystemStore;
      LPCWSTR pwszSystemStore;
    };
  } CERT_SYSTEM_STORE_RELOCATE_PARA,*PCERT_SYSTEM_STORE_RELOCATE_PARA;

#define CERT_SYSTEM_STORE_UNPROTECTED_FLAG
#define CERT_SYSTEM_STORE_LOCATION_MASK
#define CERT_SYSTEM_STORE_LOCATION_SHIFT
#define CERT_SYSTEM_STORE_CURRENT_USER_ID
#define CERT_SYSTEM_STORE_LOCAL_MACHINE_ID
#define CERT_SYSTEM_STORE_CURRENT_SERVICE_ID
#define CERT_SYSTEM_STORE_SERVICES_ID
#define CERT_SYSTEM_STORE_USERS_ID
#define CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID
#define CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID
#define CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID
#define CERT_SYSTEM_STORE_CURRENT_USER
#define CERT_SYSTEM_STORE_LOCAL_MACHINE
#define CERT_SYSTEM_STORE_CURRENT_SERVICE
#define CERT_SYSTEM_STORE_SERVICES
#define CERT_SYSTEM_STORE_USERS
#define CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY
#define CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY
#define CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE

#define CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH

#define CERT_EFSBLOB_REGPATH
#define CERT_EFSBLOB_VALUE_NAME

#define CERT_PROT_ROOT_FLAGS_REGPATH
#define CERT_PROT_ROOT_FLAGS_VALUE_NAME
#define CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG
#define CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG
#define CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG
#define CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG
#define CERT_PROT_ROOT_ONLY_LM_GPT_FLAG
#define CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG
#define CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG

#define CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH
#define CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH
#define CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH
#define CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME
#define CERT_TRUST_PUB_ALLOW_TRUST_MASK
#define CERT_TRUST_PUB_ALLOW_END_USER_TRUST
#define CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST
#define CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST
#define CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG
#define CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG

#define CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH
#define CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME

#define CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH
#define CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME
#define CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME
#define CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME
#define CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG
#define CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG
#define CERT_AUTH_ROOT_CTL_FILENAME
#define CERT_AUTH_ROOT_CTL_FILENAME_A
#define CERT_AUTH_ROOT_CAB_FILENAME
#define CERT_AUTH_ROOT_SEQ_FILENAME
#define CERT_AUTH_ROOT_CERT_EXT

#define CERT_REGISTRY_STORE_REMOTE_FLAG
#define CERT_REGISTRY_STORE_SERIALIZED_FLAG
#define CERT_REGISTRY_STORE_CLIENT_GPT_FLAG
#define CERT_REGISTRY_STORE_LM_GPT_FLAG

  typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
  } CERT_REGISTRY_STORE_CLIENT_GPT_PARA,*PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;

#define CERT_REGISTRY_STORE_ROAMING_FLAG

  typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
  } CERT_REGISTRY_STORE_ROAMING_PARA,*PCERT_REGISTRY_STORE_ROAMING_PARA;

#define CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG
#define CERT_IE_DIRTY_FLAGS_REGPATH
#define CERT_FILE_STORE_COMMIT_ENABLE_FLAG
#define CERT_LDAP_STORE_SIGN_FLAG
#define CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG
#define CERT_LDAP_STORE_OPENED_FLAG

  typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void *pvLdapSessionHandle;
    LPCWSTR pwszLdapUrl;
  } CERT_LDAP_STORE_OPENED_PARA,*PCERT_LDAP_STORE_OPENED_PARA;

#define CERT_LDAP_STORE_UNBIND_FLAG

  __attribute__((dllimport)) HCERTSTORE CertOpenStore(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const void *pvPara);

  typedef void *HCERTSTOREPROV;

#define CRYPT_OID_OPEN_STORE_PROV_FUNC

  typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
  } CERT_STORE_PROV_INFO,*PCERT_STORE_PROV_INFO;

  typedef WINBOOL ( *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const void *pvPara,HCERTSTORE hCertStore,PCERT_STORE_PROV_INFO pStoreProvInfo);

#define CERT_STORE_PROV_EXTERNAL_FLAG
#define CERT_STORE_PROV_DELETED_FLAG
#define CERT_STORE_PROV_NO_PERSIST_FLAG
#define CERT_STORE_PROV_SYSTEM_STORE_FLAG
#define CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG
#define CERT_STORE_PROV_CLOSE_FUNC
#define CERT_STORE_PROV_READ_CERT_FUNC
#define CERT_STORE_PROV_WRITE_CERT_FUNC
#define CERT_STORE_PROV_DELETE_CERT_FUNC
#define CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC
#define CERT_STORE_PROV_READ_CRL_FUNC
#define CERT_STORE_PROV_WRITE_CRL_FUNC
#define CERT_STORE_PROV_DELETE_CRL_FUNC
#define CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC
#define CERT_STORE_PROV_READ_CTL_FUNC
#define CERT_STORE_PROV_WRITE_CTL_FUNC
#define CERT_STORE_PROV_DELETE_CTL_FUNC
#define CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC
#define CERT_STORE_PROV_CONTROL_FUNC
#define CERT_STORE_PROV_FIND_CERT_FUNC
#define CERT_STORE_PROV_FREE_FIND_CERT_FUNC
#define CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC
#define CERT_STORE_PROV_FIND_CRL_FUNC
#define CERT_STORE_PROV_FREE_FIND_CRL_FUNC
#define CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC
#define CERT_STORE_PROV_FIND_CTL_FUNC
#define CERT_STORE_PROV_FREE_FIND_CTL_FUNC
#define CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC

  typedef void ( *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pStoreCertContext,DWORD dwFlags,PCCERT_CONTEXT *ppProvCertContext);

#define CERT_STORE_PROV_WRITE_ADD_FLAG

  typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pStoreCrlContext,DWORD dwFlags,PCCRL_CONTEXT *ppProvCrlContext);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pStoreCtlContext,DWORD dwFlags,PCCTL_CONTEXT *ppProvCtlContext);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);

  typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
  } CERT_STORE_PROV_FIND_INFO,*PCERT_STORE_PROV_FIND_INFO;

  typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,*PCCERT_STORE_PROV_FIND_INFO;
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCERT_CONTEXT pPrevCertContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCERT_CONTEXT *ppProvCertContext);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,void *pvStoreProvFindInfo,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCRL_CONTEXT pPrevCrlContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCRL_CONTEXT *ppProvCrlContext);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,void *pvStoreProvFindInfo,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCTL_CONTEXT pPrevCtlContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCTL_CONTEXT *ppProvCtlContext);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,void *pvStoreProvFindInfo,DWORD dwFlags);
  typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);

  __attribute__((dllimport)) HCERTSTORE CertDuplicateStore(HCERTSTORE hCertStore);

#define CERT_STORE_SAVE_AS_STORE
#define CERT_STORE_SAVE_AS_PKCS7
#define CERT_STORE_SAVE_TO_FILE
#define CERT_STORE_SAVE_TO_MEMORY
#define CERT_STORE_SAVE_TO_FILENAME_A
#define CERT_STORE_SAVE_TO_FILENAME_W
#define CERT_STORE_SAVE_TO_FILENAME

  __attribute__((dllimport)) WINBOOL CertSaveStore(HCERTSTORE hCertStore,DWORD dwEncodingType,DWORD dwSaveAs,DWORD dwSaveTo,void *pvSaveToPara,DWORD dwFlags);

#define CERT_CLOSE_STORE_FORCE_FLAG
#define CERT_CLOSE_STORE_CHECK_FLAG

  __attribute__((dllimport)) WINBOOL CertCloseStore(HCERTSTORE hCertStore,DWORD dwFlags);
  __attribute__((dllimport)) PCCERT_CONTEXT CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,PCERT_INFO pCertId);
  __attribute__((dllimport)) PCCERT_CONTEXT CertEnumCertificatesInStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pPrevCertContext);
  __attribute__((dllimport)) PCCERT_CONTEXT CertFindCertificateInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCERT_CONTEXT pPrevCertContext);

#define CERT_COMPARE_MASK
#define CERT_COMPARE_SHIFT
#define CERT_COMPARE_ANY
#define CERT_COMPARE_SHA1_HASH
#define CERT_COMPARE_NAME
#define CERT_COMPARE_ATTR
#define CERT_COMPARE_MD5_HASH
#define CERT_COMPARE_PROPERTY
#define CERT_COMPARE_PUBLIC_KEY
#define CERT_COMPARE_HASH
#define CERT_COMPARE_NAME_STR_A
#define CERT_COMPARE_NAME_STR_W
#define CERT_COMPARE_KEY_SPEC
#define CERT_COMPARE_ENHKEY_USAGE
#define CERT_COMPARE_CTL_USAGE
#define CERT_COMPARE_SUBJECT_CERT
#define CERT_COMPARE_ISSUER_OF
#define CERT_COMPARE_EXISTING
#define CERT_COMPARE_SIGNATURE_HASH
#define CERT_COMPARE_KEY_IDENTIFIER
#define CERT_COMPARE_CERT_ID
#define CERT_COMPARE_CROSS_CERT_DIST_POINTS
#define CERT_COMPARE_PUBKEY_MD5_HASH

#define CERT_FIND_ANY
#define CERT_FIND_SHA1_HASH
#define CERT_FIND_MD5_HASH
#define CERT_FIND_SIGNATURE_HASH
#define CERT_FIND_KEY_IDENTIFIER
#define CERT_FIND_HASH
#define CERT_FIND_PROPERTY
#define CERT_FIND_PUBLIC_KEY
#define CERT_FIND_SUBJECT_NAME
#define CERT_FIND_SUBJECT_ATTR
#define CERT_FIND_ISSUER_NAME
#define CERT_FIND_ISSUER_ATTR
#define CERT_FIND_SUBJECT_STR_A
#define CERT_FIND_SUBJECT_STR_W
#define CERT_FIND_SUBJECT_STR
#define CERT_FIND_ISSUER_STR_A
#define CERT_FIND_ISSUER_STR_W
#define CERT_FIND_ISSUER_STR
#define CERT_FIND_KEY_SPEC
#define CERT_FIND_ENHKEY_USAGE
#define CERT_FIND_CTL_USAGE
#define CERT_FIND_SUBJECT_CERT
#define CERT_FIND_ISSUER_OF
#define CERT_FIND_EXISTING
#define CERT_FIND_CERT_ID
#define CERT_FIND_CROSS_CERT_DIST_POINTS
#define CERT_FIND_PUBKEY_MD5_HASH
#define CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG
#define CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG
#define CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG
#define CERT_FIND_NO_ENHKEY_USAGE_FLAG
#define CERT_FIND_OR_ENHKEY_USAGE_FLAG
#define CERT_FIND_VALID_ENHKEY_USAGE_FLAG
#define CERT_FIND_OPTIONAL_CTL_USAGE_FLAG
#define CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG
#define CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG
#define CERT_FIND_NO_CTL_USAGE_FLAG
#define CERT_FIND_OR_CTL_USAGE_FLAG
#define CERT_FIND_VALID_CTL_USAGE_FLAG

  __attribute__((dllimport)) PCCERT_CONTEXT CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pSubjectContext,PCCERT_CONTEXT pPrevIssuerContext,DWORD *pdwFlags);
  __attribute__((dllimport)) WINBOOL CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject,PCCERT_CONTEXT pIssuer,DWORD *pdwFlags);
  __attribute__((dllimport)) PCCERT_CONTEXT CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext);
  __attribute__((dllimport)) PCCERT_CONTEXT CertCreateCertificateContext(DWORD dwCertEncodingType,const BYTE *pbCertEncoded,DWORD cbCertEncoded);
  __attribute__((dllimport)) WINBOOL CertFreeCertificateContext(PCCERT_CONTEXT pCertContext);
  __attribute__((dllimport)) WINBOOL CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);

#define CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG
#define CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG

  __attribute__((dllimport)) WINBOOL CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
  __attribute__((dllimport)) DWORD CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD dwPropId);
  __attribute__((dllimport)) WINBOOL CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD cOptAttr,PCRYPT_ATTRIBUTE rgOptAttr,DWORD dwFlags,void *pvReserved,PCTL_ENTRY pCtlEntry,DWORD *pcbCtlEntry);

#define CTL_ENTRY_FROM_PROP_CHAIN_FLAG

  __attribute__((dllimport)) WINBOOL CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT pCertContext,PCTL_ENTRY pCtlEntry,DWORD dwFlags);
  __attribute__((dllimport)) PCCRL_CONTEXT CertGetCRLFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pIssuerContext,PCCRL_CONTEXT pPrevCrlContext,DWORD *pdwFlags);
  __attribute__((dllimport)) PCCRL_CONTEXT CertEnumCRLsInStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pPrevCrlContext);
  __attribute__((dllimport)) PCCRL_CONTEXT CertFindCRLInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCRL_CONTEXT pPrevCrlContext);

#define CRL_FIND_ANY
#define CRL_FIND_ISSUED_BY
#define CRL_FIND_EXISTING
#define CRL_FIND_ISSUED_FOR
#define CRL_FIND_ISSUED_BY_AKI_FLAG
#define CRL_FIND_ISSUED_BY_SIGNATURE_FLAG
#define CRL_FIND_ISSUED_BY_DELTA_FLAG
#define CRL_FIND_ISSUED_BY_BASE_FLAG

  typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
  } CRL_FIND_ISSUED_FOR_PARA,*PCRL_FIND_ISSUED_FOR_PARA;

  __attribute__((dllimport)) PCCRL_CONTEXT CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext);
  __attribute__((dllimport)) PCCRL_CONTEXT CertCreateCRLContext(DWORD dwCertEncodingType,const BYTE *pbCrlEncoded,DWORD cbCrlEncoded);
  __attribute__((dllimport)) WINBOOL CertFreeCRLContext(PCCRL_CONTEXT pCrlContext);
  __attribute__((dllimport)) WINBOOL CertSetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  __attribute__((dllimport)) WINBOOL CertGetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
  __attribute__((dllimport)) DWORD CertEnumCRLContextProperties(PCCRL_CONTEXT pCrlContext,DWORD dwPropId);
  __attribute__((dllimport)) WINBOOL CertFindCertificateInCRL(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrlContext,DWORD dwFlags,void *pvReserved,PCRL_ENTRY *ppCrlEntry);
  __attribute__((dllimport)) WINBOOL CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrl,DWORD dwFlags,void *pvReserved);

#define CERT_STORE_ADD_NEW
#define CERT_STORE_ADD_USE_EXISTING
#define CERT_STORE_ADD_REPLACE_EXISTING
#define CERT_STORE_ADD_ALWAYS
#define CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES
#define CERT_STORE_ADD_NEWER
#define CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES

  __attribute__((dllimport)) WINBOOL CertAddEncodedCertificateToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE *pbCertEncoded,DWORD cbCertEncoded,DWORD dwAddDisposition,PCCERT_CONTEXT *ppCertContext);
  __attribute__((dllimport)) WINBOOL CertAddCertificateContextToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT *ppStoreContext);

#define CERT_STORE_CERTIFICATE_CONTEXT
#define CERT_STORE_CRL_CONTEXT
#define CERT_STORE_CTL_CONTEXT
#define CERT_STORE_ALL_CONTEXT_FLAG
#define CERT_STORE_CERTIFICATE_CONTEXT_FLAG
#define CERT_STORE_CRL_CONTEXT_FLAG
#define CERT_STORE_CTL_CONTEXT_FLAG

  __attribute__((dllimport)) WINBOOL CertAddSerializedElementToStore(HCERTSTORE hCertStore,const BYTE *pbElement,DWORD cbElement,DWORD dwAddDisposition,DWORD dwFlags,DWORD dwContextTypeFlags,DWORD *pdwContextType,const void **ppvContext);
  __attribute__((dllimport)) WINBOOL CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext);
  __attribute__((dllimport)) WINBOOL CertAddEncodedCRLToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE *pbCrlEncoded,DWORD cbCrlEncoded,DWORD dwAddDisposition,PCCRL_CONTEXT *ppCrlContext);
  __attribute__((dllimport)) WINBOOL CertAddCRLContextToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT *ppStoreContext);
  __attribute__((dllimport)) WINBOOL CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext);
  __attribute__((dllimport)) WINBOOL CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
  __attribute__((dllimport)) WINBOOL CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
  __attribute__((dllimport)) PCCTL_CONTEXT CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext);
  __attribute__((dllimport)) PCCTL_CONTEXT CertCreateCTLContext(DWORD dwMsgAndCertEncodingType,const BYTE *pbCtlEncoded,DWORD cbCtlEncoded);
  __attribute__((dllimport)) WINBOOL CertFreeCTLContext(PCCTL_CONTEXT pCtlContext);
  __attribute__((dllimport)) WINBOOL CertSetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  __attribute__((dllimport)) WINBOOL CertGetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
  __attribute__((dllimport)) DWORD CertEnumCTLContextProperties(PCCTL_CONTEXT pCtlContext,DWORD dwPropId);
  __attribute__((dllimport)) PCCTL_CONTEXT CertEnumCTLsInStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pPrevCtlContext);
  __attribute__((dllimport)) PCTL_ENTRY CertFindSubjectInCTL(DWORD dwEncodingType,DWORD dwSubjectType,void *pvSubject,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);

#define CTL_ANY_SUBJECT_TYPE
#define CTL_CERT_SUBJECT_TYPE

  typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
  } CTL_ANY_SUBJECT_INFO,*PCTL_ANY_SUBJECT_INFO;

  __attribute__((dllimport)) PCCTL_CONTEXT CertFindCTLInStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCTL_CONTEXT pPrevCtlContext);

#define CTL_FIND_ANY
#define CTL_FIND_SHA1_HASH
#define CTL_FIND_MD5_HASH
#define CTL_FIND_USAGE
#define CTL_FIND_SUBJECT
#define CTL_FIND_EXISTING

  typedef struct _CTL_FIND_USAGE_PARA {
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
  } CTL_FIND_USAGE_PARA,*PCTL_FIND_USAGE_PARA;

#define CTL_FIND_NO_LIST_ID_CBDATA
#define CTL_FIND_NO_SIGNER_PTR

#define CTL_FIND_SAME_USAGE_FLAG

  typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
  } CTL_FIND_SUBJECT_PARA,*PCTL_FIND_SUBJECT_PARA;

  __attribute__((dllimport)) WINBOOL CertAddEncodedCTLToStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,const BYTE *pbCtlEncoded,DWORD cbCtlEncoded,DWORD dwAddDisposition,PCCTL_CONTEXT *ppCtlContext);
  __attribute__((dllimport)) WINBOOL CertAddCTLContextToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT *ppStoreContext);
  __attribute__((dllimport)) WINBOOL CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
  __attribute__((dllimport)) WINBOOL CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext);
  __attribute__((dllimport)) WINBOOL CertAddCertificateLinkToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT *ppStoreContext);
  __attribute__((dllimport)) WINBOOL CertAddCRLLinkToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT *ppStoreContext);
  __attribute__((dllimport)) WINBOOL CertAddCTLLinkToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT *ppStoreContext);
  __attribute__((dllimport)) WINBOOL CertAddStoreToCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore,DWORD dwUpdateFlags,DWORD dwPriority);
  __attribute__((dllimport)) void CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore);
  __attribute__((dllimport)) WINBOOL CertControlStore(HCERTSTORE hCertStore,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);

#define CERT_STORE_CTRL_RESYNC
#define CERT_STORE_CTRL_NOTIFY_CHANGE
#define CERT_STORE_CTRL_COMMIT
#define CERT_STORE_CTRL_AUTO_RESYNC
#define CERT_STORE_CTRL_CANCEL_NOTIFY
#define CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG
#define CERT_STORE_CTRL_COMMIT_FORCE_FLAG
#define CERT_STORE_CTRL_COMMIT_CLEAR_FLAG
#define CERT_STORE_LOCALIZED_NAME_PROP_ID

  __attribute__((dllimport)) WINBOOL CertSetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,DWORD dwFlags,const void *pvData);
  __attribute__((dllimport)) WINBOOL CertGetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,void *pvData,DWORD *pcbData);

  typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;
  } CERT_CREATE_CONTEXT_PARA,*PCERT_CREATE_CONTEXT_PARA;

  __attribute__((dllimport)) const void * CertCreateContext(DWORD dwContextType,DWORD dwEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCERT_CREATE_CONTEXT_PARA pCreatePara);

#define CERT_CREATE_CONTEXT_NOCOPY_FLAG
#define CERT_CREATE_CONTEXT_SORTED_FLAG
#define CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG
#define CERT_CREATE_CONTEXT_NO_ENTRY_FLAG

  typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
  } CERT_SYSTEM_STORE_INFO,*PCERT_SYSTEM_STORE_INFO;

  typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
  } CERT_PHYSICAL_STORE_INFO,*PCERT_PHYSICAL_STORE_INFO;

#define CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG
#define CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG
#define CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG
#define CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG

  __attribute__((dllimport)) WINBOOL CertRegisterSystemStore(const void *pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void *pvReserved);
  __attribute__((dllimport)) WINBOOL CertRegisterPhysicalStore(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void *pvReserved);
  __attribute__((dllimport)) WINBOOL CertUnregisterSystemStore(const void *pvSystemStore,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CertUnregisterPhysicalStore(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName);

  typedef WINBOOL ( *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR pwszStoreLocation,DWORD dwFlags,void *pvReserved,void *pvArg);
  typedef WINBOOL ( *PFN_CERT_ENUM_SYSTEM_STORE)(const void *pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void *pvReserved,void *pvArg);
  typedef WINBOOL ( *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void *pvReserved,void *pvArg);

#define CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG
#define CERT_PHYSICAL_STORE_DEFAULT_NAME
#define CERT_PHYSICAL_STORE_GROUP_POLICY_NAME
#define CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME
#define CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME
#define CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME
#define CERT_PHYSICAL_STORE_ENTERPRISE_NAME
#define CERT_PHYSICAL_STORE_AUTH_ROOT_NAME

  __attribute__((dllimport)) WINBOOL CertEnumSystemStoreLocation(DWORD dwFlags,void *pvArg,PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
  __attribute__((dllimport)) WINBOOL CertEnumSystemStore(DWORD dwFlags,void *pvSystemStoreLocationPara,void *pvArg,PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
  __attribute__((dllimport)) WINBOOL CertEnumPhysicalStore(const void *pvSystemStore,DWORD dwFlags,void *pvArg,PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);

#define CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC
#define CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC
#define CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC
#define CRYPT_OID_ENUM_SYSTEM_STORE_FUNC
#define CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC
#define CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC
#define CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC
#define CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME

  __attribute__((dllimport)) WINBOOL CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,DWORD dwFlags,PCERT_ENHKEY_USAGE pUsage,DWORD *pcbUsage);
  __attribute__((dllimport)) WINBOOL CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,PCERT_ENHKEY_USAGE pUsage);
  __attribute__((dllimport)) WINBOOL CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier);
  __attribute__((dllimport)) WINBOOL CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier);
  __attribute__((dllimport)) WINBOOL CertGetValidUsages(DWORD cCerts,PCCERT_CONTEXT *rghCerts,int *cNumOIDs,LPSTR *rghOIDs,DWORD *pcbOIDs);
  __attribute__((dllimport)) WINBOOL CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg,DWORD cSignerStore,HCERTSTORE *rghSignerStore,DWORD dwFlags,PCCERT_CONTEXT *ppSigner,DWORD *pdwSignerIndex);

#define CMSG_TRUSTED_SIGNER_FLAG
#define CMSG_SIGNER_ONLY_FLAG
#define CMSG_USE_SIGNER_INDEX_FLAG

  __attribute__((dllimport)) WINBOOL CryptMsgSignCTL(DWORD dwMsgEncodingType,BYTE *pbCtlContent,DWORD cbCtlContent,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE *pbEncoded,DWORD *pcbEncoded);

#define CMSG_CMS_ENCAPSULATED_CTL_FLAG

  __attribute__((dllimport)) WINBOOL CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType,PCTL_INFO pCtlInfo,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE *pbEncoded,DWORD *pcbEncoded);

#define CMSG_ENCODE_SORTED_CTL_FLAG

#define CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG

  __attribute__((dllimport)) WINBOOL CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier,PCCTL_CONTEXT pCtlContext,DWORD dwFlags,void *pvReserved,PCRYPT_DER_BLOB pEncodedAttributes);
  __attribute__((dllimport)) WINBOOL CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCtlContext,void **ppvNextSubject,PCRYPT_DER_BLOB pSubjectIdentifier,PCRYPT_DER_BLOB pEncodedAttributes);

  typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
  } CTL_VERIFY_USAGE_PARA,*PCTL_VERIFY_USAGE_PARA;

  typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
  } CTL_VERIFY_USAGE_STATUS,*PCTL_VERIFY_USAGE_STATUS;

#define CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG
#define CERT_VERIFY_TRUSTED_SIGNERS_FLAG
#define CERT_VERIFY_NO_TIME_CHECK_FLAG
#define CERT_VERIFY_ALLOW_MORE_USAGE_FLAG

#define CERT_VERIFY_UPDATED_CTL_FLAG

  __attribute__((dllimport)) WINBOOL CertVerifyCTLUsage(DWORD dwEncodingType,DWORD dwSubjectType,void *pvSubject,PCTL_USAGE pSubjectUsage,DWORD dwFlags,PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);

  typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;
    PCRL_ENTRY pCrlEntry;
    WINBOOL fDeltaCrlEntry;
  } CERT_REVOCATION_CRL_INFO,*PCERT_REVOCATION_CRL_INFO;

  typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;







  } CERT_REVOCATION_PARA,*PCERT_REVOCATION_PARA;

  typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
  } CERT_REVOCATION_STATUS,*PCERT_REVOCATION_STATUS;

  __attribute__((dllimport)) WINBOOL CertVerifyRevocation(DWORD dwEncodingType,DWORD dwRevType,DWORD cContext,PVOID rgpvContext[],DWORD dwFlags,PCERT_REVOCATION_PARA pRevPara,PCERT_REVOCATION_STATUS pRevStatus);

#define CERT_CONTEXT_REVOCATION_TYPE
#define CERT_VERIFY_REV_CHAIN_FLAG
#define CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION
#define CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG

  WINBOOL CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1,PCRYPT_INTEGER_BLOB pInt2);
  __attribute__((dllimport)) WINBOOL CertCompareCertificate(DWORD dwCertEncodingType,PCERT_INFO pCertId1,PCERT_INFO pCertId2);
  __attribute__((dllimport)) WINBOOL CertCompareCertificateName(DWORD dwCertEncodingType,PCERT_NAME_BLOB pCertName1,PCERT_NAME_BLOB pCertName2);
  __attribute__((dllimport)) WINBOOL CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType,DWORD dwFlags,PCERT_NAME_BLOB pCertName,PCERT_RDN pRDN);

#define CERT_UNICODE_IS_RDN_ATTRS_FLAG
#define CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG

  __attribute__((dllimport)) WINBOOL CertComparePublicKeyInfo(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey1,PCERT_PUBLIC_KEY_INFO pPublicKey2);
  __attribute__((dllimport)) DWORD CertGetPublicKeyLength(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey);
  __attribute__((dllimport)) WINBOOL CryptVerifyCertificateSignature(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,PCERT_PUBLIC_KEY_INFO pPublicKey);
  __attribute__((dllimport)) WINBOOL CryptVerifyCertificateSignatureEx(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,DWORD dwSubjectType,void *pvSubject,DWORD dwIssuerType,void *pvIssuer,DWORD dwFlags,void *pvReserved);

#define CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB
#define CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT
#define CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL
#define CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY
#define CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT
#define CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN
#define CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL

  __attribute__((dllimport)) WINBOOL CryptHashToBeSigned(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) WINBOOL CryptHashCertificate(HCRYPTPROV hCryptProv,ALG_ID Algid,DWORD dwFlags,const BYTE *pbEncoded,DWORD cbEncoded,BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) WINBOOL CryptSignCertificate(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,const BYTE *pbEncodedToBeSigned,DWORD cbEncodedToBeSigned,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void *pvHashAuxInfo,BYTE *pbSignature,DWORD *pcbSignature);
  __attribute__((dllimport)) WINBOOL CryptSignAndEncodeCertificate(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void *pvHashAuxInfo,PBYTE pbEncoded,DWORD *pcbEncoded);
  __attribute__((dllimport)) LONG CertVerifyTimeValidity(LPFILETIME pTimeToVerify,PCERT_INFO pCertInfo);
  __attribute__((dllimport)) LONG CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify,PCRL_INFO pCrlInfo);
  __attribute__((dllimport)) WINBOOL CertVerifyValidityNesting(PCERT_INFO pSubjectInfo,PCERT_INFO pIssuerInfo);
  __attribute__((dllimport)) WINBOOL CertVerifyCRLRevocation(DWORD dwCertEncodingType,PCERT_INFO pCertId,DWORD cCrlInfo,PCRL_INFO rgpCrlInfo[]);
  __attribute__((dllimport)) LPCSTR CertAlgIdToOID(DWORD dwAlgId);
  __attribute__((dllimport)) DWORD CertOIDToAlgId(LPCSTR pszObjId);
  __attribute__((dllimport)) PCERT_EXTENSION CertFindExtension(LPCSTR pszObjId,DWORD cExtensions,CERT_EXTENSION rgExtensions[]);
  __attribute__((dllimport)) PCRYPT_ATTRIBUTE CertFindAttribute(LPCSTR pszObjId,DWORD cAttr,CRYPT_ATTRIBUTE rgAttr[]);
  __attribute__((dllimport)) PCERT_RDN_ATTR CertFindRDNAttr(LPCSTR pszObjId,PCERT_NAME_INFO pName);
  __attribute__((dllimport)) WINBOOL CertGetIntendedKeyUsage(DWORD dwCertEncodingType,PCERT_INFO pCertInfo,BYTE *pbKeyUsage,DWORD cbKeyUsage);

  typedef void *HCRYPTDEFAULTCONTEXT;

  __attribute__((dllimport)) WINBOOL CryptInstallDefaultContext(HCRYPTPROV hCryptProv,DWORD dwDefaultType,const void *pvDefaultPara,DWORD dwFlags,void *pvReserved,HCRYPTDEFAULTCONTEXT *phDefaultContext);

#define CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG
#define CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG

#define CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID
#define CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID

  typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD cOID;
    LPSTR *rgpszOID;
  } CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA,*PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

  __attribute__((dllimport)) WINBOOL CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext,DWORD dwFlags,void *pvReserved);
  __attribute__((dllimport)) WINBOOL CryptExportPublicKeyInfo(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,DWORD *pcbInfo);

#define CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC

  __attribute__((dllimport)) WINBOOL CryptExportPublicKeyInfoEx(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void *pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD *pcbInfo);
  __attribute__((dllimport)) WINBOOL CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,HCRYPTKEY *phKey);

#define CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC

  __attribute__((dllimport)) WINBOOL CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,ALG_ID aiKeyAlg,DWORD dwFlags,void *pvAuxInfo,HCRYPTKEY *phKey);
  __attribute__((dllimport)) WINBOOL CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert,DWORD dwFlags,void *pvReserved,HCRYPTPROV *phCryptProv,DWORD *pdwKeySpec,WINBOOL *pfCallerFreeProv);

#define CRYPT_ACQUIRE_CACHE_FLAG
#define CRYPT_ACQUIRE_USE_PROV_INFO_FLAG
#define CRYPT_ACQUIRE_COMPARE_KEY_FLAG
#define CRYPT_ACQUIRE_SILENT_FLAG

  __attribute__((dllimport)) WINBOOL CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert,DWORD dwFlags,void *pvReserved);

#define CRYPT_FIND_USER_KEYSET_FLAG
#define CRYPT_FIND_MACHINE_KEYSET_FLAG
#define CRYPT_FIND_SILENT_KEYSET_FLAG

  typedef WINBOOL ( *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv,CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,DWORD dwFlags,void *pvAuxInfo);

#define CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC

  __attribute__((dllimport)) WINBOOL CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS sImportParams,DWORD dwFlags,HCRYPTPROV *phCryptProv,void *pvAuxInfo);

  typedef WINBOOL ( *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void *pvAuxInfo,CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,DWORD *pcbPrivateKeyBlob);

#define CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC
#define CRYPT_DELETE_KEYSET

#define CertRDNValueToStr
#define CertNameToStr

  __attribute__((dllimport)) WINBOOL CryptExportPKCS8(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void *pvAuxInfo,BYTE *pbPrivateKeyBlob,DWORD *pcbPrivateKeyBlob);
  __attribute__((dllimport)) WINBOOL CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS *psExportParams,DWORD dwFlags,void *pvAuxInfo,BYTE *pbPrivateKeyBlob,DWORD *pcbPrivateKeyBlob);
  __attribute__((dllimport)) WINBOOL CryptHashPublicKeyInfo(HCRYPTPROV hCryptProv,ALG_ID Algid,DWORD dwFlags,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) DWORD CertRDNValueToStrA(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPSTR psz,DWORD csz);
  __attribute__((dllimport)) DWORD CertRDNValueToStrW(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPWSTR psz,DWORD csz);
  __attribute__((dllimport)) DWORD CertNameToStrA(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPSTR psz,DWORD csz);
  __attribute__((dllimport)) DWORD CertNameToStrW(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPWSTR psz,DWORD csz);

#define CERT_SIMPLE_NAME_STR
#define CERT_OID_NAME_STR
#define CERT_X500_NAME_STR

#define CERT_NAME_STR_SEMICOLON_FLAG
#define CERT_NAME_STR_NO_PLUS_FLAG
#define CERT_NAME_STR_NO_QUOTING_FLAG
#define CERT_NAME_STR_CRLF_FLAG
#define CERT_NAME_STR_COMMA_FLAG
#define CERT_NAME_STR_REVERSE_FLAG

#define CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG
#define CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG
#define CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG
#define CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG

#define CertStrToName
#define CertGetNameString

  __attribute__((dllimport)) WINBOOL CertStrToNameA(DWORD dwCertEncodingType,LPCSTR pszX500,DWORD dwStrType,void *pvReserved,BYTE *pbEncoded,DWORD *pcbEncoded,LPCSTR *ppszError);
  __attribute__((dllimport)) WINBOOL CertStrToNameW(DWORD dwCertEncodingType,LPCWSTR pszX500,DWORD dwStrType,void *pvReserved,BYTE *pbEncoded,DWORD *pcbEncoded,LPCWSTR *ppszError);
  __attribute__((dllimport)) DWORD CertGetNameStringA(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void *pvTypePara,LPSTR pszNameString,DWORD cchNameString);
  __attribute__((dllimport)) DWORD CertGetNameStringW(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void *pvTypePara,LPWSTR pszNameString,DWORD cchNameString);

#define CERT_NAME_EMAIL_TYPE
#define CERT_NAME_RDN_TYPE
#define CERT_NAME_ATTR_TYPE
#define CERT_NAME_SIMPLE_DISPLAY_TYPE
#define CERT_NAME_FRIENDLY_DISPLAY_TYPE
#define CERT_NAME_DNS_TYPE
#define CERT_NAME_URL_TYPE
#define CERT_NAME_UPN_TYPE

#define CERT_NAME_ISSUER_FLAG
#define CERT_NAME_DISABLE_IE4_UTF8_FLAG

  typedef PCCERT_CONTEXT ( *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg,DWORD dwCertEncodingType,PCERT_INFO pSignerId,HCERTSTORE hMsgCertStore);

  typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;




  } CRYPT_SIGN_MESSAGE_PARA,*PCRYPT_SIGN_MESSAGE_PARA;

#define CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG
#define CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG
#define CRYPT_MESSAGE_KEYID_SIGNER_FLAG
#define CRYPT_MESSAGE_SILENT_KEYSET_FLAG

  typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
  } CRYPT_VERIFY_MESSAGE_PARA,*PCRYPT_VERIFY_MESSAGE_PARA;

  typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
  } CRYPT_ENCRYPT_MESSAGE_PARA,*PCRYPT_ENCRYPT_MESSAGE_PARA;

#define CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG

  typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;






  } CRYPT_DECRYPT_MESSAGE_PARA,*PCRYPT_DECRYPT_MESSAGE_PARA;

  typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
  } CRYPT_HASH_MESSAGE_PARA,*PCRYPT_HASH_MESSAGE_PARA;

  typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
  } CRYPT_KEY_SIGN_MESSAGE_PARA,*PCRYPT_KEY_SIGN_MESSAGE_PARA;

  typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
  } CRYPT_KEY_VERIFY_MESSAGE_PARA,*PCRYPT_KEY_VERIFY_MESSAGE_PARA;

#define CertOpenSystemStore
#define CertAddEncodedCertificateToSystemStore

  __attribute__((dllimport)) WINBOOL CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,WINBOOL fDetachedSignature,DWORD cToBeSigned,const BYTE *rgpbToBeSigned[],DWORD rgcbToBeSigned[],BYTE *pbSignedBlob,DWORD *pcbSignedBlob);
  __attribute__((dllimport)) WINBOOL CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbSignedBlob,DWORD cbSignedBlob,BYTE *pbDecoded,DWORD *pcbDecoded,PCCERT_CONTEXT *ppSignerCert);
  __attribute__((dllimport)) LONG CryptGetMessageSignerCount(DWORD dwMsgEncodingType,const BYTE *pbSignedBlob,DWORD cbSignedBlob);
  __attribute__((dllimport)) HCERTSTORE CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const BYTE *pbSignedBlob,DWORD cbSignedBlob);
  __attribute__((dllimport)) WINBOOL CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbDetachedSignBlob,DWORD cbDetachedSignBlob,DWORD cToBeSigned,const BYTE *rgpbToBeSigned[],DWORD rgcbToBeSigned[],PCCERT_CONTEXT *ppSignerCert);
  __attribute__((dllimport)) WINBOOL CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE *pbToBeEncrypted,DWORD cbToBeEncrypted,BYTE *pbEncryptedBlob,DWORD *pcbEncryptedBlob);
  __attribute__((dllimport)) WINBOOL CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,const BYTE *pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE *pbDecrypted,DWORD *pcbDecrypted,PCCERT_CONTEXT *ppXchgCert);
  __attribute__((dllimport)) WINBOOL CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE *pbToBeSignedAndEncrypted,DWORD cbToBeSignedAndEncrypted,BYTE *pbSignedAndEncryptedBlob,DWORD *pcbSignedAndEncryptedBlob);
  __attribute__((dllimport)) WINBOOL CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE *pbDecrypted,DWORD *pcbDecrypted,PCCERT_CONTEXT *ppXchgCert,PCCERT_CONTEXT *ppSignerCert);
  __attribute__((dllimport)) WINBOOL CryptDecodeMessage(DWORD dwMsgTypeFlags,PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbEncodedBlob,DWORD cbEncodedBlob,DWORD dwPrevInnerContentType,DWORD *pdwMsgType,DWORD *pdwInnerContentType,BYTE *pbDecoded,DWORD *pcbDecoded,PCCERT_CONTEXT *ppXchgCert,PCCERT_CONTEXT *ppSignerCert);
  __attribute__((dllimport)) WINBOOL CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara,WINBOOL fDetachedHash,DWORD cToBeHashed,const BYTE *rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE *pbHashedBlob,DWORD *pcbHashedBlob,BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) WINBOOL CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE *pbHashedBlob,DWORD cbHashedBlob,BYTE *pbToBeHashed,DWORD *pcbToBeHashed,BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) WINBOOL CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE *pbDetachedHashBlob,DWORD cbDetachedHashBlob,DWORD cToBeHashed,const BYTE *rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE *pbComputedHash,DWORD *pcbComputedHash);
  __attribute__((dllimport)) WINBOOL CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,const BYTE *pbToBeSigned,DWORD cbToBeSigned,BYTE *pbSignedBlob,DWORD *pcbSignedBlob);
  __attribute__((dllimport)) WINBOOL CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,const BYTE *pbSignedBlob,DWORD cbSignedBlob,BYTE *pbDecoded,DWORD *pcbDecoded);
  __attribute__((dllimport)) HCERTSTORE CertOpenSystemStoreA(HCRYPTPROV hProv,LPCSTR szSubsystemProtocol);
  __attribute__((dllimport)) HCERTSTORE CertOpenSystemStoreW(HCRYPTPROV hProv,LPCWSTR szSubsystemProtocol);
  __attribute__((dllimport)) WINBOOL CertAddEncodedCertificateToSystemStoreA(LPCSTR szCertStoreName,const BYTE *pbCertEncoded,DWORD cbCertEncoded);
  __attribute__((dllimport)) WINBOOL CertAddEncodedCertificateToSystemStoreW(LPCWSTR szCertStoreName,const BYTE *pbCertEncoded,DWORD cbCertEncoded);

  typedef struct _CERT_CHAIN {
    DWORD cCerts;
    PCERT_BLOB certs;
    CRYPT_KEY_PROV_INFO keyLocatorInfo;
  } CERT_CHAIN,*PCERT_CHAIN;

  HRESULT FindCertsByIssuer(PCERT_CHAIN pCertChains,DWORD *pcbCertChains,DWORD *pcCertChains,BYTE *pbEncodedIssuerName,DWORD cbEncodedIssuerName,LPCWSTR pwszPurpose,DWORD dwKeySpec);
  __attribute__((dllimport)) WINBOOL CryptQueryObject(DWORD dwObjectType,const void *pvObject,DWORD dwExpectedContentTypeFlags,DWORD dwExpectedFormatTypeFlags,DWORD dwFlags,DWORD *pdwMsgAndCertEncodingType,DWORD *pdwContentType,DWORD *pdwFormatType,HCERTSTORE *phCertStore,HCRYPTMSG *phMsg,const void **ppvContext);

#define CERT_QUERY_OBJECT_FILE
#define CERT_QUERY_OBJECT_BLOB
#define CERT_QUERY_CONTENT_CERT
#define CERT_QUERY_CONTENT_CTL
#define CERT_QUERY_CONTENT_CRL
#define CERT_QUERY_CONTENT_SERIALIZED_STORE
#define CERT_QUERY_CONTENT_SERIALIZED_CERT
#define CERT_QUERY_CONTENT_SERIALIZED_CTL
#define CERT_QUERY_CONTENT_SERIALIZED_CRL
#define CERT_QUERY_CONTENT_PKCS7_SIGNED
#define CERT_QUERY_CONTENT_PKCS7_UNSIGNED
#define CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED
#define CERT_QUERY_CONTENT_PKCS10
#define CERT_QUERY_CONTENT_PFX
#define CERT_QUERY_CONTENT_CERT_PAIR
#define CERT_QUERY_CONTENT_FLAG_CERT
#define CERT_QUERY_CONTENT_FLAG_CTL
#define CERT_QUERY_CONTENT_FLAG_CRL
#define CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE
#define CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT
#define CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL
#define CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL
#define CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED
#define CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED
#define CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED
#define CERT_QUERY_CONTENT_FLAG_PKCS10
#define CERT_QUERY_CONTENT_FLAG_PFX
#define CERT_QUERY_CONTENT_FLAG_CERT_PAIR
#define CERT_QUERY_CONTENT_FLAG_ALL
#define CERT_QUERY_FORMAT_BINARY
#define CERT_QUERY_FORMAT_BASE64_ENCODED
#define CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED
#define CERT_QUERY_FORMAT_FLAG_BINARY
#define CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED
#define CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED
#define CERT_QUERY_FORMAT_FLAG_ALL

  __attribute__((dllimport)) LPVOID CryptMemAlloc(ULONG cbSize);
  __attribute__((dllimport)) LPVOID CryptMemRealloc(LPVOID pv,ULONG cbSize);
  __attribute__((dllimport)) void CryptMemFree(LPVOID pv);

  typedef HANDLE HCRYPTASYNC,*PHCRYPTASYNC;

  typedef void ( *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid,LPVOID pvParam);

  __attribute__((dllimport)) WINBOOL CryptCreateAsyncHandle(DWORD dwFlags,PHCRYPTASYNC phAsync);
  __attribute__((dllimport)) WINBOOL CryptSetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID pvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
  __attribute__((dllimport)) WINBOOL CryptGetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID *ppvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree);
  __attribute__((dllimport)) WINBOOL CryptCloseAsyncHandle(HCRYPTASYNC hAsync);

  typedef struct _CRYPT_BLOB_ARRAY {
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
  } CRYPT_BLOB_ARRAY,*PCRYPT_BLOB_ARRAY;

  typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
  } CRYPT_CREDENTIALS,*PCRYPT_CREDENTIALS;

#define CREDENTIAL_OID_PASSWORD_CREDENTIALS_A
#define CREDENTIAL_OID_PASSWORD_CREDENTIALS_W

#define CREDENTIAL_OID_PASSWORD_CREDENTIALS

  typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
  } CRYPT_PASSWORD_CREDENTIALSA,*PCRYPT_PASSWORD_CREDENTIALSA;
  typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
  } CRYPT_PASSWORD_CREDENTIALSW,*PCRYPT_PASSWORD_CREDENTIALSW;

  typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
  typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;

#define CryptRetrieveObjectByUrl
#define CryptStringToBinary
#define CryptBinaryToString

#define SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC
#define SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC

  typedef void ( *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid,PCRYPT_BLOB_ARRAY pObject,LPVOID pvFreeContext);

#define CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC

#define CONTEXT_OID_CERTIFICATE
#define CONTEXT_OID_CRL
#define CONTEXT_OID_CTL
#define CONTEXT_OID_PKCS7
#define CONTEXT_OID_CAPI2_ANY

#define CRYPT_RETRIEVE_MULTIPLE_OBJECTS
#define CRYPT_CACHE_ONLY_RETRIEVAL
#define CRYPT_WIRE_ONLY_RETRIEVAL
#define CRYPT_DONT_CACHE_RESULT
#define CRYPT_ASYNC_RETRIEVAL
#define CRYPT_STICKY_CACHE_RETRIEVAL
#define CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL
#define CRYPT_OFFLINE_CHECK_RETRIEVAL
#define CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE
#define CRYPT_LDAP_SIGN_RETRIEVAL
#define CRYPT_NO_AUTH_RETRIEVAL
#define CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL
#define CRYPT_AIA_RETRIEVAL
#define CRYPT_VERIFY_CONTEXT_SIGNATURE
#define CRYPT_VERIFY_DATA_HASH
#define CRYPT_KEEP_TIME_VALID
#define CRYPT_DONT_VERIFY_SIGNATURE
#define CRYPT_DONT_CHECK_TIME_VALIDITY
#define CRYPT_CHECK_FRESHNESS_TIME_VALIDITY
#define CRYPT_ACCUMULATIVE_TIMEOUT

  typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;
    DWORD dwMaxUrlRetrievalByteCount;
  } CRYPT_RETRIEVE_AUX_INFO,*PCRYPT_RETRIEVE_AUX_INFO;

  __attribute__((dllimport)) WINBOOL CryptRetrieveObjectByUrlA(LPCSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID *ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
  __attribute__((dllimport)) WINBOOL CryptRetrieveObjectByUrlW(LPCWSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID *ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);

  typedef WINBOOL ( *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags,void *pvArg);

  __attribute__((dllimport)) WINBOOL CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,const void *pvArg,DWORD dwFlags,void *pvReserved);
  __attribute__((dllimport)) WINBOOL CryptUninstallCancelRetrieval(DWORD dwFlags,void *pvReserved);
  __attribute__((dllimport)) WINBOOL CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval);

#define CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION

  typedef void ( *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion,DWORD dwCompletionCode,LPCSTR pszUrl,LPSTR pszObjectOid,LPVOID pvObject);

  typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
  } CRYPT_ASYNC_RETRIEVAL_COMPLETION,*PCRYPT_ASYNC_RETRIEVAL_COMPLETION;

#define CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL

  typedef WINBOOL ( *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve);

#define CRYPT_GET_URL_FROM_PROPERTY
#define CRYPT_GET_URL_FROM_EXTENSION
#define CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE
#define CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE

  typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR *rgwszUrl;
  } CRYPT_URL_ARRAY,*PCRYPT_URL_ARRAY;

  typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;
    DWORD dwSyncDeltaTime;
    DWORD cGroup;
    DWORD *rgcGroupEntry;
  } CRYPT_URL_INFO,*PCRYPT_URL_INFO;

  __attribute__((dllimport)) WINBOOL CryptGetObjectUrl(LPCSTR pszUrlOid,LPVOID pvPara,DWORD dwFlags,PCRYPT_URL_ARRAY pUrlArray,DWORD *pcbUrlArray,PCRYPT_URL_INFO pUrlInfo,DWORD *pcbUrlInfo,LPVOID pvReserved);

#define URL_OID_GET_OBJECT_URL_FUNC

#define URL_OID_CERTIFICATE_ISSUER
#define URL_OID_CERTIFICATE_CRL_DIST_POINT
#define URL_OID_CTL_ISSUER
#define URL_OID_CTL_NEXT_UPDATE
#define URL_OID_CRL_ISSUER
#define URL_OID_CERTIFICATE_FRESHEST_CRL
#define URL_OID_CRL_FRESHEST_CRL
#define URL_OID_CROSS_CERT_DIST_POINT

  typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
  } CERT_CRL_CONTEXT_PAIR,*PCERT_CRL_CONTEXT_PAIR;
  typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;

  __attribute__((dllimport)) WINBOOL CryptGetTimeValidObject(LPCSTR pszTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,LPFILETIME pftValidFor,DWORD dwFlags,DWORD dwTimeout,LPVOID *ppvObject,PCRYPT_CREDENTIALS pCredentials,LPVOID pvReserved);

#define TIME_VALID_OID_GET_OBJECT_FUNC

#define TIME_VALID_OID_GET_CTL
#define TIME_VALID_OID_GET_CRL
#define TIME_VALID_OID_GET_CRL_FROM_CERT

#define TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT
#define TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL

  __attribute__((dllimport)) WINBOOL CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,DWORD dwFlags,LPVOID pvReserved);

#define TIME_VALID_OID_FLUSH_OBJECT_FUNC
#define TIME_VALID_OID_FLUSH_CTL
#define TIME_VALID_OID_FLUSH_CRL
#define TIME_VALID_OID_FLUSH_CRL_FROM_CERT

#define TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT
#define TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL

  typedef struct _CRYPTPROTECT_PROMPTSTRUCT {
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
  } CRYPTPROTECT_PROMPTSTRUCT,*PCRYPTPROTECT_PROMPTSTRUCT;

#define CRYPTPROTECT_DEFAULT_PROVIDER
#define CRYPTPROTECT_PROMPT_ON_UNPROTECT

#define CRYPTPROTECT_PROMPT_ON_PROTECT
#define CRYPTPROTECT_PROMPT_RESERVED

#define CRYPTPROTECT_PROMPT_STRONG
#define CRYPTPROTECT_PROMPT_REQUIRE_STRONG
#define CRYPTPROTECT_UI_FORBIDDEN
#define CRYPTPROTECT_LOCAL_MACHINE
#define CRYPTPROTECT_CRED_SYNC
#define CRYPTPROTECT_AUDIT
#define CRYPTPROTECT_NO_RECOVERY
#define CRYPTPROTECT_VERIFY_PROTECTION
#define CRYPTPROTECT_CRED_REGENERATE
#define CRYPTPROTECT_FIRST_RESERVED_FLAGVAL
#define CRYPTPROTECT_LAST_RESERVED_FLAGVAL

  __attribute__((dllimport)) WINBOOL CryptProtectData(DATA_BLOB *pDataIn,LPCWSTR szDataDescr,DATA_BLOB *pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,DWORD dwFlags,DATA_BLOB *pDataOut);
  __attribute__((dllimport)) WINBOOL CryptUnprotectData(DATA_BLOB *pDataIn,LPWSTR *ppszDataDescr,DATA_BLOB *pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,DWORD dwFlags,DATA_BLOB *pDataOut);

#define CRYPTPROTECTMEMORY_BLOCK_SIZE
#define CRYPTPROTECTMEMORY_SAME_PROCESS
#define CRYPTPROTECTMEMORY_CROSS_PROCESS
#define CRYPTPROTECTMEMORY_SAME_LOGON

  __attribute__((dllimport)) WINBOOL CryptProtectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL CryptUnprotectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags);
  __attribute__((dllimport)) PCCERT_CONTEXT CertCreateSelfSignCertificate(HCRYPTPROV hProv,PCERT_NAME_BLOB pSubjectIssuerBlob,DWORD dwFlags,PCRYPT_KEY_PROV_INFO pKeyProvInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,PSYSTEMTIME pStartTime,PSYSTEMTIME pEndTime,PCERT_EXTENSIONS pExtensions);

#define CERT_CREATE_SELFSIGN_NO_SIGN
#define CERT_CREATE_SELFSIGN_NO_KEY_INFO

  __attribute__((dllimport)) WINBOOL CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,void *pvData,DWORD *pcbData);

#define CRYPT_KEYID_MACHINE_FLAG

#define CRYPT_KEYID_ALLOC_FLAG

  __attribute__((dllimport)) WINBOOL CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,const void *pvData);

#define CRYPT_KEYID_DELETE_FLAG
#define CRYPT_KEYID_SET_NEW_FLAG

  typedef WINBOOL ( *PFN_CRYPT_ENUM_KEYID_PROP)(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwFlags,void *pvReserved,void *pvArg,DWORD cProp,DWORD *rgdwPropId,void **rgpvData,DWORD *rgcbData);

  __attribute__((dllimport)) WINBOOL CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,void *pvArg,PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
  __attribute__((dllimport)) WINBOOL CryptCreateKeyIdentifierFromCSP(DWORD dwCertEncodingType,LPCSTR pszPubKeyOID,const PUBLICKEYSTRUC *pPubKeyStruc,DWORD cbPubKeyStruc,DWORD dwFlags,void *pvReserved,BYTE *pbHash,DWORD *pcbHash);

#define CERT_CHAIN_CONFIG_REGPATH
#define CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME
#define CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME
#define CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME
#define CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT

  typedef HANDLE HCERTCHAINENGINE;

#define HCCE_CURRENT_USER
#define HCCE_LOCAL_MACHINE

#define CERT_CHAIN_CACHE_END_CERT
#define CERT_CHAIN_THREAD_STORE_SYNC
#define CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL
#define CERT_CHAIN_USE_LOCAL_MACHINE_STORE
#define CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE
#define CERT_CHAIN_ENABLE_SHARE_STORE

  typedef struct _CERT_CHAIN_ENGINE_CONFIG {
    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE *rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;
  } CERT_CHAIN_ENGINE_CONFIG,*PCERT_CHAIN_ENGINE_CONFIG;

  __attribute__((dllimport)) WINBOOL CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig,HCERTCHAINENGINE *phChainEngine);
  __attribute__((dllimport)) void CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
  __attribute__((dllimport)) WINBOOL CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine);

  typedef struct _CERT_TRUST_STATUS {
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
  } CERT_TRUST_STATUS,*PCERT_TRUST_STATUS;

#define CERT_TRUST_NO_ERROR
#define CERT_TRUST_IS_NOT_TIME_VALID
#define CERT_TRUST_IS_NOT_TIME_NESTED
#define CERT_TRUST_IS_REVOKED
#define CERT_TRUST_IS_NOT_SIGNATURE_VALID
#define CERT_TRUST_IS_NOT_VALID_FOR_USAGE
#define CERT_TRUST_IS_UNTRUSTED_ROOT
#define CERT_TRUST_REVOCATION_STATUS_UNKNOWN
#define CERT_TRUST_IS_CYCLIC

#define CERT_TRUST_INVALID_EXTENSION
#define CERT_TRUST_INVALID_POLICY_CONSTRAINTS
#define CERT_TRUST_INVALID_BASIC_CONSTRAINTS
#define CERT_TRUST_INVALID_NAME_CONSTRAINTS
#define CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT
#define CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT
#define CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT
#define CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT

#define CERT_TRUST_IS_OFFLINE_REVOCATION
#define CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY

#define CERT_TRUST_IS_PARTIAL_CHAIN
#define CERT_TRUST_CTL_IS_NOT_TIME_VALID
#define CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID
#define CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE

#define CERT_TRUST_HAS_EXACT_MATCH_ISSUER
#define CERT_TRUST_HAS_KEY_MATCH_ISSUER
#define CERT_TRUST_HAS_NAME_MATCH_ISSUER
#define CERT_TRUST_IS_SELF_SIGNED

#define CERT_TRUST_HAS_PREFERRED_ISSUER
#define CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY
#define CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS

#define CERT_TRUST_IS_COMPLEX_CHAIN

  typedef struct _CERT_REVOCATION_INFO {
    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
  } CERT_REVOCATION_INFO,*PCERT_REVOCATION_INFO;

  typedef struct _CERT_TRUST_LIST_INFO {
    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
  } CERT_TRUST_LIST_INFO,*PCERT_TRUST_LIST_INFO;

  typedef struct _CERT_CHAIN_ELEMENT {
    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;
    LPCWSTR pwszExtendedErrorInfo;
  } CERT_CHAIN_ELEMENT,*PCERT_CHAIN_ELEMENT;

  typedef struct _CERT_SIMPLE_CHAIN {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT *rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
  } CERT_SIMPLE_CHAIN,*PCERT_SIMPLE_CHAIN;

  typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT,*PCERT_CHAIN_CONTEXT;
  typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

  struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN *rgpChain;
    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
  };

#define USAGE_MATCH_TYPE_AND
#define USAGE_MATCH_TYPE_OR

  typedef struct _CERT_USAGE_MATCH {
    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;
  } CERT_USAGE_MATCH,*PCERT_USAGE_MATCH;

  typedef struct _CTL_USAGE_MATCH {
    DWORD dwType;
    CTL_USAGE Usage;
  } CTL_USAGE_MATCH,*PCTL_USAGE_MATCH;

  typedef struct _CERT_CHAIN_PARA {
    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
# 4066 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wincrypt.h" 3
  } CERT_CHAIN_PARA,*PCERT_CHAIN_PARA;

#define CERT_CHAIN_REVOCATION_CHECK_END_CERT
#define CERT_CHAIN_REVOCATION_CHECK_CHAIN
#define CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT
#define CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY

#define CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT
#define CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING
#define CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS
#define CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE
#define CERT_CHAIN_TIMESTAMP_TIME

  __attribute__((dllimport)) WINBOOL CertGetCertificateChain(HCERTCHAINENGINE hChainEngine,PCCERT_CONTEXT pCertContext,LPFILETIME pTime,HCERTSTORE hAdditionalStore,PCERT_CHAIN_PARA pChainPara,DWORD dwFlags,LPVOID pvReserved,PCCERT_CHAIN_CONTEXT *ppChainContext);
  __attribute__((dllimport)) void CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
  __attribute__((dllimport)) PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);

#define REVOCATION_OID_CRL_REVOCATION

  typedef struct _CRL_REVOCATION_INFO {
    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
  } CRL_REVOCATION_INFO,*PCRL_REVOCATION_INFO;

  __attribute__((dllimport)) PCCERT_CHAIN_CONTEXT CertFindChainInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCERT_CHAIN_CONTEXT pPrevChainContext);

#define CERT_CHAIN_FIND_BY_ISSUER

  typedef WINBOOL ( *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT pCert,void *pvFindArg);

  typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD cbSize;
    LPCSTR pszUsageIdentifier;
    DWORD dwKeySpec;
    DWORD dwAcquirePrivateKeyFlags;
    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;




  } CERT_CHAIN_FIND_ISSUER_PARA,*PCERT_CHAIN_FIND_ISSUER_PARA,CERT_CHAIN_FIND_BY_ISSUER_PARA,*PCERT_CHAIN_FIND_BY_ISSUER_PARA;

#define CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG
#define CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG
#define CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG
#define CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG
#define CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG
#define CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG

  typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
  } CERT_CHAIN_POLICY_PARA,*PCERT_CHAIN_POLICY_PARA;

  typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
  } CERT_CHAIN_POLICY_STATUS,*PCERT_CHAIN_POLICY_STATUS;

#define CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG
#define CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG
#define CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG
#define CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG

#define CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS

#define CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG
#define CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG
#define CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG
#define CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG

#define CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG
#define CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG
#define CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG
#define CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG

#define CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS

#define CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG
#define CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG

  __attribute__((dllimport)) WINBOOL CertVerifyCertificateChainPolicy(LPCSTR pszPolicyOID,PCCERT_CHAIN_CONTEXT pChainContext,PCERT_CHAIN_POLICY_PARA pPolicyPara,PCERT_CHAIN_POLICY_STATUS pPolicyStatus);

#define CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC

#define CERT_CHAIN_POLICY_BASE
#define CERT_CHAIN_POLICY_AUTHENTICODE
#define CERT_CHAIN_POLICY_AUTHENTICODE_TS
#define CERT_CHAIN_POLICY_SSL
#define CERT_CHAIN_POLICY_BASIC_CONSTRAINTS
#define CERT_CHAIN_POLICY_NT_AUTH
#define CERT_CHAIN_POLICY_MICROSOFT_ROOT




  typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
  } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

  typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    WINBOOL fCommercial;
  } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

  typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    WINBOOL fCommercial;
  } AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,*PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;

#define AUTHTYPE_CLIENT
#define AUTHTYPE_SERVER

  typedef struct _HTTPSPolicyCallbackData {
    __extension__ union {
      DWORD cbStruct;
      DWORD cbSize;
    };
    DWORD dwAuthType;
    DWORD fdwChecks;
    WCHAR *pwszServerName;
  } HTTPSPolicyCallbackData,*PHTTPSPolicyCallbackData,SSL_EXTRA_CERT_CHAIN_POLICY_PARA,*PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;

#define BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG
#define BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG

#define MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG

  __attribute__((dllimport)) WINBOOL CryptStringToBinaryA(LPCSTR pszString,DWORD cchString,DWORD dwFlags,BYTE *pbBinary,DWORD *pcbBinary,DWORD *pdwSkip,DWORD *pdwFlags);
  __attribute__((dllimport)) WINBOOL CryptStringToBinaryW(LPCWSTR pszString,DWORD cchString,DWORD dwFlags,BYTE *pbBinary,DWORD *pcbBinary,DWORD *pdwSkip,DWORD *pdwFlags);
  __attribute__((dllimport)) WINBOOL CryptBinaryToStringA(const BYTE *pbBinary,DWORD cbBinary,DWORD dwFlags,LPSTR pszString,DWORD *pcchString);
  __attribute__((dllimport)) WINBOOL CryptBinaryToStringW(const BYTE *pbBinary,DWORD cbBinary,DWORD dwFlags,LPWSTR pszString,DWORD *pcchString);

#define CRYPT_STRING_BASE64HEADER
#define CRYPT_STRING_BASE64
#define CRYPT_STRING_BINARY
#define CRYPT_STRING_BASE64REQUESTHEADER
#define CRYPT_STRING_HEX
#define CRYPT_STRING_HEXASCII
#define CRYPT_STRING_BASE64_ANY
#define CRYPT_STRING_ANY
#define CRYPT_STRING_HEX_ANY
#define CRYPT_STRING_BASE64X509CRLHEADER
#define CRYPT_STRING_HEXADDR
#define CRYPT_STRING_HEXASCIIADDR

#define CRYPT_STRING_NOCR

  __attribute__((dllimport)) HCERTSTORE PFXImportCertStore(CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);

#define CRYPT_USER_KEYSET
#define PKCS12_IMPORT_RESERVED_MASK

  __attribute__((dllimport)) WINBOOL PFXIsPFXBlob(CRYPT_DATA_BLOB *pPFX);
  __attribute__((dllimport)) WINBOOL PFXVerifyPassword(CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL PFXExportCertStoreEx(HCERTSTORE hStore,CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,void *pvReserved,DWORD dwFlags);

#define REPORT_NO_PRIVATE_KEY
#define REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY
#define EXPORT_PRIVATE_KEYS
#define PKCS12_EXPORT_RESERVED_MASK

  __attribute__((dllimport)) WINBOOL PFXExportCertStore(HCERTSTORE hStore,CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);
# 96 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winefs.h" 1 3






#define __WINEFS_H__
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winefs.h" 3
  typedef struct _CERTIFICATE_BLOB {
    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;
  } EFS_CERTIFICATE_BLOB,*PEFS_CERTIFICATE_BLOB;

  typedef struct _EFS_HASH_BLOB {
    DWORD cbData;
    PBYTE pbData;
  } EFS_HASH_BLOB,*PEFS_HASH_BLOB;

  typedef struct _EFS_RPC_BLOB {
    DWORD cbData;
    PBYTE pbData;
  } EFS_RPC_BLOB,*PEFS_RPC_BLOB;

  typedef struct _EFS_KEY_INFO {
    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;
  } EFS_KEY_INFO,*PEFS_KEY_INFO;

  typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
  } ENCRYPTION_CERTIFICATE,*PENCRYPTION_CERTIFICATE;

#define MAX_SID_SIZE

  typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;
  } ENCRYPTION_CERTIFICATE_HASH,*PENCRYPTION_CERTIFICATE_HASH;

  typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH *pUsers;
  } ENCRYPTION_CERTIFICATE_HASH_LIST,*PENCRYPTION_CERTIFICATE_HASH_LIST;

  typedef struct _ENCRYPTION_CERTIFICATE_LIST {
    DWORD nUsers;
    PENCRYPTION_CERTIFICATE *pUsers;
  } ENCRYPTION_CERTIFICATE_LIST,*PENCRYPTION_CERTIFICATE_LIST;

  __attribute__((dllimport)) DWORD QueryUsersOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers);
  __attribute__((dllimport)) DWORD QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents);
  __attribute__((dllimport)) DWORD RemoveUsersFromEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
  __attribute__((dllimport)) DWORD AddUsersToEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_LIST pUsers);
  __attribute__((dllimport)) DWORD SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate);
  __attribute__((dllimport)) void FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
  __attribute__((dllimport)) WINBOOL EncryptionDisable(LPCWSTR DirPath,WINBOOL Disable);
  __attribute__((dllimport)) DWORD DuplicateEncryptionInfoFile(LPCWSTR SrcFileName,LPCWSTR DstFileName,DWORD dwCreationDistribution,DWORD dwAttributes,const LPSECURITY_ATTRIBUTES lpSecurityAttributes);
# 97 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winscard.h" 1 3






#define _WINSCARD_H_


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 1 3



#define __REQUIRED_RPCNDR_H_VERSION__


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3






#define __RPCNDR_H_VERSION__



#define __RPCNDR_H__







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 20 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 1 3




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 6 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 2 3
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcnsip.h" 1 3






#define __RPCNSIP_H__





  typedef struct {
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR *Bindings;
  } RPC_IMPORT_CONTEXT_P,*PRPC_IMPORT_CONTEXT_P;

  __attribute__((dllimport)) RPC_STATUS I_RpcNsGetBuffer(PRPC_MESSAGE Message);
  __attribute__((dllimport)) RPC_STATUS I_RpcNsSendReceive(PRPC_MESSAGE Message,RPC_BINDING_HANDLE *Handle);
  __attribute__((dllimport)) void I_RpcNsRaiseException(PRPC_MESSAGE Message,RPC_STATUS Status);
  __attribute__((dllimport)) RPC_STATUS I_RpcReBindBuffer(PRPC_MESSAGE Message);
  __attribute__((dllimport)) RPC_STATUS I_NsServerBindSearch();
  __attribute__((dllimport)) RPC_STATUS I_NsClientBindSearch();
  __attribute__((dllimport)) void I_NsClientBindDone();
# 22 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcsal.h" 1 3
# 21 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcsal.h" 3
#define __RPCSAL_H_VERSION__


#define __RPC__deref_in
#define __RPC__deref_in_opt
#define __RPC__deref_in_string
#define __RPC__deref_in_opt_string
#define __RPC__deref_in_ecount
#define __RPC__deref_in_ecount_opt
#define __RPC__deref_in_ecount_opt_string
#define __RPC__deref_in_ecount_full
#define __RPC__deref_in_ecount_full_opt
#define __RPC__deref_in_ecount_full_string
#define __RPC__deref_in_ecount_full_opt_string
#define __RPC__deref_in_ecount_part
#define __RPC__deref_in_ecount_part_opt
#define __RPC__deref_in_xcount
#define __RPC__deref_in_xcount_opt
#define __RPC__deref_in_xcount_opt_string
#define __RPC__deref_in_xcount_full
#define __RPC__deref_in_xcount_full_opt
#define __RPC__deref_in_xcount_full_string
#define __RPC__deref_in_xcount_full_opt_string
#define __RPC__deref_in_xcount_part
#define __RPC__deref_in_xcount_part_opt

#define __RPC__deref_inout
#define __RPC__deref_inout_opt
#define __RPC__deref_inout_string
#define __RPC__deref_inout_opt_string
#define __RPC__deref_inout_ecount_opt
#define __RPC__deref_inout_ecount_full
#define __RPC__deref_inout_ecount_full_opt
#define __RPC__deref_inout_ecount_full_string
#define __RPC__deref_inout_ecount_full_opt_string
#define __RPC__deref_inout_ecount_part_opt
#define __RPC__deref_inout_xcount_opt
#define __RPC__deref_inout_xcount_full
#define __RPC__deref_inout_xcount_full_opt
#define __RPC__deref_inout_xcount_full_string
#define __RPC__deref_inout_xcount_full_opt_string
#define __RPC__deref_inout_xcount_part_opt

#define __RPC__deref_out
#define __RPC__deref_out_opt
#define __RPC__deref_out_string
#define __RPC__deref_out_opt_string
#define __RPC__deref_out_ecount
#define __RPC__deref_out_ecount_opt
#define __RPC__deref_out_ecount_full
#define __RPC__deref_out_ecount_full_opt
#define __RPC__deref_out_ecount_full_string
#define __RPC__deref_out_ecount_full_opt_string
#define __RPC__deref_out_ecount_part
#define __RPC__deref_out_ecount_part_opt
#define __RPC__deref_out_xcount
#define __RPC__deref_out_xcount_opt
#define __RPC__deref_out_xcount_full
#define __RPC__deref_out_xcount_full_opt
#define __RPC__deref_out_xcount_full_string
#define __RPC__deref_out_xcount_full_opt_string
#define __RPC__deref_out_xcount_part
#define __RPC__deref_out_xcount_part_opt

#define __RPC__deref_opt_in
#define __RPC__deref_opt_in_opt
#define __RPC__deref_opt_in_string
#define __RPC__deref_opt_in_opt_string

#define __RPC__deref_opt_inout
#define __RPC__deref_opt_inout_opt
#define __RPC__deref_opt_inout_string
#define __RPC__deref_opt_inout_opt_string
#define __RPC__deref_opt_inout_ecount
#define __RPC__deref_opt_inout_ecount_opt
#define __RPC__deref_opt_inout_ecount_full
#define __RPC__deref_opt_inout_ecount_full_opt
#define __RPC__deref_opt_inout_ecount_full_string
#define __RPC__deref_opt_inout_ecount_full_opt_string
#define __RPC__deref_opt_inout_ecount_part
#define __RPC__deref_opt_inout_ecount_part_opt
#define __RPC__deref_opt_inout_xcount
#define __RPC__deref_opt_inout_xcount_opt
#define __RPC__deref_opt_inout_xcount_full
#define __RPC__deref_opt_inout_xcount_full_opt
#define __RPC__deref_opt_inout_xcount_full_string
#define __RPC__deref_opt_inout_xcount_full_opt_string
#define __RPC__deref_opt_inout_xcount_part
#define __RPC__deref_opt_inout_xcount_part_opt

#define __RPC__in
#define __RPC__in_opt
#define __RPC__in_string
#define __RPC__in_opt_string
#define __RPC__in_ecount
#define __RPC__in_ecount_opt
#define __RPC__in_ecount_full
#define __RPC__in_ecount_full_opt
#define __RPC__in_ecount_full_string
#define __RPC__in_ecount_full_opt_string
#define __RPC__in_ecount_part
#define __RPC__in_ecount_part_opt
#define __RPC__in_xcount
#define __RPC__in_xcount_opt
#define __RPC__in_xcount_full
#define __RPC__in_xcount_full_opt
#define __RPC__in_xcount_full_string
#define __RPC__in_xcount_full_opt_string
#define __RPC__in_xcount_part
#define __RPC__in_xcount_part_opt

#define __RPC__inout
#define __RPC__inout_opt
#define __RPC__inout_string
#define __RPC__inout_opt_string
#define __RPC__opt_inout
#define __RPC__inout_ecount
#define __RPC__inout_ecount_opt
#define __RPC__inout_ecount_full
#define __RPC__inout_ecount_full_opt
#define __RPC__inout_ecount_full_string
#define __RPC__inout_ecount_full_opt_string
#define __RPC__inout_ecount_part
#define __RPC__inout_ecount_part_opt
#define __RPC__inout_xcount
#define __RPC__inout_xcount_opt
#define __RPC__inout_xcount_full
#define __RPC__inout_xcount_full_opt
#define __RPC__inout_xcount_full_string
#define __RPC__inout_xcount_full_opt_string
#define __RPC__inout_xcount_part
#define __RPC__inout_xcount_part_opt

#define __RPC__out
#define __RPC__out_ecount
#define __RPC__out_ecount_full
#define __RPC__out_ecount_full_string
#define __RPC__out_ecount_part
#define __RPC__out_xcount
#define __RPC__out_xcount_full
#define __RPC__out_xcount_full_string
#define __RPC__out_xcount_part

#define __RPC_full_pointer
#define __RPC_ref_pointer
#define __RPC_string
#define __RPC_unique_pointer
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 2 3





#define NDR_CHAR_REP_MASK
#define NDR_INT_REP_MASK
#define NDR_FLOAT_REP_MASK

#define NDR_LITTLE_ENDIAN
#define NDR_BIG_ENDIAN

#define NDR_IEEE_FLOAT
#define NDR_VAX_FLOAT
#define NDR_IBM_FLOAT

#define NDR_ASCII_CHAR
#define NDR_EBCDIC_CHAR

#define NDR_LOCAL_DATA_REPRESENTATION
#define NDR_LOCAL_ENDIAN




#define TARGET_IS_NT61_OR_LATER




#define TARGET_IS_NT60_OR_LATER

#define TARGET_IS_NT51_OR_LATER
#define TARGET_IS_NT50_OR_LATER
#define TARGET_IS_NT40_OR_LATER
#define TARGET_IS_NT351_OR_WIN95_OR_LATER




  typedef unsigned char byte;
  typedef byte cs_byte;
  typedef unsigned char boolean;


#define _HYPER_DEFINED
#define hyper
#define MIDL_uhyper
# 109 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 3
#define __MIDL_user_allocate_free_DEFINED__
  void * MIDL_user_allocate(SIZE_T);
  void MIDL_user_free(void *);


#define RPC_VAR_ENTRY


#define __MIDL_DECLSPEC_DLLIMPORT
#define __MIDL_DECLSPEC_DLLEXPORT





  typedef void *NDR_CCONTEXT;

  typedef struct _NDR_SCONTEXT {
    void *pad[2];
    void *userContext;
  } *NDR_SCONTEXT;

#define NDRSContextValue

#define cbNDRContext

  typedef void ( *NDR_RUNDOWN)(void *context);
  typedef void ( *NDR_NOTIFY_ROUTINE)(void);
  typedef void ( *NDR_NOTIFY2_ROUTINE)(boolean flag);

  typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT *ArrayOfObjects;
  } SCONTEXT_QUEUE,*PSCONTEXT_QUEUE;

  __attribute__((dllimport)) RPC_BINDING_HANDLE NDRCContextBinding(NDR_CCONTEXT CContext);
  __attribute__((dllimport)) void NDRCContextMarshall(NDR_CCONTEXT CContext,void *pBuff);
  __attribute__((dllimport)) void NDRCContextUnmarshall(NDR_CCONTEXT *pCContext,RPC_BINDING_HANDLE hBinding,void *pBuff,unsigned long DataRepresentation);
  __attribute__((dllimport)) void NDRSContextMarshall(NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
  __attribute__((dllimport)) NDR_SCONTEXT NDRSContextUnmarshall(void *pBuff,unsigned long DataRepresentation);
  __attribute__((dllimport)) void NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
  __attribute__((dllimport)) void NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn,void *CtxGuard,unsigned long Flags);
  __attribute__((dllimport)) NDR_SCONTEXT NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation);
  __attribute__((dllimport)) NDR_SCONTEXT NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation,void *CtxGuard,unsigned long Flags);
  __attribute__((dllimport)) void RpcSsDestroyClientContext(void **ContextHandle);

#define byte_from_ndr
#define byte_array_from_ndr
#define boolean_from_ndr
#define boolean_array_from_ndr
#define small_from_ndr
#define small_from_ndr_temp
#define small_array_from_ndr

#define MIDL_ascii_strlen
#define MIDL_ascii_strcpy
#define MIDL_memset


#define _ERROR_STATUS_T_DEFINED
typedef unsigned long error_status_t;


#define _midl_ma1
#define _midl_ma2
#define _midl_ma4
#define _midl_ma8

#define _midl_unma1
#define _midl_unma2
#define _midl_unma3
#define _midl_unma4

#define _midl_fa2
#define _midl_fa4
#define _midl_fa8

#define _midl_addp
#define _midl_marsh_lhs
#define _midl_marsh_up
#define _midl_advmp
#define _midl_unmarsh_up

#define NdrMarshConfStringHdr
#define NdrUnMarshConfStringHdr
#define NdrMarshCCtxtHdl
#define NdrUnMarshCCtxtHdl
#define NdrUnMarshSCtxtHdl
#define NdrMarshSCtxtHdl

#define NdrFieldOffset
#define NdrFieldPad

#define NdrFcShort
#define NdrFcLong

#define RPC_BAD_STUB_DATA_EXCEPTION_FILTER

  struct _MIDL_STUB_MESSAGE;
  struct _MIDL_STUB_DESC;
  struct _FULL_PTR_XLAT_TABLES;

  typedef unsigned char *RPC_BUFPTR;
  typedef unsigned long RPC_LENGTH;
  typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
  typedef const unsigned char *PFORMAT_STRING;

  typedef struct {
    long Dimension;
    unsigned long *BufferConformanceMark;
    unsigned long *BufferVarianceMark;
    unsigned long *MaxCountArray;
    unsigned long *OffsetArray;
    unsigned long *ActualCountArray;
  } ARRAY_INFO,*PARRAY_INFO;

  typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
  typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

  typedef struct {
    unsigned long WireCodeset;
    unsigned long DesiredReceivingCodeset;
    void *CSArrayInfo;
  } CS_STUB_INFO;

  struct _MIDL_SYNTAX_INFO;
  typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO,*PMIDL_SYNTAX_INFO;

  struct NDR_ALLOC_ALL_NODES_CONTEXT;
  struct NDR_POINTER_QUEUE_STATE;
  struct _NDR_PROC_CONTEXT;

  typedef struct _MIDL_STUB_MESSAGE {
    PRPC_MESSAGE RpcMsg;
    unsigned char *Buffer;
    unsigned char *BufferStart;
    unsigned char *BufferEnd;
    unsigned char *BufferMark;
    unsigned long BufferLength;
    unsigned long MemorySize;
    unsigned char *Memory;
    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;
    int ReuseBuffer;
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
    int IgnoreEmbeddedPointers;
    unsigned char *PointerBufferMark;
    unsigned char fBufferValid;
    unsigned char uFlags;
    unsigned short UniquePtrCount;
    ULONG_PTR MaxCount;
    unsigned long Offset;
    unsigned long ActualCount;
    void *( *pfnAllocate)(size_t);
    void ( *pfnFree)(void *);
    unsigned char *StackTop;
    unsigned char *pPresentedType;
    unsigned char *pTransmitType;
    handle_t SavedHandle;
    const struct _MIDL_STUB_DESC *StubDesc;
    struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
    unsigned long FullPtrRefId;
    unsigned long PointerLength;
    int fInDontFree : 1;
    int fDontCallFreeInst : 1;
    int fInOnlyParam : 1;
    int fHasReturn : 1;
    int fHasExtensions : 1;
    int fHasNewCorrDesc : 1;
    int fIsOicfServer : 1;
    int fHasMemoryValidateCallback : 1;
    int fUnused : 8;
    int fUnused2 : 16;
    unsigned long dwDestContext;
    void *pvDestContext;
    NDR_SCONTEXT *SavedContextHandles;
    long ParamNumber;
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    PARRAY_INFO pArrayInfo;
    unsigned long *SizePtrCountArray;
    unsigned long *SizePtrOffsetArray;
    unsigned long *SizePtrLengthArray;
    void *pArgQueue;
    unsigned long dwStubPhase;
    void *LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char *pCorrMemory;
    void *pMemoryList;
    CS_STUB_INFO *pCSInfo;
    unsigned char *ConformanceMark;
    unsigned char *VarianceMark;



    INT_PTR Unused;

    struct _NDR_PROC_CONTEXT *pContext;
    void *pUserMarshalList;
    INT_PTR Reserved51_2;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
  } MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;

  typedef void *( *GENERIC_BINDING_ROUTINE)(void *);
  typedef void ( *GENERIC_UNBIND_ROUTINE)(void *,unsigned char *);

  typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
  } GENERIC_BINDING_ROUTINE_PAIR,*PGENERIC_BINDING_ROUTINE_PAIR;

  typedef struct __GENERIC_BINDING_INFO {
    void *pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
  } GENERIC_BINDING_INFO,*PGENERIC_BINDING_INFO;

#define NDR_SHAREABLE

  typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);

  typedef struct _XMIT_ROUTINE_QUINTUPLE {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
  } XMIT_ROUTINE_QUINTUPLE,*PXMIT_ROUTINE_QUINTUPLE;

  typedef ULONG ( *USER_MARSHAL_SIZING_ROUTINE)(ULONG *,ULONG,void *);
  typedef unsigned char *( *USER_MARSHAL_MARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
  typedef unsigned char *( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
  typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(ULONG *,void *);

  typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
  } USER_MARSHAL_ROUTINE_QUADRUPLE;

#define USER_MARSHAL_CB_SIGNATURE

  typedef enum _USER_MARSHAL_CB_TYPE {
    USER_MARSHAL_CB_BUFFER_SIZE,USER_MARSHAL_CB_MARSHALL,USER_MARSHAL_CB_UNMARSHALL,USER_MARSHAL_CB_FREE
  } USER_MARSHAL_CB_TYPE;

  typedef struct _USER_MARSHAL_CB {
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
  } USER_MARSHAL_CB;

#define USER_CALL_CTXT_MASK
#define USER_CALL_AUX_MASK
#define GET_USER_DATA_REP

#define USER_CALL_IS_ASYNC
#define USER_CALL_NEW_CORRELATION_DESC

  typedef struct _MALLOC_FREE_STRUCT {
    void *( *pfnAllocate)(size_t);
    void ( *pfnFree)(void *);
  } MALLOC_FREE_STRUCT;

  typedef struct _COMM_FAULT_OFFSETS {
    short CommOffset;
    short FaultOffset;
  } COMM_FAULT_OFFSETS;

  typedef enum _IDL_CS_CONVERT {
    IDL_CS_NO_CONVERT,IDL_CS_IN_PLACE_CONVERT,IDL_CS_NEW_BUFFER_CONVERT
  } IDL_CS_CONVERT;

  typedef void ( *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulLocalBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulNetworkBufferSize,error_status_t *pStatus);
  typedef void ( *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulNetworkBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulLocalBufferSize,error_status_t *pStatus);
  typedef void ( *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,void *pLocalData,unsigned long ulLocalDataLength,byte *pNetworkData,unsigned long *pulNetworkDataLength,error_status_t *pStatus);
  typedef void ( *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,byte *pNetworkData,unsigned long ulNetworkDataLength,unsigned long ulLocalBufferSize,void *pLocalData,unsigned long *pulLocalDataLength,error_status_t *pStatus);
  typedef void ( *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);

  void RpcCsGetTags(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);

  typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
  } NDR_CS_SIZE_CONVERT_ROUTINES;

  typedef struct _NDR_CS_ROUTINES {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
  } NDR_CS_ROUTINES;

  typedef struct _MIDL_STUB_DESC {
    void *RpcInterfaceInformation;
    void *( *pfnAllocate)(size_t);
    void ( *pfnFree)(void *);
    union {
      handle_t *pAutoHandle;
      handle_t *pPrimitiveHandle;
      PGENERIC_BINDING_INFO pGenericBindingInfo;
    } IMPLICIT_HANDLE_INFO;
    const NDR_RUNDOWN *apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
    const EXPR_EVAL *apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
    const unsigned char *pFormatTypes;
    int fCheckBounds;
    unsigned long Version;
    MALLOC_FREE_STRUCT *pMallocFreeStruct;
    long MIDLVersion;
    const COMM_FAULT_OFFSETS *CommFaultOffsets;
    const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
    const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
    ULONG_PTR mFlags;
    const NDR_CS_ROUTINES *CsRoutineTables;
    void *Reserved4;
    ULONG_PTR Reserved5;
  } MIDL_STUB_DESC;

  typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
  typedef void *PMIDL_XMIT_TYPE;

  typedef struct _MIDL_FORMAT_STRING {
    short Pad;
    unsigned char Format[];
  } MIDL_FORMAT_STRING;

  typedef void ( *STUB_THUNK)(PMIDL_STUB_MESSAGE);
  typedef long ( *SERVER_ROUTINE)();

  typedef struct _MIDL_SERVER_INFO_ {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    const STUB_THUNK *ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
  } MIDL_SERVER_INFO,*PMIDL_SERVER_INFO;

#undef _MIDL_STUBLESS_PROXY_INFO

  typedef struct _MIDL_STUBLESS_PROXY_INFO {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short *FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
  } MIDL_STUBLESS_PROXY_INFO;

  typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;

  struct _MIDL_SYNTAX_INFO {
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    PFORMAT_STRING TypeString;
    const void *aUserMarshalQuadruple;
    ULONG_PTR pReserved1;
    ULONG_PTR pReserved2;
  };

  typedef unsigned short *PARAM_OFFSETTABLE,*PPARAM_OFFSETTABLE;

  typedef union _CLIENT_CALL_RETURN {
    void *Pointer;
    LONG_PTR Simple;
  } CLIENT_CALL_RETURN;

  typedef enum {
    XLAT_SERVER = 1,XLAT_CLIENT
  } XLAT_SIDE;

  typedef struct _FULL_PTR_TO_REFID_ELEMENT {
    struct _FULL_PTR_TO_REFID_ELEMENT *Next;
    void *Pointer;
    unsigned long RefId;
    unsigned char State;
  } FULL_PTR_TO_REFID_ELEMENT,*PFULL_PTR_TO_REFID_ELEMENT;

  typedef struct _FULL_PTR_XLAT_TABLES {

    struct {
      void **XlatTable;
      unsigned char *StateTable;
      unsigned long NumberOfEntries;
    } RefIdToPointer;
    struct {
      PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
      unsigned long NumberOfBuckets;
      unsigned long HashMask;
    } PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
  } FULL_PTR_XLAT_TABLES,*PFULL_PTR_XLAT_TABLES;

  RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr);
  RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr,unsigned long *pPreferSyntaxIndex);
  __attribute__((dllimport)) void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
  __attribute__((dllimport)) unsigned char * NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned char * NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT ContextHandle,int fCheck);
  __attribute__((dllimport)) void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine);
  __attribute__((dllimport)) void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
  __attribute__((dllimport)) unsigned char * NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory,unsigned long CacheSize,unsigned long flags);
  __attribute__((dllimport)) void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg);
  __attribute__((dllimport)) void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg);
  __attribute__((dllimport)) unsigned char * NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) unsigned char * NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
  __attribute__((dllimport)) void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT *pContextHandle,RPC_BINDING_HANDLE BindHandle);
  __attribute__((dllimport)) NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg);
  __attribute__((dllimport)) NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,long NumberParams);
  __attribute__((dllimport)) void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);

#define USER_MARSHAL_FC_BYTE
#define USER_MARSHAL_FC_CHAR
#define USER_MARSHAL_FC_SMALL
#define USER_MARSHAL_FC_USMALL
#define USER_MARSHAL_FC_WCHAR
#define USER_MARSHAL_FC_SHORT
#define USER_MARSHAL_FC_USHORT
#define USER_MARSHAL_FC_LONG
#define USER_MARSHAL_FC_ULONG
#define USER_MARSHAL_FC_FLOAT
#define USER_MARSHAL_FC_HYPER
#define USER_MARSHAL_FC_DOUBLE

  __attribute__((dllimport)) unsigned char * NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags,unsigned char *pBuffer,unsigned char FormatChar);
  __attribute__((dllimport)) void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
  __attribute__((dllimport)) unsigned char * NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
  __attribute__((dllimport)) void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned long RequestedBufferSize);
  __attribute__((dllimport)) void NdrClientInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
  __attribute__((dllimport)) unsigned char * NdrServerInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
  __attribute__((dllimport)) unsigned char * NdrServerInitializeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void NdrServerInitializeMarshall (PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg);
  __attribute__((dllimport)) unsigned char * NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
  __attribute__((dllimport)) unsigned char * NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
  __attribute__((dllimport)) unsigned char * NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd);
  __attribute__((dllimport)) unsigned char * NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd,RPC_BINDING_HANDLE *pAutoHandle);
  __attribute__((dllimport)) void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg);
  __attribute__((dllimport)) RPC_STATUS NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg,RPC_VERSION *pVersion);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);



  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);

  typedef enum {
    STUB_UNMARSHAL,STUB_CALL_SERVER,STUB_MARSHAL,STUB_CALL_SERVER_NO_HRESULT
  } STUB_PHASE;

  typedef enum {
    PROXY_CALCSIZE,PROXY_GETBUFFER,PROXY_MARSHAL,PROXY_SENDRECEIVE,PROXY_UNMARSHAL
  } PROXY_PHASE;

  struct IRpcStubBuffer;

  __attribute__((dllimport)) void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) long NdrAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) long NdrStubCall2(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) void NdrServerCall2(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) long NdrStubCall (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) void NdrServerCall(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) int NdrServerUnmarshall(struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,void *pParamList);
  __attribute__((dllimport)) void NdrServerMarshall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
  __attribute__((dllimport)) RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg,unsigned long *pCommStatus,unsigned long *pFaultStatus,RPC_STATUS Status);
  __attribute__((dllimport)) int NdrSH_UPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,RPC_BUFPTR pBuffer);
  __attribute__((dllimport)) int NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
  __attribute__((dllimport)) int NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
  __attribute__((dllimport)) int NdrSH_IfAlloc(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) int NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) int NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) RPC_BUFPTR NdrSH_IfCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) RPC_BUFPTR NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) unsigned long NdrSH_Copy(unsigned char *pStubMsg,unsigned char *pPtrInMem,unsigned long Count);
  __attribute__((dllimport)) void NdrSH_IfFree(PMIDL_STUB_MESSAGE pMessage,unsigned char *pPtr);
  __attribute__((dllimport)) RPC_BUFPTR NdrSH_StringMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char *pMemory,unsigned long Count,int Size);
  __attribute__((dllimport)) RPC_BUFPTR NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char **pMemory,int Size);

  typedef void *RPC_SS_THREAD_HANDLE;

  typedef void * RPC_CLIENT_ALLOC(size_t Size);
  typedef void RPC_CLIENT_FREE(void *Ptr);

  __attribute__((dllimport)) void * RpcSsAllocate(size_t Size);
  __attribute__((dllimport)) void RpcSsDisableAllocate(void);
  __attribute__((dllimport)) void RpcSsEnableAllocate(void);
  __attribute__((dllimport)) void RpcSsFree(void *NodeToFree);
  __attribute__((dllimport)) RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle(void);
  __attribute__((dllimport)) void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
  __attribute__((dllimport)) void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
  __attribute__((dllimport)) void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
  __attribute__((dllimport)) void * RpcSmAllocate(size_t Size,RPC_STATUS *pStatus);
  __attribute__((dllimport)) RPC_STATUS RpcSmClientFree(void *pNodeToFree);
  __attribute__((dllimport)) RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle);
  __attribute__((dllimport)) RPC_STATUS RpcSmDisableAllocate(void);
  __attribute__((dllimport)) RPC_STATUS RpcSmEnableAllocate(void);
  __attribute__((dllimport)) RPC_STATUS RpcSmFree(void *NodeToFree);
  __attribute__((dllimport)) RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle (RPC_STATUS *pStatus);
  __attribute__((dllimport)) RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
  __attribute__((dllimport)) RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
  __attribute__((dllimport)) RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
  __attribute__((dllimport)) void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage);
  __attribute__((dllimport)) void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage);
  __attribute__((dllimport)) void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage);
  __attribute__((dllimport)) void * NdrRpcSmClientAllocate(size_t Size);
  __attribute__((dllimport)) void NdrRpcSmClientFree(void *NodeToFree);
  __attribute__((dllimport)) void * NdrRpcSsDefaultAllocate(size_t Size);
  __attribute__((dllimport)) void NdrRpcSsDefaultFree(void *NodeToFree);
  __attribute__((dllimport)) PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers,XLAT_SIDE XlatSide);
  __attribute__((dllimport)) void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables);
  __attribute__((dllimport)) int NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES pXlatTables,void *pPointer,unsigned char QueryType,unsigned long *pRefId);
  __attribute__((dllimport)) int NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,unsigned char QueryType,void **ppPointer);
  __attribute__((dllimport)) void NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,void *pPointer);
  __attribute__((dllimport)) int NdrFullPointerFree(PFULL_PTR_XLAT_TABLES pXlatTables,void *Pointer);
  __attribute__((dllimport)) void * NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg,size_t Len);
  __attribute__((dllimport)) void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,void *ArgAddr);
  __attribute__((dllimport)) void * NdrOleAllocate(size_t Size);
  __attribute__((dllimport)) void NdrOleFree(void *NodeToFree);




#define CONST_VTBL






#define MIDL_INTERFACE



#define EXTERN_GUID


  typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
    void *Buffer;
    unsigned long BufferSize;
    void *( *pfnAllocate)(size_t);
    void ( *pfnFree)(void *);
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
  } NDR_USER_MARSHAL_INFO_LEVEL1;

  typedef struct _NDR_USER_MARSHAL_INFO {
    unsigned long InformationLevel;
    __extension__ union {
      NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
  } NDR_USER_MARSHAL_INFO;

  RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags,unsigned long InformationLevel,NDR_USER_MARSHAL_INFO *pMarshalInfo);
  RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub,RPC_SERVER_INTERFACE *pServerIf);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);

  struct IRpcStubBuffer;

  __attribute__((dllimport)) void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) long NdrStubCall3 (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
  __attribute__((dllimport)) void NdrServerCallAll(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void NdrServerCall3(PRPC_MESSAGE pRpcMsg);
  __attribute__((dllimport)) void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
  __attribute__((dllimport)) void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory);
  __attribute__((dllimport)) void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
  __attribute__((dllimport)) void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory,PFORMAT_STRING pFormat);
  void RpcUserFree(handle_t AsyncHandle,void *pBuffer);





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 803 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 2 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3







#define _OLE2_H_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 2 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3


#define _OBJBASE_H_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 14 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 29 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
#define _COMBASEAPI_H_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 32 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3





#define WINOLEAPI
#define WINOLEAPI_
# 86 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
#undef interface
#define interface

#define STDMETHOD
#define STDMETHOD_
#define STDMETHODV
#define STDMETHODV_

#define IFACEMETHOD
#define IFACEMETHOD_
#define IFACEMETHODV
#define IFACEMETHODV_


#define BEGIN_INTERFACE
#define END_INTERFACE


#define PURE
#define THIS_
#define THIS





#undef CONST_VTBL
#define CONST_VTBL
#define DECLARE_INTERFACE

#define DECLARE_INTERFACE_
#define DECLARE_INTERFACE_IID
#define DECLARE_INTERFACE_IID_



#define FARSTRUCT



#define HUGEP




#define LISet32
#define ULISet32

#define CLSCTX_INPROC
#define CLSCTX_ALL
#define CLSCTX_SERVER

typedef enum tagREGCLS {
  REGCLS_SINGLEUSE = 0,
  REGCLS_MULTIPLEUSE = 1,
  REGCLS_MULTI_SEPARATE = 2,
  REGCLS_SUSPENDED = 4,
  REGCLS_SURROGATE = 8
} REGCLS;

typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;

typedef enum tagCOINITBASE {
  COINITBASE_MULTITHREADED = 0x0,
} COINITBASE;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3



#define __wtypesbase_h__





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 1 3




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 6 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/basetsd.h" 2 3
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 24 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 39 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 3
#define __IWinTypesBase_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;
# 68 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 3
typedef WCHAR OLECHAR;
typedef OLECHAR *LPOLESTR;
typedef const OLECHAR *LPCOLESTR;

#define OLESTR
# 89 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 3
typedef unsigned char UCHAR;
typedef short SHORT;
typedef unsigned short USHORT;
typedef DWORD ULONG;
typedef double DOUBLE;
# 184 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 3
typedef struct _COAUTHIDENTITY {
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
} COAUTHIDENTITY;

typedef struct _COAUTHINFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
} COAUTHINFO;

typedef LONG SCODE;
typedef SCODE *PSCODE;
# 232 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 3
typedef enum tagMEMCTX {
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
} MEMCTX;

#define _ROTREGFLAGS_DEFINED

#define ROTREGFLAGS_ALLOWANYCLIENT



#define _APPIDREGFLAGS_DEFINED

#define APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP
#define APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND
#define APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY
#define APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN
#define APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION
#define APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY
#define APPIDREGFLAGS_RESERVED1



#define _DCOMSCM_REMOTECALL_FLAGS_DEFINED

#define DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES
#define DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL
#define DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES
#define DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL
#define DCOMSCM_PING_USE_MID_AUTHNSERVICE
#define DCOMSCM_PING_DISALLOW_UNSECURE_CALL


typedef enum tagCLSCTX {
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_RESERVED1 = 0x40,
    CLSCTX_RESERVED2 = 0x80,
    CLSCTX_RESERVED3 = 0x100,
    CLSCTX_RESERVED4 = 0x200,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_RESERVED5 = 0x800,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_PS_DLL = (int)0x80000000
} CLSCTX;

#define CLSCTX_VALID_MASK

typedef enum tagMSHLFLAGS {
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64
} MSHLFLAGS;

typedef enum tagMSHCTX {
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4
} MSHCTX;

typedef struct _BYTE_BLOB {
    ULONG clSize;
    byte abData[1];
} BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB {
    ULONG clSize;
    unsigned short asData[1];
} WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB {
    ULONG clSize;
    ULONG alData[1];
} DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB {
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
} FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB {
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
} FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR {
    ULONG clSize;
    byte *pData;
} BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR {
    ULONG clSize;
    unsigned short *pData;
} WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR {
    ULONG clSize;
    ULONG *pData;
} DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR {
    ULONG clSize;
    long long *pData;
} HYPER_SIZEDARR;




typedef boolean BOOLEAN;

#define _tagBLOB_DEFINED
#define _BLOB_DEFINED
#define _LPBLOB_DEFINED

typedef struct tagBLOB {
    ULONG cbSize;
    BYTE *pBlobData;
} BLOB;
typedef struct tagBLOB *LPBLOB;
# 154 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3



#define __unknwnbase_h__




#define __IUnknown_FWD_DEFINED__
typedef struct IUnknown IUnknown;



#define __AsyncIUnknown_FWD_DEFINED__
typedef struct AsyncIUnknown AsyncIUnknown;



#define __IClassFactory_FWD_DEFINED__
typedef struct IClassFactory IClassFactory;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3
# 56 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
#define __IUnknown_INTERFACE_DEFINED__

typedef IUnknown *LPUNKNOWN;
# 87 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
extern const GUID IID_IUnknown;
# 110 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
typedef struct IUnknownVtbl {
   


    HRESULT ( *QueryInterface)(
        IUnknown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IUnknown* This);

    ULONG ( *Release)(
        IUnknown* This);

   
} IUnknownVtbl;
struct IUnknown {
    IUnknownVtbl* lpVtbl;
};
# 153 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
HRESULT IUnknown_QueryInterface_Proxy(
    IUnknown* This,
    const IID *const riid,
    void **ppvObject);
void IUnknown_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG IUnknown_AddRef_Proxy(
    IUnknown* This);
void IUnknown_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG IUnknown_Release_Proxy(
    IUnknown* This);
void IUnknown_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 187 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
#define __AsyncIUnknown_INTERFACE_DEFINED__

extern const GUID IID_AsyncIUnknown;
# 217 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
typedef struct AsyncIUnknownVtbl {
   


    HRESULT ( *QueryInterface)(
        AsyncIUnknown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        AsyncIUnknown* This);

    ULONG ( *Release)(
        AsyncIUnknown* This);


    HRESULT ( *Begin_QueryInterface)(
        AsyncIUnknown* This,
        const IID *const riid);

    HRESULT ( *Finish_QueryInterface)(
        AsyncIUnknown* This,
        void **ppvObject);

    HRESULT ( *Begin_AddRef)(
        AsyncIUnknown* This);

    ULONG ( *Finish_AddRef)(
        AsyncIUnknown* This);

    HRESULT ( *Begin_Release)(
        AsyncIUnknown* This);

    ULONG ( *Finish_Release)(
        AsyncIUnknown* This);

   
} AsyncIUnknownVtbl;
struct AsyncIUnknown {
    AsyncIUnknownVtbl* lpVtbl;
};
# 307 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
HRESULT AsyncIUnknown_Begin_QueryInterface_Proxy(
    AsyncIUnknown* This,
    const IID *const riid);
void AsyncIUnknown_Begin_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Finish_QueryInterface_Proxy(
    AsyncIUnknown* This,
    void **ppvObject);
void AsyncIUnknown_Finish_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Begin_AddRef_Proxy(
    AsyncIUnknown* This);
void AsyncIUnknown_Begin_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG AsyncIUnknown_Finish_AddRef_Proxy(
    AsyncIUnknown* This);
void AsyncIUnknown_Finish_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Begin_Release_Proxy(
    AsyncIUnknown* This);
void AsyncIUnknown_Begin_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG AsyncIUnknown_Finish_Release_Proxy(
    AsyncIUnknown* This);
void AsyncIUnknown_Finish_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 361 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
#define __IClassFactory_INTERFACE_DEFINED__

typedef IClassFactory *LPCLASSFACTORY;

extern const GUID IID_IClassFactory;
# 383 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
typedef struct IClassFactoryVtbl {
   


    HRESULT ( *QueryInterface)(
        IClassFactory* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClassFactory* This);

    ULONG ( *Release)(
        IClassFactory* This);


    HRESULT ( *CreateInstance)(
        IClassFactory* This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        void **ppvObject);

    HRESULT ( *LockServer)(
        IClassFactory* This,
        WINBOOL fLock);

   
} IClassFactoryVtbl;
struct IClassFactory {
    IClassFactoryVtbl* lpVtbl;
};
# 447 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 3
HRESULT IClassFactory_RemoteCreateInstance_Proxy(
    IClassFactory* This,
    const IID *const riid,
    IUnknown **ppvObject);
void IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IClassFactory_RemoteLockServer_Proxy(
    IClassFactory* This,
    WINBOOL fLock);
void IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IClassFactory_CreateInstance_Proxy(
    IClassFactory* This,
    IUnknown *pUnkOuter,
    const IID *const riid,
    void **ppvObject);
HRESULT IClassFactory_CreateInstance_Stub(
    IClassFactory* This,
    const IID *const riid,
    IUnknown **ppvObject);
HRESULT IClassFactory_LockServer_Proxy(
    IClassFactory* This,
    WINBOOL fLock);
HRESULT IClassFactory_LockServer_Stub(
    IClassFactory* This,
    WINBOOL fLock);
# 155 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 2 3



#define __objidlbase_h__




#define __IMarshal_FWD_DEFINED__
typedef struct IMarshal IMarshal;



#define __INoMarshal_FWD_DEFINED__
typedef struct INoMarshal INoMarshal;



#define __IAgileObject_FWD_DEFINED__
typedef struct IAgileObject IAgileObject;



#define __IMarshal2_FWD_DEFINED__
typedef struct IMarshal2 IMarshal2;



#define __IMalloc_FWD_DEFINED__
typedef struct IMalloc IMalloc;



#define __IStdMarshalInfo_FWD_DEFINED__
typedef struct IStdMarshalInfo IStdMarshalInfo;



#define __IExternalConnection_FWD_DEFINED__
typedef struct IExternalConnection IExternalConnection;



#define __IMultiQI_FWD_DEFINED__
typedef struct IMultiQI IMultiQI;



#define __AsyncIMultiQI_FWD_DEFINED__
typedef struct AsyncIMultiQI AsyncIMultiQI;



#define __IInternalUnknown_FWD_DEFINED__
typedef struct IInternalUnknown IInternalUnknown;



#define __IEnumUnknown_FWD_DEFINED__
typedef struct IEnumUnknown IEnumUnknown;



#define __IEnumString_FWD_DEFINED__
typedef struct IEnumString IEnumString;



#define __ISequentialStream_FWD_DEFINED__
typedef struct ISequentialStream ISequentialStream;



#define __IStream_FWD_DEFINED__
typedef struct IStream IStream;



#define __IRpcChannelBuffer_FWD_DEFINED__
typedef struct IRpcChannelBuffer IRpcChannelBuffer;



#define __IRpcChannelBuffer2_FWD_DEFINED__
typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;



#define __IAsyncRpcChannelBuffer_FWD_DEFINED__
typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;



#define __IRpcChannelBuffer3_FWD_DEFINED__
typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;



#define __IRpcSyntaxNegotiate_FWD_DEFINED__
typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;



#define __IRpcProxyBuffer_FWD_DEFINED__
typedef struct IRpcProxyBuffer IRpcProxyBuffer;



#define __IRpcStubBuffer_FWD_DEFINED__
typedef struct IRpcStubBuffer IRpcStubBuffer;



#define __IPSFactoryBuffer_FWD_DEFINED__
typedef struct IPSFactoryBuffer IPSFactoryBuffer;



#define __IChannelHook_FWD_DEFINED__
typedef struct IChannelHook IChannelHook;



#define __IClientSecurity_FWD_DEFINED__
typedef struct IClientSecurity IClientSecurity;



#define __IServerSecurity_FWD_DEFINED__
typedef struct IServerSecurity IServerSecurity;



#define __IRpcOptions_FWD_DEFINED__
typedef struct IRpcOptions IRpcOptions;



#define __IGlobalOptions_FWD_DEFINED__
typedef struct IGlobalOptions IGlobalOptions;



#define __ISurrogate_FWD_DEFINED__
typedef struct ISurrogate ISurrogate;



#define __IGlobalInterfaceTable_FWD_DEFINED__
typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;



#define __ISynchronize_FWD_DEFINED__
typedef struct ISynchronize ISynchronize;



#define __ISynchronizeHandle_FWD_DEFINED__
typedef struct ISynchronizeHandle ISynchronizeHandle;



#define __ISynchronizeEvent_FWD_DEFINED__
typedef struct ISynchronizeEvent ISynchronizeEvent;



#define __ISynchronizeContainer_FWD_DEFINED__
typedef struct ISynchronizeContainer ISynchronizeContainer;



#define __ISynchronizeMutex_FWD_DEFINED__
typedef struct ISynchronizeMutex ISynchronizeMutex;



#define __ICancelMethodCalls_FWD_DEFINED__
typedef struct ICancelMethodCalls ICancelMethodCalls;



#define __IAsyncManager_FWD_DEFINED__
typedef struct IAsyncManager IAsyncManager;



#define __ICallFactory_FWD_DEFINED__
typedef struct ICallFactory ICallFactory;



#define __IRpcHelper_FWD_DEFINED__
typedef struct IRpcHelper IRpcHelper;



#define __IReleaseMarshalBuffers_FWD_DEFINED__
typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;



#define __IWaitMultiple_FWD_DEFINED__
typedef struct IWaitMultiple IWaitMultiple;



#define __IAddrTrackingControl_FWD_DEFINED__
typedef struct IAddrTrackingControl IAddrTrackingControl;



#define __IAddrExclusionControl_FWD_DEFINED__
typedef struct IAddrExclusionControl IAddrExclusionControl;



#define __IPipeByte_FWD_DEFINED__
typedef struct IPipeByte IPipeByte;



#define __IPipeLong_FWD_DEFINED__
typedef struct IPipeLong IPipeLong;



#define __IPipeDouble_FWD_DEFINED__
typedef struct IPipeDouble IPipeDouble;



#define __IEnumContextProps_FWD_DEFINED__
typedef struct IEnumContextProps IEnumContextProps;



#define __IContext_FWD_DEFINED__
typedef struct IContext IContext;



#define __IComThreadingInfo_FWD_DEFINED__
typedef struct IComThreadingInfo IComThreadingInfo;



#define __IProcessInitControl_FWD_DEFINED__
typedef struct IProcessInitControl IProcessInitControl;



#define __IFastRundown_FWD_DEFINED__
typedef struct IFastRundown IFastRundown;



#define __IMarshalingStream_FWD_DEFINED__
typedef struct IMarshalingStream IMarshalingStream;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwnbase.h" 2 3
# 278 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 279 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 2 3
# 347 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct _COSERVERINFO {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
} COSERVERINFO;





#define __IMarshal_INTERFACE_DEFINED__

typedef IMarshal *LPMARSHAL;
extern const GUID IID_IMarshal;
# 406 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IMarshalVtbl {
   


    HRESULT ( *QueryInterface)(
        IMarshal* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMarshal* This);

    ULONG ( *Release)(
        IMarshal* This);


    HRESULT ( *GetUnmarshalClass)(
        IMarshal* This,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);

    HRESULT ( *GetMarshalSizeMax)(
        IMarshal* This,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);

    HRESULT ( *MarshalInterface)(
        IMarshal* This,
        IStream *pStm,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);

    HRESULT ( *UnmarshalInterface)(
        IMarshal* This,
        IStream *pStm,
        const IID *const riid,
        void **ppv);

    HRESULT ( *ReleaseMarshalData)(
        IMarshal* This,
        IStream *pStm);

    HRESULT ( *DisconnectObject)(
        IMarshal* This,
        DWORD dwReserved);

   
} IMarshalVtbl;
struct IMarshal {
    IMarshalVtbl* lpVtbl;
};
# 517 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IMarshal_GetUnmarshalClass_Proxy(
    IMarshal* This,
    const IID *const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    CLSID *pCid);
void IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMarshal_GetMarshalSizeMax_Proxy(
    IMarshal* This,
    const IID *const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    DWORD *pSize);
void IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMarshal_MarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID *const riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags);
void IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMarshal_UnmarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID *const riid,
    void **ppv);
void IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMarshal_ReleaseMarshalData_Proxy(
    IMarshal* This,
    IStream *pStm);
void IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMarshal_DisconnectObject_Proxy(
    IMarshal* This,
    DWORD dwReserved);
void IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 590 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __INoMarshal_INTERFACE_DEFINED__

extern const GUID IID_INoMarshal;
# 602 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct INoMarshalVtbl {
   


    HRESULT ( *QueryInterface)(
        INoMarshal* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        INoMarshal* This);

    ULONG ( *Release)(
        INoMarshal* This);

   
} INoMarshalVtbl;
struct INoMarshal {
    INoMarshalVtbl* lpVtbl;
};
# 653 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IAgileObject_INTERFACE_DEFINED__

extern const GUID IID_IAgileObject;
# 665 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IAgileObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IAgileObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAgileObject* This);

    ULONG ( *Release)(
        IAgileObject* This);

   
} IAgileObjectVtbl;
struct IAgileObject {
    IAgileObjectVtbl* lpVtbl;
};
# 718 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IMarshal2_INTERFACE_DEFINED__

typedef IMarshal2 *LPMARSHAL2;
extern const GUID IID_IMarshal2;
# 731 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IMarshal2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IMarshal2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMarshal2* This);

    ULONG ( *Release)(
        IMarshal2* This);


    HRESULT ( *GetUnmarshalClass)(
        IMarshal2* This,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);

    HRESULT ( *GetMarshalSizeMax)(
        IMarshal2* This,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);

    HRESULT ( *MarshalInterface)(
        IMarshal2* This,
        IStream *pStm,
        const IID *const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);

    HRESULT ( *UnmarshalInterface)(
        IMarshal2* This,
        IStream *pStm,
        const IID *const riid,
        void **ppv);

    HRESULT ( *ReleaseMarshalData)(
        IMarshal2* This,
        IStream *pStm);

    HRESULT ( *DisconnectObject)(
        IMarshal2* This,
        DWORD dwReserved);

   
} IMarshal2Vtbl;
struct IMarshal2 {
    IMarshal2Vtbl* lpVtbl;
};
# 850 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IMalloc_INTERFACE_DEFINED__

typedef IMalloc *LPMALLOC;

extern const GUID IID_IMalloc;
# 883 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IMallocVtbl {
   


    HRESULT ( *QueryInterface)(
        IMalloc* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMalloc* This);

    ULONG ( *Release)(
        IMalloc* This);


    void * ( *Alloc)(
        IMalloc* This,
        SIZE_T cb);

    void * ( *Realloc)(
        IMalloc* This,
        void *pv,
        SIZE_T cb);

    void ( *Free)(
        IMalloc* This,
        void *pv);

    SIZE_T ( *GetSize)(
        IMalloc* This,
        void *pv);

    int ( *DidAlloc)(
        IMalloc* This,
        void *pv);

    void ( *HeapMinimize)(
        IMalloc* This);

   
} IMallocVtbl;
struct IMalloc {
    IMallocVtbl* lpVtbl;
};
# 977 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
void * IMalloc_Alloc_Proxy(
    IMalloc* This,
    SIZE_T cb);
void IMalloc_Alloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMalloc_Realloc_Proxy(
    IMalloc* This,
    void *pv,
    SIZE_T cb);
void IMalloc_Realloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IMalloc_Free_Proxy(
    IMalloc* This,
    void *pv);
void IMalloc_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T IMalloc_GetSize_Proxy(
    IMalloc* This,
    void *pv);
void IMalloc_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int IMalloc_DidAlloc_Proxy(
    IMalloc* This,
    void *pv);
void IMalloc_DidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IMalloc_HeapMinimize_Proxy(
    IMalloc* This);
void IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1033 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IStdMarshalInfo_INTERFACE_DEFINED__

typedef IStdMarshalInfo *LPSTDMARSHALINFO;

extern const GUID IID_IStdMarshalInfo;
# 1052 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IStdMarshalInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IStdMarshalInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStdMarshalInfo* This);

    ULONG ( *Release)(
        IStdMarshalInfo* This);


    HRESULT ( *GetClassForHandler)(
        IStdMarshalInfo* This,
        DWORD dwDestContext,
        void *pvDestContext,
        CLSID *pClsid);

   
} IStdMarshalInfoVtbl;
struct IStdMarshalInfo {
    IStdMarshalInfoVtbl* lpVtbl;
};
# 1108 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IStdMarshalInfo_GetClassForHandler_Proxy(
    IStdMarshalInfo* This,
    DWORD dwDestContext,
    void *pvDestContext,
    CLSID *pClsid);
void IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1126 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IExternalConnection_INTERFACE_DEFINED__

typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef enum tagEXTCONN {
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
} EXTCONN;

extern const GUID IID_IExternalConnection;
# 1155 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IExternalConnectionVtbl {
   


    HRESULT ( *QueryInterface)(
        IExternalConnection* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IExternalConnection* This);

    ULONG ( *Release)(
        IExternalConnection* This);


    DWORD ( *AddConnection)(
        IExternalConnection* This,
        DWORD extconn,
        DWORD reserved);

    DWORD ( *ReleaseConnection)(
        IExternalConnection* This,
        DWORD extconn,
        DWORD reserved,
        WINBOOL fLastReleaseCloses);

   
} IExternalConnectionVtbl;
struct IExternalConnection {
    IExternalConnectionVtbl* lpVtbl;
};
# 1220 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
DWORD IExternalConnection_AddConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved);
void IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD IExternalConnection_ReleaseConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved,
    WINBOOL fLastReleaseCloses);
void IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




typedef IMultiQI *LPMULTIQI;



typedef struct tagMULTI_QI {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
} MULTI_QI;





#define __IMultiQI_INTERFACE_DEFINED__

extern const GUID IID_IMultiQI;
# 1273 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IMultiQIVtbl {
   


    HRESULT ( *QueryInterface)(
        IMultiQI* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMultiQI* This);

    ULONG ( *Release)(
        IMultiQI* This);


    HRESULT ( *QueryMultipleInterfaces)(
        IMultiQI* This,
        ULONG cMQIs,
        MULTI_QI *pMQIs);

   
} IMultiQIVtbl;
struct IMultiQI {
    IMultiQIVtbl* lpVtbl;
};
# 1328 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IMultiQI_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __AsyncIMultiQI_INTERFACE_DEFINED__

extern const GUID IID_AsyncIMultiQI;
# 1363 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct AsyncIMultiQIVtbl {
   


    HRESULT ( *QueryInterface)(
        AsyncIMultiQI* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        AsyncIMultiQI* This);

    ULONG ( *Release)(
        AsyncIMultiQI* This);


    void ( *Begin_QueryMultipleInterfaces)(
        AsyncIMultiQI* This,
        ULONG cMQIs,
        MULTI_QI *pMQIs);

    HRESULT ( *Finish_QueryMultipleInterfaces)(
        AsyncIMultiQI* This,
        MULTI_QI *pMQIs);

   
} AsyncIMultiQIVtbl;
struct AsyncIMultiQI {
    AsyncIMultiQIVtbl* lpVtbl;
};
# 1426 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1454 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IInternalUnknown_INTERFACE_DEFINED__

extern const GUID IID_IInternalUnknown;
# 1470 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IInternalUnknownVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternalUnknown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternalUnknown* This);

    ULONG ( *Release)(
        IInternalUnknown* This);


    HRESULT ( *QueryInternalInterface)(
        IInternalUnknown* This,
        const IID *const riid,
        void **ppv);

   
} IInternalUnknownVtbl;
struct IInternalUnknown {
    IInternalUnknownVtbl* lpVtbl;
};
# 1525 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IInternalUnknown_QueryInternalInterface_Proxy(
    IInternalUnknown* This,
    const IID *const riid,
    void **ppv);
void IInternalUnknown_QueryInternalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1544 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IEnumUnknown_INTERFACE_DEFINED__

typedef IEnumUnknown *LPENUMUNKNOWN;

extern const GUID IID_IEnumUnknown;
# 1572 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IEnumUnknownVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumUnknown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumUnknown* This);

    ULONG ( *Release)(
        IEnumUnknown* This);


    HRESULT ( *Next)(
        IEnumUnknown* This,
        ULONG celt,
        IUnknown **rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumUnknown* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumUnknown* This);

    HRESULT ( *Clone)(
        IEnumUnknown* This,
        IEnumUnknown **ppenum);

   
} IEnumUnknownVtbl;
struct IEnumUnknown {
    IEnumUnknownVtbl* lpVtbl;
};
# 1651 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IEnumUnknown_RemoteNext_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
void IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Skip_Proxy(
    IEnumUnknown* This,
    ULONG celt);
void IEnumUnknown_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Reset_Proxy(
    IEnumUnknown* This);
void IEnumUnknown_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Clone_Proxy(
    IEnumUnknown* This,
    IEnumUnknown **ppenum);
void IEnumUnknown_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Next_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
HRESULT IEnumUnknown_Next_Stub(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
# 1702 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IEnumString_INTERFACE_DEFINED__

typedef IEnumString *LPENUMSTRING;

extern const GUID IID_IEnumString;
# 1730 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IEnumStringVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumString* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumString* This);

    ULONG ( *Release)(
        IEnumString* This);


    HRESULT ( *Next)(
        IEnumString* This,
        ULONG celt,
        LPOLESTR *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumString* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumString* This);

    HRESULT ( *Clone)(
        IEnumString* This,
        IEnumString **ppenum);

   
} IEnumStringVtbl;
struct IEnumString {
    IEnumStringVtbl* lpVtbl;
};
# 1809 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IEnumString_RemoteNext_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
void IEnumString_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumString_Skip_Proxy(
    IEnumString* This,
    ULONG celt);
void IEnumString_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumString_Reset_Proxy(
    IEnumString* This);
void IEnumString_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumString_Clone_Proxy(
    IEnumString* This,
    IEnumString **ppenum);
void IEnumString_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumString_Next_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumString_Next_Stub(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
# 1860 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISequentialStream_INTERFACE_DEFINED__

extern const GUID IID_ISequentialStream;
# 1882 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISequentialStreamVtbl {
   


    HRESULT ( *QueryInterface)(
        ISequentialStream* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISequentialStream* This);

    ULONG ( *Release)(
        ISequentialStream* This);


    HRESULT ( *Read)(
        ISequentialStream* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Write)(
        ISequentialStream* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

   
} ISequentialStreamVtbl;
struct ISequentialStream {
    ISequentialStreamVtbl* lpVtbl;
};
# 1948 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISequentialStream_RemoteRead_Proxy(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISequentialStream_RemoteWrite_Proxy(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISequentialStream_Read_Proxy(
    ISequentialStream* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT ISequentialStream_Read_Stub(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT ISequentialStream_Write_Proxy(
    ISequentialStream* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT ISequentialStream_Write_Stub(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
# 1996 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IStream_INTERFACE_DEFINED__

typedef IStream *LPSTREAM;

typedef struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;

typedef enum tagSTGTY {
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
} STGTY;

typedef enum tagSTREAM_SEEK {
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;

typedef enum tagLOCKTYPE {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
} LOCKTYPE;

extern const GUID IID_IStream;
# 2080 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IStreamVtbl {
   


    HRESULT ( *QueryInterface)(
        IStream* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStream* This);

    ULONG ( *Release)(
        IStream* This);


    HRESULT ( *Read)(
        IStream* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Write)(
        IStream* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);


    HRESULT ( *Seek)(
        IStream* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT ( *SetSize)(
        IStream* This,
        ULARGE_INTEGER libNewSize);

    HRESULT ( *CopyTo)(
        IStream* This,
        IStream *pstm,
        ULARGE_INTEGER cb,
        ULARGE_INTEGER *pcbRead,
        ULARGE_INTEGER *pcbWritten);

    HRESULT ( *Commit)(
        IStream* This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IStream* This);

    HRESULT ( *LockRegion)(
        IStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *UnlockRegion)(
        IStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *Stat)(
        IStream* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    HRESULT ( *Clone)(
        IStream* This,
        IStream **ppstm);

   
} IStreamVtbl;
struct IStream {
    IStreamVtbl* lpVtbl;
};
# 2230 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IStream_RemoteSeek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void IStream_RemoteSeek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_SetSize_Proxy(
    IStream* This,
    ULARGE_INTEGER libNewSize);
void IStream_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_RemoteCopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
void IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_Commit_Proxy(
    IStream* This,
    DWORD grfCommitFlags);
void IStream_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_Revert_Proxy(
    IStream* This);
void IStream_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_LockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void IStream_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_UnlockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void IStream_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_Stat_Proxy(
    IStream* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void IStream_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_Clone_Proxy(
    IStream* This,
    IStream **ppstm);
void IStream_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStream_Seek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT IStream_Seek_Stub(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT IStream_CopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
HRESULT IStream_CopyTo_Stub(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
# 2341 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcChannelBuffer_INTERFACE_DEFINED__

typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void * reserved2[5];
    ULONG rpcFlags;
} RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;

extern const GUID IID_IRpcChannelBuffer;
# 2385 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcChannelBufferVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer* This);

    ULONG ( *Release)(
        IRpcChannelBuffer* This);


    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        const IID *const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer* This);

   
} IRpcChannelBufferVtbl;
struct IRpcChannelBuffer {
    IRpcChannelBufferVtbl* lpVtbl;
};
# 2473 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcChannelBuffer_GetBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    const IID *const riid);
void IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_SendReceive_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    ULONG *pStatus);
void IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_FreeBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage);
void IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_GetDestCtx_Proxy(
    IRpcChannelBuffer* This,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_IsConnected_Proxy(
    IRpcChannelBuffer* This);
void IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2525 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcChannelBuffer2_INTERFACE_DEFINED__

extern const GUID IID_IRpcChannelBuffer2;
# 2540 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcChannelBuffer2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer2* This);

    ULONG ( *Release)(
        IRpcChannelBuffer2* This);


    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage,
        const IID *const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer2* This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer2* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer2* This);


    HRESULT ( *GetProtocolVersion)(
        IRpcChannelBuffer2* This,
        DWORD *pdwVersion);

   
} IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer2 {
    IRpcChannelBuffer2Vtbl* lpVtbl;
};
# 2639 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcChannelBuffer2_GetProtocolVersion_Proxy(
    IRpcChannelBuffer2* This,
    DWORD *pdwVersion);
void IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2655 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IAsyncRpcChannelBuffer_INTERFACE_DEFINED__

extern const GUID IID_IAsyncRpcChannelBuffer;
# 2681 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IAsyncRpcChannelBufferVtbl {
   


    HRESULT ( *QueryInterface)(
        IAsyncRpcChannelBuffer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAsyncRpcChannelBuffer* This);

    ULONG ( *Release)(
        IAsyncRpcChannelBuffer* This);


    HRESULT ( *GetBuffer)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        const IID *const riid);

    HRESULT ( *SendReceive)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IAsyncRpcChannelBuffer* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IAsyncRpcChannelBuffer* This);


    HRESULT ( *GetProtocolVersion)(
        IAsyncRpcChannelBuffer* This,
        DWORD *pdwVersion);


    HRESULT ( *Send)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        ISynchronize *pSync,
        ULONG *pulStatus);

    HRESULT ( *Receive)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);

    HRESULT ( *GetDestCtxEx)(
        IAsyncRpcChannelBuffer* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);

   
} IAsyncRpcChannelBufferVtbl;
struct IAsyncRpcChannelBuffer {
    IAsyncRpcChannelBufferVtbl* lpVtbl;
};
# 2812 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IAsyncRpcChannelBuffer_Send_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ISynchronize *pSync,
    ULONG *pulStatus);
void IAsyncRpcChannelBuffer_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAsyncRpcChannelBuffer_Receive_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void IAsyncRpcChannelBuffer_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2849 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcChannelBuffer3_INTERFACE_DEFINED__

extern const GUID IID_IRpcChannelBuffer3;
# 2891 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcChannelBuffer3Vtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer3* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer3* This);

    ULONG ( *Release)(
        IRpcChannelBuffer3* This);


    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage,
        const IID *const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer3* This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer3* This);


    HRESULT ( *GetProtocolVersion)(
        IRpcChannelBuffer3* This,
        DWORD *pdwVersion);


    HRESULT ( *Send)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);

    HRESULT ( *Receive)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        ULONG ulSize,
        ULONG *pulStatus);

    HRESULT ( *Cancel)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg);

    HRESULT ( *GetCallContext)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        const IID *const riid,
        void **pInterface);

    HRESULT ( *GetDestCtxEx)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *GetState)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pState);

    HRESULT ( *RegisterAsync)(
        IRpcChannelBuffer3* This,
        RPCOLEMESSAGE *pMsg,
        IAsyncManager *pAsyncMgr);

   
} IRpcChannelBuffer3Vtbl;
struct IRpcChannelBuffer3 {
    IRpcChannelBuffer3Vtbl* lpVtbl;
};
# 3058 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcChannelBuffer3_Send_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_Receive_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG ulSize,
    ULONG *pulStatus);
void IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_Cancel_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg);
void IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetCallContext_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    const IID *const riid,
    void **pInterface);
void IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetDestCtxEx_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetState_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pState);
void IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_RegisterAsync_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    IAsyncManager *pAsyncMgr);
void IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3131 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcSyntaxNegotiate_INTERFACE_DEFINED__

extern const GUID IID_IRpcSyntaxNegotiate;
# 3146 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcSyntaxNegotiateVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcSyntaxNegotiate* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcSyntaxNegotiate* This);

    ULONG ( *Release)(
        IRpcSyntaxNegotiate* This);


    HRESULT ( *NegotiateSyntax)(
        IRpcSyntaxNegotiate* This,
        RPCOLEMESSAGE *pMsg);

   
} IRpcSyntaxNegotiateVtbl;
struct IRpcSyntaxNegotiate {
    IRpcSyntaxNegotiateVtbl* lpVtbl;
};
# 3200 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(
    IRpcSyntaxNegotiate* This,
    RPCOLEMESSAGE *pMsg);
void IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3216 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcProxyBuffer_INTERFACE_DEFINED__

extern const GUID IID_IRpcProxyBuffer;
# 3234 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcProxyBufferVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcProxyBuffer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcProxyBuffer* This);

    ULONG ( *Release)(
        IRpcProxyBuffer* This);


    HRESULT ( *Connect)(
        IRpcProxyBuffer* This,
        IRpcChannelBuffer *pRpcChannelBuffer);

    void ( *Disconnect)(
        IRpcProxyBuffer* This);

   
} IRpcProxyBufferVtbl;
struct IRpcProxyBuffer {
    IRpcProxyBufferVtbl* lpVtbl;
};
# 3295 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcProxyBuffer_Connect_Proxy(
    IRpcProxyBuffer* This,
    IRpcChannelBuffer *pRpcChannelBuffer);
void IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IRpcProxyBuffer_Disconnect_Proxy(
    IRpcProxyBuffer* This);
void IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3320 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcStubBuffer_INTERFACE_DEFINED__

extern const GUID IID_IRpcStubBuffer;
# 3354 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcStubBufferVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcStubBuffer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcStubBuffer* This);

    ULONG ( *Release)(
        IRpcStubBuffer* This);


    HRESULT ( *Connect)(
        IRpcStubBuffer* This,
        IUnknown *pUnkServer);

    void ( *Disconnect)(
        IRpcStubBuffer* This);

    HRESULT ( *Invoke)(
        IRpcStubBuffer* This,
        RPCOLEMESSAGE *_prpcmsg,
        IRpcChannelBuffer *_pRpcChannelBuffer);

    IRpcStubBuffer * ( *IsIIDSupported)(
        IRpcStubBuffer* This,
        const IID *const riid);

    ULONG ( *CountRefs)(
        IRpcStubBuffer* This);

    HRESULT ( *DebugServerQueryInterface)(
        IRpcStubBuffer* This,
        void **ppv);

    void ( *DebugServerRelease)(
        IRpcStubBuffer* This,
        void *pv);

   
} IRpcStubBufferVtbl;
struct IRpcStubBuffer {
    IRpcStubBufferVtbl* lpVtbl;
};
# 3455 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcStubBuffer_Connect_Proxy(
    IRpcStubBuffer* This,
    IUnknown *pUnkServer);
void IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IRpcStubBuffer_Disconnect_Proxy(
    IRpcStubBuffer* This);
void IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcStubBuffer_Invoke_Proxy(
    IRpcStubBuffer* This,
    RPCOLEMESSAGE *_prpcmsg,
    IRpcChannelBuffer *_pRpcChannelBuffer);
void IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
IRpcStubBuffer * IRpcStubBuffer_IsIIDSupported_Proxy(
    IRpcStubBuffer* This,
    const IID *const riid);
void IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG IRpcStubBuffer_CountRefs_Proxy(
    IRpcStubBuffer* This);
void IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    IRpcStubBuffer* This,
    void **ppv);
void IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IRpcStubBuffer_DebugServerRelease_Proxy(
    IRpcStubBuffer* This,
    void *pv);
void IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3518 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IPSFactoryBuffer_INTERFACE_DEFINED__

extern const GUID IID_IPSFactoryBuffer;
# 3541 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IPSFactoryBufferVtbl {
   


    HRESULT ( *QueryInterface)(
        IPSFactoryBuffer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPSFactoryBuffer* This);

    ULONG ( *Release)(
        IPSFactoryBuffer* This);


    HRESULT ( *CreateProxy)(
        IPSFactoryBuffer* This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        IRpcProxyBuffer **ppProxy,
        void **ppv);

    HRESULT ( *CreateStub)(
        IPSFactoryBuffer* This,
        const IID *const riid,
        IUnknown *pUnkServer,
        IRpcStubBuffer **ppStub);

   
} IPSFactoryBufferVtbl;
struct IPSFactoryBuffer {
    IPSFactoryBufferVtbl* lpVtbl;
};
# 3608 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IPSFactoryBuffer_CreateProxy_Proxy(
    IPSFactoryBuffer* This,
    IUnknown *pUnkOuter,
    const IID *const riid,
    IRpcProxyBuffer **ppProxy,
    void **ppv);
void IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPSFactoryBuffer_CreateStub_Proxy(
    IPSFactoryBuffer* This,
    const IID *const riid,
    IUnknown *pUnkServer,
    IRpcStubBuffer **ppStub);
void IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







typedef struct SChannelHookCallInfo {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
} SChannelHookCallInfo;





#define __IChannelHook_INTERFACE_DEFINED__

extern const GUID IID_IChannelHook;
# 3700 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IChannelHookVtbl {
   


    HRESULT ( *QueryInterface)(
        IChannelHook* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IChannelHook* This);

    ULONG ( *Release)(
        IChannelHook* This);


    void ( *ClientGetSize)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        ULONG *pDataSize);

    void ( *ClientFillBuffer)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        ULONG *pDataSize,
        void *pDataBuffer);

    void ( *ClientNotify)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep,
        HRESULT hrFault);

    void ( *ServerNotify)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep);

    void ( *ServerGetSize)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        HRESULT hrFault,
        ULONG *pDataSize);

    void ( *ServerFillBuffer)(
        IChannelHook* This,
        const GUID *const uExtent,
        const IID *const riid,
        ULONG *pDataSize,
        void *pDataBuffer,
        HRESULT hrFault);

   
} IChannelHookVtbl;
struct IChannelHook {
    IChannelHookVtbl* lpVtbl;
};
# 3815 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
void IChannelHook_ClientGetSize_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    ULONG *pDataSize);
void IChannelHook_ClientGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IChannelHook_ClientFillBuffer_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    ULONG *pDataSize,
    void *pDataBuffer);
void IChannelHook_ClientFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IChannelHook_ClientNotify_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep,
    HRESULT hrFault);
void IChannelHook_ClientNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IChannelHook_ServerNotify_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep);
void IChannelHook_ServerNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IChannelHook_ServerGetSize_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    HRESULT hrFault,
    ULONG *pDataSize);
void IChannelHook_ServerGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IChannelHook_ServerFillBuffer_Proxy(
    IChannelHook* This,
    const GUID *const uExtent,
    const IID *const riid,
    ULONG *pDataSize,
    void *pDataBuffer,
    HRESULT hrFault);
void IChannelHook_ServerFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3896 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IClientSecurity_INTERFACE_DEFINED__

typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_DEFAULT = 0x800,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000,
    EOAC_DISABLE_AAA = 0x1000
} EOLE_AUTHENTICATION_CAPABILITIES;

#define COLE_DEFAULT_PRINCIPAL

#define COLE_DEFAULT_AUTHINFO


typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
} SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
} SOLE_AUTHENTICATION_LIST;
typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;

extern const GUID IID_IClientSecurity;
# 3977 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IClientSecurityVtbl {
   


    HRESULT ( *QueryInterface)(
        IClientSecurity* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClientSecurity* This);

    ULONG ( *Release)(
        IClientSecurity* This);


    HRESULT ( *QueryBlanket)(
        IClientSecurity* This,
        IUnknown *pProxy,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pAuthInfo,
        DWORD *pCapabilites);

    HRESULT ( *SetBlanket)(
        IClientSecurity* This,
        IUnknown *pProxy,
        DWORD dwAuthnSvc,
        DWORD dwAuthzSvc,
        OLECHAR *pServerPrincName,
        DWORD dwAuthnLevel,
        DWORD dwImpLevel,
        void *pAuthInfo,
        DWORD dwCapabilities);

    HRESULT ( *CopyProxy)(
        IClientSecurity* This,
        IUnknown *pProxy,
        IUnknown **ppCopy);

   
} IClientSecurityVtbl;
struct IClientSecurity {
    IClientSecurityVtbl* lpVtbl;
};
# 4062 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IClientSecurity_QueryBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pAuthInfo,
    DWORD *pCapabilites);
void IClientSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IClientSecurity_SetBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD dwAuthnSvc,
    DWORD dwAuthzSvc,
    OLECHAR *pServerPrincName,
    DWORD dwAuthnLevel,
    DWORD dwImpLevel,
    void *pAuthInfo,
    DWORD dwCapabilities);
void IClientSecurity_SetBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IClientSecurity_CopyProxy_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    IUnknown **ppCopy);
void IClientSecurity_CopyProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4111 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IServerSecurity_INTERFACE_DEFINED__

extern const GUID IID_IServerSecurity;
# 4141 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IServerSecurityVtbl {
   


    HRESULT ( *QueryInterface)(
        IServerSecurity* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IServerSecurity* This);

    ULONG ( *Release)(
        IServerSecurity* This);


    HRESULT ( *QueryBlanket)(
        IServerSecurity* This,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pPrivs,
        DWORD *pCapabilities);

    HRESULT ( *ImpersonateClient)(
        IServerSecurity* This);

    HRESULT ( *RevertToSelf)(
        IServerSecurity* This);

    WINBOOL ( *IsImpersonating)(
        IServerSecurity* This);

   
} IServerSecurityVtbl;
struct IServerSecurity {
    IServerSecurityVtbl* lpVtbl;
};
# 4222 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IServerSecurity_QueryBlanket_Proxy(
    IServerSecurity* This,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pPrivs,
    DWORD *pCapabilities);
void IServerSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IServerSecurity_ImpersonateClient_Proxy(
    IServerSecurity* This);
void IServerSecurity_ImpersonateClient_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IServerSecurity_RevertToSelf_Proxy(
    IServerSecurity* This);
void IServerSecurity_RevertToSelf_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL IServerSecurity_IsImpersonating_Proxy(
    IServerSecurity* This);
void IServerSecurity_IsImpersonating_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




typedef enum tagRPCOPT_PROPERTIES {
    COMBND_RPCTIMEOUT = 0x1,
    COMBND_SERVER_LOCALITY = 0x2,
    COMBND_RESERVED1 = 0x4
} RPCOPT_PROPERTIES;

typedef enum tagRPCOPT_SERVER_LOCALITY_VALUES {
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
} RPCOPT_SERVER_LOCALITY_VALUES;





#define __IRpcOptions_INTERFACE_DEFINED__

extern const GUID IID_IRpcOptions;
# 4299 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcOptionsVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcOptions* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcOptions* This);

    ULONG ( *Release)(
        IRpcOptions* This);


    HRESULT ( *Set)(
        IRpcOptions* This,
        IUnknown *pPrx,
        RPCOPT_PROPERTIES dwProperty,
        ULONG_PTR dwValue);

    HRESULT ( *Query)(
        IRpcOptions* This,
        IUnknown *pPrx,
        RPCOPT_PROPERTIES dwProperty,
        ULONG_PTR *pdwValue);

   
} IRpcOptionsVtbl;
struct IRpcOptions {
    IRpcOptionsVtbl* lpVtbl;
};
# 4365 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcOptions_Set_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    RPCOPT_PROPERTIES dwProperty,
    ULONG_PTR dwValue);
void IRpcOptions_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcOptions_Query_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    RPCOPT_PROPERTIES dwProperty,
    ULONG_PTR *pdwValue);
void IRpcOptions_Query_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






typedef enum tagGLOBALOPT_PROPERTIES {
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5
} GLOBALOPT_PROPERTIES;

typedef enum tagGLOBALOPT_EH_VALUES {
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
} GLOBALOPT_EH_VALUES;

typedef enum tagGLOBALOPT_RPCTP_VALUES {
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
} GLOBALOPT_RPCTP_VALUES;

typedef enum tagGLOBALOPT_RO_FLAGS {
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
    COMGLB_FAST_RUNDOWN = 0x8,
    COMGLB_RESERVED1 = 0x10,
    COMGLB_RESERVED2 = 0x20,
    COMGLB_RESERVED3 = 0x40,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80
} GLOBALOPT_RO_FLAGS;

typedef enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
} GLOBALOPT_UNMARSHALING_POLICY_VALUES;





#define __IGlobalOptions_INTERFACE_DEFINED__

extern const GUID IID_IGlobalOptions;
# 4452 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IGlobalOptionsVtbl {
   


    HRESULT ( *QueryInterface)(
        IGlobalOptions* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IGlobalOptions* This);

    ULONG ( *Release)(
        IGlobalOptions* This);


    HRESULT ( *Set)(
        IGlobalOptions* This,
        GLOBALOPT_PROPERTIES dwProperty,
        ULONG_PTR dwValue);

    HRESULT ( *Query)(
        IGlobalOptions* This,
        GLOBALOPT_PROPERTIES dwProperty,
        ULONG_PTR *pdwValue);

   
} IGlobalOptionsVtbl;
struct IGlobalOptions {
    IGlobalOptionsVtbl* lpVtbl;
};
# 4516 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IGlobalOptions_Set_Proxy(
    IGlobalOptions* This,
    GLOBALOPT_PROPERTIES dwProperty,
    ULONG_PTR dwValue);
void IGlobalOptions_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IGlobalOptions_Query_Proxy(
    IGlobalOptions* This,
    GLOBALOPT_PROPERTIES dwProperty,
    ULONG_PTR *pdwValue);
void IGlobalOptions_Query_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4545 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISurrogate_INTERFACE_DEFINED__

typedef ISurrogate *LPSURROGATE;

extern const GUID IID_ISurrogate;
# 4565 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISurrogateVtbl {
   


    HRESULT ( *QueryInterface)(
        ISurrogate* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISurrogate* This);

    ULONG ( *Release)(
        ISurrogate* This);


    HRESULT ( *LoadDllServer)(
        ISurrogate* This,
        const IID *const Clsid);

    HRESULT ( *FreeSurrogate)(
        ISurrogate* This);

   
} ISurrogateVtbl;
struct ISurrogate {
    ISurrogateVtbl* lpVtbl;
};
# 4626 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISurrogate_LoadDllServer_Proxy(
    ISurrogate* This,
    const IID *const Clsid);
void ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISurrogate_FreeSurrogate_Proxy(
    ISurrogate* This);
void ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4649 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IGlobalInterfaceTable_INTERFACE_DEFINED__

typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;

extern const GUID IID_IGlobalInterfaceTable;
# 4676 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IGlobalInterfaceTableVtbl {
   


    HRESULT ( *QueryInterface)(
        IGlobalInterfaceTable* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IGlobalInterfaceTable* This);

    ULONG ( *Release)(
        IGlobalInterfaceTable* This);


    HRESULT ( *RegisterInterfaceInGlobal)(
        IGlobalInterfaceTable* This,
        IUnknown *pUnk,
        const IID *const riid,
        DWORD *pdwCookie);

    HRESULT ( *RevokeInterfaceFromGlobal)(
        IGlobalInterfaceTable* This,
        DWORD dwCookie);

    HRESULT ( *GetInterfaceFromGlobal)(
        IGlobalInterfaceTable* This,
        DWORD dwCookie,
        const IID *const riid,
        void **ppv);

   
} IGlobalInterfaceTableVtbl;
struct IGlobalInterfaceTable {
    IGlobalInterfaceTableVtbl* lpVtbl;
};
# 4750 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(
    IGlobalInterfaceTable* This,
    IUnknown *pUnk,
    const IID *const riid,
    DWORD *pdwCookie);
void IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie);
void IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie,
    const IID *const riid,
    void **ppv);
void IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4788 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISynchronize_INTERFACE_DEFINED__

extern const GUID IID_ISynchronize;
# 4810 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISynchronizeVtbl {
   


    HRESULT ( *QueryInterface)(
        ISynchronize* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronize* This);

    ULONG ( *Release)(
        ISynchronize* This);


    HRESULT ( *Wait)(
        ISynchronize* This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT ( *Signal)(
        ISynchronize* This);

    HRESULT ( *Reset)(
        ISynchronize* This);

   
} ISynchronizeVtbl;
struct ISynchronize {
    ISynchronizeVtbl* lpVtbl;
};
# 4879 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISynchronize_Wait_Proxy(
    ISynchronize* This,
    DWORD dwFlags,
    DWORD dwMilliseconds);
void ISynchronize_Wait_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISynchronize_Signal_Proxy(
    ISynchronize* This);
void ISynchronize_Signal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISynchronize_Reset_Proxy(
    ISynchronize* This);
void ISynchronize_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4910 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISynchronizeHandle_INTERFACE_DEFINED__

extern const GUID IID_ISynchronizeHandle;
# 4925 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISynchronizeHandleVtbl {
   


    HRESULT ( *QueryInterface)(
        ISynchronizeHandle* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeHandle* This);

    ULONG ( *Release)(
        ISynchronizeHandle* This);


    HRESULT ( *GetHandle)(
        ISynchronizeHandle* This,
        HANDLE *ph);

   
} ISynchronizeHandleVtbl;
struct ISynchronizeHandle {
    ISynchronizeHandleVtbl* lpVtbl;
};
# 4979 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISynchronizeHandle_GetHandle_Proxy(
    ISynchronizeHandle* This,
    HANDLE *ph);
void ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4995 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISynchronizeEvent_INTERFACE_DEFINED__

extern const GUID IID_ISynchronizeEvent;
# 5010 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISynchronizeEventVtbl {
   


    HRESULT ( *QueryInterface)(
        ISynchronizeEvent* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeEvent* This);

    ULONG ( *Release)(
        ISynchronizeEvent* This);


    HRESULT ( *GetHandle)(
        ISynchronizeEvent* This,
        HANDLE *ph);


    HRESULT ( *SetEventHandle)(
        ISynchronizeEvent* This,
        HANDLE *ph);

   
} ISynchronizeEventVtbl;
struct ISynchronizeEvent {
    ISynchronizeEventVtbl* lpVtbl;
};
# 5075 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISynchronizeEvent_SetEventHandle_Proxy(
    ISynchronizeEvent* This,
    HANDLE *ph);
void ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5091 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISynchronizeContainer_INTERFACE_DEFINED__

extern const GUID IID_ISynchronizeContainer;
# 5111 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISynchronizeContainerVtbl {
   


    HRESULT ( *QueryInterface)(
        ISynchronizeContainer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeContainer* This);

    ULONG ( *Release)(
        ISynchronizeContainer* This);


    HRESULT ( *AddSynchronize)(
        ISynchronizeContainer* This,
        ISynchronize *pSync);

    HRESULT ( *WaitMultiple)(
        ISynchronizeContainer* This,
        DWORD dwFlags,
        DWORD dwTimeOut,
        ISynchronize **ppSync);

   
} ISynchronizeContainerVtbl;
struct ISynchronizeContainer {
    ISynchronizeContainerVtbl* lpVtbl;
};
# 5175 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISynchronizeContainer_AddSynchronize_Proxy(
    ISynchronizeContainer* This,
    ISynchronize *pSync);
void ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISynchronizeContainer_WaitMultiple_Proxy(
    ISynchronizeContainer* This,
    DWORD dwFlags,
    DWORD dwTimeOut,
    ISynchronize **ppSync);
void ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5201 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ISynchronizeMutex_INTERFACE_DEFINED__

extern const GUID IID_ISynchronizeMutex;
# 5216 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ISynchronizeMutexVtbl {
   


    HRESULT ( *QueryInterface)(
        ISynchronizeMutex* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeMutex* This);

    ULONG ( *Release)(
        ISynchronizeMutex* This);


    HRESULT ( *Wait)(
        ISynchronizeMutex* This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT ( *Signal)(
        ISynchronizeMutex* This);

    HRESULT ( *Reset)(
        ISynchronizeMutex* This);


    HRESULT ( *ReleaseMutex)(
        ISynchronizeMutex* This);

   
} ISynchronizeMutexVtbl;
struct ISynchronizeMutex {
    ISynchronizeMutexVtbl* lpVtbl;
};
# 5295 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ISynchronizeMutex_ReleaseMutex_Proxy(
    ISynchronizeMutex* This);
void ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5310 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ICancelMethodCalls_INTERFACE_DEFINED__

typedef ICancelMethodCalls *LPCANCELMETHODCALLS;

extern const GUID IID_ICancelMethodCalls;
# 5330 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ICancelMethodCallsVtbl {
   


    HRESULT ( *QueryInterface)(
        ICancelMethodCalls* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICancelMethodCalls* This);

    ULONG ( *Release)(
        ICancelMethodCalls* This);


    HRESULT ( *Cancel)(
        ICancelMethodCalls* This,
        ULONG ulSeconds);

    HRESULT ( *TestCancel)(
        ICancelMethodCalls* This);

   
} ICancelMethodCallsVtbl;
struct ICancelMethodCalls {
    ICancelMethodCallsVtbl* lpVtbl;
};
# 5391 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ICancelMethodCalls_Cancel_Proxy(
    ICancelMethodCalls* This,
    ULONG ulSeconds);
void ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICancelMethodCalls_TestCancel_Proxy(
    ICancelMethodCalls* This);
void ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5414 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IAsyncManager_INTERFACE_DEFINED__

typedef enum tagDCOM_CALL_STATE {
    DCOM_NONE = 0x0,
    DCOM_CALL_COMPLETE = 0x1,
    DCOM_CALL_CANCELED = 0x2
} DCOM_CALL_STATE;

extern const GUID IID_IAsyncManager;
# 5442 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IAsyncManagerVtbl {
   


    HRESULT ( *QueryInterface)(
        IAsyncManager* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAsyncManager* This);

    ULONG ( *Release)(
        IAsyncManager* This);


    HRESULT ( *CompleteCall)(
        IAsyncManager* This,
        HRESULT Result);

    HRESULT ( *GetCallContext)(
        IAsyncManager* This,
        const IID *const riid,
        void **pInterface);

    HRESULT ( *GetState)(
        IAsyncManager* This,
        ULONG *pulStateFlags);

   
} IAsyncManagerVtbl;
struct IAsyncManager {
    IAsyncManagerVtbl* lpVtbl;
};
# 5513 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IAsyncManager_CompleteCall_Proxy(
    IAsyncManager* This,
    HRESULT Result);
void IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAsyncManager_GetCallContext_Proxy(
    IAsyncManager* This,
    const IID *const riid,
    void **pInterface);
void IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAsyncManager_GetState_Proxy(
    IAsyncManager* This,
    ULONG *pulStateFlags);
void IAsyncManager_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5546 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __ICallFactory_INTERFACE_DEFINED__

extern const GUID IID_ICallFactory;
# 5564 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct ICallFactoryVtbl {
   


    HRESULT ( *QueryInterface)(
        ICallFactory* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICallFactory* This);

    ULONG ( *Release)(
        ICallFactory* This);


    HRESULT ( *CreateCall)(
        ICallFactory* This,
        const IID *const riid,
        IUnknown *pCtrlUnk,
        const IID *const riid2,
        IUnknown **ppv);

   
} ICallFactoryVtbl;
struct ICallFactory {
    ICallFactoryVtbl* lpVtbl;
};
# 5621 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT ICallFactory_CreateCall_Proxy(
    ICallFactory* This,
    const IID *const riid,
    IUnknown *pCtrlUnk,
    const IID *const riid2,
    IUnknown **ppv);
void ICallFactory_CreateCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5640 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IRpcHelper_INTERFACE_DEFINED__

extern const GUID IID_IRpcHelper;
# 5659 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IRpcHelperVtbl {
   


    HRESULT ( *QueryInterface)(
        IRpcHelper* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcHelper* This);

    ULONG ( *Release)(
        IRpcHelper* This);


    HRESULT ( *GetDCOMProtocolVersion)(
        IRpcHelper* This,
        DWORD *pComVersion);

    HRESULT ( *GetIIDFromOBJREF)(
        IRpcHelper* This,
        void *pObjRef,
        IID **piid);

   
} IRpcHelperVtbl;
struct IRpcHelper {
    IRpcHelperVtbl* lpVtbl;
};
# 5722 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IRpcHelper_GetDCOMProtocolVersion_Proxy(
    IRpcHelper* This,
    DWORD *pComVersion);
void IRpcHelper_GetDCOMProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRpcHelper_GetIIDFromOBJREF_Proxy(
    IRpcHelper* This,
    void *pObjRef,
    IID **piid);
void IRpcHelper_GetIIDFromOBJREF_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5747 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IReleaseMarshalBuffers_INTERFACE_DEFINED__

extern const GUID IID_IReleaseMarshalBuffers;
# 5764 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IReleaseMarshalBuffersVtbl {
   


    HRESULT ( *QueryInterface)(
        IReleaseMarshalBuffers* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IReleaseMarshalBuffers* This);

    ULONG ( *Release)(
        IReleaseMarshalBuffers* This);


    HRESULT ( *ReleaseMarshalBuffer)(
        IReleaseMarshalBuffers* This,
        RPCOLEMESSAGE *pMsg,
        DWORD dwFlags,
        IUnknown *pChnl);

   
} IReleaseMarshalBuffersVtbl;
struct IReleaseMarshalBuffers {
    IReleaseMarshalBuffersVtbl* lpVtbl;
};
# 5820 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(
    IReleaseMarshalBuffers* This,
    RPCOLEMESSAGE *pMsg,
    DWORD dwFlags,
    IUnknown *pChnl);
void IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5838 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IWaitMultiple_INTERFACE_DEFINED__

extern const GUID IID_IWaitMultiple;
# 5857 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IWaitMultipleVtbl {
   


    HRESULT ( *QueryInterface)(
        IWaitMultiple* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWaitMultiple* This);

    ULONG ( *Release)(
        IWaitMultiple* This);


    HRESULT ( *WaitMultiple)(
        IWaitMultiple* This,
        DWORD timeout,
        ISynchronize **pSync);

    HRESULT ( *AddSynchronize)(
        IWaitMultiple* This,
        ISynchronize *pSync);

   
} IWaitMultipleVtbl;
struct IWaitMultiple {
    IWaitMultipleVtbl* lpVtbl;
};
# 5920 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IWaitMultiple_WaitMultiple_Proxy(
    IWaitMultiple* This,
    DWORD timeout,
    ISynchronize **pSync);
void IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IWaitMultiple_AddSynchronize_Proxy(
    IWaitMultiple* This,
    ISynchronize *pSync);
void IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5945 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IAddrTrackingControl_INTERFACE_DEFINED__

typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
extern const GUID IID_IAddrTrackingControl;
# 5964 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IAddrTrackingControlVtbl {
   


    HRESULT ( *QueryInterface)(
        IAddrTrackingControl* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAddrTrackingControl* This);

    ULONG ( *Release)(
        IAddrTrackingControl* This);


    HRESULT ( *EnableCOMDynamicAddrTracking)(
        IAddrTrackingControl* This);

    HRESULT ( *DisableCOMDynamicAddrTracking)(
        IAddrTrackingControl* This);

   
} IAddrTrackingControlVtbl;
struct IAddrTrackingControl {
    IAddrTrackingControlVtbl* lpVtbl;
};
# 6024 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6046 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IAddrExclusionControl_INTERFACE_DEFINED__

typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
extern const GUID IID_IAddrExclusionControl;
# 6066 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IAddrExclusionControlVtbl {
   


    HRESULT ( *QueryInterface)(
        IAddrExclusionControl* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAddrExclusionControl* This);

    ULONG ( *Release)(
        IAddrExclusionControl* This);


    HRESULT ( *GetCurrentAddrExclusionList)(
        IAddrExclusionControl* This,
        const IID *const riid,
        void **ppEnumerator);

    HRESULT ( *UpdateAddrExclusionList)(
        IAddrExclusionControl* This,
        IUnknown *pEnumerator);

   
} IAddrExclusionControlVtbl;
struct IAddrExclusionControl {
    IAddrExclusionControlVtbl* lpVtbl;
};
# 6129 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    const IID *const riid,
    void **ppEnumerator);
void IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAddrExclusionControl_UpdateAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    IUnknown *pEnumerator);
void IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6154 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IPipeByte_INTERFACE_DEFINED__

extern const GUID IID_IPipeByte;
# 6175 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IPipeByteVtbl {
   


    HRESULT ( *QueryInterface)(
        IPipeByte* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPipeByte* This);

    ULONG ( *Release)(
        IPipeByte* This);


    HRESULT ( *Pull)(
        IPipeByte* This,
        BYTE *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT ( *Push)(
        IPipeByte* This,
        BYTE *buf,
        ULONG cSent);

   
} IPipeByteVtbl;
struct IPipeByte {
    IPipeByteVtbl* lpVtbl;
};
# 6240 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IPipeByte_Pull_Proxy(
    IPipeByte* This,
    BYTE *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void IPipeByte_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPipeByte_Push_Proxy(
    IPipeByte* This,
    BYTE *buf,
    ULONG cSent);
void IPipeByte_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6267 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IPipeLong_INTERFACE_DEFINED__

extern const GUID IID_IPipeLong;
# 6288 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IPipeLongVtbl {
   


    HRESULT ( *QueryInterface)(
        IPipeLong* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPipeLong* This);

    ULONG ( *Release)(
        IPipeLong* This);


    HRESULT ( *Pull)(
        IPipeLong* This,
        LONG *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT ( *Push)(
        IPipeLong* This,
        LONG *buf,
        ULONG cSent);

   
} IPipeLongVtbl;
struct IPipeLong {
    IPipeLongVtbl* lpVtbl;
};
# 6353 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IPipeLong_Pull_Proxy(
    IPipeLong* This,
    LONG *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void IPipeLong_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPipeLong_Push_Proxy(
    IPipeLong* This,
    LONG *buf,
    ULONG cSent);
void IPipeLong_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6380 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IPipeDouble_INTERFACE_DEFINED__

extern const GUID IID_IPipeDouble;
# 6401 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IPipeDoubleVtbl {
   


    HRESULT ( *QueryInterface)(
        IPipeDouble* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPipeDouble* This);

    ULONG ( *Release)(
        IPipeDouble* This);


    HRESULT ( *Pull)(
        IPipeDouble* This,
        DOUBLE *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT ( *Push)(
        IPipeDouble* This,
        DOUBLE *buf,
        ULONG cSent);

   
} IPipeDoubleVtbl;
struct IPipeDouble {
    IPipeDoubleVtbl* lpVtbl;
};
# 6466 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IPipeDouble_Pull_Proxy(
    IPipeDouble* This,
    DOUBLE *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void IPipeDouble_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPipeDouble_Push_Proxy(
    IPipeDouble* This,
    DOUBLE *buf,
    ULONG cSent);
void IPipeDouble_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6823 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef enum _APTTYPEQUALIFIER {
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
    APTTYPEQUALIFIER_APPLICATION_STA = 6
} APTTYPEQUALIFIER;

typedef enum _APTTYPE {
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
} APTTYPE;



typedef enum _THDTYPE {
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;

typedef DWORD APARTMENTID;





#define __IComThreadingInfo_INTERFACE_DEFINED__

extern const GUID IID_IComThreadingInfo;
# 6878 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IComThreadingInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IComThreadingInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IComThreadingInfo* This);

    ULONG ( *Release)(
        IComThreadingInfo* This);


    HRESULT ( *GetCurrentApartmentType)(
        IComThreadingInfo* This,
        APTTYPE *pAptType);

    HRESULT ( *GetCurrentThreadType)(
        IComThreadingInfo* This,
        THDTYPE *pThreadType);

    HRESULT ( *GetCurrentLogicalThreadId)(
        IComThreadingInfo* This,
        GUID *pguidLogicalThreadId);

    HRESULT ( *SetCurrentLogicalThreadId)(
        IComThreadingInfo* This,
        const GUID *const rguid);

   
} IComThreadingInfoVtbl;
struct IComThreadingInfo {
    IComThreadingInfoVtbl* lpVtbl;
};
# 6956 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IComThreadingInfo_GetCurrentApartmentType_Proxy(
    IComThreadingInfo* This,
    APTTYPE *pAptType);
void IComThreadingInfo_GetCurrentApartmentType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_GetCurrentThreadType_Proxy(
    IComThreadingInfo* This,
    THDTYPE *pThreadType);
void IComThreadingInfo_GetCurrentThreadType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    GUID *pguidLogicalThreadId);
void IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    const GUID *const rguid);
void IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6996 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IProcessInitControl_INTERFACE_DEFINED__

extern const GUID IID_IProcessInitControl;
# 7011 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IProcessInitControlVtbl {
   


    HRESULT ( *QueryInterface)(
        IProcessInitControl* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IProcessInitControl* This);

    ULONG ( *Release)(
        IProcessInitControl* This);


    HRESULT ( *ResetInitializerTimeout)(
        IProcessInitControl* This,
        DWORD dwSecondsRemaining);

   
} IProcessInitControlVtbl;
struct IProcessInitControl {
    IProcessInitControlVtbl* lpVtbl;
};
# 7065 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IProcessInitControl_ResetInitializerTimeout_Proxy(
    IProcessInitControl* This,
    DWORD dwSecondsRemaining);
void IProcessInitControl_ResetInitializerTimeout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 7081 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
#define __IFastRundown_INTERFACE_DEFINED__

extern const GUID IID_IFastRundown;
# 7093 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IFastRundownVtbl {
   


    HRESULT ( *QueryInterface)(
        IFastRundown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IFastRundown* This);

    ULONG ( *Release)(
        IFastRundown* This);

   
} IFastRundownVtbl;
struct IFastRundown {
    IFastRundownVtbl* lpVtbl;
};
# 7140 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef enum CO_MARSHALING_CONTEXT_ATTRIBUTES {
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
} CO_MARSHALING_CONTEXT_ATTRIBUTES;





#define __IMarshalingStream_INTERFACE_DEFINED__

extern const GUID IID_IMarshalingStream;
# 7164 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
typedef struct IMarshalingStreamVtbl {
   


    HRESULT ( *QueryInterface)(
        IMarshalingStream* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMarshalingStream* This);

    ULONG ( *Release)(
        IMarshalingStream* This);


    HRESULT ( *Read)(
        IMarshalingStream* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Write)(
        IMarshalingStream* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);


    HRESULT ( *Seek)(
        IMarshalingStream* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT ( *SetSize)(
        IMarshalingStream* This,
        ULARGE_INTEGER libNewSize);

    HRESULT ( *CopyTo)(
        IMarshalingStream* This,
        IStream *pstm,
        ULARGE_INTEGER cb,
        ULARGE_INTEGER *pcbRead,
        ULARGE_INTEGER *pcbWritten);

    HRESULT ( *Commit)(
        IMarshalingStream* This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IMarshalingStream* This);

    HRESULT ( *LockRegion)(
        IMarshalingStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *UnlockRegion)(
        IMarshalingStream* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *Stat)(
        IMarshalingStream* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    HRESULT ( *Clone)(
        IMarshalingStream* This,
        IStream **ppstm);


    HRESULT ( *GetMarshalingContextAttribute)(
        IMarshalingStream* This,
        CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
        ULONG_PTR *pAttributeValue);

   
} IMarshalingStreamVtbl;
struct IMarshalingStream {
    IMarshalingStreamVtbl* lpVtbl;
};
# 7326 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidlbase.h" 3
HRESULT IMarshalingStream_GetMarshalingContextAttribute_Proxy(
    IMarshalingStream* This,
    CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
    ULONG_PTR *pAttributeValue);
void IMarshalingStream_GetMarshalingContextAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;

#define _OBJIDLBASE_
# 156 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 1 3
# 51 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#undef DEFINE_GUID
# 61 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/guiddef.h" 3
#define DEFINE_GUID


#define DEFINE_OLEGUID
# 157 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/cguid.h" 1 3






#define __CGUID_H__





  extern const IID GUID_NULL;
  extern const IID CATID_MARSHALER;
  extern const IID IID_IRpcChannel;
  extern const IID IID_IRpcStub;
  extern const IID IID_IStubManager;
  extern const IID IID_IRpcProxy;
  extern const IID IID_IProxyManager;
  extern const IID IID_IPSFactory;
  extern const IID IID_IInternalMoniker;
  extern const IID IID_IDfReserved1;
  extern const IID IID_IDfReserved2;
  extern const IID IID_IDfReserved3;
  extern const CLSID CLSID_StdMarshal;
  extern const CLSID CLSID_AggStdMarshal;
  extern const CLSID CLSID_StdAsyncActManager;
  extern const IID IID_IStub;
  extern const IID IID_IProxy;
  extern const IID IID_IEnumGeneric;
  extern const IID IID_IEnumHolder;
  extern const IID IID_IEnumCallback;
  extern const IID IID_IOleManager;
  extern const IID IID_IOlePresObj;
  extern const IID IID_IDebug;
  extern const IID IID_IDebugStream;
  extern const CLSID CLSID_PSGenObject;
  extern const CLSID CLSID_PSClientSite;
  extern const CLSID CLSID_PSClassObject;
  extern const CLSID CLSID_PSInPlaceActive;
  extern const CLSID CLSID_PSInPlaceFrame;
  extern const CLSID CLSID_PSDragDrop;
  extern const CLSID CLSID_PSBindCtx;
  extern const CLSID CLSID_PSEnumerators;
  extern const CLSID CLSID_StaticMetafile;
  extern const CLSID CLSID_StaticDib;
  extern const CLSID CID_CDfsVolume;
  extern const CLSID CLSID_DCOMAccessControl;
  extern const CLSID CLSID_StdGlobalInterfaceTable;
  extern const CLSID CLSID_ComBinding;
  extern const CLSID CLSID_StdEvent;
  extern const CLSID CLSID_ManualResetEvent;
  extern const CLSID CLSID_SynchronizeContainer;
  extern const CLSID CLSID_AddrControl;
  extern const CLSID CLSID_CCDFormKrnl;
  extern const CLSID CLSID_CCDPropertyPage;
  extern const CLSID CLSID_CCDFormDialog;
  extern const CLSID CLSID_CCDCommandButton;
  extern const CLSID CLSID_CCDComboBox;
  extern const CLSID CLSID_CCDTextBox;
  extern const CLSID CLSID_CCDCheckBox;
  extern const CLSID CLSID_CCDLabel;
  extern const CLSID CLSID_CCDOptionButton;
  extern const CLSID CLSID_CCDListBox;
  extern const CLSID CLSID_CCDScrollBar;
  extern const CLSID CLSID_CCDGroupBox;
  extern const CLSID CLSID_CCDGeneralPropertyPage;
  extern const CLSID CLSID_CCDGenericPropertyPage;
  extern const CLSID CLSID_CCDFontPropertyPage;
  extern const CLSID CLSID_CCDColorPropertyPage;
  extern const CLSID CLSID_CCDLabelPropertyPage;
  extern const CLSID CLSID_CCDCheckBoxPropertyPage;
  extern const CLSID CLSID_CCDTextBoxPropertyPage;
  extern const CLSID CLSID_CCDOptionButtonPropertyPage;
  extern const CLSID CLSID_CCDListBoxPropertyPage;
  extern const CLSID CLSID_CCDCommandButtonPropertyPage;
  extern const CLSID CLSID_CCDComboBoxPropertyPage;
  extern const CLSID CLSID_CCDScrollBarPropertyPage;
  extern const CLSID CLSID_CCDGroupBoxPropertyPage;
  extern const CLSID CLSID_CCDXObjectPropertyPage;
  extern const CLSID CLSID_CStdPropertyFrame;
  extern const CLSID CLSID_CFormPropertyPage;
  extern const CLSID CLSID_CGridPropertyPage;
  extern const CLSID CLSID_CWSJArticlePage;
  extern const CLSID CLSID_CSystemPage;
  extern const CLSID CLSID_IdentityUnmarshal;
  extern const CLSID CLSID_InProcFreeMarshaler;
  extern const CLSID CLSID_Picture_Metafile;
  extern const CLSID CLSID_Picture_EnhMetafile;
  extern const CLSID CLSID_Picture_Dib;
  extern const GUID GUID_TRISTATE;
# 160 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 173 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
extern __attribute__((dllimport)) HRESULT CreateStreamOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPSTREAM *ppstm);
extern __attribute__((dllimport)) HRESULT GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL *phglobal);
extern __attribute__((dllimport)) void CoUninitialize (void);
extern __attribute__((dllimport)) HRESULT CoInitializeEx (LPVOID pvReserved, DWORD dwCoInit);
extern __attribute__((dllimport)) HRESULT CoGetCurrentLogicalThreadId (GUID *pguid);
extern __attribute__((dllimport)) HRESULT CoGetContextToken (ULONG_PTR *pToken);



extern __attribute__((dllimport)) HRESULT CoGetObjectContext (const IID *const riid, LPVOID *ppv);
extern __attribute__((dllimport)) HRESULT CoRegisterClassObject (const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern __attribute__((dllimport)) HRESULT CoRevokeClassObject (DWORD dwRegister);
extern __attribute__((dllimport)) HRESULT CoResumeClassObjects (void);
extern __attribute__((dllimport)) HRESULT CoSuspendClassObjects (void);



extern __attribute__((dllimport)) HRESULT CoGetMalloc (DWORD dwMemContext, LPMALLOC *ppMalloc);
extern __attribute__((dllimport)) DWORD CoGetCurrentProcess (void);
extern __attribute__((dllimport)) HRESULT CoGetCallerTID (LPDWORD lpdwTID);
extern __attribute__((dllimport)) HRESULT CoGetDefaultContext (APTTYPE aptType, const IID *const riid, void **ppv);







extern __attribute__((dllimport)) HRESULT CoGetClassObject (const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv);
extern __attribute__((dllimport)) ULONG CoAddRefServerProcess (void);
extern __attribute__((dllimport)) ULONG CoReleaseServerProcess (void);
extern __attribute__((dllimport)) HRESULT CoGetPSClsid (const IID *const riid, CLSID *pClsid);
extern __attribute__((dllimport)) HRESULT CoRegisterPSClsid (const IID *const riid, const IID *const rclsid);
extern __attribute__((dllimport)) HRESULT CoRegisterSurrogate (LPSURROGATE pSurrogate);
extern __attribute__((dllimport)) HRESULT CoMarshalHresult (LPSTREAM pstm, HRESULT hresult);
extern __attribute__((dllimport)) HRESULT CoUnmarshalHresult (LPSTREAM pstm, HRESULT *phresult);
extern __attribute__((dllimport)) HRESULT CoLockObjectExternal (LPUNKNOWN pUnk, WINBOOL fLock, WINBOOL fLastUnlockReleases);
extern __attribute__((dllimport)) HRESULT CoGetStdMarshalEx (LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner);



typedef enum tagSTDMSHLFLAGS {
  SMEXF_SERVER = 0x01,
  SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;

extern __attribute__((dllimport)) HRESULT CoGetMarshalSizeMax (ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern __attribute__((dllimport)) HRESULT CoMarshalInterface (LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern __attribute__((dllimport)) HRESULT CoUnmarshalInterface (LPSTREAM pStm, const IID *const riid, LPVOID *ppv);
extern __attribute__((dllimport)) HRESULT CoReleaseMarshalData (LPSTREAM pStm);
extern __attribute__((dllimport)) HRESULT CoDisconnectObject (LPUNKNOWN pUnk, DWORD dwReserved);
extern __attribute__((dllimport)) HRESULT CoGetStandardMarshal (const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal);
extern __attribute__((dllimport)) HRESULT CoMarshalInterThreadInterfaceInStream (const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm);
extern __attribute__((dllimport)) HRESULT CoGetInterfaceAndReleaseStream (LPSTREAM pStm, const IID *const iid, LPVOID *ppv);
extern __attribute__((dllimport)) HRESULT CoCreateFreeThreadedMarshaler (LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal);
extern __attribute__((dllimport)) void CoFreeUnusedLibraries (void);
extern __attribute__((dllimport)) void CoFreeUnusedLibrariesEx (DWORD dwUnloadDelay, DWORD dwReserved);
extern __attribute__((dllimport)) HRESULT CoInitializeSecurity (PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
extern __attribute__((dllimport)) HRESULT CoSwitchCallContext (IUnknown *pNewObject, IUnknown **ppOldObject);

#define COM_RIGHTS_EXECUTE
#define COM_RIGHTS_EXECUTE_LOCAL
#define COM_RIGHTS_EXECUTE_REMOTE
#define COM_RIGHTS_ACTIVATE_LOCAL
#define COM_RIGHTS_ACTIVATE_REMOTE

extern __attribute__((dllimport)) HRESULT CoCreateInstanceFromApp (const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults);




extern __attribute__((dllimport)) WINBOOL CoIsHandlerConnected (LPUNKNOWN pUnk);



extern __attribute__((dllimport)) HRESULT CoGetCallContext (const IID *const riid, void **ppInterface);
extern __attribute__((dllimport)) HRESULT CoQueryProxyBlanket (IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites);
extern __attribute__((dllimport)) HRESULT CoSetProxyBlanket (IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
extern __attribute__((dllimport)) HRESULT CoCopyProxy (IUnknown *pProxy, IUnknown **ppCopy);
extern __attribute__((dllimport)) HRESULT CoQueryClientBlanket (DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities);
extern __attribute__((dllimport)) HRESULT CoImpersonateClient (void);
extern __attribute__((dllimport)) HRESULT CoRevertToSelf (void);
extern __attribute__((dllimport)) HRESULT CoQueryAuthenticationServices (DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc);
extern __attribute__((dllimport)) HRESULT CoCreateInstance (const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv);
extern __attribute__((dllimport)) HRESULT CoCreateInstanceEx (const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults);
# 282 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
extern __attribute__((dllimport)) HRESULT CoGetCancelObject (DWORD dwThreadId, const IID *const iid, void **ppUnk);
extern __attribute__((dllimport)) HRESULT CoSetCancelObject (IUnknown *pUnk);
extern __attribute__((dllimport)) HRESULT CoCancelCall (DWORD dwThreadId, ULONG ulTimeout);
extern __attribute__((dllimport)) HRESULT CoTestCancel (void);
extern __attribute__((dllimport)) HRESULT CoEnableCallCancellation (LPVOID pReserved);
extern __attribute__((dllimport)) HRESULT CoDisableCallCancellation (LPVOID pReserved);



extern __attribute__((dllimport)) HRESULT StringFromCLSID (const IID *const rclsid, LPOLESTR *lplpsz);
extern __attribute__((dllimport)) HRESULT CLSIDFromString (LPCOLESTR lpsz, LPCLSID pclsid);
extern __attribute__((dllimport)) HRESULT StringFromIID (const IID *const rclsid, LPOLESTR *lplpsz);
extern __attribute__((dllimport)) HRESULT IIDFromString (LPCOLESTR lpsz, LPIID lpiid);



extern __attribute__((dllimport)) HRESULT ProgIDFromCLSID (const IID *const clsid, LPOLESTR *lplpszProgID);
extern __attribute__((dllimport)) HRESULT CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);



extern __attribute__((dllimport)) int StringFromGUID2 (const GUID *const rguid, LPOLESTR lpsz, int cchMax);
extern __attribute__((dllimport)) HRESULT CoCreateGuid (GUID *pguid);

typedef struct tagPROPVARIANT PROPVARIANT;

extern __attribute__((dllimport)) HRESULT PropVariantCopy (PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc);
extern __attribute__((dllimport)) HRESULT PropVariantClear (PROPVARIANT *pvar);
extern __attribute__((dllimport)) HRESULT FreePropVariantArray (ULONG cVariants, PROPVARIANT *rgvars);



extern __attribute__((dllimport)) HRESULT CoWaitForMultipleHandles (DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex);



typedef enum tagCOWAIT_FLAGS {
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4


  , COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10


} COWAIT_FLAGS;
# 347 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 3
#define CWMO_MAX_HANDLES



extern __attribute__((dllimport)) HRESULT CoGetTreatAsClass (const IID *const clsidOld, LPCLSID pClsidNew);
extern __attribute__((dllimport)) HRESULT CoInvalidateRemoteMachineBindings (LPOLESTR pszMachineName);



typedef HRESULT ( *LPFNGETCLASSOBJECT) (const IID *const, const IID *const, LPVOID *);
typedef HRESULT ( *LPFNCANUNLOADNOW) (void);

extern HRESULT DllGetClassObject (const IID *const rclsid, const IID *const riid, LPVOID *ppv);
extern HRESULT DllCanUnloadNow (void);
extern __attribute__((dllimport)) LPVOID CoTaskMemAlloc (SIZE_T cb);
extern __attribute__((dllimport)) LPVOID CoTaskMemRealloc (LPVOID pv, SIZE_T cb);
extern __attribute__((dllimport)) void CoTaskMemFree (LPVOID pv);


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 367 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/combaseapi.h" 2 3
# 15 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3

typedef enum tagCOINIT {
  COINIT_APARTMENTTHREADED = 0x2,
  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8
} COINIT;

#define MARSHALINTERFACE_MIN
#define CWCSTORAGENAME

#define STGM_DIRECT
#define STGM_TRANSACTED
#define STGM_SIMPLE

#define STGM_READ
#define STGM_WRITE
#define STGM_READWRITE

#define STGM_SHARE_DENY_NONE
#define STGM_SHARE_DENY_READ
#define STGM_SHARE_DENY_WRITE
#define STGM_SHARE_EXCLUSIVE

#define STGM_PRIORITY
#define STGM_DELETEONRELEASE
#define STGM_NOSCRATCH
#define STGM_CREATE
#define STGM_CONVERT
#define STGM_FAILIFTHERE
#define STGM_NOSNAPSHOT
#define STGM_DIRECT_SWMR

#define ASYNC_MODE_COMPATIBILITY
#define ASYNC_MODE_DEFAULT

#define STGTY_REPEAT
#define STG_TOEND

#define STG_LAYOUT_SEQUENTIAL
#define STG_LAYOUT_INTERLEAVED

typedef DWORD STGFMT;

#define STGFMT_STORAGE
#define STGFMT_NATIVE
#define STGFMT_FILE
#define STGFMT_ANY
#define STGFMT_DOCFILE
#define STGFMT_DOCUMENT

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



#define __objidl_h__
# 276 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IMallocSpy_FWD_DEFINED__
typedef struct IMallocSpy IMallocSpy;



#define __IBindCtx_FWD_DEFINED__
typedef struct IBindCtx IBindCtx;



#define __IEnumMoniker_FWD_DEFINED__
typedef struct IEnumMoniker IEnumMoniker;



#define __IRunnableObject_FWD_DEFINED__
typedef struct IRunnableObject IRunnableObject;



#define __IRunningObjectTable_FWD_DEFINED__
typedef struct IRunningObjectTable IRunningObjectTable;



#define __IPersist_FWD_DEFINED__
typedef struct IPersist IPersist;



#define __IPersistStream_FWD_DEFINED__
typedef struct IPersistStream IPersistStream;



#define __IMoniker_FWD_DEFINED__
typedef struct IMoniker IMoniker;



#define __IROTData_FWD_DEFINED__
typedef struct IROTData IROTData;



#define __IEnumSTATSTG_FWD_DEFINED__
typedef struct IEnumSTATSTG IEnumSTATSTG;



#define __IStorage_FWD_DEFINED__
typedef struct IStorage IStorage;



#define __IPersistFile_FWD_DEFINED__
typedef struct IPersistFile IPersistFile;



#define __IPersistStorage_FWD_DEFINED__
typedef struct IPersistStorage IPersistStorage;



#define __ILockBytes_FWD_DEFINED__
typedef struct ILockBytes ILockBytes;



#define __IEnumFORMATETC_FWD_DEFINED__
typedef struct IEnumFORMATETC IEnumFORMATETC;



#define __IEnumSTATDATA_FWD_DEFINED__
typedef struct IEnumSTATDATA IEnumSTATDATA;



#define __IRootStorage_FWD_DEFINED__
typedef struct IRootStorage IRootStorage;



#define __IAdviseSink_FWD_DEFINED__
typedef struct IAdviseSink IAdviseSink;



#define __AsyncIAdviseSink_FWD_DEFINED__
typedef struct AsyncIAdviseSink AsyncIAdviseSink;



#define __IAdviseSink2_FWD_DEFINED__
typedef struct IAdviseSink2 IAdviseSink2;



#define __AsyncIAdviseSink2_FWD_DEFINED__
typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;



#define __IDataObject_FWD_DEFINED__
typedef struct IDataObject IDataObject;



#define __IDataAdviseHolder_FWD_DEFINED__
typedef struct IDataAdviseHolder IDataAdviseHolder;



#define __IMessageFilter_FWD_DEFINED__
typedef struct IMessageFilter IMessageFilter;



#define __IClassActivator_FWD_DEFINED__
typedef struct IClassActivator IClassActivator;



#define __IFillLockBytes_FWD_DEFINED__
typedef struct IFillLockBytes IFillLockBytes;



#define __IProgressNotify_FWD_DEFINED__
typedef struct IProgressNotify IProgressNotify;



#define __ILayoutStorage_FWD_DEFINED__
typedef struct ILayoutStorage ILayoutStorage;



#define __IBlockingLock_FWD_DEFINED__
typedef struct IBlockingLock IBlockingLock;



#define __ITimeAndNoticeControl_FWD_DEFINED__
typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;



#define __IOplockStorage_FWD_DEFINED__
typedef struct IOplockStorage IOplockStorage;



#define __IDirectWriterLock_FWD_DEFINED__
typedef struct IDirectWriterLock IDirectWriterLock;



#define __IUrlMon_FWD_DEFINED__
typedef struct IUrlMon IUrlMon;



#define __IForegroundTransfer_FWD_DEFINED__
typedef struct IForegroundTransfer IForegroundTransfer;



#define __IThumbnailExtractor_FWD_DEFINED__
typedef struct IThumbnailExtractor IThumbnailExtractor;



#define __IDummyHICONIncluder_FWD_DEFINED__
typedef struct IDummyHICONIncluder IDummyHICONIncluder;



#define __IProcessLock_FWD_DEFINED__
typedef struct IProcessLock IProcessLock;



#define __ISurrogateService_FWD_DEFINED__
typedef struct ISurrogateService ISurrogateService;



#define __IInitializeSpy_FWD_DEFINED__
typedef struct IInitializeSpy IInitializeSpy;



#define __IApartmentShutdown_FWD_DEFINED__
typedef struct IApartmentShutdown IApartmentShutdown;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3



#define __unknwn_h__
# 37 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3



#define __wtypes_h__





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypesbase.h" 2 3
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
#define __IWinTypes_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
typedef struct tagRemHGLOBAL {
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
} RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
} RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE {
    ULONG cbData;
    byte data[1];
} RemHENHMETAFILE;
typedef struct tagRemHBITMAP {
    ULONG cbData;
    byte data[1];
} RemHBITMAP;

typedef struct tagRemHPALETTE {
    ULONG cbData;
    byte data[1];
} RemHPALETTE;

typedef struct tagRemBRUSH {
    ULONG cbData;
    byte data[1];
} RemHBRUSH;
# 171 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
#define _ROTFLAGS_DEFINED
#define ROTFLAGS_REGISTRATIONKEEPSALIVE
#define ROTFLAGS_ALLOWANYCLIENT



#define _ROT_COMPARE_MAX_DEFINED
#define ROT_COMPARE_MAX


typedef enum tagDVASPECT {
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;

typedef enum tagSTGC {
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} STGC;

typedef enum tagSTGMOVE {
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
} STGMOVE;

typedef enum tagSTATFLAG {
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
} STATFLAG;
typedef void *HCONTEXT;
# 219 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
#define WDT_INPROC_CALL

#define WDT_REMOTE_CALL

#define WDT_INPROC64_CALL


typedef struct _userCLIPFORMAT {
    LONG fContext;
    union {
        DWORD dwValue;
        wchar_t *pwszName;
    } u;
} userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE {
    LONG fContext;
    union {
        LONG hInproc;
        DWORD_BLOB *hRemote;
    } u;
} GDI_NONREMOTE;

typedef struct _userHGLOBAL {
    LONG fContext;
    union {
        LONG hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILE;

typedef struct _remoteMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
} remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT {
    LONG fContext;
    union {
        LONG hInproc;
        remoteMETAFILEPICT *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILEPICT;

typedef struct _userHENHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHENHMETAFILE;

typedef struct _userBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
} userBITMAP;

typedef struct _userHBITMAP {
    LONG fContext;
    union {
        LONG hInproc;
        userBITMAP *hRemote;
        INT64 hInproc64;
    } u;
} userHBITMAP;

typedef struct _userHPALETTE {
    LONG fContext;
    union {
        LONG hInproc;
        LOGPALETTE *hRemote;
        INT64 hInproc64;
    } u;
} userHPALETTE;

typedef struct _RemotableHandle {
    LONG fContext;
    union {
        LONG hInproc;
        LONG hRemote;
    } u;
} RemotableHandle;

typedef RemotableHandle *wireHWND;
typedef RemotableHandle *wireHMENU;
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHDC;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHRGN;
typedef RemotableHandle *wireHMONITOR;
# 400 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
typedef userHBITMAP *wireHBITMAP;
typedef userHPALETTE *wireHPALETTE;
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef userHMETAFILE *wireHMETAFILE;
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
# 415 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
typedef void *HMETAFILEPICT;




typedef double DATE;


#define _tagCY_DEFINED
#define _CY_DEFINED






typedef union tagCY {
  __extension__ struct {
    unsigned long Lo;
    long Hi;
  } ;
  LONGLONG int64;
} CY;



typedef CY *LPCY;
# 452 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 3
typedef struct tagDEC {
  USHORT wReserved;
  __extension__ union {
    __extension__ struct {
      BYTE scale;
      BYTE sign;
    } ;
    USHORT signscale;
  } ;
  ULONG Hi32;
  __extension__ union {
    __extension__ struct {
      ULONG Lo32;
      ULONG Mid32;
    } ;
    ULONGLONG Lo64;
  } ;
} DECIMAL;

#define DECIMAL_NEG
#define DECIMAL_SETZERO


typedef DECIMAL *LPDECIMAL;

typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef OLECHAR *BSTR;

typedef BSTR *LPBSTR;

typedef short VARIANT_BOOL;



#define _VARIANT_BOOL



#define _tagBSTRBLOB_DEFINED

typedef struct tagBSTRBLOB {
    ULONG cbSize;
    BYTE *pData;
} BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;


#define VARIANT_TRUE
#define VARIANT_FALSE

typedef struct tagCLIPDATA {
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
} CLIPDATA;

#define CBPCLIPDATA

typedef unsigned short VARTYPE;

enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};


typedef ULONG PROPID;


#define PROPERTYKEY_DEFINED

typedef struct _tagpropertykey {
    GUID fmtid;
    DWORD pid;
} PROPERTYKEY;


typedef struct tagCSPLATFORM {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
} CSPLATFORM;

typedef struct tagQUERYCONTEXT {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
} QUERYCONTEXT;

typedef enum tagTYSPEC {
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_FILENAME = 3,
    TYSPEC_PROGID = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
} TYSPEC;

typedef struct __WIDL_wtypes_generated_name_00000000 {
    DWORD tyspec;
    union {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct {
            LPOLESTR pPackageName;
            GUID PolicyId;
        } ByName;
        struct {
            GUID ObjectId;
            GUID PolicyId;
        } ByObjectId;
    } tagged_union;
} uCLSSPEC;
# 38 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3
# 478 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 479 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 7610 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IMallocSpy_INTERFACE_DEFINED__

typedef IMallocSpy *LPMALLOCSPY;
extern const GUID IID_IMallocSpy;
# 7669 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IMallocSpyVtbl {
   


    HRESULT ( *QueryInterface)(
        IMallocSpy* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMallocSpy* This);

    ULONG ( *Release)(
        IMallocSpy* This);


    SIZE_T ( *PreAlloc)(
        IMallocSpy* This,
        SIZE_T cbRequest);

    void * ( *PostAlloc)(
        IMallocSpy* This,
        void *pActual);

    void * ( *PreFree)(
        IMallocSpy* This,
        void *pRequest,
        WINBOOL fSpyed);

    void ( *PostFree)(
        IMallocSpy* This,
        WINBOOL fSpyed);

    SIZE_T ( *PreRealloc)(
        IMallocSpy* This,
        void *pRequest,
        SIZE_T cbRequest,
        void **ppNewRequest,
        WINBOOL fSpyed);

    void * ( *PostRealloc)(
        IMallocSpy* This,
        void *pActual,
        WINBOOL fSpyed);

    void * ( *PreGetSize)(
        IMallocSpy* This,
        void *pRequest,
        WINBOOL fSpyed);

    SIZE_T ( *PostGetSize)(
        IMallocSpy* This,
        SIZE_T cbActual,
        WINBOOL fSpyed);

    void * ( *PreDidAlloc)(
        IMallocSpy* This,
        void *pRequest,
        WINBOOL fSpyed);

    int ( *PostDidAlloc)(
        IMallocSpy* This,
        void *pRequest,
        WINBOOL fSpyed,
        int fActual);

    void ( *PreHeapMinimize)(
        IMallocSpy* This);

    void ( *PostHeapMinimize)(
        IMallocSpy* This);

   
} IMallocSpyVtbl;
struct IMallocSpy {
    IMallocSpyVtbl* lpVtbl;
};
# 7819 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
SIZE_T IMallocSpy_PreAlloc_Proxy(
    IMallocSpy* This,
    SIZE_T cbRequest);
void IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMallocSpy_PostAlloc_Proxy(
    IMallocSpy* This,
    void *pActual);
void IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMallocSpy_PreFree_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void IMallocSpy_PreFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IMallocSpy_PostFree_Proxy(
    IMallocSpy* This,
    WINBOOL fSpyed);
void IMallocSpy_PostFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T IMallocSpy_PreRealloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    SIZE_T cbRequest,
    void **ppNewRequest,
    WINBOOL fSpyed);
void IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMallocSpy_PostRealloc_Proxy(
    IMallocSpy* This,
    void *pActual,
    WINBOOL fSpyed);
void IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMallocSpy_PreGetSize_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T IMallocSpy_PostGetSize_Proxy(
    IMallocSpy* This,
    SIZE_T cbActual,
    WINBOOL fSpyed);
void IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * IMallocSpy_PreDidAlloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int IMallocSpy_PostDidAlloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed,
    int fActual);
void IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IMallocSpy_PreHeapMinimize_Proxy(
    IMallocSpy* This);
void IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IMallocSpy_PostHeapMinimize_Proxy(
    IMallocSpy* This);
void IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 7932 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IBindCtx_INTERFACE_DEFINED__

typedef IBindCtx *LPBC;
typedef IBindCtx *LPBINDCTX;
# 7944 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
} BIND_OPTS;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
# 7960 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct tagBIND_OPTS2 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
} BIND_OPTS2;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;






typedef struct tagBIND_OPTS3 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
} BIND_OPTS3;
typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;

typedef enum tagBIND_FLAGS {
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;
extern const GUID IID_IBindCtx;
# 8036 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IBindCtxVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindCtx* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindCtx* This);

    ULONG ( *Release)(
        IBindCtx* This);


    HRESULT ( *RegisterObjectBound)(
        IBindCtx* This,
        IUnknown *punk);

    HRESULT ( *RevokeObjectBound)(
        IBindCtx* This,
        IUnknown *punk);

    HRESULT ( *ReleaseBoundObjects)(
        IBindCtx* This);

    HRESULT ( *SetBindOptions)(
        IBindCtx* This,
        BIND_OPTS *pbindopts);

    HRESULT ( *GetBindOptions)(
        IBindCtx* This,
        BIND_OPTS *pbindopts);

    HRESULT ( *GetRunningObjectTable)(
        IBindCtx* This,
        IRunningObjectTable **pprot);

    HRESULT ( *RegisterObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey,
        IUnknown *punk);

    HRESULT ( *GetObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey,
        IUnknown **ppunk);

    HRESULT ( *EnumObjectParam)(
        IBindCtx* This,
        IEnumString **ppenum);

    HRESULT ( *RevokeObjectParam)(
        IBindCtx* This,
        LPOLESTR pszKey);

   
} IBindCtxVtbl;
struct IBindCtx {
    IBindCtxVtbl* lpVtbl;
};
# 8163 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IBindCtx_RegisterObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_RevokeObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_ReleaseBoundObjects_Proxy(
    IBindCtx* This);
void IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_RemoteSetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_RemoteGetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_GetRunningObjectTable_Proxy(
    IBindCtx* This,
    IRunningObjectTable **pprot);
void IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_RegisterObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown *punk);
void IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_GetObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown **ppunk);
void IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_EnumObjectParam_Proxy(
    IBindCtx* This,
    IEnumString **ppenum);
void IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_RevokeObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey);
void IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindCtx_SetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT IBindCtx_SetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
HRESULT IBindCtx_GetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT IBindCtx_GetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);







#define __IEnumMoniker_INTERFACE_DEFINED__

typedef IEnumMoniker *LPENUMMONIKER;
extern const GUID IID_IEnumMoniker;
# 8290 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IEnumMonikerVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumMoniker* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumMoniker* This);

    ULONG ( *Release)(
        IEnumMoniker* This);


    HRESULT ( *Next)(
        IEnumMoniker* This,
        ULONG celt,
        IMoniker **rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumMoniker* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumMoniker* This);

    HRESULT ( *Clone)(
        IEnumMoniker* This,
        IEnumMoniker **ppenum);

   
} IEnumMonikerVtbl;
struct IEnumMoniker {
    IEnumMonikerVtbl* lpVtbl;
};
# 8369 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IEnumMoniker_RemoteNext_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
void IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Skip_Proxy(
    IEnumMoniker* This,
    ULONG celt);
void IEnumMoniker_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Reset_Proxy(
    IEnumMoniker* This);
void IEnumMoniker_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Clone_Proxy(
    IEnumMoniker* This,
    IEnumMoniker **ppenum);
void IEnumMoniker_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Next_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
HRESULT IEnumMoniker_Next_Stub(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
# 8421 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IRunnableObject_INTERFACE_DEFINED__

typedef IRunnableObject *LPRUNNABLEOBJECT;
extern const GUID IID_IRunnableObject;
# 8450 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IRunnableObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IRunnableObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRunnableObject* This);

    ULONG ( *Release)(
        IRunnableObject* This);


    HRESULT ( *GetRunningClass)(
        IRunnableObject* This,
        LPCLSID lpClsid);

    HRESULT ( *Run)(
        IRunnableObject* This,
        LPBINDCTX pbc);

    WINBOOL ( *IsRunning)(
        IRunnableObject* This);

    HRESULT ( *LockRunning)(
        IRunnableObject* This,
        WINBOOL fLock,
        WINBOOL fLastUnlockCloses);

    HRESULT ( *SetContainedObject)(
        IRunnableObject* This,
        WINBOOL fContained);

   
} IRunnableObjectVtbl;
struct IRunnableObject {
    IRunnableObjectVtbl* lpVtbl;
};
# 8536 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IRunnableObject_GetRunningClass_Proxy(
    IRunnableObject* This,
    LPCLSID lpClsid);
void IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunnableObject_Run_Proxy(
    IRunnableObject* This,
    LPBINDCTX pbc);
void IRunnableObject_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunnableObject_RemoteIsRunning_Proxy(
    IRunnableObject* This);
void IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunnableObject_LockRunning_Proxy(
    IRunnableObject* This,
    WINBOOL fLock,
    WINBOOL fLastUnlockCloses);
void IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunnableObject_SetContainedObject_Proxy(
    IRunnableObject* This,
    WINBOOL fContained);
void IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL IRunnableObject_IsRunning_Proxy(
    IRunnableObject* This);
HRESULT IRunnableObject_IsRunning_Stub(
    IRunnableObject* This);







#define __IRunningObjectTable_INTERFACE_DEFINED__

typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
extern const GUID IID_IRunningObjectTable;
# 8627 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IRunningObjectTableVtbl {
   


    HRESULT ( *QueryInterface)(
        IRunningObjectTable* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRunningObjectTable* This);

    ULONG ( *Release)(
        IRunningObjectTable* This);


    HRESULT ( *Register)(
        IRunningObjectTable* This,
        DWORD grfFlags,
        IUnknown *punkObject,
        IMoniker *pmkObjectName,
        DWORD *pdwRegister);

    HRESULT ( *Revoke)(
        IRunningObjectTable* This,
        DWORD dwRegister);

    HRESULT ( *IsRunning)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName);

    HRESULT ( *GetObjectA)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName,
        IUnknown **ppunkObject);

    HRESULT ( *NoteChangeTime)(
        IRunningObjectTable* This,
        DWORD dwRegister,
        FILETIME *pfiletime);

    HRESULT ( *GetTimeOfLastChange)(
        IRunningObjectTable* This,
        IMoniker *pmkObjectName,
        FILETIME *pfiletime);

    HRESULT ( *EnumRunning)(
        IRunningObjectTable* This,
        IEnumMoniker **ppenumMoniker);

   
} IRunningObjectTableVtbl;
struct IRunningObjectTable {
    IRunningObjectTableVtbl* lpVtbl;
};
# 8735 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IRunningObjectTable_Register_Proxy(
    IRunningObjectTable* This,
    DWORD grfFlags,
    IUnknown *punkObject,
    IMoniker *pmkObjectName,
    DWORD *pdwRegister);
void IRunningObjectTable_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_Revoke_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister);
void IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_IsRunning_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName);
void IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_GetObject_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    IUnknown **ppunkObject);
void IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_NoteChangeTime_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister,
    FILETIME *pfiletime);
void IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_GetTimeOfLastChange_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    FILETIME *pfiletime);
void IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_EnumRunning_Proxy(
    IRunningObjectTable* This,
    IEnumMoniker **ppenumMoniker);
void IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 8806 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IPersist_INTERFACE_DEFINED__

typedef IPersist *LPPERSIST;
extern const GUID IID_IPersist;
# 8822 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IPersistVtbl {
   


    HRESULT ( *QueryInterface)(
        IPersist* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersist* This);

    ULONG ( *Release)(
        IPersist* This);


    HRESULT ( *GetClassID)(
        IPersist* This,
        CLSID *pClassID);

   
} IPersistVtbl;
struct IPersist {
    IPersistVtbl* lpVtbl;
};
# 8876 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IPersist_GetClassID_Proxy(
    IPersist* This,
    CLSID *pClassID);
void IPersist_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IPersistStream_INTERFACE_DEFINED__

typedef IPersistStream *LPPERSISTSTREAM;
extern const GUID IID_IPersistStream;
# 8917 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IPersistStreamVtbl {
   


    HRESULT ( *QueryInterface)(
        IPersistStream* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistStream* This);

    ULONG ( *Release)(
        IPersistStream* This);


    HRESULT ( *GetClassID)(
        IPersistStream* This,
        CLSID *pClassID);


    HRESULT ( *IsDirty)(
        IPersistStream* This);

    HRESULT ( *Load)(
        IPersistStream* This,
        IStream *pStm);

    HRESULT ( *Save)(
        IPersistStream* This,
        IStream *pStm,
        WINBOOL fClearDirty);

    HRESULT ( *GetSizeMax)(
        IPersistStream* This,
        ULARGE_INTEGER *pcbSize);

   
} IPersistStreamVtbl;
struct IPersistStream {
    IPersistStreamVtbl* lpVtbl;
};
# 9006 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IPersistStream_IsDirty_Proxy(
    IPersistStream* This);
void IPersistStream_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStream_Load_Proxy(
    IPersistStream* This,
    IStream *pStm);
void IPersistStream_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStream_Save_Proxy(
    IPersistStream* This,
    IStream *pStm,
    WINBOOL fClearDirty);
void IPersistStream_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStream_GetSizeMax_Proxy(
    IPersistStream* This,
    ULARGE_INTEGER *pcbSize);
void IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IMoniker_INTERFACE_DEFINED__

typedef IMoniker *LPMONIKER;
typedef enum tagMKSYS {
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
} MKSYS;
typedef enum tagMKREDUCE {
    MKRREDUCE_ONE = 3 << 16,
    MKRREDUCE_TOUSER = 2 << 16,
    MKRREDUCE_THROUGHUSER = 1 << 16,
    MKRREDUCE_ALL = 0
} MKRREDUCE;
extern const GUID IID_IMoniker;
# 9145 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IMonikerVtbl {
   


    HRESULT ( *QueryInterface)(
        IMoniker* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMoniker* This);

    ULONG ( *Release)(
        IMoniker* This);


    HRESULT ( *GetClassID)(
        IMoniker* This,
        CLSID *pClassID);


    HRESULT ( *IsDirty)(
        IMoniker* This);

    HRESULT ( *Load)(
        IMoniker* This,
        IStream *pStm);

    HRESULT ( *Save)(
        IMoniker* This,
        IStream *pStm,
        WINBOOL fClearDirty);

    HRESULT ( *GetSizeMax)(
        IMoniker* This,
        ULARGE_INTEGER *pcbSize);


    HRESULT ( *BindToObject)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID *const riidResult,
        void **ppvResult);

    HRESULT ( *BindToStorage)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID *const riid,
        void **ppvObj);

    HRESULT ( *Reduce)(
        IMoniker* This,
        IBindCtx *pbc,
        DWORD dwReduceHowFar,
        IMoniker **ppmkToLeft,
        IMoniker **ppmkReduced);

    HRESULT ( *ComposeWith)(
        IMoniker* This,
        IMoniker *pmkRight,
        WINBOOL fOnlyIfNotGeneric,
        IMoniker **ppmkComposite);

    HRESULT ( *Enum)(
        IMoniker* This,
        WINBOOL fForward,
        IEnumMoniker **ppenumMoniker);

    HRESULT ( *IsEqual)(
        IMoniker* This,
        IMoniker *pmkOtherMoniker);

    HRESULT ( *Hash)(
        IMoniker* This,
        DWORD *pdwHash);

    HRESULT ( *IsRunning)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        IMoniker *pmkNewlyRunning);

    HRESULT ( *GetTimeOfLastChange)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        FILETIME *pFileTime);

    HRESULT ( *Inverse)(
        IMoniker* This,
        IMoniker **ppmk);

    HRESULT ( *CommonPrefixWith)(
        IMoniker* This,
        IMoniker *pmkOther,
        IMoniker **ppmkPrefix);

    HRESULT ( *RelativePathTo)(
        IMoniker* This,
        IMoniker *pmkOther,
        IMoniker **ppmkRelPath);

    HRESULT ( *GetDisplayName)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR *ppszDisplayName);

    HRESULT ( *ParseDisplayName)(
        IMoniker* This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    HRESULT ( *IsSystemMoniker)(
        IMoniker* This,
        DWORD *pdwMksys);

   
} IMonikerVtbl;
struct IMoniker {
    IMonikerVtbl* lpVtbl;
};
# 9381 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IMoniker_RemoteBindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riidResult,
    IUnknown **ppvResult);
void IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_RemoteBindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riid,
    IUnknown **ppvObj);
void IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_Reduce_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    DWORD dwReduceHowFar,
    IMoniker **ppmkToLeft,
    IMoniker **ppmkReduced);
void IMoniker_Reduce_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_ComposeWith_Proxy(
    IMoniker* This,
    IMoniker *pmkRight,
    WINBOOL fOnlyIfNotGeneric,
    IMoniker **ppmkComposite);
void IMoniker_ComposeWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_Enum_Proxy(
    IMoniker* This,
    WINBOOL fForward,
    IEnumMoniker **ppenumMoniker);
void IMoniker_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_IsEqual_Proxy(
    IMoniker* This,
    IMoniker *pmkOtherMoniker);
void IMoniker_IsEqual_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_Hash_Proxy(
    IMoniker* This,
    DWORD *pdwHash);
void IMoniker_Hash_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_IsRunning_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    IMoniker *pmkNewlyRunning);
void IMoniker_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_GetTimeOfLastChange_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    FILETIME *pFileTime);
void IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_Inverse_Proxy(
    IMoniker* This,
    IMoniker **ppmk);
void IMoniker_Inverse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_CommonPrefixWith_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkPrefix);
void IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_RelativePathTo_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkRelPath);
void IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_GetDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR *ppszDisplayName);
void IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_ParseDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_IsSystemMoniker_Proxy(
    IMoniker* This,
    DWORD *pdwMksys);
void IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IMoniker_BindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riidResult,
    void **ppvResult);
HRESULT IMoniker_BindToObject_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riidResult,
    IUnknown **ppvResult);
HRESULT IMoniker_BindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riid,
    void **ppvObj);
HRESULT IMoniker_BindToStorage_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID *const riid,
    IUnknown **ppvObj);
# 9558 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IROTData_INTERFACE_DEFINED__

extern const GUID IID_IROTData;
# 9575 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IROTDataVtbl {
   


    HRESULT ( *QueryInterface)(
        IROTData* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IROTData* This);

    ULONG ( *Release)(
        IROTData* This);


    HRESULT ( *GetComparisonData)(
        IROTData* This,
        byte *pbData,
        ULONG cbMax,
        ULONG *pcbData);

   
} IROTDataVtbl;
struct IROTData {
    IROTDataVtbl* lpVtbl;
};
# 9631 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IROTData_GetComparisonData_Proxy(
    IROTData* This,
    byte *pbData,
    ULONG cbMax,
    ULONG *pcbData);
void IROTData_GetComparisonData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 9650 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IEnumSTATSTG_INTERFACE_DEFINED__

typedef IEnumSTATSTG *LPENUMSTATSTG;
extern const GUID IID_IEnumSTATSTG;
# 9677 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IEnumSTATSTGVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumSTATSTG* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATSTG* This);

    ULONG ( *Release)(
        IEnumSTATSTG* This);


    HRESULT ( *Next)(
        IEnumSTATSTG* This,
        ULONG celt,
        STATSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATSTG* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATSTG* This);

    HRESULT ( *Clone)(
        IEnumSTATSTG* This,
        IEnumSTATSTG **ppenum);

   
} IEnumSTATSTGVtbl;
struct IEnumSTATSTG {
    IEnumSTATSTGVtbl* lpVtbl;
};
# 9756 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IEnumSTATSTG_RemoteNext_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
void IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Skip_Proxy(
    IEnumSTATSTG* This,
    ULONG celt);
void IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Reset_Proxy(
    IEnumSTATSTG* This);
void IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Clone_Proxy(
    IEnumSTATSTG* This,
    IEnumSTATSTG **ppenum);
void IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumSTATSTG_Next_Stub(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);







#define __IStorage_INTERFACE_DEFINED__

typedef IStorage *LPSTORAGE;
typedef struct tagRemSNB {
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
} RemSNB;
typedef RemSNB *wireSNB;
typedef LPOLESTR *SNB;
extern const GUID IID_IStorage;
# 9903 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStorage* This);

    ULONG ( *Release)(
        IStorage* This);


    HRESULT ( *CreateStream)(
        IStorage* This,
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStream **ppstm);

    HRESULT ( *OpenStream)(
        IStorage* This,
        const OLECHAR *pwcsName,
        void *reserved1,
        DWORD grfMode,
        DWORD reserved2,
        IStream **ppstm);

    HRESULT ( *CreateStorage)(
        IStorage* This,
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStorage **ppstg);

    HRESULT ( *OpenStorage)(
        IStorage* This,
        const OLECHAR *pwcsName,
        IStorage *pstgPriority,
        DWORD grfMode,
        SNB snbExclude,
        DWORD reserved,
        IStorage **ppstg);

    HRESULT ( *CopyTo)(
        IStorage* This,
        DWORD ciidExclude,
        const IID *rgiidExclude,
        SNB snbExclude,
        IStorage *pstgDest);

    HRESULT ( *MoveElementTo)(
        IStorage* This,
        const OLECHAR *pwcsName,
        IStorage *pstgDest,
        const OLECHAR *pwcsNewName,
        DWORD grfFlags);

    HRESULT ( *Commit)(
        IStorage* This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IStorage* This);

    HRESULT ( *EnumElements)(
        IStorage* This,
        DWORD reserved1,
        void *reserved2,
        DWORD reserved3,
        IEnumSTATSTG **ppenum);

    HRESULT ( *DestroyElement)(
        IStorage* This,
        const OLECHAR *pwcsName);

    HRESULT ( *RenameElement)(
        IStorage* This,
        const OLECHAR *pwcsOldName,
        const OLECHAR *pwcsNewName);

    HRESULT ( *SetElementTimes)(
        IStorage* This,
        const OLECHAR *pwcsName,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT ( *SetClass)(
        IStorage* This,
        const IID *const clsid);

    HRESULT ( *SetStateBits)(
        IStorage* This,
        DWORD grfStateBits,
        DWORD grfMask);

    HRESULT ( *Stat)(
        IStorage* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

   
} IStorageVtbl;
struct IStorage {
    IStorageVtbl* lpVtbl;
};
# 10100 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IStorage_CreateStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    DWORD grfMode,
    DWORD reserved1,
    DWORD reserved2,
    IStream **ppstm);
void IStorage_CreateStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_RemoteOpenStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
void IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_CreateStorage_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    DWORD grfMode,
    DWORD reserved1,
    DWORD reserved2,
    IStorage **ppstg);
void IStorage_CreateStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_OpenStorage_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    IStorage *pstgPriority,
    DWORD grfMode,
    SNB snbExclude,
    DWORD reserved,
    IStorage **ppstg);
void IStorage_OpenStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_RemoteCopyTo_Proxy(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
void IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_MoveElementTo_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    IStorage *pstgDest,
    const OLECHAR *pwcsNewName,
    DWORD grfFlags);
void IStorage_MoveElementTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_Commit_Proxy(
    IStorage* This,
    DWORD grfCommitFlags);
void IStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_Revert_Proxy(
    IStorage* This);
void IStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_RemoteEnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
void IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_DestroyElement_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName);
void IStorage_DestroyElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_RenameElement_Proxy(
    IStorage* This,
    const OLECHAR *pwcsOldName,
    const OLECHAR *pwcsNewName);
void IStorage_RenameElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_SetElementTimes_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void IStorage_SetElementTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_SetClass_Proxy(
    IStorage* This,
    const IID *const clsid);
void IStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_SetStateBits_Proxy(
    IStorage* This,
    DWORD grfStateBits,
    DWORD grfMask);
void IStorage_SetStateBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_Stat_Proxy(
    IStorage* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void IStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IStorage_OpenStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    void *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT IStorage_OpenStream_Stub(
    IStorage* This,
    const OLECHAR *pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT IStorage_CopyTo_Proxy(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
HRESULT IStorage_CopyTo_Stub(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
HRESULT IStorage_EnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    void *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
HRESULT IStorage_EnumElements_Stub(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
# 10302 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IPersistFile_INTERFACE_DEFINED__

typedef IPersistFile *LPPERSISTFILE;
extern const GUID IID_IPersistFile;
# 10332 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IPersistFileVtbl {
   


    HRESULT ( *QueryInterface)(
        IPersistFile* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistFile* This);

    ULONG ( *Release)(
        IPersistFile* This);


    HRESULT ( *GetClassID)(
        IPersistFile* This,
        CLSID *pClassID);


    HRESULT ( *IsDirty)(
        IPersistFile* This);

    HRESULT ( *Load)(
        IPersistFile* This,
        LPCOLESTR pszFileName,
        DWORD dwMode);

    HRESULT ( *Save)(
        IPersistFile* This,
        LPCOLESTR pszFileName,
        WINBOOL fRemember);

    HRESULT ( *SaveCompleted)(
        IPersistFile* This,
        LPCOLESTR pszFileName);

    HRESULT ( *GetCurFile)(
        IPersistFile* This,
        LPOLESTR *ppszFileName);

   
} IPersistFileVtbl;
struct IPersistFile {
    IPersistFileVtbl* lpVtbl;
};
# 10430 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IPersistFile_IsDirty_Proxy(
    IPersistFile* This);
void IPersistFile_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistFile_Load_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    DWORD dwMode);
void IPersistFile_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistFile_Save_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    WINBOOL fRemember);
void IPersistFile_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistFile_SaveCompleted_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName);
void IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistFile_GetCurFile_Proxy(
    IPersistFile* This,
    LPOLESTR *ppszFileName);
void IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IPersistStorage_INTERFACE_DEFINED__

typedef IPersistStorage *LPPERSISTSTORAGE;
extern const GUID IID_IPersistStorage;
# 10510 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IPersistStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IPersistStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistStorage* This);

    ULONG ( *Release)(
        IPersistStorage* This);


    HRESULT ( *GetClassID)(
        IPersistStorage* This,
        CLSID *pClassID);


    HRESULT ( *IsDirty)(
        IPersistStorage* This);

    HRESULT ( *InitNew)(
        IPersistStorage* This,
        IStorage *pStg);

    HRESULT ( *Load)(
        IPersistStorage* This,
        IStorage *pStg);

    HRESULT ( *Save)(
        IPersistStorage* This,
        IStorage *pStgSave,
        WINBOOL fSameAsLoad);

    HRESULT ( *SaveCompleted)(
        IPersistStorage* This,
        IStorage *pStgNew);

    HRESULT ( *HandsOffStorage)(
        IPersistStorage* This);

   
} IPersistStorageVtbl;
struct IPersistStorage {
    IPersistStorageVtbl* lpVtbl;
};
# 10614 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IPersistStorage_IsDirty_Proxy(
    IPersistStorage* This);
void IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStorage_InitNew_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void IPersistStorage_InitNew_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStorage_Load_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void IPersistStorage_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStorage_Save_Proxy(
    IPersistStorage* This,
    IStorage *pStgSave,
    WINBOOL fSameAsLoad);
void IPersistStorage_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStorage_SaveCompleted_Proxy(
    IPersistStorage* This,
    IStorage *pStgNew);
void IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistStorage_HandsOffStorage_Proxy(
    IPersistStorage* This);
void IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 10670 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __ILockBytes_INTERFACE_DEFINED__

typedef ILockBytes *LPLOCKBYTES;
extern const GUID IID_ILockBytes;
# 10715 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct ILockBytesVtbl {
   


    HRESULT ( *QueryInterface)(
        ILockBytes* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ILockBytes* This);

    ULONG ( *Release)(
        ILockBytes* This);


    HRESULT ( *ReadAt)(
        ILockBytes* This,
        ULARGE_INTEGER ulOffset,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *WriteAt)(
        ILockBytes* This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *Flush)(
        ILockBytes* This);

    HRESULT ( *SetSize)(
        ILockBytes* This,
        ULARGE_INTEGER cb);

    HRESULT ( *LockRegion)(
        ILockBytes* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *UnlockRegion)(
        ILockBytes* This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *Stat)(
        ILockBytes* This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

   
} ILockBytesVtbl;
struct ILockBytes {
    ILockBytesVtbl* lpVtbl;
};
# 10827 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT ILockBytes_RemoteReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_RemoteWriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_Flush_Proxy(
    ILockBytes* This);
void ILockBytes_Flush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_SetSize_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER cb);
void ILockBytes_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_LockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void ILockBytes_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_UnlockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_Stat_Proxy(
    ILockBytes* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void ILockBytes_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILockBytes_ReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT ILockBytes_ReadAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT ILockBytes_WriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT ILockBytes_WriteAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);







#define __IEnumFORMATETC_INTERFACE_DEFINED__

typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} FORMATETC;
typedef struct tagFORMATETC *LPFORMATETC;
extern const GUID IID_IEnumFORMATETC;
# 10968 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IEnumFORMATETCVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumFORMATETC* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumFORMATETC* This);

    ULONG ( *Release)(
        IEnumFORMATETC* This);


    HRESULT ( *Next)(
        IEnumFORMATETC* This,
        ULONG celt,
        FORMATETC *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumFORMATETC* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumFORMATETC* This);

    HRESULT ( *Clone)(
        IEnumFORMATETC* This,
        IEnumFORMATETC **ppenum);

   
} IEnumFORMATETCVtbl;
struct IEnumFORMATETC {
    IEnumFORMATETCVtbl* lpVtbl;
};
# 11047 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IEnumFORMATETC_RemoteNext_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
void IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Skip_Proxy(
    IEnumFORMATETC* This,
    ULONG celt);
void IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Reset_Proxy(
    IEnumFORMATETC* This);
void IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Clone_Proxy(
    IEnumFORMATETC* This,
    IEnumFORMATETC **ppenum);
void IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumFORMATETC_Next_Stub(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);







#define __IEnumSTATDATA_INTERFACE_DEFINED__

typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef enum tagADVF {
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;
typedef struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
} STATDATA;
typedef STATDATA *LPSTATDATA;
extern const GUID IID_IEnumSTATDATA;
# 11140 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IEnumSTATDATAVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumSTATDATA* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATDATA* This);

    ULONG ( *Release)(
        IEnumSTATDATA* This);


    HRESULT ( *Next)(
        IEnumSTATDATA* This,
        ULONG celt,
        STATDATA *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATDATA* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATDATA* This);

    HRESULT ( *Clone)(
        IEnumSTATDATA* This,
        IEnumSTATDATA **ppenum);

   
} IEnumSTATDATAVtbl;
struct IEnumSTATDATA {
    IEnumSTATDATAVtbl* lpVtbl;
};
# 11219 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IEnumSTATDATA_RemoteNext_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
void IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Skip_Proxy(
    IEnumSTATDATA* This,
    ULONG celt);
void IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Reset_Proxy(
    IEnumSTATDATA* This);
void IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Clone_Proxy(
    IEnumSTATDATA* This,
    IEnumSTATDATA **ppenum);
void IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumSTATDATA_Next_Stub(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);







#define __IRootStorage_INTERFACE_DEFINED__

typedef IRootStorage *LPROOTSTORAGE;
extern const GUID IID_IRootStorage;
# 11285 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IRootStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IRootStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRootStorage* This);

    ULONG ( *Release)(
        IRootStorage* This);


    HRESULT ( *SwitchToFile)(
        IRootStorage* This,
        LPOLESTR pszFile);

   
} IRootStorageVtbl;
struct IRootStorage {
    IRootStorageVtbl* lpVtbl;
};
# 11339 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IRootStorage_SwitchToFile_Proxy(
    IRootStorage* This,
    LPOLESTR pszFile);
void IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IAdviseSink_INTERFACE_DEFINED__

typedef IAdviseSink *LPADVISESINK;
typedef enum tagTYMED {
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
} TYMED;
typedef struct tagRemSTGMEDIUM {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
} RemSTGMEDIUM;
# 11390 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
    } ;
    IUnknown *pUnkForRelease;
} uSTGMEDIUM;

typedef struct _GDI_OBJECT {
    DWORD ObjectType;
    union {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    } u;
} GDI_OBJECT;
typedef struct _userSTGMEDIUM {
    struct _STGMEDIUM_UNION {
        DWORD tymed;
        union {
            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
        } u;
    } ;
    IUnknown *pUnkForRelease;
} userSTGMEDIUM;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef uSTGMEDIUM STGMEDIUM;
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef struct _userFLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM;
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef struct _FLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
} FLAG_STGMEDIUM;
extern const GUID IID_IAdviseSink;
# 11470 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IAdviseSinkVtbl {
   


    HRESULT ( *QueryInterface)(
        IAdviseSink* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAdviseSink* This);

    ULONG ( *Release)(
        IAdviseSink* This);


    void ( *OnDataChange)(
        IAdviseSink* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *OnViewChange)(
        IAdviseSink* This,
        DWORD dwAspect,
        LONG lindex);

    void ( *OnRename)(
        IAdviseSink* This,
        IMoniker *pmk);

    void ( *OnSave)(
        IAdviseSink* This);

    void ( *OnClose)(
        IAdviseSink* This);

   
} IAdviseSinkVtbl;
struct IAdviseSink {
    IAdviseSinkVtbl* lpVtbl;
};
# 11556 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IAdviseSink_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnSave_Proxy(
    IAdviseSink* This);
void IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnClose_Proxy(
    IAdviseSink* This);
void IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IAdviseSink_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT IAdviseSink_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void IAdviseSink_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT IAdviseSink_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void IAdviseSink_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT IAdviseSink_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void IAdviseSink_OnSave_Proxy(
    IAdviseSink* This);
HRESULT IAdviseSink_OnSave_Stub(
    IAdviseSink* This);
void IAdviseSink_OnClose_Proxy(
    IAdviseSink* This);
HRESULT IAdviseSink_OnClose_Stub(
    IAdviseSink* This);







#define __AsyncIAdviseSink_INTERFACE_DEFINED__

extern const GUID IID_AsyncIAdviseSink;
# 11677 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct AsyncIAdviseSinkVtbl {
   


    HRESULT ( *QueryInterface)(
        AsyncIAdviseSink* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        AsyncIAdviseSink* This);

    ULONG ( *Release)(
        AsyncIAdviseSink* This);


    void ( *Begin_OnDataChange)(
        AsyncIAdviseSink* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *Finish_OnDataChange)(
        AsyncIAdviseSink* This);

    void ( *Begin_OnViewChange)(
        AsyncIAdviseSink* This,
        DWORD dwAspect,
        LONG lindex);

    void ( *Finish_OnViewChange)(
        AsyncIAdviseSink* This);

    void ( *Begin_OnRename)(
        AsyncIAdviseSink* This,
        IMoniker *pmk);

    void ( *Finish_OnRename)(
        AsyncIAdviseSink* This);

    void ( *Begin_OnSave)(
        AsyncIAdviseSink* This);

    void ( *Finish_OnSave)(
        AsyncIAdviseSink* This);

    void ( *Begin_OnClose)(
        AsyncIAdviseSink* This);

    void ( *Finish_OnClose)(
        AsyncIAdviseSink* This);

   
} AsyncIAdviseSinkVtbl;
struct AsyncIAdviseSink {
    AsyncIAdviseSinkVtbl* lpVtbl;
};
# 11798 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
    IAdviseSink* This);
void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
    IAdviseSink* This);
void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
    IAdviseSink* This);
void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
    IAdviseSink* This);
void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void AsyncIAdviseSink_Begin_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void AsyncIAdviseSink_Finish_OnRename_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void AsyncIAdviseSink_Begin_OnSave_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(
    IAdviseSink* This);
void AsyncIAdviseSink_Finish_OnSave_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(
    IAdviseSink* This);
void AsyncIAdviseSink_Begin_OnClose_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(
    IAdviseSink* This);
void AsyncIAdviseSink_Finish_OnClose_Proxy(
    IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(
    IAdviseSink* This);
# 11942 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IAdviseSink2_INTERFACE_DEFINED__

typedef IAdviseSink2 *LPADVISESINK2;
extern const GUID IID_IAdviseSink2;
# 11958 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IAdviseSink2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IAdviseSink2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAdviseSink2* This);

    ULONG ( *Release)(
        IAdviseSink2* This);


    void ( *OnDataChange)(
        IAdviseSink2* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *OnViewChange)(
        IAdviseSink2* This,
        DWORD dwAspect,
        LONG lindex);

    void ( *OnRename)(
        IAdviseSink2* This,
        IMoniker *pmk);

    void ( *OnSave)(
        IAdviseSink2* This);

    void ( *OnClose)(
        IAdviseSink2* This);


    void ( *OnLinkSrcChange)(
        IAdviseSink2* This,
        IMoniker *pmk);

   
} IAdviseSink2Vtbl;
struct IAdviseSink2 {
    IAdviseSink2Vtbl* lpVtbl;
};
# 12055 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT IAdviseSink2_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);







#define __AsyncIAdviseSink2_INTERFACE_DEFINED__

extern const GUID IID_AsyncIAdviseSink2;
# 12094 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct AsyncIAdviseSink2Vtbl {
   


    HRESULT ( *QueryInterface)(
        AsyncIAdviseSink2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        AsyncIAdviseSink2* This);

    ULONG ( *Release)(
        AsyncIAdviseSink2* This);


    void ( *Begin_OnDataChange)(
        AsyncIAdviseSink2* This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *Finish_OnDataChange)(
        AsyncIAdviseSink2* This);

    void ( *Begin_OnViewChange)(
        AsyncIAdviseSink2* This,
        DWORD dwAspect,
        LONG lindex);

    void ( *Finish_OnViewChange)(
        AsyncIAdviseSink2* This);

    void ( *Begin_OnRename)(
        AsyncIAdviseSink2* This,
        IMoniker *pmk);

    void ( *Finish_OnRename)(
        AsyncIAdviseSink2* This);

    void ( *Begin_OnSave)(
        AsyncIAdviseSink2* This);

    void ( *Finish_OnSave)(
        AsyncIAdviseSink2* This);

    void ( *Begin_OnClose)(
        AsyncIAdviseSink2* This);

    void ( *Finish_OnClose)(
        AsyncIAdviseSink2* This);


    void ( *Begin_OnLinkSrcChange)(
        AsyncIAdviseSink2* This,
        IMoniker *pmk);

    void ( *Finish_OnLinkSrcChange)(
        AsyncIAdviseSink2* This);

   
} AsyncIAdviseSink2Vtbl;
struct AsyncIAdviseSink2 {
    AsyncIAdviseSink2Vtbl* lpVtbl;
};
# 12233 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    IAdviseSink2* This);
HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
# 12269 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IDataObject_INTERFACE_DEFINED__

typedef IDataObject *LPDATAOBJECT;
typedef enum tagDATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2
} DATADIR;
extern const GUID IID_IDataObject;
# 12322 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IDataObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IDataObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDataObject* This);

    ULONG ( *Release)(
        IDataObject* This);


    HRESULT ( *GetData)(
        IDataObject* This,
        FORMATETC *pformatetcIn,
        STGMEDIUM *pmedium);

    HRESULT ( *GetDataHere)(
        IDataObject* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium);

    HRESULT ( *QueryGetData)(
        IDataObject* This,
        FORMATETC *pformatetc);

    HRESULT ( *GetCanonicalFormatEtc)(
        IDataObject* This,
        FORMATETC *pformatectIn,
        FORMATETC *pformatetcOut);

    HRESULT ( *SetData)(
        IDataObject* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        WINBOOL fRelease);

    HRESULT ( *EnumFormatEtc)(
        IDataObject* This,
        DWORD dwDirection,
        IEnumFORMATETC **ppenumFormatEtc);

    HRESULT ( *DAdvise)(
        IDataObject* This,
        FORMATETC *pformatetc,
        DWORD advf,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT ( *DUnadvise)(
        IDataObject* This,
        DWORD dwConnection);

    HRESULT ( *EnumDAdvise)(
        IDataObject* This,
        IEnumSTATDATA **ppenumAdvise);

   
} IDataObjectVtbl;
struct IDataObject {
    IDataObjectVtbl* lpVtbl;
};
# 12449 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IDataObject_RemoteGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
void IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_RemoteGetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
void IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_QueryGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc);
void IDataObject_QueryGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_GetCanonicalFormatEtc_Proxy(
    IDataObject* This,
    FORMATETC *pformatectIn,
    FORMATETC *pformatetcOut);
void IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_RemoteSetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    WINBOOL fRelease);
void IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_EnumFormatEtc_Proxy(
    IDataObject* This,
    DWORD dwDirection,
    IEnumFORMATETC **ppenumFormatEtc);
void IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_DAdvise_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    DWORD advf,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void IDataObject_DAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_DUnadvise_Proxy(
    IDataObject* This,
    DWORD dwConnection);
void IDataObject_DUnadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_EnumDAdvise_Proxy(
    IDataObject* This,
    IEnumSTATDATA **ppenumAdvise);
void IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataObject_GetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pmedium);
HRESULT IDataObject_GetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
HRESULT IDataObject_GetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium);
HRESULT IDataObject_GetDataHere_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
HRESULT IDataObject_SetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    WINBOOL fRelease);
HRESULT IDataObject_SetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    WINBOOL fRelease);
# 12565 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IDataAdviseHolder_INTERFACE_DEFINED__

typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
extern const GUID IID_IDataAdviseHolder;
# 12596 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IDataAdviseHolderVtbl {
   


    HRESULT ( *QueryInterface)(
        IDataAdviseHolder* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDataAdviseHolder* This);

    ULONG ( *Release)(
        IDataAdviseHolder* This);


    HRESULT ( *Advise)(
        IDataAdviseHolder* This,
        IDataObject *pDataObject,
        FORMATETC *pFetc,
        DWORD advf,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IDataAdviseHolder* This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IDataAdviseHolder* This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *SendOnDataChange)(
        IDataAdviseHolder* This,
        IDataObject *pDataObject,
        DWORD dwReserved,
        DWORD advf);

   
} IDataAdviseHolderVtbl;
struct IDataAdviseHolder {
    IDataAdviseHolderVtbl* lpVtbl;
};
# 12680 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IDataAdviseHolder_Advise_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    FORMATETC *pFetc,
    DWORD advf,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_Unadvise_Proxy(
    IDataAdviseHolder* This,
    DWORD dwConnection);
void IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_EnumAdvise_Proxy(
    IDataAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_SendOnDataChange_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    DWORD dwReserved,
    DWORD advf);
void IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IMessageFilter_INTERFACE_DEFINED__

typedef IMessageFilter *LPMESSAGEFILTER;
typedef enum tagCALLTYPE {
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
} CALLTYPE;
typedef enum tagSERVERCALL {
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
} SERVERCALL;
typedef enum tagPENDINGTYPE {
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
} PENDINGTYPE;
typedef enum tagPENDINGMSG {
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
} PENDINGMSG;
typedef struct tagINTERFACEINFO {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
} INTERFACEINFO;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
extern const GUID IID_IMessageFilter;
# 12781 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IMessageFilterVtbl {
   


    HRESULT ( *QueryInterface)(
        IMessageFilter* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMessageFilter* This);

    ULONG ( *Release)(
        IMessageFilter* This);


    DWORD ( *HandleInComingCall)(
        IMessageFilter* This,
        DWORD dwCallType,
        HTASK htaskCaller,
        DWORD dwTickCount,
        LPINTERFACEINFO lpInterfaceInfo);

    DWORD ( *RetryRejectedCall)(
        IMessageFilter* This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwRejectType);

    DWORD ( *MessagePending)(
        IMessageFilter* This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwPendingType);

   
} IMessageFilterVtbl;
struct IMessageFilter {
    IMessageFilterVtbl* lpVtbl;
};
# 12858 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
DWORD IMessageFilter_HandleInComingCall_Proxy(
    IMessageFilter* This,
    DWORD dwCallType,
    HTASK htaskCaller,
    DWORD dwTickCount,
    LPINTERFACEINFO lpInterfaceInfo);
void IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD IMessageFilter_RetryRejectedCall_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwRejectType);
void IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD IMessageFilter_MessagePending_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwPendingType);
void IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;





#define __IClassActivator_INTERFACE_DEFINED__

extern const GUID IID_IClassActivator;
# 12932 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IClassActivatorVtbl {
   


    HRESULT ( *QueryInterface)(
        IClassActivator* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClassActivator* This);

    ULONG ( *Release)(
        IClassActivator* This);


    HRESULT ( *GetClassObject)(
        IClassActivator* This,
        const IID *const rclsid,
        DWORD dwClassContext,
        LCID locale,
        const IID *const riid,
        void **ppv);

   
} IClassActivatorVtbl;
struct IClassActivator {
    IClassActivatorVtbl* lpVtbl;
};
# 12990 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IClassActivator_GetClassObject_Proxy(
    IClassActivator* This,
    const IID *const rclsid,
    DWORD dwClassContext,
    LCID locale,
    const IID *const riid,
    void **ppv);
void IClassActivator_GetClassObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 13011 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IFillLockBytes_INTERFACE_DEFINED__

extern const GUID IID_IFillLockBytes;
# 13040 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IFillLockBytesVtbl {
   


    HRESULT ( *QueryInterface)(
        IFillLockBytes* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IFillLockBytes* This);

    ULONG ( *Release)(
        IFillLockBytes* This);


    HRESULT ( *FillAppend)(
        IFillLockBytes* This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *FillAt)(
        IFillLockBytes* This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *SetFillSize)(
        IFillLockBytes* This,
        ULARGE_INTEGER ulSize);

    HRESULT ( *Terminate)(
        IFillLockBytes* This,
        WINBOOL bCanceled);

   
} IFillLockBytesVtbl;
struct IFillLockBytes {
    IFillLockBytesVtbl* lpVtbl;
};
# 13123 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IFillLockBytes_RemoteFillAppend_Proxy(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IFillLockBytes_RemoteFillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IFillLockBytes_SetFillSize_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulSize);
void IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IFillLockBytes_Terminate_Proxy(
    IFillLockBytes* This,
    WINBOOL bCanceled);
void IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT IFillLockBytes_FillAppend_Stub(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT IFillLockBytes_FillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT IFillLockBytes_FillAt_Stub(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
# 13191 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IProgressNotify_INTERFACE_DEFINED__

extern const GUID IID_IProgressNotify;
# 13209 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IProgressNotifyVtbl {
   


    HRESULT ( *QueryInterface)(
        IProgressNotify* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IProgressNotify* This);

    ULONG ( *Release)(
        IProgressNotify* This);


    HRESULT ( *OnProgress)(
        IProgressNotify* This,
        DWORD dwProgressCurrent,
        DWORD dwProgressMaximum,
        WINBOOL fAccurate,
        WINBOOL fOwner);

   
} IProgressNotifyVtbl;
struct IProgressNotify {
    IProgressNotifyVtbl* lpVtbl;
};
# 13266 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IProgressNotify_OnProgress_Proxy(
    IProgressNotify* This,
    DWORD dwProgressCurrent,
    DWORD dwProgressMaximum,
    WINBOOL fAccurate,
    WINBOOL fOwner);
void IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 13286 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __ILayoutStorage_INTERFACE_DEFINED__

typedef struct tagStorageLayout {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
} StorageLayout;
extern const GUID IID_ILayoutStorage;
# 13321 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct ILayoutStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        ILayoutStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ILayoutStorage* This);

    ULONG ( *Release)(
        ILayoutStorage* This);


    HRESULT ( *LayoutScript)(
        ILayoutStorage* This,
        StorageLayout *pStorageLayout,
        DWORD nEntries,
        DWORD glfInterleavedFlag);

    HRESULT ( *BeginMonitor)(
        ILayoutStorage* This);

    HRESULT ( *EndMonitor)(
        ILayoutStorage* This);

    HRESULT ( *ReLayoutDocfile)(
        ILayoutStorage* This,
        OLECHAR *pwcsNewDfName);

    HRESULT ( *ReLayoutDocfileOnILockBytes)(
        ILayoutStorage* This,
        ILockBytes *pILockBytes);

   
} ILayoutStorageVtbl;
struct ILayoutStorage {
    ILayoutStorageVtbl* lpVtbl;
};
# 13407 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT ILayoutStorage_LayoutScript_Proxy(
    ILayoutStorage* This,
    StorageLayout *pStorageLayout,
    DWORD nEntries,
    DWORD glfInterleavedFlag);
void ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILayoutStorage_BeginMonitor_Proxy(
    ILayoutStorage* This);
void ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILayoutStorage_EndMonitor_Proxy(
    ILayoutStorage* This);
void ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILayoutStorage_ReLayoutDocfile_Proxy(
    ILayoutStorage* This,
    OLECHAR *pwcsNewDfName);
void ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(
    ILayoutStorage* This,
    ILockBytes *pILockBytes);
void ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 13456 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IBlockingLock_INTERFACE_DEFINED__

extern const GUID IID_IBlockingLock;
# 13474 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IBlockingLockVtbl {
   


    HRESULT ( *QueryInterface)(
        IBlockingLock* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBlockingLock* This);

    ULONG ( *Release)(
        IBlockingLock* This);


    HRESULT ( *Lock)(
        IBlockingLock* This,
        DWORD dwTimeout);

    HRESULT ( *Unlock)(
        IBlockingLock* This);

   
} IBlockingLockVtbl;
struct IBlockingLock {
    IBlockingLockVtbl* lpVtbl;
};
# 13535 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IBlockingLock_Lock_Proxy(
    IBlockingLock* This,
    DWORD dwTimeout);
void IBlockingLock_Lock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBlockingLock_Unlock_Proxy(
    IBlockingLock* This);
void IBlockingLock_Unlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __ITimeAndNoticeControl_INTERFACE_DEFINED__

extern const GUID IID_ITimeAndNoticeControl;
# 13573 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct ITimeAndNoticeControlVtbl {
   


    HRESULT ( *QueryInterface)(
        ITimeAndNoticeControl* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITimeAndNoticeControl* This);

    ULONG ( *Release)(
        ITimeAndNoticeControl* This);


    HRESULT ( *SuppressChanges)(
        ITimeAndNoticeControl* This,
        DWORD res1,
        DWORD res2);

   
} ITimeAndNoticeControlVtbl;
struct ITimeAndNoticeControl {
    ITimeAndNoticeControlVtbl* lpVtbl;
};
# 13628 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT ITimeAndNoticeControl_SuppressChanges_Proxy(
    ITimeAndNoticeControl* This,
    DWORD res1,
    DWORD res2);
void ITimeAndNoticeControl_SuppressChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IOplockStorage_INTERFACE_DEFINED__

extern const GUID IID_IOplockStorage;
# 13672 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IOplockStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IOplockStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOplockStorage* This);

    ULONG ( *Release)(
        IOplockStorage* This);


    HRESULT ( *CreateStorageEx)(
        IOplockStorage* This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID *const riid,
        void **ppstgOpen);

    HRESULT ( *OpenStorageEx)(
        IOplockStorage* This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID *const riid,
        void **ppstgOpen);

   
} IOplockStorageVtbl;
struct IOplockStorage {
    IOplockStorageVtbl* lpVtbl;
};
# 13744 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IOplockStorage_CreateStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID *const riid,
    void **ppstgOpen);
void IOplockStorage_CreateStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOplockStorage_OpenStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID *const riid,
    void **ppstgOpen);
void IOplockStorage_OpenStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 13779 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IDirectWriterLock_INTERFACE_DEFINED__

extern const GUID IID_IDirectWriterLock;
# 13800 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IDirectWriterLockVtbl {
   


    HRESULT ( *QueryInterface)(
        IDirectWriterLock* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDirectWriterLock* This);

    ULONG ( *Release)(
        IDirectWriterLock* This);


    HRESULT ( *WaitForWriteAccess)(
        IDirectWriterLock* This,
        DWORD dwTimeout);

    HRESULT ( *ReleaseWriteAccess)(
        IDirectWriterLock* This);

    HRESULT ( *HaveWriteAccess)(
        IDirectWriterLock* This);

   
} IDirectWriterLockVtbl;
struct IDirectWriterLock {
    IDirectWriterLockVtbl* lpVtbl;
};
# 13868 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IDirectWriterLock_WaitForWriteAccess_Proxy(
    IDirectWriterLock* This,
    DWORD dwTimeout);
void IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDirectWriterLock_ReleaseWriteAccess_Proxy(
    IDirectWriterLock* This);
void IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDirectWriterLock_HaveWriteAccess_Proxy(
    IDirectWriterLock* This);
void IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 13899 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IUrlMon_INTERFACE_DEFINED__

extern const GUID IID_IUrlMon;
# 13923 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IUrlMonVtbl {
   


    HRESULT ( *QueryInterface)(
        IUrlMon* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IUrlMon* This);

    ULONG ( *Release)(
        IUrlMon* This);


    HRESULT ( *AsyncGetClassBits)(
        IUrlMon* This,
        const IID *const rclsid,
        LPCWSTR pszTYPE,
        LPCWSTR pszExt,
        DWORD dwFileVersionMS,
        DWORD dwFileVersionLS,
        LPCWSTR pszCodeBase,
        IBindCtx *pbc,
        DWORD dwClassContext,
        const IID *const riid,
        DWORD flags);

   
} IUrlMonVtbl;
struct IUrlMon {
    IUrlMonVtbl* lpVtbl;
};
# 13986 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IUrlMon_AsyncGetClassBits_Proxy(
    IUrlMon* This,
    const IID *const rclsid,
    LPCWSTR pszTYPE,
    LPCWSTR pszExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
    LPCWSTR pszCodeBase,
    IBindCtx *pbc,
    DWORD dwClassContext,
    const IID *const riid,
    DWORD flags);
void IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IForegroundTransfer_INTERFACE_DEFINED__

extern const GUID IID_IForegroundTransfer;
# 14025 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IForegroundTransferVtbl {
   


    HRESULT ( *QueryInterface)(
        IForegroundTransfer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IForegroundTransfer* This);

    ULONG ( *Release)(
        IForegroundTransfer* This);


    HRESULT ( *AllowForegroundTransfer)(
        IForegroundTransfer* This,
        void *lpvReserved);

   
} IForegroundTransferVtbl;
struct IForegroundTransfer {
    IForegroundTransferVtbl* lpVtbl;
};
# 14079 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IForegroundTransfer_AllowForegroundTransfer_Proxy(
    IForegroundTransfer* This,
    void *lpvReserved);
void IForegroundTransfer_AllowForegroundTransfer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IThumbnailExtractor_INTERFACE_DEFINED__

extern const GUID IID_IThumbnailExtractor;
# 14117 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IThumbnailExtractorVtbl {
   


    HRESULT ( *QueryInterface)(
        IThumbnailExtractor* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IThumbnailExtractor* This);

    ULONG ( *Release)(
        IThumbnailExtractor* This);


    HRESULT ( *ExtractThumbnail)(
        IThumbnailExtractor* This,
        IStorage *pStg,
        ULONG ulLength,
        ULONG ulHeight,
        ULONG *pulOutputLength,
        ULONG *pulOutputHeight,
        HBITMAP *phOutputBitmap);

    HRESULT ( *OnFileUpdated)(
        IThumbnailExtractor* This,
        IStorage *pStg);

   
} IThumbnailExtractorVtbl;
struct IThumbnailExtractor {
    IThumbnailExtractorVtbl* lpVtbl;
};
# 14184 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IThumbnailExtractor_ExtractThumbnail_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg,
    ULONG ulLength,
    ULONG ulHeight,
    ULONG *pulOutputLength,
    ULONG *pulOutputHeight,
    HBITMAP *phOutputBitmap);
void IThumbnailExtractor_ExtractThumbnail_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IThumbnailExtractor_OnFileUpdated_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg);
void IThumbnailExtractor_OnFileUpdated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IDummyHICONIncluder_INTERFACE_DEFINED__

extern const GUID IID_IDummyHICONIncluder;
# 14228 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IDummyHICONIncluderVtbl {
   


    HRESULT ( *QueryInterface)(
        IDummyHICONIncluder* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDummyHICONIncluder* This);

    ULONG ( *Release)(
        IDummyHICONIncluder* This);


    HRESULT ( *Dummy)(
        IDummyHICONIncluder* This,
        HICON h1,
        HDC h2);

   
} IDummyHICONIncluderVtbl;
struct IDummyHICONIncluder {
    IDummyHICONIncluderVtbl* lpVtbl;
};
# 14283 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IDummyHICONIncluder_Dummy_Proxy(
    IDummyHICONIncluder* This,
    HICON h1,
    HDC h2);
void IDummyHICONIncluder_Dummy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);



typedef enum tagApplicationType {
    ServerApplication = 0,
    LibraryApplication = 1
} ApplicationType;
typedef enum tagShutdownType {
    IdleShutdown = 0,
    ForcedShutdown = 1
} ShutdownType;




#define __IProcessLock_INTERFACE_DEFINED__

extern const GUID IID_IProcessLock;
# 14325 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IProcessLockVtbl {
   


    HRESULT ( *QueryInterface)(
        IProcessLock* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IProcessLock* This);

    ULONG ( *Release)(
        IProcessLock* This);


    ULONG ( *AddRefOnProcess)(
        IProcessLock* This);

    ULONG ( *ReleaseRefOnProcess)(
        IProcessLock* This);

   
} IProcessLockVtbl;
struct IProcessLock {
    IProcessLockVtbl* lpVtbl;
};
# 14385 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
ULONG IProcessLock_AddRefOnProcess_Proxy(
    IProcessLock* This);
void IProcessLock_AddRefOnProcess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG IProcessLock_ReleaseRefOnProcess_Proxy(
    IProcessLock* This);
void IProcessLock_ReleaseRefOnProcess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __ISurrogateService_INTERFACE_DEFINED__

extern const GUID IID_ISurrogateService;
# 14436 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct ISurrogateServiceVtbl {
   


    HRESULT ( *QueryInterface)(
        ISurrogateService* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISurrogateService* This);

    ULONG ( *Release)(
        ISurrogateService* This);


    HRESULT ( *Init)(
        ISurrogateService* This,
        const GUID *const rguidProcessID,
        IProcessLock *pProcessLock,
        WINBOOL *pfApplicationAware);

    HRESULT ( *ApplicationLaunch)(
        ISurrogateService* This,
        const GUID *const rguidApplID,
        ApplicationType appType);

    HRESULT ( *ApplicationFree)(
        ISurrogateService* This,
        const GUID *const rguidApplID);

    HRESULT ( *CatalogRefresh)(
        ISurrogateService* This,
        ULONG ulReserved);

    HRESULT ( *ProcessShutdown)(
        ISurrogateService* This,
        ShutdownType shutdownType);

   
} ISurrogateServiceVtbl;
struct ISurrogateService {
    ISurrogateServiceVtbl* lpVtbl;
};
# 14525 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT ISurrogateService_Init_Proxy(
    ISurrogateService* This,
    const GUID *const rguidProcessID,
    IProcessLock *pProcessLock,
    WINBOOL *pfApplicationAware);
void ISurrogateService_Init_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISurrogateService_ApplicationLaunch_Proxy(
    ISurrogateService* This,
    const GUID *const rguidApplID,
    ApplicationType appType);
void ISurrogateService_ApplicationLaunch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISurrogateService_ApplicationFree_Proxy(
    ISurrogateService* This,
    const GUID *const rguidApplID);
void ISurrogateService_ApplicationFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISurrogateService_CatalogRefresh_Proxy(
    ISurrogateService* This,
    ULONG ulReserved);
void ISurrogateService_CatalogRefresh_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISurrogateService_ProcessShutdown_Proxy(
    ISurrogateService* This,
    ShutdownType shutdownType);
void ISurrogateService_ProcessShutdown_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







#define __IInitializeSpy_INTERFACE_DEFINED__

typedef IInitializeSpy *LPINITIALIZESPY;
extern const GUID IID_IInitializeSpy;
# 14603 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IInitializeSpyVtbl {
   


    HRESULT ( *QueryInterface)(
        IInitializeSpy* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInitializeSpy* This);

    ULONG ( *Release)(
        IInitializeSpy* This);


    HRESULT ( *PreInitialize)(
        IInitializeSpy* This,
        DWORD dwCoInit,
        DWORD dwCurThreadAptRefs);

    HRESULT ( *PostInitialize)(
        IInitializeSpy* This,
        HRESULT hrCoInit,
        DWORD dwCoInit,
        DWORD dwNewThreadAptRefs);

    HRESULT ( *PreUninitialize)(
        IInitializeSpy* This,
        DWORD dwCurThreadAptRefs);

    HRESULT ( *PostUninitialize)(
        IInitializeSpy* This,
        DWORD dwNewThreadAptRefs);

   
} IInitializeSpyVtbl;
struct IInitializeSpy {
    IInitializeSpyVtbl* lpVtbl;
};
# 14684 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
HRESULT IInitializeSpy_PreInitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCoInit,
    DWORD dwCurThreadAptRefs);
void IInitializeSpy_PreInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PostInitialize_Proxy(
    IInitializeSpy* This,
    HRESULT hrCoInit,
    DWORD dwCoInit,
    DWORD dwNewThreadAptRefs);
void IInitializeSpy_PostInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PreUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCurThreadAptRefs);
void IInitializeSpy_PreUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PostUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwNewThreadAptRefs);
void IInitializeSpy_PostUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 14728 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
#define __IApartmentShutdown_INTERFACE_DEFINED__

extern const GUID IID_IApartmentShutdown;
# 14743 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
typedef struct IApartmentShutdownVtbl {
   


    HRESULT ( *QueryInterface)(
        IApartmentShutdown* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IApartmentShutdown* This);

    ULONG ( *Release)(
        IApartmentShutdown* This);


    void ( *OnUninitialize)(
        IApartmentShutdown* This,
        UINT64 ui64ApartmentIdentifier);

   
} IApartmentShutdownVtbl;
struct IApartmentShutdown {
    IApartmentShutdownVtbl* lpVtbl;
};
# 14797 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 3
void IApartmentShutdown_OnUninitialize_Proxy(
    IApartmentShutdown* This,
    UINT64 ui64ApartmentIdentifier);
void IApartmentShutdown_OnUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






ULONG SNB_UserSize (ULONG *, ULONG, SNB *);
unsigned char * SNB_UserMarshal (ULONG *, unsigned char *, SNB *);
unsigned char * SNB_UserUnmarshal(ULONG *, unsigned char *, SNB *);
void SNB_UserFree (ULONG *, SNB *);
ULONG CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG ASYNC_STGMEDIUM_UserSize (ULONG *, ULONG, ASYNC_STGMEDIUM *);
unsigned char * ASYNC_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
unsigned char * ASYNC_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
void ASYNC_STGMEDIUM_UserFree (ULONG *, ASYNC_STGMEDIUM *);
ULONG FLAG_STGMEDIUM_UserSize (ULONG *, ULONG, FLAG_STGMEDIUM *);
unsigned char * FLAG_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, FLAG_STGMEDIUM *);
unsigned char * FLAG_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, FLAG_STGMEDIUM *);
void FLAG_STGMEDIUM_UserFree (ULONG *, FLAG_STGMEDIUM *);
ULONG HBITMAP_UserSize (ULONG *, ULONG, HBITMAP *);
unsigned char * HBITMAP_UserMarshal (ULONG *, unsigned char *, HBITMAP *);
unsigned char * HBITMAP_UserUnmarshal(ULONG *, unsigned char *, HBITMAP *);
void HBITMAP_UserFree (ULONG *, HBITMAP *);
ULONG HICON_UserSize (ULONG *, ULONG, HICON *);
unsigned char * HICON_UserMarshal (ULONG *, unsigned char *, HICON *);
unsigned char * HICON_UserUnmarshal(ULONG *, unsigned char *, HICON *);
void HICON_UserFree (ULONG *, HICON *);
ULONG HDC_UserSize (ULONG *, ULONG, HDC *);
unsigned char * HDC_UserMarshal (ULONG *, unsigned char *, HDC *);
unsigned char * HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void HDC_UserFree (ULONG *, HDC *);
# 67 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3
# 79 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 3
extern __attribute__((dllimport)) DWORD CoBuildVersion (void);
extern __attribute__((dllimport)) HRESULT CoInitialize (LPVOID pvReserved);
extern __attribute__((dllimport)) HRESULT CoRegisterMallocSpy (LPMALLOCSPY pMallocSpy);
extern __attribute__((dllimport)) HRESULT CoRevokeMallocSpy (void);
extern __attribute__((dllimport)) HRESULT CoCreateStandardMalloc (DWORD memctx, IMalloc **ppMalloc);
extern __attribute__((dllimport)) HRESULT CoRegisterInitializeSpy (LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
extern __attribute__((dllimport)) HRESULT CoRevokeInitializeSpy (ULARGE_INTEGER uliCookie);

typedef enum tagCOMSD {
  SD_LAUNCHPERMISSIONS = 0,
  SD_ACCESSPERMISSIONS = 1,
  SD_LAUNCHRESTRICTIONS = 2,
  SD_ACCESSRESTRICTIONS = 3
} COMSD;

extern __attribute__((dllimport)) HRESULT CoGetSystemSecurityPermissions (COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);
extern __attribute__((dllimport)) HINSTANCE CoLoadLibrary (LPOLESTR lpszLibName, WINBOOL bAutoFree);
extern __attribute__((dllimport)) void CoFreeLibrary (HINSTANCE hInst);
extern __attribute__((dllimport)) void CoFreeAllLibraries (void);
extern __attribute__((dllimport)) HRESULT CoGetInstanceFromFile (COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults);
extern __attribute__((dllimport)) HRESULT CoGetInstanceFromIStorage (COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults);
extern __attribute__((dllimport)) HRESULT CoAllowSetForegroundWindow (IUnknown *pUnk, LPVOID lpvReserved);
extern __attribute__((dllimport)) HRESULT DcomChannelSetHResult (LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR);
extern __attribute__((dllimport)) WINBOOL CoIsOle1Class (const IID *const rclsid);
extern __attribute__((dllimport)) HRESULT CLSIDFromProgIDEx (LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern __attribute__((dllimport)) WINBOOL CoFileTimeToDosDateTime (FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern __attribute__((dllimport)) WINBOOL CoDosDateTimeToFileTime (WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime);
extern __attribute__((dllimport)) HRESULT CoFileTimeNow (FILETIME *lpFileTime);
extern __attribute__((dllimport)) HRESULT CoRegisterMessageFilter (LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter);
extern __attribute__((dllimport)) HRESULT CoRegisterChannelHook (const GUID *const ExtensionUuid, IChannelHook *pChannelHook);
extern __attribute__((dllimport)) HRESULT CoTreatAsClass (const IID *const clsidOld, const IID *const clsidNew);
extern __attribute__((dllimport)) HRESULT CreateDataAdviseHolder (LPDATAADVISEHOLDER *ppDAHolder);
extern __attribute__((dllimport)) HRESULT CreateDataCache (LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv);
extern __attribute__((dllimport)) HRESULT StgOpenLayoutDocfile (OLECHAR const *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);



extern __attribute__((dllimport)) HRESULT StgCreateDocfile (const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
extern __attribute__((dllimport)) HRESULT StgCreateDocfileOnILockBytes (ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
extern __attribute__((dllimport)) HRESULT StgOpenStorage (const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
extern __attribute__((dllimport)) HRESULT StgOpenStorageOnILockBytes (ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
extern __attribute__((dllimport)) HRESULT StgIsStorageFile (const WCHAR *pwcsName);
extern __attribute__((dllimport)) HRESULT StgIsStorageILockBytes (ILockBytes *plkbyt);
extern __attribute__((dllimport)) HRESULT StgSetTimes (const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);
extern __attribute__((dllimport)) HRESULT StgOpenAsyncDocfileOnIFillLockBytes (IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen);
extern __attribute__((dllimport)) HRESULT StgGetIFillLockBytesOnILockBytes (ILockBytes *pilb, IFillLockBytes **ppflb);
extern __attribute__((dllimport)) HRESULT StgGetIFillLockBytesOnFile (OLECHAR const *pwcsName, IFillLockBytes **ppflb);


#define STGOPTIONS_VERSION

typedef struct tagSTGOPTIONS {
  USHORT usVersion;
  USHORT reserved;
  ULONG ulSectorSize;

  const WCHAR *pwcsTemplateFile;

} STGOPTIONS;


extern __attribute__((dllimport)) HRESULT StgCreateStorageEx (const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen);
extern __attribute__((dllimport)) HRESULT StgOpenStorageEx (const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen);
extern __attribute__((dllimport)) HRESULT BindMoniker (LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult);
extern __attribute__((dllimport)) HRESULT CoGetObject (LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv);
extern __attribute__((dllimport)) HRESULT MkParseDisplayName (LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT MonikerRelativePathTo (LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, WINBOOL dwReserved);
extern __attribute__((dllimport)) HRESULT MonikerCommonPrefixWith (LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon);
extern __attribute__((dllimport)) HRESULT CreateBindCtx (DWORD reserved, LPBC *ppbc);
extern __attribute__((dllimport)) HRESULT CreateGenericComposite (LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite);
extern __attribute__((dllimport)) HRESULT GetClassFile (LPCOLESTR szFilename, CLSID *pclsid);
extern __attribute__((dllimport)) HRESULT CreateClassMoniker (const IID *const rclsid, LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT CreateFileMoniker (LPCOLESTR lpszPathName, LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT CreateItemMoniker (LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT CreateAntiMoniker (LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT CreatePointerMoniker (LPUNKNOWN punk, LPMONIKER *ppmk);
extern __attribute__((dllimport)) HRESULT CreateObjrefMoniker (LPUNKNOWN punk, LPMONIKER *ppmk);



extern __attribute__((dllimport)) HRESULT CoInstall (IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase);
extern __attribute__((dllimport)) HRESULT GetRunningObjectTable (DWORD reserved, LPRUNNINGOBJECTTABLE *pprot);


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3



#define __urlmon_h__




#define __IPersistMoniker_FWD_DEFINED__
typedef struct IPersistMoniker IPersistMoniker;



#define __IMonikerProp_FWD_DEFINED__
typedef struct IMonikerProp IMonikerProp;



#define __IBindProtocol_FWD_DEFINED__
typedef struct IBindProtocol IBindProtocol;



#define __IBinding_FWD_DEFINED__
typedef struct IBinding IBinding;



#define __IBindStatusCallback_FWD_DEFINED__
typedef struct IBindStatusCallback IBindStatusCallback;



#define __IBindStatusCallbackEx_FWD_DEFINED__
typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;



#define __IAuthenticate_FWD_DEFINED__
typedef struct IAuthenticate IAuthenticate;



#define __IAuthenticateEx_FWD_DEFINED__
typedef struct IAuthenticateEx IAuthenticateEx;



#define __IHttpNegotiate_FWD_DEFINED__
typedef struct IHttpNegotiate IHttpNegotiate;



#define __IHttpNegotiate2_FWD_DEFINED__
typedef struct IHttpNegotiate2 IHttpNegotiate2;



#define __IHttpNegotiate3_FWD_DEFINED__
typedef struct IHttpNegotiate3 IHttpNegotiate3;



#define __IWinInetFileStream_FWD_DEFINED__
typedef struct IWinInetFileStream IWinInetFileStream;



#define __IWindowForBindingUI_FWD_DEFINED__
typedef struct IWindowForBindingUI IWindowForBindingUI;



#define __ICodeInstall_FWD_DEFINED__
typedef struct ICodeInstall ICodeInstall;



#define __IUri_FWD_DEFINED__
typedef struct IUri IUri;



#define __IUriContainer_FWD_DEFINED__
typedef struct IUriContainer IUriContainer;



#define __IUriBuilder_FWD_DEFINED__
typedef struct IUriBuilder IUriBuilder;



#define __IUriBuilderFactory_FWD_DEFINED__
typedef struct IUriBuilderFactory IUriBuilderFactory;



#define __IWinInetInfo_FWD_DEFINED__
typedef struct IWinInetInfo IWinInetInfo;



#define __IHttpSecurity_FWD_DEFINED__
typedef struct IHttpSecurity IHttpSecurity;



#define __IWinInetHttpInfo_FWD_DEFINED__
typedef struct IWinInetHttpInfo IWinInetHttpInfo;



#define __IWinInetHttpTimeouts_FWD_DEFINED__
typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;



#define __IWinInetCacheHints_FWD_DEFINED__
typedef struct IWinInetCacheHints IWinInetCacheHints;



#define __IWinInetCacheHints2_FWD_DEFINED__
typedef struct IWinInetCacheHints2 IWinInetCacheHints2;



#define __IBindHost_FWD_DEFINED__
typedef struct IBindHost IBindHost;



#define __IInternet_FWD_DEFINED__
typedef struct IInternet IInternet;



#define __IInternetBindInfo_FWD_DEFINED__
typedef struct IInternetBindInfo IInternetBindInfo;



#define __IInternetBindInfoEx_FWD_DEFINED__
typedef struct IInternetBindInfoEx IInternetBindInfoEx;



#define __IInternetProtocolRoot_FWD_DEFINED__
typedef struct IInternetProtocolRoot IInternetProtocolRoot;



#define __IInternetProtocol_FWD_DEFINED__
typedef struct IInternetProtocol IInternetProtocol;



#define __IInternetProtocolEx_FWD_DEFINED__
typedef struct IInternetProtocolEx IInternetProtocolEx;



#define __IInternetProtocolSink_FWD_DEFINED__
typedef struct IInternetProtocolSink IInternetProtocolSink;



#define __IInternetProtocolSinkStackable_FWD_DEFINED__
typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;



#define __IInternetSession_FWD_DEFINED__
typedef struct IInternetSession IInternetSession;



#define __IInternetThreadSwitch_FWD_DEFINED__
typedef struct IInternetThreadSwitch IInternetThreadSwitch;



#define __IInternetPriority_FWD_DEFINED__
typedef struct IInternetPriority IInternetPriority;



#define __IInternetProtocolInfo_FWD_DEFINED__
typedef struct IInternetProtocolInfo IInternetProtocolInfo;



#define __IInternetSecurityMgrSite_FWD_DEFINED__
typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;



#define __IInternetSecurityManager_FWD_DEFINED__
typedef struct IInternetSecurityManager IInternetSecurityManager;



#define __IInternetSecurityManagerEx_FWD_DEFINED__
typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;



#define __IInternetSecurityManagerEx2_FWD_DEFINED__
typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;



#define __IZoneIdentifier_FWD_DEFINED__
typedef struct IZoneIdentifier IZoneIdentifier;



#define __IInternetHostSecurityManager_FWD_DEFINED__
typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;



#define __IInternetZoneManager_FWD_DEFINED__
typedef struct IInternetZoneManager IInternetZoneManager;



#define __IInternetZoneManagerEx_FWD_DEFINED__
typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;



#define __IInternetZoneManagerEx2_FWD_DEFINED__
typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;



#define __ISoftDistExt_FWD_DEFINED__
typedef struct ISoftDistExt ISoftDistExt;



#define __ICatalogFileInfo_FWD_DEFINED__
typedef struct ICatalogFileInfo ICatalogFileInfo;



#define __IDataFilter_FWD_DEFINED__
typedef struct IDataFilter IDataFilter;



#define __IEncodingFilterFactory_FWD_DEFINED__
typedef struct IEncodingFilterFactory IEncodingFilterFactory;



#define __IWrappedProtocol_FWD_DEFINED__
typedef struct IWrappedProtocol IWrappedProtocol;



#define __IGetBindHandle_FWD_DEFINED__
typedef struct IGetBindHandle IGetBindHandle;



#define __IBindCallbackRedirect_FWD_DEFINED__
typedef struct IBindCallbackRedirect IBindCallbackRedirect;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 288 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3



#define __oleidl_h__




#define __IOleAdviseHolder_FWD_DEFINED__
typedef struct IOleAdviseHolder IOleAdviseHolder;



#define __IOleCache_FWD_DEFINED__
typedef struct IOleCache IOleCache;



#define __IOleCache2_FWD_DEFINED__
typedef struct IOleCache2 IOleCache2;



#define __IOleCacheControl_FWD_DEFINED__
typedef struct IOleCacheControl IOleCacheControl;



#define __IParseDisplayName_FWD_DEFINED__
typedef struct IParseDisplayName IParseDisplayName;



#define __IOleContainer_FWD_DEFINED__
typedef struct IOleContainer IOleContainer;



#define __IOleClientSite_FWD_DEFINED__
typedef struct IOleClientSite IOleClientSite;



#define __IOleObject_FWD_DEFINED__
typedef struct IOleObject IOleObject;



#define __IOleWindow_FWD_DEFINED__
typedef struct IOleWindow IOleWindow;



#define __IOleLink_FWD_DEFINED__
typedef struct IOleLink IOleLink;



#define __IOleItemContainer_FWD_DEFINED__
typedef struct IOleItemContainer IOleItemContainer;



#define __IOleInPlaceUIWindow_FWD_DEFINED__
typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;



#define __IOleInPlaceActiveObject_FWD_DEFINED__
typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;



#define __IOleInPlaceFrame_FWD_DEFINED__
typedef struct IOleInPlaceFrame IOleInPlaceFrame;



#define __IOleInPlaceObject_FWD_DEFINED__
typedef struct IOleInPlaceObject IOleInPlaceObject;



#define __IOleInPlaceSite_FWD_DEFINED__
typedef struct IOleInPlaceSite IOleInPlaceSite;



#define __IContinue_FWD_DEFINED__
typedef struct IContinue IContinue;



#define __IViewObject_FWD_DEFINED__
typedef struct IViewObject IViewObject;



#define __IViewObject2_FWD_DEFINED__
typedef struct IViewObject2 IViewObject2;



#define __IDropSource_FWD_DEFINED__
typedef struct IDropSource IDropSource;



#define __IDropTarget_FWD_DEFINED__
typedef struct IDropTarget IDropTarget;



#define __IDropSourceNotify_FWD_DEFINED__
typedef struct IDropSourceNotify IDropSourceNotify;



#define __IEnumOLEVERB_FWD_DEFINED__
typedef struct IEnumOLEVERB IEnumOLEVERB;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 138 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3
# 167 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleAdviseHolder_INTERFACE_DEFINED__

typedef IOleAdviseHolder *LPOLEADVISEHOLDER;

extern const GUID IID_IOleAdviseHolder;
# 200 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleAdviseHolderVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleAdviseHolder* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleAdviseHolder* This);

    ULONG ( *Release)(
        IOleAdviseHolder* This);


    HRESULT ( *Advise)(
        IOleAdviseHolder* This,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IOleAdviseHolder* This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IOleAdviseHolder* This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *SendOnRename)(
        IOleAdviseHolder* This,
        IMoniker *pmk);

    HRESULT ( *SendOnSave)(
        IOleAdviseHolder* This);

    HRESULT ( *SendOnClose)(
        IOleAdviseHolder* This);

   
} IOleAdviseHolderVtbl;
struct IOleAdviseHolder {
    IOleAdviseHolderVtbl* lpVtbl;
};
# 293 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleAdviseHolder_Advise_Proxy(
    IOleAdviseHolder* This,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_Unadvise_Proxy(
    IOleAdviseHolder* This,
    DWORD dwConnection);
void IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_EnumAdvise_Proxy(
    IOleAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnRename_Proxy(
    IOleAdviseHolder* This,
    IMoniker *pmk);
void IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnSave_Proxy(
    IOleAdviseHolder* This);
void IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnClose_Proxy(
    IOleAdviseHolder* This);
void IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 350 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleCache_INTERFACE_DEFINED__

typedef IOleCache *LPOLECACHE;

extern const GUID IID_IOleCache;
# 383 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleCacheVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleCache* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCache* This);

    ULONG ( *Release)(
        IOleCache* This);


    HRESULT ( *Cache)(
        IOleCache* This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT ( *Uncache)(
        IOleCache* This,
        DWORD dwConnection);

    HRESULT ( *EnumCache)(
        IOleCache* This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT ( *InitCache)(
        IOleCache* This,
        IDataObject *pDataObject);

    HRESULT ( *SetData)(
        IOleCache* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        WINBOOL fRelease);

   
} IOleCacheVtbl;
struct IOleCache {
    IOleCacheVtbl* lpVtbl;
};
# 473 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleCache_Cache_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    DWORD advf,
    DWORD *pdwConnection);
void IOleCache_Cache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache_Uncache_Proxy(
    IOleCache* This,
    DWORD dwConnection);
void IOleCache_Uncache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache_EnumCache_Proxy(
    IOleCache* This,
    IEnumSTATDATA **ppenumSTATDATA);
void IOleCache_EnumCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache_InitCache_Proxy(
    IOleCache* This,
    IDataObject *pDataObject);
void IOleCache_InitCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache_SetData_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    WINBOOL fRelease);
void IOleCache_SetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 525 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleCache2_INTERFACE_DEFINED__

typedef IOleCache2 *LPOLECACHE2;

#define UPDFCACHE_NODATACACHE

#define UPDFCACHE_ONSAVECACHE

#define UPDFCACHE_ONSTOPCACHE

#define UPDFCACHE_NORMALCACHE

#define UPDFCACHE_IFBLANK

#define UPDFCACHE_ONLYIFBLANK

#define UPDFCACHE_IFBLANKORONSAVECACHE

#define UPDFCACHE_ALL

#define UPDFCACHE_ALLBUTNODATACACHE


typedef enum tagDISCARDCACHE {
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
} DISCARDCACHE;

extern const GUID IID_IOleCache2;
# 571 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleCache2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IOleCache2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCache2* This);

    ULONG ( *Release)(
        IOleCache2* This);


    HRESULT ( *Cache)(
        IOleCache2* This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT ( *Uncache)(
        IOleCache2* This,
        DWORD dwConnection);

    HRESULT ( *EnumCache)(
        IOleCache2* This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT ( *InitCache)(
        IOleCache2* This,
        IDataObject *pDataObject);

    HRESULT ( *SetData)(
        IOleCache2* This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        WINBOOL fRelease);


    HRESULT ( *UpdateCache)(
        IOleCache2* This,
        LPDATAOBJECT pDataObject,
        DWORD grfUpdf,
        LPVOID pReserved);

    HRESULT ( *DiscardCache)(
        IOleCache2* This,
        DWORD dwDiscardOptions);

   
} IOleCache2Vtbl;
struct IOleCache2 {
    IOleCache2Vtbl* lpVtbl;
};
# 682 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleCache2_RemoteUpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
void IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache2_DiscardCache_Proxy(
    IOleCache2* This,
    DWORD dwDiscardOptions);
void IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCache2_UpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LPVOID pReserved);
HRESULT IOleCache2_UpdateCache_Stub(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
# 720 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleCacheControl_INTERFACE_DEFINED__

typedef IOleCacheControl *LPOLECACHECONTROL;

extern const GUID IID_IOleCacheControl;
# 740 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleCacheControlVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleCacheControl* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCacheControl* This);

    ULONG ( *Release)(
        IOleCacheControl* This);


    HRESULT ( *OnRun)(
        IOleCacheControl* This,
        LPDATAOBJECT pDataObject);

    HRESULT ( *OnStop)(
        IOleCacheControl* This);

   
} IOleCacheControlVtbl;
struct IOleCacheControl {
    IOleCacheControlVtbl* lpVtbl;
};
# 801 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleCacheControl_OnRun_Proxy(
    IOleCacheControl* This,
    LPDATAOBJECT pDataObject);
void IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleCacheControl_OnStop_Proxy(
    IOleCacheControl* This);
void IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 824 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IParseDisplayName_INTERFACE_DEFINED__

typedef IParseDisplayName *LPPARSEDISPLAYNAME;

extern const GUID IID_IParseDisplayName;
# 844 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IParseDisplayNameVtbl {
   


    HRESULT ( *QueryInterface)(
        IParseDisplayName* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IParseDisplayName* This);

    ULONG ( *Release)(
        IParseDisplayName* This);


    HRESULT ( *ParseDisplayName)(
        IParseDisplayName* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

   
} IParseDisplayNameVtbl;
struct IParseDisplayName {
    IParseDisplayNameVtbl* lpVtbl;
};
# 901 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IParseDisplayName_ParseDisplayName_Proxy(
    IParseDisplayName* This,
    IBindCtx *pbc,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 920 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleContainer_INTERFACE_DEFINED__

typedef IOleContainer *LPOLECONTAINER;

extern const GUID IID_IOleContainer;
# 941 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleContainerVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleContainer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleContainer* This);

    ULONG ( *Release)(
        IOleContainer* This);


    HRESULT ( *ParseDisplayName)(
        IOleContainer* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);


    HRESULT ( *EnumObjects)(
        IOleContainer* This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT ( *LockContainer)(
        IOleContainer* This,
        WINBOOL fLock);

   
} IOleContainerVtbl;
struct IOleContainer {
    IOleContainerVtbl* lpVtbl;
};
# 1018 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleContainer_EnumObjects_Proxy(
    IOleContainer* This,
    DWORD grfFlags,
    IEnumUnknown **ppenum);
void IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleContainer_LockContainer_Proxy(
    IOleContainer* This,
    WINBOOL fLock);
void IOleContainer_LockContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1043 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleClientSite_INTERFACE_DEFINED__

typedef IOleClientSite *LPOLECLIENTSITE;

extern const GUID IID_IOleClientSite;
# 1077 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleClientSiteVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleClientSite* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleClientSite* This);

    ULONG ( *Release)(
        IOleClientSite* This);


    HRESULT ( *SaveObject)(
        IOleClientSite* This);

    HRESULT ( *GetMoniker)(
        IOleClientSite* This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT ( *GetContainer)(
        IOleClientSite* This,
        IOleContainer **ppContainer);

    HRESULT ( *ShowObject)(
        IOleClientSite* This);

    HRESULT ( *OnShowWindow)(
        IOleClientSite* This,
        WINBOOL fShow);

    HRESULT ( *RequestNewObjectLayout)(
        IOleClientSite* This);

   
} IOleClientSiteVtbl;
struct IOleClientSite {
    IOleClientSiteVtbl* lpVtbl;
};
# 1170 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleClientSite_SaveObject_Proxy(
    IOleClientSite* This);
void IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleClientSite_GetMoniker_Proxy(
    IOleClientSite* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleClientSite_GetContainer_Proxy(
    IOleClientSite* This,
    IOleContainer **ppContainer);
void IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleClientSite_ShowObject_Proxy(
    IOleClientSite* This);
void IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleClientSite_OnShowWindow_Proxy(
    IOleClientSite* This,
    WINBOOL fShow);
void IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleClientSite_RequestNewObjectLayout_Proxy(
    IOleClientSite* This);
void IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1225 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleObject_INTERFACE_DEFINED__

typedef IOleObject *LPOLEOBJECT;

typedef enum tagOLEGETMONIKER {
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
} OLEGETMONIKER;

typedef enum tagOLEWHICHMK {
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
} OLEWHICHMK;

typedef enum tagUSERCLASSTYPE {
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
} USERCLASSTYPE;

typedef enum tagOLEMISC {
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
} OLEMISC;
typedef enum tagOLECLOSE {
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
} OLECLOSE;

extern const GUID IID_IOleObject;
# 1368 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleObject* This);

    ULONG ( *Release)(
        IOleObject* This);


    HRESULT ( *SetClientSite)(
        IOleObject* This,
        IOleClientSite *pClientSite);

    HRESULT ( *GetClientSite)(
        IOleObject* This,
        IOleClientSite **ppClientSite);

    HRESULT ( *SetHostNames)(
        IOleObject* This,
        LPCOLESTR szContainerApp,
        LPCOLESTR szContainerObj);

    HRESULT ( *Close)(
        IOleObject* This,
        DWORD dwSaveOption);

    HRESULT ( *SetMoniker)(
        IOleObject* This,
        DWORD dwWhichMoniker,
        IMoniker *pmk);

    HRESULT ( *GetMoniker)(
        IOleObject* This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT ( *InitFromData)(
        IOleObject* This,
        IDataObject *pDataObject,
        WINBOOL fCreation,
        DWORD dwReserved);

    HRESULT ( *GetClipboardData)(
        IOleObject* This,
        DWORD dwReserved,
        IDataObject **ppDataObject);

    HRESULT ( *DoVerb)(
        IOleObject* This,
        LONG iVerb,
        LPMSG lpmsg,
        IOleClientSite *pActiveSite,
        LONG lindex,
        HWND hwndParent,
        LPCRECT lprcPosRect);

    HRESULT ( *EnumVerbs)(
        IOleObject* This,
        IEnumOLEVERB **ppEnumOleVerb);

    HRESULT ( *Update)(
        IOleObject* This);

    HRESULT ( *IsUpToDate)(
        IOleObject* This);

    HRESULT ( *GetUserClassID)(
        IOleObject* This,
        CLSID *pClsid);

    HRESULT ( *GetUserType)(
        IOleObject* This,
        DWORD dwFormOfType,
        LPOLESTR *pszUserType);

    HRESULT ( *SetExtent)(
        IOleObject* This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT ( *GetExtent)(
        IOleObject* This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT ( *Advise)(
        IOleObject* This,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IOleObject* This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IOleObject* This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *GetMiscStatus)(
        IOleObject* This,
        DWORD dwAspect,
        DWORD *pdwStatus);

    HRESULT ( *SetColorScheme)(
        IOleObject* This,
        LOGPALETTE *pLogpal);

   
} IOleObjectVtbl;
struct IOleObject {
    IOleObjectVtbl* lpVtbl;
};
# 1597 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleObject_SetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite *pClientSite);
void IOleObject_SetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite **ppClientSite);
void IOleObject_GetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_SetHostNames_Proxy(
    IOleObject* This,
    LPCOLESTR szContainerApp,
    LPCOLESTR szContainerObj);
void IOleObject_SetHostNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_Close_Proxy(
    IOleObject* This,
    DWORD dwSaveOption);
void IOleObject_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_SetMoniker_Proxy(
    IOleObject* This,
    DWORD dwWhichMoniker,
    IMoniker *pmk);
void IOleObject_SetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetMoniker_Proxy(
    IOleObject* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void IOleObject_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_InitFromData_Proxy(
    IOleObject* This,
    IDataObject *pDataObject,
    WINBOOL fCreation,
    DWORD dwReserved);
void IOleObject_InitFromData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetClipboardData_Proxy(
    IOleObject* This,
    DWORD dwReserved,
    IDataObject **ppDataObject);
void IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_DoVerb_Proxy(
    IOleObject* This,
    LONG iVerb,
    LPMSG lpmsg,
    IOleClientSite *pActiveSite,
    LONG lindex,
    HWND hwndParent,
    LPCRECT lprcPosRect);
void IOleObject_DoVerb_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_EnumVerbs_Proxy(
    IOleObject* This,
    IEnumOLEVERB **ppEnumOleVerb);
void IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_Update_Proxy(
    IOleObject* This);
void IOleObject_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_IsUpToDate_Proxy(
    IOleObject* This);
void IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetUserClassID_Proxy(
    IOleObject* This,
    CLSID *pClsid);
void IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetUserType_Proxy(
    IOleObject* This,
    DWORD dwFormOfType,
    LPOLESTR *pszUserType);
void IOleObject_GetUserType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_SetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void IOleObject_SetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void IOleObject_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_Advise_Proxy(
    IOleObject* This,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void IOleObject_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_Unadvise_Proxy(
    IOleObject* This,
    DWORD dwConnection);
void IOleObject_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_EnumAdvise_Proxy(
    IOleObject* This,
    IEnumSTATDATA **ppenumAdvise);
void IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_GetMiscStatus_Proxy(
    IOleObject* This,
    DWORD dwAspect,
    DWORD *pdwStatus);
void IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleObject_SetColorScheme_Proxy(
    IOleObject* This,
    LOGPALETTE *pLogpal);
void IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1788 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOLETypes_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
typedef enum tagOLERENDER {
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
} OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
} OBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
# 1824 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleWindow_INTERFACE_DEFINED__

typedef IOleWindow *LPOLEWINDOW;

extern const GUID IID_IOleWindow;
# 1844 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleWindowVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleWindow* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleWindow* This);

    ULONG ( *Release)(
        IOleWindow* This);


    HRESULT ( *GetWindow)(
        IOleWindow* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleWindow* This,
        WINBOOL fEnterMode);

   
} IOleWindowVtbl;
struct IOleWindow {
    IOleWindowVtbl* lpVtbl;
};
# 1906 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleWindow_GetWindow_Proxy(
    IOleWindow* This,
    HWND *phwnd);
void IOleWindow_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleWindow_ContextSensitiveHelp_Proxy(
    IOleWindow* This,
    WINBOOL fEnterMode);
void IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1930 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleLink_INTERFACE_DEFINED__

typedef IOleLink *LPOLELINK;

typedef enum tagOLEUPDATE {
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
} OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;
typedef OLEUPDATE *POLEUPDATE;

typedef enum tagOLELINKBIND {
    OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND;

extern const GUID IID_IOleLink;
# 1991 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleLinkVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleLink* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleLink* This);

    ULONG ( *Release)(
        IOleLink* This);


    HRESULT ( *SetUpdateOptions)(
        IOleLink* This,
        DWORD dwUpdateOpt);

    HRESULT ( *GetUpdateOptions)(
        IOleLink* This,
        DWORD *pdwUpdateOpt);

    HRESULT ( *SetSourceMoniker)(
        IOleLink* This,
        IMoniker *pmk,
        const IID *const rclsid);

    HRESULT ( *GetSourceMoniker)(
        IOleLink* This,
        IMoniker **ppmk);

    HRESULT ( *SetSourceDisplayName)(
        IOleLink* This,
        LPCOLESTR pszStatusText);

    HRESULT ( *GetSourceDisplayName)(
        IOleLink* This,
        LPOLESTR *ppszDisplayName);

    HRESULT ( *BindToSource)(
        IOleLink* This,
        DWORD bindflags,
        IBindCtx *pbc);

    HRESULT ( *BindIfRunning)(
        IOleLink* This);

    HRESULT ( *GetBoundSource)(
        IOleLink* This,
        IUnknown **ppunk);

    HRESULT ( *UnbindSource)(
        IOleLink* This);

    HRESULT ( *Update)(
        IOleLink* This,
        IBindCtx *pbc);

   
} IOleLinkVtbl;
struct IOleLink {
    IOleLinkVtbl* lpVtbl;
};
# 2125 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleLink_SetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD dwUpdateOpt);
void IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_GetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD *pdwUpdateOpt);
void IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_SetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker *pmk,
    const IID *const rclsid);
void IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_GetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker **ppmk);
void IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_SetSourceDisplayName_Proxy(
    IOleLink* This,
    LPCOLESTR pszStatusText);
void IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_GetSourceDisplayName_Proxy(
    IOleLink* This,
    LPOLESTR *ppszDisplayName);
void IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_BindToSource_Proxy(
    IOleLink* This,
    DWORD bindflags,
    IBindCtx *pbc);
void IOleLink_BindToSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_BindIfRunning_Proxy(
    IOleLink* This);
void IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_GetBoundSource_Proxy(
    IOleLink* This,
    IUnknown **ppunk);
void IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_UnbindSource_Proxy(
    IOleLink* This);
void IOleLink_UnbindSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleLink_Update_Proxy(
    IOleLink* This,
    IBindCtx *pbc);
void IOleLink_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2221 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleItemContainer_INTERFACE_DEFINED__

typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef enum tagBINDSPEED {
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
} BINDSPEED;

typedef enum tagOLECONTF {
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
} OLECONTF;

extern const GUID IID_IOleItemContainer;
# 2265 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleItemContainerVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleItemContainer* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleItemContainer* This);

    ULONG ( *Release)(
        IOleItemContainer* This);


    HRESULT ( *ParseDisplayName)(
        IOleItemContainer* This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);


    HRESULT ( *EnumObjects)(
        IOleItemContainer* This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT ( *LockContainer)(
        IOleItemContainer* This,
        WINBOOL fLock);


    HRESULT ( *GetObjectA)(
        IOleItemContainer* This,
        LPOLESTR pszItem,
        DWORD dwSpeedNeeded,
        IBindCtx *pbc,
        const IID *const riid,
        void **ppvObject);

    HRESULT ( *GetObjectStorage)(
        IOleItemContainer* This,
        LPOLESTR pszItem,
        IBindCtx *pbc,
        const IID *const riid,
        void **ppvStorage);

    HRESULT ( *IsRunning)(
        IOleItemContainer* This,
        LPOLESTR pszItem);

   
} IOleItemContainerVtbl;
struct IOleItemContainer {
    IOleItemContainerVtbl* lpVtbl;
};
# 2376 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleItemContainer_GetObject_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    DWORD dwSpeedNeeded,
    IBindCtx *pbc,
    const IID *const riid,
    void **ppvObject);
void IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleItemContainer_GetObjectStorage_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    IBindCtx *pbc,
    const IID *const riid,
    void **ppvStorage);
void IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleItemContainer_IsRunning_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem);
void IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2415 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleInPlaceUIWindow_INTERFACE_DEFINED__

typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef RECT BORDERWIDTHS;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;

extern const GUID IID_IOleInPlaceUIWindow;
# 2445 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleInPlaceUIWindowVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleInPlaceUIWindow* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceUIWindow* This);

    ULONG ( *Release)(
        IOleInPlaceUIWindow* This);


    HRESULT ( *GetWindow)(
        IOleInPlaceUIWindow* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceUIWindow* This,
        WINBOOL fEnterMode);


    HRESULT ( *GetBorder)(
        IOleInPlaceUIWindow* This,
        LPRECT lprectBorder);

    HRESULT ( *RequestBorderSpace)(
        IOleInPlaceUIWindow* This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetBorderSpace)(
        IOleInPlaceUIWindow* This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetActiveObject)(
        IOleInPlaceUIWindow* This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);

   
} IOleInPlaceUIWindowVtbl;
struct IOleInPlaceUIWindow {
    IOleInPlaceUIWindowVtbl* lpVtbl;
};
# 2543 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleInPlaceUIWindow_GetBorder_Proxy(
    IOleInPlaceUIWindow* This,
    LPRECT lprectBorder);
void IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_RequestBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_SetBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_SetActiveObject_Proxy(
    IOleInPlaceUIWindow* This,
    IOleInPlaceActiveObject *pActiveObject,
    LPCOLESTR pszObjName);
void IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2584 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleInPlaceActiveObject_INTERFACE_DEFINED__

typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;

extern const GUID IID_IOleInPlaceActiveObject;
# 2615 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleInPlaceActiveObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleInPlaceActiveObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceActiveObject* This);

    ULONG ( *Release)(
        IOleInPlaceActiveObject* This);


    HRESULT ( *GetWindow)(
        IOleInPlaceActiveObject* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceActiveObject* This,
        WINBOOL fEnterMode);


    HRESULT ( *TranslateAcceleratorA)(
        IOleInPlaceActiveObject* This,
        LPMSG lpmsg);

    HRESULT ( *OnFrameWindowActivate)(
        IOleInPlaceActiveObject* This,
        WINBOOL fActivate);

    HRESULT ( *OnDocWindowActivate)(
        IOleInPlaceActiveObject* This,
        WINBOOL fActivate);

    HRESULT ( *ResizeBorder)(
        IOleInPlaceActiveObject* This,
        LPCRECT prcBorder,
        IOleInPlaceUIWindow *pUIWindow,
        WINBOOL fFrameWindow);

    HRESULT ( *EnableModeless)(
        IOleInPlaceActiveObject* This,
        WINBOOL fEnable);

   
} IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceActiveObject {
    IOleInPlaceActiveObjectVtbl* lpVtbl;
};
# 2722 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This);
void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fActivate);
void IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fActivate);
void IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID *const riid,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_EnableModeless_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fEnable);
void IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This,
    LPMSG lpmsg);
HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    IOleInPlaceActiveObject* This);
HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID *const riid,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
# 2788 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleInPlaceFrame_INTERFACE_DEFINED__

typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI {
    UINT cb;
    WINBOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
} OLEINPLACEFRAMEINFO;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths {
    LONG width[6];
} OLEMENUGROUPWIDTHS;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;

extern const GUID IID_IOleInPlaceFrame;
# 2840 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleInPlaceFrameVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleInPlaceFrame* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceFrame* This);

    ULONG ( *Release)(
        IOleInPlaceFrame* This);


    HRESULT ( *GetWindow)(
        IOleInPlaceFrame* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceFrame* This,
        WINBOOL fEnterMode);


    HRESULT ( *GetBorder)(
        IOleInPlaceFrame* This,
        LPRECT lprectBorder);

    HRESULT ( *RequestBorderSpace)(
        IOleInPlaceFrame* This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetBorderSpace)(
        IOleInPlaceFrame* This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetActiveObject)(
        IOleInPlaceFrame* This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);


    HRESULT ( *InsertMenus)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared,
        LPOLEMENUGROUPWIDTHS lpMenuWidths);

    HRESULT ( *SetMenu)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared,
        HOLEMENU holemenu,
        HWND hwndActiveObject);

    HRESULT ( *RemoveMenus)(
        IOleInPlaceFrame* This,
        HMENU hmenuShared);

    HRESULT ( *SetStatusText)(
        IOleInPlaceFrame* This,
        LPCOLESTR pszStatusText);

    HRESULT ( *EnableModeless)(
        IOleInPlaceFrame* This,
        WINBOOL fEnable);

    HRESULT ( *TranslateAcceleratorA)(
        IOleInPlaceFrame* This,
        LPMSG lpmsg,
        WORD wID);

   
} IOleInPlaceFrameVtbl;
struct IOleInPlaceFrame {
    IOleInPlaceFrameVtbl* lpVtbl;
};
# 2993 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleInPlaceFrame_InsertMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    LPOLEMENUGROUPWIDTHS lpMenuWidths);
void IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_SetMenu_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    HOLEMENU holemenu,
    HWND hwndActiveObject);
void IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_RemoveMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared);
void IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_SetStatusText_Proxy(
    IOleInPlaceFrame* This,
    LPCOLESTR pszStatusText);
void IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_EnableModeless_Proxy(
    IOleInPlaceFrame* This,
    WINBOOL fEnable);
void IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_TranslateAccelerator_Proxy(
    IOleInPlaceFrame* This,
    LPMSG lpmsg,
    WORD wID);
void IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3053 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleInPlaceObject_INTERFACE_DEFINED__

typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;

extern const GUID IID_IOleInPlaceObject;
# 3080 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleInPlaceObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleInPlaceObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceObject* This);

    ULONG ( *Release)(
        IOleInPlaceObject* This);


    HRESULT ( *GetWindow)(
        IOleInPlaceObject* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceObject* This,
        WINBOOL fEnterMode);


    HRESULT ( *InPlaceDeactivate)(
        IOleInPlaceObject* This);

    HRESULT ( *UIDeactivate)(
        IOleInPlaceObject* This);

    HRESULT ( *SetObjectRects)(
        IOleInPlaceObject* This,
        LPCRECT lprcPosRect,
        LPCRECT lprcClipRect);

    HRESULT ( *ReactivateAndUndo)(
        IOleInPlaceObject* This);

   
} IOleInPlaceObjectVtbl;
struct IOleInPlaceObject {
    IOleInPlaceObjectVtbl* lpVtbl;
};
# 3175 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleInPlaceObject_InPlaceDeactivate_Proxy(
    IOleInPlaceObject* This);
void IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_UIDeactivate_Proxy(
    IOleInPlaceObject* This);
void IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_SetObjectRects_Proxy(
    IOleInPlaceObject* This,
    LPCRECT lprcPosRect,
    LPCRECT lprcClipRect);
void IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_ReactivateAndUndo_Proxy(
    IOleInPlaceObject* This);
void IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3213 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IOleInPlaceSite_INTERFACE_DEFINED__

typedef IOleInPlaceSite *LPOLEINPLACESITE;

extern const GUID IID_IOleInPlaceSite;
# 3261 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IOleInPlaceSiteVtbl {
   


    HRESULT ( *QueryInterface)(
        IOleInPlaceSite* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceSite* This);

    ULONG ( *Release)(
        IOleInPlaceSite* This);


    HRESULT ( *GetWindow)(
        IOleInPlaceSite* This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceSite* This,
        WINBOOL fEnterMode);


    HRESULT ( *CanInPlaceActivate)(
        IOleInPlaceSite* This);

    HRESULT ( *OnInPlaceActivate)(
        IOleInPlaceSite* This);

    HRESULT ( *OnUIActivate)(
        IOleInPlaceSite* This);

    HRESULT ( *GetWindowContext)(
        IOleInPlaceSite* This,
        IOleInPlaceFrame **ppFrame,
        IOleInPlaceUIWindow **ppDoc,
        LPRECT lprcPosRect,
        LPRECT lprcClipRect,
        LPOLEINPLACEFRAMEINFO lpFrameInfo);

    HRESULT ( *Scroll)(
        IOleInPlaceSite* This,
        SIZE scrollExtant);

    HRESULT ( *OnUIDeactivate)(
        IOleInPlaceSite* This,
        WINBOOL fUndoable);

    HRESULT ( *OnInPlaceDeactivate)(
        IOleInPlaceSite* This);

    HRESULT ( *DiscardUndoState)(
        IOleInPlaceSite* This);

    HRESULT ( *DeactivateAndUndo)(
        IOleInPlaceSite* This);

    HRESULT ( *OnPosRectChange)(
        IOleInPlaceSite* This,
        LPCRECT lprcPosRect);

   
} IOleInPlaceSiteVtbl;
struct IOleInPlaceSite {
    IOleInPlaceSiteVtbl* lpVtbl;
};
# 3404 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IOleInPlaceSite_CanInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnUIActivate_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_GetWindowContext_Proxy(
    IOleInPlaceSite* This,
    IOleInPlaceFrame **ppFrame,
    IOleInPlaceUIWindow **ppDoc,
    LPRECT lprcPosRect,
    LPRECT lprcClipRect,
    LPOLEINPLACEFRAMEINFO lpFrameInfo);
void IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_Scroll_Proxy(
    IOleInPlaceSite* This,
    SIZE scrollExtant);
void IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnUIDeactivate_Proxy(
    IOleInPlaceSite* This,
    WINBOOL fUndoable);
void IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnInPlaceDeactivate_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_DiscardUndoState_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_DeactivateAndUndo_Proxy(
    IOleInPlaceSite* This);
void IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnPosRectChange_Proxy(
    IOleInPlaceSite* This,
    LPCRECT lprcPosRect);
void IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3490 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IContinue_INTERFACE_DEFINED__

extern const GUID IID_IContinue;
# 3505 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IContinueVtbl {
   


    HRESULT ( *QueryInterface)(
        IContinue* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IContinue* This);

    ULONG ( *Release)(
        IContinue* This);


    HRESULT ( *FContinue)(
        IContinue* This);

   
} IContinueVtbl;
struct IContinue {
    IContinueVtbl* lpVtbl;
};
# 3558 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IContinue_FContinue_Proxy(
    IContinue* This);
void IContinue_FContinue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 3573 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IViewObject_INTERFACE_DEFINED__

typedef IViewObject *LPVIEWOBJECT;

extern const GUID IID_IViewObject;
# 3626 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IViewObjectVtbl {
   


    HRESULT ( *QueryInterface)(
        IViewObject* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IViewObject* This);

    ULONG ( *Release)(
        IViewObject* This);


    HRESULT ( *Draw)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);

    HRESULT ( *GetColorSet)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);

    HRESULT ( *Freeze)(
        IViewObject* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);

    HRESULT ( *Unfreeze)(
        IViewObject* This,
        DWORD dwFreeze);

    HRESULT ( *SetAdvise)(
        IViewObject* This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT ( *GetAdvise)(
        IViewObject* This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);

   
} IViewObjectVtbl;
struct IViewObject {
    IViewObjectVtbl* lpVtbl;
};
# 3741 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IViewObject_RemoteDraw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
void IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteGetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
void IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteFreeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
void IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_Unfreeze_Proxy(
    IViewObject* This,
    DWORD dwFreeze);
void IViewObject_Unfreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_SetAdvise_Proxy(
    IViewObject* This,
    DWORD aspects,
    DWORD advf,
    IAdviseSink *pAdvSink);
void IViewObject_SetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteGetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
void IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IViewObject_Draw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),
    ULONG_PTR dwContinue);
HRESULT IViewObject_Draw_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
HRESULT IViewObject_GetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT IViewObject_GetColorSet_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT IViewObject_Freeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DWORD *pdwFreeze);
HRESULT IViewObject_Freeze_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
HRESULT IViewObject_GetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
HRESULT IViewObject_GetAdvise_Stub(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
# 3878 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IViewObject2_INTERFACE_DEFINED__

typedef IViewObject2 *LPVIEWOBJECT2;

extern const GUID IID_IViewObject2;
# 3898 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IViewObject2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IViewObject2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IViewObject2* This);

    ULONG ( *Release)(
        IViewObject2* This);


    HRESULT ( *Draw)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);

    HRESULT ( *GetColorSet)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);

    HRESULT ( *Freeze)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);

    HRESULT ( *Unfreeze)(
        IViewObject2* This,
        DWORD dwFreeze);

    HRESULT ( *SetAdvise)(
        IViewObject2* This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT ( *GetAdvise)(
        IViewObject2* This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);


    HRESULT ( *GetExtent)(
        IViewObject2* This,
        DWORD dwDrawAspect,
        LONG lindex,
        DVTARGETDEVICE *ptd,
        LPSIZEL lpsizel);

   
} IViewObject2Vtbl;
struct IViewObject2 {
    IViewObject2Vtbl* lpVtbl;
};
# 4027 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IViewObject2_GetExtent_Proxy(
    IViewObject2* This,
    DWORD dwDrawAspect,
    LONG lindex,
    DVTARGETDEVICE *ptd,
    LPSIZEL lpsizel);
void IViewObject2_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4046 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IDropSource_INTERFACE_DEFINED__

typedef IDropSource *LPDROPSOURCE;

extern const GUID IID_IDropSource;
# 4067 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IDropSourceVtbl {
   


    HRESULT ( *QueryInterface)(
        IDropSource* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropSource* This);

    ULONG ( *Release)(
        IDropSource* This);


    HRESULT ( *QueryContinueDrag)(
        IDropSource* This,
        WINBOOL fEscapePressed,
        DWORD grfKeyState);

    HRESULT ( *GiveFeedback)(
        IDropSource* This,
        DWORD dwEffect);

   
} IDropSourceVtbl;
struct IDropSource {
    IDropSourceVtbl* lpVtbl;
};
# 4130 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IDropSource_QueryContinueDrag_Proxy(
    IDropSource* This,
    WINBOOL fEscapePressed,
    DWORD grfKeyState);
void IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDropSource_GiveFeedback_Proxy(
    IDropSource* This,
    DWORD dwEffect);
void IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4155 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IDropTarget_INTERFACE_DEFINED__

typedef IDropTarget *LPDROPTARGET;

#define MK_ALT

#define DROPEFFECT_NONE

#define DROPEFFECT_COPY

#define DROPEFFECT_MOVE

#define DROPEFFECT_LINK

#define DROPEFFECT_SCROLL


#define DD_DEFSCROLLINSET


#define DD_DEFSCROLLDELAY


#define DD_DEFSCROLLINTERVAL


#define DD_DEFDRAGDELAY


#define DD_DEFDRAGMINDIST


extern const GUID IID_IDropTarget;
# 4217 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IDropTargetVtbl {
   


    HRESULT ( *QueryInterface)(
        IDropTarget* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropTarget* This);

    ULONG ( *Release)(
        IDropTarget* This);


    HRESULT ( *DragEnter)(
        IDropTarget* This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT ( *DragOver)(
        IDropTarget* This,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT ( *DragLeave)(
        IDropTarget* This);

    HRESULT ( *Drop)(
        IDropTarget* This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

   
} IDropTargetVtbl;
struct IDropTarget {
    IDropTargetVtbl* lpVtbl;
};
# 4302 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IDropTarget_DragEnter_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void IDropTarget_DragEnter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDropTarget_DragOver_Proxy(
    IDropTarget* This,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void IDropTarget_DragOver_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDropTarget_DragLeave_Proxy(
    IDropTarget* This);
void IDropTarget_DragLeave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDropTarget_Drop_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void IDropTarget_Drop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4349 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IDropSourceNotify_INTERFACE_DEFINED__

extern const GUID IID_IDropSourceNotify;
# 4367 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IDropSourceNotifyVtbl {
   


    HRESULT ( *QueryInterface)(
        IDropSourceNotify* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropSourceNotify* This);

    ULONG ( *Release)(
        IDropSourceNotify* This);


    HRESULT ( *DragEnterTarget)(
        IDropSourceNotify* This,
        HWND hwndTarget);

    HRESULT ( *DragLeaveTarget)(
        IDropSourceNotify* This);

   
} IDropSourceNotifyVtbl;
struct IDropSourceNotify {
    IDropSourceNotifyVtbl* lpVtbl;
};
# 4428 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IDropSourceNotify_DragEnterTarget_Proxy(
    IDropSourceNotify* This,
    HWND hwndTarget);
void IDropSourceNotify_DragEnterTarget_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDropSourceNotify_DragLeaveTarget_Proxy(
    IDropSourceNotify* This);
void IDropSourceNotify_DragLeaveTarget_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4453 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
#define __IEnumOLEVERB_INTERFACE_DEFINED__

typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
} OLEVERB;
typedef struct tagOLEVERB *LPOLEVERB;

typedef enum tagOLEVERBATTRIB {
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;

extern const GUID IID_IEnumOLEVERB;
# 4494 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
typedef struct IEnumOLEVERBVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumOLEVERB* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumOLEVERB* This);

    ULONG ( *Release)(
        IEnumOLEVERB* This);


    HRESULT ( *Next)(
        IEnumOLEVERB* This,
        ULONG celt,
        LPOLEVERB rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumOLEVERB* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumOLEVERB* This);

    HRESULT ( *Clone)(
        IEnumOLEVERB* This,
        IEnumOLEVERB **ppenum);

   
} IEnumOLEVERBVtbl;
struct IEnumOLEVERB {
    IEnumOLEVERBVtbl* lpVtbl;
};
# 4573 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 3
HRESULT IEnumOLEVERB_RemoteNext_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
void IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Skip_Proxy(
    IEnumOLEVERB* This,
    ULONG celt);
void IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Reset_Proxy(
    IEnumOLEVERB* This);
void IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Clone_Proxy(
    IEnumOLEVERB* This,
    IEnumOLEVERB **ppenum);
void IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
HRESULT IEnumOLEVERB_Next_Stub(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);






ULONG CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG HWND_UserSize (ULONG *, ULONG, HWND *);
unsigned char * HWND_UserMarshal (ULONG *, unsigned char *, HWND *);
unsigned char * HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void HWND_UserFree (ULONG *, HWND *);
ULONG HMENU_UserSize (ULONG *, ULONG, HMENU *);
unsigned char * HMENU_UserMarshal (ULONG *, unsigned char *, HMENU *);
unsigned char * HMENU_UserUnmarshal(ULONG *, unsigned char *, HMENU *);
void HMENU_UserFree (ULONG *, HMENU *);
ULONG HGLOBAL_UserSize (ULONG *, ULONG, HGLOBAL *);
unsigned char * HGLOBAL_UserMarshal (ULONG *, unsigned char *, HGLOBAL *);
unsigned char * HGLOBAL_UserUnmarshal(ULONG *, unsigned char *, HGLOBAL *);
void HGLOBAL_UserFree (ULONG *, HGLOBAL *);
ULONG HACCEL_UserSize (ULONG *, ULONG, HACCEL *);
unsigned char * HACCEL_UserMarshal (ULONG *, unsigned char *, HACCEL *);
unsigned char * HACCEL_UserUnmarshal(ULONG *, unsigned char *, HACCEL *);
void HACCEL_UserFree (ULONG *, HACCEL *);
ULONG HDC_UserSize (ULONG *, ULONG, HDC *);
unsigned char * HDC_UserMarshal (ULONG *, unsigned char *, HDC *);
unsigned char * HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void HDC_UserFree (ULONG *, HDC *);
# 289 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 2 3



#define __servprov_h__




#define __IServiceProvider_FWD_DEFINED__
typedef struct IServiceProvider IServiceProvider;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 2 3
# 53 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 3
#define __IServiceProvider_INTERFACE_DEFINED__

typedef IServiceProvider *LPSERVICEPROVIDER;
# 77 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 3
extern const GUID IID_IServiceProvider;
# 92 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 3
typedef struct IServiceProviderVtbl {
   


    HRESULT ( *QueryInterface)(
        IServiceProvider* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IServiceProvider* This);

    ULONG ( *Release)(
        IServiceProvider* This);


    HRESULT ( *QueryService)(
        IServiceProvider* This,
        const GUID *const guidService,
        const IID *const riid,
        void **ppvObject);

   
} IServiceProviderVtbl;
struct IServiceProvider {
    IServiceProviderVtbl* lpVtbl;
};
# 148 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/servprov.h" 3
HRESULT IServiceProvider_RemoteQueryService_Proxy(
    IServiceProvider* This,
    const GUID *const guidService,
    const IID *const riid,
    IUnknown **ppvObject);
void IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IServiceProvider_QueryService_Proxy(
    IServiceProvider* This,
    const GUID *const guidService,
    const IID *const riid,
    void **ppvObject);
HRESULT IServiceProvider_QueryService_Stub(
    IServiceProvider* This,
    const GUID *const guidService,
    const IID *const riid,
    IUnknown **ppvObject);
# 290 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3



#define __msxml_h__





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/unknwn.h" 2 3
# 23 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 24 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3



#define __oaidl_h__




#define __ICreateTypeInfo_FWD_DEFINED__
typedef struct ICreateTypeInfo ICreateTypeInfo;



#define __ICreateTypeInfo2_FWD_DEFINED__
typedef struct ICreateTypeInfo2 ICreateTypeInfo2;



#define __ICreateTypeLib_FWD_DEFINED__
typedef struct ICreateTypeLib ICreateTypeLib;



#define __ICreateTypeLib2_FWD_DEFINED__
typedef struct ICreateTypeLib2 ICreateTypeLib2;



#define __IDispatch_FWD_DEFINED__
typedef struct IDispatch IDispatch;



#define __IEnumVARIANT_FWD_DEFINED__
typedef struct IEnumVARIANT IEnumVARIANT;



#define __ITypeComp_FWD_DEFINED__
typedef struct ITypeComp ITypeComp;



#define __ITypeInfo_FWD_DEFINED__
typedef struct ITypeInfo ITypeInfo;



#define __ITypeInfo2_FWD_DEFINED__
typedef struct ITypeInfo2 ITypeInfo2;



#define __ITypeLib_FWD_DEFINED__
typedef struct ITypeLib ITypeLib;



#define __ITypeLib2_FWD_DEFINED__
typedef struct ITypeLib2 ITypeLib2;



#define __ITypeChangeEvents_FWD_DEFINED__
typedef struct ITypeChangeEvents ITypeChangeEvents;



#define __IErrorInfo_FWD_DEFINED__
typedef struct IErrorInfo IErrorInfo;



#define __ICreateErrorInfo_FWD_DEFINED__
typedef struct ICreateErrorInfo ICreateErrorInfo;



#define __ISupportErrorInfo_FWD_DEFINED__
typedef struct ISupportErrorInfo ISupportErrorInfo;



#define __ITypeFactory_FWD_DEFINED__
typedef struct ITypeFactory ITypeFactory;



#define __ITypeMarshal_FWD_DEFINED__
typedef struct ITypeMarshal ITypeMarshal;



#define __IRecordInfo_FWD_DEFINED__
typedef struct IRecordInfo IRecordInfo;



#define __IErrorLog_FWD_DEFINED__
typedef struct IErrorLog IErrorLog;



#define __IPropertyBag_FWD_DEFINED__
typedef struct IPropertyBag IPropertyBag;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 123 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 239 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IOleAutomationTypes_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
typedef CY CURRENCY;
typedef struct tagSAFEARRAYBOUND {
    ULONG cElements;
    LONG lLbound;
} SAFEARRAYBOUND;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;

typedef struct _wireVARIANT *wireVARIANT;
typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR {
    ULONG Size;
    wireBSTR *aBstr;
} SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN {
    ULONG Size;
    IUnknown **apUnknown;
} SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH {
    ULONG Size;
    IDispatch **apDispatch;
} SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT {
    ULONG Size;
    wireVARIANT *aVariant;
} SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD {
    ULONG Size;
    wireBRECORD *aRecord;
} SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID {
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
} SAFEARR_HAVEIID;

typedef enum tagSF_TYPE {
    SF_ERROR = VT_ERROR,
    SF_I1 = VT_I1,
    SF_I2 = VT_I2,
    SF_I4 = VT_I4,
    SF_I8 = VT_I8,
    SF_BSTR = VT_BSTR,
    SF_UNKNOWN = VT_UNKNOWN,
    SF_DISPATCH = VT_DISPATCH,
    SF_VARIANT = VT_VARIANT,
    SF_RECORD = VT_RECORD,
    SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
} SF_TYPE;

typedef struct _wireSAFEARRAY_UNION {
    ULONG sfType;
    union {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    } u;
} SAFEARRAYUNION;

typedef struct _wireSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
} *wireSAFEARRAY;
typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
} SAFEARRAY;
typedef SAFEARRAY *LPSAFEARRAY;

#define FADF_AUTO

#define FADF_STATIC

#define FADF_EMBEDDED

#define FADF_FIXEDSIZE

#define FADF_RECORD

#define FADF_HAVEIID

#define FADF_HAVEVARTYPE

#define FADF_BSTR

#define FADF_UNKNOWN

#define FADF_DISPATCH

#define FADF_VARIANT

#define FADF_RESERVED






#define _FORCENAMELESSUNION
# 372 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __tagVARIANT
#define __VARIANT_NAME_1
#define __VARIANT_NAME_2
#define __VARIANT_NAME_3
#define __tagBRECORD
#define __VARIANT_NAME_4


typedef struct tagVARIANT VARIANT;

struct tagVARIANT {
    union {
        struct {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                } ;
            } ;
        } ;
        DECIMAL decVal;
    } ;
};


typedef VARIANT *LPVARIANT;
typedef VARIANT VARIANTARG;
typedef VARIANT *LPVARIANTARG;





#define _REFVARIANT_DEFINED



#define REFVARIANT




struct _wireBRECORD {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
};


struct _wireVARIANT {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    __extension__ union {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        wireBSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wirePSAFEARRAY *pparray;
        wireVARIANT *pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;
    } ;
};


typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef DWORD HREFTYPE;
typedef enum tagTYPEKIND {
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
} TYPEKIND;

typedef struct tagTYPEDESC {
    __extension__ union {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;
    } ;
    VARTYPE vt;
} TYPEDESC;

typedef struct tagARRAYDESC {
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
} ARRAYDESC;

typedef struct tagPARAMDESCEX {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
} PARAMDESCEX;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
} PARAMDESC;
typedef struct tagPARAMDESC *LPPARAMDESC;

#define PARAMFLAG_NONE

#define PARAMFLAG_FIN

#define PARAMFLAG_FOUT

#define PARAMFLAG_FLCID

#define PARAMFLAG_FRETVAL

#define PARAMFLAG_FOPT

#define PARAMFLAG_FHASDEFAULT

#define PARAMFLAG_FHASCUSTDATA


typedef struct tagIDLDESC {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
} IDLDESC;
typedef struct tagIDLDESC *LPIDLDESC;

#define IDLFLAG_NONE

#define IDLFLAG_FIN

#define IDLFLAG_FOUT

#define IDLFLAG_FLCID

#define IDLFLAG_FRETVAL
# 608 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
  typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    __extension__ union {
      IDLDESC idldesc;
      PARAMDESC paramdesc;
    } ;
  } ELEMDESC,*LPELEMDESC;


typedef struct tagTYPEATTR {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
} TYPEATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS {
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;
# 659 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
  typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
  } EXCEPINFO, *LPEXCEPINFO;


typedef enum tagCALLCONV {
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
} CALLCONV;

typedef enum tagFUNCKIND {
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
} FUNCKIND;

typedef enum tagINVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND;

typedef struct tagFUNCDESC {
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
} FUNCDESC;
typedef struct tagFUNCDESC *LPFUNCDESC;

typedef enum tagVARKIND {
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
} VARKIND;

#define IMPLTYPEFLAG_FDEFAULT

#define IMPLTYPEFLAG_FSOURCE

#define IMPLTYPEFLAG_FRESTRICTED

#define IMPLTYPEFLAG_FDEFAULTVTABLE


typedef struct tagVARDESC {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    __extension__ union {
        ULONG oInst;
        VARIANT *lpvarValue;
    } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
} VARDESC;
typedef struct tagVARDESC *LPVARDESC;

typedef enum tagTYPEFLAGS {
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
} TYPEFLAGS;

typedef enum tagFUNCFLAGS {
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
} FUNCFLAGS;

typedef enum tagVARFLAGS {
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
} VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
} CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM {
    GUID guid;
    VARIANTARG varValue;
} CUSTDATAITEM;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA {
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
} CUSTDATA;
typedef struct tagCUSTDATA *LPCUSTDATA;
# 823 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ICreateTypeInfo_INTERFACE_DEFINED__

typedef ICreateTypeInfo *LPCREATETYPEINFO;

extern const GUID IID_ICreateTypeInfo;
# 922 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ICreateTypeInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        ICreateTypeInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeInfo* This);

    ULONG ( *Release)(
        ICreateTypeInfo* This);


    HRESULT ( *SetGuid)(
        ICreateTypeInfo* This,
        const GUID *const guid);

    HRESULT ( *SetTypeFlags)(
        ICreateTypeInfo* This,
        UINT uTypeFlags);

    HRESULT ( *SetDocString)(
        ICreateTypeInfo* This,
        LPOLESTR pStrDoc);

    HRESULT ( *SetHelpContext)(
        ICreateTypeInfo* This,
        DWORD dwHelpContext);

    HRESULT ( *SetVersion)(
        ICreateTypeInfo* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *AddRefTypeInfo)(
        ICreateTypeInfo* This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT ( *AddFuncDesc)(
        ICreateTypeInfo* This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT ( *AddImplType)(
        ICreateTypeInfo* This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT ( *SetImplTypeFlags)(
        ICreateTypeInfo* This,
        UINT index,
        INT implTypeFlags);

    HRESULT ( *SetAlignment)(
        ICreateTypeInfo* This,
        WORD cbAlignment);

    HRESULT ( *SetSchema)(
        ICreateTypeInfo* This,
        LPOLESTR pStrSchema);

    HRESULT ( *AddVarDesc)(
        ICreateTypeInfo* This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT ( *SetFuncAndParamNames)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT ( *SetVarName)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szName);

    HRESULT ( *SetTypeDescAlias)(
        ICreateTypeInfo* This,
        TYPEDESC *pTDescAlias);

    HRESULT ( *DefineFuncAsDllEntry)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);

    HRESULT ( *SetFuncDocString)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetVarDocString)(
        ICreateTypeInfo* This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetFuncHelpContext)(
        ICreateTypeInfo* This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetVarHelpContext)(
        ICreateTypeInfo* This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetMops)(
        ICreateTypeInfo* This,
        UINT index,
        BSTR bstrMops);

    HRESULT ( *SetTypeIdldesc)(
        ICreateTypeInfo* This,
        IDLDESC *pIdlDesc);

    HRESULT ( *LayOut)(
        ICreateTypeInfo* This);

   
} ICreateTypeInfoVtbl;
struct ICreateTypeInfo {
    ICreateTypeInfoVtbl* lpVtbl;
};
# 1167 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ICreateTypeInfo_SetGuid_Proxy(
    ICreateTypeInfo* This,
    const GUID *const guid);
void ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT uTypeFlags);
void ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetDocString_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrDoc);
void ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetHelpContext_Proxy(
    ICreateTypeInfo* This,
    DWORD dwHelpContext);
void ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVersion_Proxy(
    ICreateTypeInfo* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddRefTypeInfo_Proxy(
    ICreateTypeInfo* This,
    ITypeInfo *pTInfo,
    HREFTYPE *phRefType);
void ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddFuncDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    FUNCDESC *pFuncDesc);
void ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddImplType_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    HREFTYPE hRefType);
void ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetImplTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    INT implTypeFlags);
void ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetAlignment_Proxy(
    ICreateTypeInfo* This,
    WORD cbAlignment);
void ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetSchema_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrSchema);
void ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddVarDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    VARDESC *pVarDesc);
void ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncAndParamNames_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR *rgszNames,
    UINT cNames);
void ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarName_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szName);
void ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeDescAlias_Proxy(
    ICreateTypeInfo* This,
    TYPEDESC *pTDescAlias);
void ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDllName,
    LPOLESTR szProcName);
void ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetMops_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    BSTR bstrMops);
void ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeIdldesc_Proxy(
    ICreateTypeInfo* This,
    IDLDESC *pIdlDesc);
void ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_LayOut_Proxy(
    ICreateTypeInfo* This);
void ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1374 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ICreateTypeInfo2_INTERFACE_DEFINED__

typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;

extern const GUID IID_ICreateTypeInfo2;
# 1446 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ICreateTypeInfo2Vtbl {
   


    HRESULT ( *QueryInterface)(
        ICreateTypeInfo2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeInfo2* This);

    ULONG ( *Release)(
        ICreateTypeInfo2* This);


    HRESULT ( *SetGuid)(
        ICreateTypeInfo2* This,
        const GUID *const guid);

    HRESULT ( *SetTypeFlags)(
        ICreateTypeInfo2* This,
        UINT uTypeFlags);

    HRESULT ( *SetDocString)(
        ICreateTypeInfo2* This,
        LPOLESTR pStrDoc);

    HRESULT ( *SetHelpContext)(
        ICreateTypeInfo2* This,
        DWORD dwHelpContext);

    HRESULT ( *SetVersion)(
        ICreateTypeInfo2* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *AddRefTypeInfo)(
        ICreateTypeInfo2* This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT ( *AddFuncDesc)(
        ICreateTypeInfo2* This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT ( *AddImplType)(
        ICreateTypeInfo2* This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT ( *SetImplTypeFlags)(
        ICreateTypeInfo2* This,
        UINT index,
        INT implTypeFlags);

    HRESULT ( *SetAlignment)(
        ICreateTypeInfo2* This,
        WORD cbAlignment);

    HRESULT ( *SetSchema)(
        ICreateTypeInfo2* This,
        LPOLESTR pStrSchema);

    HRESULT ( *AddVarDesc)(
        ICreateTypeInfo2* This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT ( *SetFuncAndParamNames)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT ( *SetVarName)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szName);

    HRESULT ( *SetTypeDescAlias)(
        ICreateTypeInfo2* This,
        TYPEDESC *pTDescAlias);

    HRESULT ( *DefineFuncAsDllEntry)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);

    HRESULT ( *SetFuncDocString)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetVarDocString)(
        ICreateTypeInfo2* This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetFuncHelpContext)(
        ICreateTypeInfo2* This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetVarHelpContext)(
        ICreateTypeInfo2* This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetMops)(
        ICreateTypeInfo2* This,
        UINT index,
        BSTR bstrMops);

    HRESULT ( *SetTypeIdldesc)(
        ICreateTypeInfo2* This,
        IDLDESC *pIdlDesc);

    HRESULT ( *LayOut)(
        ICreateTypeInfo2* This);


    HRESULT ( *DeleteFuncDesc)(
        ICreateTypeInfo2* This,
        UINT index);

    HRESULT ( *DeleteFuncDescByMemId)(
        ICreateTypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind);

    HRESULT ( *DeleteVarDesc)(
        ICreateTypeInfo2* This,
        UINT index);

    HRESULT ( *DeleteVarDescByMemId)(
        ICreateTypeInfo2* This,
        MEMBERID memid);

    HRESULT ( *DeleteImplType)(
        ICreateTypeInfo2* This,
        UINT index);

    HRESULT ( *SetCustData)(
        ICreateTypeInfo2* This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetFuncCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetParamCustData)(
        ICreateTypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetVarCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetImplTypeCustData)(
        ICreateTypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetHelpStringContext)(
        ICreateTypeInfo2* This,
        ULONG dwHelpStringContext);

    HRESULT ( *SetFuncHelpStringContext)(
        ICreateTypeInfo2* This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT ( *SetVarHelpStringContext)(
        ICreateTypeInfo2* This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT ( *Invalidate)(
        ICreateTypeInfo2* This);

    HRESULT ( *SetName)(
        ICreateTypeInfo2* This,
        LPOLESTR szName);

   
} ICreateTypeInfo2Vtbl;
struct ICreateTypeInfo2 {
    ICreateTypeInfo2Vtbl* lpVtbl;
};
# 1826 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ICreateTypeInfo2_DeleteFuncDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind);
void ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteVarDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid);
void ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteImplType_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetCustData_Proxy(
    ICreateTypeInfo2* This,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetFuncCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetParamCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetVarCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetImplTypeCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetVarHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_Invalidate_Proxy(
    ICreateTypeInfo2* This);
void ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetName_Proxy(
    ICreateTypeInfo2* This,
    LPOLESTR szName);
void ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 1966 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ICreateTypeLib_INTERFACE_DEFINED__

typedef ICreateTypeLib *LPCREATETYPELIB;

extern const GUID IID_ICreateTypeLib;
# 2013 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ICreateTypeLibVtbl {
   


    HRESULT ( *QueryInterface)(
        ICreateTypeLib* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeLib* This);

    ULONG ( *Release)(
        ICreateTypeLib* This);


    HRESULT ( *CreateTypeInfo)(
        ICreateTypeLib* This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT ( *SetName)(
        ICreateTypeLib* This,
        LPOLESTR szName);

    HRESULT ( *SetVersion)(
        ICreateTypeLib* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *SetGuid)(
        ICreateTypeLib* This,
        const GUID *const guid);

    HRESULT ( *SetDocString)(
        ICreateTypeLib* This,
        LPOLESTR szDoc);

    HRESULT ( *SetHelpFileName)(
        ICreateTypeLib* This,
        LPOLESTR szHelpFileName);

    HRESULT ( *SetHelpContext)(
        ICreateTypeLib* This,
        DWORD dwHelpContext);

    HRESULT ( *SetLcid)(
        ICreateTypeLib* This,
        LCID lcid);

    HRESULT ( *SetLibFlags)(
        ICreateTypeLib* This,
        UINT uLibFlags);

    HRESULT ( *SaveAllChanges)(
        ICreateTypeLib* This);

   
} ICreateTypeLibVtbl;
struct ICreateTypeLib {
    ICreateTypeLibVtbl* lpVtbl;
};
# 2141 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ICreateTypeLib_CreateTypeInfo_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName,
    TYPEKIND tkind,
    ICreateTypeInfo **ppCTInfo);
void ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName);
void ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetVersion_Proxy(
    ICreateTypeLib* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetGuid_Proxy(
    ICreateTypeLib* This,
    const GUID *const guid);
void ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetDocString_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szDoc);
void ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetHelpFileName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szHelpFileName);
void ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetHelpContext_Proxy(
    ICreateTypeLib* This,
    DWORD dwHelpContext);
void ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetLcid_Proxy(
    ICreateTypeLib* This,
    LCID lcid);
void ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetLibFlags_Proxy(
    ICreateTypeLib* This,
    UINT uLibFlags);
void ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SaveAllChanges_Proxy(
    ICreateTypeLib* This);
void ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2231 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ICreateTypeLib2_INTERFACE_DEFINED__

typedef ICreateTypeLib2 *LPCREATETYPELIB2;
extern const GUID IID_ICreateTypeLib2;
# 2257 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ICreateTypeLib2Vtbl {
   


    HRESULT ( *QueryInterface)(
        ICreateTypeLib2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeLib2* This);

    ULONG ( *Release)(
        ICreateTypeLib2* This);


    HRESULT ( *CreateTypeInfo)(
        ICreateTypeLib2* This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT ( *SetName)(
        ICreateTypeLib2* This,
        LPOLESTR szName);

    HRESULT ( *SetVersion)(
        ICreateTypeLib2* This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *SetGuid)(
        ICreateTypeLib2* This,
        const GUID *const guid);

    HRESULT ( *SetDocString)(
        ICreateTypeLib2* This,
        LPOLESTR szDoc);

    HRESULT ( *SetHelpFileName)(
        ICreateTypeLib2* This,
        LPOLESTR szHelpFileName);

    HRESULT ( *SetHelpContext)(
        ICreateTypeLib2* This,
        DWORD dwHelpContext);

    HRESULT ( *SetLcid)(
        ICreateTypeLib2* This,
        LCID lcid);

    HRESULT ( *SetLibFlags)(
        ICreateTypeLib2* This,
        UINT uLibFlags);

    HRESULT ( *SaveAllChanges)(
        ICreateTypeLib2* This);


    HRESULT ( *DeleteTypeInfo)(
        ICreateTypeLib2* This,
        LPOLESTR szName);

    HRESULT ( *SetCustData)(
        ICreateTypeLib2* This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetHelpStringContext)(
        ICreateTypeLib2* This,
        ULONG dwHelpStringContext);

    HRESULT ( *SetHelpStringDll)(
        ICreateTypeLib2* This,
        LPOLESTR szFileName);

   
} ICreateTypeLib2Vtbl;
struct ICreateTypeLib2 {
    ICreateTypeLib2Vtbl* lpVtbl;
};
# 2421 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ICreateTypeLib2_DeleteTypeInfo_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szName);
void ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetCustData_Proxy(
    ICreateTypeLib2* This,
    const GUID *const guid,
    VARIANT *pVarVal);
void ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetHelpStringContext_Proxy(
    ICreateTypeLib2* This,
    ULONG dwHelpStringContext);
void ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetHelpStringDll_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szFileName);
void ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 2464 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IDispatch_INTERFACE_DEFINED__

typedef IDispatch *LPDISPATCH;


#define DISPID_UNKNOWN

#define DISPID_VALUE

#define DISPID_PROPERTYPUT

#define DISPID_NEWENUM

#define DISPID_EVALUATE

#define DISPID_CONSTRUCTOR

#define DISPID_DESTRUCTOR

#define DISPID_COLLECT


extern const GUID IID_IDispatch;
# 2521 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IDispatchVtbl {
   


    HRESULT ( *QueryInterface)(
        IDispatch* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDispatch* This);

    ULONG ( *Release)(
        IDispatch* This);


    HRESULT ( *GetTypeInfoCount)(
        IDispatch* This,
        UINT *pctinfo);

    HRESULT ( *GetTypeInfo)(
        IDispatch* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetIDsOfNames)(
        IDispatch* This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT ( *Invoke)(
        IDispatch* This,
        DISPID dispIdMember,
        const IID *const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

   
} IDispatchVtbl;
struct IDispatch {
    IDispatchVtbl* lpVtbl;
};
# 2612 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IDispatch_GetTypeInfoCount_Proxy(
    IDispatch* This,
    UINT *pctinfo);
void IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDispatch_GetTypeInfo_Proxy(
    IDispatch* This,
    UINT iTInfo,
    LCID lcid,
    ITypeInfo **ppTInfo);
void IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDispatch_GetIDsOfNames_Proxy(
    IDispatch* This,
    const IID *const riid,
    LPOLESTR *rgszNames,
    UINT cNames,
    LCID lcid,
    DISPID *rgDispId);
void IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDispatch_RemoteInvoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID *const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
void IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDispatch_Invoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID *const riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT IDispatch_Invoke_Stub(
    IDispatch* This,
    DISPID dispIdMember,
    const IID *const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
# 2691 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IEnumVARIANT_INTERFACE_DEFINED__

typedef IEnumVARIANT *LPENUMVARIANT;

extern const GUID IID_IEnumVARIANT;
# 2719 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IEnumVARIANTVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumVARIANT* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumVARIANT* This);

    ULONG ( *Release)(
        IEnumVARIANT* This);


    HRESULT ( *Next)(
        IEnumVARIANT* This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT ( *Skip)(
        IEnumVARIANT* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumVARIANT* This);

    HRESULT ( *Clone)(
        IEnumVARIANT* This,
        IEnumVARIANT **ppEnum);

   
} IEnumVARIANTVtbl;
struct IEnumVARIANT {
    IEnumVARIANTVtbl* lpVtbl;
};
# 2798 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IEnumVARIANT_RemoteNext_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
void IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Skip_Proxy(
    IEnumVARIANT* This,
    ULONG celt);
void IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Reset_Proxy(
    IEnumVARIANT* This);
void IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Clone_Proxy(
    IEnumVARIANT* This,
    IEnumVARIANT **ppEnum);
void IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Next_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
HRESULT IEnumVARIANT_Next_Stub(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
# 2849 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeComp_INTERFACE_DEFINED__

typedef ITypeComp *LPTYPECOMP;

typedef enum tagDESCKIND {
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
} DESCKIND;

typedef union tagBINDPTR {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
} BINDPTR;
typedef union tagBINDPTR *LPBINDPTR;

extern const GUID IID_ITypeComp;
# 2893 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeCompVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeComp* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeComp* This);

    ULONG ( *Release)(
        ITypeComp* This);


    HRESULT ( *Bind)(
        ITypeComp* This,
        LPOLESTR szName,
        ULONG lHashVal,
        WORD wFlags,
        ITypeInfo **ppTInfo,
        DESCKIND *pDescKind,
        BINDPTR *pBindPtr);

    HRESULT ( *BindType)(
        ITypeComp* This,
        LPOLESTR szName,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        ITypeComp **ppTComp);

   
} ITypeCompVtbl;
struct ITypeComp {
    ITypeCompVtbl* lpVtbl;
};
# 2963 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeComp_RemoteBind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
void ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeComp_RemoteBindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
void ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeComp_Bind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    BINDPTR *pBindPtr);
HRESULT ITypeComp_Bind_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
HRESULT ITypeComp_BindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    ITypeComp **ppTComp);
HRESULT ITypeComp_BindType_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
# 3029 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeInfo_INTERFACE_DEFINED__

typedef ITypeInfo *LPTYPEINFO;

extern const GUID IID_ITypeInfo;
# 3130 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeInfo* This);

    ULONG ( *Release)(
        ITypeInfo* This);


    HRESULT ( *GetTypeAttr)(
        ITypeInfo* This,
        TYPEATTR **ppTypeAttr);

    HRESULT ( *GetTypeComp)(
        ITypeInfo* This,
        ITypeComp **ppTComp);

    HRESULT ( *GetFuncDesc)(
        ITypeInfo* This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT ( *GetVarDesc)(
        ITypeInfo* This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT ( *GetNames)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);

    HRESULT ( *GetRefTypeOfImplType)(
        ITypeInfo* This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT ( *GetImplTypeFlags)(
        ITypeInfo* This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT ( *GetIDsOfNames)(
        ITypeInfo* This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT ( *Invoke)(
        ITypeInfo* This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT ( *GetDocumentation)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetDllEntry)(
        ITypeInfo* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT ( *GetRefTypeInfo)(
        ITypeInfo* This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT ( *AddressOfMember)(
        ITypeInfo* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT ( *CreateInstance)(
        ITypeInfo* This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        PVOID *ppvObj);

    HRESULT ( *GetMops)(
        ITypeInfo* This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT ( *GetContainingTypeLib)(
        ITypeInfo* This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void ( *ReleaseTypeAttr)(
        ITypeInfo* This,
        TYPEATTR *pTypeAttr);

    void ( *ReleaseFuncDesc)(
        ITypeInfo* This,
        FUNCDESC *pFuncDesc);

    void ( *ReleaseVarDesc)(
        ITypeInfo* This,
        VARDESC *pVarDesc);

   
} ITypeInfoVtbl;
struct ITypeInfo {
    ITypeInfoVtbl* lpVtbl;
};
# 3358 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
void ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetTypeComp_Proxy(
    ITypeInfo* This,
    ITypeComp **ppTComp);
void ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
void ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
void ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
void ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetRefTypeOfImplType_Proxy(
    ITypeInfo* This,
    UINT index,
    HREFTYPE *pRefType);
void ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetImplTypeFlags_Proxy(
    ITypeInfo* This,
    UINT index,
    INT *pImplTypeFlags);
void ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalInvoke_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
void ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetRefTypeInfo_Proxy(
    ITypeInfo* This,
    HREFTYPE hRefType,
    ITypeInfo **ppTInfo);
void ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalAddressOfMember_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteCreateInstance_Proxy(
    ITypeInfo* This,
    const IID *const riid,
    IUnknown **ppvObj);
void ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetMops_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrMops);
void ITypeInfo_GetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(
    ITypeInfo* This);
void ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR **ppTypeAttr);
HRESULT ITypeInfo_GetTypeAttr_Stub(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    FUNCDESC **ppFuncDesc);
HRESULT ITypeInfo_GetFuncDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    VARDESC **ppVarDesc);
HRESULT ITypeInfo_GetVarDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT ITypeInfo_GetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT ITypeInfo_GetNames_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo* This,
    LPOLESTR *rgszNames,
    UINT cNames,
    MEMBERID *pMemId);
HRESULT ITypeInfo_GetIDsOfNames_Stub(
    ITypeInfo* This);
HRESULT ITypeInfo_Invoke_Proxy(
    ITypeInfo* This,
    PVOID pvInstance,
    MEMBERID memid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT ITypeInfo_Invoke_Stub(
    ITypeInfo* This);
HRESULT ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT ITypeInfo_GetDocumentation_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT ITypeInfo_GetDllEntry_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    PVOID *ppv);
HRESULT ITypeInfo_AddressOfMember_Stub(
    ITypeInfo* This);
HRESULT ITypeInfo_CreateInstance_Proxy(
    ITypeInfo* This,
    IUnknown *pUnkOuter,
    const IID *const riid,
    PVOID *ppvObj);
HRESULT ITypeInfo_CreateInstance_Stub(
    ITypeInfo* This,
    const IID *const riid,
    IUnknown **ppvObj);
HRESULT ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
HRESULT ITypeInfo_GetContainingTypeLib_Stub(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR *pTypeAttr);
HRESULT ITypeInfo_ReleaseTypeAttr_Stub(
    ITypeInfo* This);
void ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo* This,
    FUNCDESC *pFuncDesc);
HRESULT ITypeInfo_ReleaseFuncDesc_Stub(
    ITypeInfo* This);
void ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo* This,
    VARDESC *pVarDesc);
HRESULT ITypeInfo_ReleaseVarDesc_Stub(
    ITypeInfo* This);
# 3660 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeInfo2_INTERFACE_DEFINED__

typedef ITypeInfo2 *LPTYPEINFO2;

extern const GUID IID_ITypeInfo2;
# 3741 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeInfo2Vtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeInfo2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeInfo2* This);

    ULONG ( *Release)(
        ITypeInfo2* This);


    HRESULT ( *GetTypeAttr)(
        ITypeInfo2* This,
        TYPEATTR **ppTypeAttr);

    HRESULT ( *GetTypeComp)(
        ITypeInfo2* This,
        ITypeComp **ppTComp);

    HRESULT ( *GetFuncDesc)(
        ITypeInfo2* This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT ( *GetVarDesc)(
        ITypeInfo2* This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT ( *GetNames)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);

    HRESULT ( *GetRefTypeOfImplType)(
        ITypeInfo2* This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT ( *GetImplTypeFlags)(
        ITypeInfo2* This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT ( *GetIDsOfNames)(
        ITypeInfo2* This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT ( *Invoke)(
        ITypeInfo2* This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT ( *GetDocumentation)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetDllEntry)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT ( *GetRefTypeInfo)(
        ITypeInfo2* This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT ( *AddressOfMember)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT ( *CreateInstance)(
        ITypeInfo2* This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        PVOID *ppvObj);

    HRESULT ( *GetMops)(
        ITypeInfo2* This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT ( *GetContainingTypeLib)(
        ITypeInfo2* This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void ( *ReleaseTypeAttr)(
        ITypeInfo2* This,
        TYPEATTR *pTypeAttr);

    void ( *ReleaseFuncDesc)(
        ITypeInfo2* This,
        FUNCDESC *pFuncDesc);

    void ( *ReleaseVarDesc)(
        ITypeInfo2* This,
        VARDESC *pVarDesc);


    HRESULT ( *GetTypeKind)(
        ITypeInfo2* This,
        TYPEKIND *pTypeKind);

    HRESULT ( *GetTypeFlags)(
        ITypeInfo2* This,
        ULONG *pTypeFlags);

    HRESULT ( *GetFuncIndexOfMemId)(
        ITypeInfo2* This,
        MEMBERID memid,
        INVOKEKIND invKind,
        UINT *pFuncIndex);

    HRESULT ( *GetVarIndexOfMemId)(
        ITypeInfo2* This,
        MEMBERID memid,
        UINT *pVarIndex);

    HRESULT ( *GetCustData)(
        ITypeInfo2* This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetFuncCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetParamCustData)(
        ITypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetVarCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetImplTypeCustData)(
        ITypeInfo2* This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetDocumentation2)(
        ITypeInfo2* This,
        MEMBERID memid,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);

    HRESULT ( *GetAllCustData)(
        ITypeInfo2* This,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllFuncCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllParamCustData)(
        ITypeInfo2* This,
        UINT indexFunc,
        UINT indexParam,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllVarCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllImplTypeCustData)(
        ITypeInfo2* This,
        UINT index,
        CUSTDATA *pCustData);

   
} ITypeInfo2Vtbl;
struct ITypeInfo2 {
    ITypeInfo2Vtbl* lpVtbl;
};
# 4114 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeInfo2_GetTypeKind_Proxy(
    ITypeInfo2* This,
    TYPEKIND *pTypeKind);
void ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetTypeFlags_Proxy(
    ITypeInfo2* This,
    ULONG *pTypeFlags);
void ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetFuncIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    UINT *pFuncIndex);
void ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetVarIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    UINT *pVarIndex);
void ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetCustData_Proxy(
    ITypeInfo2* This,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllCustData_Proxy(
    ITypeInfo2* This,
    CUSTDATA *pCustData);
void ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    CUSTDATA *pCustData);
void ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT ITypeInfo2_GetDocumentation2_Stub(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
# 4282 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeLib_INTERFACE_DEFINED__

typedef enum tagSYSKIND {
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
} SYSKIND;

typedef enum tagLIBFLAGS {
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
} LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
} TLIBATTR;
typedef struct tagTLIBATTR *LPTLIBATTR;

extern const GUID IID_ITypeLib;
# 4363 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeLibVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeLib* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeLib* This);

    ULONG ( *Release)(
        ITypeLib* This);


    UINT ( *GetTypeInfoCount)(
        ITypeLib* This);

    HRESULT ( *GetTypeInfo)(
        ITypeLib* This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetTypeInfoType)(
        ITypeLib* This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT ( *GetTypeInfoOfGuid)(
        ITypeLib* This,
        const GUID *const guid,
        ITypeInfo **ppTinfo);

    HRESULT ( *GetLibAttr)(
        ITypeLib* This,
        TLIBATTR **ppTLibAttr);

    HRESULT ( *GetTypeComp)(
        ITypeLib* This,
        ITypeComp **ppTComp);

    HRESULT ( *GetDocumentation)(
        ITypeLib* This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *IsName)(
        ITypeLib* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        WINBOOL *pfName);

    HRESULT ( *FindName)(
        ITypeLib* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void ( *ReleaseTLibAttr)(
        ITypeLib* This,
        TLIBATTR *pTLibAttr);

   
} ITypeLibVtbl;
struct ITypeLib {
    ITypeLibVtbl* lpVtbl;
};
# 4501 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(
    ITypeLib* This,
    UINT *pcTInfo);
void ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfo_Proxy(
    ITypeLib* This,
    UINT index,
    ITypeInfo **ppTInfo);
void ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfoType_Proxy(
    ITypeLib* This,
    UINT index,
    TYPEKIND *pTKind);
void ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfoOfGuid_Proxy(
    ITypeLib* This,
    const GUID *const guid,
    ITypeInfo **ppTinfo);
void ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteGetLibAttr_Proxy(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
void ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeComp_Proxy(
    ITypeLib* This,
    ITypeComp **ppTComp);
void ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteGetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteIsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName,
    BSTR *pBstrLibName);
void ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteFindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(
    ITypeLib* This);
void ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
UINT ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib* This);
HRESULT ITypeLib_GetTypeInfoCount_Stub(
    ITypeLib* This,
    UINT *pcTInfo);
HRESULT ITypeLib_GetLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR **ppTLibAttr);
HRESULT ITypeLib_GetLibAttr_Stub(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT ITypeLib_GetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT ITypeLib_GetDocumentation_Stub(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT ITypeLib_IsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName);
HRESULT ITypeLib_IsName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName,
    BSTR *pBstrLibName);
HRESULT ITypeLib_FindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound);
HRESULT ITypeLib_FindName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR *pTLibAttr);
HRESULT ITypeLib_ReleaseTLibAttr_Stub(
    ITypeLib* This);
# 4665 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeLib2_INTERFACE_DEFINED__

typedef ITypeLib2 *LPTYPELIB2;

extern const GUID IID_ITypeLib2;
# 4697 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeLib2Vtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeLib2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeLib2* This);

    ULONG ( *Release)(
        ITypeLib2* This);


    UINT ( *GetTypeInfoCount)(
        ITypeLib2* This);

    HRESULT ( *GetTypeInfo)(
        ITypeLib2* This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetTypeInfoType)(
        ITypeLib2* This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT ( *GetTypeInfoOfGuid)(
        ITypeLib2* This,
        const GUID *const guid,
        ITypeInfo **ppTinfo);

    HRESULT ( *GetLibAttr)(
        ITypeLib2* This,
        TLIBATTR **ppTLibAttr);

    HRESULT ( *GetTypeComp)(
        ITypeLib2* This,
        ITypeComp **ppTComp);

    HRESULT ( *GetDocumentation)(
        ITypeLib2* This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *IsName)(
        ITypeLib2* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        WINBOOL *pfName);

    HRESULT ( *FindName)(
        ITypeLib2* This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void ( *ReleaseTLibAttr)(
        ITypeLib2* This,
        TLIBATTR *pTLibAttr);


    HRESULT ( *GetCustData)(
        ITypeLib2* This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetLibStatistics)(
        ITypeLib2* This,
        ULONG *pcUniqueNames,
        ULONG *pcchUniqueNames);

    HRESULT ( *GetDocumentation2)(
        ITypeLib2* This,
        INT index,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);

    HRESULT ( *GetAllCustData)(
        ITypeLib2* This,
        CUSTDATA *pCustData);

   
} ITypeLib2Vtbl;
struct ITypeLib2 {
    ITypeLib2Vtbl* lpVtbl;
};
# 4876 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeLib2_GetCustData_Proxy(
    ITypeLib2* This,
    const GUID *const guid,
    VARIANT *pVarVal);
void ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
void ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib2_GetAllCustData_Proxy(
    ITypeLib2* This,
    CUSTDATA *pCustData);
void ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT ITypeLib2_GetLibStatistics_Stub(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT ITypeLib2_GetDocumentation2_Stub(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
# 4946 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeChangeEvents_INTERFACE_DEFINED__

typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef enum tagCHANGEKIND {
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
} CHANGEKIND;

extern const GUID IID_ITypeChangeEvents;
# 4982 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeChangeEventsVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeChangeEvents* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeChangeEvents* This);

    ULONG ( *Release)(
        ITypeChangeEvents* This);


    HRESULT ( *RequestTypeChange)(
        ITypeChangeEvents* This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoBefore,
        LPOLESTR pStrName,
        INT *pfCancel);

    HRESULT ( *AfterTypeChange)(
        ITypeChangeEvents* This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoAfter,
        LPOLESTR pStrName);

   
} ITypeChangeEventsVtbl;
struct ITypeChangeEvents {
    ITypeChangeEventsVtbl* lpVtbl;
};
# 5049 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeChangeEvents_RequestTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoBefore,
    LPOLESTR pStrName,
    INT *pfCancel);
void ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeChangeEvents_AfterTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoAfter,
    LPOLESTR pStrName);
void ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5078 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IErrorInfo_INTERFACE_DEFINED__

typedef IErrorInfo *LPERRORINFO;

extern const GUID IID_IErrorInfo;
# 5107 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IErrorInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IErrorInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IErrorInfo* This);

    ULONG ( *Release)(
        IErrorInfo* This);


    HRESULT ( *GetGUID)(
        IErrorInfo* This,
        GUID *pGUID);

    HRESULT ( *GetSource)(
        IErrorInfo* This,
        BSTR *pBstrSource);

    HRESULT ( *GetDescription)(
        IErrorInfo* This,
        BSTR *pBstrDescription);

    HRESULT ( *GetHelpFile)(
        IErrorInfo* This,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetHelpContext)(
        IErrorInfo* This,
        DWORD *pdwHelpContext);

   
} IErrorInfoVtbl;
struct IErrorInfo {
    IErrorInfoVtbl* lpVtbl;
};
# 5193 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IErrorInfo_GetGUID_Proxy(
    IErrorInfo* This,
    GUID *pGUID);
void IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetSource_Proxy(
    IErrorInfo* This,
    BSTR *pBstrSource);
void IErrorInfo_GetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetDescription_Proxy(
    IErrorInfo* This,
    BSTR *pBstrDescription);
void IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetHelpFile_Proxy(
    IErrorInfo* This,
    BSTR *pBstrHelpFile);
void IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetHelpContext_Proxy(
    IErrorInfo* This,
    DWORD *pdwHelpContext);
void IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5241 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ICreateErrorInfo_INTERFACE_DEFINED__

typedef ICreateErrorInfo *LPCREATEERRORINFO;

extern const GUID IID_ICreateErrorInfo;
# 5270 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ICreateErrorInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        ICreateErrorInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateErrorInfo* This);

    ULONG ( *Release)(
        ICreateErrorInfo* This);


    HRESULT ( *SetGUID)(
        ICreateErrorInfo* This,
        const GUID *const rguid);

    HRESULT ( *SetSource)(
        ICreateErrorInfo* This,
        LPOLESTR szSource);

    HRESULT ( *SetDescription)(
        ICreateErrorInfo* This,
        LPOLESTR szDescription);

    HRESULT ( *SetHelpFile)(
        ICreateErrorInfo* This,
        LPOLESTR szHelpFile);

    HRESULT ( *SetHelpContext)(
        ICreateErrorInfo* This,
        DWORD dwHelpContext);

   
} ICreateErrorInfoVtbl;
struct ICreateErrorInfo {
    ICreateErrorInfoVtbl* lpVtbl;
};
# 5356 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ICreateErrorInfo_SetGUID_Proxy(
    ICreateErrorInfo* This,
    const GUID *const rguid);
void ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetSource_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szSource);
void ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetDescription_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szDescription);
void ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetHelpFile_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szHelpFile);
void ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetHelpContext_Proxy(
    ICreateErrorInfo* This,
    DWORD dwHelpContext);
void ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5404 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ISupportErrorInfo_INTERFACE_DEFINED__

typedef ISupportErrorInfo *LPSUPPORTERRORINFO;

extern const GUID IID_ISupportErrorInfo;
# 5421 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ISupportErrorInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        ISupportErrorInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISupportErrorInfo* This);

    ULONG ( *Release)(
        ISupportErrorInfo* This);


    HRESULT ( *InterfaceSupportsErrorInfo)(
        ISupportErrorInfo* This,
        const IID *const riid);

   
} ISupportErrorInfoVtbl;
struct ISupportErrorInfo {
    ISupportErrorInfoVtbl* lpVtbl;
};
# 5475 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(
    ISupportErrorInfo* This,
    const IID *const riid);
void ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5491 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeFactory_INTERFACE_DEFINED__

extern const GUID IID_ITypeFactory;
# 5508 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeFactoryVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeFactory* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeFactory* This);

    ULONG ( *Release)(
        ITypeFactory* This);


    HRESULT ( *CreateFromTypeInfo)(
        ITypeFactory* This,
        ITypeInfo *pTypeInfo,
        const IID *const riid,
        IUnknown **ppv);

   
} ITypeFactoryVtbl;
struct ITypeFactory {
    ITypeFactoryVtbl* lpVtbl;
};
# 5564 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeFactory_CreateFromTypeInfo_Proxy(
    ITypeFactory* This,
    ITypeInfo *pTypeInfo,
    const IID *const riid,
    IUnknown **ppv);
void ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5582 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __ITypeMarshal_INTERFACE_DEFINED__

extern const GUID IID_ITypeMarshal;
# 5618 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct ITypeMarshalVtbl {
   


    HRESULT ( *QueryInterface)(
        ITypeMarshal* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeMarshal* This);

    ULONG ( *Release)(
        ITypeMarshal* This);


    HRESULT ( *Size)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG *pSize);

    HRESULT ( *Marshal)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbWritten);

    HRESULT ( *Unmarshal)(
        ITypeMarshal* This,
        PVOID pvType,
        DWORD dwFlags,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbRead);

    HRESULT ( *Free)(
        ITypeMarshal* This,
        PVOID pvType);

   
} ITypeMarshalVtbl;
struct ITypeMarshal {
    ITypeMarshalVtbl* lpVtbl;
};
# 5708 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT ITypeMarshal_Size_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG *pSize);
void ITypeMarshal_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Marshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbWritten);
void ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Unmarshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwFlags,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbRead);
void ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Free_Proxy(
    ITypeMarshal* This,
    PVOID pvType);
void ITypeMarshal_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 5760 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IRecordInfo_INTERFACE_DEFINED__

typedef IRecordInfo *LPRECORDINFO;

extern const GUID IID_IRecordInfo;
# 5836 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IRecordInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IRecordInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRecordInfo* This);

    ULONG ( *Release)(
        IRecordInfo* This);


    HRESULT ( *RecordInit)(
        IRecordInfo* This,
        PVOID pvNew);

    HRESULT ( *RecordClear)(
        IRecordInfo* This,
        PVOID pvExisting);

    HRESULT ( *RecordCopy)(
        IRecordInfo* This,
        PVOID pvExisting,
        PVOID pvNew);

    HRESULT ( *GetGuid)(
        IRecordInfo* This,
        GUID *pguid);

    HRESULT ( *GetName)(
        IRecordInfo* This,
        BSTR *pbstrName);

    HRESULT ( *GetSize)(
        IRecordInfo* This,
        ULONG *pcbSize);

    HRESULT ( *GetTypeInfo)(
        IRecordInfo* This,
        ITypeInfo **ppTypeInfo);

    HRESULT ( *GetField)(
        IRecordInfo* This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *GetFieldNoCopy)(
        IRecordInfo* This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField,
        PVOID *ppvDataCArray);

    HRESULT ( *PutField)(
        IRecordInfo* This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *PutFieldNoCopy)(
        IRecordInfo* This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *GetFieldNames)(
        IRecordInfo* This,
        ULONG *pcNames,
        BSTR *rgBstrNames);

    WINBOOL ( *IsMatchingType)(
        IRecordInfo* This,
        IRecordInfo *pRecordInfo);

    PVOID ( *RecordCreate)(
        IRecordInfo* This);

    HRESULT ( *RecordCreateCopy)(
        IRecordInfo* This,
        PVOID pvSource,
        PVOID *ppvDest);

    HRESULT ( *RecordDestroy)(
        IRecordInfo* This,
        PVOID pvRecord);

   
} IRecordInfoVtbl;
struct IRecordInfo {
    IRecordInfoVtbl* lpVtbl;
};
# 6023 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IRecordInfo_RecordInit_Proxy(
    IRecordInfo* This,
    PVOID pvNew);
void IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordClear_Proxy(
    IRecordInfo* This,
    PVOID pvExisting);
void IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordCopy_Proxy(
    IRecordInfo* This,
    PVOID pvExisting,
    PVOID pvNew);
void IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetGuid_Proxy(
    IRecordInfo* This,
    GUID *pguid);
void IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetName_Proxy(
    IRecordInfo* This,
    BSTR *pbstrName);
void IRecordInfo_GetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetSize_Proxy(
    IRecordInfo* This,
    ULONG *pcbSize);
void IRecordInfo_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetTypeInfo_Proxy(
    IRecordInfo* This,
    ITypeInfo **ppTypeInfo);
void IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetField_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void IRecordInfo_GetField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetFieldNoCopy_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField,
    PVOID *ppvDataCArray);
void IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_PutField_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void IRecordInfo_PutField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_PutFieldNoCopy_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetFieldNames_Proxy(
    IRecordInfo* This,
    ULONG *pcNames,
    BSTR *rgBstrNames);
void IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL IRecordInfo_IsMatchingType_Proxy(
    IRecordInfo* This,
    IRecordInfo *pRecordInfo);
void IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
PVOID IRecordInfo_RecordCreate_Proxy(
    IRecordInfo* This);
void IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordCreateCopy_Proxy(
    IRecordInfo* This,
    PVOID pvSource,
    PVOID *ppvDest);
void IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordDestroy_Proxy(
    IRecordInfo* This,
    PVOID pvRecord);
void IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6172 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IErrorLog_INTERFACE_DEFINED__

typedef IErrorLog *LPERRORLOG;

extern const GUID IID_IErrorLog;
# 6190 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IErrorLogVtbl {
   


    HRESULT ( *QueryInterface)(
        IErrorLog* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IErrorLog* This);

    ULONG ( *Release)(
        IErrorLog* This);


    HRESULT ( *AddError)(
        IErrorLog* This,
        LPCOLESTR pszPropName,
        EXCEPINFO *pExcepInfo);

   
} IErrorLogVtbl;
struct IErrorLog {
    IErrorLogVtbl* lpVtbl;
};
# 6245 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IErrorLog_AddError_Proxy(
    IErrorLog* This,
    LPCOLESTR pszPropName,
    EXCEPINFO *pExcepInfo);
void IErrorLog_AddError_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6262 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
#define __IPropertyBag_INTERFACE_DEFINED__

typedef IPropertyBag *LPPROPERTYBAG;

extern const GUID IID_IPropertyBag;
# 6285 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
typedef struct IPropertyBagVtbl {
   


    HRESULT ( *QueryInterface)(
        IPropertyBag* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertyBag* This);

    ULONG ( *Release)(
        IPropertyBag* This);


    HRESULT ( *Read)(
        IPropertyBag* This,
        LPCOLESTR pszPropName,
        VARIANT *pVar,
        IErrorLog *pErrorLog);

    HRESULT ( *Write)(
        IPropertyBag* This,
        LPCOLESTR pszPropName,
        VARIANT *pVar);

   
} IPropertyBagVtbl;
struct IPropertyBag {
    IPropertyBagVtbl* lpVtbl;
};
# 6350 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 3
HRESULT IPropertyBag_RemoteRead_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);
void IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyBag_Write_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar);
void IPropertyBag_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyBag_Read_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog);
HRESULT IPropertyBag_Read_Stub(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);






ULONG VARIANT_UserSize (ULONG *, ULONG, VARIANT *);
unsigned char * VARIANT_UserMarshal (ULONG *, unsigned char *, VARIANT *);
unsigned char * VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void VARIANT_UserFree (ULONG *, VARIANT *);
ULONG BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void BSTR_UserFree (ULONG *, BSTR *);
ULONG CLEANLOCALSTORAGE_UserSize (ULONG *, ULONG, CLEANLOCALSTORAGE *);
unsigned char * CLEANLOCALSTORAGE_UserMarshal (ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
unsigned char * CLEANLOCALSTORAGE_UserUnmarshal(ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
void CLEANLOCALSTORAGE_UserFree (ULONG *, CLEANLOCALSTORAGE *);
# 25 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 2 3





       
#undef abort

#define __IXMLDOMImplementation_FWD_DEFINED__
typedef struct IXMLDOMImplementation IXMLDOMImplementation;



#define __IXMLDOMNode_FWD_DEFINED__
typedef struct IXMLDOMNode IXMLDOMNode;



#define __IXMLDOMDocumentFragment_FWD_DEFINED__
typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;



#define __IXMLDOMDocument_FWD_DEFINED__
typedef struct IXMLDOMDocument IXMLDOMDocument;



#define __IXMLDOMNodeList_FWD_DEFINED__
typedef struct IXMLDOMNodeList IXMLDOMNodeList;



#define __IXMLDOMNamedNodeMap_FWD_DEFINED__
typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;



#define __IXMLDOMCharacterData_FWD_DEFINED__
typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;



#define __IXMLDOMAttribute_FWD_DEFINED__
typedef struct IXMLDOMAttribute IXMLDOMAttribute;



#define __IXMLDOMElement_FWD_DEFINED__
typedef struct IXMLDOMElement IXMLDOMElement;



#define __IXMLDOMText_FWD_DEFINED__
typedef struct IXMLDOMText IXMLDOMText;



#define __IXMLDOMComment_FWD_DEFINED__
typedef struct IXMLDOMComment IXMLDOMComment;



#define __IXMLDOMProcessingInstruction_FWD_DEFINED__
typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;



#define __IXMLDOMCDATASection_FWD_DEFINED__
typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;



#define __IXMLDOMDocumentType_FWD_DEFINED__
typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;



#define __IXMLDOMNotation_FWD_DEFINED__
typedef struct IXMLDOMNotation IXMLDOMNotation;



#define __IXMLDOMEntity_FWD_DEFINED__
typedef struct IXMLDOMEntity IXMLDOMEntity;



#define __IXMLDOMEntityReference_FWD_DEFINED__
typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;



#define __IXMLDOMParseError_FWD_DEFINED__
typedef struct IXMLDOMParseError IXMLDOMParseError;



#define __IXTLRuntime_FWD_DEFINED__
typedef struct IXTLRuntime IXTLRuntime;



#define __XMLDOMDocumentEvents_FWD_DEFINED__
typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;



#define __DOMDocument_FWD_DEFINED__



typedef struct DOMDocument DOMDocument;




#define __DOMFreeThreadedDocument_FWD_DEFINED__



typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;




#define __IXMLHttpRequest_FWD_DEFINED__
typedef struct IXMLHttpRequest IXMLHttpRequest;



#define __XMLHTTPRequest_FWD_DEFINED__



typedef struct XMLHTTPRequest XMLHTTPRequest;




#define __IXMLDSOControl_FWD_DEFINED__
typedef struct IXMLDSOControl IXMLDSOControl;



#define __XMLDSOControl_FWD_DEFINED__



typedef struct XMLDSOControl XMLDSOControl;




#define __IXMLElementCollection_FWD_DEFINED__
typedef struct IXMLElementCollection IXMLElementCollection;



#define __IXMLDocument_FWD_DEFINED__
typedef struct IXMLDocument IXMLDocument;



#define __IXMLDocument2_FWD_DEFINED__
typedef struct IXMLDocument2 IXMLDocument2;



#define __IXMLElement_FWD_DEFINED__
typedef struct IXMLElement IXMLElement;



#define __IXMLElement2_FWD_DEFINED__
typedef struct IXMLElement2 IXMLElement2;



#define __IXMLAttribute_FWD_DEFINED__
typedef struct IXMLAttribute IXMLAttribute;



#define __IXMLError_FWD_DEFINED__
typedef struct IXMLError IXMLError;



#define __XMLDocument_FWD_DEFINED__




typedef struct XMLDocument XMLDocument;




  typedef struct _xml_error {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
  } XML_ERROR;

  extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;


#define __MSXML_LIBRARY_DEFINED__

  typedef enum tagDOMNodeType {
    NODE_INVALID = 0,NODE_ELEMENT,NODE_ATTRIBUTE,NODE_TEXT,NODE_CDATA_SECTION,
    NODE_ENTITY_REFERENCE,NODE_ENTITY,NODE_PROCESSING_INSTRUCTION,NODE_COMMENT,
    NODE_DOCUMENT,NODE_DOCUMENT_TYPE,NODE_DOCUMENT_FRAGMENT,NODE_NOTATION
  } DOMNodeType;

  typedef enum tagXMLEMEM_TYPE {
    XMLELEMTYPE_ELEMENT = 0,XMLELEMTYPE_TEXT,XMLELEMTYPE_COMMENT,XMLELEMTYPE_DOCUMENT,
    XMLELEMTYPE_DTD,XMLELEMTYPE_PI,XMLELEMTYPE_OTHER
  } XMLELEM_TYPE;

  extern const IID LIBID_MSXML;


#define __IXMLDOMImplementation_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMImplementation;






  typedef struct IXMLDOMImplementationVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMImplementation *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMImplementation *This);
      ULONG ( *Release)(IXMLDOMImplementation *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMImplementation *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMImplementation *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMImplementation *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMImplementation *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *hasFeature)(IXMLDOMImplementation *This,BSTR feature,BSTR version,VARIANT_BOOL *hasFeature);
   
  } IXMLDOMImplementationVtbl;
  struct IXMLDOMImplementation {
    struct IXMLDOMImplementationVtbl *lpVtbl;
  };
# 289 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMImplementation_hasFeature_Proxy(IXMLDOMImplementation *This,BSTR feature,BSTR version,VARIANT_BOOL *hasFeature);
  void IXMLDOMImplementation_hasFeature_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMNode_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMNode;
# 337 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMNodeVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMNode *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMNode *This);
      ULONG ( *Release)(IXMLDOMNode *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMNode *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMNode *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMNode *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMNode *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMNode *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMNode *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMNode *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMNode *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMNode *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMNode *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMNode *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMNode *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMNode *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMNode *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMNode *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMNode *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMNode *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMNode *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMNode *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMNode *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMNode *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMNode *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMNode *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMNode *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMNode *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMNode *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMNode *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMNode *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMNode *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMNode *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMNode *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMNode *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMNode *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMNode *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMNode *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMNode *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMNode *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMNode *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
   
  } IXMLDOMNodeVtbl;
  struct IXMLDOMNode {
    struct IXMLDOMNodeVtbl *lpVtbl;
  };
# 433 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMNode_get_nodeName_Proxy(IXMLDOMNode *This,BSTR *name);
  void IXMLDOMNode_get_nodeName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_nodeValue_Proxy(IXMLDOMNode *This,VARIANT *value);
  void IXMLDOMNode_get_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_put_nodeValue_Proxy(IXMLDOMNode *This,VARIANT value);
  void IXMLDOMNode_put_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_nodeType_Proxy(IXMLDOMNode *This,DOMNodeType *type);
  void IXMLDOMNode_get_nodeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_parentNode_Proxy(IXMLDOMNode *This,IXMLDOMNode **parent);
  void IXMLDOMNode_get_parentNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_childNodes_Proxy(IXMLDOMNode *This,IXMLDOMNodeList **childList);
  void IXMLDOMNode_get_childNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_firstChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **firstChild);
  void IXMLDOMNode_get_firstChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_lastChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **lastChild);
  void IXMLDOMNode_get_lastChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_previousSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **previousSibling);
  void IXMLDOMNode_get_previousSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_nextSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **nextSibling);
  void IXMLDOMNode_get_nextSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_attributes_Proxy(IXMLDOMNode *This,IXMLDOMNamedNodeMap **attributeMap);
  void IXMLDOMNode_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_insertBefore_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
  void IXMLDOMNode_insertBefore_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_replaceChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
  void IXMLDOMNode_replaceChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_removeChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
  void IXMLDOMNode_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_appendChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
  void IXMLDOMNode_appendChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_hasChildNodes_Proxy(IXMLDOMNode *This,VARIANT_BOOL *hasChild);
  void IXMLDOMNode_hasChildNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_ownerDocument_Proxy(IXMLDOMNode *This,IXMLDOMDocument **DOMDocument);
  void IXMLDOMNode_get_ownerDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_cloneNode_Proxy(IXMLDOMNode *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
  void IXMLDOMNode_cloneNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_nodeTypeString_Proxy(IXMLDOMNode *This,BSTR *nodeType);
  void IXMLDOMNode_get_nodeTypeString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_text_Proxy(IXMLDOMNode *This,BSTR *text);
  void IXMLDOMNode_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_put_text_Proxy(IXMLDOMNode *This,BSTR text);
  void IXMLDOMNode_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_specified_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isSpecified);
  void IXMLDOMNode_get_specified_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_definition_Proxy(IXMLDOMNode *This,IXMLDOMNode **definitionNode);
  void IXMLDOMNode_get_definition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT *typedValue);
  void IXMLDOMNode_get_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_put_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT typedValue);
  void IXMLDOMNode_put_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_dataType_Proxy(IXMLDOMNode *This,VARIANT *dataTypeName);
  void IXMLDOMNode_get_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_put_dataType_Proxy(IXMLDOMNode *This,BSTR dataTypeName);
  void IXMLDOMNode_put_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_xml_Proxy(IXMLDOMNode *This,BSTR *xmlString);
  void IXMLDOMNode_get_xml_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_transformNode_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
  void IXMLDOMNode_transformNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_selectNodes_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNodeList **resultList);
  void IXMLDOMNode_selectNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_selectSingleNode_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNode **resultNode);
  void IXMLDOMNode_selectSingleNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_parsed_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isParsed);
  void IXMLDOMNode_get_parsed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_namespaceURI_Proxy(IXMLDOMNode *This,BSTR *namespaceURI);
  void IXMLDOMNode_get_namespaceURI_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_prefix_Proxy(IXMLDOMNode *This,BSTR *prefixString);
  void IXMLDOMNode_get_prefix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_get_baseName_Proxy(IXMLDOMNode *This,BSTR *nameString);
  void IXMLDOMNode_get_baseName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNode_transformNodeToObject_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
  void IXMLDOMNode_transformNodeToObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMDocumentFragment_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMDocumentFragment;




  typedef struct IXMLDOMDocumentFragmentVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMDocumentFragment *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMDocumentFragment *This);
      ULONG ( *Release)(IXMLDOMDocumentFragment *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentFragment *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMDocumentFragment *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentFragment *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMDocumentFragment *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMDocumentFragment *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMDocumentFragment *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMDocumentFragment *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMDocumentFragment *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMDocumentFragment *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMDocumentFragment *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMDocumentFragment *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMDocumentFragment *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMDocumentFragment *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMDocumentFragment *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMDocumentFragment *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentFragment *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMDocumentFragment *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMDocumentFragment *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMDocumentFragment *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentFragment *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentFragment *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMDocumentFragment *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMDocumentFragment *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMDocumentFragment *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMDocumentFragment *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMDocumentFragment *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMDocumentFragment *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMDocumentFragment *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMDocumentFragment *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMDocumentFragment *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMDocumentFragment *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
   
  } IXMLDOMDocumentFragmentVtbl;
  struct IXMLDOMDocumentFragment {
    struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
  };
# 613 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
#define __IXMLDOMDocument_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMDocument;
# 653 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMDocumentVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMDocument *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMDocument *This);
      ULONG ( *Release)(IXMLDOMDocument *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMDocument *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMDocument *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMDocument *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMDocument *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMDocument *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMDocument *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMDocument *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMDocument *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMDocument *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMDocument *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMDocument *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMDocument *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMDocument *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMDocument *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMDocument *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMDocument *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMDocument *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMDocument *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMDocument *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMDocument *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMDocument *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMDocument *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMDocument *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMDocument *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMDocument *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMDocument *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMDocument *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMDocument *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMDocument *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMDocument *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMDocument *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMDocument *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMDocument *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMDocument *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMDocument *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMDocument *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMDocument *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMDocument *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMDocument *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMDocument *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_doctype)(IXMLDOMDocument *This,IXMLDOMDocumentType **documentType);
      HRESULT ( *get_implementation)(IXMLDOMDocument *This,IXMLDOMImplementation **impl);
      HRESULT ( *get_documentElement)(IXMLDOMDocument *This,IXMLDOMElement **DOMElement);
      HRESULT ( *putref_documentElement)(IXMLDOMDocument *This,IXMLDOMElement *DOMElement);
      HRESULT ( *createElement)(IXMLDOMDocument *This,BSTR tagName,IXMLDOMElement **element);
      HRESULT ( *createDocumentFragment)(IXMLDOMDocument *This,IXMLDOMDocumentFragment **docFrag);
      HRESULT ( *createTextNode)(IXMLDOMDocument *This,BSTR data,IXMLDOMText **text);
      HRESULT ( *createComment)(IXMLDOMDocument *This,BSTR data,IXMLDOMComment **comment);
      HRESULT ( *createCDATASection)(IXMLDOMDocument *This,BSTR data,IXMLDOMCDATASection **cdata);
      HRESULT ( *createProcessingInstruction)(IXMLDOMDocument *This,BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi);
      HRESULT ( *createAttribute)(IXMLDOMDocument *This,BSTR name,IXMLDOMAttribute **attribute);
      HRESULT ( *createEntityReference)(IXMLDOMDocument *This,BSTR name,IXMLDOMEntityReference **entityRef);
      HRESULT ( *getElementsByTagName)(IXMLDOMDocument *This,BSTR tagName,IXMLDOMNodeList **resultList);
      HRESULT ( *createNode)(IXMLDOMDocument *This,VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node);
      HRESULT ( *nodeFromID)(IXMLDOMDocument *This,BSTR idString,IXMLDOMNode **node);
      HRESULT ( *load)(IXMLDOMDocument *This,VARIANT xmlSource,VARIANT_BOOL *isSuccessful);
      HRESULT ( *get_readyState)(IXMLDOMDocument *This,LONG *value);
      HRESULT ( *get_parseError)(IXMLDOMDocument *This,IXMLDOMParseError **errorObj);
      HRESULT ( *get_url)(IXMLDOMDocument *This,BSTR *urlString);
      HRESULT ( *get_async)(IXMLDOMDocument *This,VARIANT_BOOL *isAsync);
      HRESULT ( *put_async)(IXMLDOMDocument *This,VARIANT_BOOL isAsync);
      HRESULT ( *abort)(IXMLDOMDocument *This);
      HRESULT ( *loadXML)(IXMLDOMDocument *This,BSTR bstrXML,VARIANT_BOOL *isSuccessful);
      HRESULT ( *save)(IXMLDOMDocument *This,VARIANT destination);
      HRESULT ( *get_validateOnParse)(IXMLDOMDocument *This,VARIANT_BOOL *isValidating);
      HRESULT ( *put_validateOnParse)(IXMLDOMDocument *This,VARIANT_BOOL isValidating);
      HRESULT ( *get_resolveExternals)(IXMLDOMDocument *This,VARIANT_BOOL *isResolving);
      HRESULT ( *put_resolveExternals)(IXMLDOMDocument *This,VARIANT_BOOL isResolving);
      HRESULT ( *get_preserveWhiteSpace)(IXMLDOMDocument *This,VARIANT_BOOL *isPreserving);
      HRESULT ( *put_preserveWhiteSpace)(IXMLDOMDocument *This,VARIANT_BOOL isPreserving);
      HRESULT ( *put_onreadystatechange)(IXMLDOMDocument *This,VARIANT readystatechangeSink);
      HRESULT ( *put_ondataavailable)(IXMLDOMDocument *This,VARIANT ondataavailableSink);
      HRESULT ( *put_ontransformnode)(IXMLDOMDocument *This,VARIANT ontransformnodeSink);
   
  } IXMLDOMDocumentVtbl;
  struct IXMLDOMDocument {
    struct IXMLDOMDocumentVtbl *lpVtbl;
  };
# 815 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMDocument_get_doctype_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentType **documentType);
  void IXMLDOMDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_implementation_Proxy(IXMLDOMDocument *This,IXMLDOMImplementation **impl);
  void IXMLDOMDocument_get_implementation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement **DOMElement);
  void IXMLDOMDocument_get_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_putref_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement *DOMElement);
  void IXMLDOMDocument_putref_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createElement_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMElement **element);
  void IXMLDOMDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createDocumentFragment_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentFragment **docFrag);
  void IXMLDOMDocument_createDocumentFragment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createTextNode_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMText **text);
  void IXMLDOMDocument_createTextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createComment_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMComment **comment);
  void IXMLDOMDocument_createComment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createCDATASection_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMCDATASection **cdata);
  void IXMLDOMDocument_createCDATASection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createProcessingInstruction_Proxy(IXMLDOMDocument *This,BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi);
  void IXMLDOMDocument_createProcessingInstruction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createAttribute_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMAttribute **attribute);
  void IXMLDOMDocument_createAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createEntityReference_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMEntityReference **entityRef);
  void IXMLDOMDocument_createEntityReference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_getElementsByTagName_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMNodeList **resultList);
  void IXMLDOMDocument_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_createNode_Proxy(IXMLDOMDocument *This,VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node);
  void IXMLDOMDocument_createNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_nodeFromID_Proxy(IXMLDOMDocument *This,BSTR idString,IXMLDOMNode **node);
  void IXMLDOMDocument_nodeFromID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_load_Proxy(IXMLDOMDocument *This,VARIANT xmlSource,VARIANT_BOOL *isSuccessful);
  void IXMLDOMDocument_load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_readyState_Proxy(IXMLDOMDocument *This,LONG *value);
  void IXMLDOMDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_parseError_Proxy(IXMLDOMDocument *This,IXMLDOMParseError **errorObj);
  void IXMLDOMDocument_get_parseError_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_url_Proxy(IXMLDOMDocument *This,BSTR *urlString);
  void IXMLDOMDocument_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isAsync);
  void IXMLDOMDocument_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isAsync);
  void IXMLDOMDocument_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_abort_Proxy(IXMLDOMDocument *This);
  void IXMLDOMDocument_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_loadXML_Proxy(IXMLDOMDocument *This,BSTR bstrXML,VARIANT_BOOL *isSuccessful);
  void IXMLDOMDocument_loadXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_save_Proxy(IXMLDOMDocument *This,VARIANT destination);
  void IXMLDOMDocument_save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isValidating);
  void IXMLDOMDocument_get_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isValidating);
  void IXMLDOMDocument_put_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isResolving);
  void IXMLDOMDocument_get_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isResolving);
  void IXMLDOMDocument_put_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_get_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isPreserving);
  void IXMLDOMDocument_get_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isPreserving);
  void IXMLDOMDocument_put_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_onreadystatechange_Proxy(IXMLDOMDocument *This,VARIANT readystatechangeSink);
  void IXMLDOMDocument_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_ondataavailable_Proxy(IXMLDOMDocument *This,VARIANT ondataavailableSink);
  void IXMLDOMDocument_put_ondataavailable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocument_put_ontransformnode_Proxy(IXMLDOMDocument *This,VARIANT ontransformnodeSink);
  void IXMLDOMDocument_put_ontransformnode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMNodeList_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMNodeList;
# 896 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMNodeListVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMNodeList *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMNodeList *This);
      ULONG ( *Release)(IXMLDOMNodeList *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMNodeList *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMNodeList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMNodeList *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMNodeList *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_item)(IXMLDOMNodeList *This,LONG index,IXMLDOMNode **listItem);
      HRESULT ( *get_length)(IXMLDOMNodeList *This,LONG *listLength);
      HRESULT ( *nextNode)(IXMLDOMNodeList *This,IXMLDOMNode **nextItem);
      HRESULT ( *reset)(IXMLDOMNodeList *This);
      HRESULT ( *get__newEnum)(IXMLDOMNodeList *This,IUnknown **ppUnk);
   
  } IXMLDOMNodeListVtbl;
  struct IXMLDOMNodeList {
    struct IXMLDOMNodeListVtbl *lpVtbl;
  };
# 930 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMNodeList_get_item_Proxy(IXMLDOMNodeList *This,LONG index,IXMLDOMNode **listItem);
  void IXMLDOMNodeList_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNodeList_get_length_Proxy(IXMLDOMNodeList *This,LONG *listLength);
  void IXMLDOMNodeList_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNodeList_nextNode_Proxy(IXMLDOMNodeList *This,IXMLDOMNode **nextItem);
  void IXMLDOMNodeList_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNodeList_reset_Proxy(IXMLDOMNodeList *This);
  void IXMLDOMNodeList_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNodeList_get__newEnum_Proxy(IXMLDOMNodeList *This,IUnknown **ppUnk);
  void IXMLDOMNodeList_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMNamedNodeMap_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMNamedNodeMap;
# 960 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMNamedNodeMapVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMNamedNodeMap *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMNamedNodeMap *This);
      ULONG ( *Release)(IXMLDOMNamedNodeMap *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMNamedNodeMap *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMNamedNodeMap *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMNamedNodeMap *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMNamedNodeMap *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *getNamedItem)(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
      HRESULT ( *setNamedItem)(IXMLDOMNamedNodeMap *This,IXMLDOMNode *newItem,IXMLDOMNode **nameItem);
      HRESULT ( *removeNamedItem)(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
      HRESULT ( *get_item)(IXMLDOMNamedNodeMap *This,LONG index,IXMLDOMNode **listItem);
      HRESULT ( *get_length)(IXMLDOMNamedNodeMap *This,LONG *listLength);
      HRESULT ( *getQualifiedItem)(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
      HRESULT ( *removeQualifiedItem)(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
      HRESULT ( *nextNode)(IXMLDOMNamedNodeMap *This,IXMLDOMNode **nextItem);
      HRESULT ( *reset)(IXMLDOMNamedNodeMap *This);
      HRESULT ( *get__newEnum)(IXMLDOMNamedNodeMap *This,IUnknown **ppUnk);
   
  } IXMLDOMNamedNodeMapVtbl;
  struct IXMLDOMNamedNodeMap {
    struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
  };
# 1004 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMNamedNodeMap_getNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
  void IXMLDOMNamedNodeMap_getNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_setNamedItem_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode *newItem,IXMLDOMNode **nameItem);
  void IXMLDOMNamedNodeMap_setNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_removeNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
  void IXMLDOMNamedNodeMap_removeNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_get_item_Proxy(IXMLDOMNamedNodeMap *This,LONG index,IXMLDOMNode **listItem);
  void IXMLDOMNamedNodeMap_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_get_length_Proxy(IXMLDOMNamedNodeMap *This,LONG *listLength);
  void IXMLDOMNamedNodeMap_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
  void IXMLDOMNamedNodeMap_getQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
  void IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_nextNode_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode **nextItem);
  void IXMLDOMNamedNodeMap_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_reset_Proxy(IXMLDOMNamedNodeMap *This);
  void IXMLDOMNamedNodeMap_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNamedNodeMap_get__newEnum_Proxy(IXMLDOMNamedNodeMap *This,IUnknown **ppUnk);
  void IXMLDOMNamedNodeMap_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMCharacterData_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMCharacterData;
# 1042 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMCharacterDataVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMCharacterData *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMCharacterData *This);
      ULONG ( *Release)(IXMLDOMCharacterData *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMCharacterData *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMCharacterData *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMCharacterData *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMCharacterData *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMCharacterData *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMCharacterData *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMCharacterData *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMCharacterData *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMCharacterData *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMCharacterData *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMCharacterData *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMCharacterData *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMCharacterData *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMCharacterData *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMCharacterData *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMCharacterData *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMCharacterData *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMCharacterData *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMCharacterData *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMCharacterData *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMCharacterData *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMCharacterData *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMCharacterData *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMCharacterData *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMCharacterData *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMCharacterData *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMCharacterData *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMCharacterData *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMCharacterData *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMCharacterData *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMCharacterData *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMCharacterData *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMCharacterData *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMCharacterData *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMCharacterData *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMCharacterData *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMCharacterData *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_data)(IXMLDOMCharacterData *This,BSTR *data);
      HRESULT ( *put_data)(IXMLDOMCharacterData *This,BSTR data);
      HRESULT ( *get_length)(IXMLDOMCharacterData *This,LONG *dataLength);
      HRESULT ( *substringData)(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR *data);
      HRESULT ( *appendData)(IXMLDOMCharacterData *This,BSTR data);
      HRESULT ( *insertData)(IXMLDOMCharacterData *This,LONG offset,BSTR data);
      HRESULT ( *deleteData)(IXMLDOMCharacterData *This,LONG offset,LONG count);
      HRESULT ( *replaceData)(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR data);
   
  } IXMLDOMCharacterDataVtbl;
  struct IXMLDOMCharacterData {
    struct IXMLDOMCharacterDataVtbl *lpVtbl;
  };
# 1154 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMCharacterData_get_data_Proxy(IXMLDOMCharacterData *This,BSTR *data);
  void IXMLDOMCharacterData_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_put_data_Proxy(IXMLDOMCharacterData *This,BSTR data);
  void IXMLDOMCharacterData_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_get_length_Proxy(IXMLDOMCharacterData *This,LONG *dataLength);
  void IXMLDOMCharacterData_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_substringData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR *data);
  void IXMLDOMCharacterData_substringData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_appendData_Proxy(IXMLDOMCharacterData *This,BSTR data);
  void IXMLDOMCharacterData_appendData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_insertData_Proxy(IXMLDOMCharacterData *This,LONG offset,BSTR data);
  void IXMLDOMCharacterData_insertData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_deleteData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count);
  void IXMLDOMCharacterData_deleteData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMCharacterData_replaceData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR data);
  void IXMLDOMCharacterData_replaceData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMAttribute_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMAttribute;
# 1183 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMAttributeVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMAttribute *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMAttribute *This);
      ULONG ( *Release)(IXMLDOMAttribute *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMAttribute *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMAttribute *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMAttribute *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMAttribute *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMAttribute *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMAttribute *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMAttribute *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMAttribute *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMAttribute *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMAttribute *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMAttribute *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMAttribute *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMAttribute *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMAttribute *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMAttribute *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMAttribute *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMAttribute *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMAttribute *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMAttribute *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMAttribute *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMAttribute *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMAttribute *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMAttribute *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMAttribute *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMAttribute *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMAttribute *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMAttribute *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMAttribute *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMAttribute *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMAttribute *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMAttribute *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMAttribute *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMAttribute *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMAttribute *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMAttribute *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMAttribute *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMAttribute *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_name)(IXMLDOMAttribute *This,BSTR *attributeName);
      HRESULT ( *get_value)(IXMLDOMAttribute *This,VARIANT *attributeValue);
      HRESULT ( *put_value)(IXMLDOMAttribute *This,VARIANT attributeValue);
   
  } IXMLDOMAttributeVtbl;
  struct IXMLDOMAttribute {
    struct IXMLDOMAttributeVtbl *lpVtbl;
  };
# 1285 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMAttribute_get_name_Proxy(IXMLDOMAttribute *This,BSTR *attributeName);
  void IXMLDOMAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMAttribute_get_value_Proxy(IXMLDOMAttribute *This,VARIANT *attributeValue);
  void IXMLDOMAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMAttribute_put_value_Proxy(IXMLDOMAttribute *This,VARIANT attributeValue);
  void IXMLDOMAttribute_put_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMElement_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMElement;
# 1310 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMElementVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMElement *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMElement *This);
      ULONG ( *Release)(IXMLDOMElement *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMElement *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMElement *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMElement *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMElement *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMElement *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMElement *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMElement *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMElement *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMElement *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMElement *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMElement *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMElement *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMElement *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMElement *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMElement *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMElement *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMElement *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMElement *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMElement *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMElement *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMElement *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMElement *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMElement *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMElement *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMElement *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMElement *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMElement *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMElement *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMElement *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMElement *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMElement *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMElement *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMElement *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMElement *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMElement *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMElement *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMElement *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMElement *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMElement *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMElement *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_tagName)(IXMLDOMElement *This,BSTR *tagName);
      HRESULT ( *getAttribute)(IXMLDOMElement *This,BSTR name,VARIANT *value);
      HRESULT ( *setAttribute)(IXMLDOMElement *This,BSTR name,VARIANT value);
      HRESULT ( *removeAttribute)(IXMLDOMElement *This,BSTR name);
      HRESULT ( *getAttributeNode)(IXMLDOMElement *This,BSTR name,IXMLDOMAttribute **attributeNode);
      HRESULT ( *setAttributeNode)(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
      HRESULT ( *removeAttributeNode)(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
      HRESULT ( *getElementsByTagName)(IXMLDOMElement *This,BSTR tagName,IXMLDOMNodeList **resultList);
      HRESULT ( *normalize)(IXMLDOMElement *This);
   
  } IXMLDOMElementVtbl;
  struct IXMLDOMElement {
    struct IXMLDOMElementVtbl *lpVtbl;
  };
# 1424 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMElement_get_tagName_Proxy(IXMLDOMElement *This,BSTR *tagName);
  void IXMLDOMElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_getAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT *value);
  void IXMLDOMElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_setAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT value);
  void IXMLDOMElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_removeAttribute_Proxy(IXMLDOMElement *This,BSTR name);
  void IXMLDOMElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_getAttributeNode_Proxy(IXMLDOMElement *This,BSTR name,IXMLDOMAttribute **attributeNode);
  void IXMLDOMElement_getAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_setAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
  void IXMLDOMElement_setAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_removeAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
  void IXMLDOMElement_removeAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_getElementsByTagName_Proxy(IXMLDOMElement *This,BSTR tagName,IXMLDOMNodeList **resultList);
  void IXMLDOMElement_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMElement_normalize_Proxy(IXMLDOMElement *This);
  void IXMLDOMElement_normalize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMText_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMText;






  typedef struct IXMLDOMTextVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMText *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMText *This);
      ULONG ( *Release)(IXMLDOMText *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMText *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMText *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMText *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMText *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMText *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMText *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMText *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMText *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMText *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMText *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMText *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMText *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMText *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMText *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMText *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMText *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMText *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMText *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMText *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMText *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMText *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMText *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMText *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMText *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMText *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMText *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMText *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMText *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMText *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMText *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMText *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMText *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMText *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMText *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMText *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMText *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMText *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMText *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMText *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMText *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_data)(IXMLDOMText *This,BSTR *data);
      HRESULT ( *put_data)(IXMLDOMText *This,BSTR data);
      HRESULT ( *get_length)(IXMLDOMText *This,LONG *dataLength);
      HRESULT ( *substringData)(IXMLDOMText *This,LONG offset,LONG count,BSTR *data);
      HRESULT ( *appendData)(IXMLDOMText *This,BSTR data);
      HRESULT ( *insertData)(IXMLDOMText *This,LONG offset,BSTR data);
      HRESULT ( *deleteData)(IXMLDOMText *This,LONG offset,LONG count);
      HRESULT ( *replaceData)(IXMLDOMText *This,LONG offset,LONG count,BSTR data);
      HRESULT ( *splitText)(IXMLDOMText *This,LONG offset,IXMLDOMText **rightHandTextNode);
   
  } IXMLDOMTextVtbl;
  struct IXMLDOMText {
    struct IXMLDOMTextVtbl *lpVtbl;
  };
# 1567 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMText_splitText_Proxy(IXMLDOMText *This,LONG offset,IXMLDOMText **rightHandTextNode);
  void IXMLDOMText_splitText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMComment_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMComment;




  typedef struct IXMLDOMCommentVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMComment *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMComment *This);
      ULONG ( *Release)(IXMLDOMComment *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMComment *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMComment *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMComment *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMComment *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMComment *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMComment *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMComment *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMComment *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMComment *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMComment *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMComment *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMComment *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMComment *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMComment *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMComment *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMComment *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMComment *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMComment *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMComment *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMComment *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMComment *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMComment *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMComment *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMComment *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMComment *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMComment *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMComment *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMComment *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMComment *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMComment *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMComment *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMComment *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMComment *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMComment *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMComment *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMComment *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMComment *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMComment *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMComment *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMComment *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_data)(IXMLDOMComment *This,BSTR *data);
      HRESULT ( *put_data)(IXMLDOMComment *This,BSTR data);
      HRESULT ( *get_length)(IXMLDOMComment *This,LONG *dataLength);
      HRESULT ( *substringData)(IXMLDOMComment *This,LONG offset,LONG count,BSTR *data);
      HRESULT ( *appendData)(IXMLDOMComment *This,BSTR data);
      HRESULT ( *insertData)(IXMLDOMComment *This,LONG offset,BSTR data);
      HRESULT ( *deleteData)(IXMLDOMComment *This,LONG offset,LONG count);
      HRESULT ( *replaceData)(IXMLDOMComment *This,LONG offset,LONG count,BSTR data);
   
  } IXMLDOMCommentVtbl;
  struct IXMLDOMComment {
    struct IXMLDOMCommentVtbl *lpVtbl;
  };
# 1693 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
#define __IXMLDOMProcessingInstruction_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMProcessingInstruction;
# 1703 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMProcessingInstructionVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMProcessingInstruction *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMProcessingInstruction *This);
      ULONG ( *Release)(IXMLDOMProcessingInstruction *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMProcessingInstruction *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMProcessingInstruction *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMProcessingInstruction *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMProcessingInstruction *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMProcessingInstruction *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMProcessingInstruction *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMProcessingInstruction *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMProcessingInstruction *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMProcessingInstruction *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMProcessingInstruction *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMProcessingInstruction *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMProcessingInstruction *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMProcessingInstruction *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMProcessingInstruction *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMProcessingInstruction *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMProcessingInstruction *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMProcessingInstruction *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMProcessingInstruction *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMProcessingInstruction *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMProcessingInstruction *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMProcessingInstruction *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMProcessingInstruction *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMProcessingInstruction *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMProcessingInstruction *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_target)(IXMLDOMProcessingInstruction *This,BSTR *name);
      HRESULT ( *get_data)(IXMLDOMProcessingInstruction *This,BSTR *value);
      HRESULT ( *put_data)(IXMLDOMProcessingInstruction *This,BSTR value);
   
  } IXMLDOMProcessingInstructionVtbl;
  struct IXMLDOMProcessingInstruction {
    struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
  };
# 1805 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMProcessingInstruction_get_target_Proxy(IXMLDOMProcessingInstruction *This,BSTR *name);
  void IXMLDOMProcessingInstruction_get_target_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMProcessingInstruction_get_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR *value);
  void IXMLDOMProcessingInstruction_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMProcessingInstruction_put_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR value);
  void IXMLDOMProcessingInstruction_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMCDATASection_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMCDATASection;




  typedef struct IXMLDOMCDATASectionVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMCDATASection *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMCDATASection *This);
      ULONG ( *Release)(IXMLDOMCDATASection *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMCDATASection *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMCDATASection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMCDATASection *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMCDATASection *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMCDATASection *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMCDATASection *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMCDATASection *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMCDATASection *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMCDATASection *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMCDATASection *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMCDATASection *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMCDATASection *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMCDATASection *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMCDATASection *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMCDATASection *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMCDATASection *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMCDATASection *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMCDATASection *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMCDATASection *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMCDATASection *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMCDATASection *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMCDATASection *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMCDATASection *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMCDATASection *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMCDATASection *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMCDATASection *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMCDATASection *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMCDATASection *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMCDATASection *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMCDATASection *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMCDATASection *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMCDATASection *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMCDATASection *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMCDATASection *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMCDATASection *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMCDATASection *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMCDATASection *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_data)(IXMLDOMCDATASection *This,BSTR *data);
      HRESULT ( *put_data)(IXMLDOMCDATASection *This,BSTR data);
      HRESULT ( *get_length)(IXMLDOMCDATASection *This,LONG *dataLength);
      HRESULT ( *substringData)(IXMLDOMCDATASection *This,LONG offset,LONG count,BSTR *data);
      HRESULT ( *appendData)(IXMLDOMCDATASection *This,BSTR data);
      HRESULT ( *insertData)(IXMLDOMCDATASection *This,LONG offset,BSTR data);
      HRESULT ( *deleteData)(IXMLDOMCDATASection *This,LONG offset,LONG count);
      HRESULT ( *replaceData)(IXMLDOMCDATASection *This,LONG offset,LONG count,BSTR data);
      HRESULT ( *splitText)(IXMLDOMCDATASection *This,LONG offset,IXMLDOMText **rightHandTextNode);
   
  } IXMLDOMCDATASectionVtbl;
  struct IXMLDOMCDATASection {
    struct IXMLDOMCDATASectionVtbl *lpVtbl;
  };
# 1937 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
#define __IXMLDOMDocumentType_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMDocumentType;
# 1947 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMDocumentTypeVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMDocumentType *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMDocumentType *This);
      ULONG ( *Release)(IXMLDOMDocumentType *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentType *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMDocumentType *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentType *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMDocumentType *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMDocumentType *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMDocumentType *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMDocumentType *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMDocumentType *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMDocumentType *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMDocumentType *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMDocumentType *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMDocumentType *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMDocumentType *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMDocumentType *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMDocumentType *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMDocumentType *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMDocumentType *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMDocumentType *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentType *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMDocumentType *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMDocumentType *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMDocumentType *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMDocumentType *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentType *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentType *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMDocumentType *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMDocumentType *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMDocumentType *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMDocumentType *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMDocumentType *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMDocumentType *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMDocumentType *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMDocumentType *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMDocumentType *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMDocumentType *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMDocumentType *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_name)(IXMLDOMDocumentType *This,BSTR *rootName);
      HRESULT ( *get_entities)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **entityMap);
      HRESULT ( *get_notations)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **notationMap);
   
  } IXMLDOMDocumentTypeVtbl;
  struct IXMLDOMDocumentType {
    struct IXMLDOMDocumentTypeVtbl *lpVtbl;
  };
# 2049 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMDocumentType_get_name_Proxy(IXMLDOMDocumentType *This,BSTR *rootName);
  void IXMLDOMDocumentType_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocumentType_get_entities_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **entityMap);
  void IXMLDOMDocumentType_get_entities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMDocumentType_get_notations_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **notationMap);
  void IXMLDOMDocumentType_get_notations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMNotation_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMNotation;







  typedef struct IXMLDOMNotationVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMNotation *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMNotation *This);
      ULONG ( *Release)(IXMLDOMNotation *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMNotation *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMNotation *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMNotation *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMNotation *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMNotation *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMNotation *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMNotation *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMNotation *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMNotation *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMNotation *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMNotation *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMNotation *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMNotation *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMNotation *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMNotation *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMNotation *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMNotation *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMNotation *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMNotation *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMNotation *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMNotation *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMNotation *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMNotation *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMNotation *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMNotation *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMNotation *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMNotation *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMNotation *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMNotation *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMNotation *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMNotation *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMNotation *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMNotation *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMNotation *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMNotation *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMNotation *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMNotation *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMNotation *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMNotation *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMNotation *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_publicId)(IXMLDOMNotation *This,VARIANT *publicID);
      HRESULT ( *get_systemId)(IXMLDOMNotation *This,VARIANT *systemID);
   
  } IXMLDOMNotationVtbl;
  struct IXMLDOMNotation {
    struct IXMLDOMNotationVtbl *lpVtbl;
  };
# 2167 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMNotation_get_publicId_Proxy(IXMLDOMNotation *This,VARIANT *publicID);
  void IXMLDOMNotation_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMNotation_get_systemId_Proxy(IXMLDOMNotation *This,VARIANT *systemID);
  void IXMLDOMNotation_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMEntity_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMEntity;
# 2184 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMEntityVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMEntity *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMEntity *This);
      ULONG ( *Release)(IXMLDOMEntity *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMEntity *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMEntity *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMEntity *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMEntity *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMEntity *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMEntity *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMEntity *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMEntity *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMEntity *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMEntity *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMEntity *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMEntity *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMEntity *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMEntity *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMEntity *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMEntity *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMEntity *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMEntity *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMEntity *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMEntity *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMEntity *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMEntity *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMEntity *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMEntity *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMEntity *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMEntity *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMEntity *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMEntity *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMEntity *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMEntity *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMEntity *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMEntity *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMEntity *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMEntity *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMEntity *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMEntity *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMEntity *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMEntity *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMEntity *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMEntity *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *get_publicId)(IXMLDOMEntity *This,VARIANT *publicID);
      HRESULT ( *get_systemId)(IXMLDOMEntity *This,VARIANT *systemID);
      HRESULT ( *get_notationName)(IXMLDOMEntity *This,BSTR *name);
   
  } IXMLDOMEntityVtbl;
  struct IXMLDOMEntity {
    struct IXMLDOMEntityVtbl *lpVtbl;
  };
# 2286 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMEntity_get_publicId_Proxy(IXMLDOMEntity *This,VARIANT *publicID);
  void IXMLDOMEntity_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMEntity_get_systemId_Proxy(IXMLDOMEntity *This,VARIANT *systemID);
  void IXMLDOMEntity_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMEntity_get_notationName_Proxy(IXMLDOMEntity *This,BSTR *name);
  void IXMLDOMEntity_get_notationName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDOMEntityReference_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMEntityReference;




  typedef struct IXMLDOMEntityReferenceVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMEntityReference *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMEntityReference *This);
      ULONG ( *Release)(IXMLDOMEntityReference *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMEntityReference *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMEntityReference *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMEntityReference *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMEntityReference *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXMLDOMEntityReference *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXMLDOMEntityReference *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXMLDOMEntityReference *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXMLDOMEntityReference *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXMLDOMEntityReference *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXMLDOMEntityReference *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXMLDOMEntityReference *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXMLDOMEntityReference *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXMLDOMEntityReference *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXMLDOMEntityReference *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXMLDOMEntityReference *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXMLDOMEntityReference *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXMLDOMEntityReference *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXMLDOMEntityReference *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXMLDOMEntityReference *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXMLDOMEntityReference *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXMLDOMEntityReference *This,BSTR *text);
      HRESULT ( *put_text)(IXMLDOMEntityReference *This,BSTR text);
      HRESULT ( *get_specified)(IXMLDOMEntityReference *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXMLDOMEntityReference *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXMLDOMEntityReference *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXMLDOMEntityReference *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXMLDOMEntityReference *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXMLDOMEntityReference *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXMLDOMEntityReference *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXMLDOMEntityReference *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXMLDOMEntityReference *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXMLDOMEntityReference *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXMLDOMEntityReference *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXMLDOMEntityReference *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXMLDOMEntityReference *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXMLDOMEntityReference *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXMLDOMEntityReference *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
   
  } IXMLDOMEntityReferenceVtbl;
  struct IXMLDOMEntityReference {
    struct IXMLDOMEntityReferenceVtbl *lpVtbl;
  };
# 2400 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
#define __IXMLDOMParseError_INTERFACE_DEFINED__
  extern const IID IID_IXMLDOMParseError;
# 2414 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDOMParseErrorVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDOMParseError *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDOMParseError *This);
      ULONG ( *Release)(IXMLDOMParseError *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDOMParseError *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDOMParseError *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDOMParseError *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDOMParseError *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_errorCode)(IXMLDOMParseError *This,LONG *errorCode);
      HRESULT ( *get_url)(IXMLDOMParseError *This,BSTR *urlString);
      HRESULT ( *get_reason)(IXMLDOMParseError *This,BSTR *reasonString);
      HRESULT ( *get_srcText)(IXMLDOMParseError *This,BSTR *sourceString);
      HRESULT ( *get_line)(IXMLDOMParseError *This,LONG *lineNumber);
      HRESULT ( *get_linepos)(IXMLDOMParseError *This,LONG *linePosition);
      HRESULT ( *get_filepos)(IXMLDOMParseError *This,LONG *filePosition);
   
  } IXMLDOMParseErrorVtbl;
  struct IXMLDOMParseError {
    struct IXMLDOMParseErrorVtbl *lpVtbl;
  };
# 2452 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDOMParseError_get_errorCode_Proxy(IXMLDOMParseError *This,LONG *errorCode);
  void IXMLDOMParseError_get_errorCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_url_Proxy(IXMLDOMParseError *This,BSTR *urlString);
  void IXMLDOMParseError_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_reason_Proxy(IXMLDOMParseError *This,BSTR *reasonString);
  void IXMLDOMParseError_get_reason_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_srcText_Proxy(IXMLDOMParseError *This,BSTR *sourceString);
  void IXMLDOMParseError_get_srcText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_line_Proxy(IXMLDOMParseError *This,LONG *lineNumber);
  void IXMLDOMParseError_get_line_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_linepos_Proxy(IXMLDOMParseError *This,LONG *linePosition);
  void IXMLDOMParseError_get_linepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDOMParseError_get_filepos_Proxy(IXMLDOMParseError *This,LONG *filePosition);
  void IXMLDOMParseError_get_filepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXTLRuntime_INTERFACE_DEFINED__
  extern const IID IID_IXTLRuntime;
# 2485 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXTLRuntimeVtbl {
   
      HRESULT ( *QueryInterface)(IXTLRuntime *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXTLRuntime *This);
      ULONG ( *Release)(IXTLRuntime *This);
      HRESULT ( *GetTypeInfoCount)(IXTLRuntime *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXTLRuntime *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXTLRuntime *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXTLRuntime *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_nodeName)(IXTLRuntime *This,BSTR *name);
      HRESULT ( *get_nodeValue)(IXTLRuntime *This,VARIANT *value);
      HRESULT ( *put_nodeValue)(IXTLRuntime *This,VARIANT value);
      HRESULT ( *get_nodeType)(IXTLRuntime *This,DOMNodeType *type);
      HRESULT ( *get_parentNode)(IXTLRuntime *This,IXMLDOMNode **parent);
      HRESULT ( *get_childNodes)(IXTLRuntime *This,IXMLDOMNodeList **childList);
      HRESULT ( *get_firstChild)(IXTLRuntime *This,IXMLDOMNode **firstChild);
      HRESULT ( *get_lastChild)(IXTLRuntime *This,IXMLDOMNode **lastChild);
      HRESULT ( *get_previousSibling)(IXTLRuntime *This,IXMLDOMNode **previousSibling);
      HRESULT ( *get_nextSibling)(IXTLRuntime *This,IXMLDOMNode **nextSibling);
      HRESULT ( *get_attributes)(IXTLRuntime *This,IXMLDOMNamedNodeMap **attributeMap);
      HRESULT ( *insertBefore)(IXTLRuntime *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
      HRESULT ( *replaceChild)(IXTLRuntime *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
      HRESULT ( *removeChild)(IXTLRuntime *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
      HRESULT ( *appendChild)(IXTLRuntime *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
      HRESULT ( *hasChildNodes)(IXTLRuntime *This,VARIANT_BOOL *hasChild);
      HRESULT ( *get_ownerDocument)(IXTLRuntime *This,IXMLDOMDocument **DOMDocument);
      HRESULT ( *cloneNode)(IXTLRuntime *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
      HRESULT ( *get_nodeTypeString)(IXTLRuntime *This,BSTR *nodeType);
      HRESULT ( *get_text)(IXTLRuntime *This,BSTR *text);
      HRESULT ( *put_text)(IXTLRuntime *This,BSTR text);
      HRESULT ( *get_specified)(IXTLRuntime *This,VARIANT_BOOL *isSpecified);
      HRESULT ( *get_definition)(IXTLRuntime *This,IXMLDOMNode **definitionNode);
      HRESULT ( *get_nodeTypedValue)(IXTLRuntime *This,VARIANT *typedValue);
      HRESULT ( *put_nodeTypedValue)(IXTLRuntime *This,VARIANT typedValue);
      HRESULT ( *get_dataType)(IXTLRuntime *This,VARIANT *dataTypeName);
      HRESULT ( *put_dataType)(IXTLRuntime *This,BSTR dataTypeName);
      HRESULT ( *get_xml)(IXTLRuntime *This,BSTR *xmlString);
      HRESULT ( *transformNode)(IXTLRuntime *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
      HRESULT ( *selectNodes)(IXTLRuntime *This,BSTR queryString,IXMLDOMNodeList **resultList);
      HRESULT ( *selectSingleNode)(IXTLRuntime *This,BSTR queryString,IXMLDOMNode **resultNode);
      HRESULT ( *get_parsed)(IXTLRuntime *This,VARIANT_BOOL *isParsed);
      HRESULT ( *get_namespaceURI)(IXTLRuntime *This,BSTR *namespaceURI);
      HRESULT ( *get_prefix)(IXTLRuntime *This,BSTR *prefixString);
      HRESULT ( *get_baseName)(IXTLRuntime *This,BSTR *nameString);
      HRESULT ( *transformNodeToObject)(IXTLRuntime *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
      HRESULT ( *uniqueID)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pID);
      HRESULT ( *depth)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pDepth);
      HRESULT ( *childNumber)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
      HRESULT ( *ancestorChildNumber)(IXTLRuntime *This,BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber);
      HRESULT ( *absoluteChildNumber)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
      HRESULT ( *formatIndex)(IXTLRuntime *This,LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString);
      HRESULT ( *formatNumber)(IXTLRuntime *This,double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString);
      HRESULT ( *formatDate)(IXTLRuntime *This,VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
      HRESULT ( *formatTime)(IXTLRuntime *This,VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
   
  } IXTLRuntimeVtbl;
  struct IXTLRuntime {
    struct IXTLRuntimeVtbl *lpVtbl;
  };
# 2599 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXTLRuntime_uniqueID_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pID);
  void IXTLRuntime_uniqueID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_depth_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pDepth);
  void IXTLRuntime_depth_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_childNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
  void IXTLRuntime_childNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_ancestorChildNumber_Proxy(IXTLRuntime *This,BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber);
  void IXTLRuntime_ancestorChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_absoluteChildNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
  void IXTLRuntime_absoluteChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_formatIndex_Proxy(IXTLRuntime *This,LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString);
  void IXTLRuntime_formatIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_formatNumber_Proxy(IXTLRuntime *This,double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString);
  void IXTLRuntime_formatNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_formatDate_Proxy(IXTLRuntime *This,VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
  void IXTLRuntime_formatDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXTLRuntime_formatTime_Proxy(IXTLRuntime *This,VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
  void IXTLRuntime_formatTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __XMLDOMDocumentEvents_DISPINTERFACE_DEFINED__
  extern const IID DIID_XMLDOMDocumentEvents;




  typedef struct XMLDOMDocumentEventsVtbl {
   
      HRESULT ( *QueryInterface)(XMLDOMDocumentEvents *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(XMLDOMDocumentEvents *This);
      ULONG ( *Release)(XMLDOMDocumentEvents *This);
      HRESULT ( *GetTypeInfoCount)(XMLDOMDocumentEvents *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(XMLDOMDocumentEvents *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(XMLDOMDocumentEvents *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(XMLDOMDocumentEvents *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
   
  } XMLDOMDocumentEventsVtbl;
  struct XMLDOMDocumentEvents {
    struct XMLDOMDocumentEventsVtbl *lpVtbl;
  };
# 2652 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  extern const CLSID CLSID_DOMDocument;



  extern const CLSID CLSID_DOMFreeThreadedDocument;





#define __IXMLHttpRequest_INTERFACE_DEFINED__
  extern const IID IID_IXMLHttpRequest;
# 2683 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLHttpRequestVtbl {
   
      HRESULT ( *QueryInterface)(IXMLHttpRequest *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLHttpRequest *This);
      ULONG ( *Release)(IXMLHttpRequest *This);
      HRESULT ( *GetTypeInfoCount)(IXMLHttpRequest *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLHttpRequest *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLHttpRequest *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLHttpRequest *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *open)(IXMLHttpRequest *This,BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword);
      HRESULT ( *setRequestHeader)(IXMLHttpRequest *This,BSTR bstrHeader,BSTR bstrValue);
      HRESULT ( *getResponseHeader)(IXMLHttpRequest *This,BSTR bstrHeader,BSTR *pbstrValue);
      HRESULT ( *getAllResponseHeaders)(IXMLHttpRequest *This,BSTR *pbstrHeaders);
      HRESULT ( *send)(IXMLHttpRequest *This,VARIANT varBody);
      HRESULT ( *abort)(IXMLHttpRequest *This);
      HRESULT ( *get_status)(IXMLHttpRequest *This,LONG *plStatus);
      HRESULT ( *get_statusText)(IXMLHttpRequest *This,BSTR *pbstrStatus);
      HRESULT ( *get_responseXML)(IXMLHttpRequest *This,IDispatch **ppBody);
      HRESULT ( *get_responseText)(IXMLHttpRequest *This,BSTR *pbstrBody);
      HRESULT ( *get_responseBody)(IXMLHttpRequest *This,VARIANT *pvarBody);
      HRESULT ( *get_responseStream)(IXMLHttpRequest *This,VARIANT *pvarBody);
      HRESULT ( *get_readyState)(IXMLHttpRequest *This,LONG *plState);
      HRESULT ( *put_onreadystatechange)(IXMLHttpRequest *This,IDispatch *pReadyStateSink);
   
  } IXMLHttpRequestVtbl;
  struct IXMLHttpRequest {
    struct IXMLHttpRequestVtbl *lpVtbl;
  };
# 2735 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLHttpRequest_open_Proxy(IXMLHttpRequest *This,BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword);
  void IXMLHttpRequest_open_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_setRequestHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR bstrValue);
  void IXMLHttpRequest_setRequestHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_getResponseHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR *pbstrValue);
  void IXMLHttpRequest_getResponseHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_getAllResponseHeaders_Proxy(IXMLHttpRequest *This,BSTR *pbstrHeaders);
  void IXMLHttpRequest_getAllResponseHeaders_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_send_Proxy(IXMLHttpRequest *This,VARIANT varBody);
  void IXMLHttpRequest_send_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_abort_Proxy(IXMLHttpRequest *This);
  void IXMLHttpRequest_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_status_Proxy(IXMLHttpRequest *This,LONG *plStatus);
  void IXMLHttpRequest_get_status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_statusText_Proxy(IXMLHttpRequest *This,BSTR *pbstrStatus);
  void IXMLHttpRequest_get_statusText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_responseXML_Proxy(IXMLHttpRequest *This,IDispatch **ppBody);
  void IXMLHttpRequest_get_responseXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_responseText_Proxy(IXMLHttpRequest *This,BSTR *pbstrBody);
  void IXMLHttpRequest_get_responseText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_responseBody_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
  void IXMLHttpRequest_get_responseBody_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_responseStream_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
  void IXMLHttpRequest_get_responseStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_get_readyState_Proxy(IXMLHttpRequest *This,LONG *plState);
  void IXMLHttpRequest_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLHttpRequest_put_onreadystatechange_Proxy(IXMLHttpRequest *This,IDispatch *pReadyStateSink);
  void IXMLHttpRequest_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern const CLSID CLSID_XMLHTTPRequest;





#define __IXMLDSOControl_INTERFACE_DEFINED__
  extern const IID IID_IXMLDSOControl;
# 2783 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDSOControlVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDSOControl *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDSOControl *This);
      ULONG ( *Release)(IXMLDSOControl *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDSOControl *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDSOControl *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDSOControl *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDSOControl *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_XMLDocument)(IXMLDSOControl *This,IXMLDOMDocument **ppDoc);
      HRESULT ( *put_XMLDocument)(IXMLDSOControl *This,IXMLDOMDocument *ppDoc);
      HRESULT ( *get_JavaDSOCompatible)(IXMLDSOControl *This,WINBOOL *fJavaDSOCompatible);
      HRESULT ( *put_JavaDSOCompatible)(IXMLDSOControl *This,WINBOOL fJavaDSOCompatible);
      HRESULT ( *get_readyState)(IXMLDSOControl *This,LONG *state);
   
  } IXMLDSOControlVtbl;
  struct IXMLDSOControl {
    struct IXMLDSOControlVtbl *lpVtbl;
  };
# 2817 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDSOControl_get_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument **ppDoc);
  void IXMLDSOControl_get_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDSOControl_put_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument *ppDoc);
  void IXMLDSOControl_put_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDSOControl_get_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL *fJavaDSOCompatible);
  void IXMLDSOControl_get_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDSOControl_put_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL fJavaDSOCompatible);
  void IXMLDSOControl_put_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDSOControl_get_readyState_Proxy(IXMLDSOControl *This,LONG *state);
  void IXMLDSOControl_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern const CLSID CLSID_XMLDSOControl;





#define __IXMLElementCollection_INTERFACE_DEFINED__
  extern const IID IID_IXMLElementCollection;
# 2846 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLElementCollectionVtbl {
   
      HRESULT ( *QueryInterface)(IXMLElementCollection *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLElementCollection *This);
      ULONG ( *Release)(IXMLElementCollection *This);
      HRESULT ( *GetTypeInfoCount)(IXMLElementCollection *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLElementCollection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLElementCollection *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLElementCollection *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *put_length)(IXMLElementCollection *This,LONG v);
      HRESULT ( *get_length)(IXMLElementCollection *This,LONG *p);
      HRESULT ( *get__newEnum)(IXMLElementCollection *This,IUnknown **ppUnk);
      HRESULT ( *item)(IXMLElementCollection *This,VARIANT var1,VARIANT var2,IDispatch **ppDisp);
   
  } IXMLElementCollectionVtbl;
  struct IXMLElementCollection {
    struct IXMLElementCollectionVtbl *lpVtbl;
  };
# 2878 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLElementCollection_put_length_Proxy(IXMLElementCollection *This,LONG v);
  void IXMLElementCollection_put_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElementCollection_get_length_Proxy(IXMLElementCollection *This,LONG *p);
  void IXMLElementCollection_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElementCollection_get__newEnum_Proxy(IXMLElementCollection *This,IUnknown **ppUnk);
  void IXMLElementCollection_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElementCollection_item_Proxy(IXMLElementCollection *This,VARIANT var1,VARIANT var2,IDispatch **ppDisp);
  void IXMLElementCollection_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDocument_INTERFACE_DEFINED__
  extern const IID IID_IXMLDocument;
# 2910 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDocumentVtbl {
   
      HRESULT ( *QueryInterface)(IXMLDocument *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDocument *This);
      ULONG ( *Release)(IXMLDocument *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDocument *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDocument *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDocument *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDocument *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_root)(IXMLDocument *This,IXMLElement **p);
      HRESULT ( *get_fileSize)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_fileModifiedDate)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_fileUpdatedDate)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_URL)(IXMLDocument *This,BSTR *p);
      HRESULT ( *put_URL)(IXMLDocument *This,BSTR p);
      HRESULT ( *get_mimeType)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_readyState)(IXMLDocument *This,LONG *pl);
      HRESULT ( *get_charset)(IXMLDocument *This,BSTR *p);
      HRESULT ( *put_charset)(IXMLDocument *This,BSTR p);
      HRESULT ( *get_version)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_doctype)(IXMLDocument *This,BSTR *p);
      HRESULT ( *get_dtdURL)(IXMLDocument *This,BSTR *p);
      HRESULT ( *createElement)(IXMLDocument *This,VARIANT vType,VARIANT var1,IXMLElement **ppElem);
   
  } IXMLDocumentVtbl;
  struct IXMLDocument {
    struct IXMLDocumentVtbl *lpVtbl;
  };
# 2962 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDocument_get_root_Proxy(IXMLDocument *This,IXMLElement **p);
  void IXMLDocument_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_fileSize_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_fileModifiedDate_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_fileUpdatedDate_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_URL_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_put_URL_Proxy(IXMLDocument *This,BSTR p);
  void IXMLDocument_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_mimeType_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_readyState_Proxy(IXMLDocument *This,LONG *pl);
  void IXMLDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_charset_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_put_charset_Proxy(IXMLDocument *This,BSTR p);
  void IXMLDocument_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_version_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_doctype_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_get_dtdURL_Proxy(IXMLDocument *This,BSTR *p);
  void IXMLDocument_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument_createElement_Proxy(IXMLDocument *This,VARIANT vType,VARIANT var1,IXMLElement **ppElem);
  void IXMLDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLDocument2_INTERFACE_DEFINED__
  extern const IID IID_IXMLDocument2;
# 3016 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLDocument2Vtbl {
   
      HRESULT ( *QueryInterface)(IXMLDocument2 *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLDocument2 *This);
      ULONG ( *Release)(IXMLDocument2 *This);
      HRESULT ( *GetTypeInfoCount)(IXMLDocument2 *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLDocument2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLDocument2 *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLDocument2 *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_root)(IXMLDocument2 *This,IXMLElement2 **p);
      HRESULT ( *get_fileSize)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_fileModifiedDate)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_fileUpdatedDate)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_URL)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *put_URL)(IXMLDocument2 *This,BSTR p);
      HRESULT ( *get_mimeType)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_readyState)(IXMLDocument2 *This,LONG *pl);
      HRESULT ( *get_charset)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *put_charset)(IXMLDocument2 *This,BSTR p);
      HRESULT ( *get_version)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_doctype)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *get_dtdURL)(IXMLDocument2 *This,BSTR *p);
      HRESULT ( *createElement)(IXMLDocument2 *This,VARIANT vType,VARIANT var1,IXMLElement2 **ppElem);
      HRESULT ( *get_async)(IXMLDocument2 *This,VARIANT_BOOL *pf);
      HRESULT ( *put_async)(IXMLDocument2 *This,VARIANT_BOOL f);
   
  } IXMLDocument2Vtbl;
  struct IXMLDocument2 {
    struct IXMLDocument2Vtbl *lpVtbl;
  };
# 3072 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLDocument2_get_root_Proxy(IXMLDocument2 *This,IXMLElement2 **p);
  void IXMLDocument2_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_fileSize_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_fileModifiedDate_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_fileUpdatedDate_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_URL_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_put_URL_Proxy(IXMLDocument2 *This,BSTR p);
  void IXMLDocument2_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_mimeType_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_readyState_Proxy(IXMLDocument2 *This,LONG *pl);
  void IXMLDocument2_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_charset_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_put_charset_Proxy(IXMLDocument2 *This,BSTR p);
  void IXMLDocument2_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_version_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_doctype_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_dtdURL_Proxy(IXMLDocument2 *This,BSTR *p);
  void IXMLDocument2_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_createElement_Proxy(IXMLDocument2 *This,VARIANT vType,VARIANT var1,IXMLElement2 **ppElem);
  void IXMLDocument2_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_get_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL *pf);
  void IXMLDocument2_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLDocument2_put_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL f);
  void IXMLDocument2_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLElement_INTERFACE_DEFINED__
  extern const IID IID_IXMLElement;
# 3126 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLElementVtbl {
   
      HRESULT ( *QueryInterface)(IXMLElement *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLElement *This);
      ULONG ( *Release)(IXMLElement *This);
      HRESULT ( *GetTypeInfoCount)(IXMLElement *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLElement *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLElement *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLElement *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_tagName)(IXMLElement *This,BSTR *p);
      HRESULT ( *put_tagName)(IXMLElement *This,BSTR p);
      HRESULT ( *get_parent)(IXMLElement *This,IXMLElement **ppParent);
      HRESULT ( *setAttribute)(IXMLElement *This,BSTR strPropertyName,VARIANT PropertyValue);
      HRESULT ( *getAttribute)(IXMLElement *This,BSTR strPropertyName,VARIANT *PropertyValue);
      HRESULT ( *removeAttribute)(IXMLElement *This,BSTR strPropertyName);
      HRESULT ( *get_children)(IXMLElement *This,IXMLElementCollection **pp);
      HRESULT ( *get_type)(IXMLElement *This,LONG *plType);
      HRESULT ( *get_text)(IXMLElement *This,BSTR *p);
      HRESULT ( *put_text)(IXMLElement *This,BSTR p);
      HRESULT ( *addChild)(IXMLElement *This,IXMLElement *pChildElem,LONG lIndex,LONG lReserved);
      HRESULT ( *removeChild)(IXMLElement *This,IXMLElement *pChildElem);
   
  } IXMLElementVtbl;
  struct IXMLElement {
    struct IXMLElementVtbl *lpVtbl;
  };
# 3174 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLElement_get_tagName_Proxy(IXMLElement *This,BSTR *p);
  void IXMLElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_put_tagName_Proxy(IXMLElement *This,BSTR p);
  void IXMLElement_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_get_parent_Proxy(IXMLElement *This,IXMLElement **ppParent);
  void IXMLElement_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_setAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT PropertyValue);
  void IXMLElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_getAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT *PropertyValue);
  void IXMLElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_removeAttribute_Proxy(IXMLElement *This,BSTR strPropertyName);
  void IXMLElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_get_children_Proxy(IXMLElement *This,IXMLElementCollection **pp);
  void IXMLElement_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_get_type_Proxy(IXMLElement *This,LONG *plType);
  void IXMLElement_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_get_text_Proxy(IXMLElement *This,BSTR *p);
  void IXMLElement_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_put_text_Proxy(IXMLElement *This,BSTR p);
  void IXMLElement_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_addChild_Proxy(IXMLElement *This,IXMLElement *pChildElem,LONG lIndex,LONG lReserved);
  void IXMLElement_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement_removeChild_Proxy(IXMLElement *This,IXMLElement *pChildElem);
  void IXMLElement_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLElement2_INTERFACE_DEFINED__
  extern const IID IID_IXMLElement2;
# 3221 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  typedef struct IXMLElement2Vtbl {
   
      HRESULT ( *QueryInterface)(IXMLElement2 *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLElement2 *This);
      ULONG ( *Release)(IXMLElement2 *This);
      HRESULT ( *GetTypeInfoCount)(IXMLElement2 *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLElement2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLElement2 *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLElement2 *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_tagName)(IXMLElement2 *This,BSTR *p);
      HRESULT ( *put_tagName)(IXMLElement2 *This,BSTR p);
      HRESULT ( *get_parent)(IXMLElement2 *This,IXMLElement2 **ppParent);
      HRESULT ( *setAttribute)(IXMLElement2 *This,BSTR strPropertyName,VARIANT PropertyValue);
      HRESULT ( *getAttribute)(IXMLElement2 *This,BSTR strPropertyName,VARIANT *PropertyValue);
      HRESULT ( *removeAttribute)(IXMLElement2 *This,BSTR strPropertyName);
      HRESULT ( *get_children)(IXMLElement2 *This,IXMLElementCollection **pp);
      HRESULT ( *get_type)(IXMLElement2 *This,LONG *plType);
      HRESULT ( *get_text)(IXMLElement2 *This,BSTR *p);
      HRESULT ( *put_text)(IXMLElement2 *This,BSTR p);
      HRESULT ( *addChild)(IXMLElement2 *This,IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved);
      HRESULT ( *removeChild)(IXMLElement2 *This,IXMLElement2 *pChildElem);
      HRESULT ( *get_attributes)(IXMLElement2 *This,IXMLElementCollection **pp);
   
  } IXMLElement2Vtbl;
  struct IXMLElement2 {
    struct IXMLElement2Vtbl *lpVtbl;
  };
# 3271 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLElement2_get_tagName_Proxy(IXMLElement2 *This,BSTR *p);
  void IXMLElement2_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_put_tagName_Proxy(IXMLElement2 *This,BSTR p);
  void IXMLElement2_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_get_parent_Proxy(IXMLElement2 *This,IXMLElement2 **ppParent);
  void IXMLElement2_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_setAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT PropertyValue);
  void IXMLElement2_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_getAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT *PropertyValue);
  void IXMLElement2_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_removeAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName);
  void IXMLElement2_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_get_children_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
  void IXMLElement2_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_get_type_Proxy(IXMLElement2 *This,LONG *plType);
  void IXMLElement2_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_get_text_Proxy(IXMLElement2 *This,BSTR *p);
  void IXMLElement2_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_put_text_Proxy(IXMLElement2 *This,BSTR p);
  void IXMLElement2_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_addChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved);
  void IXMLElement2_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_removeChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem);
  void IXMLElement2_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLElement2_get_attributes_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
  void IXMLElement2_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLAttribute_INTERFACE_DEFINED__
  extern const IID IID_IXMLAttribute;







  typedef struct IXMLAttributeVtbl {
   
      HRESULT ( *QueryInterface)(IXMLAttribute *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLAttribute *This);
      ULONG ( *Release)(IXMLAttribute *This);
      HRESULT ( *GetTypeInfoCount)(IXMLAttribute *This,UINT *pctinfo);
      HRESULT ( *GetTypeInfo)(IXMLAttribute *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT ( *GetIDsOfNames)(IXMLAttribute *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT ( *Invoke)(IXMLAttribute *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT ( *get_name)(IXMLAttribute *This,BSTR *n);
      HRESULT ( *get_value)(IXMLAttribute *This,BSTR *v);
   
  } IXMLAttributeVtbl;
  struct IXMLAttribute {
    struct IXMLAttributeVtbl *lpVtbl;
  };
# 3337 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/msxml.h" 3
  HRESULT IXMLAttribute_get_name_Proxy(IXMLAttribute *This,BSTR *n);
  void IXMLAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT IXMLAttribute_get_value_Proxy(IXMLAttribute *This,BSTR *v);
  void IXMLAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);



#define __IXMLError_INTERFACE_DEFINED__
  extern const IID IID_IXMLError;






  typedef struct IXMLErrorVtbl {
   
      HRESULT ( *QueryInterface)(IXMLError *This,const IID *const riid,void **ppvObject);
      ULONG ( *AddRef)(IXMLError *This);
      ULONG ( *Release)(IXMLError *This);
      HRESULT ( *GetErrorInfo)(IXMLError *This,XML_ERROR *pErrorReturn);
   
  } IXMLErrorVtbl;
  struct IXMLError {
    struct IXMLErrorVtbl *lpVtbl;
  };







  HRESULT IXMLError_GetErrorInfo_Proxy(IXMLError *This,XML_ERROR *pErrorReturn);
  void IXMLError_GetErrorInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern const CLSID CLSID_XMLDocument;




       
# 291 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 2 3
# 301 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#pragma comment(lib,"uuid.lib")
# 334 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define __IBindStatusCallbackMsg_FWD_DEFINED__
typedef struct IBindStatusCallbackMsg IBindStatusCallbackMsg;
# 384 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
extern const IID CLSID_SBS_StdURLMoniker;
extern const IID CLSID_SBS_HttpProtocol;
extern const IID CLSID_SBS_FtpProtocol;
extern const IID CLSID_SBS_GopherProtocol;
extern const IID CLSID_SBS_HttpSProtocol;
extern const IID CLSID_SBS_FileProtocol;
extern const IID CLSID_SBS_MkProtocol;
extern const IID CLSID_SBS_UrlMkBindCtx;
extern const IID CLSID_SBS_SoftDistExt;
extern const IID CLSID_SBS_CdlProtocol;
extern const IID CLSID_SBS_ClassInstallFilter;
extern const IID CLSID_SBS_InternetSecurityManager;
extern const IID CLSID_SBS_InternetZoneManager;

#define BINDF_DONTUSECACHE
#define BINDF_DONTPUTINCACHE
#define BINDF_NOCOPYDATA
#define INVALID_P_ROOT_SECURITY_ID

#define PI_DOCFILECLSIDLOOKUP

extern const IID IID_IAsyncMoniker;
extern const IID CLSID_StdURLMoniker;
extern const IID CLSID_HttpProtocol;
extern const IID CLSID_FtpProtocol;
extern const IID CLSID_GopherProtocol;
extern const IID CLSID_HttpSProtocol;
extern const IID CLSID_FileProtocol;
extern const IID CLSID_MkProtocol;
extern const IID CLSID_StdURLProtocol;
extern const IID CLSID_UrlMkBindCtx;
extern const IID CLSID_CdlProtocol;
extern const IID CLSID_ClassInstallFilter;
extern const IID IID_IAsyncBindCtx;

#define SZ_URLCONTEXT
#define SZ_ASYNC_CALLEE

#define MKSYS_URLMONIKER
#define URL_MK_LEGACY
#define URL_MK_UNIFORM
#define URL_MK_NO_CANONICALIZE

extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk);
extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags);
extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID);
extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC);



extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved);
extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk);
extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved);
extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);
extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv);
extern HRESULT IEInstallScope(LPDWORD pdwScope);
extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags);
extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID);

#define FIEF_FLAG_FORCE_JITUI
#define FIEF_FLAG_PEEK
#define FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK

extern HRESULT IsAsyncMoniker(IMoniker *pmk);
extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);
extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes);
extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes);
extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc);
extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);
extern HRESULT RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved);
extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved);

#define FMFD_DEFAULT
#define FMFD_URLASFILENAME





#define FMFD_SERVERMIME
#define FMFD_RESPECTTEXTPLAIN
#define FMFD_RETURNUPDATEDIMGMIMES
#define UAS_EXACTLEGACY

extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize);
extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);

#define URLMON_OPTION_USERAGENT
#define URLMON_OPTION_USERAGENT_REFRESH
#define URLMON_OPTION_URL_ENCODING
# 490 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define CF_NULL
#define CFSTR_MIME_NULL

#define CFSTR_MIME_TEXT
#define CFSTR_MIME_RICHTEXT
#define CFSTR_MIME_MANIFEST
#define CFSTR_MIME_WEBVTT
#define CFSTR_MIME_X_BITMAP
#define CFSTR_MIME_POSTSCRIPT
#define CFSTR_MIME_AIFF
#define CFSTR_MIME_BASICAUDIO
#define CFSTR_MIME_WAV
#define CFSTR_MIME_X_WAV
#define CFSTR_MIME_GIF
#define CFSTR_MIME_PJPEG
#define CFSTR_MIME_JPEG
#define CFSTR_MIME_TIFF
#define CFSTR_MIME_JPEG_XR
#define CFSTR_MIME_PNG
#define CFSTR_MIME_X_PNG
#define CFSTR_MIME_X_ICON
#define CFSTR_MIME_SVG_XML
#define CFSTR_MIME_BMP
#define CFSTR_MIME_X_EMF
#define CFSTR_MIME_X_WMF
#define CFSTR_MIME_AVI
#define CFSTR_MIME_MPEG
#define CFSTR_MIME_FRACTALS
#define CFSTR_MIME_RAWDATA
#define CFSTR_MIME_RAWDATASTRM
#define CFSTR_MIME_PDF
#define CFSTR_MIME_HTA
#define CFSTR_MIME_APP_XML
#define CFSTR_MIME_XHTML
#define CFSTR_MIME_X_AIFF
#define CFSTR_MIME_X_REALAUDIO
#define CFSTR_MIME_XBM
#define CFSTR_MIME_QUICKTIME
#define CFSTR_MIME_X_MSVIDEO
#define CFSTR_MIME_X_SGI_MOVIE
#define CFSTR_MIME_HTML
#define CFSTR_MIME_XML
#define CFSTR_MIME_TTML
#define CFSTR_MIME_TTAF

#define MK_S_ASYNCHRONOUS

#define S_ASYNCHRONOUS





#define INET_E_INVALID_URL
#define INET_E_NO_SESSION
#define INET_E_CANNOT_CONNECT
#define INET_E_RESOURCE_NOT_FOUND
#define INET_E_OBJECT_NOT_FOUND
#define INET_E_DATA_NOT_AVAILABLE
#define INET_E_DOWNLOAD_FAILURE
#define INET_E_AUTHENTICATION_REQUIRED
#define INET_E_NO_VALID_MEDIA
#define INET_E_CONNECTION_TIMEOUT
#define INET_E_INVALID_REQUEST
#define INET_E_UNKNOWN_PROTOCOL
#define INET_E_SECURITY_PROBLEM
#define INET_E_CANNOT_LOAD_DATA
#define INET_E_CANNOT_INSTANTIATE_OBJECT
#define INET_E_INVALID_CERTIFICATE
#define INET_E_REDIRECT_FAILED
#define INET_E_REDIRECT_TO_DIR
#define INET_E_CANNOT_LOCK_REQUEST
#define INET_E_USE_EXTEND_BINDING
#define INET_E_TERMINATED_BIND
#define INET_E_RESERVED_1
#define INET_E_BLOCKED_REDIRECT_XSECURITYID
#define INET_E_DOMINJECTIONVALIDATION
#define INET_E_ERROR_FIRST
#define INET_E_CODE_DOWNLOAD_DECLINED
#define INET_E_RESULT_DISPATCHED
#define INET_E_CANNOT_REPLACE_SFP_FILE



#define INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY
#define INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE
#define INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE
#define INET_E_FORBIDFRAMING
#define INET_E_CODE_INSTALL_BLOCKED_ARM
#define INET_E_BLOCKED_PLUGGABLE_PROTOCOL
#define INET_E_ERROR_LAST




#define _LPPERSISTMONIKER_DEFINED




#define __IPersistMoniker_INTERFACE_DEFINED__

typedef IPersistMoniker *LPPERSISTMONIKER;

extern const GUID IID_IPersistMoniker;
# 628 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IPersistMonikerVtbl {
   


    HRESULT ( *QueryInterface)(
        IPersistMoniker* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistMoniker* This);

    ULONG ( *Release)(
        IPersistMoniker* This);


    HRESULT ( *GetClassID)(
        IPersistMoniker* This,
        CLSID *pClassID);

    HRESULT ( *IsDirty)(
        IPersistMoniker* This);

    HRESULT ( *Load)(
        IPersistMoniker* This,
        WINBOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode);

    HRESULT ( *Save)(
        IPersistMoniker* This,
        IMoniker *pimkName,
        LPBC pbc,
        WINBOOL fRemember);

    HRESULT ( *SaveCompleted)(
        IPersistMoniker* This,
        IMoniker *pimkName,
        LPBC pibc);

    HRESULT ( *GetCurMoniker)(
        IPersistMoniker* This,
        IMoniker **ppimkName);

   
} IPersistMonikerVtbl;
struct IPersistMoniker {
    IPersistMonikerVtbl* lpVtbl;
};
# 727 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IPersistMoniker_GetClassID_Proxy(
    IPersistMoniker* This,
    CLSID *pClassID);
void IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistMoniker_IsDirty_Proxy(
    IPersistMoniker* This);
void IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistMoniker_Load_Proxy(
    IPersistMoniker* This,
    WINBOOL fFullyAvailable,
    IMoniker *pimkName,
    LPBC pibc,
    DWORD grfMode);
void IPersistMoniker_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistMoniker_Save_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pbc,
    WINBOOL fRemember);
void IPersistMoniker_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistMoniker_SaveCompleted_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pibc);
void IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPersistMoniker_GetCurMoniker_Proxy(
    IPersistMoniker* This,
    IMoniker **ppimkName);
void IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPMONIKERPROP_DEFINED




#define __IMonikerProp_INTERFACE_DEFINED__

typedef IMonikerProp *LPMONIKERPROP;

typedef enum __WIDL_urlmon_generated_name_00000000 {
    MIMETYPEPROP = 0x0,
    USE_SRC_URL = 0x1,
    CLASSIDPROP = 0x2,
    TRUSTEDDOWNLOADPROP = 0x3,
    POPUPLEVELPROP = 0x4
} MONIKERPROPERTY;

extern const GUID IID_IMonikerProp;
# 817 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IMonikerPropVtbl {
   


    HRESULT ( *QueryInterface)(
        IMonikerProp* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMonikerProp* This);

    ULONG ( *Release)(
        IMonikerProp* This);


    HRESULT ( *PutProperty)(
        IMonikerProp* This,
        MONIKERPROPERTY mkp,
        LPCWSTR val);

   
} IMonikerPropVtbl;
struct IMonikerProp {
    IMonikerPropVtbl* lpVtbl;
};
# 872 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IMonikerProp_PutProperty_Proxy(
    IMonikerProp* This,
    MONIKERPROPERTY mkp,
    LPCWSTR val);
void IMonikerProp_PutProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPBINDPROTOCOL_DEFINED





#define __IBindProtocol_INTERFACE_DEFINED__

typedef IBindProtocol *LPBINDPROTOCOL;

extern const GUID IID_IBindProtocol;
# 912 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindProtocolVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindProtocol* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindProtocol* This);

    ULONG ( *Release)(
        IBindProtocol* This);


    HRESULT ( *CreateBinding)(
        IBindProtocol* This,
        LPCWSTR szUrl,
        IBindCtx *pbc,
        IBinding **ppb);

   
} IBindProtocolVtbl;
struct IBindProtocol {
    IBindProtocolVtbl* lpVtbl;
};
# 968 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBindProtocol_CreateBinding_Proxy(
    IBindProtocol* This,
    LPCWSTR szUrl,
    IBindCtx *pbc,
    IBinding **ppb);
void IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPBINDING_DEFINED





#define __IBinding_INTERFACE_DEFINED__

typedef IBinding *LPBINDING;

extern const GUID IID_IBinding;
# 1025 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindingVtbl {
   


    HRESULT ( *QueryInterface)(
        IBinding* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBinding* This);

    ULONG ( *Release)(
        IBinding* This);


    HRESULT ( *Abort)(
        IBinding* This);

    HRESULT ( *Suspend)(
        IBinding* This);

    HRESULT ( *Resume)(
        IBinding* This);

    HRESULT ( *SetPriority)(
        IBinding* This,
        LONG nPriority);

    HRESULT ( *GetPriority)(
        IBinding* This,
        LONG *pnPriority);

    HRESULT ( *GetBindResult)(
        IBinding* This,
        CLSID *pclsidProtocol,
        DWORD *pdwResult,
        LPOLESTR *pszResult,
        DWORD *pdwReserved);

   
} IBindingVtbl;
struct IBinding {
    IBindingVtbl* lpVtbl;
};
# 1119 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBinding_Abort_Proxy(
    IBinding* This);
void IBinding_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_Suspend_Proxy(
    IBinding* This);
void IBinding_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_Resume_Proxy(
    IBinding* This);
void IBinding_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_SetPriority_Proxy(
    IBinding* This,
    LONG nPriority);
void IBinding_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_GetPriority_Proxy(
    IBinding* This,
    LONG *pnPriority);
void IBinding_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_RemoteGetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
void IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBinding_GetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD *pdwReserved);
HRESULT IBinding_GetBindResult_Stub(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
# 1187 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPBINDSTATUSCALLBACK_DEFINED





#define __IBindStatusCallback_INTERFACE_DEFINED__

typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef enum __WIDL_urlmon_generated_name_00000001 {
    BINDVERB_GET = 0x0,
    BINDVERB_POST = 0x1,
    BINDVERB_PUT = 0x2,
    BINDVERB_CUSTOM = 0x3,
    BINDVERB_RESERVED1 = 0x4
} BINDVERB;

typedef enum __WIDL_urlmon_generated_name_00000002 {
    BINDINFOF_URLENCODESTGMEDDATA = 0x1,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x2
} BINDINFOF;

typedef enum __WIDL_urlmon_generated_name_00000003 {
    BINDF_ASYNCHRONOUS = 0x1,
    BINDF_ASYNCSTORAGE = 0x2,
    BINDF_NOPROGRESSIVERENDERING = 0x4,
    BINDF_OFFLINEOPERATION = 0x8,
    BINDF_GETNEWESTVERSION = 0x10,
    BINDF_NOWRITECACHE = 0x20,
    BINDF_NEEDFILE = 0x40,
    BINDF_PULLDATA = 0x80,
    BINDF_IGNORESECURITYPROBLEM = 0x100,
    BINDF_RESYNCHRONIZE = 0x200,
    BINDF_HYPERLINK = 0x400,
    BINDF_NO_UI = 0x800,
    BINDF_SILENTOPERATION = 0x1000,
    BINDF_PRAGMA_NO_CACHE = 0x2000,
    BINDF_GETCLASSOBJECT = 0x4000,
    BINDF_RESERVED_1 = 0x8000,
    BINDF_FREE_THREADED = 0x10000,
    BINDF_DIRECT_READ = 0x20000,
    BINDF_FORMS_SUBMIT = 0x40000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
    BINDF_FROMURLMON = 0x100000,
    BINDF_FWD_BACK = 0x200000,
    BINDF_PREFERDEFAULTHANDLER = 0x400000,
    BINDF_ENFORCERESTRICTED = 0x800000,
    BINDF_RESERVED_2 = 0x80000000,
    BINDF_RESERVED_3 = 0x1000000,
    BINDF_RESERVED_4 = 0x2000000,
    BINDF_RESERVED_5 = 0x4000000,
    BINDF_RESERVED_6 = 0x8000000,
    BINDF_RESERVED_7 = 0x40000000,
    BINDF_RESERVED_8 = 0x20000000
} BINDF;

typedef enum __WIDL_urlmon_generated_name_00000004 {
    URL_ENCODING_NONE = 0x0,
    URL_ENCODING_ENABLE_UTF8 = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000
} URL_ENCODING;

typedef struct _tagBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    WINBOOL bInheritHandle;
} REMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} RemBINDINFO;

typedef struct tagRemFORMATETC {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} RemFORMATETC;
typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef enum __WIDL_urlmon_generated_name_00000005 {
    BINDINFO_OPTIONS_WININETFLAG = 0x10000,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
    BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
    BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
    BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (int)0x80000000
} BINDINFO_OPTIONS;

typedef enum __WIDL_urlmon_generated_name_00000006 {
    BSCF_FIRSTDATANOTIFICATION = 0x1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
    BSCF_LASTDATANOTIFICATION = 0x4,
    BSCF_DATAFULLYAVAILABLE = 0x8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
    BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
    BSCF_64BITLENGTHDOWNLOAD = 0x40
} BSCF;

typedef enum tagBINDSTATUS {
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
    BINDSTATUS_SSLUX_NAVBLOCKED = 53,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
    BINDSTATUS_64BIT_PROGRESS = 56,
    BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
    BINDSTATUS_RESERVED_0 = 57,
    BINDSTATUS_RESERVED_1 = 58,
    BINDSTATUS_RESERVED_2 = 59,
    BINDSTATUS_RESERVED_3 = 60,
    BINDSTATUS_RESERVED_4 = 61,
    BINDSTATUS_RESERVED_5 = 62,
    BINDSTATUS_RESERVED_6 = 63,
    BINDSTATUS_RESERVED_7 = 64,
    BINDSTATUS_RESERVED_8 = 65,
    BINDSTATUS_RESERVED_9 = 66,
    BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_9
} BINDSTATUS;

extern const GUID IID_IBindStatusCallback;
# 1443 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindStatusCallbackVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindStatusCallback* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindStatusCallback* This);

    ULONG ( *Release)(
        IBindStatusCallback* This);


    HRESULT ( *OnStartBinding)(
        IBindStatusCallback* This,
        DWORD dwReserved,
        IBinding *pib);

    HRESULT ( *GetPriority)(
        IBindStatusCallback* This,
        LONG *pnPriority);

    HRESULT ( *OnLowResource)(
        IBindStatusCallback* This,
        DWORD reserved);

    HRESULT ( *OnProgress)(
        IBindStatusCallback* This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT ( *OnStopBinding)(
        IBindStatusCallback* This,
        HRESULT hresult,
        LPCWSTR szError);

    HRESULT ( *GetBindInfo)(
        IBindStatusCallback* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT ( *OnDataAvailable)(
        IBindStatusCallback* This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);

    HRESULT ( *OnObjectAvailable)(
        IBindStatusCallback* This,
        const IID *const riid,
        IUnknown *punk);

   
} IBindStatusCallbackVtbl;
struct IBindStatusCallback {
    IBindStatusCallbackVtbl* lpVtbl;
};
# 1563 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBindStatusCallback_OnStartBinding_Proxy(
    IBindStatusCallback* This,
    DWORD dwReserved,
    IBinding *pib);
void IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_GetPriority_Proxy(
    IBindStatusCallback* This,
    LONG *pnPriority);
void IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnLowResource_Proxy(
    IBindStatusCallback* This,
    DWORD reserved);
void IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnProgress_Proxy(
    IBindStatusCallback* This,
    ULONG ulProgress,
    ULONG ulProgressMax,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnStopBinding_Proxy(
    IBindStatusCallback* This,
    HRESULT hresult,
    LPCWSTR szError);
void IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
void IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
void IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnObjectAvailable_Proxy(
    IBindStatusCallback* This,
    const IID *const riid,
    IUnknown *punk);
void IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
HRESULT IBindStatusCallback_GetBindInfo_Stub(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
HRESULT IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    FORMATETC *pformatetc,
    STGMEDIUM *pstgmed);
HRESULT IBindStatusCallback_OnDataAvailable_Stub(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
# 1667 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPBINDSTATUSCALLBACKEX_DEFINED





#define __IBindStatusCallbackEx_INTERFACE_DEFINED__

typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef enum __WIDL_urlmon_generated_name_00000007 {
    BINDF2_DISABLEBASICOVERHTTP = 0x1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
    BINDF2_SETDOWNLOADMODE = 0x20,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
    BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
    BINDF2_RESERVED_F = 0x20000,
    BINDF2_RESERVED_E = 0x40000,
    BINDF2_RESERVED_D = 0x80000,
    BINDF2_RESERVED_C = 0x100000,
    BINDF2_RESERVED_B = 0x200000,
    BINDF2_RESERVED_A = 0x400000,
    BINDF2_RESERVED_9 = 0x800000,
    BINDF2_RESERVED_8 = 0x1000000,
    BINDF2_RESERVED_7 = 0x2000000,
    BINDF2_RESERVED_6 = 0x4000000,
    BINDF2_RESERVED_5 = 0x8000000,
    BINDF2_RESERVED_4 = 0x10000000,
    BINDF2_RESERVED_3 = 0x20000000,
    BINDF2_RESERVED_2 = 0x40000000,
    BINDF2_RESERVED_1 = 0x80000000
} BINDF2;

extern const GUID IID_IBindStatusCallbackEx;
# 1719 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindStatusCallbackExVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindStatusCallbackEx* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindStatusCallbackEx* This);

    ULONG ( *Release)(
        IBindStatusCallbackEx* This);


    HRESULT ( *OnStartBinding)(
        IBindStatusCallbackEx* This,
        DWORD dwReserved,
        IBinding *pib);

    HRESULT ( *GetPriority)(
        IBindStatusCallbackEx* This,
        LONG *pnPriority);

    HRESULT ( *OnLowResource)(
        IBindStatusCallbackEx* This,
        DWORD reserved);

    HRESULT ( *OnProgress)(
        IBindStatusCallbackEx* This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT ( *OnStopBinding)(
        IBindStatusCallbackEx* This,
        HRESULT hresult,
        LPCWSTR szError);

    HRESULT ( *GetBindInfo)(
        IBindStatusCallbackEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT ( *OnDataAvailable)(
        IBindStatusCallbackEx* This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);

    HRESULT ( *OnObjectAvailable)(
        IBindStatusCallbackEx* This,
        const IID *const riid,
        IUnknown *punk);


    HRESULT ( *GetBindInfoEx)(
        IBindStatusCallbackEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved);

   
} IBindStatusCallbackExVtbl;
struct IBindStatusCallbackEx {
    IBindStatusCallbackExVtbl* lpVtbl;
};
# 1853 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);






#define _LPAUTHENTICATION_DEFINED





#define __IAuthenticate_INTERFACE_DEFINED__

typedef IAuthenticate *LPAUTHENTICATION;

extern const GUID IID_IAuthenticate;
# 1909 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IAuthenticateVtbl {
   


    HRESULT ( *QueryInterface)(
        IAuthenticate* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAuthenticate* This);

    ULONG ( *Release)(
        IAuthenticate* This);


    HRESULT ( *Authenticate)(
        IAuthenticate* This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword);

   
} IAuthenticateVtbl;
struct IAuthenticate {
    IAuthenticateVtbl* lpVtbl;
};
# 1965 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IAuthenticate_Authenticate_Proxy(
    IAuthenticate* This,
    HWND *phwnd,
    LPWSTR *pszUsername,
    LPWSTR *pszPassword);
void IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPAUTHENTICATIONEX_DEFINED





#define __IAuthenticateEx_INTERFACE_DEFINED__

typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef enum __WIDL_urlmon_generated_name_00000008 {
    AUTHENTICATEF_PROXY = 0x1,
    AUTHENTICATEF_BASIC = 0x2,
    AUTHENTICATEF_HTTP = 0x4
} AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO {
    DWORD dwFlags;
    DWORD dwReserved;
} AUTHENTICATEINFO;

extern const GUID IID_IAuthenticateEx;
# 2018 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IAuthenticateExVtbl {
   


    HRESULT ( *QueryInterface)(
        IAuthenticateEx* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAuthenticateEx* This);

    ULONG ( *Release)(
        IAuthenticateEx* This);


    HRESULT ( *Authenticate)(
        IAuthenticateEx* This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword);


    HRESULT ( *AuthenticateEx)(
        IAuthenticateEx* This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword,
        AUTHENTICATEINFO *pauthinfo);

   
} IAuthenticateExVtbl;
struct IAuthenticateEx {
    IAuthenticateExVtbl* lpVtbl;
};
# 2088 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IAuthenticateEx_AuthenticateEx_Proxy(
    IAuthenticateEx* This,
    HWND *phwnd,
    LPWSTR *pszUsername,
    LPWSTR *pszPassword,
    AUTHENTICATEINFO *pauthinfo);
void IAuthenticateEx_AuthenticateEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPHTTPNEGOTIATE_DEFINED





#define __IHttpNegotiate_INTERFACE_DEFINED__

typedef IHttpNegotiate *LPHTTPNEGOTIATE;

extern const GUID IID_IHttpNegotiate;
# 2137 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IHttpNegotiateVtbl {
   


    HRESULT ( *QueryInterface)(
        IHttpNegotiate* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IHttpNegotiate* This);

    ULONG ( *Release)(
        IHttpNegotiate* This);


    HRESULT ( *BeginningTransaction)(
        IHttpNegotiate* This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT ( *OnResponse)(
        IHttpNegotiate* This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);

   
} IHttpNegotiateVtbl;
struct IHttpNegotiate {
    IHttpNegotiateVtbl* lpVtbl;
};
# 2205 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IHttpNegotiate_BeginningTransaction_Proxy(
    IHttpNegotiate* This,
    LPCWSTR szURL,
    LPCWSTR szHeaders,
    DWORD dwReserved,
    LPWSTR *pszAdditionalHeaders);
void IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IHttpNegotiate_OnResponse_Proxy(
    IHttpNegotiate* This,
    DWORD dwResponseCode,
    LPCWSTR szResponseHeaders,
    LPCWSTR szRequestHeaders,
    LPWSTR *pszAdditionalRequestHeaders);
void IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPHTTPNEGOTIATE2_DEFINED





#define __IHttpNegotiate2_INTERFACE_DEFINED__

typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;

extern const GUID IID_IHttpNegotiate2;
# 2258 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IHttpNegotiate2Vtbl {
   


    HRESULT ( *QueryInterface)(
        IHttpNegotiate2* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IHttpNegotiate2* This);

    ULONG ( *Release)(
        IHttpNegotiate2* This);


    HRESULT ( *BeginningTransaction)(
        IHttpNegotiate2* This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT ( *OnResponse)(
        IHttpNegotiate2* This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);


    HRESULT ( *GetRootSecurityId)(
        IHttpNegotiate2* This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

   
} IHttpNegotiate2Vtbl;
struct IHttpNegotiate2 {
    IHttpNegotiate2Vtbl* lpVtbl;
};
# 2339 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IHttpNegotiate2_GetRootSecurityId_Proxy(
    IHttpNegotiate2* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void IHttpNegotiate2_GetRootSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPHTTPNEGOTIATE3_DEFINED





#define __IHttpNegotiate3_INTERFACE_DEFINED__

typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;

extern const GUID IID_IHttpNegotiate3;
# 2379 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IHttpNegotiate3Vtbl {
   


    HRESULT ( *QueryInterface)(
        IHttpNegotiate3* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IHttpNegotiate3* This);

    ULONG ( *Release)(
        IHttpNegotiate3* This);


    HRESULT ( *BeginningTransaction)(
        IHttpNegotiate3* This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT ( *OnResponse)(
        IHttpNegotiate3* This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);


    HRESULT ( *GetRootSecurityId)(
        IHttpNegotiate3* This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);


    HRESULT ( *GetSerializedClientCertContext)(
        IHttpNegotiate3* This,
        BYTE **ppbCert,
        DWORD *pcbCert);

   
} IHttpNegotiate3Vtbl;
struct IHttpNegotiate3 {
    IHttpNegotiate3Vtbl* lpVtbl;
};
# 2472 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IHttpNegotiate3_GetSerializedClientCertContext_Proxy(
    IHttpNegotiate3* This,
    BYTE **ppbCert,
    DWORD *pcbCert);
void IHttpNegotiate3_GetSerializedClientCertContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPWININETFILESTREAM_DEFINED





#define __IWinInetFileStream_INTERFACE_DEFINED__

typedef IWinInetFileStream *LPWININETFILESTREAM;

extern const GUID IID_IWinInetFileStream;
# 2514 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWinInetFileStreamVtbl {
   


    HRESULT ( *QueryInterface)(
        IWinInetFileStream* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWinInetFileStream* This);

    ULONG ( *Release)(
        IWinInetFileStream* This);


    HRESULT ( *SetHandleForUnlock)(
        IWinInetFileStream* This,
        DWORD_PTR hWinInetLockHandle,
        DWORD_PTR dwReserved);

    HRESULT ( *SetDeleteFile)(
        IWinInetFileStream* This,
        DWORD_PTR dwReserved);

   
} IWinInetFileStreamVtbl;
struct IWinInetFileStream {
    IWinInetFileStreamVtbl* lpVtbl;
};
# 2577 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWinInetFileStream_SetHandleForUnlock_Proxy(
    IWinInetFileStream* This,
    DWORD_PTR hWinInetLockHandle,
    DWORD_PTR dwReserved);
void IWinInetFileStream_SetHandleForUnlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IWinInetFileStream_SetDeleteFile_Proxy(
    IWinInetFileStream* This,
    DWORD_PTR dwReserved);
void IWinInetFileStream_SetDeleteFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPWINDOWFORBINDINGUI_DEFINED





#define __IWindowForBindingUI_INTERFACE_DEFINED__

typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;

extern const GUID IID_IWindowForBindingUI;
# 2624 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWindowForBindingUIVtbl {
   


    HRESULT ( *QueryInterface)(
        IWindowForBindingUI* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWindowForBindingUI* This);

    ULONG ( *Release)(
        IWindowForBindingUI* This);


    HRESULT ( *GetWindow)(
        IWindowForBindingUI* This,
        const GUID *const rguidReason,
        HWND *phwnd);

   
} IWindowForBindingUIVtbl;
struct IWindowForBindingUI {
    IWindowForBindingUIVtbl* lpVtbl;
};
# 2679 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWindowForBindingUI_GetWindow_Proxy(
    IWindowForBindingUI* This,
    const GUID *const rguidReason,
    HWND *phwnd);
void IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPCODEINSTALL_DEFINED





#define __ICodeInstall_INTERFACE_DEFINED__

typedef ICodeInstall *LPCODEINSTALL;

typedef enum __WIDL_urlmon_generated_name_00000009 {
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = 1,
    CIP_NEWER_VERSION_EXISTS = 2,
    CIP_OLDER_VERSION_EXISTS = 3,
    CIP_NAME_CONFLICT = 4,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
    CIP_UNSAFE_TO_ABORT = 7,
    CIP_NEED_REBOOT = 8,
    CIP_NEED_REBOOT_UI_PERMISSION = 9
} CIP_STATUS;

extern const GUID IID_ICodeInstall;
# 2733 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct ICodeInstallVtbl {
   


    HRESULT ( *QueryInterface)(
        ICodeInstall* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICodeInstall* This);

    ULONG ( *Release)(
        ICodeInstall* This);


    HRESULT ( *GetWindow)(
        ICodeInstall* This,
        const GUID *const rguidReason,
        HWND *phwnd);


    HRESULT ( *OnCodeInstallProblem)(
        ICodeInstall* This,
        ULONG ulStatusCode,
        LPCWSTR szDestination,
        LPCWSTR szSource,
        DWORD dwReserved);

   
} ICodeInstallVtbl;
struct ICodeInstall {
    ICodeInstallVtbl* lpVtbl;
};
# 2802 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT ICodeInstall_OnCodeInstallProblem_Proxy(
    ICodeInstall* This,
    ULONG ulStatusCode,
    LPCWSTR szDestination,
    LPCWSTR szSource,
    DWORD dwReserved);
void ICodeInstall_OnCodeInstallProblem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4254 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPWININETINFO_DEFINED





#define __IWinInetInfo_INTERFACE_DEFINED__

typedef IWinInetInfo *LPWININETINFO;
extern const GUID IID_IWinInetInfo;
# 4278 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWinInetInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IWinInetInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWinInetInfo* This);

    ULONG ( *Release)(
        IWinInetInfo* This);


    HRESULT ( *QueryOption)(
        IWinInetInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);

   
} IWinInetInfoVtbl;
struct IWinInetInfo {
    IWinInetInfoVtbl* lpVtbl;
};
# 4334 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWinInetInfo_RemoteQueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);
void IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf);
HRESULT IWinInetInfo_QueryOption_Stub(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);





#define WININETINFO_OPTION_LOCK_HANDLE


#define _LPHTTPSECURITY_DEFINED





#define __IHttpSecurity_INTERFACE_DEFINED__

typedef IHttpSecurity *LPHTTPSECURITY;

extern const GUID IID_IHttpSecurity;
# 4385 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IHttpSecurityVtbl {
   


    HRESULT ( *QueryInterface)(
        IHttpSecurity* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IHttpSecurity* This);

    ULONG ( *Release)(
        IHttpSecurity* This);


    HRESULT ( *GetWindow)(
        IHttpSecurity* This,
        const GUID *const rguidReason,
        HWND *phwnd);


    HRESULT ( *OnSecurityProblem)(
        IHttpSecurity* This,
        DWORD dwProblem);

   
} IHttpSecurityVtbl;
struct IHttpSecurity {
    IHttpSecurityVtbl* lpVtbl;
};
# 4451 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IHttpSecurity_OnSecurityProblem_Proxy(
    IHttpSecurity* This,
    DWORD dwProblem);
void IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPWININETHTTPINFO_DEFINED





#define __IWinInetHttpInfo_INTERFACE_DEFINED__

typedef IWinInetHttpInfo *LPWININETHTTPINFO;

extern const GUID IID_IWinInetHttpInfo;
# 4492 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWinInetHttpInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IWinInetHttpInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWinInetHttpInfo* This);

    ULONG ( *Release)(
        IWinInetHttpInfo* This);


    HRESULT ( *QueryOption)(
        IWinInetHttpInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);


    HRESULT ( *QueryInfo)(
        IWinInetHttpInfo* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf,
        DWORD *pdwFlags,
        DWORD *pdwReserved);

   
} IWinInetHttpInfoVtbl;
struct IWinInetHttpInfo {
    IWinInetHttpInfoVtbl* lpVtbl;
};
# 4563 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
void IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
HRESULT IWinInetHttpInfo_QueryInfo_Stub(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);






#define _LPWININETHTTPTIMEOUTS_DEFINED




#define __IWinInetHttpTimeouts_INTERFACE_DEFINED__

extern const GUID IID_IWinInetHttpTimeouts;
# 4617 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWinInetHttpTimeoutsVtbl {
   


    HRESULT ( *QueryInterface)(
        IWinInetHttpTimeouts* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWinInetHttpTimeouts* This);

    ULONG ( *Release)(
        IWinInetHttpTimeouts* This);


    HRESULT ( *GetRequestTimeouts)(
        IWinInetHttpTimeouts* This,
        DWORD *pdwConnectTimeout,
        DWORD *pdwSendTimeout,
        DWORD *pdwReceiveTimeout);

   
} IWinInetHttpTimeoutsVtbl;
struct IWinInetHttpTimeouts {
    IWinInetHttpTimeoutsVtbl* lpVtbl;
};
# 4673 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWinInetHttpTimeouts_GetRequestTimeouts_Proxy(
    IWinInetHttpTimeouts* This,
    DWORD *pdwConnectTimeout,
    DWORD *pdwSendTimeout,
    DWORD *pdwReceiveTimeout);
void IWinInetHttpTimeouts_GetRequestTimeouts_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 4913 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define SID_IBindHost
#define SID_SBindHost


#define _LPBINDHOST_DEFINED

extern const GUID SID_BindHost;





#define __IBindHost_INTERFACE_DEFINED__

typedef IBindHost *LPBINDHOST;

extern const GUID IID_IBindHost;
# 4959 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindHostVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindHost* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindHost* This);

    ULONG ( *Release)(
        IBindHost* This);


    HRESULT ( *CreateMoniker)(
        IBindHost* This,
        LPOLESTR szName,
        IBindCtx *pBC,
        IMoniker **ppmk,
        DWORD dwReserved);

    HRESULT ( *MonikerBindToStorage)(
        IBindHost* This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID *const riid,
        void **ppvObj);

    HRESULT ( *MonikerBindToObject)(
        IBindHost* This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID *const riid,
        void **ppvObj);

   
} IBindHostVtbl;
struct IBindHost {
    IBindHostVtbl* lpVtbl;
};
# 5040 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBindHost_CreateMoniker_Proxy(
    IBindHost* This,
    LPOLESTR szName,
    IBindCtx *pBC,
    IMoniker **ppmk,
    DWORD dwReserved);
void IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    IUnknown **ppvObj);
void IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    IUnknown **ppvObj);
void IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IBindHost_MonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    void **ppvObj);
HRESULT IBindHost_MonikerBindToStorage_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    IUnknown **ppvObj);
HRESULT IBindHost_MonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    void **ppvObj);
HRESULT IBindHost_MonikerBindToObject_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID *const riid,
    IUnknown **ppvObj);





#define URLOSTRM_USECACHEDCOPY_ONLY
#define URLOSTRM_USECACHEDCOPY
#define URLOSTRM_GETNEWESTVERSION

struct IBindStatusCallback;
extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
extern HRESULT URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);

#define URLOpenStream
#define URLOpenPullStream
#define URLDownloadToFile
#define URLDownloadToCacheFile
#define URLOpenBlockingStream

extern HRESULT HlinkGoBack(IUnknown *pUnk);
extern HRESULT HlinkGoForward(IUnknown *pUnk);
extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);
extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);
# 5190 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPIINTERNET





#define __IInternet_INTERFACE_DEFINED__

typedef IInternet *LPIINTERNET;
extern const GUID IID_IInternet;
# 5209 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternet* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternet* This);

    ULONG ( *Release)(
        IInternet* This);

   
} IInternetVtbl;
struct IInternet {
    IInternetVtbl* lpVtbl;
};
# 5258 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPIINTERNETBINDINFO





#define __IInternetBindInfo_INTERFACE_DEFINED__

typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef enum tagBINDSTRING {
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17,
    BINDSTRING_XDR_ORIGIN = 18,
    BINDSTRING_DOWNLOADPATH = 19,
    BINDSTRING_ROOTDOC_URL = 20,
    BINDSTRING_INITIAL_FILENAME = 21,
    BINDSTRING_PROXY_USERNAME = 22,
    BINDSTRING_PROXY_PASSWORD = 23
} BINDSTRING;

extern const GUID IID_IInternetBindInfo;
# 5314 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetBindInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetBindInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetBindInfo* This);

    ULONG ( *Release)(
        IInternetBindInfo* This);


    HRESULT ( *GetBindInfo)(
        IInternetBindInfo* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT ( *GetBindString)(
        IInternetBindInfo* This,
        ULONG ulStringType,
        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched);

   
} IInternetBindInfoVtbl;
struct IInternetBindInfo {
    IInternetBindInfoVtbl* lpVtbl;
};
# 5380 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetBindInfo_GetBindInfo_Proxy(
    IInternetBindInfo* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
void IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetBindInfo_GetBindString_Proxy(
    IInternetBindInfo* This,
    ULONG ulStringType,
    LPOLESTR *ppwzStr,
    ULONG cEl,
    ULONG *pcElFetched);
void IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETBINDINFOEX





#define __IInternetBindInfoEx_INTERFACE_DEFINED__

typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;

extern const GUID IID_IInternetBindInfoEx;
# 5432 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetBindInfoExVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetBindInfoEx* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetBindInfoEx* This);

    ULONG ( *Release)(
        IInternetBindInfoEx* This);


    HRESULT ( *GetBindInfo)(
        IInternetBindInfoEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT ( *GetBindString)(
        IInternetBindInfoEx* This,
        ULONG ulStringType,
        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched);


    HRESULT ( *GetBindInfoEx)(
        IInternetBindInfoEx* This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved);

   
} IInternetBindInfoExVtbl;
struct IInternetBindInfoEx {
    IInternetBindInfoExVtbl* lpVtbl;
};
# 5512 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetBindInfoEx_GetBindInfoEx_Proxy(
    IInternetBindInfoEx* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
void IInternetBindInfoEx_GetBindInfoEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETPROTOCOLROOT_DEFINED





#define __IInternetProtocolRoot_INTERFACE_DEFINED__

typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef enum _tagPI_FLAGS {
    PI_PARSE_URL = 0x1,
    PI_FILTER_MODE = 0x2,
    PI_FORCE_ASYNC = 0x4,
    PI_USE_WORKERTHREAD = 0x8,
    PI_MIMEVERIFICATION = 0x10,
    PI_CLSIDLOOKUP = 0x20,
    PI_DATAPROGRESS = 0x40,
    PI_SYNCHRONOUS = 0x80,
    PI_APARTMENTTHREADED = 0x100,
    PI_CLASSINSTALL = 0x200,
    PI_PASSONBINDCTX = 0x2000,
    PI_NOMIMEHANDLER = 0x8000,
    PI_LOADAPPDIRECT = 0x4000,
    PD_FORCE_SWITCH = 0x10000,
    PI_PREFERDEFAULTHANDLER = 0x20000
} PI_FLAGS;
typedef struct _tagPROTOCOLDATA {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
} PROTOCOLDATA;

typedef struct _tagStartParam {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
} StartParam;

extern const GUID IID_IInternetProtocolRoot;
# 5602 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetProtocolRootVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetProtocolRoot* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetProtocolRoot* This);

    ULONG ( *Release)(
        IInternetProtocolRoot* This);


    HRESULT ( *Start)(
        IInternetProtocolRoot* This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

    HRESULT ( *Continue)(
        IInternetProtocolRoot* This,
        PROTOCOLDATA *pProtocolData);

    HRESULT ( *Abort)(
        IInternetProtocolRoot* This,
        HRESULT hrReason,
        DWORD dwOptions);

    HRESULT ( *Terminate)(
        IInternetProtocolRoot* This,
        DWORD dwOptions);

    HRESULT ( *Suspend)(
        IInternetProtocolRoot* This);

    HRESULT ( *Resume)(
        IInternetProtocolRoot* This);

   
} IInternetProtocolRootVtbl;
struct IInternetProtocolRoot {
    IInternetProtocolRootVtbl* lpVtbl;
};
# 5699 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetProtocolRoot_Start_Proxy(
    IInternetProtocolRoot* This,
    LPCWSTR szUrl,
    IInternetProtocolSink *pOIProtSink,
    IInternetBindInfo *pOIBindInfo,
    DWORD grfPI,
    HANDLE_PTR dwReserved);
void IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Continue_Proxy(
    IInternetProtocolRoot* This,
    PROTOCOLDATA *pProtocolData);
void IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Abort_Proxy(
    IInternetProtocolRoot* This,
    HRESULT hrReason,
    DWORD dwOptions);
void IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Terminate_Proxy(
    IInternetProtocolRoot* This,
    DWORD dwOptions);
void IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Suspend_Proxy(
    IInternetProtocolRoot* This);
void IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Resume_Proxy(
    IInternetProtocolRoot* This);
void IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETPROTOCOL_DEFINED





#define __IInternetProtocol_INTERFACE_DEFINED__

typedef IInternetProtocol *LPIINTERNETPROTOCOL;

extern const GUID IID_IInternetProtocol;
# 5792 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetProtocolVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetProtocol* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetProtocol* This);

    ULONG ( *Release)(
        IInternetProtocol* This);


    HRESULT ( *Start)(
        IInternetProtocol* This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

    HRESULT ( *Continue)(
        IInternetProtocol* This,
        PROTOCOLDATA *pProtocolData);

    HRESULT ( *Abort)(
        IInternetProtocol* This,
        HRESULT hrReason,
        DWORD dwOptions);

    HRESULT ( *Terminate)(
        IInternetProtocol* This,
        DWORD dwOptions);

    HRESULT ( *Suspend)(
        IInternetProtocol* This);

    HRESULT ( *Resume)(
        IInternetProtocol* This);


    HRESULT ( *Read)(
        IInternetProtocol* This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Seek)(
        IInternetProtocol* This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT ( *LockRequest)(
        IInternetProtocol* This,
        DWORD dwOptions);

    HRESULT ( *UnlockRequest)(
        IInternetProtocol* This);

   
} IInternetProtocolVtbl;
struct IInternetProtocol {
    IInternetProtocolVtbl* lpVtbl;
};
# 5927 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetProtocol_Read_Proxy(
    IInternetProtocol* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
void IInternetProtocol_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocol_Seek_Proxy(
    IInternetProtocol* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void IInternetProtocol_Seek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocol_LockRequest_Proxy(
    IInternetProtocol* This,
    DWORD dwOptions);
void IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocol_UnlockRequest_Proxy(
    IInternetProtocol* This);
void IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 6163 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPIINTERNETPROTOCOLSINK_DEFINED




#define __IInternetProtocolSink_INTERFACE_DEFINED__

typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;

extern const GUID IID_IInternetProtocolSink;
# 6199 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetProtocolSinkVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetProtocolSink* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetProtocolSink* This);

    ULONG ( *Release)(
        IInternetProtocolSink* This);


    HRESULT ( *Switch)(
        IInternetProtocolSink* This,
        PROTOCOLDATA *pProtocolData);

    HRESULT ( *ReportProgress)(
        IInternetProtocolSink* This,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT ( *ReportData)(
        IInternetProtocolSink* This,
        DWORD grfBSCF,
        ULONG ulProgress,
        ULONG ulProgressMax);

    HRESULT ( *ReportResult)(
        IInternetProtocolSink* This,
        HRESULT hrResult,
        DWORD dwError,
        LPCWSTR szResult);

   
} IInternetProtocolSinkVtbl;
struct IInternetProtocolSink {
    IInternetProtocolSinkVtbl* lpVtbl;
};
# 6282 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetProtocolSink_Switch_Proxy(
    IInternetProtocolSink* This,
    PROTOCOLDATA *pProtocolData);
void IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportProgress_Proxy(
    IInternetProtocolSink* This,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportData_Proxy(
    IInternetProtocolSink* This,
    DWORD grfBSCF,
    ULONG ulProgress,
    ULONG ulProgressMax);
void IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportResult_Proxy(
    IInternetProtocolSink* This,
    HRESULT hrResult,
    DWORD dwError,
    LPCWSTR szResult);
void IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETPROTOCOLSINKSTACKABLE_DEFINED





#define __IInternetProtocolSinkStackable_INTERFACE_DEFINED__

typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;

extern const GUID IID_IInternetProtocolSinkStackable;
# 6354 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetProtocolSinkStackableVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetProtocolSinkStackable* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetProtocolSinkStackable* This);

    ULONG ( *Release)(
        IInternetProtocolSinkStackable* This);


    HRESULT ( *SwitchSink)(
        IInternetProtocolSinkStackable* This,
        IInternetProtocolSink *pOIProtSink);

    HRESULT ( *CommitSwitch)(
        IInternetProtocolSinkStackable* This);

    HRESULT ( *RollbackSwitch)(
        IInternetProtocolSinkStackable* This);

   
} IInternetProtocolSinkStackableVtbl;
struct IInternetProtocolSinkStackable {
    IInternetProtocolSinkStackableVtbl* lpVtbl;
};
# 6422 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetProtocolSinkStackable_SwitchSink_Proxy(
    IInternetProtocolSinkStackable* This,
    IInternetProtocolSink *pOIProtSink);
void IInternetProtocolSinkStackable_SwitchSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolSinkStackable_CommitSwitch_Proxy(
    IInternetProtocolSinkStackable* This);
void IInternetProtocolSinkStackable_CommitSwitch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolSinkStackable_RollbackSwitch_Proxy(
    IInternetProtocolSinkStackable* This);
void IInternetProtocolSinkStackable_RollbackSwitch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETSESSION_DEFINED





#define __IInternetSession_INTERFACE_DEFINED__

typedef IInternetSession *LPIINTERNETSESSION;

typedef enum _tagOIBDG_FLAGS {
    OIBDG_APARTMENTTHREADED = 0x100,
    OIBDG_DATAONLY = 0x1000
} OIBDG_FLAGS;

extern const GUID IID_IInternetSession;
# 6516 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetSessionVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetSession* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetSession* This);

    ULONG ( *Release)(
        IInternetSession* This);


    HRESULT ( *RegisterNameSpace)(
        IInternetSession* This,
        IClassFactory *pCF,
        const IID *const rclsid,
        LPCWSTR pwzProtocol,
        ULONG cPatterns,
        const LPCWSTR *ppwzPatterns,
        DWORD dwReserved);

    HRESULT ( *UnregisterNameSpace)(
        IInternetSession* This,
        IClassFactory *pCF,
        LPCWSTR pszProtocol);

    HRESULT ( *RegisterMimeFilter)(
        IInternetSession* This,
        IClassFactory *pCF,
        const IID *const rclsid,
        LPCWSTR pwzType);

    HRESULT ( *UnregisterMimeFilter)(
        IInternetSession* This,
        IClassFactory *pCF,
        LPCWSTR pwzType);

    HRESULT ( *CreateBinding)(
        IInternetSession* This,
        LPBC pBC,
        LPCWSTR szUrl,
        IUnknown *pUnkOuter,
        IUnknown **ppUnk,
        IInternetProtocol **ppOInetProt,
        DWORD dwOption);

    HRESULT ( *SetSessionOption)(
        IInternetSession* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD dwBufferLength,
        DWORD dwReserved);

    HRESULT ( *GetSessionOption)(
        IInternetSession* This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pdwBufferLength,
        DWORD dwReserved);

   
} IInternetSessionVtbl;
struct IInternetSession {
    IInternetSessionVtbl* lpVtbl;
};
# 6638 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetSession_RegisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const IID *const rclsid,
    LPCWSTR pwzProtocol,
    ULONG cPatterns,
    const LPCWSTR *ppwzPatterns,
    DWORD dwReserved);
void IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_UnregisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pszProtocol);
void IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_RegisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const IID *const rclsid,
    LPCWSTR pwzType);
void IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_UnregisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pwzType);
void IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_CreateBinding_Proxy(
    IInternetSession* This,
    LPBC pBC,
    LPCWSTR szUrl,
    IUnknown *pUnkOuter,
    IUnknown **ppUnk,
    IInternetProtocol **ppOInetProt,
    DWORD dwOption);
void IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_SetSessionOption_Proxy(
    IInternetSession* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD dwBufferLength,
    DWORD dwReserved);
void IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSession_GetSessionOption_Proxy(
    IInternetSession* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pdwBufferLength,
    DWORD dwReserved);
void IInternetSession_GetSessionOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETTHREADSWITCH_DEFINED





#define __IInternetThreadSwitch_INTERFACE_DEFINED__

typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;

extern const GUID IID_IInternetThreadSwitch;
# 6746 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetThreadSwitchVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetThreadSwitch* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetThreadSwitch* This);

    ULONG ( *Release)(
        IInternetThreadSwitch* This);


    HRESULT ( *Prepare)(
        IInternetThreadSwitch* This);

    HRESULT ( *Continue)(
        IInternetThreadSwitch* This);

   
} IInternetThreadSwitchVtbl;
struct IInternetThreadSwitch {
    IInternetThreadSwitchVtbl* lpVtbl;
};
# 6806 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetThreadSwitch_Prepare_Proxy(
    IInternetThreadSwitch* This);
void IInternetThreadSwitch_Prepare_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetThreadSwitch_Continue_Proxy(
    IInternetThreadSwitch* This);
void IInternetThreadSwitch_Continue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETPRIORITY_DEFINED





#define __IInternetPriority_INTERFACE_DEFINED__

typedef IInternetPriority *LPIINTERNETPRIORITY;

extern const GUID IID_IInternetPriority;
# 6852 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetPriorityVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetPriority* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetPriority* This);

    ULONG ( *Release)(
        IInternetPriority* This);


    HRESULT ( *SetPriority)(
        IInternetPriority* This,
        LONG nPriority);

    HRESULT ( *GetPriority)(
        IInternetPriority* This,
        LONG *pnPriority);

   
} IInternetPriorityVtbl;
struct IInternetPriority {
    IInternetPriorityVtbl* lpVtbl;
};
# 6914 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetPriority_SetPriority_Proxy(
    IInternetPriority* This,
    LONG nPriority);
void IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetPriority_GetPriority_Proxy(
    IInternetPriority* This,
    LONG *pnPriority);
void IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPIINTERNETPROTOCOLINFO_DEFINED





#define __IInternetProtocolInfo_INTERFACE_DEFINED__

typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef enum _tagPARSEACTION {
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE_IS_UNESCAPE = 7,
    PARSE_DECODE_IS_ESCAPE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19
} PARSEACTION;

typedef enum _tagPSUACTION {
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2
} PSUACTION;

typedef enum _tagQUERYOPTION {
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
} QUERYOPTION;

extern const GUID IID_IInternetProtocolInfo;
# 7034 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetProtocolInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetProtocolInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetProtocolInfo* This);

    ULONG ( *Release)(
        IInternetProtocolInfo* This);


    HRESULT ( *ParseUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl,
        PARSEACTION ParseAction,
        DWORD dwParseFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);

    HRESULT ( *CombineUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzBaseUrl,
        LPCWSTR pwzRelativeUrl,
        DWORD dwCombineFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);

    HRESULT ( *CompareUrl)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl1,
        LPCWSTR pwzUrl2,
        DWORD dwCompareFlags);

    HRESULT ( *QueryInfo)(
        IInternetProtocolInfo* This,
        LPCWSTR pwzUrl,
        QUERYOPTION OueryOption,
        DWORD dwQueryFlags,
        LPVOID pBuffer,
        DWORD cbBuffer,
        DWORD *pcbBuf,
        DWORD dwReserved);

   
} IInternetProtocolInfoVtbl;
struct IInternetProtocolInfo {
    IInternetProtocolInfoVtbl* lpVtbl;
};
# 7132 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetProtocolInfo_ParseUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    PARSEACTION ParseAction,
    DWORD dwParseFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_CombineUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzBaseUrl,
    LPCWSTR pwzRelativeUrl,
    DWORD dwCombineFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_CompareUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwCompareFlags);
void IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_QueryInfo_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    QUERYOPTION OueryOption,
    DWORD dwQueryFlags,
    LPVOID pBuffer,
    DWORD cbBuffer,
    DWORD *pcbBuf,
    DWORD dwReserved);
void IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);





#define PARSE_ENCODE
#define PARSE_DECODE



#define IOInet
#define IOInetBindInfo
#define IOInetBindInfoEx
#define IOInetProtocolRoot
#define IOInetProtocol




#define IOInetProtocolSink
#define IOInetProtocolInfo
#define IOInetSession
#define IOInetPriority
#define IOInetThreadSwitch
#define IOInetProtocolSinkStackable

#define LPOINET
#define LPOINETPROTOCOLINFO
#define LPOINETBINDINFO
#define LPOINETPROTOCOLROOT
#define LPOINETPROTOCOL




#define LPOINETPROTOCOLSINK
#define LPOINETSESSION
#define LPOINETTHREADSWITCH
#define LPOINETPRIORITY
#define LPOINETPROTOCOLINFO
#define LPOINETPROTOCOLSINKSTACKABLE

#define IID_IOInet
#define IID_IOInetBindInfo
#define IID_IOInetBindInfoEx
#define IID_IOInetProtocolRoot
#define IID_IOInetProtocol




#define IID_IOInetProtocolSink
#define IID_IOInetProtocolInfo
#define IID_IOInetSession
#define IID_IOInetPriority
#define IID_IOInetThreadSwitch
#define IID_IOInetProtocolSinkStackable

extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);



extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);




extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags);
extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved);
extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved);
extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved);
extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved);
extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL,IBindCtx *pbc, LPVOID pvReserved,DWORD flags);
# 7322 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest);
extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest);
extern void ReleaseBindInfo(BINDINFO *pbindinfo);

#define INET_E_USE_DEFAULT_PROTOCOLHANDLER
#define INET_E_USE_DEFAULT_SETTING
#define INET_E_DEFAULT_ACTION
#define INET_E_QUERYOPTION_UNKNOWN
#define INET_E_REDIRECTING

#define OInetParseUrl
#define OInetCombineUrl




#define OInetCompareUrl
#define OInetQueryInfo
#define OInetGetSession


#define PROTOCOLFLAG_NO_PICS_CHECK

extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);
extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);

extern const IID CLSID_InternetSecurityManager;
extern const IID CLSID_InternetZoneManager;





#define SID_SInternetSecurityManager






#define SID_SInternetHostSecurityManager


#define _LPINTERNETSECURITYMGRSITE_DEFINED





#define __IInternetSecurityMgrSite_INTERFACE_DEFINED__

extern const GUID IID_IInternetSecurityMgrSite;
# 7389 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetSecurityMgrSiteVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetSecurityMgrSite* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetSecurityMgrSite* This);

    ULONG ( *Release)(
        IInternetSecurityMgrSite* This);


    HRESULT ( *GetWindow)(
        IInternetSecurityMgrSite* This,
        HWND *phwnd);

    HRESULT ( *EnableModeless)(
        IInternetSecurityMgrSite* This,
        WINBOOL fEnable);

   
} IInternetSecurityMgrSiteVtbl;
struct IInternetSecurityMgrSite {
    IInternetSecurityMgrSiteVtbl* lpVtbl;
};
# 7451 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetSecurityMgrSite_GetWindow_Proxy(
    IInternetSecurityMgrSite* This,
    HWND *phwnd);
void IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityMgrSite_EnableModeless_Proxy(
    IInternetSecurityMgrSite* This,
    WINBOOL fEnable);
void IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPINTERNETSECURITYMANANGER_DEFINED





#define __IInternetSecurityManager_INTERFACE_DEFINED__


#define MUTZ_NOSAVEDFILECHECK
#define MUTZ_ISFILE
#define MUTZ_ACCEPT_WILDCARD_SCHEME
#define MUTZ_ENFORCERESTRICTED
#define MUTZ_RESERVED
#define MUTZ_REQUIRESAVEDFILECHECK
#define MUTZ_DONT_UNESCAPE
#define MUTZ_DONT_USE_CACHE
#define MUTZ_FORCE_INTRANET_FLAGS
#define MUTZ_IGNORE_ZONE_MAPPINGS


#define MAX_SIZE_SECURITY_ID


typedef enum __WIDL_urlmon_generated_name_0000000C {
    PUAF_DEFAULT = 0x0,
    PUAF_NOUI = 0x1,
    PUAF_ISFILE = 0x2,
    PUAF_WARN_IF_DENIED = 0x4,
    PUAF_FORCEUI_FOREGROUND = 0x8,
    PUAF_CHECK_TIFS = 0x10,
    PUAF_DONTCHECKBOXINDIALOG = 0x20,
    PUAF_TRUSTED = 0x40,
    PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
    PUAF_ENFORCERESTRICTED = 0x100,
    PUAF_NOSAVEDFILECHECK = 0x200,
    PUAF_REQUIRESAVEDFILECHECK = 0x400,
    PUAF_DONT_USE_CACHE = 0x1000,
    PUAF_RESERVED1 = 0x2000,
    PUAF_RESERVED2 = 0x4000,
    PUAF_LMZ_UNLOCKED = 0x10000,
    PUAF_LMZ_LOCKED = 0x20000,
    PUAF_DEFAULTZONEPOL = 0x40000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
    PUAF_NOUIIFLOCKED = 0x100000,
    PUAF_DRAGPROTOCOLCHECK = 0x200000
} PUAF;
typedef enum __WIDL_urlmon_generated_name_0000000D {
    PUAFOUT_DEFAULT = 0x0,
    PUAFOUT_ISLOCKZONEPOLICY = 0x1
} PUAFOUT;


typedef enum __WIDL_urlmon_generated_name_0000000E {
    SZM_CREATE = 0x0,
    SZM_DELETE = 0x1
} SZM_FLAGS;

extern const GUID IID_IInternetSecurityManager;
# 7587 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetSecurityManagerVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetSecurityManager* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetSecurityManager* This);

    ULONG ( *Release)(
        IInternetSecurityManager* This);


    HRESULT ( *SetSecuritySite)(
        IInternetSecurityManager* This,
        IInternetSecurityMgrSite *pSite);

    HRESULT ( *GetSecuritySite)(
        IInternetSecurityManager* This,
        IInternetSecurityMgrSite **ppSite);

    HRESULT ( *MapUrlToZone)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags);

    HRESULT ( *GetSecurityId)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

    HRESULT ( *ProcessUrlAction)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT ( *QueryCustomPolicy)(
        IInternetSecurityManager* This,
        LPCWSTR pwszUrl,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

    HRESULT ( *SetZoneMapping)(
        IInternetSecurityManager* This,
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags);

    HRESULT ( *GetZoneMappings)(
        IInternetSecurityManager* This,
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags);

   
} IInternetSecurityManagerVtbl;
struct IInternetSecurityManager {
    IInternetSecurityManagerVtbl* lpVtbl;
};
# 7719 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetSecurityManager_SetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite *pSite);
void IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite **ppSite);
void IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_MapUrlToZone_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD *pdwZone,
    DWORD dwFlags);
void IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetSecurityId_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_ProcessUrlAction_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_QueryCustomPolicy_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    const GUID *const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_SetZoneMapping_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    LPCWSTR lpszPattern,
    DWORD dwFlags);
void IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetZoneMappings_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    IEnumString **ppenumString,
    DWORD dwFlags);
void IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 8457 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define _LPINTERNETHOSTSECURITYMANANGER_DEFINED





#define __IInternetHostSecurityManager_INTERFACE_DEFINED__

extern const GUID IID_IInternetHostSecurityManager;
# 8497 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetHostSecurityManagerVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetHostSecurityManager* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetHostSecurityManager* This);

    ULONG ( *Release)(
        IInternetHostSecurityManager* This);


    HRESULT ( *GetSecurityId)(
        IInternetHostSecurityManager* This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

    HRESULT ( *ProcessUrlAction)(
        IInternetHostSecurityManager* This,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT ( *QueryCustomPolicy)(
        IInternetHostSecurityManager* This,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

   
} IInternetHostSecurityManagerVtbl;
struct IInternetHostSecurityManager {
    IInternetHostSecurityManagerVtbl* lpVtbl;
};
# 8580 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetHostSecurityManager_GetSecurityId_Proxy(
    IInternetHostSecurityManager* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetHostSecurityManager_ProcessUrlAction_Proxy(
    IInternetHostSecurityManager* This,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetHostSecurityManager_QueryCustomPolicy_Proxy(
    IInternetHostSecurityManager* This,
    const GUID *const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);





#define URLACTION_MIN

#define URLACTION_DOWNLOAD_MIN
#define URLACTION_DOWNLOAD_SIGNED_ACTIVEX
#define URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX
#define URLACTION_DOWNLOAD_CURR_MAX
#define URLACTION_DOWNLOAD_MAX

#define URLACTION_ACTIVEX_MIN
#define URLACTION_ACTIVEX_RUN
#define URLPOLICY_ACTIVEX_CHECK_LIST
#define URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY
#define URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY
#define URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY
#define URLACTION_SCRIPT_OVERRIDE_SAFETY
#define URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY
#define URLACTION_ACTIVEX_TREATASUNTRUSTED
#define URLACTION_ACTIVEX_NO_WEBOC_SCRIPT
#define URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION
#define URLACTION_ACTIVEX_OVERRIDE_OPTIN
#define URLACTION_ACTIVEX_SCRIPTLET_RUN
#define URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION
#define URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST
#define URLACTION_ACTIVEX_CURR_MAX
#define URLACTION_ACTIVEX_MAX

#define URLACTION_SCRIPT_MIN
#define URLACTION_SCRIPT_RUN
#define URLACTION_SCRIPT_JAVA_USE
#define URLACTION_SCRIPT_SAFE_ACTIVEX
#define URLACTION_CROSS_DOMAIN_DATA
#define URLACTION_SCRIPT_PASTE
#define URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE
#define URLACTION_SCRIPT_XSSFILTER
#define URLACTION_SCRIPT_NAVIGATE
#define URLACTION_PLUGGABLE_PROTOCOL_XHR
#define URLACTION_SCRIPT_CURR_MAX
#define URLACTION_SCRIPT_MAX

#define URLACTION_HTML_MIN
#define URLACTION_HTML_SUBMIT_FORMS
#define URLACTION_HTML_SUBMIT_FORMS_FROM
#define URLACTION_HTML_SUBMIT_FORMS_TO
#define URLACTION_HTML_FONT_DOWNLOAD
#define URLACTION_HTML_JAVA_RUN
#define URLACTION_HTML_USERDATA_SAVE
#define URLACTION_HTML_SUBFRAME_NAVIGATE
#define URLACTION_HTML_META_REFRESH
#define URLACTION_HTML_MIXED_CONTENT
#define URLACTION_HTML_INCLUDE_FILE_PATH
#define URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML
#define URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE
#define URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS
#define URLACTION_HTML_ALLOW_WINDOW_CLOSE
#define URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER
#define URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK
#define URLACTION_HTML_ALLOW_INDEXEDDB

#define URLACTION_HTML_MAX

#define URLACTION_SHELL_MIN
#define URLACTION_SHELL_INSTALL_DTITEMS
#define URLACTION_SHELL_MOVE_OR_COPY
#define URLACTION_SHELL_FILE_DOWNLOAD
#define URLACTION_SHELL_VERB
#define URLACTION_SHELL_WEBVIEW_VERB
#define URLACTION_SHELL_SHELLEXECUTE
# 8706 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define URLACTION_SHELL_CURR_MAX
#define URLACTION_SHELL_MAX

#define URLACTION_NETWORK_MIN

#define URLACTION_CREDENTIALS_USE
#define URLPOLICY_CREDENTIALS_SILENT_LOGON_OK
#define URLPOLICY_CREDENTIALS_MUST_PROMPT_USER
#define URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT
#define URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY

#define URLACTION_AUTHENTICATE_CLIENT
#define URLPOLICY_AUTHENTICATE_CLEARTEXT_OK
#define URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE
#define URLPOLICY_AUTHENTICATE_MUTUAL_ONLY

#define URLACTION_COOKIES
#define URLACTION_COOKIES_SESSION

#define URLACTION_CLIENT_CERT_PROMPT

#define URLACTION_COOKIES_THIRD_PARTY
#define URLACTION_COOKIES_SESSION_THIRD_PARTY

#define URLACTION_COOKIES_ENABLED

#define URLACTION_NETWORK_CURR_MAX
#define URLACTION_NETWORK_MAX

#define URLACTION_JAVA_MIN
#define URLACTION_JAVA_PERMISSIONS
#define URLPOLICY_JAVA_PROHIBIT
#define URLPOLICY_JAVA_HIGH
#define URLPOLICY_JAVA_MEDIUM
#define URLPOLICY_JAVA_LOW
#define URLPOLICY_JAVA_CUSTOM
#define URLACTION_JAVA_CURR_MAX
#define URLACTION_JAVA_MAX

#define URLACTION_INFODELIVERY_MIN
#define URLACTION_INFODELIVERY_NO_ADDING_CHANNELS
#define URLACTION_INFODELIVERY_NO_EDITING_CHANNELS
#define URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS
#define URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS
#define URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS
#define URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS
#define URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING
#define URLACTION_INFODELIVERY_CURR_MAX
#define URLACTION_INFODELIVERY_MAX
#define URLACTION_CHANNEL_SOFTDIST_MIN
#define URLACTION_CHANNEL_SOFTDIST_PERMISSIONS
#define URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT
#define URLPOLICY_CHANNEL_SOFTDIST_PRECACHE
#define URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL
#define URLACTION_CHANNEL_SOFTDIST_MAX
# 8796 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
#define URLACTION_ALLOW_AUDIO_VIDEO
#define URLACTION_ALLOW_ACTIVEX_FILTERING
#define URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING
#define URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS
#define URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT
#define URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION
#define URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW
#define URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS
#define URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST
#define URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS

#define URLPOLICY_ALLOW
#define URLPOLICY_QUERY
#define URLPOLICY_DISALLOW
#define URLPOLICY_NOTIFY_ON_ALLOW
#define URLPOLICY_NOTIFY_ON_DISALLOW
#define URLPOLICY_LOG_ON_ALLOW
#define URLPOLICY_LOG_ON_DISALLOW

#define URLPOLICY_MASK_PERMISSIONS
#define GetUrlPolicyPermissions
#define SetUrlPolicyPermissions

#define URLPOLICY_DONTCHECKDLGBOX






#define _LPINTERNETZONEMANAGER_DEFINED





#define __IInternetZoneManager_INTERFACE_DEFINED__

typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef enum tagURLZONE {
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
} URLZONE;

#define URLZONE_ESC_FLAG

typedef enum tagURLTEMPLATE {
    URLTEMPLATE_CUSTOM = 0x0,
    URLTEMPLATE_PREDEFINED_MIN = 0x10000,
    URLTEMPLATE_LOW = 0x10000,
    URLTEMPLATE_MEDLOW = 0x10500,
    URLTEMPLATE_MEDIUM = 0x11000,
    URLTEMPLATE_MEDHIGH = 0x11500,
    URLTEMPLATE_HIGH = 0x12000,
    URLTEMPLATE_PREDEFINED_MAX = 0x20000
} URLTEMPLATE;

enum {
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200
};


typedef enum __WIDL_urlmon_generated_name_0000000F {
    ZAFLAGS_CUSTOM_EDIT = 0x1,
    ZAFLAGS_ADD_SITES = 0x2,
    ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
    ZAFLAGS_NO_UI = 0x20,
    ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
    ZAFLAGS_UNC_AS_INTRANET = 0x80,
    ZAFLAGS_DETECT_INTRANET = 0x100,
    ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
    ZAFLAGS_NO_CACHE = 0x40000
} ZAFLAGS;

typedef struct _ZONEATTRIBUTES {
    ULONG cbSize;
    WCHAR szDisplayName[260];
    WCHAR szDescription[200];
    WCHAR szIconPath[260];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
} ZONEATTRIBUTES;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;


typedef enum _URLZONEREG {
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2
} URLZONEREG;

extern const GUID IID_IInternetZoneManager;
# 8979 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IInternetZoneManagerVtbl {
   


    HRESULT ( *QueryInterface)(
        IInternetZoneManager* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternetZoneManager* This);

    ULONG ( *Release)(
        IInternetZoneManager* This);


    HRESULT ( *GetZoneAttributes)(
        IInternetZoneManager* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT ( *SetZoneAttributes)(
        IInternetZoneManager* This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT ( *GetZoneCustomPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT ( *SetZoneCustomPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        const GUID *const guidKey,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT ( *GetZoneActionPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT ( *SetZoneActionPolicy)(
        IInternetZoneManager* This,
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT ( *PromptAction)(
        IInternetZoneManager* This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);

    HRESULT ( *LogAction)(
        IInternetZoneManager* This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);

    HRESULT ( *CreateZoneEnumerator)(
        IInternetZoneManager* This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);

    HRESULT ( *GetZoneAt)(
        IInternetZoneManager* This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);

    HRESULT ( *DestroyZoneEnumerator)(
        IInternetZoneManager* This,
        DWORD dwEnum);

    HRESULT ( *CopyTemplatePoliciesToZone)(
        IInternetZoneManager* This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);

   
} IInternetZoneManagerVtbl;
struct IInternetZoneManager {
    IInternetZoneManagerVtbl* lpVtbl;
};
# 9152 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IInternetZoneManager_GetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID *const guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    URLZONEREG urlZoneReg);
void IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID *const guidKey,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_PromptAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    HWND hwndParent,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwPromptFlags);
void IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_LogAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwLogFlags);
void IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_CreateZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD *pdwEnum,
    DWORD *pdwCount,
    DWORD dwFlags);
void IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneAt_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum,
    DWORD dwIndex,
    DWORD *pdwZone);
void IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_DestroyZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum);
void IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(
    IInternetZoneManager* This,
    DWORD dwTemplate,
    DWORD dwZone,
    DWORD dwReserved);
void IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 9886 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
extern const IID CLSID_SoftDistExt;


#define _LPSOFTDISTEXT_DEFINED

#define SOFTDIST_FLAG_USAGE_EMAIL
#define SOFTDIST_FLAG_USAGE_PRECACHE
#define SOFTDIST_FLAG_USAGE_AUTOINSTALL
#define SOFTDIST_FLAG_DELETE_SUBSCRIPTION

#define SOFTDIST_ADSTATE_NONE
#define SOFTDIST_ADSTATE_AVAILABLE
#define SOFTDIST_ADSTATE_DOWNLOADED
#define SOFTDIST_ADSTATE_INSTALLED

typedef struct _tagCODEBASEHOLD {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
} CODEBASEHOLD;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
} SOFTDISTINFO;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;





#define __ISoftDistExt_INTERFACE_DEFINED__

extern const GUID IID_ISoftDistExt;
# 9963 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct ISoftDistExtVtbl {
   


    HRESULT ( *QueryInterface)(
        ISoftDistExt* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISoftDistExt* This);

    ULONG ( *Release)(
        ISoftDistExt* This);


    HRESULT ( *ProcessSoftDist)(
        ISoftDistExt* This,
        LPCWSTR szCDFURL,
        IXMLElement *pSoftDistElement,
        LPSOFTDISTINFO lpsdi);

    HRESULT ( *GetFirstCodeBase)(
        ISoftDistExt* This,
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);

    HRESULT ( *GetNextCodeBase)(
        ISoftDistExt* This,
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);

    HRESULT ( *AsyncInstallDistributionUnit)(
        ISoftDistExt* This,
        IBindCtx *pbc,
        LPVOID pvReserved,
        DWORD flags,
        LPCODEBASEHOLD lpcbh);

   
} ISoftDistExtVtbl;
struct ISoftDistExt {
    ISoftDistExtVtbl* lpVtbl;
};
# 10048 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT ISoftDistExt_ProcessSoftDist_Proxy(
    ISoftDistExt* This,
    LPCWSTR szCDFURL,
    IXMLElement *pSoftDistElement,
    LPSOFTDISTINFO lpsdi);
void ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISoftDistExt_GetFirstCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISoftDistExt_GetNextCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ISoftDistExt_AsyncInstallDistributionUnit_Proxy(
    ISoftDistExt* This,
    IBindCtx *pbc,
    LPVOID pvReserved,
    DWORD flags,
    LPCODEBASEHOLD lpcbh);
void ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi);
extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS);



#define _LPCATALOGFILEINFO_DEFINED





#define __ICatalogFileInfo_INTERFACE_DEFINED__

typedef ICatalogFileInfo *LPCATALOGFILEINFO;

extern const GUID IID_ICatalogFileInfo;
# 10122 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct ICatalogFileInfoVtbl {
   


    HRESULT ( *QueryInterface)(
        ICatalogFileInfo* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICatalogFileInfo* This);

    ULONG ( *Release)(
        ICatalogFileInfo* This);


    HRESULT ( *GetCatalogFile)(
        ICatalogFileInfo* This,
        LPSTR *ppszCatalogFile);

    HRESULT ( *GetJavaTrust)(
        ICatalogFileInfo* This,
        void **ppJavaTrust);

   
} ICatalogFileInfoVtbl;
struct ICatalogFileInfo {
    ICatalogFileInfoVtbl* lpVtbl;
};
# 10184 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT ICatalogFileInfo_GetCatalogFile_Proxy(
    ICatalogFileInfo* This,
    LPSTR *ppszCatalogFile);
void ICatalogFileInfo_GetCatalogFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT ICatalogFileInfo_GetJavaTrust_Proxy(
    ICatalogFileInfo* This,
    void **ppJavaTrust);
void ICatalogFileInfo_GetJavaTrust_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPDATAFILTER_DEFINED





#define __IDataFilter_INTERFACE_DEFINED__

typedef IDataFilter *LPDATAFILTER;

extern const GUID IID_IDataFilter;
# 10251 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IDataFilterVtbl {
   


    HRESULT ( *QueryInterface)(
        IDataFilter* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDataFilter* This);

    ULONG ( *Release)(
        IDataFilter* This);


    HRESULT ( *DoEncode)(
        IDataFilter* This,
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved);

    HRESULT ( *DoDecode)(
        IDataFilter* This,
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved);

    HRESULT ( *SetEncodingLevel)(
        IDataFilter* This,
        DWORD dwEncLevel);

   
} IDataFilterVtbl;
struct IDataFilter {
    IDataFilterVtbl* lpVtbl;
};
# 10337 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IDataFilter_DoEncode_Proxy(
    IDataFilter* This,
    DWORD dwFlags,
    LONG lInBufferSize,
    BYTE *pbInBuffer,
    LONG lOutBufferSize,
    BYTE *pbOutBuffer,
    LONG lInBytesAvailable,
    LONG *plInBytesRead,
    LONG *plOutBytesWritten,
    DWORD dwReserved);
void IDataFilter_DoEncode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataFilter_DoDecode_Proxy(
    IDataFilter* This,
    DWORD dwFlags,
    LONG lInBufferSize,
    BYTE *pbInBuffer,
    LONG lOutBufferSize,
    BYTE *pbOutBuffer,
    LONG lInBytesAvailable,
    LONG *plInBytesRead,
    LONG *plOutBytesWritten,
    DWORD dwReserved);
void IDataFilter_DoDecode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IDataFilter_SetEncodingLevel_Proxy(
    IDataFilter* This,
    DWORD dwEncLevel);
void IDataFilter_SetEncodingLevel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPENCODINGFILTERFACTORY_DEFINED

typedef struct _tagPROTOCOLFILTERDATA {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
} PROTOCOLFILTERDATA;





#define __IEncodingFilterFactory_INTERFACE_DEFINED__

typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
} DATAINFO;

extern const GUID IID_IEncodingFilterFactory;
# 10429 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IEncodingFilterFactoryVtbl {
   


    HRESULT ( *QueryInterface)(
        IEncodingFilterFactory* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEncodingFilterFactory* This);

    ULONG ( *Release)(
        IEncodingFilterFactory* This);


    HRESULT ( *FindBestFilter)(
        IEncodingFilterFactory* This,
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        DATAINFO info,
        IDataFilter **ppDF);

    HRESULT ( *GetDefaultFilter)(
        IEncodingFilterFactory* This,
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        IDataFilter **ppDF);

   
} IEncodingFilterFactoryVtbl;
struct IEncodingFilterFactory {
    IEncodingFilterFactoryVtbl* lpVtbl;
};
# 10496 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IEncodingFilterFactory_FindBestFilter_Proxy(
    IEncodingFilterFactory* This,
    LPCWSTR pwzCodeIn,
    LPCWSTR pwzCodeOut,
    DATAINFO info,
    IDataFilter **ppDF);
void IEncodingFilterFactory_FindBestFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEncodingFilterFactory_GetDefaultFilter_Proxy(
    IEncodingFilterFactory* This,
    LPCWSTR pwzCodeIn,
    LPCWSTR pwzCodeOut,
    IDataFilter **ppDF);
void IEncodingFilterFactory_GetDefaultFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _HITLOGGING_DEFINED

WINBOOL IsLoggingEnabledA(LPCSTR pszUrl);
WINBOOL IsLoggingEnabledW(LPCWSTR pwszUrl);

#define IsLoggingEnabled
typedef struct _tagHIT_LOGGING_INFO {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
} HIT_LOGGING_INFO;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

WINBOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo);

#define CONFIRMSAFETYACTION_LOADOBJECT

struct CONFIRMSAFETY {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
};


extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;



#define _LPIWRAPPEDPROTOCOL_DEFINED





#define __IWrappedProtocol_INTERFACE_DEFINED__

typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;

extern const GUID IID_IWrappedProtocol;
# 10577 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IWrappedProtocolVtbl {
   


    HRESULT ( *QueryInterface)(
        IWrappedProtocol* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWrappedProtocol* This);

    ULONG ( *Release)(
        IWrappedProtocol* This);


    HRESULT ( *GetWrapperCode)(
        IWrappedProtocol* This,
        LONG *pnCode,
        DWORD_PTR dwReserved);

   
} IWrappedProtocolVtbl;
struct IWrappedProtocol {
    IWrappedProtocolVtbl* lpVtbl;
};
# 10632 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IWrappedProtocol_GetWrapperCode_Proxy(
    IWrappedProtocol* This,
    LONG *pnCode,
    DWORD_PTR dwReserved);
void IWrappedProtocol_GetWrapperCode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _LPGETBINDHANDLE_DEFINED





#define __IGetBindHandle_INTERFACE_DEFINED__

typedef IGetBindHandle *LPGETBINDHANDLE;

typedef enum __WIDL_urlmon_generated_name_00000010 {
    BINDHANDLETYPES_APPCACHE = 0x0,
    BINDHANDLETYPES_DEPENDENCY = 0x1,
    BINDHANDLETYPES_COUNT = 0x2
} BINDHANDLETYPES;

extern const GUID IID_IGetBindHandle;
# 10677 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IGetBindHandleVtbl {
   


    HRESULT ( *QueryInterface)(
        IGetBindHandle* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IGetBindHandle* This);

    ULONG ( *Release)(
        IGetBindHandle* This);


    HRESULT ( *GetBindHandle)(
        IGetBindHandle* This,
        BINDHANDLETYPES enumRequestedHandle,
        HANDLE *pRetHandle);

   
} IGetBindHandleVtbl;
struct IGetBindHandle {
    IGetBindHandleVtbl* lpVtbl;
};
# 10732 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IGetBindHandle_GetBindHandle_Proxy(
    IGetBindHandle* This,
    BINDHANDLETYPES enumRequestedHandle,
    HANDLE *pRetHandle);
void IGetBindHandle_GetBindHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






#define _XHRPLUGGABLEPROTOCOL_DEFINED

typedef struct _tagPROTOCOL_ARGUMENT {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
} PROTOCOL_ARGUMENT;
typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;



#define _LPBINDCALLBACKREDIRECT_DEFINED





#define __IBindCallbackRedirect_INTERFACE_DEFINED__

typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;

extern const GUID IID_IBindCallbackRedirect;
# 10781 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
typedef struct IBindCallbackRedirectVtbl {
   


    HRESULT ( *QueryInterface)(
        IBindCallbackRedirect* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindCallbackRedirect* This);

    ULONG ( *Release)(
        IBindCallbackRedirect* This);


    HRESULT ( *Redirect)(
        IBindCallbackRedirect* This,
        LPCWSTR lpcUrl,
        VARIANT_BOOL *vbCancel);

   
} IBindCallbackRedirectVtbl;
struct IBindCallbackRedirect {
    IBindCallbackRedirectVtbl* lpVtbl;
};
# 10836 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
HRESULT IBindCallbackRedirect_Redirect_Proxy(
    IBindCallbackRedirect* This,
    LPCWSTR lpcUrl,
    VARIANT_BOOL *vbCancel);
void IBindCallbackRedirect_Redirect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 10853 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/urlmon.h" 3
ULONG STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG HWND_UserSize (ULONG *, ULONG, HWND *);
unsigned char * HWND_UserMarshal (ULONG *, unsigned char *, HWND *);
unsigned char * HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void HWND_UserFree (ULONG *, HWND *);
ULONG BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void BSTR_UserFree (ULONG *, BSTR *);
# 164 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3



#define __propidl_h__




#define __IPropertyStorage_FWD_DEFINED__
typedef struct IPropertyStorage IPropertyStorage;



#define __IPropertySetStorage_FWD_DEFINED__
typedef struct IPropertySetStorage IPropertySetStorage;



#define __IEnumSTATPROPSTG_FWD_DEFINED__
typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;



#define __IEnumSTATPROPSETSTG_FWD_DEFINED__
typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 43 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objidl.h" 2 3
# 44 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 45 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 2 3
# 75 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
typedef struct tagVersionedStream {
    GUID guidVersion;
    IStream *pStream;
} VERSIONEDSTREAM;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;

#define PROPSETFLAG_DEFAULT

#define PROPSETFLAG_NONSIMPLE

#define PROPSETFLAG_ANSI

#define PROPSETFLAG_UNBUFFERED

#define PROPSETFLAG_CASE_SENSITIVE


#define PROPSET_BEHAVIOR_CASE_SENSITIVE





typedef struct tagPROPVARIANT PROPVARIANT;


typedef struct tagCAC {
    ULONG cElems;
    CHAR *pElems;
} CAC;
typedef struct tagCAUB {
    ULONG cElems;
    UCHAR *pElems;
} CAUB;
typedef struct tagCAI {
    ULONG cElems;
    SHORT *pElems;
} CAI;
typedef struct tagCAUI {
    ULONG cElems;
    USHORT *pElems;
} CAUI;
typedef struct tagCAL {
    ULONG cElems;
    LONG *pElems;
} CAL;
typedef struct tagCAUL {
    ULONG cElems;
    ULONG *pElems;
} CAUL;
typedef struct tagCAFLT {
    ULONG cElems;
    FLOAT *pElems;
} CAFLT;
typedef struct tagCADBL {
    ULONG cElems;
    DOUBLE *pElems;
} CADBL;
typedef struct tagCACY {
    ULONG cElems;
    CY *pElems;
} CACY;
typedef struct tagCADATE {
    ULONG cElems;
    DATE *pElems;
} CADATE;
typedef struct tagCABSTR {
    ULONG cElems;
    BSTR *pElems;
} CABSTR;
typedef struct tagCABSTRBLOB {
    ULONG cElems;
    BSTRBLOB *pElems;
} CABSTRBLOB;
typedef struct tagCABOOL {
    ULONG cElems;
    VARIANT_BOOL *pElems;
} CABOOL;
typedef struct tagCASCODE {
    ULONG cElems;
    SCODE *pElems;
} CASCODE;
typedef struct tagCAPROPVARIANT {
    ULONG cElems;
    PROPVARIANT *pElems;
} CAPROPVARIANT;
typedef struct tagCAH {
    ULONG cElems;
    LARGE_INTEGER *pElems;
} CAH;
typedef struct tagCAUH {
    ULONG cElems;
    ULARGE_INTEGER *pElems;
} CAUH;
typedef struct tagCALPSTR {
    ULONG cElems;
    LPSTR *pElems;
} CALPSTR;
typedef struct tagCALPWSTR {
    ULONG cElems;
    LPWSTR *pElems;
} CALPWSTR;
typedef struct tagCAFILETIME {
    ULONG cElems;
    FILETIME *pElems;
} CAFILETIME;
typedef struct tagCACLIPDATA {
    ULONG cElems;
    CLIPDATA *pElems;
} CACLIPDATA;
typedef struct tagCACLSID {
    ULONG cElems;
    CLSID *pElems;
} CACLSID;






typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;

#define tag_inner_PROPVARIANT


  struct tagPROPVARIANT {
    __extension__ union {
      __extension__
struct {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
    __extension__ union {
        CHAR cVal;
        UCHAR bVal;
        SHORT iVal;
        USHORT uiVal;
        LONG lVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        LARGE_INTEGER hVal;
        ULARGE_INTEGER uhVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        FILETIME filetime;
        CLSID *puuid;
        CLIPDATA *pclipdata;
        BSTR bstrVal;
        BSTRBLOB bstrblobVal;
        BLOB blob;
        LPSTR pszVal;
        LPWSTR pwszVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        IStream *pStream;
        IStorage *pStorage;
        LPVERSIONEDSTREAM pVersionedStream;
        LPSAFEARRAY parray;
        CAC cac;
        CAUB caub;
        CAI cai;
        CAUI caui;
        CAL cal;
        CAUL caul;
        CAH cah;
        CAUH cauh;
        CAFLT caflt;
        CADBL cadbl;
        CABOOL cabool;
        CASCODE cascode;
        CACY cacy;
        CADATE cadate;
        CAFILETIME cafiletime;
        CACLSID cauuid;
        CACLIPDATA caclipdata;
        CABSTR cabstr;
        CABSTRBLOB cabstrblob;
        CALPSTR calpstr;
        CALPWSTR calpwstr;
        CAPROPVARIANT capropvar;
        CHAR *pcVal;
        UCHAR *pbVal;
        SHORT *piVal;
        USHORT *puiVal;
        LONG *plVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        DECIMAL *pdecVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        LPSAFEARRAY *pparray;
        PROPVARIANT *pvarVal;
    } ;
};

    DECIMAL decVal;
  };
};





typedef struct tagPROPVARIANT * LPPROPVARIANT;


#define _REFPROPVARIANT_DEFINED



#define REFPROPVARIANT




#define PID_DICTIONARY

#define PID_CODEPAGE

#define PID_FIRST_USABLE

#define PID_FIRST_NAME_DEFAULT

#define PID_LOCALE

#define PID_MODIFY_TIME

#define PID_SECURITY

#define PID_BEHAVIOR

#define PID_ILLEGAL


#define PID_MIN_READONLY

#define PID_MAX_READONLY





#define PIDDI_THUMBNAIL

#define PIDSI_TITLE
#define PIDSI_SUBJECT
#define PIDSI_AUTHOR
#define PIDSI_KEYWORDS
#define PIDSI_COMMENTS
#define PIDSI_TEMPLATE
#define PIDSI_LASTAUTHOR
#define PIDSI_REVNUMBER
#define PIDSI_EDITTIME
#define PIDSI_LASTPRINTED
#define PIDSI_CREATE_DTM
#define PIDSI_LASTSAVE_DTM
#define PIDSI_PAGECOUNT
#define PIDSI_WORDCOUNT
#define PIDSI_CHARCOUNT
#define PIDSI_THUMBNAIL
#define PIDSI_APPNAME
#define PIDSI_DOC_SECURITY

#define PIDDSI_CATEGORY
#define PIDDSI_PRESFORMAT
#define PIDDSI_BYTECOUNT
#define PIDDSI_LINECOUNT
#define PIDDSI_PARCOUNT
#define PIDDSI_SLIDECOUNT
#define PIDDSI_NOTECOUNT
#define PIDDSI_HIDDENCOUNT
#define PIDDSI_MMCLIPCOUNT
#define PIDDSI_SCALE
#define PIDDSI_HEADINGPAIR
#define PIDDSI_DOCPARTS
#define PIDDSI_MANAGER
#define PIDDSI_COMPANY
#define PIDDSI_LINKSDIRTY

#define PIDMSI_EDITOR
#define PIDMSI_SUPPLIER
#define PIDMSI_SOURCE
#define PIDMSI_SEQUENCE_NO
#define PIDMSI_PROJECT
#define PIDMSI_STATUS
#define PIDMSI_OWNER
#define PIDMSI_RATING
#define PIDMSI_PRODUCTION
#define PIDMSI_COPYRIGHT

enum PIDMSI_STATUS_VALUE {
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 0x7fff
};




#define PRSPEC_INVALID

#define PRSPEC_LPWSTR

#define PRSPEC_PROPID


typedef struct tagPROPSPEC {
    ULONG ulKind;
    __extension__ union {
        PROPID propid;
        LPOLESTR lpwstr;
    } ;
} PROPSPEC;

typedef struct tagSTATPROPSTG {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
} STATPROPSTG;

#define PROPSETHDR_OSVER_KIND
#define PROPSETHDR_OSVER_MAJOR
#define PROPSETHDR_OSVER_MINOR
#define PROPSETHDR_OSVERSION_UNKNOWN

typedef struct tagSTATPROPSETSTG {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
} STATPROPSETSTG;





#define __IPropertyStorage_INTERFACE_DEFINED__

extern const GUID IID_IPropertyStorage;
# 498 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
typedef struct IPropertyStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IPropertyStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertyStorage* This);

    ULONG ( *Release)(
        IPropertyStorage* This);


    HRESULT ( *ReadMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        PROPVARIANT rgpropvar[]);

    HRESULT ( *WriteMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        const PROPVARIANT rgpropvar[],
        PROPID propidNameFirst);

    HRESULT ( *DeleteMultiple)(
        IPropertyStorage* This,
        ULONG cpspec,
        const PROPSPEC rgpspec[]);

    HRESULT ( *ReadPropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[],
        LPOLESTR rglpwstrName[]);

    HRESULT ( *WritePropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[],
        const LPOLESTR rglpwstrName[]);

    HRESULT ( *DeletePropertyNames)(
        IPropertyStorage* This,
        ULONG cpropid,
        const PROPID rgpropid[]);

    HRESULT ( *Commit)(
        IPropertyStorage* This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IPropertyStorage* This);

    HRESULT ( *Enum)(
        IPropertyStorage* This,
        IEnumSTATPROPSTG **ppenum);

    HRESULT ( *SetTimes)(
        IPropertyStorage* This,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT ( *SetClass)(
        IPropertyStorage* This,
        const IID *const clsid);

    HRESULT ( *Stat)(
        IPropertyStorage* This,
        STATPROPSETSTG *pstatpsstg);

   
} IPropertyStorageVtbl;
struct IPropertyStorage {
    IPropertyStorageVtbl* lpVtbl;
};
# 652 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
HRESULT IPropertyStorage_ReadMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    PROPVARIANT rgpropvar[]);
void IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_WriteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    const PROPVARIANT rgpropvar[],
    PROPID propidNameFirst);
void IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_DeleteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[]);
void IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_ReadPropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    LPOLESTR rglpwstrName[]);
void IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_WritePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    const LPOLESTR rglpwstrName[]);
void IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_DeletePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[]);
void IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Commit_Proxy(
    IPropertyStorage* This,
    DWORD grfCommitFlags);
void IPropertyStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Revert_Proxy(
    IPropertyStorage* This);
void IPropertyStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Enum_Proxy(
    IPropertyStorage* This,
    IEnumSTATPROPSTG **ppenum);
void IPropertyStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_SetTimes_Proxy(
    IPropertyStorage* This,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_SetClass_Proxy(
    IPropertyStorage* This,
    const IID *const clsid);
void IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Stat_Proxy(
    IPropertyStorage* This,
    STATPROPSETSTG *pstatpsstg);
void IPropertyStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 768 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
#define __IPropertySetStorage_INTERFACE_DEFINED__

typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;

extern const GUID IID_IPropertySetStorage;
# 800 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
typedef struct IPropertySetStorageVtbl {
   


    HRESULT ( *QueryInterface)(
        IPropertySetStorage* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertySetStorage* This);

    ULONG ( *Release)(
        IPropertySetStorage* This);


    HRESULT ( *Create)(
        IPropertySetStorage* This,
        const IID *const rfmtid,
        const CLSID *pclsid,
        DWORD grfFlags,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT ( *Open)(
        IPropertySetStorage* This,
        const IID *const rfmtid,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT ( *Delete)(
        IPropertySetStorage* This,
        const IID *const rfmtid);

    HRESULT ( *Enum)(
        IPropertySetStorage* This,
        IEnumSTATPROPSETSTG **ppenum);

   
} IPropertySetStorageVtbl;
struct IPropertySetStorage {
    IPropertySetStorageVtbl* lpVtbl;
};
# 884 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
HRESULT IPropertySetStorage_Create_Proxy(
    IPropertySetStorage* This,
    const IID *const rfmtid,
    const CLSID *pclsid,
    DWORD grfFlags,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void IPropertySetStorage_Create_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Open_Proxy(
    IPropertySetStorage* This,
    const IID *const rfmtid,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void IPropertySetStorage_Open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Delete_Proxy(
    IPropertySetStorage* This,
    const IID *const rfmtid);
void IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Enum_Proxy(
    IPropertySetStorage* This,
    IEnumSTATPROPSETSTG **ppenum);
void IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
# 930 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
#define __IEnumSTATPROPSTG_INTERFACE_DEFINED__

typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;

extern const GUID IID_IEnumSTATPROPSTG;
# 958 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
typedef struct IEnumSTATPROPSTGVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumSTATPROPSTG* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATPROPSTG* This);

    ULONG ( *Release)(
        IEnumSTATPROPSTG* This);


    HRESULT ( *Next)(
        IEnumSTATPROPSTG* This,
        ULONG celt,
        STATPROPSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATPROPSTG* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATPROPSTG* This);

    HRESULT ( *Clone)(
        IEnumSTATPROPSTG* This,
        IEnumSTATPROPSTG **ppenum);

   
} IEnumSTATPROPSTGVtbl;
struct IEnumSTATPROPSTG {
    IEnumSTATPROPSTGVtbl* lpVtbl;
};
# 1037 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
void IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Skip_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt);
void IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Reset_Proxy(
    IEnumSTATPROPSTG* This);
void IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Clone_Proxy(
    IEnumSTATPROPSTG* This,
    IEnumSTATPROPSTG **ppenum);
void IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumSTATPROPSTG_Next_Stub(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
# 1088 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
#define __IEnumSTATPROPSETSTG_INTERFACE_DEFINED__

typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;

extern const GUID IID_IEnumSTATPROPSETSTG;
# 1116 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
typedef struct IEnumSTATPROPSETSTGVtbl {
   


    HRESULT ( *QueryInterface)(
        IEnumSTATPROPSETSTG* This,
        const IID *const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATPROPSETSTG* This);

    ULONG ( *Release)(
        IEnumSTATPROPSETSTG* This);


    HRESULT ( *Next)(
        IEnumSTATPROPSETSTG* This,
        ULONG celt,
        STATPROPSETSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATPROPSETSTG* This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATPROPSETSTG* This);

    HRESULT ( *Clone)(
        IEnumSTATPROPSETSTG* This,
        IEnumSTATPROPSETSTG **ppenum);

   
} IEnumSTATPROPSETSTGVtbl;
struct IEnumSTATPROPSETSTG {
    IEnumSTATPROPSETSTGVtbl* lpVtbl;
};
# 1195 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
void IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Skip_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt);
void IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Reset_Proxy(
    IEnumSTATPROPSETSTG* This);
void IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Clone_Proxy(
    IEnumSTATPROPSETSTG* This,
    IEnumSTATPROPSETSTG **ppenum);
void IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
HRESULT IEnumSTATPROPSETSTG_Next_Stub(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);




typedef IPropertyStorage *LPPROPERTYSTORAGE;

  extern __attribute__((dllimport)) HRESULT PropVariantCopy(PROPVARIANT *pvarDest,const PROPVARIANT *pvarSrc);
  extern __attribute__((dllimport)) HRESULT PropVariantClear(PROPVARIANT *pvar);
  extern __attribute__((dllimport)) HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars);

#define _PROPVARIANTINIT_DEFINED_



#define PropVariantInit



  extern __attribute__((dllimport)) HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
  extern __attribute__((dllimport)) HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
  extern __attribute__((dllimport)) HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);

#define CCH_MAX_PROPSTG_NAME

  extern __attribute__((dllimport)) HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName);
  extern __attribute__((dllimport)) HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid);



#define _SERIALIZEDPROPERTYVALUE_DEFINED_
typedef struct tagSERIALIZEDPROPERTYVALUE {
  DWORD dwType;
  BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;




extern SERIALIZEDPROPERTYVALUE * StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect);
# 1287 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/propidl.h" 3
ULONG BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void BSTR_UserFree (ULONG *, BSTR *);
ULONG LPSAFEARRAY_UserSize (ULONG *, ULONG, LPSAFEARRAY *);
unsigned char * LPSAFEARRAY_UserMarshal (ULONG *, unsigned char *, LPSAFEARRAY *);
unsigned char * LPSAFEARRAY_UserUnmarshal(ULONG *, unsigned char *, LPSAFEARRAY *);
void LPSAFEARRAY_UserFree (ULONG *, LPSAFEARRAY *);
# 165 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3


extern __attribute__((dllimport)) HRESULT CreateStdProgressIndicator (HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc);



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 172 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/objbase.h" 2 3
# 18 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleauto.h" 1 3






#define _OLEAUTO_H_


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleauto.h" 2 3






#define WINOLEAUTAPI
#define WINOLEAUTAPI_


extern const IID IID_StdOle;

#define STDOLE_MAJORVERNUM
#define STDOLE_MINORVERNUM
#define STDOLE_LCID

#define STDOLE2_MAJORVERNUM
#define STDOLE2_MINORVERNUM
#define STDOLE2_LCID
# 41 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleauto.h" 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oaidl.h" 2 3
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleauto.h" 2 3

extern __attribute__((dllimport)) BSTR SysAllocString(const OLECHAR *);
extern __attribute__((dllimport)) INT SysReAllocString(BSTR *,const OLECHAR *);
extern __attribute__((dllimport)) BSTR SysAllocStringLen(const OLECHAR *,UINT);
extern __attribute__((dllimport)) INT SysReAllocStringLen(BSTR *,const OLECHAR *,UINT);
extern __attribute__((dllimport)) void SysFreeString(BSTR);
extern __attribute__((dllimport)) UINT SysStringLen(BSTR);
extern __attribute__((dllimport)) UINT SysStringByteLen(BSTR bstr);
extern __attribute__((dllimport)) BSTR SysAllocStringByteLen(LPCSTR psz,UINT len);
extern __attribute__((dllimport)) INT DosDateTimeToVariantTime(USHORT wDosDate,USHORT wDosTime,DOUBLE *pvtime);
extern __attribute__((dllimport)) INT VariantTimeToDosDateTime(DOUBLE vtime,USHORT *pwDosDate,USHORT *pwDosTime);
extern __attribute__((dllimport)) INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime,DOUBLE *pvtime);
extern __attribute__((dllimport)) INT VariantTimeToSystemTime(DOUBLE vtime,LPSYSTEMTIME lpSystemTime);
extern __attribute__((dllimport)) HRESULT SafeArrayAllocDescriptor(UINT cDims,SAFEARRAY **ppsaOut);
extern __attribute__((dllimport)) HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt,UINT cDims,SAFEARRAY **ppsaOut);
extern __attribute__((dllimport)) HRESULT SafeArrayAllocData(SAFEARRAY *psa);
extern __attribute__((dllimport)) SAFEARRAY * SafeArrayCreate(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound);
extern __attribute__((dllimport)) SAFEARRAY * SafeArrayCreateEx(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound,PVOID pvExtra);
extern __attribute__((dllimport)) HRESULT SafeArrayCopyData(SAFEARRAY *psaSource,SAFEARRAY *psaTarget);
extern __attribute__((dllimport)) HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayDestroyData(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayDestroy(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayRedim(SAFEARRAY *psa,SAFEARRAYBOUND *psaboundNew);
extern __attribute__((dllimport)) UINT SafeArrayGetDim(SAFEARRAY *psa);
extern __attribute__((dllimport)) UINT SafeArrayGetElemsize(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayGetUBound(SAFEARRAY *psa,UINT nDim,LONG *plUbound);
extern __attribute__((dllimport)) HRESULT SafeArrayGetLBound(SAFEARRAY *psa,UINT nDim,LONG *plLbound);
extern __attribute__((dllimport)) HRESULT SafeArrayLock(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayUnlock(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayAccessData(SAFEARRAY *psa,void **ppvData);
extern __attribute__((dllimport)) HRESULT SafeArrayUnaccessData(SAFEARRAY *psa);
extern __attribute__((dllimport)) HRESULT SafeArrayGetElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
extern __attribute__((dllimport)) HRESULT SafeArrayPutElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
extern __attribute__((dllimport)) HRESULT SafeArrayCopy(SAFEARRAY *psa,SAFEARRAY **ppsaOut);
extern __attribute__((dllimport)) HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa,LONG *rgIndices,void **ppvData);
extern __attribute__((dllimport)) HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa,IRecordInfo *prinfo);
extern __attribute__((dllimport)) HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa,IRecordInfo **prinfo);
extern __attribute__((dllimport)) HRESULT SafeArraySetIID(SAFEARRAY *psa,const GUID *const guid);
extern __attribute__((dllimport)) HRESULT SafeArrayGetIID(SAFEARRAY *psa,GUID *pguid);
extern __attribute__((dllimport)) HRESULT SafeArrayGetVartype(SAFEARRAY *psa,VARTYPE *pvt);
extern __attribute__((dllimport)) SAFEARRAY * SafeArrayCreateVector(VARTYPE vt,LONG lLbound,ULONG cElements);
extern __attribute__((dllimport)) SAFEARRAY * SafeArrayCreateVectorEx(VARTYPE vt,LONG lLbound,ULONG cElements,PVOID pvExtra);
extern __attribute__((dllimport)) void VariantInit(VARIANTARG *pvarg);
extern __attribute__((dllimport)) HRESULT VariantClear(VARIANTARG *pvarg);
extern __attribute__((dllimport)) HRESULT VariantCopy(VARIANTARG *pvargDest,VARIANTARG *pvargSrc);
extern __attribute__((dllimport)) HRESULT VariantCopyInd(VARIANT *pvarDest,VARIANTARG *pvargSrc);
extern __attribute__((dllimport)) HRESULT VariantChangeType(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,USHORT wFlags,VARTYPE vt);
extern __attribute__((dllimport)) HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,LCID lcid,USHORT wFlags,VARTYPE vt);

#define VARIANT_NOVALUEPROP
#define VARIANT_ALPHABOOL
#define VARIANT_NOUSEROVERRIDE
#define VARIANT_CALENDAR_HIJRI
#define VARIANT_LOCALBOOL
#define VARIANT_CALENDAR_THAI
#define VARIANT_CALENDAR_GREGORIAN
#define VARIANT_USE_NLS

extern __attribute__((dllimport)) HRESULT VectorFromBstr (BSTR bstr,SAFEARRAY **ppsa);
extern __attribute__((dllimport)) HRESULT BstrFromVector (SAFEARRAY *psa,BSTR *pbstr);

#define VAR_TIMEVALUEONLY
#define VAR_DATEVALUEONLY
#define VAR_VALIDDATE
#define VAR_CALENDAR_HIJRI
#define VAR_LOCALBOOL
#define VAR_FORMAT_NOSUBSTITUTE
#define VAR_FOURDIGITYEARS


#define LOCALE_USE_NLS


#define VAR_CALENDAR_THAI
#define VAR_CALENDAR_GREGORIAN

#define VTDATEGRE_MAX
#define VTDATEGRE_MIN

extern __attribute__((dllimport)) HRESULT VarUI1FromI2(SHORT sIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromI4(LONG lIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromI8(LONG64 i64In,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromR4(FLOAT fltIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromR8(DOUBLE dblIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromCy(CY cyIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromDate(DATE dateIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromDisp(IDispatch *pdispIn,LCID lcid,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromBool(VARIANT_BOOL boolIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromI1(CHAR cIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromUI2(USHORT uiIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromUI4(ULONG ulIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromUI8(ULONG64 ui64In,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarUI1FromDec(DECIMAL *pdecIn,BYTE *pbOut);
extern __attribute__((dllimport)) HRESULT VarI2FromUI1(BYTE bIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromI4(LONG lIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromI8(LONG64 i64In,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromR4(FLOAT fltIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromR8(DOUBLE dblIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromCy(CY cyIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromDate(DATE dateIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromDisp(IDispatch *pdispIn,LCID lcid,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromBool(VARIANT_BOOL boolIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromI1(CHAR cIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromUI2(USHORT uiIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromUI4(ULONG ulIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromUI8(ULONG64 ui64In,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI2FromDec(DECIMAL *pdecIn,SHORT *psOut);
extern __attribute__((dllimport)) HRESULT VarI4FromUI1(BYTE bIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromI2(SHORT sIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromI8(LONG64 i64In,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromR4(FLOAT fltIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromR8(DOUBLE dblIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromCy(CY cyIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromDate(DATE dateIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromDisp(IDispatch *pdispIn,LCID lcid,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromBool(VARIANT_BOOL boolIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromI1(CHAR cIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromUI2(USHORT uiIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromUI4(ULONG ulIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromUI8(ULONG64 ui64In,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromDec(DECIMAL *pdecIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromInt(INT intIn,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI8FromUI1(BYTE bIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromI2(SHORT sIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromI4(LONG lIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromR4(FLOAT fltIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromR8(DOUBLE dblIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromCy(CY cyIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromDate(DATE dateIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromDisp(IDispatch *pdispIn,LCID lcid,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromBool(VARIANT_BOOL boolIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromI1(CHAR cIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromUI2(USHORT uiIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromUI4(ULONG ulIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromUI8(ULONG64 ui64In,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromDec(DECIMAL *pdecIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarI8FromInt(INT intIn,LONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarR4FromUI1(BYTE bIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromI2(SHORT sIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromI4(LONG lIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromI8(LONG64 i64In,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromR8(DOUBLE dblIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromCy(CY cyIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromDate(DATE dateIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromDisp(IDispatch *pdispIn,LCID lcid,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromBool(VARIANT_BOOL boolIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromI1(CHAR cIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromUI2(USHORT uiIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromUI4(ULONG ulIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromUI8(ULONG64 ui64In,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR4FromDec(DECIMAL *pdecIn,FLOAT *pfltOut);
extern __attribute__((dllimport)) HRESULT VarR8FromUI1(BYTE bIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromI2(SHORT sIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromI4(LONG lIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromI8(LONG64 i64In,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromR4(FLOAT fltIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromCy(CY cyIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromDate(DATE dateIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromDisp(IDispatch *pdispIn,LCID lcid,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromBool(VARIANT_BOOL boolIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromI1(CHAR cIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromUI2(USHORT uiIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromUI4(ULONG ulIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromUI8(ULONG64 ui64In,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarR8FromDec(DECIMAL *pdecIn,DOUBLE *pdblOut);
extern __attribute__((dllimport)) HRESULT VarDateFromUI1(BYTE bIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromI2(SHORT sIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromI4(LONG lIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromI8(LONG64 i64In,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromR4(FLOAT fltIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromR8(DOUBLE dblIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromCy(CY cyIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromDisp(IDispatch *pdispIn,LCID lcid,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromBool(VARIANT_BOOL boolIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromI1(CHAR cIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromUI2(USHORT uiIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromUI4(ULONG ulIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromUI8(ULONG64 ui64In,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromDec(DECIMAL *pdecIn,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarCyFromUI1(BYTE bIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromI2(SHORT sIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromI4(LONG lIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromI8(LONG64 i64In,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromR4(FLOAT fltIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromR8(DOUBLE dblIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromDate(DATE dateIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromDisp(IDispatch *pdispIn,LCID lcid,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromBool(VARIANT_BOOL boolIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromI1(CHAR cIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromUI2(USHORT uiIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromUI4(ULONG ulIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromUI8(ULONG64 ui64In,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarCyFromDec(DECIMAL *pdecIn,CY *pcyOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromUI1(BYTE bVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromI2(SHORT iVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromI4(LONG lIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromI8(LONG64 i64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromR4(FLOAT fltIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromR8(DOUBLE dblIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromCy(CY cyIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromDate(DATE dateIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromDisp(IDispatch *pdispIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromBool(VARIANT_BOOL boolIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromI1(CHAR cIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromUI2(USHORT uiIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromUI4(ULONG ulIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromUI8(ULONG64 ui64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBstrFromDec(DECIMAL *pdecIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromUI1(BYTE bIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromI2(SHORT sIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromI4(LONG lIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromI8(LONG64 i64In,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromR4(FLOAT fltIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromR8(DOUBLE dblIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromDate(DATE dateIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromCy(CY cyIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromDisp(IDispatch *pdispIn,LCID lcid,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromI1(CHAR cIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromUI2(USHORT uiIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromUI4(ULONG ulIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromUI8(ULONG64 i64In,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarBoolFromDec(DECIMAL *pdecIn,VARIANT_BOOL *pboolOut);
extern __attribute__((dllimport)) HRESULT VarI1FromUI1(BYTE bIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromI2(SHORT uiIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromI4(LONG lIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromI8(LONG64 i64In,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromR4(FLOAT fltIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromR8(DOUBLE dblIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromDate(DATE dateIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromCy(CY cyIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromDisp(IDispatch *pdispIn,LCID lcid,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromBool(VARIANT_BOOL boolIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromUI2(USHORT uiIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromUI4(ULONG ulIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromUI8(ULONG64 i64In,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarI1FromDec(DECIMAL *pdecIn,CHAR *pcOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromUI1(BYTE bIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromI2(SHORT uiIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromI4(LONG lIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromI8(LONG64 i64In,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromR4(FLOAT fltIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromR8(DOUBLE dblIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromDate(DATE dateIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromCy(CY cyIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromDisp(IDispatch *pdispIn,LCID lcid,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromBool(VARIANT_BOOL boolIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromI1(CHAR cIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromUI4(ULONG ulIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromUI8(ULONG64 i64In,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI2FromDec(DECIMAL *pdecIn,USHORT *puiOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromUI1(BYTE bIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromI2(SHORT uiIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromI4(LONG lIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromI8(LONG64 i64In,ULONG *plOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromR4(FLOAT fltIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromR8(DOUBLE dblIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromDate(DATE dateIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromCy(CY cyIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromDisp(IDispatch *pdispIn,LCID lcid,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromBool(VARIANT_BOOL boolIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromI1(CHAR cIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromUI2(USHORT uiIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromUI8(ULONG64 ui64In,ULONG *plOut);
extern __attribute__((dllimport)) HRESULT VarUI4FromDec(DECIMAL *pdecIn,ULONG *pulOut);
extern __attribute__((dllimport)) HRESULT VarUI8FromUI1(BYTE bIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromI2(SHORT sIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromI4(LONG lIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromI8(LONG64 ui64In,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromR4(FLOAT fltIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromR8(DOUBLE dblIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromCy(CY cyIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromDate(DATE dateIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromDisp(IDispatch *pdispIn,LCID lcid,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromBool(VARIANT_BOOL boolIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromI1(CHAR cIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromUI2(USHORT uiIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromUI4(ULONG ulIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromDec(DECIMAL *pdecIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarUI8FromInt(INT intIn,ULONG64 *pi64Out);
extern __attribute__((dllimport)) HRESULT VarDecFromUI1(BYTE bIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromI2(SHORT uiIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromI4(LONG lIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromI8(LONG64 i64In,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromR4(FLOAT fltIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromR8(DOUBLE dblIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromDate(DATE dateIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromCy(CY cyIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromDisp(IDispatch *pdispIn,LCID lcid,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromBool(VARIANT_BOOL boolIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromI1(CHAR cIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromUI2(USHORT uiIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromUI4(ULONG ulIn,DECIMAL *pdecOut);
extern __attribute__((dllimport)) HRESULT VarDecFromUI8(ULONG64 ui64In,DECIMAL *pdecOut);

#define VarUI4FromUI4
#define VarI4FromI4

extern __attribute__((dllimport)) HRESULT VarI4FromI8(LONG64 i64In,LONG *plOut);
extern __attribute__((dllimport)) HRESULT VarI4FromUI8(ULONG64 ui64In,LONG *plOut);

#define VarUI8FromUI8
#define VarI8FromI8

#define VarUI1FromInt
#define VarUI1FromUint
#define VarI2FromInt
#define VarI2FromUint
#define VarI4FromInt
#define VarI4FromUint
#define VarI8FromInt
#define VarI8FromUint
#define VarR4FromInt
#define VarR4FromUint
#define VarR8FromInt
#define VarR8FromUint
#define VarDateFromInt
#define VarDateFromUint
#define VarCyFromInt
#define VarCyFromUint
#define VarBstrFromInt
#define VarBstrFromUint
#define VarBoolFromInt
#define VarBoolFromUint
#define VarI1FromInt
#define VarI1FromUint
#define VarUI2FromInt
#define VarUI2FromUint
#define VarUI4FromInt
#define VarUI4FromUint
#define VarDecFromInt
#define VarDecFromUint
#define VarIntFromUI1
#define VarIntFromI2
#define VarIntFromI4
#define VarIntFromI8
#define VarIntFromR4
#define VarIntFromR8
#define VarIntFromDate
#define VarIntFromCy
#define VarIntFromStr
#define VarIntFromDisp
#define VarIntFromBool
#define VarIntFromI1
#define VarIntFromUI2
#define VarIntFromUI4
#define VarIntFromUI8
#define VarIntFromDec
#define VarIntFromUint
#define VarUintFromUI1
#define VarUintFromI2
#define VarUintFromI4
#define VarUintFromI8
#define VarUintFromR4
#define VarUintFromR8
#define VarUintFromDate
#define VarUintFromCy
#define VarUintFromStr
#define VarUintFromDisp
#define VarUintFromBool
#define VarUintFromI1
#define VarUintFromUI2
#define VarUintFromUI4
#define VarUintFromUI8
#define VarUintFromDec
#define VarUintFromInt

typedef struct {
  INT cDig;
  ULONG dwInFlags;
  ULONG dwOutFlags;
  INT cchUsed;
  INT nBaseShift;
  INT nPwr10;
} NUMPARSE;

#define NUMPRS_LEADING_WHITE
#define NUMPRS_TRAILING_WHITE
#define NUMPRS_LEADING_PLUS
#define NUMPRS_TRAILING_PLUS
#define NUMPRS_LEADING_MINUS
#define NUMPRS_TRAILING_MINUS
#define NUMPRS_HEX_OCT
#define NUMPRS_PARENS
#define NUMPRS_DECIMAL
#define NUMPRS_THOUSANDS
#define NUMPRS_CURRENCY
#define NUMPRS_EXPONENT
#define NUMPRS_USE_ALL
#define NUMPRS_STD

#define NUMPRS_NEG
#define NUMPRS_INEXACT

#define VTBIT_I1
#define VTBIT_UI1
#define VTBIT_I2
#define VTBIT_UI2
#define VTBIT_I4
#define VTBIT_UI4
#define VTBIT_I8
#define VTBIT_UI8
#define VTBIT_R4
#define VTBIT_R8
#define VTBIT_CY
#define VTBIT_DECIMAL

extern __attribute__((dllimport)) HRESULT VarParseNumFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,NUMPARSE *pnumprs,BYTE *rgbDig);
extern __attribute__((dllimport)) HRESULT VarNumFromParseNum(NUMPARSE *pnumprs,BYTE *rgbDig,ULONG dwVtBits,VARIANT *pvar);
extern HRESULT VarAdd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarAnd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarCat(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarDiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarEqv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarIdiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarImp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarMod(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarMul(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarOr(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarPow(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarSub(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarXor(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern HRESULT VarAbs(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern HRESULT VarFix(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern HRESULT VarInt(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern HRESULT VarNeg(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern HRESULT VarNot(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern HRESULT VarRound(LPVARIANT pvarIn,int cDecimals,LPVARIANT pvarResult);
extern HRESULT VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid,ULONG dwFlags);







extern HRESULT VarDecAdd(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern HRESULT VarDecDiv(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern HRESULT VarDecMul(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern HRESULT VarDecSub(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern HRESULT VarDecAbs(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern HRESULT VarDecFix(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern HRESULT VarDecInt(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern HRESULT VarDecNeg(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern HRESULT VarDecRound(LPDECIMAL pdecIn,int cDecimals,LPDECIMAL pdecResult);
extern HRESULT VarDecCmp(LPDECIMAL pdecLeft,LPDECIMAL pdecRight);
extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft,double dblRight);
extern HRESULT VarCyAdd(CY cyLeft,CY cyRight,LPCY pcyResult);
extern HRESULT VarCyMul(CY cyLeft,CY cyRight,LPCY pcyResult);
extern HRESULT VarCyMulI4(CY cyLeft,long lRight,LPCY pcyResult);
extern HRESULT VarCyMulI8(CY cyLeft,LONG64 lRight,LPCY pcyResult);
extern HRESULT VarCySub(CY cyLeft,CY cyRight,LPCY pcyResult);
extern HRESULT VarCyAbs(CY cyIn,LPCY pcyResult);
extern HRESULT VarCyFix(CY cyIn,LPCY pcyResult);
extern HRESULT VarCyInt(CY cyIn,LPCY pcyResult);
extern HRESULT VarCyNeg(CY cyIn,LPCY pcyResult);
extern HRESULT VarCyRound(CY cyIn,int cDecimals,LPCY pcyResult);
extern HRESULT VarCyCmp(CY cyLeft,CY cyRight);
extern HRESULT VarCyCmpR8(CY cyLeft,double dblRight);
extern HRESULT VarBstrCat(BSTR bstrLeft,BSTR bstrRight,LPBSTR pbstrResult);
extern HRESULT VarBstrCmp(BSTR bstrLeft,BSTR bstrRight,LCID lcid,ULONG dwFlags);
extern HRESULT VarR8Pow(double dblLeft,double dblRight,double *pdblResult);
extern HRESULT VarR4CmpR8(float fltLeft,double dblRight);
extern HRESULT VarR8Round(double dblIn,int cDecimals,double *pdblResult);

#define VARCMP_LT
#define VARCMP_EQ
#define VARCMP_GT
#define VARCMP_NULL

#define VT_HARDTYPE

typedef struct {
  SYSTEMTIME st;
  USHORT wDayOfYear;
} UDATE;

extern __attribute__((dllimport)) HRESULT VarDateFromUdate(UDATE *pudateIn,ULONG dwFlags,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarDateFromUdateEx(UDATE *pudateIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
extern __attribute__((dllimport)) HRESULT VarUdateFromDate(DATE dateIn,ULONG dwFlags,UDATE *pudateOut);
extern __attribute__((dllimport)) HRESULT GetAltMonthNames(LCID lcid,LPOLESTR **prgp);
extern __attribute__((dllimport)) HRESULT VarFormat(LPVARIANT pvarIn,LPOLESTR pstrFormat,int iFirstDay,int iFirstWeek,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarFormatNumber(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarFormatPercent(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarFormatCurrency(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarWeekdayName(int iWeekday,int fAbbrev,int iFirstDay,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarMonthName(int iMonth,int fAbbrev,ULONG dwFlags,BSTR *pbstrOut);
extern __attribute__((dllimport)) HRESULT VarFormatFromTokens(LPVARIANT pvarIn,LPOLESTR pstrFormat,LPBYTE pbTokCur,ULONG dwFlags,BSTR *pbstrOut,LCID lcid);
extern __attribute__((dllimport)) HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat,LPBYTE rgbTok,int cbTok,int iFirstDay,int iFirstWeek,LCID lcid,int *pcbActual);


#define DEFINED_LPTYPELIB
typedef ITypeLib *LPTYPELIB;


#define DEFINED_DISPID_MEMBERID
typedef LONG DISPID;
typedef DISPID MEMBERID;


#define MEMBERID_NIL
#define ID_DEFAULTINST

#define DISPATCH_METHOD
#define DISPATCH_PROPERTYGET
#define DISPATCH_PROPERTYPUT
#define DISPATCH_PROPERTYPUTREF


#define DEFINDE_LPTYPEINFO
typedef ITypeInfo *LPTYPEINFO;


#define DEFINED_LPTYPECOMP
typedef ITypeComp *LPTYPECOMP;


#define DEFINED_LPCREATETYPELIB
typedef ICreateTypeLib *LPCREATETYPELIB;


#define DEFINE_LPCREATETYPEINFO
typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern __attribute__((dllimport)) ULONG LHashValOfNameSysA(SYSKIND syskind,LCID lcid,LPCSTR szName);
extern __attribute__((dllimport)) ULONG LHashValOfNameSys(SYSKIND syskind,LCID lcid,const OLECHAR *szName);

#define LHashValOfName
#define WHashValOfLHashVal
#define IsHashValCompatible

extern __attribute__((dllimport)) HRESULT LoadTypeLib(const OLECHAR *szFile,ITypeLib **pptlib);

typedef enum tagREGKIND {
  REGKIND_DEFAULT,REGKIND_REGISTER,REGKIND_NONE
} REGKIND;

#define LOAD_TLB_AS_32BIT
#define LOAD_TLB_AS_64BIT
#define MASK_TO_RESET_TLB_BITS

extern __attribute__((dllimport)) HRESULT LoadTypeLibEx(LPCOLESTR szFile,REGKIND regkind,ITypeLib **pptlib);
extern __attribute__((dllimport)) HRESULT LoadRegTypeLib(const GUID *const rguid,WORD wVerMajor,WORD wVerMinor,LCID lcid,ITypeLib **pptlib);
extern __attribute__((dllimport)) HRESULT QueryPathOfRegTypeLib(const GUID *const guid,USHORT wMaj,USHORT wMin,LCID lcid,LPBSTR lpbstrPathName);
extern __attribute__((dllimport)) HRESULT RegisterTypeLib(ITypeLib *ptlib,OLECHAR *szFullPath,OLECHAR *szHelpDir);
extern __attribute__((dllimport)) HRESULT UnRegisterTypeLib(const GUID *const libID,WORD wVerMajor,WORD wVerMinor,LCID lcid,SYSKIND syskind);
extern __attribute__((dllimport)) HRESULT CreateTypeLib(SYSKIND syskind,const OLECHAR *szFile,ICreateTypeLib **ppctlib);
extern __attribute__((dllimport)) HRESULT CreateTypeLib2(SYSKIND syskind,LPCOLESTR szFile,ICreateTypeLib2 **ppctlib);


#define DEFINED_LPDISPATCH
typedef IDispatch *LPDISPATCH;


typedef struct tagPARAMDATA {
  OLECHAR *szName;
  VARTYPE vt;
} PARAMDATA,*LPPARAMDATA;

typedef struct tagMETHODDATA {
  OLECHAR *szName;
  PARAMDATA *ppdata;
  DISPID dispid;
  UINT iMeth;
  CALLCONV cc;
  UINT cArgs;
  WORD wFlags;
  VARTYPE vtReturn;
} METHODDATA,*LPMETHODDATA;

typedef struct tagINTERFACEDATA {
  METHODDATA *pmethdata;
  UINT cMembers;
} INTERFACEDATA,*LPINTERFACEDATA;

extern __attribute__((dllimport)) HRESULT DispGetParam(DISPPARAMS *pdispparams,UINT position,VARTYPE vtTarg,VARIANT *pvarResult,UINT *puArgErr);
extern __attribute__((dllimport)) HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo,OLECHAR **rgszNames,UINT cNames,DISPID *rgdispid);
extern __attribute__((dllimport)) HRESULT DispInvoke(void *_this,ITypeInfo *ptinfo,DISPID dispidMember,WORD wFlags,DISPPARAMS *pparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr);
extern __attribute__((dllimport)) HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata,LCID lcid,ITypeInfo **pptinfo);
extern __attribute__((dllimport)) HRESULT CreateStdDispatch(IUnknown *punkOuter,void *pvThis,ITypeInfo *ptinfo,IUnknown **ppunkStdDisp);
extern __attribute__((dllimport)) HRESULT DispCallFunc(void *pvInstance,ULONG_PTR oVft,CALLCONV cc,VARTYPE vtReturn,UINT cActuals,VARTYPE *prgvt,VARIANTARG **prgpvarg,VARIANT *pvargResult);

#define ACTIVEOBJECT_STRONG
#define ACTIVEOBJECT_WEAK

extern __attribute__((dllimport)) HRESULT RegisterActiveObject(IUnknown *punk,const IID *const rclsid,DWORD dwFlags,DWORD *pdwRegister);
extern __attribute__((dllimport)) HRESULT RevokeActiveObject(DWORD dwRegister,void *pvReserved);
extern __attribute__((dllimport)) HRESULT GetActiveObject(const IID *const rclsid,void *pvReserved,IUnknown **ppunk);
extern __attribute__((dllimport)) HRESULT SetErrorInfo(ULONG dwReserved,IErrorInfo *perrinfo);
extern __attribute__((dllimport)) HRESULT GetErrorInfo(ULONG dwReserved,IErrorInfo **pperrinfo);
extern __attribute__((dllimport)) HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo);
extern __attribute__((dllimport)) HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo,IRecordInfo **ppRecInfo);
extern __attribute__((dllimport)) HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib,ULONG uVerMajor,ULONG uVerMinor,LCID lcid,const GUID *const rGuidTypeInfo,IRecordInfo **ppRecInfo);
extern __attribute__((dllimport)) ULONG OaBuildVersion(void);
extern __attribute__((dllimport)) void ClearCustData(LPCUSTDATA pCustData);







#define V_UNION
#define V_VT
#define V_RECORDINFO
#define V_RECORD


#define V_ISBYREF
#define V_ISARRAY
#define V_ISVECTOR
#define V_NONE

#define V_UI1
#define V_UI1REF
#define V_I2
#define V_I2REF
#define V_I4
#define V_I4REF
#define V_I8
#define V_I8REF
#define V_R4
#define V_R4REF
#define V_R8
#define V_R8REF
#define V_I1
#define V_I1REF
#define V_UI2
#define V_UI2REF
#define V_UI4
#define V_UI4REF
#define V_UI8
#define V_UI8REF
#define V_INT
#define V_INTREF
#define V_UINT
#define V_UINTREF


#define V_INT_PTR
#define V_UINT_PTR
#define V_INT_PTRREF
#define V_UINT_PTRREF







#define V_CY
#define V_CYREF
#define V_DATE
#define V_DATEREF
#define V_BSTR
#define V_BSTRREF
#define V_DISPATCH
#define V_DISPATCHREF
#define V_ERROR
#define V_ERRORREF
#define V_BOOL
#define V_BOOLREF
#define V_UNKNOWN
#define V_UNKNOWNREF
#define V_VARIANTREF
#define V_ARRAY
#define V_ARRAYREF
#define V_BYREF

#define V_DECIMAL
#define V_DECIMALREF


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 731 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleauto.h" 2 3
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 2 3

#define E_DRAW
#define DATA_E_FORMATETC

#define OLEIVERB_PRIMARY
#define OLEIVERB_SHOW
#define OLEIVERB_OPEN
#define OLEIVERB_HIDE
#define OLEIVERB_UIACTIVATE
#define OLEIVERB_INPLACEACTIVATE
#define OLEIVERB_DISCARDUNDOSTATE

#define EMBDHLP_INPROC_HANDLER
#define EMBDHLP_INPROC_SERVER
#define EMBDHLP_CREATENOW
#define EMBDHLP_DELAYCREATE

#define OLECREATE_LEAVERUNNING

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 1 3






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 1 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpc.h" 2 3


#undef interface
#define interface
# 8 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/rpcndr.h" 1 3
# 9 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/oleidl.h" 2 3
# 39 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 2 3


extern __attribute__((dllimport)) DWORD OleBuildVersion (void);

extern __attribute__((dllimport)) HRESULT CreateDataAdviseHolder (LPDATAADVISEHOLDER *ppDAHolder);




extern __attribute__((dllimport)) HRESULT ReadClassStg (LPSTORAGE pStg, CLSID *pclsid);
extern __attribute__((dllimport)) HRESULT WriteClassStg (LPSTORAGE pStg, const IID *const rclsid);
extern __attribute__((dllimport)) HRESULT ReadClassStm (LPSTREAM pStm, CLSID *pclsid);
extern __attribute__((dllimport)) HRESULT WriteClassStm (LPSTREAM pStm, const IID *const rclsid);



extern __attribute__((dllimport)) HRESULT WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern __attribute__((dllimport)) HRESULT ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType);
extern __attribute__((dllimport)) HRESULT OleInitialize (LPVOID pvReserved);
extern __attribute__((dllimport)) void OleUninitialize (void);
extern __attribute__((dllimport)) HRESULT OleQueryLinkFromData (LPDATAOBJECT pSrcDataObject);
extern __attribute__((dllimport)) HRESULT OleQueryCreateFromData (LPDATAOBJECT pSrcDataObject);
extern __attribute__((dllimport)) HRESULT OleCreate (const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateEx (const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateFromData (LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateFromDataEx (LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLinkFromData (LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLinkFromDataEx (LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateStaticFromData (LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLink (LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLinkEx (LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLinkToFile (LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateLinkToFileEx (LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateFromFile (const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleCreateFromFileEx (const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleLoad (LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleSave (LPPERSISTSTORAGE pPS, LPSTORAGE pStg, WINBOOL fSameAsLoad);
extern __attribute__((dllimport)) HRESULT OleLoadFromStream (LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj);
extern __attribute__((dllimport)) HRESULT OleSaveToStream (LPPERSISTSTREAM pPStm, LPSTREAM pStm);
extern __attribute__((dllimport)) HRESULT OleSetContainedObject (LPUNKNOWN pUnknown, WINBOOL fContained);
extern __attribute__((dllimport)) HRESULT OleNoteObjectVisible (LPUNKNOWN pUnknown, WINBOOL fVisible);
extern __attribute__((dllimport)) HRESULT RegisterDragDrop (HWND hwnd, LPDROPTARGET pDropTarget);
extern __attribute__((dllimport)) HRESULT RevokeDragDrop (HWND hwnd);
extern __attribute__((dllimport)) HRESULT DoDragDrop (LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
extern __attribute__((dllimport)) HRESULT OleSetClipboard (LPDATAOBJECT pDataObj);
extern __attribute__((dllimport)) HRESULT OleGetClipboard (LPDATAOBJECT *ppDataObj);
extern __attribute__((dllimport)) HRESULT OleFlushClipboard (void);
extern __attribute__((dllimport)) HRESULT OleIsCurrentClipboard (LPDATAOBJECT pDataObj);
extern __attribute__((dllimport)) HOLEMENU OleCreateMenuDescriptor (HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern __attribute__((dllimport)) HRESULT OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern __attribute__((dllimport)) HRESULT OleDestroyMenuDescriptor (HOLEMENU holemenu);
extern __attribute__((dllimport)) HRESULT OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
extern __attribute__((dllimport)) HANDLE OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
extern __attribute__((dllimport)) HRESULT OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
extern __attribute__((dllimport)) HRESULT OleRun (LPUNKNOWN pUnknown);
extern __attribute__((dllimport)) WINBOOL OleIsRunning (LPOLEOBJECT pObject);
extern __attribute__((dllimport)) HRESULT OleLockRunning (LPUNKNOWN pUnknown, WINBOOL fLock, WINBOOL fLastUnlockCloses);
extern __attribute__((dllimport)) void ReleaseStgMedium (LPSTGMEDIUM);
extern __attribute__((dllimport)) HRESULT CreateOleAdviseHolder (LPOLEADVISEHOLDER *ppOAHolder);
extern __attribute__((dllimport)) HRESULT OleCreateDefaultHandler (const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj);
extern __attribute__((dllimport)) HRESULT OleCreateEmbeddingHelper (const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj);
extern __attribute__((dllimport)) WINBOOL IsAccelerator (HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd);
extern __attribute__((dllimport)) HGLOBAL OleGetIconOfFile (LPOLESTR lpszPath, WINBOOL fUseFileAsLabel);
extern __attribute__((dllimport)) HGLOBAL OleGetIconOfClass (const IID *const rclsid, LPOLESTR lpszLabel, WINBOOL fUseTypeAsLabel);
extern __attribute__((dllimport)) HGLOBAL OleMetafilePictFromIconAndLabel (HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
extern __attribute__((dllimport)) HRESULT OleRegGetUserType (const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType);
extern __attribute__((dllimport)) HRESULT OleRegGetMiscStatus (const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus);
extern __attribute__((dllimport)) HRESULT OleRegEnumFormatEtc (const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum);
extern __attribute__((dllimport)) HRESULT OleRegEnumVerbs (const IID *const clsid, LPENUMOLEVERB *ppenum);

typedef struct _OLESTREAM *LPOLESTREAM;

typedef struct _OLESTREAMVTBL {
  DWORD ( *Get) (LPOLESTREAM, void *, DWORD);
  DWORD ( *Put) (LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;

typedef struct _OLESTREAM {
  LPOLESTREAMVTBL lpstbl;
} OLESTREAM;

extern __attribute__((dllimport)) HRESULT OleConvertOLESTREAMToIStorage (LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd);
extern __attribute__((dllimport)) HRESULT OleConvertIStorageToOLESTREAM (LPSTORAGE pstg, LPOLESTREAM lpolestream);



extern __attribute__((dllimport)) HRESULT GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL *phglobal);
extern __attribute__((dllimport)) HRESULT CreateILockBytesOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt);



extern __attribute__((dllimport)) HRESULT OleDoAutoConvert (LPSTORAGE pStg, LPCLSID pClsidNew);
extern __attribute__((dllimport)) HRESULT OleGetAutoConvert (const IID *const clsidOld, LPCLSID pClsidNew);
extern __attribute__((dllimport)) HRESULT OleSetAutoConvert (const IID *const clsidOld, const IID *const clsidNew);



extern __attribute__((dllimport)) HRESULT GetConvertStg (LPSTORAGE pStg);



extern __attribute__((dllimport)) HRESULT SetConvertStg (LPSTORAGE pStg, WINBOOL fConvert);
extern __attribute__((dllimport)) HRESULT OleConvertIStorageToOLESTREAMEx (LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
extern __attribute__((dllimport)) HRESULT OleConvertOLESTREAMToIStorageEx (LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium);


# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 147 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 2 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/wtypes.h" 2 3
# 11 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winscard.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 1 3
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 3
extern const GUID GUID_DEVINTERFACE_DISK;
extern const GUID GUID_DEVINTERFACE_CDROM;
extern const GUID GUID_DEVINTERFACE_PARTITION;
extern const GUID GUID_DEVINTERFACE_TAPE;
extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern const GUID GUID_DEVINTERFACE_VOLUME;
extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern const GUID GUID_DEVINTERFACE_FLOPPY;
extern const GUID GUID_DEVINTERFACE_CDCHANGER;
extern const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern const GUID GUID_DEVINTERFACE_COMPORT;
extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;

#define DiskClassGuid
#define CdRomClassGuid
#define PartitionClassGuid
#define TapeClassGuid
#define WriteOnceDiskClassGuid
#define VolumeClassGuid
#define MediumChangerClassGuid
#define FloppyClassGuid
#define CdChangerClassGuid
#define StoragePortClassGuid
#define GUID_CLASS_COMPORT
#define GUID_SERENUM_BUS_ENUMERATOR



#define _WINIOCTL_


#define _DEVIOCTL_


#define DEVICE_TYPE


#define FILE_DEVICE_BEEP
#define FILE_DEVICE_CD_ROM
#define FILE_DEVICE_CD_ROM_FILE_SYSTEM
#define FILE_DEVICE_CONTROLLER
#define FILE_DEVICE_DATALINK
#define FILE_DEVICE_DFS
#define FILE_DEVICE_DISK
#define FILE_DEVICE_DISK_FILE_SYSTEM
#define FILE_DEVICE_FILE_SYSTEM
#define FILE_DEVICE_INPORT_PORT
#define FILE_DEVICE_KEYBOARD
#define FILE_DEVICE_MAILSLOT
#define FILE_DEVICE_MIDI_IN
#define FILE_DEVICE_MIDI_OUT
#define FILE_DEVICE_MOUSE
#define FILE_DEVICE_MULTI_UNC_PROVIDER
#define FILE_DEVICE_NAMED_PIPE
#define FILE_DEVICE_NETWORK
#define FILE_DEVICE_NETWORK_BROWSER
#define FILE_DEVICE_NETWORK_FILE_SYSTEM
#define FILE_DEVICE_NULL
#define FILE_DEVICE_PARALLEL_PORT
#define FILE_DEVICE_PHYSICAL_NETCARD
#define FILE_DEVICE_PRINTER
#define FILE_DEVICE_SCANNER
#define FILE_DEVICE_SERIAL_MOUSE_PORT
#define FILE_DEVICE_SERIAL_PORT
#define FILE_DEVICE_SCREEN
#define FILE_DEVICE_SOUND
#define FILE_DEVICE_STREAMS
#define FILE_DEVICE_TAPE
#define FILE_DEVICE_TAPE_FILE_SYSTEM
#define FILE_DEVICE_TRANSPORT
#define FILE_DEVICE_UNKNOWN
#define FILE_DEVICE_VIDEO
#define FILE_DEVICE_VIRTUAL_DISK
#define FILE_DEVICE_WAVE_IN
#define FILE_DEVICE_WAVE_OUT
#define FILE_DEVICE_8042_PORT
#define FILE_DEVICE_NETWORK_REDIRECTOR
#define FILE_DEVICE_BATTERY
#define FILE_DEVICE_BUS_EXTENDER
#define FILE_DEVICE_MODEM
#define FILE_DEVICE_VDM
#define FILE_DEVICE_MASS_STORAGE
#define FILE_DEVICE_SMB
#define FILE_DEVICE_KS
#define FILE_DEVICE_CHANGER
#define FILE_DEVICE_SMARTCARD
#define FILE_DEVICE_ACPI
#define FILE_DEVICE_DVD
#define FILE_DEVICE_FULLSCREEN_VIDEO
#define FILE_DEVICE_DFS_FILE_SYSTEM
#define FILE_DEVICE_DFS_VOLUME
#define FILE_DEVICE_SERENUM
#define FILE_DEVICE_TERMSRV
#define FILE_DEVICE_KSEC
#define FILE_DEVICE_FIPS
#define FILE_DEVICE_INFINIBAND

#define CTL_CODE

#define DEVICE_TYPE_FROM_CTL_CODE

#define METHOD_BUFFERED
#define METHOD_IN_DIRECT
#define METHOD_OUT_DIRECT
#define METHOD_NEITHER

#define METHOD_DIRECT_TO_HARDWARE
#define METHOD_DIRECT_FROM_HARDWARE

#define FILE_ANY_ACCESS
#define FILE_SPECIAL_ACCESS
#define FILE_READ_ACCESS
#define FILE_WRITE_ACCESS





#define _NTDDSTOR_H_





#define IOCTL_STORAGE_BASE

#define IOCTL_STORAGE_CHECK_VERIFY
#define IOCTL_STORAGE_CHECK_VERIFY2
#define IOCTL_STORAGE_MEDIA_REMOVAL
#define IOCTL_STORAGE_EJECT_MEDIA
#define IOCTL_STORAGE_LOAD_MEDIA
#define IOCTL_STORAGE_LOAD_MEDIA2
#define IOCTL_STORAGE_RESERVE
#define IOCTL_STORAGE_RELEASE
#define IOCTL_STORAGE_FIND_NEW_DEVICES

#define IOCTL_STORAGE_EJECTION_CONTROL
#define IOCTL_STORAGE_MCN_CONTROL

#define IOCTL_STORAGE_GET_MEDIA_TYPES
#define IOCTL_STORAGE_GET_MEDIA_TYPES_EX
#define IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER
#define IOCTL_STORAGE_GET_HOTPLUG_INFO
#define IOCTL_STORAGE_SET_HOTPLUG_INFO

#define IOCTL_STORAGE_RESET_BUS
#define IOCTL_STORAGE_RESET_DEVICE
#define IOCTL_STORAGE_BREAK_RESERVATION

#define IOCTL_STORAGE_GET_DEVICE_NUMBER
#define IOCTL_STORAGE_PREDICT_FAILURE
#define IOCTL_STORAGE_READ_CAPACITY

#define OBSOLETE_IOCTL_STORAGE_RESET_BUS
#define OBSOLETE_IOCTL_STORAGE_RESET_DEVICE
# 197 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 3
  typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
  } STORAGE_HOTPLUG_INFO,*PSTORAGE_HOTPLUG_INFO;

  typedef struct _STORAGE_DEVICE_NUMBER {
    DWORD DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
  } STORAGE_DEVICE_NUMBER,*PSTORAGE_DEVICE_NUMBER;

  typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE PathId;
  } STORAGE_BUS_RESET_REQUEST,*PSTORAGE_BUS_RESET_REQUEST;

  typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
  } STORAGE_BREAK_RESERVATION_REQUEST,*PSTORAGE_BREAK_RESERVATION_REQUEST;

  typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
  } PREVENT_MEDIA_REMOVAL,*PPREVENT_MEDIA_REMOVAL;

  typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
    DWORD MediaChangeCount;
    DWORD NewState;
  } CLASS_MEDIA_CHANGE_CONTEXT,*PCLASS_MEDIA_CHANGE_CONTEXT;

  typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
  } TAPE_STATISTICS,*PTAPE_STATISTICS;

#define RECOVERED_WRITES_VALID
#define UNRECOVERED_WRITES_VALID
#define RECOVERED_READS_VALID
#define UNRECOVERED_READS_VALID
#define WRITE_COMPRESSION_INFO_VALID
#define READ_COMPRESSION_INFO_VALID

  typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
  } TAPE_GET_STATISTICS,*PTAPE_GET_STATISTICS;

#define TAPE_RETURN_STATISTICS
#define TAPE_RETURN_ENV_INFO
#define TAPE_RESET_STATISTICS

  typedef enum _STORAGE_MEDIA_TYPE {
    DDS_4mm = 0x20,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,
    STK_9840,
    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape
  } STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;

#define MEDIA_ERASEABLE
#define MEDIA_WRITE_ONCE
#define MEDIA_READ_ONLY
#define MEDIA_READ_WRITE

#define MEDIA_WRITE_PROTECTED
#define MEDIA_CURRENTLY_MOUNTED

  typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi = 0x1,
    BusTypeAtapi = 0x2,
    BusTypeAta = 0x3,
    BusType1394 = 0x4,
    BusTypeSsa = 0x5,
    BusTypeFibre = 0x6,
    BusTypeUsb = 0x7,
    BusTypeRAID = 0x8,
# 353 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 3
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
  } STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;

  typedef struct _DEVICE_MEDIA_INFO {
    union {
      struct {
 LARGE_INTEGER Cylinders;
 STORAGE_MEDIA_TYPE MediaType;
 DWORD TracksPerCylinder;
 DWORD SectorsPerTrack;
 DWORD BytesPerSector;
 DWORD NumberMediaSides;
 DWORD MediaCharacteristics;
      } DiskInfo;
      struct {
 LARGE_INTEGER Cylinders;
 STORAGE_MEDIA_TYPE MediaType;
 DWORD TracksPerCylinder;
 DWORD SectorsPerTrack;
 DWORD BytesPerSector;
 DWORD NumberMediaSides;
 DWORD MediaCharacteristics;
      } RemovableDiskInfo;
      struct {
 STORAGE_MEDIA_TYPE MediaType;
 DWORD MediaCharacteristics;
 DWORD CurrentBlockSize;
 STORAGE_BUS_TYPE BusType;
 union {
   struct {
     BYTE MediumType;
     BYTE DensityCode;
   } ScsiInformation;
 } BusSpecificData;
      } TapeInfo;
    } DeviceSpecific;
  } DEVICE_MEDIA_INFO,*PDEVICE_MEDIA_INFO;

  typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
  } GET_MEDIA_TYPES,*PGET_MEDIA_TYPES;

  typedef struct _STORAGE_PREDICT_FAILURE {
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
  } STORAGE_PREDICT_FAILURE,*PSTORAGE_PREDICT_FAILURE;
# 410 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 3
#define _NTDDDISK_H_

#define IOCTL_DISK_BASE
#define IOCTL_DISK_GET_DRIVE_GEOMETRY
#define IOCTL_DISK_GET_PARTITION_INFO
#define IOCTL_DISK_SET_PARTITION_INFO
#define IOCTL_DISK_GET_DRIVE_LAYOUT
#define IOCTL_DISK_SET_DRIVE_LAYOUT
#define IOCTL_DISK_VERIFY
#define IOCTL_DISK_FORMAT_TRACKS
#define IOCTL_DISK_REASSIGN_BLOCKS
#define IOCTL_DISK_PERFORMANCE
#define IOCTL_DISK_IS_WRITABLE
#define IOCTL_DISK_LOGGING
#define IOCTL_DISK_FORMAT_TRACKS_EX
#define IOCTL_DISK_HISTOGRAM_STRUCTURE
#define IOCTL_DISK_HISTOGRAM_DATA
#define IOCTL_DISK_HISTOGRAM_RESET
#define IOCTL_DISK_REQUEST_STRUCTURE
#define IOCTL_DISK_REQUEST_DATA
#define IOCTL_DISK_PERFORMANCE_OFF
#define IOCTL_DISK_CONTROLLER_NUMBER

#define SMART_GET_VERSION
#define SMART_SEND_DRIVE_COMMAND
#define SMART_RCV_DRIVE_DATA

#define IOCTL_DISK_GET_PARTITION_INFO_EX
#define IOCTL_DISK_SET_PARTITION_INFO_EX
#define IOCTL_DISK_GET_DRIVE_LAYOUT_EX
#define IOCTL_DISK_SET_DRIVE_LAYOUT_EX
#define IOCTL_DISK_CREATE_DISK
#define IOCTL_DISK_GET_LENGTH_INFO
#define IOCTL_DISK_GET_DRIVE_GEOMETRY_EX

#define IOCTL_DISK_REASSIGN_BLOCKS_EX
#define IOCTL_DISK_UPDATE_DRIVE_SIZE
#define IOCTL_DISK_GROW_PARTITION
#define IOCTL_DISK_GET_CACHE_INFORMATION
#define IOCTL_DISK_SET_CACHE_INFORMATION
#define OBSOLETE_DISK_GET_WRITE_CACHE_STATE
#define IOCTL_DISK_DELETE_DRIVE_LAYOUT
#define IOCTL_DISK_UPDATE_PROPERTIES
#define IOCTL_DISK_RESET_SNAPSHOT_INFO
#define IOCTL_DISK_FORMAT_DRIVE
#define IOCTL_DISK_SENSE_DEVICE
#define IOCTL_DISK_CHECK_VERIFY
#define IOCTL_DISK_MEDIA_REMOVAL
#define IOCTL_DISK_EJECT_MEDIA
#define IOCTL_DISK_LOAD_MEDIA
#define IOCTL_DISK_RESERVE
#define IOCTL_DISK_RELEASE
#define IOCTL_DISK_FIND_NEW_DEVICES
#define IOCTL_DISK_GET_MEDIA_TYPES
#define IOCTL_STORAGE_QUERY_PROPERTY

#define PARTITION_ENTRY_UNUSED
#define PARTITION_FAT_12
#define PARTITION_XENIX_1
#define PARTITION_XENIX_2
#define PARTITION_FAT_16
#define PARTITION_EXTENDED
#define PARTITION_HUGE
#define PARTITION_IFS
#define PARTITION_OS2BOOTMGR
#define PARTITION_FAT32
#define PARTITION_FAT32_XINT13
#define PARTITION_XINT13
#define PARTITION_XINT13_EXTENDED
#define PARTITION_PREP
#define PARTITION_LDM
#define PARTITION_UNIX

#define VALID_NTFT

#define PARTITION_NTFT

#define IsRecognizedPartition
#define IsContainerPartition
#define IsFTPartition

typedef enum _MEDIA_TYPE {
  Unknown,F5_1Pt2_512,F3_1Pt44_512,F3_2Pt88_512,F3_20Pt8_512,F3_720_512,F5_360_512,F5_320_512,F5_320_1024,F5_180_512,F5_160_512,
  RemovableMedia,FixedMedia,F3_120M_512,F3_640_512,F5_640_512,F5_720_512,F3_1Pt2_512,F3_1Pt23_1024,F5_1Pt23_1024,F3_128Mb_512,
  F3_230Mb_512,F8_256_128,F3_200Mb_512,F3_240M_512,F3_32M_512
} MEDIA_TYPE,*PMEDIA_TYPE;

typedef struct _FORMAT_PARAMETERS {
  MEDIA_TYPE MediaType;
  DWORD StartCylinderNumber;
  DWORD EndCylinderNumber;
  DWORD StartHeadNumber;
  DWORD EndHeadNumber;
} FORMAT_PARAMETERS,*PFORMAT_PARAMETERS;

typedef WORD BAD_TRACK_NUMBER;
typedef WORD *PBAD_TRACK_NUMBER;

typedef struct _FORMAT_EX_PARAMETERS {
  MEDIA_TYPE MediaType;
  DWORD StartCylinderNumber;
  DWORD EndCylinderNumber;
  DWORD StartHeadNumber;
  DWORD EndHeadNumber;
  WORD FormatGapLength;
  WORD SectorsPerTrack;
  WORD SectorNumber[1];
} FORMAT_EX_PARAMETERS,*PFORMAT_EX_PARAMETERS;

typedef struct _DISK_GEOMETRY {
  LARGE_INTEGER Cylinders;
  MEDIA_TYPE MediaType;
  DWORD TracksPerCylinder;
  DWORD SectorsPerTrack;
  DWORD BytesPerSector;
} DISK_GEOMETRY,*PDISK_GEOMETRY;

#define WMI_DISK_GEOMETRY_GUID

typedef struct _PARTITION_INFORMATION {
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER PartitionLength;
  DWORD HiddenSectors;
  DWORD PartitionNumber;
  BYTE PartitionType;
  BOOLEAN BootIndicator;
  BOOLEAN RecognizedPartition;
  BOOLEAN RewritePartition;
} PARTITION_INFORMATION,*PPARTITION_INFORMATION;

typedef struct _SET_PARTITION_INFORMATION {
  BYTE PartitionType;
} SET_PARTITION_INFORMATION,*PSET_PARTITION_INFORMATION;

typedef struct _DRIVE_LAYOUT_INFORMATION {
  DWORD PartitionCount;
  DWORD Signature;
  PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION,*PDRIVE_LAYOUT_INFORMATION;

typedef struct _VERIFY_INFORMATION {
  LARGE_INTEGER StartingOffset;
  DWORD Length;
} VERIFY_INFORMATION,*PVERIFY_INFORMATION;

typedef struct _REASSIGN_BLOCKS {
  WORD Reserved;
  WORD Count;
  DWORD BlockNumber[1];
} REASSIGN_BLOCKS,*PREASSIGN_BLOCKS;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 562 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _REASSIGN_BLOCKS_EX {
  WORD Reserved;
  WORD Count;
  LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX,*PREASSIGN_BLOCKS_EX;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 568 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

typedef enum _PARTITION_STYLE {
  PARTITION_STYLE_MBR,PARTITION_STYLE_GPT,PARTITION_STYLE_RAW
} PARTITION_STYLE;

typedef struct _PARTITION_INFORMATION_GPT {
  GUID PartitionType;
  GUID PartitionId;
  DWORD64 Attributes;
  WCHAR Name [36];
} PARTITION_INFORMATION_GPT,*PPARTITION_INFORMATION_GPT;

#define GPT_ATTRIBUTE_PLATFORM_REQUIRED

#define GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER
#define GPT_BASIC_DATA_ATTRIBUTE_HIDDEN
#define GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY
#define GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY

typedef struct _PARTITION_INFORMATION_MBR {
  BYTE PartitionType;
  BOOLEAN BootIndicator;
  BOOLEAN RecognizedPartition;
  DWORD HiddenSectors;
} PARTITION_INFORMATION_MBR,*PPARTITION_INFORMATION_MBR;

typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;

typedef struct _SET_PARTITION_INFORMATION_EX {
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    SET_PARTITION_INFORMATION_MBR Mbr;
    SET_PARTITION_INFORMATION_GPT Gpt;
  } ;
} SET_PARTITION_INFORMATION_EX,*PSET_PARTITION_INFORMATION_EX;

typedef struct _CREATE_DISK_GPT {
  GUID DiskId;
  DWORD MaxPartitionCount;
} CREATE_DISK_GPT,*PCREATE_DISK_GPT;

typedef struct _CREATE_DISK_MBR {
  DWORD Signature;
} CREATE_DISK_MBR,*PCREATE_DISK_MBR;

typedef struct _CREATE_DISK {
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    CREATE_DISK_MBR Mbr;
    CREATE_DISK_GPT Gpt;
  } ;
} CREATE_DISK,*PCREATE_DISK;

typedef struct _GET_LENGTH_INFORMATION {
  LARGE_INTEGER Length;
} GET_LENGTH_INFORMATION,*PGET_LENGTH_INFORMATION;

typedef struct _PARTITION_INFORMATION_EX {
  PARTITION_STYLE PartitionStyle;
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER PartitionLength;
  DWORD PartitionNumber;
  BOOLEAN RewritePartition;
  __extension__ union {
    PARTITION_INFORMATION_MBR Mbr;
    PARTITION_INFORMATION_GPT Gpt;
  } ;
} PARTITION_INFORMATION_EX,*PPARTITION_INFORMATION_EX;

typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
  GUID DiskId;
  LARGE_INTEGER StartingUsableOffset;
  LARGE_INTEGER UsableLength;
  DWORD MaxPartitionCount;
} DRIVE_LAYOUT_INFORMATION_GPT,*PDRIVE_LAYOUT_INFORMATION_GPT;

typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
  DWORD Signature;
} DRIVE_LAYOUT_INFORMATION_MBR,*PDRIVE_LAYOUT_INFORMATION_MBR;

typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
  DWORD PartitionStyle;
  DWORD PartitionCount;
  __extension__ union {
    DRIVE_LAYOUT_INFORMATION_MBR Mbr;
    DRIVE_LAYOUT_INFORMATION_GPT Gpt;
  } ;
  PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX,*PDRIVE_LAYOUT_INFORMATION_EX;

typedef enum _DETECTION_TYPE {
  DetectNone,DetectInt13,DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO {
  WORD DriveSelect;
  DWORD MaxCylinders;
  WORD SectorsPerTrack;
  WORD MaxHeads;
  WORD NumberDrives;
} DISK_INT13_INFO,*PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO {
  WORD ExBufferSize;
  WORD ExFlags;
  DWORD ExCylinders;
  DWORD ExHeads;
  DWORD ExSectorsPerTrack;
  DWORD64 ExSectorsPerDrive;
  WORD ExSectorSize;
  WORD ExReserved;
} DISK_EX_INT13_INFO,*PDISK_EX_INT13_INFO;

typedef struct _DISK_DETECTION_INFO {
  DWORD SizeOfDetectInfo;
  DETECTION_TYPE DetectionType;
  __extension__ union {
    __extension__ struct {
      DISK_INT13_INFO Int13;
      DISK_EX_INT13_INFO ExInt13;
    } ;
  } ;
} DISK_DETECTION_INFO,*PDISK_DETECTION_INFO;

typedef struct _DISK_PARTITION_INFO {
  DWORD SizeOfPartitionInfo;
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    struct {
      DWORD Signature;
      DWORD CheckSum;
    } Mbr;
    struct {
      GUID DiskId;
    } Gpt;
  } ;
} DISK_PARTITION_INFO,*PDISK_PARTITION_INFO;

#define DiskGeometryGetPartition
#define DiskGeometryGetDetect

typedef struct _DISK_GEOMETRY_EX {
  DISK_GEOMETRY Geometry;
  LARGE_INTEGER DiskSize;
  BYTE Data[1];
} DISK_GEOMETRY_EX,*PDISK_GEOMETRY_EX;

typedef struct _DISK_CONTROLLER_NUMBER {
  DWORD ControllerNumber;
  DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER,*PDISK_CONTROLLER_NUMBER;

typedef enum {
  EqualPriority,KeepPrefetchedData,KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;

typedef struct _DISK_CACHE_INFORMATION {
  BOOLEAN ParametersSavable;
  BOOLEAN ReadCacheEnabled;
  BOOLEAN WriteCacheEnabled;
  DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
  DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
  WORD DisablePrefetchTransferLength;
  BOOLEAN PrefetchScalar;
  __extension__ union {
    struct {
      WORD Minimum;
      WORD Maximum;
      WORD MaximumBlocks;
    } ScalarPrefetch;
    struct {
      WORD Minimum;
      WORD Maximum;
    } BlockPrefetch;
  } ;
} DISK_CACHE_INFORMATION,*PDISK_CACHE_INFORMATION;

typedef struct _DISK_GROW_PARTITION {
  DWORD PartitionNumber;
  LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION,*PDISK_GROW_PARTITION;

#define HIST_NO_OF_BUCKETS

typedef struct _HISTOGRAM_BUCKET {
  DWORD Reads;
  DWORD Writes;
} HISTOGRAM_BUCKET,*PHISTOGRAM_BUCKET;

#define HISTOGRAM_BUCKET_SIZE

typedef struct _DISK_HISTOGRAM {
  LARGE_INTEGER DiskSize;
  LARGE_INTEGER Start;
  LARGE_INTEGER End;
  LARGE_INTEGER Average;
  LARGE_INTEGER AverageRead;
  LARGE_INTEGER AverageWrite;
  DWORD Granularity;
  DWORD Size;
  DWORD ReadCount;
  DWORD WriteCount;
  PHISTOGRAM_BUCKET Histogram;
} DISK_HISTOGRAM,*PDISK_HISTOGRAM;

#define DISK_HISTOGRAM_SIZE

typedef struct _DISK_PERFORMANCE {
  LARGE_INTEGER BytesRead;
  LARGE_INTEGER BytesWritten;
  LARGE_INTEGER ReadTime;
  LARGE_INTEGER WriteTime;
  LARGE_INTEGER IdleTime;
  DWORD ReadCount;
  DWORD WriteCount;
  DWORD QueueDepth;
  DWORD SplitCount;
  LARGE_INTEGER QueryTime;
  DWORD StorageDeviceNumber;
  WCHAR StorageManagerName[8];
} DISK_PERFORMANCE,*PDISK_PERFORMANCE;

typedef struct _DISK_RECORD {
  LARGE_INTEGER ByteOffset;
  LARGE_INTEGER StartTime;
  LARGE_INTEGER EndTime;
  PVOID VirtualAddress;
  DWORD NumberOfBytes;
  BYTE DeviceNumber;
  BOOLEAN ReadRequest;
} DISK_RECORD,*PDISK_RECORD;

typedef struct _DISK_LOGGING {
  BYTE Function;
  PVOID BufferAddress;
  DWORD BufferSize;
} DISK_LOGGING,*PDISK_LOGGING;

#define DISK_LOGGING_START
#define DISK_LOGGING_STOP
#define DISK_LOGGING_DUMP
#define DISK_BINNING

typedef enum _BIN_TYPES {
  RequestSize,RequestLocation
} BIN_TYPES;

typedef struct _BIN_RANGE {
  LARGE_INTEGER StartValue;
  LARGE_INTEGER Length;
} BIN_RANGE,*PBIN_RANGE;

typedef struct _PERF_BIN {
  DWORD NumberOfBins;
  DWORD TypeOfBin;
  BIN_RANGE BinsRanges[1];
} PERF_BIN,*PPERF_BIN;

typedef struct _BIN_COUNT {
  BIN_RANGE BinRange;
  DWORD BinCount;
} BIN_COUNT,*PBIN_COUNT;

typedef struct _BIN_RESULTS {
  DWORD NumberOfBins;
  BIN_COUNT BinCounts[1];
} BIN_RESULTS,*PBIN_RESULTS;

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 838 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _GETVERSIONINPARAMS {
  BYTE bVersion;
  BYTE bRevision;
  BYTE bReserved;
  BYTE bIDEDeviceMap;
  DWORD fCapabilities;
  DWORD dwReserved[4];
} GETVERSIONINPARAMS,*PGETVERSIONINPARAMS,*LPGETVERSIONINPARAMS;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 847 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

#define CAP_ATA_ID_CMD
#define CAP_ATAPI_ID_CMD
#define CAP_SMART_CMD

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 853 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _IDEREGS {
  BYTE bFeaturesReg;
  BYTE bSectorCountReg;
  BYTE bSectorNumberReg;
  BYTE bCylLowReg;
  BYTE bCylHighReg;
  BYTE bDriveHeadReg;
  BYTE bCommandReg;
  BYTE bReserved;
} IDEREGS,*PIDEREGS,*LPIDEREGS;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 864 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

#define ATAPI_ID_CMD
#define ID_CMD
#define SMART_CMD

#define SMART_CYL_LOW
#define SMART_CYL_HI

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 873 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _SENDCMDINPARAMS {
  DWORD cBufferSize;
  IDEREGS irDriveRegs;
  BYTE bDriveNumber;
  BYTE bReserved[3];
  DWORD dwReserved[4];
  BYTE bBuffer[1];
} SENDCMDINPARAMS,*PSENDCMDINPARAMS,*LPSENDCMDINPARAMS;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 882 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 884 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _DRIVERSTATUS {
  BYTE bDriverError;
  BYTE bIDEError;
  BYTE bReserved[2];
  DWORD dwReserved[2];
} DRIVERSTATUS,*PDRIVERSTATUS,*LPDRIVERSTATUS;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 891 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

#define SMART_NO_ERROR
#define SMART_IDE_ERROR
#define SMART_INVALID_FLAG
#define SMART_INVALID_COMMAND
#define SMART_INVALID_BUFFER
#define SMART_INVALID_DRIVE
#define SMART_INVALID_IOCTL
#define SMART_ERROR_NO_MEM
#define SMART_INVALID_REGISTER
#define SMART_NOT_SUPPORTED
#define SMART_NO_IDE_DEVICE

#define SMART_OFFLINE_ROUTINE_OFFLINE
#define SMART_SHORT_SELFTEST_OFFLINE
#define SMART_EXTENDED_SELFTEST_OFFLINE
#define SMART_ABORT_OFFLINE_SELFTEST
#define SMART_SHORT_SELFTEST_CAPTIVE
#define SMART_EXTENDED_SELFTEST_CAPTIVE

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack1.h" 1 3






#pragma pack(push,1)
# 912 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3
typedef struct _SENDCMDOUTPARAMS {
  DWORD cBufferSize;
  DRIVERSTATUS DriverStatus;
  BYTE bBuffer[1];
} SENDCMDOUTPARAMS,*PSENDCMDOUTPARAMS,*LPSENDCMDOUTPARAMS;
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 918 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 2 3

#define READ_ATTRIBUTE_BUFFER_SIZE
#define IDENTIFY_BUFFER_SIZE
#define READ_THRESHOLD_BUFFER_SIZE
#define SMART_LOG_SECTOR_SIZE

#define READ_ATTRIBUTES
#define READ_THRESHOLDS
#define ENABLE_DISABLE_AUTOSAVE
#define SAVE_ATTRIBUTE_VALUES
#define EXECUTE_OFFLINE_DIAGS
#define SMART_READ_LOG
#define SMART_WRITE_LOG
#define ENABLE_SMART
#define DISABLE_SMART
#define RETURN_SMART_STATUS
#define ENABLE_DISABLE_AUTO_OFFLINE




#define IOCTL_CHANGER_BASE
#define IOCTL_CHANGER_GET_PARAMETERS
#define IOCTL_CHANGER_GET_STATUS
#define IOCTL_CHANGER_GET_PRODUCT_DATA
#define IOCTL_CHANGER_SET_ACCESS
#define IOCTL_CHANGER_GET_ELEMENT_STATUS
#define IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS
#define IOCTL_CHANGER_SET_POSITION
#define IOCTL_CHANGER_EXCHANGE_MEDIUM
#define IOCTL_CHANGER_MOVE_MEDIUM
#define IOCTL_CHANGER_REINITIALIZE_TRANSPORT
#define IOCTL_CHANGER_QUERY_VOLUME_TAGS

#define MAX_VOLUME_ID_SIZE
#define MAX_VOLUME_TEMPLATE_SIZE

#define VENDOR_ID_LENGTH
#define PRODUCT_ID_LENGTH
#define REVISION_LENGTH
#define SERIAL_NUMBER_LENGTH

typedef enum _ELEMENT_TYPE {
  AllElements,ChangerTransport,ChangerSlot,ChangerIEPort,ChangerDrive,ChangerDoor,ChangerKeypad,ChangerMaxElement
} ELEMENT_TYPE,*PELEMENT_TYPE;

typedef struct _CHANGER_ELEMENT {
  ELEMENT_TYPE ElementType;
  DWORD ElementAddress;
} CHANGER_ELEMENT,*PCHANGER_ELEMENT;

typedef struct _CHANGER_ELEMENT_LIST {
  CHANGER_ELEMENT Element;
  DWORD NumberOfElements;
} CHANGER_ELEMENT_LIST ,*PCHANGER_ELEMENT_LIST;

#define CHANGER_BAR_CODE_SCANNER_INSTALLED
#define CHANGER_INIT_ELEM_STAT_WITH_RANGE
#define CHANGER_CLOSE_IEPORT
#define CHANGER_OPEN_IEPORT

#define CHANGER_STATUS_NON_VOLATILE
#define CHANGER_EXCHANGE_MEDIA
#define CHANGER_CLEANER_SLOT
#define CHANGER_LOCK_UNLOCK

#define CHANGER_CARTRIDGE_MAGAZINE
#define CHANGER_MEDIUM_FLIP
#define CHANGER_POSITION_TO_ELEMENT
#define CHANGER_REPORT_IEPORT_STATE

#define CHANGER_STORAGE_DRIVE
#define CHANGER_STORAGE_IEPORT
#define CHANGER_STORAGE_SLOT
#define CHANGER_STORAGE_TRANSPORT

#define CHANGER_DRIVE_CLEANING_REQUIRED

#define CHANGER_PREDISMOUNT_EJECT_REQUIRED

#define CHANGER_CLEANER_ACCESS_NOT_VALID
#define CHANGER_PREMOUNT_EJECT_REQUIRED

#define CHANGER_VOLUME_IDENTIFICATION
#define CHANGER_VOLUME_SEARCH
#define CHANGER_VOLUME_ASSERT
#define CHANGER_VOLUME_REPLACE
#define CHANGER_VOLUME_UNDEFINE

#define CHANGER_SERIAL_NUMBER_VALID

#define CHANGER_DEVICE_REINITIALIZE_CAPABLE
#define CHANGER_KEYPAD_ENABLE_DISABLE
#define CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS

#define CHANGER_RESERVED_BIT

#define CHANGER_PREDISMOUNT_ALIGN_TO_SLOT
#define CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE
#define CHANGER_CLEANER_AUTODISMOUNT
#define CHANGER_TRUE_EXCHANGE_CAPABLE
#define CHANGER_SLOTS_USE_TRAYS
#define CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR
#define CHANGER_CLEANER_OPS_NOT_SUPPORTED
#define CHANGER_IEPORT_USER_CONTROL_OPEN
#define CHANGER_IEPORT_USER_CONTROL_CLOSE
#define CHANGER_MOVE_EXTENDS_IEPORT
#define CHANGER_MOVE_RETRACTS_IEPORT

#define CHANGER_TO_TRANSPORT
#define CHANGER_TO_SLOT
#define CHANGER_TO_IEPORT
#define CHANGER_TO_DRIVE

#define LOCK_UNLOCK_IEPORT
#define LOCK_UNLOCK_DOOR
#define LOCK_UNLOCK_KEYPAD

typedef struct _GET_CHANGER_PARAMETERS {
  DWORD Size;
  WORD NumberTransportElements;
  WORD NumberStorageElements;
  WORD NumberCleanerSlots;
  WORD NumberIEElements;
  WORD NumberDataTransferElements;
  WORD NumberOfDoors;
  WORD FirstSlotNumber;
  WORD FirstDriveNumber;
  WORD FirstTransportNumber;
  WORD FirstIEPortNumber;
  WORD FirstCleanerSlotAddress;
  WORD MagazineSize;
  DWORD DriveCleanTimeout;
  DWORD Features0;
  DWORD Features1;
  BYTE MoveFromTransport;
  BYTE MoveFromSlot;
  BYTE MoveFromIePort;
  BYTE MoveFromDrive;
  BYTE ExchangeFromTransport;
  BYTE ExchangeFromSlot;
  BYTE ExchangeFromIePort;
  BYTE ExchangeFromDrive;
  BYTE LockUnlockCapabilities;
  BYTE PositionCapabilities;
  BYTE Reserved1[2];
  DWORD Reserved2[2];
} GET_CHANGER_PARAMETERS,*PGET_CHANGER_PARAMETERS;

typedef struct _CHANGER_PRODUCT_DATA {
  BYTE VendorId[8];
  BYTE ProductId[16];
  BYTE Revision[4];
  BYTE SerialNumber[32];
  BYTE DeviceType;
} CHANGER_PRODUCT_DATA,*PCHANGER_PRODUCT_DATA;

#define LOCK_ELEMENT
#define UNLOCK_ELEMENT
#define EXTEND_IEPORT
#define RETRACT_IEPORT

typedef struct _CHANGER_SET_ACCESS {
  CHANGER_ELEMENT Element;
  DWORD Control;
} CHANGER_SET_ACCESS,*PCHANGER_SET_ACCESS;

typedef struct _CHANGER_READ_ELEMENT_STATUS {
  CHANGER_ELEMENT_LIST ElementList;
  BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS,*PCHANGER_READ_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS {
  CHANGER_ELEMENT Element;
  CHANGER_ELEMENT SrcElementAddress;
  DWORD Flags;
  DWORD ExceptionCode;
  BYTE TargetId;
  BYTE Lun;
  WORD Reserved;
  BYTE PrimaryVolumeID[36];
  BYTE AlternateVolumeID[36];
} CHANGER_ELEMENT_STATUS,*PCHANGER_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS_EX {
  CHANGER_ELEMENT Element;
  CHANGER_ELEMENT SrcElementAddress;
  DWORD Flags;
  DWORD ExceptionCode;
  BYTE TargetId;
  BYTE Lun;
  WORD Reserved;
  BYTE PrimaryVolumeID[36];
  BYTE AlternateVolumeID[36];
  BYTE VendorIdentification[8];
  BYTE ProductIdentification[16];
  BYTE SerialNumber[32];
} CHANGER_ELEMENT_STATUS_EX,*PCHANGER_ELEMENT_STATUS_EX;

#define ELEMENT_STATUS_FULL
#define ELEMENT_STATUS_IMPEXP
#define ELEMENT_STATUS_EXCEPT
#define ELEMENT_STATUS_ACCESS
#define ELEMENT_STATUS_EXENAB
#define ELEMENT_STATUS_INENAB

#define ELEMENT_STATUS_PRODUCT_DATA

#define ELEMENT_STATUS_LUN_VALID
#define ELEMENT_STATUS_ID_VALID
#define ELEMENT_STATUS_NOT_BUS
#define ELEMENT_STATUS_INVERT
#define ELEMENT_STATUS_SVALID

#define ELEMENT_STATUS_PVOLTAG
#define ELEMENT_STATUS_AVOLTAG

#define ERROR_LABEL_UNREADABLE
#define ERROR_LABEL_QUESTIONABLE
#define ERROR_SLOT_NOT_PRESENT
#define ERROR_DRIVE_NOT_INSTALLED
#define ERROR_TRAY_MALFUNCTION
#define ERROR_INIT_STATUS_NEEDED
#define ERROR_UNHANDLED_ERROR

typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
  CHANGER_ELEMENT_LIST ElementList;
  BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS,*PCHANGER_INITIALIZE_ELEMENT_STATUS;

typedef struct _CHANGER_SET_POSITION {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Destination;
  BOOLEAN Flip;
} CHANGER_SET_POSITION,*PCHANGER_SET_POSITION;

typedef struct _CHANGER_EXCHANGE_MEDIUM {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Source;
  CHANGER_ELEMENT Destination1;
  CHANGER_ELEMENT Destination2;
  BOOLEAN Flip1;
  BOOLEAN Flip2;
} CHANGER_EXCHANGE_MEDIUM,*PCHANGER_EXCHANGE_MEDIUM;

typedef struct _CHANGER_MOVE_MEDIUM {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Source;
  CHANGER_ELEMENT Destination;
  BOOLEAN Flip;
} CHANGER_MOVE_MEDIUM,*PCHANGER_MOVE_MEDIUM;

typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
  CHANGER_ELEMENT StartingElement;
  DWORD ActionCode;
  BYTE VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION,*PCHANGER_SEND_VOLUME_TAG_INFORMATION;

typedef struct _READ_ELEMENT_ADDRESS_INFO {
  DWORD NumberOfElements;
  CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO,*PREAD_ELEMENT_ADDRESS_INFO;

#define SEARCH_ALL
#define SEARCH_PRIMARY
#define SEARCH_ALTERNATE
#define SEARCH_ALL_NO_SEQ
#define SEARCH_PRI_NO_SEQ
#define SEARCH_ALT_NO_SEQ

#define ASSERT_PRIMARY
#define ASSERT_ALTERNATE

#define REPLACE_PRIMARY
#define REPLACE_ALTERNATE

#define UNDEFINE_PRIMARY
#define UNDEFINE_ALTERNATE

typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
  DeviceProblemNone,DeviceProblemHardware,DeviceProblemCHMError,DeviceProblemDoorOpen,DeviceProblemCalibrationError,DeviceProblemTargetFailure,
  DeviceProblemCHMMoveError,DeviceProblemCHMZeroError,DeviceProblemCartridgeInsertError,DeviceProblemPositionError,DeviceProblemSensorError,
  DeviceProblemCartridgeEjectError,DeviceProblemGripperError,DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE,*PCHANGER_DEVICE_PROBLEM_TYPE;

#define IOCTL_SERIAL_LSRMST_INSERT

#define IOCTL_SERENUM_EXPOSE_HARDWARE
#define IOCTL_SERENUM_REMOVE_HARDWARE
#define IOCTL_SERENUM_PORT_DESC
#define IOCTL_SERENUM_GET_PORT_NAME

#define SERIAL_LSRMST_ESCAPE

#define SERIAL_LSRMST_LSR_DATA

#define SERIAL_LSRMST_LSR_NODATA

#define SERIAL_LSRMST_MST

#define SERIAL_IOC_FCR_FIFO_ENABLE
#define SERIAL_IOC_FCR_RCVR_RESET
#define SERIAL_IOC_FCR_XMIT_RESET
#define SERIAL_IOC_FCR_DMA_MODE
#define SERIAL_IOC_FCR_RES1
#define SERIAL_IOC_FCR_RES2
#define SERIAL_IOC_FCR_RCVR_TRIGGER_LSB
#define SERIAL_IOC_FCR_RCVR_TRIGGER_MSB

#define SERIAL_IOC_MCR_DTR
#define SERIAL_IOC_MCR_RTS
#define SERIAL_IOC_MCR_OUT1
#define SERIAL_IOC_MCR_OUT2
#define SERIAL_IOC_MCR_LOOP


#define _FILESYSTEMFSCTL_

#define FSCTL_REQUEST_OPLOCK_LEVEL_1
#define FSCTL_REQUEST_OPLOCK_LEVEL_2
#define FSCTL_REQUEST_BATCH_OPLOCK
#define FSCTL_OPLOCK_BREAK_ACKNOWLEDGE
#define FSCTL_OPBATCH_ACK_CLOSE_PENDING
#define FSCTL_OPLOCK_BREAK_NOTIFY
#define FSCTL_LOCK_VOLUME
#define FSCTL_UNLOCK_VOLUME
#define FSCTL_DISMOUNT_VOLUME

#define FSCTL_IS_VOLUME_MOUNTED
#define FSCTL_IS_PATHNAME_VALID
#define FSCTL_MARK_VOLUME_DIRTY

#define FSCTL_QUERY_RETRIEVAL_POINTERS
#define FSCTL_GET_COMPRESSION
#define FSCTL_SET_COMPRESSION

#define FSCTL_MARK_AS_SYSTEM_HIVE
#define FSCTL_OPLOCK_BREAK_ACK_NO_2
#define FSCTL_INVALIDATE_VOLUMES
#define FSCTL_QUERY_FAT_BPB
#define FSCTL_REQUEST_FILTER_OPLOCK
#define FSCTL_FILESYSTEM_GET_STATISTICS
#define FSCTL_GET_NTFS_VOLUME_DATA
#define FSCTL_GET_NTFS_FILE_RECORD
#define FSCTL_GET_VOLUME_BITMAP
#define FSCTL_GET_RETRIEVAL_POINTERS
#define FSCTL_MOVE_FILE
#define FSCTL_IS_VOLUME_DIRTY
#define FSCTL_ALLOW_EXTENDED_DASD_IO
#define FSCTL_FIND_FILES_BY_SID
#define FSCTL_SET_OBJECT_ID
#define FSCTL_GET_OBJECT_ID
#define FSCTL_DELETE_OBJECT_ID
#define FSCTL_SET_REPARSE_POINT
#define FSCTL_GET_REPARSE_POINT
#define FSCTL_DELETE_REPARSE_POINT
#define FSCTL_ENUM_USN_DATA
#define FSCTL_SECURITY_ID_CHECK
#define FSCTL_READ_USN_JOURNAL
#define FSCTL_SET_OBJECT_ID_EXTENDED
#define FSCTL_CREATE_OR_GET_OBJECT_ID
#define FSCTL_SET_SPARSE
#define FSCTL_SET_ZERO_DATA
#define FSCTL_QUERY_ALLOCATED_RANGES
#define FSCTL_SET_ENCRYPTION
#define FSCTL_ENCRYPTION_FSCTL_IO
#define FSCTL_WRITE_RAW_ENCRYPTED
#define FSCTL_READ_RAW_ENCRYPTED
#define FSCTL_CREATE_USN_JOURNAL
#define FSCTL_READ_FILE_USN_DATA
#define FSCTL_WRITE_USN_CLOSE_RECORD
#define FSCTL_EXTEND_VOLUME
#define FSCTL_QUERY_USN_JOURNAL
#define FSCTL_DELETE_USN_JOURNAL
#define FSCTL_MARK_HANDLE
#define FSCTL_SIS_COPYFILE
#define FSCTL_SIS_LINK_FILES
#define FSCTL_HSM_MSG
#define FSCTL_HSM_DATA
#define FSCTL_RECALL_FILE
#define FSCTL_READ_FROM_PLEX
#define FSCTL_FILE_PREFETCH

typedef struct _PATHNAME_BUFFER {
  DWORD PathNameLength;
  WCHAR Name[1];
} PATHNAME_BUFFER,*PPATHNAME_BUFFER;

typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
  BYTE First0x24BytesOfBootSector[0x24];
} FSCTL_QUERY_FAT_BPB_BUFFER,*PFSCTL_QUERY_FAT_BPB_BUFFER;

typedef struct {
  LARGE_INTEGER VolumeSerialNumber;
  LARGE_INTEGER NumberSectors;
  LARGE_INTEGER TotalClusters;
  LARGE_INTEGER FreeClusters;
  LARGE_INTEGER TotalReserved;
  DWORD BytesPerSector;
  DWORD BytesPerCluster;
  DWORD BytesPerFileRecordSegment;
  DWORD ClustersPerFileRecordSegment;
  LARGE_INTEGER MftValidDataLength;
  LARGE_INTEGER MftStartLcn;
  LARGE_INTEGER Mft2StartLcn;
  LARGE_INTEGER MftZoneStart;
  LARGE_INTEGER MftZoneEnd;
} NTFS_VOLUME_DATA_BUFFER,*PNTFS_VOLUME_DATA_BUFFER;

typedef struct {
  DWORD ByteCount;
  WORD MajorVersion;
  WORD MinorVersion;
} NTFS_EXTENDED_VOLUME_DATA,*PNTFS_EXTENDED_VOLUME_DATA;

typedef struct {
  LARGE_INTEGER StartingLcn;
} STARTING_LCN_INPUT_BUFFER,*PSTARTING_LCN_INPUT_BUFFER;

typedef struct {
  LARGE_INTEGER StartingLcn;
  LARGE_INTEGER BitmapSize;
  BYTE Buffer[1];
} VOLUME_BITMAP_BUFFER,*PVOLUME_BITMAP_BUFFER;

typedef struct {
  LARGE_INTEGER StartingVcn;
} STARTING_VCN_INPUT_BUFFER,*PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {
  DWORD ExtentCount;
  LARGE_INTEGER StartingVcn;
  struct {
    LARGE_INTEGER NextVcn;
    LARGE_INTEGER Lcn;
  } Extents[1];
} RETRIEVAL_POINTERS_BUFFER,*PRETRIEVAL_POINTERS_BUFFER;

typedef struct {
  LARGE_INTEGER FileReferenceNumber;
} NTFS_FILE_RECORD_INPUT_BUFFER,*PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {
  LARGE_INTEGER FileReferenceNumber;
  DWORD FileRecordLength;
  BYTE FileRecordBuffer[1];
} NTFS_FILE_RECORD_OUTPUT_BUFFER,*PNTFS_FILE_RECORD_OUTPUT_BUFFER;

typedef struct {
  HANDLE FileHandle;
  LARGE_INTEGER StartingVcn;
  LARGE_INTEGER StartingLcn;
  DWORD ClusterCount;
} MOVE_FILE_DATA,*PMOVE_FILE_DATA;


typedef struct _MOVE_FILE_DATA32 {
  UINT32 FileHandle;
  LARGE_INTEGER StartingVcn;
  LARGE_INTEGER StartingLcn;
  DWORD ClusterCount;
} MOVE_FILE_DATA32,*PMOVE_FILE_DATA32;


typedef struct {
  DWORD Restart;
  SID Sid;
} FIND_BY_SID_DATA,*PFIND_BY_SID_DATA;

typedef struct {
  DWORD NextEntryOffset;
  DWORD FileIndex;
  DWORD FileNameLength;
  WCHAR FileName[1];
} FIND_BY_SID_OUTPUT,*PFIND_BY_SID_OUTPUT;

typedef struct {
  DWORDLONG StartFileReferenceNumber;
  USN LowUsn;
  USN HighUsn;
} MFT_ENUM_DATA,*PMFT_ENUM_DATA;

typedef struct {
  DWORDLONG MaximumSize;
  DWORDLONG AllocationDelta;
} CREATE_USN_JOURNAL_DATA,*PCREATE_USN_JOURNAL_DATA;

typedef struct {
  USN StartUsn;
  DWORD ReasonMask;
  DWORD ReturnOnlyOnClose;
  DWORDLONG Timeout;
  DWORDLONG BytesToWaitFor;
  DWORDLONG UsnJournalID;
} READ_USN_JOURNAL_DATA,*PREAD_USN_JOURNAL_DATA;

typedef struct {
  DWORD RecordLength;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORDLONG FileReferenceNumber;
  DWORDLONG ParentFileReferenceNumber;
  USN Usn;
  LARGE_INTEGER TimeStamp;
  DWORD Reason;
  DWORD SourceInfo;
  DWORD SecurityId;
  DWORD FileAttributes;
  WORD FileNameLength;
  WORD FileNameOffset;
  WCHAR FileName[1];
} USN_RECORD,*PUSN_RECORD;

#define USN_PAGE_SIZE

#define USN_REASON_DATA_OVERWRITE
#define USN_REASON_DATA_EXTEND
#define USN_REASON_DATA_TRUNCATION
#define USN_REASON_NAMED_DATA_OVERWRITE
#define USN_REASON_NAMED_DATA_EXTEND
#define USN_REASON_NAMED_DATA_TRUNCATION
#define USN_REASON_FILE_CREATE
#define USN_REASON_FILE_DELETE
#define USN_REASON_EA_CHANGE
#define USN_REASON_SECURITY_CHANGE
#define USN_REASON_RENAME_OLD_NAME
#define USN_REASON_RENAME_NEW_NAME
#define USN_REASON_INDEXABLE_CHANGE
#define USN_REASON_BASIC_INFO_CHANGE
#define USN_REASON_HARD_LINK_CHANGE
#define USN_REASON_COMPRESSION_CHANGE
#define USN_REASON_ENCRYPTION_CHANGE
#define USN_REASON_OBJECT_ID_CHANGE
#define USN_REASON_REPARSE_POINT_CHANGE
#define USN_REASON_STREAM_CHANGE

#define USN_REASON_CLOSE

typedef struct {
  DWORDLONG UsnJournalID;
  USN FirstUsn;
  USN NextUsn;
  USN LowestValidUsn;
  USN MaxUsn;
  DWORDLONG MaximumSize;
  DWORDLONG AllocationDelta;
} USN_JOURNAL_DATA,*PUSN_JOURNAL_DATA;

typedef struct {
  DWORDLONG UsnJournalID;
  DWORD DeleteFlags;
} DELETE_USN_JOURNAL_DATA,*PDELETE_USN_JOURNAL_DATA;

#define USN_DELETE_FLAG_DELETE
#define USN_DELETE_FLAG_NOTIFY

#define USN_DELETE_VALID_FLAGS

typedef struct {
  DWORD UsnSourceInfo;
  HANDLE VolumeHandle;
  DWORD HandleInfo;
} MARK_HANDLE_INFO,*PMARK_HANDLE_INFO;



typedef struct {
  DWORD UsnSourceInfo;
  UINT32 VolumeHandle;
  DWORD HandleInfo;

} MARK_HANDLE_INFO32,*PMARK_HANDLE_INFO32;


#define USN_SOURCE_DATA_MANAGEMENT
#define USN_SOURCE_AUXILIARY_DATA
#define USN_SOURCE_REPLICATION_MANAGEMENT

#define MARK_HANDLE_PROTECT_CLUSTERS
#define MARK_HANDLE_TXF_SYSTEM_LOG
#define MARK_HANDLE_NOT_TXF_SYSTEM_LOG
#define MARK_HANDLE_REALTIME
#define MARK_HANDLE_NOT_REALTIME

typedef struct {
  ACCESS_MASK DesiredAccess;
  DWORD SecurityIds[1];
} BULK_SECURITY_TEST_DATA,*PBULK_SECURITY_TEST_DATA;

#define VOLUME_IS_DIRTY
#define VOLUME_UPGRADE_SCHEDULED

typedef struct _FILE_PREFETCH {
  DWORD Type;
  DWORD Count;
  DWORDLONG Prefetch[1];
} FILE_PREFETCH,*PFILE_PREFETCH;

#define FILE_PREFETCH_TYPE_FOR_CREATE

typedef struct _FILESYSTEM_STATISTICS {
  WORD FileSystemType;
  WORD Version;
  DWORD SizeOfCompleteStructure;
  DWORD UserFileReads;
  DWORD UserFileReadBytes;
  DWORD UserDiskReads;
  DWORD UserFileWrites;
  DWORD UserFileWriteBytes;
  DWORD UserDiskWrites;
  DWORD MetaDataReads;
  DWORD MetaDataReadBytes;
  DWORD MetaDataDiskReads;
  DWORD MetaDataWrites;
  DWORD MetaDataWriteBytes;
  DWORD MetaDataDiskWrites;
} FILESYSTEM_STATISTICS,*PFILESYSTEM_STATISTICS;

#define FILESYSTEM_STATISTICS_TYPE_NTFS
#define FILESYSTEM_STATISTICS_TYPE_FAT

typedef struct _FAT_STATISTICS {
  DWORD CreateHits;
  DWORD SuccessfulCreates;
  DWORD FailedCreates;
  DWORD NonCachedReads;
  DWORD NonCachedReadBytes;
  DWORD NonCachedWrites;
  DWORD NonCachedWriteBytes;
  DWORD NonCachedDiskReads;
  DWORD NonCachedDiskWrites;
} FAT_STATISTICS,*PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
  DWORD CreateHits;
  DWORD SuccessfulCreates;
  DWORD FailedCreates;
  DWORD NonCachedReads;
  DWORD NonCachedReadBytes;
  DWORD NonCachedWrites;
  DWORD NonCachedWriteBytes;
  DWORD NonCachedDiskReads;
  DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {
  DWORD LogFileFullExceptions;
  DWORD OtherExceptions;
  DWORD MftReads;
  DWORD MftReadBytes;
  DWORD MftWrites;
  DWORD MftWriteBytes;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } MftWritesUserLevel;
  WORD MftWritesFlushForLogFileFull;
  WORD MftWritesLazyWriter;
  WORD MftWritesUserRequest;
  DWORD Mft2Writes;
  DWORD Mft2WriteBytes;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } Mft2WritesUserLevel;
  WORD Mft2WritesFlushForLogFileFull;
  WORD Mft2WritesLazyWriter;
  WORD Mft2WritesUserRequest;
  DWORD RootIndexReads;
  DWORD RootIndexReadBytes;
  DWORD RootIndexWrites;
  DWORD RootIndexWriteBytes;
  DWORD BitmapReads;
  DWORD BitmapReadBytes;
  DWORD BitmapWrites;
  DWORD BitmapWriteBytes;
  WORD BitmapWritesFlushForLogFileFull;
  WORD BitmapWritesLazyWriter;
  WORD BitmapWritesUserRequest;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
  } BitmapWritesUserLevel;
  DWORD MftBitmapReads;
  DWORD MftBitmapReadBytes;
  DWORD MftBitmapWrites;
  DWORD MftBitmapWriteBytes;
  WORD MftBitmapWritesFlushForLogFileFull;
  WORD MftBitmapWritesLazyWriter;
  WORD MftBitmapWritesUserRequest;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } MftBitmapWritesUserLevel;
  DWORD UserIndexReads;
  DWORD UserIndexReadBytes;
  DWORD UserIndexWrites;
  DWORD UserIndexWriteBytes;
  DWORD LogFileReads;
  DWORD LogFileReadBytes;
  DWORD LogFileWrites;
  DWORD LogFileWriteBytes;
  struct {
    DWORD Calls;
    DWORD Clusters;
    DWORD Hints;
    DWORD RunsReturned;
    DWORD HintsHonored;
    DWORD HintsClusters;
    DWORD Cache;
    DWORD CacheClusters;
    DWORD CacheMiss;
    DWORD CacheMissClusters;
  } Allocate;
} NTFS_STATISTICS,*PNTFS_STATISTICS;

typedef struct _FILE_OBJECTID_BUFFER {
  BYTE ObjectId[16];
  __extension__ union {
    __extension__ struct {
      BYTE BirthVolumeId[16];
      BYTE BirthObjectId[16];
      BYTE DomainId[16];
    } ;
    BYTE ExtendedInfo[48];
  } ;
} FILE_OBJECTID_BUFFER,*PFILE_OBJECTID_BUFFER;

typedef struct _FILE_SET_SPARSE_BUFFER {
  BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER,*PFILE_SET_SPARSE_BUFFER;

typedef struct _FILE_ZERO_DATA_INFORMATION {
  LARGE_INTEGER FileOffset;
  LARGE_INTEGER BeyondFinalZero;
} FILE_ZERO_DATA_INFORMATION,*PFILE_ZERO_DATA_INFORMATION;

typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
  LARGE_INTEGER FileOffset;
  LARGE_INTEGER Length;
} FILE_ALLOCATED_RANGE_BUFFER,*PFILE_ALLOCATED_RANGE_BUFFER;

typedef struct _ENCRYPTION_BUFFER {
  DWORD EncryptionOperation;
  BYTE Private[1];
} ENCRYPTION_BUFFER,*PENCRYPTION_BUFFER;

#define FILE_SET_ENCRYPTION
#define FILE_CLEAR_ENCRYPTION
#define STREAM_SET_ENCRYPTION
#define STREAM_CLEAR_ENCRYPTION

#define MAXIMUM_ENCRYPTION_VALUE

typedef struct _DECRYPTION_STATUS_BUFFER {
  BOOLEAN NoEncryptedStreams;
} DECRYPTION_STATUS_BUFFER,*PDECRYPTION_STATUS_BUFFER;

#define ENCRYPTION_FORMAT_DEFAULT
#define COMPRESSION_FORMAT_SPARSE

typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
  LONGLONG FileOffset;
  DWORD Length;
} REQUEST_RAW_ENCRYPTED_DATA,*PREQUEST_RAW_ENCRYPTED_DATA;

typedef struct _ENCRYPTED_DATA_INFO {
  DWORDLONG StartingFileOffset;
  DWORD OutputBufferOffset;
  DWORD BytesWithinFileSize;
  DWORD BytesWithinValidDataLength;
  WORD CompressionFormat;
  BYTE DataUnitShift;
  BYTE ChunkShift;
  BYTE ClusterShift;
  BYTE EncryptionFormat;
  WORD NumberOfDataBlocks;
  DWORD DataBlockSize[1];
} ENCRYPTED_DATA_INFO;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;

typedef struct _PLEX_READ_DATA_REQUEST {
  LARGE_INTEGER ByteOffset;
  DWORD ByteLength;
  DWORD PlexNumber;
} PLEX_READ_DATA_REQUEST,*PPLEX_READ_DATA_REQUEST;

typedef struct _SI_COPYFILE {
  DWORD SourceFileNameLength;
  DWORD DestinationFileNameLength;
  DWORD Flags;
  WCHAR FileNameBuffer[1];
} SI_COPYFILE,*PSI_COPYFILE;

#define COPYFILE_SIS_LINK
#define COPYFILE_SIS_REPLACE
#define COPYFILE_SIS_FLAGS

typedef struct _STORAGE_DESCRIPTOR_HEADER {
  DWORD Version;
  DWORD Size;
} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;

typedef enum _STORAGE_PROPERTY_ID {
  StorageDeviceProperty = 0,
  StorageAdapterProperty = 1,
  StorageDeviceIdProperty = 2,
  StorageDeviceUniqueIdProperty = 3,
  StorageDeviceWriteCacheProperty = 4,
  StorageMiniportProperty = 5,
  StorageAccessAlignmentProperty = 6,
  StorageDeviceSeekPenaltyProperty = 7,
  StorageDeviceTrimProperty = 8
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;

typedef enum _STORAGE_QUERY_TYPE {
  PropertyStandardQuery = 0,
  PropertyExistsQuery = 1,
  PropertyMaskQuery = 2,
  PropertyQueryMaxDefined = 3
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;

typedef struct _STORAGE_PROPERTY_QUERY {
  STORAGE_PROPERTY_ID PropertyId;
  STORAGE_QUERY_TYPE QueryType;
  BYTE AdditionalParameters[1];
} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;

typedef struct _STORAGE_DEVICE_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  BYTE DeviceType;
  BYTE DeviceTypeModifier;
  BOOLEAN RemovableMedia;
  BOOLEAN CommandQueueing;
  DWORD VendorIdOffset;
  DWORD ProductIdOffset;
  DWORD ProductRevisionOffset;
  DWORD SerialNumberOffset;
  STORAGE_BUS_TYPE BusType;
  DWORD RawPropertiesLength;
  BYTE RawDeviceProperties[1];
} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;

typedef struct _STORAGE_ADAPTER_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  DWORD MaximumTransferLength;
  DWORD MaximumPhysicalPages;
  DWORD AlignmentMask;
  BOOLEAN AdapterUsesPio;
  BOOLEAN AdapterScansDown;
  BOOLEAN CommandQueueing;
  BOOLEAN AcceleratedTransfer;
  BYTE BusType;
  WORD BusMajorVersion;
  WORD BusMinorVersion;
} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  DWORD NumberOfIdentifiers;
  BYTE Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;

typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
  ULONGLONG GptAttributes;
} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
# 2295 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winioctl.h" 3
#define IOCTL_VOLUME_BASE

#define IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS
#define IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE
#define IOCTL_VOLUME_ONLINE
#define IOCTL_VOLUME_OFFLINE
#define IOCTL_VOLUME_IS_OFFLINE
#define IOCTL_VOLUME_IS_IO_CAPABLE
#define IOCTL_VOLUME_QUERY_FAILOVER_SET
#define IOCTL_VOLUME_QUERY_VOLUME_NUMBER
#define IOCTL_VOLUME_LOGICAL_TO_PHYSICAL
#define IOCTL_VOLUME_PHYSICAL_TO_LOGICAL
#define IOCTL_VOLUME_IS_CLUSTERED
#define IOCTL_VOLUME_GET_GPT_ATTRIBUTES

typedef struct _DISK_EXTENT {
  DWORD DiskNumber;
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER ExtentLength;
} DISK_EXTENT,*PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS {
  DWORD NumberOfDiskExtents;
  DISK_EXTENT Extents[1];
} VOLUME_DISK_EXTENTS,*PVOLUME_DISK_EXTENTS;
# 12 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winscard.h" 2 3
# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsmcrd.h" 1 3






#define _NTDDSCRD_H2_
# 27 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsmcrd.h" 3
  typedef WORD UWORD;






#define FILE_DEVICE_SMARTCARD






#define SCARD_ATR_LENGTH

#define SCARD_PROTOCOL_UNDEFINED
#define SCARD_PROTOCOL_T0
#define SCARD_PROTOCOL_T1
#define SCARD_PROTOCOL_RAW
#define SCARD_PROTOCOL_Tx
#define SCARD_PROTOCOL_DEFAULT
#define SCARD_PROTOCOL_OPTIMAL

#define SCARD_POWER_DOWN
#define SCARD_COLD_RESET
#define SCARD_WARM_RESET

#define SCARD_CTL_CODE

#define IOCTL_SMARTCARD_POWER
#define IOCTL_SMARTCARD_GET_ATTRIBUTE
#define IOCTL_SMARTCARD_SET_ATTRIBUTE
#define IOCTL_SMARTCARD_CONFISCATE
#define IOCTL_SMARTCARD_TRANSMIT
#define IOCTL_SMARTCARD_EJECT
#define IOCTL_SMARTCARD_SWALLOW

#define IOCTL_SMARTCARD_IS_PRESENT
#define IOCTL_SMARTCARD_IS_ABSENT
#define IOCTL_SMARTCARD_SET_PROTOCOL
#define IOCTL_SMARTCARD_GET_STATE
#define IOCTL_SMARTCARD_GET_LAST_ERROR
#define IOCTL_SMARTCARD_GET_PERF_CNTR

#define MAXIMUM_ATTR_STRING_LENGTH
#define MAXIMUM_SMARTCARD_READERS

#define SCARD_ATTR_VALUE

#define SCARD_CLASS_VENDOR_INFO
#define SCARD_CLASS_COMMUNICATIONS
#define SCARD_CLASS_PROTOCOL
#define SCARD_CLASS_POWER_MGMT
#define SCARD_CLASS_SECURITY
#define SCARD_CLASS_MECHANICAL
#define SCARD_CLASS_VENDOR_DEFINED
#define SCARD_CLASS_IFD_PROTOCOL
#define SCARD_CLASS_ICC_STATE
#define SCARD_CLASS_PERF
#define SCARD_CLASS_SYSTEM

#define SCARD_ATTR_VENDOR_NAME
#define SCARD_ATTR_VENDOR_IFD_TYPE
#define SCARD_ATTR_VENDOR_IFD_VERSION
#define SCARD_ATTR_VENDOR_IFD_SERIAL_NO
#define SCARD_ATTR_CHANNEL_ID
#define SCARD_ATTR_PROTOCOL_TYPES

#define SCARD_ATTR_DEFAULT_CLK
#define SCARD_ATTR_MAX_CLK
#define SCARD_ATTR_DEFAULT_DATA_RATE
#define SCARD_ATTR_MAX_DATA_RATE
#define SCARD_ATTR_MAX_IFSD

#define SCARD_ATTR_POWER_MGMT_SUPPORT
#define SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE
#define SCARD_ATTR_USER_AUTH_INPUT_DEVICE
#define SCARD_ATTR_CHARACTERISTICS

#define SCARD_ATTR_CURRENT_PROTOCOL_TYPE
#define SCARD_ATTR_CURRENT_CLK
#define SCARD_ATTR_CURRENT_F
#define SCARD_ATTR_CURRENT_D
#define SCARD_ATTR_CURRENT_N
#define SCARD_ATTR_CURRENT_W
#define SCARD_ATTR_CURRENT_IFSC
#define SCARD_ATTR_CURRENT_IFSD
#define SCARD_ATTR_CURRENT_BWT
#define SCARD_ATTR_CURRENT_CWT
#define SCARD_ATTR_CURRENT_EBC_ENCODING
#define SCARD_ATTR_EXTENDED_BWT

#define SCARD_ATTR_ICC_PRESENCE
#define SCARD_ATTR_ICC_INTERFACE_STATUS
#define SCARD_ATTR_CURRENT_IO_STATE
#define SCARD_ATTR_ATR_STRING
#define SCARD_ATTR_ICC_TYPE_PER_ATR

#define SCARD_ATTR_ESC_RESET
#define SCARD_ATTR_ESC_CANCEL
#define SCARD_ATTR_ESC_AUTHREQUEST
#define SCARD_ATTR_MAXINPUT

#define SCARD_ATTR_DEVICE_UNIT
#define SCARD_ATTR_DEVICE_IN_USE
#define SCARD_ATTR_DEVICE_FRIENDLY_NAME_A
#define SCARD_ATTR_DEVICE_SYSTEM_NAME_A
#define SCARD_ATTR_DEVICE_FRIENDLY_NAME_W
#define SCARD_ATTR_DEVICE_SYSTEM_NAME_W
#define SCARD_ATTR_SUPRESS_T1_IFS_REQUEST

#define SCARD_PERF_NUM_TRANSMISSIONS
#define SCARD_PERF_BYTES_TRANSMITTED
#define SCARD_PERF_TRANSMISSION_TIME

#define SCARD_ATTR_DEVICE_FRIENDLY_NAME
#define SCARD_ATTR_DEVICE_SYSTEM_NAME

#define SCARD_T0_HEADER_LENGTH
#define SCARD_T0_CMD_LENGTH

#define SCARD_T1_PROLOGUE_LENGTH
#define SCARD_T1_EPILOGUE_LENGTH
#define SCARD_T1_MAX_IFS

#define SCARD_UNKNOWN
#define SCARD_ABSENT
#define SCARD_PRESENT
#define SCARD_SWALLOWED
#define SCARD_POWERED
#define SCARD_NEGOTIABLE
#define SCARD_SPECIFIC

  typedef struct _SCARD_IO_REQUEST {
    DWORD dwProtocol;
    DWORD cbPciLength;
  } SCARD_IO_REQUEST,*PSCARD_IO_REQUEST,*LPSCARD_IO_REQUEST;
  typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

  typedef struct {
    BYTE
      bCla,bIns,bP1,bP2,bP3;
  } SCARD_T0_COMMAND,*LPSCARD_T0_COMMAND;

  typedef struct {
    SCARD_IO_REQUEST ioRequest;
    BYTE bSw1,bSw2;
    __extension__ union {
      SCARD_T0_COMMAND CmdBytes;
      BYTE rgbHeader[5];
    };
  } SCARD_T0_REQUEST;

  typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST,*LPSCARD_T0_REQUEST;

  typedef struct {
    SCARD_IO_REQUEST ioRequest;
  } SCARD_T1_REQUEST;
  typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST,*LPSCARD_T1_REQUEST;

#define SCARD_READER_SWALLOWS
#define SCARD_READER_EJECTS
#define SCARD_READER_CONFISCATES

#define SCARD_READER_TYPE_SERIAL
#define SCARD_READER_TYPE_PARALELL
#define SCARD_READER_TYPE_KEYBOARD
#define SCARD_READER_TYPE_SCSI
#define SCARD_READER_TYPE_IDE
#define SCARD_READER_TYPE_USB
#define SCARD_READER_TYPE_PCMCIA
#define SCARD_READER_TYPE_VENDOR
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winscard.h" 2 3
# 22 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winscard.h" 3
#define _LPCBYTE_DEFINED
  typedef const BYTE *LPCBYTE;







#define WINSCARDAPI


#define WINSCARDDATA


  __attribute__((dllimport)) extern const SCARD_IO_REQUEST g_rgSCardT0Pci,g_rgSCardT1Pci,g_rgSCardRawPci;
#define SCARD_PCI_T0
#define SCARD_PCI_T1
#define SCARD_PCI_RAW

  typedef ULONG_PTR SCARDCONTEXT;
  typedef SCARDCONTEXT *PSCARDCONTEXT,*LPSCARDCONTEXT;

  typedef ULONG_PTR SCARDHANDLE;
  typedef SCARDHANDLE *PSCARDHANDLE,*LPSCARDHANDLE;

#define SCARD_AUTOALLOCATE
#define SCARD_SCOPE_USER
#define SCARD_SCOPE_TERMINAL
#define SCARD_SCOPE_SYSTEM

  extern LONG SCardEstablishContext(DWORD dwScope,LPCVOID pvReserved1,LPCVOID pvReserved2,LPSCARDCONTEXT phContext);
  extern LONG SCardReleaseContext(SCARDCONTEXT hContext);
  extern LONG SCardIsValidContext(SCARDCONTEXT hContext);

#define SCARD_ALL_READERS
#define SCARD_DEFAULT_READERS
#define SCARD_LOCAL_READERS
#define SCARD_SYSTEM_READERS

#define SCARD_PROVIDER_PRIMARY
#define SCARD_PROVIDER_CSP

#define SCardListReaderGroups
#define SCardListReaders
#define SCardListCards
#define SCardListInterfaces
#define SCardGetProviderId
#define SCardGetCardTypeProviderName
#define SCardIntroduceReaderGroup
#define SCardForgetReaderGroup
#define SCardIntroduceReader
#define SCardForgetReader
#define SCardAddReaderToGroup
#define SCardRemoveReaderFromGroup
#define SCardIntroduceCardType
#define SCardSetCardTypeProviderName
#define SCardForgetCardType

  extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext,LPSTR mszGroups,LPDWORD pcchGroups);
  extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext,LPWSTR mszGroups,LPDWORD pcchGroups);
  extern LONG SCardListReadersA(SCARDCONTEXT hContext,LPCSTR mszGroups,LPSTR mszReaders,LPDWORD pcchReaders);
  extern LONG SCardListReadersW(SCARDCONTEXT hContext,LPCWSTR mszGroups,LPWSTR mszReaders,LPDWORD pcchReaders);
  extern LONG SCardListCardsA(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPSTR mszCards,LPDWORD pcchCards);
  extern LONG SCardListCardsW(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPWSTR mszCards,LPDWORD pcchCards);
#define SCardListCardTypes
  extern LONG SCardListInterfacesA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
  extern LONG SCardListInterfacesW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
  extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidProviderId);
  extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidProviderId);
  extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPSTR szProvider,LPDWORD pcchProvider);
  extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPWSTR szProvider,LPDWORD pcchProvider);
  extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
  extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
  extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
  extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
  extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szDeviceName);
  extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szDeviceName);
  extern LONG SCardForgetReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName);
  extern LONG SCardForgetReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName);
  extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
  extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
  extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
  extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
  extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);
  extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);

#define PCSCardIntroduceCardType

  extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPCSTR szProvider);
  extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPCWSTR szProvider);
  extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName);
  extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName);
  extern LONG SCardFreeMemory(SCARDCONTEXT hContext,LPCVOID pvMem);
  extern HANDLE SCardAccessStartedEvent(void);
  extern void SCardReleaseStartedEvent(void);

  typedef struct {
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
  } SCARD_READERSTATEA,*PSCARD_READERSTATEA,*LPSCARD_READERSTATEA;

  typedef struct {
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
  } SCARD_READERSTATEW,*PSCARD_READERSTATEW,*LPSCARD_READERSTATEW;

  typedef SCARD_READERSTATEA SCARD_READERSTATE;
  typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
  typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;

#define SCardLocateCards
#define SCardLocateCardsByATR
#define SCardGetStatusChange
#define SCardConnect
#define SCardStatus

#define SCARD_READERSTATE_A
#define SCARD_READERSTATE_W
#define PSCARD_READERSTATE_A
#define PSCARD_READERSTATE_W
#define LPSCARD_READERSTATE_A
#define LPSCARD_READERSTATE_W

#define SCARD_STATE_UNAWARE
#define SCARD_STATE_IGNORE
#define SCARD_STATE_CHANGED
#define SCARD_STATE_UNKNOWN
#define SCARD_STATE_UNAVAILABLE
#define SCARD_STATE_EMPTY
#define SCARD_STATE_PRESENT
#define SCARD_STATE_ATRMATCH
#define SCARD_STATE_EXCLUSIVE
#define SCARD_STATE_INUSE
#define SCARD_STATE_MUTE
#define SCARD_STATE_UNPOWERED

  extern LONG SCardLocateCardsA(SCARDCONTEXT hContext,LPCSTR mszCards,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG SCardLocateCardsW(SCARDCONTEXT hContext,LPCWSTR mszCards,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);

  typedef struct _SCARD_ATRMASK {
    DWORD cbAtr;
    BYTE rgbAtr[36];
    BYTE rgbMask[36];
  } SCARD_ATRMASK,*PSCARD_ATRMASK,*LPSCARD_ATRMASK;

  extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
  extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
  extern LONG SCardCancel(SCARDCONTEXT hContext);

#define SCARD_SHARE_EXCLUSIVE
#define SCARD_SHARE_SHARED
#define SCARD_SHARE_DIRECT

#define SCARD_LEAVE_CARD
#define SCARD_RESET_CARD
#define SCARD_UNPOWER_CARD
#define SCARD_EJECT_CARD

  extern LONG SCardConnectA(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
  extern LONG SCardConnectW(SCARDCONTEXT hContext,LPCWSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
  extern LONG SCardReconnect(SCARDHANDLE hCard,DWORD dwShareMode,DWORD dwPreferredProtocols,DWORD dwInitialization,LPDWORD pdwActiveProtocol);
  extern LONG SCardDisconnect(SCARDHANDLE hCard,DWORD dwDisposition);
  extern LONG SCardBeginTransaction(SCARDHANDLE hCard);
  extern LONG SCardEndTransaction(SCARDHANDLE hCard,DWORD dwDisposition);
  extern LONG SCardCancelTransaction(SCARDHANDLE hCard);
  extern LONG SCardState(SCARDHANDLE hCard,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG SCardStatusA(SCARDHANDLE hCard,LPSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG SCardStatusW(SCARDHANDLE hCard,LPWSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG SCardTransmit(SCARDHANDLE hCard,LPCSCARD_IO_REQUEST pioSendPci,LPCBYTE pbSendBuffer,DWORD cbSendLength,LPSCARD_IO_REQUEST pioRecvPci,LPBYTE pbRecvBuffer,LPDWORD pcbRecvLength);
  extern LONG SCardControl(SCARDHANDLE hCard,DWORD dwControlCode,LPCVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned);
  extern LONG SCardGetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPBYTE pbAttr,LPDWORD pcbAttrLen);

#define SCardGetReaderCapabilities

  extern LONG SCardSetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPCBYTE pbAttr,DWORD cbAttrLen);

#define SCardSetReaderCapabilities

#define SC_DLG_MINIMAL_UI
#define SC_DLG_NO_UI
#define SC_DLG_FORCE_UI

#define SCERR_NOCARDNAME
#define SCERR_NOGUIDS

#define LPOCNCONNPROC

  typedef SCARDHANDLE ( *LPOCNCONNPROCA) (SCARDCONTEXT,LPSTR,LPSTR,PVOID);
  typedef SCARDHANDLE ( *LPOCNCONNPROCW) (SCARDCONTEXT,LPWSTR,LPWSTR,PVOID);
  typedef WINBOOL ( *LPOCNCHKPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);
  typedef void ( *LPOCNDSCPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);

  typedef struct {
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
  } OPENCARD_SEARCH_CRITERIAA,*POPENCARD_SEARCH_CRITERIAA,*LPOPENCARD_SEARCH_CRITERIAA;

  typedef struct {
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
  } OPENCARD_SEARCH_CRITERIAW,*POPENCARD_SEARCH_CRITERIAW,*LPOPENCARD_SEARCH_CRITERIAW;

  typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
  typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
  typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;

  typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAME_EXA,*POPENCARDNAME_EXA,*LPOPENCARDNAME_EXA;

  typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAME_EXW,*POPENCARDNAME_EXW,*LPOPENCARDNAME_EXW;

  typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
  typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
  typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;

#define OPENCARDNAMEA_EX
#define OPENCARDNAMEW_EX
#define POPENCARDNAMEA_EX
#define POPENCARDNAMEW_EX
#define LPOPENCARDNAMEA_EX
#define LPOPENCARDNAMEW_EX

#define SCardUIDlgSelectCard

  extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA);
  extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW);

  typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAMEA,*POPENCARDNAMEA,*LPOPENCARDNAMEA;

  typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAMEW,*POPENCARDNAMEW,*LPOPENCARDNAMEW;

  typedef OPENCARDNAMEA OPENCARDNAME;
  typedef POPENCARDNAMEA POPENCARDNAME;
  typedef LPOPENCARDNAMEA LPOPENCARDNAME;

#define OPENCARDNAME_A
#define OPENCARDNAME_W
#define POPENCARDNAME_A
#define POPENCARDNAME_W
#define LPOPENCARDNAME_A
#define LPOPENCARDNAME_W

#define GetOpenCardName

  extern LONG GetOpenCardNameA(LPOPENCARDNAMEA);
  extern LONG GetOpenCardNameW(LPOPENCARDNAMEW);
  extern LONG SCardDlgExtendedError(void);
# 98 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winspool.h" 1 3






#define _WINSPOOL_




# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 1 3






#define _PRSHT_H_
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 3
#define WINCOMMCTRLAPI






#define CCSIZEOF_STRUCT



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/pshpack8.h" 1 3






#pragma pack(push,8)
# 31 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 2 3
# 43 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 3
#define SNDMSG



#define MAXPROPPAGES

  struct _PSP;
  struct _PROPSHEETPAGEA;
  struct _PROPSHEETPAGEW;

  typedef struct _PSP *HPROPSHEETPAGE;
  typedef UINT ( *LPFNPSPCALLBACKA)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEA *ppsp);
  typedef UINT ( *LPFNPSPCALLBACKW)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEW *ppsp);

#define LPFNPSPCALLBACK

#define PSP_DEFAULT
#define PSP_DLGINDIRECT
#define PSP_USEHICON
#define PSP_USEICONID
#define PSP_USETITLE
#define PSP_RTLREADING

#define PSP_HASHELP
#define PSP_USEREFPARENT
#define PSP_USECALLBACK
#define PSP_PREMATURE

#define PSP_HIDEHEADER
#define PSP_USEHEADERTITLE
#define PSP_USEHEADERSUBTITLE
#define PSP_USEFUSIONCONTEXT

#define PSPCB_ADDREF
#define PSPCB_RELEASE
#define PSPCB_CREATE

#define PROPSHEETPAGEA_V1_SIZE
#define PROPSHEETPAGEW_V1_SIZE

#define PROPSHEETPAGEA_V2_SIZE
#define PROPSHEETPAGEW_V2_SIZE

  typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;

#define PROPSHEETPAGEA_V1_FIELDS
# 103 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 3
#define PROPSHEETPAGEW_V1_FIELDS
# 118 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 3
#define _PROPSHEETPAGEA_V3
#define _PROPSHEETPAGEW_V3

  typedef struct _PROPSHEETPAGEA_V1 {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
  } PROPSHEETPAGEA_V1,*LPPROPSHEETPAGEA_V1;

  typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

  typedef struct _PROPSHEETPAGEA_V2 {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

      LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
  } PROPSHEETPAGEA_V2,*LPPROPSHEETPAGEA_V2;

  typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

  typedef struct _PROPSHEETPAGEA {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
      LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
    HANDLE hActCtx;
  } PROPSHEETPAGEA_V3,*LPPROPSHEETPAGEA_V3;

  typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;

  typedef struct _PROPSHEETPAGEW_V1 {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
  } PROPSHEETPAGEW_V1,*LPPROPSHEETPAGEW_V1;

  typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

  typedef struct _PROPSHEETPAGEW_V2 {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
      LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
  } PROPSHEETPAGEW_V2,*LPPROPSHEETPAGEW_V2;

  typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

  typedef struct _PROPSHEETPAGEW {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
      LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
    HANDLE hActCtx;
  } PROPSHEETPAGEW_V3,*LPPROPSHEETPAGEW_V3;

  typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
  typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
  typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
  typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
  typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
  typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
  typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;

  typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA;
  typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW;
  typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA;
  typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW;
  typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA;
  typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW;

#define PROPSHEETPAGE
#define LPPROPSHEETPAGE
#define LPCPROPSHEETPAGE

#define PROPSHEETPAGE_V1_SIZE
#define PROPSHEETPAGE_V2_SIZE
#define PROPSHEETPAGE_V1
#define LPPROPSHEETPAGE_V1
#define LPCPROPSHEETPAGE_V1
#define PROPSHEETPAGE_V2
#define LPPROPSHEETPAGE_V2
#define LPCPROPSHEETPAGE_V2
#define PROPSHEETPAGE_V3
#define LPPROPSHEETPAGE_V3
#define LPCPROPSHEETPAGE_V3
#define PROPSHEETPAGE_LATEST
#define LPPROPSHEETPAGE_LATEST
#define LPCPROPSHEETPAGE_LATEST

#define PSH_DEFAULT
#define PSH_PROPTITLE
#define PSH_USEHICON
#define PSH_USEICONID
#define PSH_PROPSHEETPAGE
#define PSH_WIZARDHASFINISH
#define PSH_WIZARD
#define PSH_USEPSTARTPAGE
#define PSH_NOAPPLYNOW
#define PSH_USECALLBACK
#define PSH_HASHELP
#define PSH_MODELESS
#define PSH_RTLREADING
#define PSH_WIZARDCONTEXTHELP

#define PSH_WIZARD97
#define PSH_WATERMARK
#define PSH_USEHBMWATERMARK
#define PSH_USEHPLWATERMARK
#define PSH_STRETCHWATERMARK
#define PSH_HEADER
#define PSH_USEHBMHEADER
#define PSH_USEPAGELANG

#define PSH_WIZARD_LITE
#define PSH_NOCONTEXTHELP

  typedef int ( *PFNPROPSHEETCALLBACK)(HWND,UINT,LPARAM);

#define PROPSHEETHEADERA_V1_SIZE
#define PROPSHEETHEADERW_V1_SIZE

#define PROPSHEETHEADERA_V2_SIZE
#define PROPSHEETHEADERW_V2_SIZE

  typedef struct _PROPSHEETHEADERA {
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    __extension__ union {
      HICON hIcon;
      LPCSTR pszIcon;
    } ;
    LPCSTR pszCaption;
    UINT nPages;
    __extension__ union {
      UINT nStartPage;
      LPCSTR pStartPage;
    } ;
    __extension__ union {
      LPCPROPSHEETPAGEA ppsp;
      HPROPSHEETPAGE *phpage;
    } ;
    PFNPROPSHEETCALLBACK pfnCallback;
    __extension__ union {
      HBITMAP hbmWatermark;
      LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    __extension__ union {
      HBITMAP hbmHeader;
      LPCSTR pszbmHeader;
    } ;
  } PROPSHEETHEADERA,*LPPROPSHEETHEADERA;

  typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;

  typedef struct _PROPSHEETHEADERW {
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    __extension__ union {
      HICON hIcon;
      LPCWSTR pszIcon;
    } ;
    LPCWSTR pszCaption;
    UINT nPages;
    __extension__ union {
      UINT nStartPage;
      LPCWSTR pStartPage;
    } ;
    __extension__ union {
      LPCPROPSHEETPAGEW ppsp;
      HPROPSHEETPAGE *phpage;
    } ;
    PFNPROPSHEETCALLBACK pfnCallback;
    __extension__ union {
      HBITMAP hbmWatermark;
      LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    __extension__ union {
      HBITMAP hbmHeader;
      LPCWSTR pszbmHeader;
    } ;
  } PROPSHEETHEADERW,*LPPROPSHEETHEADERW;

  typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;

#define PROPSHEETHEADER
#define LPPROPSHEETHEADER
#define LPCPROPSHEETHEADER

#define PROPSHEETHEADER_V1_SIZE
#define PROPSHEETHEADER_V2_SIZE

#define PSCB_INITIALIZED
#define PSCB_PRECREATE
#define PSCB_BUTTONPRESSED

  __attribute__((dllimport)) HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
  __attribute__((dllimport)) HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
  __attribute__((dllimport)) WINBOOL DestroyPropertySheetPage(HPROPSHEETPAGE);
  __attribute__((dllimport)) INT_PTR PropertySheetA(LPCPROPSHEETHEADERA);
  __attribute__((dllimport)) INT_PTR PropertySheetW(LPCPROPSHEETHEADERW);

#define CreatePropertySheetPage
#define PropertySheet

  typedef WINBOOL ( *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE,LPARAM);
  typedef WINBOOL ( *LPFNADDPROPSHEETPAGES)(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM);

  typedef struct _PSHNOTIFY {
    NMHDR hdr;
    LPARAM lParam;
  } PSHNOTIFY,*LPPSHNOTIFY;

#define PSN_FIRST
#define PSN_LAST

#define PSN_SETACTIVE
#define PSN_KILLACTIVE
#define PSN_APPLY
#define PSN_RESET
#define PSN_HELP
#define PSN_WIZBACK
#define PSN_WIZNEXT
#define PSN_WIZFINISH
#define PSN_QUERYCANCEL
#define PSN_GETOBJECT
#define PSN_TRANSLATEACCELERATOR
#define PSN_QUERYINITIALFOCUS

#define PSNRET_NOERROR
#define PSNRET_INVALID
#define PSNRET_INVALID_NOCHANGEPAGE
#define PSNRET_MESSAGEHANDLED

#define PSM_SETCURSEL
#define PropSheet_SetCurSel

#define PSM_REMOVEPAGE
#define PropSheet_RemovePage

#define PSM_ADDPAGE
#define PropSheet_AddPage

#define PSM_CHANGED
#define PropSheet_Changed

#define PSM_RESTARTWINDOWS
#define PropSheet_RestartWindows

#define PSM_REBOOTSYSTEM
#define PropSheet_RebootSystem

#define PSM_CANCELTOCLOSE
#define PropSheet_CancelToClose

#define PSM_QUERYSIBLINGS
#define PropSheet_QuerySiblings

#define PSM_UNCHANGED
#define PropSheet_UnChanged

#define PSM_APPLY
#define PropSheet_Apply

#define PSM_SETTITLEA
#define PSM_SETTITLEW

#define PSM_SETTITLE

#define PropSheet_SetTitle

#define PSM_SETWIZBUTTONS
#define PropSheet_SetWizButtons

#define PSWIZB_BACK
#define PSWIZB_NEXT
#define PSWIZB_FINISH
#define PSWIZB_DISABLEDFINISH

#define PSM_PRESSBUTTON
#define PropSheet_PressButton

#define PSBTN_BACK
#define PSBTN_NEXT
#define PSBTN_FINISH
#define PSBTN_OK
#define PSBTN_APPLYNOW
#define PSBTN_CANCEL
#define PSBTN_HELP
#define PSBTN_MAX

#define PSM_SETCURSELID
#define PropSheet_SetCurSelByID

#define PSM_SETFINISHTEXTA
#define PSM_SETFINISHTEXTW

#define PSM_SETFINISHTEXT

#define PropSheet_SetFinishText

#define PSM_GETTABCONTROL
#define PropSheet_GetTabControl

#define PSM_ISDIALOGMESSAGE
#define PropSheet_IsDialogMessage

#define PSM_GETCURRENTPAGEHWND
#define PropSheet_GetCurrentPageHwnd

#define PSM_INSERTPAGE
#define PropSheet_InsertPage

#define PSM_SETHEADERTITLEA
#define PSM_SETHEADERTITLEW

#define PSM_SETHEADERTITLE

#define PropSheet_SetHeaderTitle

#define PSM_SETHEADERSUBTITLEA
#define PSM_SETHEADERSUBTITLEW

#define PSM_SETHEADERSUBTITLE

#define PropSheet_SetHeaderSubTitle

#define PSM_HWNDTOINDEX
#define PropSheet_HwndToIndex
#define PSM_INDEXTOHWND
#define PropSheet_IndexToHwnd
#define PSM_PAGETOINDEX
#define PropSheet_PageToIndex
#define PSM_INDEXTOPAGE
#define PropSheet_IndexToPage
#define PSM_IDTOINDEX
#define PropSheet_IdToIndex
#define PSM_INDEXTOID
#define PropSheet_IndexToId
#define PSM_GETRESULT
#define PropSheet_GetResult
#define PSM_RECALCPAGESIZES
#define PropSheet_RecalcPageSizes

#define ID_PSRESTARTWINDOWS
#define ID_PSREBOOTSYSTEM

#define WIZ_CXDLG
#define WIZ_CYDLG

#define WIZ_CXBMP

#define WIZ_BODYX
#define WIZ_BODYCX

#define PROP_SM_CXDLG
#define PROP_SM_CYDLG

#define PROP_MED_CXDLG
#define PROP_MED_CYDLG

#define PROP_LG_CXDLG
#define PROP_LG_CYDLG





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/poppack.h" 1 3






#pragma pack(pop)
# 485 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/prsht.h" 2 3
# 13 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winspool.h" 2 3






  typedef struct _PRINTER_INFO_1A {
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
  } PRINTER_INFO_1A,*PPRINTER_INFO_1A,*LPPRINTER_INFO_1A;

  typedef struct _PRINTER_INFO_1W {
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
  } PRINTER_INFO_1W,*PPRINTER_INFO_1W,*LPPRINTER_INFO_1W;

  typedef PRINTER_INFO_1A PRINTER_INFO_1;
  typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
  typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;

  typedef struct _PRINTER_INFO_2A {
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
  } PRINTER_INFO_2A,*PPRINTER_INFO_2A,*LPPRINTER_INFO_2A;

  typedef struct _PRINTER_INFO_2W {
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
  } PRINTER_INFO_2W,*PPRINTER_INFO_2W,*LPPRINTER_INFO_2W;

  typedef PRINTER_INFO_2A PRINTER_INFO_2;
  typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
  typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;

  typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
  } PRINTER_INFO_3,*PPRINTER_INFO_3,*LPPRINTER_INFO_3;

  typedef struct _PRINTER_INFO_4A {
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
  } PRINTER_INFO_4A,*PPRINTER_INFO_4A,*LPPRINTER_INFO_4A;

  typedef struct _PRINTER_INFO_4W {
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
  } PRINTER_INFO_4W,*PPRINTER_INFO_4W,*LPPRINTER_INFO_4W;

  typedef PRINTER_INFO_4A PRINTER_INFO_4;
  typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
  typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;

  typedef struct _PRINTER_INFO_5A {
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
  } PRINTER_INFO_5A,*PPRINTER_INFO_5A,*LPPRINTER_INFO_5A;

  typedef struct _PRINTER_INFO_5W {
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
  } PRINTER_INFO_5W,*PPRINTER_INFO_5W,*LPPRINTER_INFO_5W;

  typedef PRINTER_INFO_5A PRINTER_INFO_5;
  typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
  typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;

  typedef struct _PRINTER_INFO_6 {
    DWORD dwStatus;
  } PRINTER_INFO_6,*PPRINTER_INFO_6,*LPPRINTER_INFO_6;

  typedef struct _PRINTER_INFO_7A {
    LPSTR pszObjectGUID;
    DWORD dwAction;
  } PRINTER_INFO_7A,*PPRINTER_INFO_7A,*LPPRINTER_INFO_7A;

  typedef struct _PRINTER_INFO_7W {
    LPWSTR pszObjectGUID;
    DWORD dwAction;
  } PRINTER_INFO_7W,*PPRINTER_INFO_7W,*LPPRINTER_INFO_7W;

  typedef PRINTER_INFO_7A PRINTER_INFO_7;
  typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
  typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;

#define DSPRINT_PUBLISH
#define DSPRINT_UPDATE
#define DSPRINT_UNPUBLISH
#define DSPRINT_REPUBLISH
#define DSPRINT_PENDING

  typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
  } PRINTER_INFO_8A,*PPRINTER_INFO_8A,*LPPRINTER_INFO_8A;

  typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
  } PRINTER_INFO_8W,*PPRINTER_INFO_8W,*LPPRINTER_INFO_8W;

  typedef PRINTER_INFO_8A PRINTER_INFO_8;
  typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
  typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;

  typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
  } PRINTER_INFO_9A,*PPRINTER_INFO_9A,*LPPRINTER_INFO_9A;

  typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
  } PRINTER_INFO_9W,*PPRINTER_INFO_9W,*LPPRINTER_INFO_9W;

  typedef PRINTER_INFO_9A PRINTER_INFO_9;
  typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
  typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;

#define PRINTER_CONTROL_PAUSE
#define PRINTER_CONTROL_RESUME
#define PRINTER_CONTROL_PURGE
#define PRINTER_CONTROL_SET_STATUS

#define PRINTER_STATUS_PAUSED
#define PRINTER_STATUS_ERROR
#define PRINTER_STATUS_PENDING_DELETION
#define PRINTER_STATUS_PAPER_JAM
#define PRINTER_STATUS_PAPER_OUT
#define PRINTER_STATUS_MANUAL_FEED
#define PRINTER_STATUS_PAPER_PROBLEM
#define PRINTER_STATUS_OFFLINE
#define PRINTER_STATUS_IO_ACTIVE
#define PRINTER_STATUS_BUSY
#define PRINTER_STATUS_PRINTING
#define PRINTER_STATUS_OUTPUT_BIN_FULL
#define PRINTER_STATUS_NOT_AVAILABLE
#define PRINTER_STATUS_WAITING
#define PRINTER_STATUS_PROCESSING
#define PRINTER_STATUS_INITIALIZING
#define PRINTER_STATUS_WARMING_UP
#define PRINTER_STATUS_TONER_LOW
#define PRINTER_STATUS_NO_TONER
#define PRINTER_STATUS_PAGE_PUNT
#define PRINTER_STATUS_USER_INTERVENTION
#define PRINTER_STATUS_OUT_OF_MEMORY
#define PRINTER_STATUS_DOOR_OPEN
#define PRINTER_STATUS_SERVER_UNKNOWN
#define PRINTER_STATUS_POWER_SAVE

#define PRINTER_ATTRIBUTE_QUEUED
#define PRINTER_ATTRIBUTE_DIRECT
#define PRINTER_ATTRIBUTE_DEFAULT
#define PRINTER_ATTRIBUTE_SHARED
#define PRINTER_ATTRIBUTE_NETWORK
#define PRINTER_ATTRIBUTE_HIDDEN
#define PRINTER_ATTRIBUTE_LOCAL

#define PRINTER_ATTRIBUTE_ENABLE_DEVQ
#define PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS
#define PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST

#define PRINTER_ATTRIBUTE_WORK_OFFLINE
#define PRINTER_ATTRIBUTE_ENABLE_BIDI
#define PRINTER_ATTRIBUTE_RAW_ONLY
#define PRINTER_ATTRIBUTE_PUBLISHED
#define PRINTER_ATTRIBUTE_FAX
#define PRINTER_ATTRIBUTE_TS

#define NO_PRIORITY
#define MAX_PRIORITY
#define MIN_PRIORITY
#define DEF_PRIORITY

  typedef struct _JOB_INFO_1A {
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pDatatype;
    LPSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
  } JOB_INFO_1A,*PJOB_INFO_1A,*LPJOB_INFO_1A;

  typedef struct _JOB_INFO_1W {
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pDatatype;
    LPWSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
  } JOB_INFO_1W,*PJOB_INFO_1W,*LPJOB_INFO_1W;

  typedef JOB_INFO_1A JOB_INFO_1;
  typedef PJOB_INFO_1A PJOB_INFO_1;
  typedef LPJOB_INFO_1A LPJOB_INFO_1;

  typedef struct _JOB_INFO_2A {
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
  } JOB_INFO_2A,*PJOB_INFO_2A,*LPJOB_INFO_2A;

  typedef struct _JOB_INFO_2W {
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
  } JOB_INFO_2W,*PJOB_INFO_2W,*LPJOB_INFO_2W;

  typedef JOB_INFO_2A JOB_INFO_2;
  typedef PJOB_INFO_2A PJOB_INFO_2;
  typedef LPJOB_INFO_2A LPJOB_INFO_2;

  typedef struct _JOB_INFO_3 {
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
  } JOB_INFO_3,*PJOB_INFO_3,*LPJOB_INFO_3;

#define JOB_CONTROL_PAUSE
#define JOB_CONTROL_RESUME
#define JOB_CONTROL_CANCEL
#define JOB_CONTROL_RESTART
#define JOB_CONTROL_DELETE
#define JOB_CONTROL_SENT_TO_PRINTER
#define JOB_CONTROL_LAST_PAGE_EJECTED

#define JOB_STATUS_PAUSED
#define JOB_STATUS_ERROR
#define JOB_STATUS_DELETING
#define JOB_STATUS_SPOOLING
#define JOB_STATUS_PRINTING
#define JOB_STATUS_OFFLINE
#define JOB_STATUS_PAPEROUT
#define JOB_STATUS_PRINTED
#define JOB_STATUS_DELETED
#define JOB_STATUS_BLOCKED_DEVQ
#define JOB_STATUS_USER_INTERVENTION
#define JOB_STATUS_RESTART
#define JOB_STATUS_COMPLETE

#define JOB_POSITION_UNSPECIFIED

  typedef struct _ADDJOB_INFO_1A {
    LPSTR Path;
    DWORD JobId;
  } ADDJOB_INFO_1A,*PADDJOB_INFO_1A,*LPADDJOB_INFO_1A;

  typedef struct _ADDJOB_INFO_1W {
    LPWSTR Path;
    DWORD JobId;
  } ADDJOB_INFO_1W,*PADDJOB_INFO_1W,*LPADDJOB_INFO_1W;

  typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
  typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
  typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;

  typedef struct _DRIVER_INFO_1A {
    LPSTR pName;
  } DRIVER_INFO_1A,*PDRIVER_INFO_1A,*LPDRIVER_INFO_1A;

  typedef struct _DRIVER_INFO_1W {
    LPWSTR pName;
  } DRIVER_INFO_1W,*PDRIVER_INFO_1W,*LPDRIVER_INFO_1W;

  typedef DRIVER_INFO_1A DRIVER_INFO_1;
  typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
  typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;

  typedef struct _DRIVER_INFO_2A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
  } DRIVER_INFO_2A,*PDRIVER_INFO_2A,*LPDRIVER_INFO_2A;

  typedef struct _DRIVER_INFO_2W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
  } DRIVER_INFO_2W,*PDRIVER_INFO_2W,*LPDRIVER_INFO_2W;

  typedef DRIVER_INFO_2A DRIVER_INFO_2;
  typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
  typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;

  typedef struct _DRIVER_INFO_3A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
  } DRIVER_INFO_3A,*PDRIVER_INFO_3A,*LPDRIVER_INFO_3A;

  typedef struct _DRIVER_INFO_3W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
  } DRIVER_INFO_3W,*PDRIVER_INFO_3W,*LPDRIVER_INFO_3W;

  typedef DRIVER_INFO_3A DRIVER_INFO_3;
  typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
  typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;

  typedef struct _DRIVER_INFO_4A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
  } DRIVER_INFO_4A,*PDRIVER_INFO_4A,*LPDRIVER_INFO_4A;

  typedef struct _DRIVER_INFO_4W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
  } DRIVER_INFO_4W,*PDRIVER_INFO_4W,*LPDRIVER_INFO_4W;

  typedef DRIVER_INFO_4A DRIVER_INFO_4;
  typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
  typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;

  typedef struct _DRIVER_INFO_5A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
  } DRIVER_INFO_5A,*PDRIVER_INFO_5A,*LPDRIVER_INFO_5A;

  typedef struct _DRIVER_INFO_5W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
  } DRIVER_INFO_5W,*PDRIVER_INFO_5W,*LPDRIVER_INFO_5W;

  typedef DRIVER_INFO_5A DRIVER_INFO_5;
  typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
  typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;

  typedef struct _DRIVER_INFO_6A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
  } DRIVER_INFO_6A,*PDRIVER_INFO_6A,*LPDRIVER_INFO_6A;

  typedef struct _DRIVER_INFO_6W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
  } DRIVER_INFO_6W,*PDRIVER_INFO_6W,*LPDRIVER_INFO_6W;

  typedef DRIVER_INFO_6A DRIVER_INFO_6;
  typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
  typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;

#define DRIVER_KERNELMODE
#define DRIVER_USERMODE

#define DPD_DELETE_UNUSED_FILES
#define DPD_DELETE_SPECIFIC_VERSION
#define DPD_DELETE_ALL_FILES

#define APD_STRICT_UPGRADE
#define APD_STRICT_DOWNGRADE
#define APD_COPY_ALL_FILES
#define APD_COPY_NEW_FILES
#define APD_COPY_FROM_DIRECTORY

  typedef struct _DOC_INFO_1A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
  } DOC_INFO_1A,*PDOC_INFO_1A,*LPDOC_INFO_1A;

  typedef struct _DOC_INFO_1W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
  } DOC_INFO_1W,*PDOC_INFO_1W,*LPDOC_INFO_1W;

  typedef DOC_INFO_1A DOC_INFO_1;
  typedef PDOC_INFO_1A PDOC_INFO_1;
  typedef LPDOC_INFO_1A LPDOC_INFO_1;

  typedef struct _FORM_INFO_1A {
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
  } FORM_INFO_1A,*PFORM_INFO_1A,*LPFORM_INFO_1A;

  typedef struct _FORM_INFO_1W {
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
  } FORM_INFO_1W,*PFORM_INFO_1W,*LPFORM_INFO_1W;

  typedef FORM_INFO_1A FORM_INFO_1;
  typedef PFORM_INFO_1A PFORM_INFO_1;
  typedef LPFORM_INFO_1A LPFORM_INFO_1;

  typedef struct _DOC_INFO_2A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
  } DOC_INFO_2A,*PDOC_INFO_2A,*LPDOC_INFO_2A;

  typedef struct _DOC_INFO_2W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
  } DOC_INFO_2W,*PDOC_INFO_2W,*LPDOC_INFO_2W;

  typedef DOC_INFO_2A DOC_INFO_2;
  typedef PDOC_INFO_2A PDOC_INFO_2;
  typedef LPDOC_INFO_2A LPDOC_INFO_2;

#define DI_CHANNEL
#define DI_READ_SPOOL_JOB

  typedef struct _DOC_INFO_3A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
  } DOC_INFO_3A,*PDOC_INFO_3A,*LPDOC_INFO_3A;

  typedef struct _DOC_INFO_3W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
  } DOC_INFO_3W,*PDOC_INFO_3W,*LPDOC_INFO_3W;

  typedef DOC_INFO_3A DOC_INFO_3;
  typedef PDOC_INFO_3A PDOC_INFO_3;
  typedef LPDOC_INFO_3A LPDOC_INFO_3;

#define DI_MEMORYMAP_WRITE

#define FORM_USER
#define FORM_BUILTIN
#define FORM_PRINTER

  typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR pName;
  } PRINTPROCESSOR_INFO_1A,*PPRINTPROCESSOR_INFO_1A,*LPPRINTPROCESSOR_INFO_1A;

  typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR pName;
  } PRINTPROCESSOR_INFO_1W,*PPRINTPROCESSOR_INFO_1W,*LPPRINTPROCESSOR_INFO_1W;

  typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
  typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
  typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;

  typedef struct _PRINTPROCESSOR_CAPS_1 {
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;
  } PRINTPROCESSOR_CAPS_1,*PPRINTPROCESSOR_CAPS_1;

#define NORMAL_PRINT
#define REVERSE_PRINT

  typedef struct _PORT_INFO_1A {
    LPSTR pName;
  } PORT_INFO_1A,*PPORT_INFO_1A,*LPPORT_INFO_1A;
  typedef struct _PORT_INFO_1W {
    LPWSTR pName;
  } PORT_INFO_1W,*PPORT_INFO_1W,*LPPORT_INFO_1W;

  typedef PORT_INFO_1A PORT_INFO_1;
  typedef PPORT_INFO_1A PPORT_INFO_1;
  typedef LPPORT_INFO_1A LPPORT_INFO_1;

  typedef struct _PORT_INFO_2A {
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
  } PORT_INFO_2A,*PPORT_INFO_2A,*LPPORT_INFO_2A;

  typedef struct _PORT_INFO_2W {
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
  } PORT_INFO_2W,*PPORT_INFO_2W,*LPPORT_INFO_2W;

  typedef PORT_INFO_2A PORT_INFO_2;
  typedef PPORT_INFO_2A PPORT_INFO_2;
  typedef LPPORT_INFO_2A LPPORT_INFO_2;

#define PORT_TYPE_WRITE
#define PORT_TYPE_READ
#define PORT_TYPE_REDIRECTED
#define PORT_TYPE_NET_ATTACHED

  typedef struct _PORT_INFO_3A {
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
  } PORT_INFO_3A,*PPORT_INFO_3A,*LPPORT_INFO_3A;

  typedef struct _PORT_INFO_3W {
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
  } PORT_INFO_3W,*PPORT_INFO_3W,*LPPORT_INFO_3W;

  typedef PORT_INFO_3A PORT_INFO_3;
  typedef PPORT_INFO_3A PPORT_INFO_3;
  typedef LPPORT_INFO_3A LPPORT_INFO_3;

#define PORT_STATUS_TYPE_ERROR
#define PORT_STATUS_TYPE_WARNING
#define PORT_STATUS_TYPE_INFO

#define PORT_STATUS_OFFLINE
#define PORT_STATUS_PAPER_JAM
#define PORT_STATUS_PAPER_OUT
#define PORT_STATUS_OUTPUT_BIN_FULL
#define PORT_STATUS_PAPER_PROBLEM
#define PORT_STATUS_NO_TONER
#define PORT_STATUS_DOOR_OPEN
#define PORT_STATUS_USER_INTERVENTION
#define PORT_STATUS_OUT_OF_MEMORY
#define PORT_STATUS_TONER_LOW
#define PORT_STATUS_WARMING_UP
#define PORT_STATUS_POWER_SAVE

  typedef struct _MONITOR_INFO_1A{
    LPSTR pName;
  } MONITOR_INFO_1A,*PMONITOR_INFO_1A,*LPMONITOR_INFO_1A;

  typedef struct _MONITOR_INFO_1W{
    LPWSTR pName;
  } MONITOR_INFO_1W,*PMONITOR_INFO_1W,*LPMONITOR_INFO_1W;

  typedef MONITOR_INFO_1A MONITOR_INFO_1;
  typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
  typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;

  typedef struct _MONITOR_INFO_2A {
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
  } MONITOR_INFO_2A,*PMONITOR_INFO_2A,*LPMONITOR_INFO_2A;

  typedef struct _MONITOR_INFO_2W {
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
  } MONITOR_INFO_2W,*PMONITOR_INFO_2W,*LPMONITOR_INFO_2W;

  typedef MONITOR_INFO_2A MONITOR_INFO_2;
  typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
  typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;

  typedef struct _DATATYPES_INFO_1A {
    LPSTR pName;
  } DATATYPES_INFO_1A,*PDATATYPES_INFO_1A,*LPDATATYPES_INFO_1A;

  typedef struct _DATATYPES_INFO_1W {
    LPWSTR pName;
  } DATATYPES_INFO_1W,*PDATATYPES_INFO_1W,*LPDATATYPES_INFO_1W;

  typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
  typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
  typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;

  typedef struct _PRINTER_DEFAULTSA {
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
  } PRINTER_DEFAULTSA,*PPRINTER_DEFAULTSA,*LPPRINTER_DEFAULTSA;

  typedef struct _PRINTER_DEFAULTSW {
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
  } PRINTER_DEFAULTSW,*PPRINTER_DEFAULTSW,*LPPRINTER_DEFAULTSW;

  typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
  typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
  typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;

  typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
  } PRINTER_ENUM_VALUESA,*PPRINTER_ENUM_VALUESA,*LPPRINTER_ENUM_VALUESA;

  typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
  } PRINTER_ENUM_VALUESW,*PPRINTER_ENUM_VALUESW,*LPPRINTER_ENUM_VALUESW;

  typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
  typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
  typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;

#define EnumPrinters

  WINBOOL EnumPrintersA(DWORD Flags,LPSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumPrintersW(DWORD Flags,LPWSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);

#define PRINTER_ENUM_DEFAULT
#define PRINTER_ENUM_LOCAL
#define PRINTER_ENUM_CONNECTIONS
#define PRINTER_ENUM_FAVORITE
#define PRINTER_ENUM_NAME
#define PRINTER_ENUM_REMOTE
#define PRINTER_ENUM_SHARED
#define PRINTER_ENUM_NETWORK

#define PRINTER_ENUM_EXPAND
#define PRINTER_ENUM_CONTAINER

#define PRINTER_ENUM_ICONMASK
#define PRINTER_ENUM_ICON1
#define PRINTER_ENUM_ICON2
#define PRINTER_ENUM_ICON3
#define PRINTER_ENUM_ICON4
#define PRINTER_ENUM_ICON5
#define PRINTER_ENUM_ICON6
#define PRINTER_ENUM_ICON7
#define PRINTER_ENUM_ICON8
#define PRINTER_ENUM_HIDE

#define SPOOL_FILE_PERSISTENT
#define SPOOL_FILE_TEMPORARY

#define OpenPrinter
#define ResetPrinter
#define SetJob
#define GetJob
#define EnumJobs
#define AddPrinter
#define SetPrinter
#define GetPrinter
#define AddPrinterDriver
#define AddPrinterDriverEx
#define EnumPrinterDrivers
#define GetPrinterDriver
#define GetPrinterDriverDirectory
#define DeletePrinterDriver
#define DeletePrinterDriverEx
#define AddPrintProcessor
#define EnumPrintProcessors
#define GetPrintProcessorDirectory
#define EnumPrintProcessorDatatypes
#define DeletePrintProcessor
#define StartDocPrinter
#define AddJob
#define DocumentProperties
#define AdvancedDocumentProperties
#define GetPrinterData
#define GetPrinterDataEx
#define EnumPrinterData
#define EnumPrinterDataEx
#define EnumPrinterKey
#define SetPrinterData
#define SetPrinterDataEx
#define DeletePrinterData
#define DeletePrinterDataEx
#define DeletePrinterKey

  WINBOOL OpenPrinterA(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault);
  WINBOOL OpenPrinterW(LPWSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSW pDefault);
  WINBOOL ResetPrinterA(HANDLE hPrinter,LPPRINTER_DEFAULTSA pDefault);
  WINBOOL ResetPrinterW(HANDLE hPrinter,LPPRINTER_DEFAULTSW pDefault);
  WINBOOL SetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
  WINBOOL SetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
  WINBOOL GetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL EnumJobsA(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumJobsW(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  HANDLE AddPrinterA(LPSTR pName,DWORD Level,LPBYTE pPrinter);
  HANDLE AddPrinterW(LPWSTR pName,DWORD Level,LPBYTE pPrinter);
  WINBOOL DeletePrinter(HANDLE hPrinter);
  WINBOOL SetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
  WINBOOL SetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
  WINBOOL GetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL AddPrinterDriverA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo);
  WINBOOL AddPrinterDriverW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo);
  WINBOOL AddPrinterDriverExA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
  WINBOOL AddPrinterDriverExW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
  WINBOOL EnumPrinterDriversA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumPrinterDriversW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL GetPrinterDriverA(HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetPrinterDriverW(HANDLE hPrinter,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetPrinterDriverDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetPrinterDriverDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL DeletePrinterDriverA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName);
  WINBOOL DeletePrinterDriverW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName);
  WINBOOL DeletePrinterDriverExA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
  WINBOOL DeletePrinterDriverExW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
  WINBOOL AddPrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPathName,LPSTR pPrintProcessorName);
  WINBOOL AddPrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPathName,LPWSTR pPrintProcessorName);
  WINBOOL EnumPrintProcessorsA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumPrintProcessorsW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL GetPrintProcessorDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetPrintProcessorDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL EnumPrintProcessorDatatypesA(LPSTR pName,LPSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumPrintProcessorDatatypesW(LPWSTR pName,LPWSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL DeletePrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProcessorName);
  WINBOOL DeletePrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProcessorName);
  DWORD StartDocPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
  DWORD StartDocPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
  WINBOOL StartPagePrinter(HANDLE hPrinter);
  WINBOOL WritePrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten);
  WINBOOL FlushPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten,DWORD cSleep);
  WINBOOL EndPagePrinter(HANDLE hPrinter);
  WINBOOL AbortPrinter(HANDLE hPrinter);
  WINBOOL ReadPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pNoBytesRead);
  WINBOOL EndDocPrinter(HANDLE hPrinter);
  WINBOOL AddJobA(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL AddJobW(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL ScheduleJob(HANDLE hPrinter,DWORD JobId);
  WINBOOL PrinterProperties(HWND hWnd,HANDLE hPrinter);
  LONG DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode);
  LONG DocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput,DWORD fMode);
  LONG AdvancedDocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput);
  LONG AdvancedDocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput);
  LONG ExtDeviceMode(HWND hWnd,HANDLE hInst,LPDEVMODEA pDevModeOutput,LPSTR pDeviceName,LPSTR pPort,LPDEVMODEA pDevModeInput,LPSTR pProfile,DWORD fMode);
  DWORD GetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD GetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD GetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD GetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD EnumPrinterDataA(HANDLE hPrinter,DWORD dwIndex,LPSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
  DWORD EnumPrinterDataW(HANDLE hPrinter,DWORD dwIndex,LPWSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
  DWORD EnumPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
  DWORD EnumPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
  DWORD EnumPrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName,LPSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
  DWORD EnumPrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName,LPWSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
  DWORD SetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD SetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD SetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD SetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD DeletePrinterDataA(HANDLE hPrinter,LPSTR pValueName);
  DWORD DeletePrinterDataW(HANDLE hPrinter,LPWSTR pValueName);
  DWORD DeletePrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName);
  DWORD DeletePrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName);
  DWORD DeletePrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName);
  DWORD DeletePrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName);

#define PRINTER_NOTIFY_TYPE
#define JOB_NOTIFY_TYPE

#define PRINTER_NOTIFY_FIELD_SERVER_NAME
#define PRINTER_NOTIFY_FIELD_PRINTER_NAME
#define PRINTER_NOTIFY_FIELD_SHARE_NAME
#define PRINTER_NOTIFY_FIELD_PORT_NAME
#define PRINTER_NOTIFY_FIELD_DRIVER_NAME
#define PRINTER_NOTIFY_FIELD_COMMENT
#define PRINTER_NOTIFY_FIELD_LOCATION
#define PRINTER_NOTIFY_FIELD_DEVMODE
#define PRINTER_NOTIFY_FIELD_SEPFILE
#define PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR
#define PRINTER_NOTIFY_FIELD_PARAMETERS
#define PRINTER_NOTIFY_FIELD_DATATYPE
#define PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR
#define PRINTER_NOTIFY_FIELD_ATTRIBUTES
#define PRINTER_NOTIFY_FIELD_PRIORITY
#define PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY
#define PRINTER_NOTIFY_FIELD_START_TIME
#define PRINTER_NOTIFY_FIELD_UNTIL_TIME
#define PRINTER_NOTIFY_FIELD_STATUS
#define PRINTER_NOTIFY_FIELD_STATUS_STRING
#define PRINTER_NOTIFY_FIELD_CJOBS
#define PRINTER_NOTIFY_FIELD_AVERAGE_PPM
#define PRINTER_NOTIFY_FIELD_TOTAL_PAGES
#define PRINTER_NOTIFY_FIELD_PAGES_PRINTED
#define PRINTER_NOTIFY_FIELD_TOTAL_BYTES
#define PRINTER_NOTIFY_FIELD_BYTES_PRINTED
#define PRINTER_NOTIFY_FIELD_OBJECT_GUID

#define JOB_NOTIFY_FIELD_PRINTER_NAME
#define JOB_NOTIFY_FIELD_MACHINE_NAME
#define JOB_NOTIFY_FIELD_PORT_NAME
#define JOB_NOTIFY_FIELD_USER_NAME
#define JOB_NOTIFY_FIELD_NOTIFY_NAME
#define JOB_NOTIFY_FIELD_DATATYPE
#define JOB_NOTIFY_FIELD_PRINT_PROCESSOR
#define JOB_NOTIFY_FIELD_PARAMETERS
#define JOB_NOTIFY_FIELD_DRIVER_NAME
#define JOB_NOTIFY_FIELD_DEVMODE
#define JOB_NOTIFY_FIELD_STATUS
#define JOB_NOTIFY_FIELD_STATUS_STRING
#define JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR
#define JOB_NOTIFY_FIELD_DOCUMENT
#define JOB_NOTIFY_FIELD_PRIORITY
#define JOB_NOTIFY_FIELD_POSITION
#define JOB_NOTIFY_FIELD_SUBMITTED
#define JOB_NOTIFY_FIELD_START_TIME
#define JOB_NOTIFY_FIELD_UNTIL_TIME
#define JOB_NOTIFY_FIELD_TIME
#define JOB_NOTIFY_FIELD_TOTAL_PAGES
#define JOB_NOTIFY_FIELD_PAGES_PRINTED
#define JOB_NOTIFY_FIELD_TOTAL_BYTES
#define JOB_NOTIFY_FIELD_BYTES_PRINTED

  typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
  } PRINTER_NOTIFY_OPTIONS_TYPE,*PPRINTER_NOTIFY_OPTIONS_TYPE,*LPPRINTER_NOTIFY_OPTIONS_TYPE;

#define PRINTER_NOTIFY_OPTIONS_REFRESH

  typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
  } PRINTER_NOTIFY_OPTIONS,*PPRINTER_NOTIFY_OPTIONS,*LPPRINTER_NOTIFY_OPTIONS;

#define PRINTER_NOTIFY_INFO_DISCARDED

  typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
      DWORD adwData[2];
      struct {
 DWORD cbBuf;
 LPVOID pBuf;
      } Data;
    } NotifyData;
  } PRINTER_NOTIFY_INFO_DATA,*PPRINTER_NOTIFY_INFO_DATA,*LPPRINTER_NOTIFY_INFO_DATA;

  typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
  } PRINTER_NOTIFY_INFO,*PPRINTER_NOTIFY_INFO,*LPPRINTER_NOTIFY_INFO;

  typedef struct _BINARY_CONTAINER{
    DWORD cbBuf;
    LPBYTE pData;
  } BINARY_CONTAINER,*PBINARY_CONTAINER;

  typedef struct _BIDI_DATA{
    DWORD dwBidiType;
    union {
      WINBOOL bData;
      LONG iData;
      LPWSTR sData;
      FLOAT fData;
      BINARY_CONTAINER biData;
    } u;
  } BIDI_DATA,*PBIDI_DATA,*LPBIDI_DATA;

  typedef struct _BIDI_REQUEST_DATA{
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
  } BIDI_REQUEST_DATA ,*PBIDI_REQUEST_DATA ,*LPBIDI_REQUEST_DATA;

  typedef struct _BIDI_REQUEST_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA aData[1 ];
  }BIDI_REQUEST_CONTAINER,*PBIDI_REQUEST_CONTAINER,*LPBIDI_REQUEST_CONTAINER;

  typedef struct _BIDI_RESPONSE_DATA{
    DWORD dwResult;
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
  } BIDI_RESPONSE_DATA,*PBIDI_RESPONSE_DATA,*LPBIDI_RESPONSE_DATA;

  typedef struct _BIDI_RESPONSE_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA aData[1 ];
  } BIDI_RESPONSE_CONTAINER,*PBIDI_RESPONSE_CONTAINER,*LPBIDI_RESPONSE_CONTAINER;

#define BIDI_ACTION_ENUM_SCHEMA
#define BIDI_ACTION_GET
#define BIDI_ACTION_SET
#define BIDI_ACTION_GET_ALL

  typedef enum {
    BIDI_NULL = 0,BIDI_INT = 1,BIDI_FLOAT = 2,BIDI_BOOL = 3,BIDI_STRING = 4,BIDI_TEXT = 5,BIDI_ENUM = 6,BIDI_BLOB = 7
  } BIDI_TYPE;

#define BIDI_ACCESS_ADMINISTRATOR
#define BIDI_ACCESS_USER

#define ERROR_BIDI_STATUS_OK
#define ERROR_BIDI_NOT_SUPPORTED

#define ERROR_BIDI_ERROR_BASE
#define ERROR_BIDI_STATUS_WARNING
#define ERROR_BIDI_SCHEMA_READ_ONLY
#define ERROR_BIDI_SERVER_OFFLINE
#define ERROR_BIDI_DEVICE_OFFLINE
#define ERROR_BIDI_SCHEMA_NOT_SUPPORTED

  DWORD WaitForPrinterChange(HANDLE hPrinter,DWORD Flags);
  HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,LPVOID pPrinterNotifyOptions);
  WINBOOL FindNextPrinterChangeNotification(HANDLE hChange,PDWORD pdwChange,LPVOID pPrinterNotifyOptions,LPVOID *ppPrinterNotifyInfo);
  WINBOOL FreePrinterNotifyInfo (PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
  WINBOOL FindClosePrinterChangeNotification(HANDLE hChange);

#define PRINTER_CHANGE_ADD_PRINTER
#define PRINTER_CHANGE_SET_PRINTER
#define PRINTER_CHANGE_DELETE_PRINTER
#define PRINTER_CHANGE_FAILED_CONNECTION_PRINTER
#define PRINTER_CHANGE_PRINTER
#define PRINTER_CHANGE_ADD_JOB
#define PRINTER_CHANGE_SET_JOB
#define PRINTER_CHANGE_DELETE_JOB
#define PRINTER_CHANGE_WRITE_JOB
#define PRINTER_CHANGE_JOB
#define PRINTER_CHANGE_ADD_FORM
#define PRINTER_CHANGE_SET_FORM
#define PRINTER_CHANGE_DELETE_FORM
#define PRINTER_CHANGE_FORM
#define PRINTER_CHANGE_ADD_PORT
#define PRINTER_CHANGE_CONFIGURE_PORT
#define PRINTER_CHANGE_DELETE_PORT
#define PRINTER_CHANGE_PORT
#define PRINTER_CHANGE_ADD_PRINT_PROCESSOR
#define PRINTER_CHANGE_DELETE_PRINT_PROCESSOR
#define PRINTER_CHANGE_PRINT_PROCESSOR
#define PRINTER_CHANGE_ADD_PRINTER_DRIVER
#define PRINTER_CHANGE_SET_PRINTER_DRIVER
#define PRINTER_CHANGE_DELETE_PRINTER_DRIVER
#define PRINTER_CHANGE_PRINTER_DRIVER
#define PRINTER_CHANGE_TIMEOUT
#define PRINTER_CHANGE_ALL

#define PrinterMessageBox
#define AddForm
#define DeleteForm
#define GetForm
#define SetForm
#define EnumForms
#define EnumMonitors
#define AddMonitor
#define DeleteMonitor
#define EnumPorts
#define AddPort
#define ConfigurePort
#define DeletePort
#define GetDefaultPrinter
#define SetDefaultPrinter
#define SetPort
#define AddPrinterConnection
#define DeletePrinterConnection

  DWORD PrinterMessageBoxA(HANDLE hPrinter,DWORD Error,HWND hWnd,LPSTR pText,LPSTR pCaption,DWORD dwType);
  DWORD PrinterMessageBoxW(HANDLE hPrinter,DWORD Error,HWND hWnd,LPWSTR pText,LPWSTR pCaption,DWORD dwType);

#define PRINTER_ERROR_INFORMATION
#define PRINTER_ERROR_WARNING
#define PRINTER_ERROR_SEVERE

#define PRINTER_ERROR_OUTOFPAPER
#define PRINTER_ERROR_JAM
#define PRINTER_ERROR_OUTOFTONER

  WINBOOL ClosePrinter(HANDLE hPrinter);
  WINBOOL AddFormA(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
  WINBOOL AddFormW(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
  WINBOOL DeleteFormA(HANDLE hPrinter,LPSTR pFormName);
  WINBOOL DeleteFormW(HANDLE hPrinter,LPWSTR pFormName);
  WINBOOL GetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL GetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL SetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm);
  WINBOOL SetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm);
  WINBOOL EnumFormsA(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumFormsW(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumMonitorsA(LPSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumMonitorsW(LPWSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL AddMonitorA(LPSTR pName,DWORD Level,LPBYTE pMonitorInfo);
  WINBOOL AddMonitorW(LPWSTR pName,DWORD Level,LPBYTE pMonitorInfo);
  WINBOOL DeleteMonitorA(LPSTR pName,LPSTR pEnvironment,LPSTR pMonitorName);
  WINBOOL DeleteMonitorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pMonitorName);
  WINBOOL EnumPortsA(LPSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL EnumPortsW(LPWSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL AddPortA(LPSTR pName,HWND hWnd,LPSTR pMonitorName);
  WINBOOL AddPortW(LPWSTR pName,HWND hWnd,LPWSTR pMonitorName);
  WINBOOL ConfigurePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
  WINBOOL ConfigurePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
  WINBOOL DeletePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
  WINBOOL DeletePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
  WINBOOL XcvDataW(HANDLE hXcv,PCWSTR pszDataName,PBYTE pInputData,DWORD cbInputData,PBYTE pOutputData,DWORD cbOutputData,PDWORD pcbOutputNeeded,PDWORD pdwStatus);

#define XcvData

  WINBOOL GetDefaultPrinterA(LPSTR pszBuffer,LPDWORD pcchBuffer);
  WINBOOL GetDefaultPrinterW(LPWSTR pszBuffer,LPDWORD pcchBuffer);
  WINBOOL SetDefaultPrinterA(LPCSTR pszPrinter);
  WINBOOL SetDefaultPrinterW(LPCWSTR pszPrinter);
  WINBOOL SetPortA(LPSTR pName,LPSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
  WINBOOL SetPortW(LPWSTR pName,LPWSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
  WINBOOL AddPrinterConnectionA(LPSTR pName);
  WINBOOL AddPrinterConnectionW(LPWSTR pName);
  WINBOOL DeletePrinterConnectionA(LPSTR pName);
  WINBOOL DeletePrinterConnectionW(LPWSTR pName);
  HANDLE ConnectToPrinterDlg(HWND hwnd,DWORD Flags);

  typedef struct _PROVIDOR_INFO_1A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
  } PROVIDOR_INFO_1A,*PPROVIDOR_INFO_1A,*LPPROVIDOR_INFO_1A;

  typedef struct _PROVIDOR_INFO_1W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
  } PROVIDOR_INFO_1W,*PPROVIDOR_INFO_1W,*LPPROVIDOR_INFO_1W;

  typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
  typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
  typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;

  typedef struct _PROVIDOR_INFO_2A{
    LPSTR pOrder;
  } PROVIDOR_INFO_2A,*PPROVIDOR_INFO_2A,*LPPROVIDOR_INFO_2A;

  typedef struct _PROVIDOR_INFO_2W{
    LPWSTR pOrder;
  } PROVIDOR_INFO_2W,*PPROVIDOR_INFO_2W,*LPPROVIDOR_INFO_2W;

  typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
  typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
  typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;

#define AddPrintProvidor
#define DeletePrintProvidor
#define IsValidDevmode

  WINBOOL AddPrintProvidorA(LPSTR pName,DWORD level,LPBYTE pProvidorInfo);
  WINBOOL AddPrintProvidorW(LPWSTR pName,DWORD level,LPBYTE pProvidorInfo);
  WINBOOL DeletePrintProvidorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProvidorName);
  WINBOOL DeletePrintProvidorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProvidorName);
  WINBOOL IsValidDevmodeA (PDEVMODEA pDevmode,size_t DevmodeSize);
  WINBOOL IsValidDevmodeW (PDEVMODEW pDevmode,size_t DevmodeSize);

#define SPLREG_DEFAULT_SPOOL_DIRECTORY
#define SPLREG_PORT_THREAD_PRIORITY_DEFAULT
#define SPLREG_PORT_THREAD_PRIORITY
#define SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT
#define SPLREG_SCHEDULER_THREAD_PRIORITY
#define SPLREG_BEEP_ENABLED
#define SPLREG_NET_POPUP
#define SPLREG_RETRY_POPUP
#define SPLREG_NET_POPUP_TO_COMPUTER
#define SPLREG_EVENT_LOG
#define SPLREG_MAJOR_VERSION
#define SPLREG_MINOR_VERSION
#define SPLREG_ARCHITECTURE
#define SPLREG_OS_VERSION
#define SPLREG_OS_VERSIONEX
#define SPLREG_DS_PRESENT
#define SPLREG_DS_PRESENT_FOR_USER
#define SPLREG_REMOTE_FAX
#define SPLREG_RESTART_JOB_ON_POOL_ERROR
#define SPLREG_RESTART_JOB_ON_POOL_ENABLED
#define SPLREG_DNS_MACHINE_NAME
#define SPLREG_ALLOW_USER_MANAGEFORMS
#define SPLREG_WEBSHAREMGMT

#define SERVER_ACCESS_ADMINISTER
#define SERVER_ACCESS_ENUMERATE

#define PRINTER_ACCESS_ADMINISTER
#define PRINTER_ACCESS_USE

#define JOB_ACCESS_ADMINISTER
#define JOB_ACCESS_READ

#define SERVER_ALL_ACCESS
#define SERVER_READ
#define SERVER_WRITE
#define SERVER_EXECUTE
#define PRINTER_ALL_ACCESS
#define PRINTER_READ
#define PRINTER_WRITE
#define PRINTER_EXECUTE
#define JOB_ALL_ACCESS
#define JOB_READ
#define JOB_WRITE
#define JOB_EXECUTE

#define SPLDS_SPOOLER_KEY
#define SPLDS_DRIVER_KEY
#define SPLDS_USER_KEY

#define SPLDS_ASSET_NUMBER
#define SPLDS_BYTES_PER_MINUTE
#define SPLDS_DESCRIPTION
#define SPLDS_DRIVER_NAME
#define SPLDS_DRIVER_VERSION
#define SPLDS_LOCATION
#define SPLDS_PORT_NAME
#define SPLDS_PRINT_ATTRIBUTES
#define SPLDS_PRINT_BIN_NAMES
#define SPLDS_PRINT_COLLATE
#define SPLDS_PRINT_COLOR
#define SPLDS_PRINT_DUPLEX_SUPPORTED
#define SPLDS_PRINT_END_TIME
#define SPLDS_PRINTER_CLASS
#define SPLDS_PRINTER_NAME
#define SPLDS_PRINT_KEEP_PRINTED_JOBS
#define SPLDS_PRINT_LANGUAGE
#define SPLDS_PRINT_MAC_ADDRESS
#define SPLDS_PRINT_MAX_X_EXTENT
#define SPLDS_PRINT_MAX_Y_EXTENT
#define SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED
#define SPLDS_PRINT_MEDIA_READY
#define SPLDS_PRINT_MEDIA_SUPPORTED
#define SPLDS_PRINT_MEMORY
#define SPLDS_PRINT_MIN_X_EXTENT
#define SPLDS_PRINT_MIN_Y_EXTENT
#define SPLDS_PRINT_NETWORK_ADDRESS
#define SPLDS_PRINT_NOTIFY
#define SPLDS_PRINT_NUMBER_UP
#define SPLDS_PRINT_ORIENTATIONS_SUPPORTED
#define SPLDS_PRINT_OWNER
#define SPLDS_PRINT_PAGES_PER_MINUTE
#define SPLDS_PRINT_RATE
#define SPLDS_PRINT_RATE_UNIT
#define SPLDS_PRINT_SEPARATOR_FILE
#define SPLDS_PRINT_SHARE_NAME
#define SPLDS_PRINT_SPOOLING
#define SPLDS_PRINT_STAPLING_SUPPORTED
#define SPLDS_PRINT_START_TIME
#define SPLDS_PRINT_STATUS
#define SPLDS_PRIORITY
#define SPLDS_SERVER_NAME
#define SPLDS_SHORT_SERVER_NAME
#define SPLDS_UNC_NAME
#define SPLDS_URL
#define SPLDS_FLAGS
#define SPLDS_VERSION_NUMBER

#define SPLDS_PRINTER_NAME_ALIASES
#define SPLDS_PRINTER_LOCATIONS
#define SPLDS_PRINTER_MODEL
# 103 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/ole2.h" 1 3
# 107 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/commdlg.h" 1 3






#define _INC_COMMDLG




extern const GUID IID_IPrintDialogCallback;
extern const GUID IID_IPrintDialogServices;
# 28 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/commdlg.h" 3
#define WINCOMMDLGAPI
# 42 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/commdlg.h" 3
  typedef UINT_PTR ( *LPOFNHOOKPROC) (HWND,UINT,WPARAM,LPARAM);


#define CDSIZEOF_STRUCT


  typedef struct tagOFN_NT4A {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } OPENFILENAME_NT4A,*LPOPENFILENAME_NT4A;
  typedef struct tagOFN_NT4W {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } OPENFILENAME_NT4W,*LPOPENFILENAME_NT4W;

  typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
  typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;

  typedef struct tagOFNA {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
  } OPENFILENAMEA,*LPOPENFILENAMEA;
  typedef struct tagOFNW {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
  } OPENFILENAMEW,*LPOPENFILENAMEW;

  typedef OPENFILENAMEA OPENFILENAME;
  typedef LPOPENFILENAMEA LPOPENFILENAME;

#define OPENFILENAME_SIZE_VERSION_400A
#define OPENFILENAME_SIZE_VERSION_400W

#define OPENFILENAME_SIZE_VERSION_400

  __attribute__((dllimport)) WINBOOL GetOpenFileNameA(LPOPENFILENAMEA);
  __attribute__((dllimport)) WINBOOL GetOpenFileNameW(LPOPENFILENAMEW);

#define GetOpenFileName

  __attribute__((dllimport)) WINBOOL GetSaveFileNameA(LPOPENFILENAMEA);
  __attribute__((dllimport)) WINBOOL GetSaveFileNameW(LPOPENFILENAMEW);

#define GetSaveFileName

  __attribute__((dllimport)) short GetFileTitleA(LPCSTR,LPSTR,WORD);
  __attribute__((dllimport)) short GetFileTitleW(LPCWSTR,LPWSTR,WORD);

#define GetFileTitle

#define OFN_READONLY
#define OFN_OVERWRITEPROMPT
#define OFN_HIDEREADONLY
#define OFN_NOCHANGEDIR
#define OFN_SHOWHELP
#define OFN_ENABLEHOOK
#define OFN_ENABLETEMPLATE
#define OFN_ENABLETEMPLATEHANDLE
#define OFN_NOVALIDATE
#define OFN_ALLOWMULTISELECT
#define OFN_EXTENSIONDIFFERENT
#define OFN_PATHMUSTEXIST
#define OFN_FILEMUSTEXIST
#define OFN_CREATEPROMPT
#define OFN_SHAREAWARE
#define OFN_NOREADONLYRETURN
#define OFN_NOTESTFILECREATE
#define OFN_NONETWORKBUTTON
#define OFN_NOLONGNAMES
#define OFN_EXPLORER
#define OFN_NODEREFERENCELINKS
#define OFN_LONGNAMES
#define OFN_ENABLEINCLUDENOTIFY
#define OFN_ENABLESIZING
#define OFN_DONTADDTORECENT
#define OFN_FORCESHOWHIDDEN
#define OFN_EX_NOPLACESBAR
#define OFN_SHAREFALLTHROUGH
#define OFN_SHARENOWARN
#define OFN_SHAREWARN

  typedef UINT_PTR ( *LPCCHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct _OFNOTIFYA {
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPSTR pszFile;
  } OFNOTIFYA,*LPOFNOTIFYA;

  typedef struct _OFNOTIFYW {
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPWSTR pszFile;
  } OFNOTIFYW,*LPOFNOTIFYW;

  typedef OFNOTIFYA OFNOTIFY;
  typedef LPOFNOTIFYA LPOFNOTIFY;

  typedef struct _OFNOTIFYEXA {
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPVOID psf;
    LPVOID pidl;
  } OFNOTIFYEXA,*LPOFNOTIFYEXA;

  typedef struct _OFNOTIFYEXW {
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPVOID psf;
    LPVOID pidl;
  } OFNOTIFYEXW,*LPOFNOTIFYEXW;

  typedef OFNOTIFYEXA OFNOTIFYEX;
  typedef LPOFNOTIFYEXA LPOFNOTIFYEX;

#define CDN_FIRST
#define CDN_LAST

#define CDN_INITDONE
#define CDN_SELCHANGE
#define CDN_FOLDERCHANGE
#define CDN_SHAREVIOLATION
#define CDN_HELP
#define CDN_FILEOK
#define CDN_TYPECHANGE
#define CDN_INCLUDEITEM

#define CDM_FIRST
#define CDM_LAST

#define CDM_GETSPEC
#define CommDlg_OpenSave_GetSpecA
#define CommDlg_OpenSave_GetSpecW

#define CommDlg_OpenSave_GetSpec

#define CDM_GETFILEPATH
#define CommDlg_OpenSave_GetFilePathA
#define CommDlg_OpenSave_GetFilePathW

#define CommDlg_OpenSave_GetFilePath

#define CDM_GETFOLDERPATH
#define CommDlg_OpenSave_GetFolderPathA
#define CommDlg_OpenSave_GetFolderPathW

#define CommDlg_OpenSave_GetFolderPath

#define CDM_GETFOLDERIDLIST
#define CommDlg_OpenSave_GetFolderIDList
#define CDM_SETCONTROLTEXT
#define CommDlg_OpenSave_SetControlText
#define CDM_HIDECONTROL
#define CommDlg_OpenSave_HideControl
#define CDM_SETDEFEXT
#define CommDlg_OpenSave_SetDefExt

  typedef struct tagCHOOSECOLORA {
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } CHOOSECOLORA,*LPCHOOSECOLORA;
  typedef struct tagCHOOSECOLORW {
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } CHOOSECOLORW,*LPCHOOSECOLORW;

  typedef CHOOSECOLORA CHOOSECOLOR;
  typedef LPCHOOSECOLORA LPCHOOSECOLOR;

  __attribute__((dllimport)) WINBOOL ChooseColorA(LPCHOOSECOLORA);
  __attribute__((dllimport)) WINBOOL ChooseColorW(LPCHOOSECOLORW);

#define ChooseColor

#define CC_RGBINIT
#define CC_FULLOPEN
#define CC_PREVENTFULLOPEN
#define CC_SHOWHELP
#define CC_ENABLEHOOK
#define CC_ENABLETEMPLATE
#define CC_ENABLETEMPLATEHANDLE
#define CC_SOLIDCOLOR
#define CC_ANYCOLOR

  typedef UINT_PTR ( *LPFRHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagFINDREPLACEA {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPSTR lpstrFindWhat;
    LPSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } FINDREPLACEA,*LPFINDREPLACEA;

  typedef struct tagFINDREPLACEW {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPWSTR lpstrFindWhat;
    LPWSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } FINDREPLACEW,*LPFINDREPLACEW;

  typedef FINDREPLACEA FINDREPLACE;
  typedef LPFINDREPLACEA LPFINDREPLACE;

#define FR_DOWN
#define FR_WHOLEWORD
#define FR_MATCHCASE
#define FR_FINDNEXT
#define FR_REPLACE
#define FR_REPLACEALL
#define FR_DIALOGTERM
#define FR_SHOWHELP
#define FR_ENABLEHOOK
#define FR_ENABLETEMPLATE
#define FR_NOUPDOWN
#define FR_NOMATCHCASE
#define FR_NOWHOLEWORD
#define FR_ENABLETEMPLATEHANDLE
#define FR_HIDEUPDOWN
#define FR_HIDEMATCHCASE
#define FR_HIDEWHOLEWORD
#define FR_RAW
#define FR_MATCHDIAC
#define FR_MATCHKASHIDA
#define FR_MATCHALEFHAMZA

  __attribute__((dllimport)) HWND FindTextA(LPFINDREPLACEA);
  __attribute__((dllimport)) HWND FindTextW(LPFINDREPLACEW);

#define FindText

  __attribute__((dllimport)) HWND ReplaceTextA(LPFINDREPLACEA);
  __attribute__((dllimport)) HWND ReplaceTextW(LPFINDREPLACEW);

#define ReplaceText

  typedef UINT_PTR ( *LPCFHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagCHOOSEFONTA {
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTA lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    HINSTANCE hInstance;
    LPSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
  } CHOOSEFONTA,*LPCHOOSEFONTA;

  typedef struct tagCHOOSEFONTW {
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTW lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    HINSTANCE hInstance;
    LPWSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
  } CHOOSEFONTW,*LPCHOOSEFONTW;

  typedef CHOOSEFONTA CHOOSEFONT;
  typedef LPCHOOSEFONTA LPCHOOSEFONT;

  __attribute__((dllimport)) WINBOOL ChooseFontA(LPCHOOSEFONTA);
  __attribute__((dllimport)) WINBOOL ChooseFontW(LPCHOOSEFONTW);

#define ChooseFont

#define CF_SCREENFONTS
#define CF_PRINTERFONTS
#define CF_BOTH
#define CF_SHOWHELP
#define CF_ENABLEHOOK
#define CF_ENABLETEMPLATE
#define CF_ENABLETEMPLATEHANDLE
#define CF_INITTOLOGFONTSTRUCT
#define CF_USESTYLE
#define CF_EFFECTS
#define CF_APPLY
#define CF_ANSIONLY
#define CF_SCRIPTSONLY
#define CF_NOVECTORFONTS
#define CF_NOOEMFONTS
#define CF_NOSIMULATIONS
#define CF_LIMITSIZE
#define CF_FIXEDPITCHONLY
#define CF_WYSIWYG
#define CF_FORCEFONTEXIST
#define CF_SCALABLEONLY
#define CF_TTONLY
#define CF_NOFACESEL
#define CF_NOSTYLESEL
#define CF_NOSIZESEL
#define CF_SELECTSCRIPT
#define CF_NOSCRIPTSEL
#define CF_NOVERTFONTS

#define SIMULATED_FONTTYPE
#define PRINTER_FONTTYPE
#define SCREEN_FONTTYPE
#define BOLD_FONTTYPE
#define ITALIC_FONTTYPE
#define REGULAR_FONTTYPE


#define PS_OPENTYPE_FONTTYPE
#define TT_OPENTYPE_FONTTYPE
#define TYPE1_FONTTYPE


#define WM_CHOOSEFONT_GETLOGFONT
#define WM_CHOOSEFONT_SETLOGFONT
#define WM_CHOOSEFONT_SETFLAGS

#define LBSELCHSTRINGA
#define SHAREVISTRINGA
#define FILEOKSTRINGA
#define COLOROKSTRINGA
#define SETRGBSTRINGA
#define HELPMSGSTRINGA
#define FINDMSGSTRINGA

#define LBSELCHSTRINGW
#define SHAREVISTRINGW
#define FILEOKSTRINGW
#define COLOROKSTRINGW
#define SETRGBSTRINGW
#define HELPMSGSTRINGW
#define FINDMSGSTRINGW

#define LBSELCHSTRING
#define SHAREVISTRING
#define FILEOKSTRING
#define COLOROKSTRING
#define SETRGBSTRING
#define HELPMSGSTRING
#define FINDMSGSTRING

#define CD_LBSELNOITEMS
#define CD_LBSELCHANGE
#define CD_LBSELSUB
#define CD_LBSELADD

  typedef UINT_PTR ( *LPPRINTHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
  typedef UINT_PTR ( *LPSETUPHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagPDA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
  } PRINTDLGA,*LPPRINTDLGA;

  typedef struct tagPDW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
  } PRINTDLGW,*LPPRINTDLGW;

  typedef PRINTDLGA PRINTDLG;
  typedef LPPRINTDLGA LPPRINTDLG;

  __attribute__((dllimport)) WINBOOL PrintDlgA(LPPRINTDLGA);
  __attribute__((dllimport)) WINBOOL PrintDlgW(LPPRINTDLGW);

#define PrintDlg


#undef INTERFACE
#define INTERFACE

  typedef struct IPrintDialogCallback { struct IPrintDialogCallbackVtbl *lpVtbl; } IPrintDialogCallback; typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl; struct IPrintDialogCallbackVtbl {
    HRESULT ( *QueryInterface) (IPrintDialogCallback *This, const IID *const riid,LPVOID *ppvObj) ;
    ULONG ( *AddRef) (IPrintDialogCallback *This) ;
    ULONG ( *Release) (IPrintDialogCallback *This) ;
    HRESULT ( *InitDone) (IPrintDialogCallback *This) ;
    HRESULT ( *SelectionChange) (IPrintDialogCallback *This) ;
    HRESULT ( *HandleMessage) (IPrintDialogCallback *This, HWND hDlg,UINT uMsg,WPARAM wParam,LPARAM lParam,LRESULT *pResult) ;
  };

#undef INTERFACE
#define INTERFACE
  typedef struct IPrintDialogServices { struct IPrintDialogServicesVtbl *lpVtbl; } IPrintDialogServices; typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl; struct IPrintDialogServicesVtbl {
    HRESULT ( *QueryInterface) (IPrintDialogServices *This, const IID *const riid,LPVOID *ppvObj) ;
    ULONG ( *AddRef) (IPrintDialogServices *This) ;
    ULONG ( *Release) (IPrintDialogServices *This) ;
    HRESULT ( *GetCurrentDevMode) (IPrintDialogServices *This, LPDEVMODE pDevMode,UINT *pcbSize) ;
    HRESULT ( *GetCurrentPrinterName) (IPrintDialogServices *This, LPTSTR pPrinterName,UINT *pcchSize) ;
    HRESULT ( *GetCurrentPortName) (IPrintDialogServices *This, LPTSTR pPortName,UINT *pcchSize) ;
  };

  typedef struct tagPRINTPAGERANGE {
    DWORD nFromPage;
    DWORD nToPage;
  } PRINTPAGERANGE,*LPPRINTPAGERANGE;

  typedef struct tagPDEXA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
  } PRINTDLGEXA,*LPPRINTDLGEXA;

  typedef struct tagPDEXW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
  } PRINTDLGEXW,*LPPRINTDLGEXW;

  typedef PRINTDLGEXA PRINTDLGEX;
  typedef LPPRINTDLGEXA LPPRINTDLGEX;

  __attribute__((dllimport)) HRESULT PrintDlgExA(LPPRINTDLGEXA);
  __attribute__((dllimport)) HRESULT PrintDlgExW(LPPRINTDLGEXW);

#define PrintDlgEx


#define PD_ALLPAGES
#define PD_SELECTION
#define PD_PAGENUMS
#define PD_NOSELECTION
#define PD_NOPAGENUMS
#define PD_COLLATE
#define PD_PRINTTOFILE
#define PD_PRINTSETUP
#define PD_NOWARNING
#define PD_RETURNDC
#define PD_RETURNIC
#define PD_RETURNDEFAULT
#define PD_SHOWHELP
#define PD_ENABLEPRINTHOOK
#define PD_ENABLESETUPHOOK
#define PD_ENABLEPRINTTEMPLATE
#define PD_ENABLESETUPTEMPLATE
#define PD_ENABLEPRINTTEMPLATEHANDLE
#define PD_ENABLESETUPTEMPLATEHANDLE
#define PD_USEDEVMODECOPIES
#define PD_USEDEVMODECOPIESANDCOLLATE
#define PD_DISABLEPRINTTOFILE
#define PD_HIDEPRINTTOFILE
#define PD_NONETWORKBUTTON
#define PD_CURRENTPAGE
#define PD_NOCURRENTPAGE
#define PD_EXCLUSIONFLAGS
#define PD_USELARGETEMPLATE

#define PD_EXCL_COPIESANDCOLLATE
#define START_PAGE_GENERAL

#define PD_RESULT_CANCEL
#define PD_RESULT_PRINT
#define PD_RESULT_APPLY

  typedef struct tagDEVNAMES {
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
  } DEVNAMES,*LPDEVNAMES;

#define DN_DEFAULTPRN

  __attribute__((dllimport)) DWORD CommDlgExtendedError(void);

#define WM_PSD_PAGESETUPDLG
#define WM_PSD_FULLPAGERECT
#define WM_PSD_MINMARGINRECT
#define WM_PSD_MARGINRECT
#define WM_PSD_GREEKTEXTRECT
#define WM_PSD_ENVSTAMPRECT
#define WM_PSD_YAFULLPAGERECT

  typedef UINT_PTR ( *LPPAGEPAINTHOOK)(HWND,UINT,WPARAM,LPARAM);
  typedef UINT_PTR ( *LPPAGESETUPHOOK)(HWND,UINT,WPARAM,LPARAM);

  typedef struct tagPSDA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
  } PAGESETUPDLGA,*LPPAGESETUPDLGA;

  typedef struct tagPSDW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
  } PAGESETUPDLGW,*LPPAGESETUPDLGW;

  typedef PAGESETUPDLGA PAGESETUPDLG;
  typedef LPPAGESETUPDLGA LPPAGESETUPDLG;

  __attribute__((dllimport)) WINBOOL PageSetupDlgA(LPPAGESETUPDLGA);
  __attribute__((dllimport)) WINBOOL PageSetupDlgW(LPPAGESETUPDLGW);

#define PageSetupDlg

#define PSD_DEFAULTMINMARGINS
#define PSD_INWININIINTLMEASURE
#define PSD_MINMARGINS
#define PSD_MARGINS
#define PSD_INTHOUSANDTHSOFINCHES
#define PSD_INHUNDREDTHSOFMILLIMETERS
#define PSD_DISABLEMARGINS
#define PSD_DISABLEPRINTER
#define PSD_NOWARNING
#define PSD_DISABLEORIENTATION
#define PSD_RETURNDEFAULT
#define PSD_DISABLEPAPER
#define PSD_SHOWHELP
#define PSD_ENABLEPAGESETUPHOOK
#define PSD_ENABLEPAGESETUPTEMPLATE
#define PSD_ENABLEPAGESETUPTEMPLATEHANDLE
#define PSD_ENABLEPAGEPAINTHOOK
#define PSD_DISABLEPAGEPAINTING
#define PSD_NONETWORKBUTTON
# 109 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3





# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 1 3






#define __STRALIGN_H_


#define _STRALIGN_USE_SECURE_CRT
# 19 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
#define WSTR_ALIGNED
# 49 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
  LPUWSTR uaw_CharUpperW(LPUWSTR String);
  int uaw_lstrcmpW(PCUWSTR String1,PCUWSTR String2);
  int uaw_lstrcmpiW(PCUWSTR String1,PCUWSTR String2);
  int uaw_lstrlenW(LPCUWSTR String);
  PUWSTR __attribute__((__cdecl__)) uaw_wcschr(PCUWSTR String,WCHAR Character);
  PUWSTR __attribute__((__cdecl__)) uaw_wcscpy(PUWSTR Destination,PCUWSTR Source);
  int __attribute__((__cdecl__)) uaw_wcsicmp(PCUWSTR String1,PCUWSTR String2);
  size_t __attribute__((__cdecl__)) uaw_wcslen(PCUWSTR String);
  PUWSTR __attribute__((__cdecl__)) uaw_wcsrchr(PCUWSTR String,WCHAR Character);

  LPUWSTR ua_CharUpperW(LPUWSTR String);
# 69 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
  int ua_lstrcmpW(LPCUWSTR String1,LPCUWSTR String2);


  int ua_lstrcmpiW(LPCUWSTR String1,LPCUWSTR String2);


  int ua_lstrlenW(LPCUWSTR String);
# 105 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
  typedef WCHAR *PUWSTR_C;




  PUWSTR_C ua_wcschr(PCUWSTR String,WCHAR Character);
  PUWSTR_C ua_wcsrchr(PCUWSTR String,WCHAR Character);




  PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source);
  size_t ua_wcslen(PCUWSTR String);
# 150 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
  int ua_wcsicmp(LPCUWSTR String1,LPCUWSTR String2);
# 162 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
#define __UA_WCSLEN


#define __UA_WSTRSIZE
#define __UA_STACKCOPY


#define WSTR_ALIGNED_STACK_COPY




#define ASTR_ALIGNED_STACK_COPY





#define STRUC_ALIGNED_STACK_COPY
# 192 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 3
#define TSTR_ALIGNED_STACK_COPY
#define TSTR_ALIGNED
#define ua_CharUpper
#define ua_lstrcmp
#define ua_lstrcmpi
#define ua_lstrlen
#define ua_tcscpy






# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stralign_s.h" 1 3






#define __STRALIGN_H_S_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/sec_api/stralign_s.h" 2 3
# 206 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stralign.h" 2 3
# 115 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3







# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsvc.h" 1 3






#define _WINSVC_

# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/winsvc.h" 2 3







#define SERVICES_ACTIVE_DATABASEW
#define SERVICES_FAILED_DATABASEW

#define SERVICES_ACTIVE_DATABASEA
#define SERVICES_FAILED_DATABASEA

#define SC_GROUP_IDENTIFIERW
#define SC_GROUP_IDENTIFIERA

#define SERVICES_ACTIVE_DATABASE
#define SERVICES_FAILED_DATABASE

#define SC_GROUP_IDENTIFIER

#define SERVICE_NO_CHANGE

#define SERVICE_ACTIVE
#define SERVICE_INACTIVE
#define SERVICE_STATE_ALL

#define SERVICE_CONTROL_STOP
#define SERVICE_CONTROL_PAUSE
#define SERVICE_CONTROL_CONTINUE
#define SERVICE_CONTROL_INTERROGATE
#define SERVICE_CONTROL_SHUTDOWN
#define SERVICE_CONTROL_PARAMCHANGE
#define SERVICE_CONTROL_NETBINDADD
#define SERVICE_CONTROL_NETBINDREMOVE
#define SERVICE_CONTROL_NETBINDENABLE
#define SERVICE_CONTROL_NETBINDDISABLE
#define SERVICE_CONTROL_DEVICEEVENT
#define SERVICE_CONTROL_HARDWAREPROFILECHANGE
#define SERVICE_CONTROL_POWEREVENT
#define SERVICE_CONTROL_SESSIONCHANGE

#define SERVICE_STOPPED
#define SERVICE_START_PENDING
#define SERVICE_STOP_PENDING
#define SERVICE_RUNNING
#define SERVICE_CONTINUE_PENDING
#define SERVICE_PAUSE_PENDING
#define SERVICE_PAUSED

#define SERVICE_ACCEPT_STOP
#define SERVICE_ACCEPT_PAUSE_CONTINUE
#define SERVICE_ACCEPT_SHUTDOWN
#define SERVICE_ACCEPT_PARAMCHANGE
#define SERVICE_ACCEPT_NETBINDCHANGE
#define SERVICE_ACCEPT_HARDWAREPROFILECHANGE
#define SERVICE_ACCEPT_POWEREVENT
#define SERVICE_ACCEPT_SESSIONCHANGE

#define SC_MANAGER_CONNECT
#define SC_MANAGER_CREATE_SERVICE
#define SC_MANAGER_ENUMERATE_SERVICE
#define SC_MANAGER_LOCK
#define SC_MANAGER_QUERY_LOCK_STATUS
#define SC_MANAGER_MODIFY_BOOT_CONFIG

#define SC_MANAGER_ALL_ACCESS

#define SERVICE_QUERY_CONFIG
#define SERVICE_CHANGE_CONFIG
#define SERVICE_QUERY_STATUS
#define SERVICE_ENUMERATE_DEPENDENTS
#define SERVICE_START
#define SERVICE_STOP
#define SERVICE_PAUSE_CONTINUE
#define SERVICE_INTERROGATE
#define SERVICE_USER_DEFINED_CONTROL

#define SERVICE_ALL_ACCESS

#define SERVICE_RUNS_IN_SYSTEM_PROCESS

#define SERVICE_CONFIG_DESCRIPTION
#define SERVICE_CONFIG_FAILURE_ACTIONS

  typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
  } SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;

  typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
  } SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;

  typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
  typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;

  typedef enum _SC_ACTION_TYPE {
    SC_ACTION_NONE = 0,SC_ACTION_RESTART = 1,SC_ACTION_REBOOT = 2,SC_ACTION_RUN_COMMAND = 3
  } SC_ACTION_TYPE;

  typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
  } SC_ACTION,*LPSC_ACTION;

  typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;

  typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;

  typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
  typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;

  struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
  typedef SC_HANDLE *LPSC_HANDLE;

  struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

  typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
  } SC_STATUS_TYPE;

  typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
  } SC_ENUM_TYPE;

  typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
  } SERVICE_STATUS,*LPSERVICE_STATUS;

  typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
  } SERVICE_STATUS_PROCESS,*LPSERVICE_STATUS_PROCESS;

  typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;

  typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;

  typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
  typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;

  typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
  typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;

  typedef LPVOID SC_LOCK;

  typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;

  typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;

  typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
  typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;

  typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;

  typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;

  typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
  typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;

  typedef void ( *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs,LPWSTR *lpServiceArgVectors);
  typedef void ( *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs,LPSTR *lpServiceArgVectors);

#define LPSERVICE_MAIN_FUNCTION

  typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
  } SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;

  typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
  } SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;

  typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
  typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;

  typedef void ( *LPHANDLER_FUNCTION)(DWORD dwControl);
  typedef DWORD ( *LPHANDLER_FUNCTION_EX)(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext);

#define ChangeServiceConfig
#define ChangeServiceConfig2
#define CreateService
#define EnumDependentServices
#define EnumServicesStatus
#define EnumServicesStatusEx
#define GetServiceKeyName
#define GetServiceDisplayName
#define OpenSCManager
#define OpenService
#define QueryServiceConfig
#define QueryServiceConfig2
#define QueryServiceLockStatus
#define RegisterServiceCtrlHandler
#define RegisterServiceCtrlHandlerEx
#define StartServiceCtrlDispatcher
#define StartService

  __attribute__((dllimport)) WINBOOL ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
  __attribute__((dllimport)) WINBOOL ChangeServiceConfigW(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword,LPCWSTR lpDisplayName);
  __attribute__((dllimport)) WINBOOL ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
  __attribute__((dllimport)) WINBOOL ChangeServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
  __attribute__((dllimport)) WINBOOL CloseServiceHandle(SC_HANDLE hSCObject);
  __attribute__((dllimport)) WINBOOL ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) SC_HANDLE CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
  __attribute__((dllimport)) SC_HANDLE CreateServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPCWSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword);
  __attribute__((dllimport)) WINBOOL DeleteService(SC_HANDLE hService);
  __attribute__((dllimport)) WINBOOL EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
  __attribute__((dllimport)) WINBOOL EnumDependentServicesW(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
  __attribute__((dllimport)) WINBOOL EnumServicesStatusA(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
  __attribute__((dllimport)) WINBOOL EnumServicesStatusW(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
  __attribute__((dllimport)) WINBOOL EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
  __attribute__((dllimport)) WINBOOL EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
  __attribute__((dllimport)) WINBOOL GetServiceKeyNameA(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL GetServiceKeyNameW(SC_HANDLE hSCManager,LPCWSTR lpDisplayName,LPWSTR lpServiceName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL GetServiceDisplayNameA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL GetServiceDisplayNameW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPWSTR lpDisplayName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager);
  __attribute__((dllimport)) WINBOOL NotifyBootConfigStatus(WINBOOL BootAcceptable);
  __attribute__((dllimport)) SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceConfigW(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGW lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceLockStatusA(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceLockStatusW(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) WINBOOL QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
  __attribute__((dllimport)) WINBOOL SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) WINBOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable);
  __attribute__((dllimport)) WINBOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable);
  __attribute__((dllimport)) WINBOOL StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
  __attribute__((dllimport)) WINBOOL StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCWSTR *lpServiceArgVectors);
  __attribute__((dllimport)) WINBOOL UnlockServiceDatabase(SC_LOCK ScLock);
# 123 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/mcx.h" 1 3






#define _MCX_H_

typedef struct _MODEMDEVCAPS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwModemProviderVersion;
  DWORD dwModemManufacturerOffset;
  DWORD dwModemManufacturerSize;
  DWORD dwModemModelOffset;
  DWORD dwModemModelSize;
  DWORD dwModemVersionOffset;
  DWORD dwModemVersionSize;
  DWORD dwDialOptions;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwModemOptions;
  DWORD dwMaxDTERate;
  DWORD dwMaxDCERate;
  BYTE abVariablePortion[1];
} MODEMDEVCAPS,*PMODEMDEVCAPS,*LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwPreferredModemOptions;
  DWORD dwNegotiatedModemOptions;
  DWORD dwNegotiatedDCERate;
  BYTE abVariablePortion [1];
} MODEMSETTINGS,*PMODEMSETTINGS,*LPMODEMSETTINGS;

#define DIALOPTION_BILLING
#define DIALOPTION_QUIET
#define DIALOPTION_DIALTONE

#define MDMVOLFLAG_LOW
#define MDMVOLFLAG_MEDIUM
#define MDMVOLFLAG_HIGH

#define MDMVOL_LOW
#define MDMVOL_MEDIUM
#define MDMVOL_HIGH

#define MDMSPKRFLAG_OFF
#define MDMSPKRFLAG_DIAL
#define MDMSPKRFLAG_ON
#define MDMSPKRFLAG_CALLSETUP

#define MDMSPKR_OFF
#define MDMSPKR_DIAL
#define MDMSPKR_ON
#define MDMSPKR_CALLSETUP

#define MDM_COMPRESSION
#define MDM_ERROR_CONTROL
#define MDM_FORCED_EC
#define MDM_CELLULAR
#define MDM_FLOWCONTROL_HARD
#define MDM_FLOWCONTROL_SOFT
#define MDM_CCITT_OVERRIDE
#define MDM_SPEED_ADJUST
#define MDM_TONE_DIAL
#define MDM_BLIND_DIAL
#define MDM_V23_OVERRIDE
#define MDM_DIAGNOSTICS

#define MDM_MASK_BEARERMODE
#define MDM_SHIFT_BEARERMODE

#define MDM_MASK_PROTOCOLID
#define MDM_SHIFT_PROTOCOLID

#define MDM_MASK_PROTOCOLDATA
#define MDM_SHIFT_PROTOCOLDATA

#define MDM_MASK_PROTOCOLINFO
#define MDM_SHIFT_PROTOCOLINFO

#define MDM_MASK_EXTENDEDINFO
#define MDM_SHIFT_EXTENDEDINFO

#define MDM_GET_BEARERMODE
#define MDM_SET_BEARERMODE
#define MDM_GET_PROTOCOLID
#define MDM_SET_PROTOCOLID
#define MDM_GET_PROTOCOLDATA
#define MDM_SET_PROTOCOLDATA
#define MDM_GET_PROTOCOLINFO
#define MDM_SET_PROTOCOLINFO
#define MDM_GEN_PROTOCOLINFO
#define MDM_GET_EXTENDEDINFO
#define MDM_SET_EXTENDEDINFO
#define MDM_GEN_EXTENDEDINFO

#define MDM_BEARERMODE_ANALOG
#define MDM_BEARERMODE_ISDN
#define MDM_BEARERMODE_GSM

#define MDM_PROTOCOLID_DEFAULT
#define MDM_PROTOCOLID_HDLCPPP
#define MDM_PROTOCOLID_V128
#define MDM_PROTOCOLID_X75
#define MDM_PROTOCOLID_V110
#define MDM_PROTOCOLID_V120
#define MDM_PROTOCOLID_AUTO
#define MDM_PROTOCOLID_ANALOG
#define MDM_PROTOCOLID_GPRS
#define MDM_PROTOCOLID_PIAFS

#define MDM_SHIFT_HDLCPPP_SPEED
#define MDM_MASK_HDLCPPP_SPEED

#define MDM_HDLCPPP_SPEED_DEFAULT
#define MDM_HDLCPPP_SPEED_64K
#define MDM_HDLCPPP_SPEED_56K

#define MDM_SHIFT_HDLCPPP_AUTH
#define MDM_MASK_HDLCPPP_AUTH

#define MDM_HDLCPPP_AUTH_DEFAULT
#define MDM_HDLCPPP_AUTH_NONE
#define MDM_HDLCPPP_AUTH_PAP
#define MDM_HDLCPPP_AUTH_CHAP
#define MDM_HDLCPPP_AUTH_MSCHAP

#define MDM_SHIFT_HDLCPPP_ML
#define MDM_MASK_HDLCPPP_ML

#define MDM_HDLCPPP_ML_DEFAULT
#define MDM_HDLCPPP_ML_NONE
#define MDM_HDLCPPP_ML_2

#define MDM_GEN_HDLCPPP_PROTOCOL_DATA

#define MDM_PROTOCOL_HDLCPPP_64K
#define MDM_PROTOCOL_HDLCPPP_56K
#define MDM_PROTOCOL_HDLCPPP_112K
#define MDM_PROTOCOL_HDLCPPP_112K_PAP
#define MDM_PROTOCOL_HDLCPPP_112K_CHAP
#define MDM_PROTOCOL_HDLCPPP_112K_MSCHAP
#define MDM_PROTOCOL_HDLCPPP_128K
#define MDM_PROTOCOL_HDLCPPP_128K_PAP
#define MDM_PROTOCOL_HDLCPPP_128K_CHAP
#define MDM_PROTOCOL_HDLCPPP_128K_MSCHAP

#define MDM_SHIFT_V120_SPEED
#define MDM_MASK_V120_SPEED

#define MDM_V120_SPEED_DEFAULT
#define MDM_V120_SPEED_64K
#define MDM_V120_SPEED_56K

#define MDM_SHIFT_V120_ML
#define MDM_MASK_V120_ML

#define MDM_V120_ML_DEFAULT
#define MDM_V120_ML_NONE
#define MDM_V120_ML_2

#define MDM_GEN_V120_PROTOCOL_DATA

#define MDM_PROTOCOL_V120_64K
#define MDM_PROTOCOL_V120_56K
#define MDM_PROTOCOL_V120_112K
#define MDM_PROTOCOL_V120_128K

#define MDM_SHIFT_X75_DATA
#define MDM_MASK_X75_DATA

#define MDM_X75_DATA_DEFAULT
#define MDM_X75_DATA_64K
#define MDM_X75_DATA_128K
#define MDM_X75_DATA_T_70
#define MDM_X75_DATA_BTX

#define MDM_GEN_X75_PROTOCOL_DATA

#define MDM_PROTOCOL_X75_64K
#define MDM_PROTOCOL_X75_128K
#define MDM_PROTOCOL_X75_T_70
#define MDM_PROTOCOL_X75_BTX

#define MDM_SHIFT_V110_SPEED
#define MDM_MASK_V110_SPEED

#define MDM_V110_SPEED_DEFAULT
#define MDM_V110_SPEED_1DOT2K
#define MDM_V110_SPEED_2DOT4K
#define MDM_V110_SPEED_4DOT8K
#define MDM_V110_SPEED_9DOT6K
#define MDM_V110_SPEED_12DOT0K
#define MDM_V110_SPEED_14DOT4K
#define MDM_V110_SPEED_19DOT2K
#define MDM_V110_SPEED_28DOT8K
#define MDM_V110_SPEED_38DOT4K
#define MDM_V110_SPEED_57DOT6K

#define MDM_GEN_V110_PROTOCOL_DATA

#define MDM_PROTOCOL_V110_1DOT2K
#define MDM_PROTOCOL_V110_2DOT4K
#define MDM_PROTOCOL_V110_4DOT8K
#define MDM_PROTOCOL_V110_9DOT6K
#define MDM_PROTOCOL_V110_12DOT0K
#define MDM_PROTOCOL_V110_14DOT4K
#define MDM_PROTOCOL_V110_19DOT2K
#define MDM_PROTOCOL_V110_28DOT8K
#define MDM_PROTOCOL_V110_38DOT4K
#define MDM_PROTOCOL_V110_57DOT6K

#define MDM_SHIFT_AUTO_SPEED
#define MDM_MASK_AUTO_SPEED
#define MDM_AUTO_SPEED_DEFAULT

#define MDM_SHIFT_AUTO_ML
#define MDM_MASK_AUTO_ML
#define MDM_AUTO_ML_DEFAULT
#define MDM_AUTO_ML_NONE
#define MDM_AUTO_ML_2

#define MDM_GEN_AUTO_PROTOCOL_DATA

#define MDM_PROTOCOL_AUTO_1CH
#define MDM_PROTOCOL_AUTO_2CH

#define MDM_ANALOG_RLP_ON
#define MDM_ANALOG_RLP_OFF
#define MDM_ANALOG_V34

#define MDM_GEN_ANALOG_PROTOCOL_DATA

#define MDM_PROTOCOL_ANALOG_RLP
#define MDM_PROTOCOL_ANALOG_NRLP
#define MDM_PROTOCOL_ANALOG_V34
#define MDM_PROTOCOL_GPRS

#define MDM_PIAFS_INCOMING
#define MDM_PIAFS_OUTGOING

#define MDM_PROTOCOL_PIAFS_INCOMING
#define MDM_PROTOCOL_PIAFS_OUTGOING
# 127 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3



# 1 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/imm.h" 1 3






#define _IMM_
# 16 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/imm.h" 3
#define _IMM_SDK_DEFINED_

  struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
  struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;

  typedef HKL *LPHKL;





  typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } COMPOSITIONFORM,*PCOMPOSITIONFORM,*NPCOMPOSITIONFORM,*LPCOMPOSITIONFORM;

  typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } CANDIDATEFORM,*PCANDIDATEFORM,*NPCANDIDATEFORM,*LPCANDIDATEFORM;

  typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
  } CANDIDATELIST,*PCANDIDATELIST,*NPCANDIDATELIST,*LPCANDIDATELIST;

  typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
  } REGISTERWORDA,*PREGISTERWORDA,*NPREGISTERWORDA,*LPREGISTERWORDA;

  typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
  } REGISTERWORDW,*PREGISTERWORDW,*NPREGISTERWORDW,*LPREGISTERWORDW;

  typedef REGISTERWORDA REGISTERWORD;
  typedef PREGISTERWORDA PREGISTERWORD;
  typedef NPREGISTERWORDA NPREGISTERWORD;
  typedef LPREGISTERWORDA LPREGISTERWORD;

  typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
  } RECONVERTSTRING,*PRECONVERTSTRING,*NPRECONVERTSTRING,*LPRECONVERTSTRING;

#define STYLE_DESCRIPTION_SIZE

  typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
  } STYLEBUFA,*PSTYLEBUFA,*NPSTYLEBUFA,*LPSTYLEBUFA;

  typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
  } STYLEBUFW,*PSTYLEBUFW,*NPSTYLEBUFW,*LPSTYLEBUFW;

  typedef STYLEBUFA STYLEBUF;
  typedef PSTYLEBUFA PSTYLEBUF;
  typedef NPSTYLEBUFA NPSTYLEBUF;
  typedef LPSTYLEBUFA LPSTYLEBUF;

#define IMEMENUITEM_STRING_SIZE

  typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*NPIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;

  typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*NPIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;

  typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
  typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
  typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
  typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;

  typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
  } IMECHARPOSITION,*PIMECHARPOSITION,*NPIMECHARPOSITION,*LPIMECHARPOSITION;

  typedef WINBOOL ( *IMCENUMPROC)(HIMC,LPARAM);

#define ImmInstallIME
#define ImmGetDescription
#define ImmGetIMEFileName
#define ImmGetCompositionString
#define ImmSetCompositionString
#define ImmGetCandidateListCount
#define ImmGetCandidateList
#define ImmGetGuideLine

  HKL ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText);
  HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText);
  HWND ImmGetDefaultIMEWnd(HWND);
  UINT ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen);
  UINT ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen);
  UINT ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen);
  UINT ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen);
  DWORD ImmGetProperty(HKL,DWORD);
  WINBOOL ImmIsIME(HKL);
  WINBOOL ImmSimulateHotKey(HWND,DWORD);
  HIMC ImmCreateContext(void);
  WINBOOL ImmDestroyContext(HIMC);
  HIMC ImmGetContext(HWND);
  WINBOOL ImmReleaseContext(HWND,HIMC);
  HIMC ImmAssociateContext(HWND,HIMC);
  WINBOOL ImmAssociateContextEx(HWND,HIMC,DWORD);
  LONG ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD);
  LONG ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD);
  WINBOOL ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  WINBOOL ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  DWORD ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount);
  DWORD ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount);
  DWORD ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen);
  DWORD ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen);
  WINBOOL ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD);
  WINBOOL ImmSetConversionStatus(HIMC,DWORD,DWORD);
  WINBOOL ImmGetOpenStatus(HIMC);
  WINBOOL ImmSetOpenStatus(HIMC,WINBOOL);



#define ImmGetCompositionFont
#define ImmSetCompositionFont

  WINBOOL ImmGetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL ImmGetCompositionFontW(HIMC,LPLOGFONTW);
  WINBOOL ImmSetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL ImmSetCompositionFontW(HIMC,LPLOGFONTW);


  typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR,DWORD,LPCSTR,LPVOID);
  typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR,DWORD,LPCWSTR,LPVOID);

#define REGISTERWORDENUMPROC
#define ImmConfigureIME
#define ImmEscape
#define ImmGetConversionList
#define ImmIsUIMessage
#define ImmRegisterWord
#define ImmUnregisterWord
#define ImmGetRegisterWordStyle
#define ImmEnumRegisterWord
#define ImmGetImeMenuItems

  WINBOOL ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID);
  WINBOOL ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID);
  LRESULT ImmEscapeA(HKL,HIMC,UINT,LPVOID);
  LRESULT ImmEscapeW(HKL,HIMC,UINT,LPVOID);
  DWORD ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  DWORD ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  WINBOOL ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue);
  WINBOOL ImmGetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL ImmSetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM);
  WINBOOL ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM);
  WINBOOL ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
  WINBOOL ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
  UINT ImmGetVirtualKey(HWND);
  WINBOOL ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister);
  WINBOOL ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister);
  WINBOOL ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister);
  WINBOOL ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister);
  UINT ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA);
  UINT ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW);
  UINT ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID);
  UINT ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID);
  WINBOOL ImmDisableIME(DWORD);
  WINBOOL ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
  DWORD ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
  DWORD ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
  WINBOOL ImmDisableTextFrameService(DWORD idThread);

#define IMC_GETCANDIDATEPOS
#define IMC_SETCANDIDATEPOS
#define IMC_GETCOMPOSITIONFONT
#define IMC_SETCOMPOSITIONFONT
#define IMC_GETCOMPOSITIONWINDOW
#define IMC_SETCOMPOSITIONWINDOW
#define IMC_GETSTATUSWINDOWPOS
#define IMC_SETSTATUSWINDOWPOS
#define IMC_CLOSESTATUSWINDOW
#define IMC_OPENSTATUSWINDOW

#define NI_OPENCANDIDATE
#define NI_CLOSECANDIDATE
#define NI_SELECTCANDIDATESTR
#define NI_CHANGECANDIDATELIST
#define NI_FINALIZECONVERSIONRESULT
#define NI_COMPOSITIONSTR
#define NI_SETCANDIDATE_PAGESTART
#define NI_SETCANDIDATE_PAGESIZE
#define NI_IMEMENUSELECTED

#define ISC_SHOWUICANDIDATEWINDOW
#define ISC_SHOWUICOMPOSITIONWINDOW
#define ISC_SHOWUIGUIDELINE
#define ISC_SHOWUIALLCANDIDATEWINDOW
#define ISC_SHOWUIALL

#define CPS_COMPLETE
#define CPS_CONVERT
#define CPS_REVERT
#define CPS_CANCEL

#define MOD_ALT
#define MOD_CONTROL
#define MOD_SHIFT

#define MOD_LEFT
#define MOD_RIGHT

#define MOD_ON_KEYUP
#define MOD_IGNORE_ALL_MODIFIER

#define IME_CHOTKEY_IME_NONIME_TOGGLE
#define IME_CHOTKEY_SHAPE_TOGGLE
#define IME_CHOTKEY_SYMBOL_TOGGLE

#define IME_JHOTKEY_CLOSE_OPEN

#define IME_KHOTKEY_SHAPE_TOGGLE
#define IME_KHOTKEY_HANJACONVERT
#define IME_KHOTKEY_ENGLISH

#define IME_THOTKEY_IME_NONIME_TOGGLE
#define IME_THOTKEY_SHAPE_TOGGLE
#define IME_THOTKEY_SYMBOL_TOGGLE

#define IME_HOTKEY_DSWITCH_FIRST
#define IME_HOTKEY_DSWITCH_LAST

#define IME_HOTKEY_PRIVATE_FIRST
#define IME_ITHOTKEY_RESEND_RESULTSTR
#define IME_ITHOTKEY_PREVIOUS_COMPOSITION
#define IME_ITHOTKEY_UISTYLE_TOGGLE
#define IME_ITHOTKEY_RECONVERTSTRING
#define IME_HOTKEY_PRIVATE_LAST

#define GCS_COMPREADSTR
#define GCS_COMPREADATTR
#define GCS_COMPREADCLAUSE
#define GCS_COMPSTR
#define GCS_COMPATTR
#define GCS_COMPCLAUSE
#define GCS_CURSORPOS
#define GCS_DELTASTART
#define GCS_RESULTREADSTR
#define GCS_RESULTREADCLAUSE
#define GCS_RESULTSTR
#define GCS_RESULTCLAUSE

#define CS_INSERTCHAR
#define CS_NOMOVECARET

#define IMEVER_0310
#define IMEVER_0400

#define IME_PROP_AT_CARET
#define IME_PROP_SPECIAL_UI
#define IME_PROP_CANDLIST_START_FROM_1
#define IME_PROP_UNICODE
#define IME_PROP_COMPLETE_ON_UNSELECT

#define UI_CAP_2700
#define UI_CAP_ROT90
#define UI_CAP_ROTANY

#define SCS_CAP_COMPSTR
#define SCS_CAP_MAKEREAD
#define SCS_CAP_SETRECONVERTSTRING

#define SELECT_CAP_CONVERSION
#define SELECT_CAP_SENTENCE

#define GGL_LEVEL
#define GGL_INDEX
#define GGL_STRING
#define GGL_PRIVATE

#define GL_LEVEL_NOGUIDELINE
#define GL_LEVEL_FATAL
#define GL_LEVEL_ERROR
#define GL_LEVEL_WARNING
#define GL_LEVEL_INFORMATION

#define GL_ID_UNKNOWN
#define GL_ID_NOMODULE
#define GL_ID_NODICTIONARY
#define GL_ID_CANNOTSAVE
#define GL_ID_NOCONVERT
#define GL_ID_TYPINGERROR
#define GL_ID_TOOMANYSTROKE
#define GL_ID_READINGCONFLICT
#define GL_ID_INPUTREADING
#define GL_ID_INPUTRADICAL
#define GL_ID_INPUTCODE
#define GL_ID_INPUTSYMBOL
#define GL_ID_CHOOSECANDIDATE
#define GL_ID_REVERSECONVERSION
#define GL_ID_PRIVATE_FIRST
#define GL_ID_PRIVATE_LAST

#define IGP_GETIMEVERSION
#define IGP_PROPERTY
#define IGP_CONVERSION
#define IGP_SENTENCE
#define IGP_UI
#define IGP_SETCOMPSTR
#define IGP_SELECT

#define SCS_SETSTR
#define SCS_CHANGEATTR
#define SCS_CHANGECLAUSE
#define SCS_SETRECONVERTSTRING
#define SCS_QUERYRECONVERTSTRING

#define ATTR_INPUT
#define ATTR_TARGET_CONVERTED
#define ATTR_CONVERTED
#define ATTR_TARGET_NOTCONVERTED
#define ATTR_INPUT_ERROR
#define ATTR_FIXEDCONVERTED

#define CFS_DEFAULT
#define CFS_RECT
#define CFS_POINT
#define CFS_FORCE_POSITION
#define CFS_CANDIDATEPOS
#define CFS_EXCLUDE

#define GCL_CONVERSION
#define GCL_REVERSECONVERSION
#define GCL_REVERSE_LENGTH

#define IME_CMODE_ALPHANUMERIC
#define IME_CMODE_NATIVE
#define IME_CMODE_CHINESE

#define IME_CMODE_HANGEUL
#define IME_CMODE_HANGUL
#define IME_CMODE_JAPANESE
#define IME_CMODE_KATAKANA
#define IME_CMODE_LANGUAGE
#define IME_CMODE_FULLSHAPE
#define IME_CMODE_ROMAN
#define IME_CMODE_CHARCODE
#define IME_CMODE_HANJACONVERT
#define IME_CMODE_SOFTKBD
#define IME_CMODE_NOCONVERSION
#define IME_CMODE_EUDC
#define IME_CMODE_SYMBOL
#define IME_CMODE_FIXED
#define IME_CMODE_RESERVED

#define IME_SMODE_NONE
#define IME_SMODE_PLAURALCLAUSE
#define IME_SMODE_SINGLECONVERT
#define IME_SMODE_AUTOMATIC
#define IME_SMODE_PHRASEPREDICT
#define IME_SMODE_CONVERSATION
#define IME_SMODE_RESERVED

#define IME_CAND_UNKNOWN
#define IME_CAND_READ
#define IME_CAND_CODE
#define IME_CAND_MEANING
#define IME_CAND_RADICAL
#define IME_CAND_STROKE

#define IMN_CLOSESTATUSWINDOW
#define IMN_OPENSTATUSWINDOW
#define IMN_CHANGECANDIDATE
#define IMN_CLOSECANDIDATE
#define IMN_OPENCANDIDATE
#define IMN_SETCONVERSIONMODE
#define IMN_SETSENTENCEMODE
#define IMN_SETOPENSTATUS
#define IMN_SETCANDIDATEPOS
#define IMN_SETCOMPOSITIONFONT
#define IMN_SETCOMPOSITIONWINDOW
#define IMN_SETSTATUSWINDOWPOS
#define IMN_GUIDELINE
#define IMN_PRIVATE

#define IMR_COMPOSITIONWINDOW
#define IMR_CANDIDATEWINDOW
#define IMR_COMPOSITIONFONT
#define IMR_RECONVERTSTRING
#define IMR_CONFIRMRECONVERTSTRING
#define IMR_QUERYCHARPOSITION
#define IMR_DOCUMENTFEED

#define IMM_ERROR_NODATA
#define IMM_ERROR_GENERAL

#define IME_CONFIG_GENERAL
#define IME_CONFIG_REGISTERWORD
#define IME_CONFIG_SELECTDICTIONARY

#define IME_ESC_QUERY_SUPPORT
#define IME_ESC_RESERVED_FIRST
#define IME_ESC_RESERVED_LAST
#define IME_ESC_PRIVATE_FIRST
#define IME_ESC_PRIVATE_LAST

#define IME_ESC_SEQUENCE_TO_INTERNAL
#define IME_ESC_GET_EUDC_DICTIONARY
#define IME_ESC_SET_EUDC_DICTIONARY
#define IME_ESC_MAX_KEY
#define IME_ESC_IME_NAME
#define IME_ESC_SYNC_HOTKEY
#define IME_ESC_HANJA_MODE
#define IME_ESC_AUTOMATA
#define IME_ESC_PRIVATE_HOTKEY
#define IME_ESC_GETHELPFILENAME

#define IME_REGWORD_STYLE_EUDC
#define IME_REGWORD_STYLE_USER_FIRST
#define IME_REGWORD_STYLE_USER_LAST

#define IACE_CHILDREN
#define IACE_DEFAULT
#define IACE_IGNORENOCONTEXT

#define IGIMIF_RIGHTMENU

#define IGIMII_CMODE
#define IGIMII_SMODE
#define IGIMII_CONFIGURE
#define IGIMII_TOOLS
#define IGIMII_HELP
#define IGIMII_OTHER
#define IGIMII_INPUTTOOLS

#define IMFT_RADIOCHECK
#define IMFT_SEPARATOR
#define IMFT_SUBMENU

#define IMFS_GRAYED
#define IMFS_DISABLED
#define IMFS_CHECKED
#define IMFS_HILITE
#define IMFS_ENABLED
#define IMFS_UNCHECKED
#define IMFS_UNHILITE
#define IMFS_DEFAULT

#define SOFTKEYBOARD_TYPE_T1
#define SOFTKEYBOARD_TYPE_C1
# 131 "C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/windows.h" 2 3
# 8 "timer.h" 2
# 16 "timer.h"
typedef enum {
    START, STOP, PAUSE
} timerstate_t;

typedef struct {




    timerstate_t state;





    double start_instant;





    double total_time;
} Timer;

Timer *timer_init(void);

Timer *timer_destroy(Timer *timer);

void timer_start(Timer *timer);

void timer_stop(Timer *timer);

void timer_pause(Timer *timer);

double timer_get_ms(Timer *timer);

double timer_get_s(Timer *timer);

double timer_get_us(Timer *timer);
# 98 "main.c" 2





 Point known_points1[4336] = {
# 1 "train.dat" 1
{{0.04,0.09,0.14,0.12,0.11,0.1,0.08,0.13,0.13,0.08,0.09,0.1,0.11,0.11,0.08,0.04,0.16,0.13,0.1,0.03,0.12,0.08,0.09,0.12,0.1,0.1,0.08,0.11,0.12,0.1,0,8.4,1.76,2075,293.94,1550,3.29,7.21,4,4.05,8.17,4.05,11.96},0},
{{0.12,0.12,0.06,0.07,0.11,0.1,0.11,0.09,0.12,0.1,0.12,0.11,0.07,0.1,0.13,0.13,0.06,0.11,0.1,0.04,0.11,0.11,0.11,0.09,0.12,0.1,0.11,0.1,0.07,0.08,0,7.62,1.43,1525,269.44,1233.33,4.23,6.88,4.05,5.43,8.19,5.43,12.05},0},
{{0.14,0.09,0.11,0.09,0.09,0.11,0.12,0.08,0.05,0.12,0.09,0.1,0.12,0.1,0.1,0.12,0.08,0.07,0.1,0.06,0.07,0.11,0.1,0.09,0.08,0.11,0.11,0.09,0.1,0.12,0,7.77,2.39,1766.67,248.65,1780,4.18,6.89,4.07,5.55,8.19,5.55,11.99},0},
{{0.06,0.1,0.09,0.09,0.11,0.07,0.12,0.1,0.14,0.14,0.12,0.08,0.11,0.1,0.1,0.11,0.11,0.1,0.08,0.11,0.1,0.1,0.11,0.1,0.09,0.07,0.12,0.14,0.07,0.11,0,9.57,0.49,2525,709.09,1380,2.26,4.13,2.49,2.87,4.95,2.87,10.69},2},
{{0.12,0.11,0.1,0.08,0.1,0.14,0.1,0.11,0.08,0.07,0.1,0.11,0.07,0.09,0.1,0.11,0.1,0.11,0.14,0.09,0.1,0.09,0.11,0.1,0.11,0.11,0.08,0.09,0.14,0.1,0,9.76,0.51,1075,3300,1775,2.29,3.94,2.41,3.08,4.64,3.08,10.8},2},
{{0.09,0.09,0.1,0.12,0.08,0.06,0.09,0.08,0.07,0.08,0.07,0.1,0.11,0.08,0.08,0.08,0.09,0.08,0.07,0.09,0.08,0.1,0.06,0.09,0.09,0.11,0.08,0.08,0.07,0.08,0,7.73,0.31,3125,1337.5,2675,2,3.39,1.94,3.13,4.95,3.13,8.63},2},
{{0.12,0.12,0.12,0.13,0.15,0.11,0.08,0.09,0.06,0.03,0.1,0.11,0.09,0.1,0.1,0.12,0.09,0.11,0.1,0.1,0.13,0.08,0.11,0.12,0.08,0.07,0.09,0.1,0.11,0.13,0,9.2,1.19,4900,1058.33,1825,1.56,2.55,1.72,2.09,3.2,2.09,9.87},5},
{{0.1,0.1,0.1,0.1,0.11,0.11,0.09,0.09,0.12,0.12,0.09,0.11,0.1,0.08,0.1,0.12,0.08,0.1,0.11,0.11,0.08,0.11,0.1,0.1,0.12,0.1,0.13,0.1,0.07,0.1,0,9.3,1.4,800,1275,2983.33,1.84,2.69,1.41,2.22,3.35,2.22,9.91},5},
{{0.08,0.07,0.08,0.08,0.05,0.08,0.14,0.1,0.15,0.16,0.12,0.09,0.09,0.12,0.11,0.08,0.11,0.09,0.1,0.1,0.08,0.09,0.1,0.1,0.1,0.11,0.11,0.12,0.12,0.08,0,9.06,1.38,1283.33,845.45,1533.33,2.26,2.7,1.3,2.68,3.4,2.68,9.78},5},
{{0.01,0,0,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0.01,0.01,0.01,0.02,0.01,0,0,0.01,0.02,0,0.01,0,0,0.01,0,0,0,0,0.39,-0.01,1283.33,125,1533.33,0.07,0.37,0.03,1.85,9.34,1.85,0.39},5},
{{0.03,0.08,0.07,0.07,0.09,0.13,0.14,0.16,0.1,0.12,0.12,0.11,0.11,0.14,0.08,0.11,0.09,0.09,0.08,0.08,0.11,0.08,0.1,0.08,0.07,0.08,0.09,0.11,0.07,0.19,0,7.93,2.69,175,875,175,1.64,2.77,2.39,2.6,3.6,2.6,9.52},1},
{{0.1,0.1,0.14,0.11,0.1,0.09,0.09,0.09,0.08,0.12,0.09,0.11,0.1,0.07,0.13,0.09,0.07,0.12,0.12,0.1,0.07,0.14,0.12,0.11,0.13,0.09,0.11,0.07,0.12,0.05,0,8.99,2.04,1200,1520,1460,1.62,3.03,1.49,1.98,3.74,1.98,9.62},1},
{{0.17,0.11,0.08,0.12,0.11,0.11,0.06,0.07,0.12,0.06,0.08,0.08,0.08,0.11,0.09,0.1,0.13,0.09,0.11,0.13,0.11,0.09,0.08,0.12,0.09,0.14,0.1,0.12,0.11,0.07,0,9.16,2.2,2016.67,3875,2700,1.79,2.98,1.58,2.24,3.7,2.24,9.89},1},
{{0,0.01,0.01,0.01,0.01,0,0,0,0.01,0.01,0,0,0.01,0.01,0.01,0,0.01,0.01,0,0,0,0.01,0.01,0.01,0,0.01,0.01,0,0.01,0,0,0.38,0.08,2016.67,3875,2700,0.07,0.36,0.07,1.97,9.96,1.97,0.4},1},
{{0.03,0.11,0.07,0.12,0.08,0.09,0.11,0.12,0.13,0.15,0.08,0.1,0.1,0.1,0.11,0.12,0.09,0.1,0.11,0.11,0.09,0.1,0.13,0.11,0.11,0.11,0.1,0.11,0.06,0.11,0,8.83,2.38,1550,3325,3900,1.59,2.71,1.5,2.05,3.4,2.05,9.69},5},
{{0.15,0.11,0.08,0.1,0.12,0.13,0.08,0.1,0.07,0.08,0.1,0.1,0.1,0.12,0.08,0.09,0.12,0.11,0.11,0.09,0.13,0.09,0.11,0.11,0.06,0.1,0.09,0.08,0.13,0.11,0,8.57,2.39,3675,1850,3525,2.14,2.93,1.71,2.78,3.62,2.78,9.75},5},
{{0.09,0.06,0.11,0.06,0.07,0.06,0.06,0.06,0.06,0.05,0.08,0.07,0.07,0.06,0.07,0.07,0.08,0.06,0.04,0.09,0.06,0.06,0.06,0.06,0.09,0.05,0.09,0.08,0.08,0.06,0,5.7,1.54,1350,1066.67,1833.33,1.44,2.63,0.93,2.75,4.86,2.75,6.42},5},
{{0.05,0.08,0.08,0.09,0.09,0.1,0.09,0.14,0.14,0.14,0.11,0.07,0.11,0.11,0.09,0.13,0.11,0.1,0.09,0.11,0.08,0.1,0.11,0.09,0.1,0.09,0.14,0.1,0.12,0.09,0,9.18,2.32,562.5,1566.67,1562.5,1.45,3.03,1.61,1.82,3.82,1.82,9.84},1},
{{0.12,0.11,0.09,0.11,0.12,0.11,0.1,0.1,0.05,0.12,0.09,0.12,0.09,0.11,0.11,0.08,0.1,0.09,0.11,0.12,0.1,0.1,0.09,0.11,0.1,0.09,0.11,0.1,0.08,0.13,0,9.17,2.3,2000,1300,4075,1.69,3.14,1.81,2.11,3.84,2.11,9.9},1},
{{0.1,0.07,0.11,0.06,0.04,0.08,0.05,0.05,0.04,0.04,0.07,0.08,0.07,0.06,0.07,0.06,0.05,0.08,0.06,0.05,0.08,0.07,0.05,0.06,0.09,0.06,0.04,0.06,0.07,0.05,0,5.33,1.25,1925,1633.33,2175,1.14,2.39,1.05,2.33,4.96,2.33,5.78},1},
{{0.01,0.06,0.09,0.08,0.07,0.1,0.11,0.18,0.14,0.16,0.08,0.1,0.1,0.11,0.08,0.08,0.1,0.13,0.12,0.11,0.08,0.11,0.12,0.14,0.09,0.13,0.11,0.08,0.07,0.1,0,9.02,2.23,2500,1031.25,1640,1.21,2.77,1.39,1.55,3.36,1.55,9.67},5},
{{0.09,0.08,0.06,0.1,0.13,0.11,0.13,0.1,0.12,0.11,0.11,0.1,0.09,0.09,0.12,0.11,0.08,0.11,0.08,0.12,0.11,0.11,0.09,0.08,0.13,0.09,0.1,0.09,0.12,0.1,0,8.88,2.41,1216.67,1233.33,3450,1.5,2.96,1.68,2.03,3.73,2.03,9.84},5},
{{0.18,0.14,0.12,0.1,0.07,0.07,0.03,0.01,0.02,0.01,0.08,0.08,0.08,0.09,0.07,0.08,0.09,0.05,0.07,0.05,0.08,0.05,0.04,0.07,0.06,0.07,0.1,0.1,0.1,0.08,0,6.15,1.97,733.33,1850,1916.67,2,2.51,1.25,3.42,4.28,3.42,7.23},5},
{{0.02,0.07,0.08,0.09,0.09,0.11,0.1,0.14,0.15,0.15,0.1,0.12,0.1,0.1,0.1,0.07,0.12,0.1,0.12,0.09,0.06,0.09,0.14,0.11,0.11,0.09,0.12,0.1,0.1,0.1,0,9,2.58,1300,850,2075,1.66,3.27,1.76,2.13,3.95,2.13,9.79},1},
{{0.15,0.12,0.1,0.07,0.13,0.09,0.1,0.1,0.07,0.09,0.1,0.11,0.08,0.11,0.11,0.13,0.07,0.08,0.11,0.11,0.12,0.09,0.08,0.09,0.12,0.1,0.1,0.1,0.1,0.12,0,9.15,2.58,3066.67,691.67,1660,1.86,3.28,2.03,2.41,4.09,2.41,10.05},1},
{{0.1,0.1,0.09,0.1,0.06,0.09,0.07,0.04,0.06,0.04,0.07,0.05,0.1,0.07,0.06,0.08,0.09,0.09,0.05,0.08,0.1,0.1,0.05,0.05,0.08,0.08,0.07,0.07,0.08,0.06,0,6.74,1.74,1725,1108.33,1500,1.3,2.58,1.51,2.21,4.59,2.21,7.37},1},
{{0.05,0.08,0.06,0.05,0.11,0.11,0.14,0.12,0.17,0.11,0.09,0.09,0.11,0.09,0.14,0.12,0.07,0.1,0.07,0.15,0.12,0.09,0.13,0.09,0.09,0.1,0.1,0.12,0.08,0.12,0,9.08,2.42,2925,543.75,1475,1.66,3.09,1.7,2.19,3.78,2.19,9.97},5},
{{0.11,0.07,0.09,0.11,0.1,0.09,0.1,0.1,0.09,0.15,0.12,0.09,0.13,0.11,0.06,0.09,0.1,0.11,0.14,0.08,0.11,0.12,0.08,0.11,0.11,0.07,0.11,0.08,0.1,0.11,0,8.65,2.59,1675,3650,1100,1.79,3.23,1.94,2.32,3.9,2.32,9.8},5},
{{0.11,0.12,0.12,0.09,0.07,0.04,0.05,0.04,0.02,0.01,0.05,0.08,0.04,0.07,0.06,0.07,0.1,0.06,0.06,0.04,0.03,0.04,0.08,0.06,0.07,0.07,0.08,0.07,0.11,0.04,0,5.7,1.69,800,600,1450,1.22,2.56,1,2.58,5.04,2.58,6.37},5},
{{0.06,0.09,0.07,0.12,0.08,0.11,0.12,0.11,0.11,0.12,0.11,0.09,0.08,0.1,0.14,0.09,0.11,0.09,0.12,0.09,0.08,0.08,0.09,0.11,0.09,0.1,0.11,0.13,0.12,0.09,0,8.93,2.42,1675,1533.33,1387.5,1.67,3.2,1.88,2.27,4.05,2.27,9.74},1},
{{0.09,0.13,0.13,0.08,0.12,0.1,0.1,0.09,0.11,0.09,0.09,0.14,0.1,0.1,0.07,0.11,0.11,0.09,0.09,0.11,0.12,0.12,0.08,0.1,0.13,0.1,0.09,0.09,0.08,0.1,0,8.67,2.03,2266.67,942.86,1283.33,1.52,3.31,2.03,1.94,4.15,1.94,9.45},1},
{{0.09,0.05,0.05,0.06,0.05,0.07,0.04,0.06,0.04,0.05,0.06,0.03,0.07,0.07,0.04,0.06,0.04,0.08,0.05,0.06,0.04,0.07,0.07,0.06,0.03,0.05,0.06,0.04,0.05,0.07,0,5,1.33,425,808.33,600,0.91,2.6,1.18,2.23,6.15,2.23,5.43},1},
{{0.08,0.1,0.11,0.1,0.16,0.1,0.1,0.12,0.07,0.08,0.11,0.1,0.11,0.1,0.14,0.07,0.09,0.11,0.1,0.05,0.13,0.08,0.07,0.11,0.12,0.11,0.1,0.07,0.11,0.11,0,8.94,1.69,1575,315.52,3075,4.57,6.5,3.94,5.65,7.69,5.65,12.85},0},
{{0.12,0.09,0.11,0.08,0.08,0.09,0.11,0.1,0.11,0.11,0.09,0.09,0.1,0.07,0.12,0.11,0.1,0.09,0.13,0.06,0.07,0.12,0.14,0.1,0.08,0.09,0.12,0.12,0.1,0.07,0,10.02,1.52,1633.33,275.71,2700,5.7,6.37,3.73,6.82,7.58,6.82,13.93},0},
{{0.07,0.1,0.06,0.1,0.05,0.09,0.07,0.06,0.1,0.09,0.08,0.09,0.07,0.11,0.03,0.1,0.09,0.08,0.05,0.06,0.09,0.08,0.07,0.07,0.08,0.08,0.07,0.09,0.08,0.1,0,6.97,1.42,1775,291.3,1875,4.23,5.49,3.18,6.55,8.2,6.55,10.61},0},
{{0.08,0.08,0.09,0.09,0.1,0.13,0.08,0.15,0.12,0.08,0.09,0.14,0.09,0.08,0.12,0.09,0.09,0.09,0.1,0.12,0.1,0.06,0.13,0.1,0.13,0.09,0.09,0.11,0.11,0.08,0,9.59,0.21,2533.33,861.11,1600,2.55,4.17,2.27,3.04,5.02,3.04,10.68},2},
{{0.11,0.09,0.13,0.1,0.1,0.07,0.09,0.1,0.11,0.11,0.12,0.06,0.07,0.13,0.11,0.1,0.12,0.13,0.09,0.08,0.09,0.13,0.1,0.13,0.09,0.12,0.08,0.08,0.09,0.12,0,9.64,0.21,3300,1131.25,1650,2.64,3.86,2.41,3.12,4.69,3.12,10.86},2},
{{0.1,0.11,0.08,0.1,0.1,0.1,0.1,0.05,0.06,0.11,0.08,0.09,0.13,0.08,0.07,0.09,0.09,0.08,0.1,0.1,0.08,0.13,0.05,0.06,0.07,0.08,0.12,0.1,0.1,0.09,0,8.49,0.53,1337.5,655.56,1320,2.29,3.78,2.28,3.09,4.96,3.09,9.67},2},
{{0.06,0.08,0.12,0.15,0.2,0.1,0.08,0.11,0.06,0.06,0.08,0.09,0.14,0.1,0.1,0.13,0.09,0.09,0.1,0.03,0.13,0.06,0.09,0.1,0.08,0.11,0.14,0.12,0.08,0.11,0,9.7,0.69,1800,236.49,1600,4.6,6.35,3.72,5.88,7.73,5.88,13.26},0},
{{0.12,0.06,0.12,0.11,0.06,0.11,0.1,0.16,0.1,0.08,0.07,0.13,0.1,0.1,0.1,0.1,0.08,0.08,0.12,0.04,0.1,0.09,0.09,0.11,0.09,0.13,0.14,0.11,0.06,0.1,0,10.48,0.76,2975,221.43,1700,6.06,6.6,3.33,7.15,7.8,7.15,14.48},0},
{{0.13,0.1,0.08,0.08,0.09,0.11,0.07,0.12,0.16,0.07,0.1,0.12,0.09,0.13,0.07,0.08,0.1,0.08,0.13,0.03,0.1,0.11,0.1,0.1,0.12,0.13,0.09,0.1,0.08,0.1,0,10.04,0.72,1750,242.5,1683.33,6.24,6.73,3.36,7.32,7.9,7.32,14.28},0},
{{0.16,0.12,0.06,0.05,0.07,0.13,0.11,0.1,0.11,0.1,0.1,0.12,0.12,0.08,0.09,0.08,0.13,0.14,0.08,0.02,0.15,0.1,0.14,0.06,0.09,0.1,0.09,0.07,0.11,0.12,0,9.41,0.22,1350,287.88,4000,6.65,7.05,4.12,7.66,8.49,7.66,14.63},0},
{{0.09,0.12,0.11,0.12,0.08,0.1,0.09,0.1,0.08,0.13,0.09,0.11,0.11,0.1,0.08,0.12,0.09,0.11,0.12,0.02,0.11,0.11,0.08,0.07,0.11,0.09,0.09,0.16,0.1,0.11,0,10.18,0.96,2950,278.57,2075,6.03,6.45,3.43,7.3,7.63,7.3,14.18},0},
{{0.09,0.1,0.12,0.11,0.1,0.1,0.1,0.12,0.09,0.1,0.13,0.1,0.1,0.12,0.11,0.09,0.07,0.09,0.11,0.03,0.06,0.14,0.08,0.11,0.1,0.12,0.06,0.13,0.12,0.1,0,9.47,0.91,1616.67,310.34,4250,6.05,6.71,3.18,7.32,7.96,7.32,13.71},0},
{{0.09,0.12,0.1,0.09,0.09,0.07,0.12,0.07,0.12,0.15,0.09,0.1,0.09,0.08,0.09,0.11,0.12,0.15,0.09,0.01,0.11,0.09,0.12,0.12,0.09,0.08,0.07,0.11,0.15,0.08,0,10.45,0.68,2262.5,276.47,4225,6.54,6.46,3.44,7.87,7.85,7.87,14.85},0},
{{0.1,0.12,0.11,0.09,0.06,0.1,0.13,0.11,0.11,0.11,0.15,0.1,0.11,0.08,0.08,0.13,0.12,0.08,0.07,0.01,0.07,0.1,0.13,0.08,0.12,0.09,0.11,0.09,0.11,0.12,0,9.04,0.95,900,346.43,4425,6.44,6.81,3.29,7.59,7.93,7.59,13.68},0},
{{0.08,0.09,0.08,0.11,0.19,0.08,0.12,0.06,0.08,0.11,0.11,0.05,0.05,0.11,0.17,0.11,0.11,0.1,0.1,0.02,0.08,0.11,0.11,0.16,0.13,0.06,0.1,0.06,0.11,0.07,0,9.81,0.44,875,326.09,1187.5,5.29,5.65,3.09,6.91,7.54,6.91,13.49},0},
{{0.15,0.24,0.1,0.08,0.11,0.09,0.08,0.03,0.08,0.06,0.1,0.07,0.07,0.09,0.07,0.26,0.08,0.09,0.1,0.1,0.07,0.11,0.06,0.08,0.11,0.15,0.17,0.07,0.12,0.08,0,9.92,-0.06,1100,1000,1500,2.04,2.4,1.6,2.8,3.2,2.8,10.53},2},
{{0.08,0.05,0.1,0.1,0.13,0.14,0.1,0.11,0.1,0.11,0.12,0.07,0.11,0.13,0.07,0.07,0.13,0.12,0.13,0.07,0.08,0.07,0.09,0.12,0.1,0.13,0.09,0.14,0.1,0.1,0,9.71,-0.06,2183.33,2012.5,2516.67,2.98,2.82,1.74,3.51,3.35,3.51,10.55},2},
{{0.1,0.09,0.11,0.08,0.1,0.14,0.08,0.11,0.13,0.09,0.12,0.11,0.12,0.07,0.12,0.07,0.07,0.12,0.12,0.11,0.12,0.09,0.11,0.1,0.11,0.1,0.1,0.1,0.08,0.11,0,9.69,-0.28,2325,1462.5,725,2.96,2.94,1.82,3.58,3.52,3.58,10.61},2},
{{0.12,0.11,0.08,0.08,0.11,0.1,0.15,0.09,0.07,0.12,0.12,0.12,0.1,0.11,0.07,0.11,0.1,0.09,0.1,0.1,0.11,0.13,0.08,0.06,0.11,0.1,0.12,0.11,0.1,0.1,0,9.63,-0.15,2016.67,1250,857.14,2.84,2.83,1.92,3.53,3.44,3.53,10.56},2},
{{0.13,0.12,0.05,0.1,0.09,0.09,0.12,0.11,0.11,0.09,0.12,0.07,0.14,0.11,0.08,0.07,0.12,0.09,0.12,0.11,0.12,0.13,0.09,0.11,0.13,0.07,0.09,0.09,0.1,0.11,0,9.75,-0.29,3200,642.31,1280,2.85,2.83,1.89,3.51,3.38,3.51,10.65},2},
{{0.13,0.09,0.1,0.08,0.11,0.08,0.11,0.1,0.1,0.11,0.1,0.1,0.08,0.14,0.08,0.13,0.09,0.12,0.09,0.09,0.1,0.1,0.11,0.12,0.1,0.1,0.07,0.1,0.11,0.11,0,9.67,-0.09,1112.5,1056.25,2116.67,2.85,2.64,1.93,3.52,3.26,3.52,10.59},2},
{{0.14,0.08,0.08,0.14,0.1,0.08,0.09,0.08,0.12,0.11,0.1,0.12,0.09,0.1,0.11,0.07,0.11,0.1,0.11,0.11,0.11,0.13,0.07,0.14,0.07,0.08,0.09,0.13,0.09,0.11,0,9.7,-0.22,1616.67,911.11,1525,2.79,2.79,1.86,3.5,3.38,3.5,10.61},2},
{{0.12,0.1,0.12,0.09,0.09,0.09,0.1,0.12,0.1,0.1,0.08,0.12,0.12,0.07,0.12,0.11,0.09,0.12,0.08,0.12,0.11,0.1,0.12,0.13,0.12,0.09,0.06,0.11,0.09,0.1,0,9.76,-0.21,2833.33,745,2250,2.82,2.68,1.85,3.52,3.27,3.52,10.65},2},
{{0.09,0.09,0.11,0.13,0.08,0.1,0.11,0.1,0.13,0.09,0.08,0.13,0.1,0.11,0.09,0.1,0.12,0.08,0.08,0.13,0.1,0.11,0.09,0.11,0.11,0.1,0.09,0.11,0.11,0.09,0,9.79,-0.21,1156.25,762.5,1000,2.86,2.79,1.8,3.49,3.4,3.49,10.66},2},
{{0.11,0.09,0.1,0.12,0.1,0.07,0.1,0.08,0.12,0.12,0.11,0.09,0.08,0.11,0.11,0.09,0.14,0.1,0.09,0.1,0.08,0.11,0.13,0.13,0.09,0.1,0.08,0.11,0.09,0.11,0,9.7,-0.11,805.56,1800,1285.71,2.87,2.71,1.9,3.56,3.3,3.56,10.61},2},
{{0.06,0.09,0.12,0.09,0.14,0.12,0.12,0.12,0.05,0.11,0.09,0.1,0.1,0.12,0.11,0.07,0.13,0.1,0.13,0.08,0.1,0.07,0.13,0.08,0.1,0.13,0.08,0.13,0.11,0.1,0,9.74,-0.02,1683.33,1221.43,2250,2.81,2.63,1.87,3.38,3.16,3.38,10.59},2},
{{0.05,0.09,0.13,0.09,0.1,0.09,0.13,0.11,0.13,0.1,0.09,0.13,0.11,0.13,0.09,0.11,0.06,0.09,0.13,0.08,0.1,0.12,0.08,0.09,0.07,0.15,0.09,0.12,0.1,0.11,0,9.58,-0.13,2337.5,1900,1500,2.96,2.66,1.79,3.51,3.22,3.51,10.46},2},
{{0.06,0.1,0.08,0.12,0.11,0.14,0.09,0.09,0.11,0.12,0.11,0.09,0.09,0.12,0.12,0.06,0.11,0.1,0.08,0.13,0.1,0.09,0.12,0.1,0.09,0.14,0.09,0.09,0.1,0.1,0,9.76,-0.12,1290,1380,2725,2.97,2.77,1.87,3.58,3.37,3.58,10.69},2},
{{0.07,0.12,0.1,0.11,0.1,0.07,0.07,0.15,0.11,0.11,0.1,0.11,0.12,0.07,0.12,0.1,0.07,0.13,0.08,0.13,0.12,0.13,0.07,0.14,0.07,0.13,0.07,0.09,0.08,0.12,0,9.76,-0.18,3450,822.22,1090,2.99,2.83,1.92,3.65,3.46,3.65,10.71},2},
{{0.06,0.1,0.1,0.08,0.09,0.11,0.1,0.09,0.1,0.08,0.07,0.09,0.1,0.06,0.14,0.1,0.1,0.09,0.08,0.08,0.07,0.07,0.08,0.05,0.08,0.09,0.09,0.15,0.15,0.07,0,8.6,0.13,2266.67,942.86,1333.33,2.51,2.35,1.51,3.44,3.32,3.44,9.33},2},
{{0.07,0.17,0.28,0.2,0.08,0.04,0.08,0.05,0.04,0.02,0.05,0.06,0.09,0.1,0.24,0.08,0.09,0.1,0.11,0.04,0.06,0.09,0.18,0.17,0.12,0.07,0.07,0.12,0.08,0.06,0,9.39,-0.17,475,318.42,600,2.98,5.2,2.19,3.9,6.73,3.9,11.43},0},
{{0.11,0.07,0.12,0.11,0.1,0.14,0.11,0.11,0.08,0.07,0.1,0.12,0.11,0.09,0.08,0.08,0.09,0.09,0.13,0.08,0.11,0.12,0.11,0.11,0.09,0.12,0.07,0.08,0.11,0.11,0,8.72,0.04,500,307.81,1250,4.82,7.08,2.77,5.69,8.11,5.69,12.38},0},
{{0.11,0.11,0.11,0.13,0.08,0.05,0.11,0.13,0.07,0.11,0.11,0.12,0.08,0.12,0.03,0.1,0.13,0.08,0.12,0.07,0.09,0.14,0.12,0.11,0.11,0.1,0.08,0.07,0.11,0.1,0,8.76,-0.02,3875,397.92,912.5,4.96,7.17,2.68,5.98,8.14,5.98,12.57},0},
{{0.14,0.09,0.14,0.09,0.06,0.09,0.06,0.12,0.09,0.14,0.1,0.13,0.13,0.09,0.06,0.08,0.09,0.09,0.14,0.04,0.14,0.14,0.11,0.06,0.08,0.08,0.08,0.11,0.13,0.08,0,8.23,-0.35,4600,344.44,2400,5.41,7.28,3.06,6.56,8.24,6.56,12.55},0},
{{0.09,0.05,0.1,0.14,0.08,0.1,0.1,0.13,0.07,0.15,0.1,0.07,0.09,0.13,0.11,0.12,0.1,0.08,0.12,0.04,0.15,0.12,0.06,0.08,0.07,0.09,0.15,0.12,0.08,0.11,0,8.84,-0.18,1583.33,410.87,2683.33,5.5,6.29,3.01,6.52,7.57,6.52,12.73},0},
{{0.06,0.17,0.08,0.1,0.12,0.12,0.07,0.11,0.1,0.1,0.12,0.14,0.06,0.1,0.09,0.13,0.08,0.1,0.1,0.05,0.1,0.1,0.1,0.11,0.09,0.06,0.12,0.12,0.09,0.11,0,8.17,0.3,1430,445.45,1575,4.85,6.96,2.8,5.87,8.1,5.87,12.05},0},
{{0.07,0.14,0.11,0.13,0.08,0.09,0.11,0.09,0.09,0.11,0.14,0.09,0.09,0.07,0.11,0.09,0.09,0.09,0.14,0.06,0.1,0.08,0.11,0.1,0.1,0.09,0.12,0.08,0.12,0.11,0,8.41,0.19,300,423.91,1537.5,4.97,7.27,2.73,5.98,8.4,5.98,12.49},0},
{{0.12,0.13,0.09,0.1,0.07,0.07,0.16,0.11,0.1,0.09,0.12,0.14,0.09,0.12,0.1,0.08,0.11,0.1,0.06,0.05,0.17,0.05,0.1,0.09,0.1,0.11,0.11,0.12,0.1,0.08,0,7.59,-0.19,1125,508.33,1975,4.86,6.7,2.77,5.83,7.68,5.83,11.47},0},
{{0.12,0.09,0.09,0.08,0.11,0.1,0.1,0.1,0.13,0.1,0.1,0.12,0.13,0.1,0.11,0.08,0.07,0.1,0.09,0.05,0.1,0.08,0.08,0.09,0.12,0.1,0.13,0.14,0.11,0.09,0,8.05,0.29,2700,433.33,2100,5.25,6.7,2.51,6.16,7.77,6.16,11.77},0},
{{0.09,0.11,0.07,0.08,0.11,0.11,0.11,0.09,0.12,0.12,0.1,0.1,0.12,0.1,0.06,0.14,0.11,0.1,0.07,0.04,0.09,0.1,0.11,0.11,0.11,0.1,0.09,0.1,0.08,0.15,0,8.56,0.43,4850,406.25,1675,5.42,6.82,2.78,6.41,7.88,6.41,12.42},0},
{{0.1,0.09,0.05,0.12,0.12,0.09,0.09,0.09,0.14,0.13,0.11,0.07,0.11,0.11,0.08,0.11,0.13,0.13,0.11,0.03,0.07,0.1,0.09,0.09,0.1,0.12,0.12,0.12,0.1,0.1,0,8.73,0.53,608.33,502.94,3375,5.55,6.49,2.54,6.48,7.56,6.48,12.41},0},
{{0.11,0.08,0.06,0.05,0.1,0.14,0.13,0.11,0.11,0.14,0.08,0.11,0.09,0.09,0.09,0.12,0.11,0.12,0.12,0.05,0.09,0.09,0.11,0.12,0.07,0.12,0.15,0.1,0.09,0.09,0,8.97,0.15,1491.67,422.73,2750,5.73,6.46,2.4,6.56,7.53,6.56,12.58},0},
{{0.13,0.08,0.04,0.04,0.13,0.13,0.1,0.09,0.15,0.13,0.12,0.1,0.11,0.08,0.1,0.11,0.12,0.1,0.07,0.04,0.07,0.09,0.12,0.1,0.11,0.12,0.08,0.07,0.12,0.14,0,8.31,0.43,1150,447.62,2600,5.73,6.73,2.58,6.56,7.86,6.56,12.4},0},
{{0.11,0.08,0.07,0.04,0.13,0.15,0.11,0.14,0.13,0.07,0.1,0.08,0.13,0.1,0.12,0.11,0.1,0.12,0.08,0.04,0.11,0.1,0.05,0.06,0.15,0.1,0.12,0.09,0.16,0.09,0,8.41,0.28,1142.86,555.88,4175,5.28,6.36,2.7,6,7.43,6,12.14},0},
{{0.01,0.04,0.07,0.07,0.07,0.04,0.05,0.04,0.03,0.03,0.03,0.02,0.05,0.07,0.08,0.06,0.06,0.06,0.02,0.01,0.03,0.04,0.06,0.05,0.06,0.04,0.06,0.03,0.02,0.06,0,3.75,0.12,537.5,500,1425,1.84,2.88,1.02,5.11,7.62,5.11,4.75},0},
{{0.01,0.08,0.08,0.05,0.11,0.14,0.15,0.12,0.16,0,0.09,0.14,0.09,0.14,0.14,0.09,0.08,0.08,0.09,0,0.17,0.12,0.08,0.13,0.11,0.13,0.09,0.05,0.08,0,0,8.81,-1.06,1116.67,1166.67,2933.33,5.82,3.16,2.74,7,3.94,7,11.65},2},
{{0.02,0.07,0.09,0.03,0.1,0.17,0.09,0.07,0.17,0,0.13,0.15,0.1,0.11,0.16,0.07,0.06,0.07,0.1,0,0.14,0.1,0.15,0.13,0.11,0.06,0.06,0.1,0.07,0,0,8.45,-0.76,1433.33,905.56,2500,6.47,3.32,2.83,7.77,4.14,7.77,11.69},2},
{{0.01,0.08,0.07,0.04,0.1,0.12,0.21,0.11,0.11,0,0.11,0.14,0.11,0.15,0.12,0.09,0.12,0.03,0.09,0,0.16,0.16,0.12,0.12,0.08,0.07,0.08,0.07,0.08,0,0,8.43,-1.03,3875,1540,2583.33,6.26,3,3,7.46,3.73,7.46,11.68},2},
{{0.03,0.09,0.08,0.03,0.06,0.12,0.17,0.12,0.11,0,0.07,0.21,0.12,0.15,0.13,0.06,0.08,0.04,0.12,0,0.16,0.11,0.16,0.11,0.08,0.12,0.06,0.06,0.08,0,0,8.48,-0.92,1800,1100,3600,6.6,3.15,2.82,8.05,3.91,8.05,11.83},2},
{{0.03,0.1,0.06,0.05,0.08,0.08,0.18,0.13,0.13,0,0.08,0.17,0.1,0.18,0.17,0.05,0.1,0.04,0.02,0,0.18,0.14,0.14,0.11,0.07,0.1,0.08,0.06,0.09,0,0,8.65,-1.28,1300,2516.67,1900,6.31,3.13,2.76,7.49,4.03,7.49,11.89},2},
{{0.01,0.11,0.04,0.07,0.07,0.1,0.14,0.13,0.2,0,0.11,0.22,0.11,0.14,0.11,0.07,0.07,0.05,0.05,0,0.15,0.11,0.12,0.06,0.1,0.16,0.08,0.08,0.09,0,0,8.16,-1,1600,1056.25,2133.33,6.51,3.17,2.59,7.62,3.94,7.62,11.49},2},
{{0.01,0.08,0.03,0.05,0.08,0.17,0.11,0.15,0.12,0,0.14,0.11,0.12,0.16,0.15,0.08,0.09,0.04,0.09,0,0.14,0.19,0.09,0.1,0.08,0.11,0.07,0.1,0.07,0,0,8.29,-1.02,1816.67,1270,1650,6.87,2.99,2.8,8.15,3.82,8.15,11.87},2},
{{0,0.09,0.08,0.03,0.01,0.11,0.17,0.18,0.14,0,0.13,0.18,0.14,0.13,0.14,0.05,0.07,0.05,0.09,0,0.12,0.17,0.1,0.14,0.08,0.08,0.09,0.1,0.08,0,0,8.09,-0.74,1358.33,1430,1787.5,6.92,3.12,2.64,8.15,3.82,8.15,11.61},2},
{{0.01,0.08,0.04,0.04,0.11,0.16,0.14,0.1,0.17,0,0.1,0.14,0.12,0.15,0.16,0.07,0.08,0.06,0.09,0,0.15,0.11,0.14,0.11,0.11,0.08,0.07,0.11,0.05,0,0,8.49,-1.02,1312.5,1081.25,3200,6.47,2.99,2.62,7.61,3.73,7.61,11.7},2},
{{0.14,0.1,0.15,0.11,0.12,0.08,0.11,0.07,0.07,0,0.12,0.07,0.13,0.11,0.07,0.11,0.08,0.13,0.08,0,0.13,0.09,0.04,0.05,0.11,0.1,0.11,0.16,0.13,0,0,9.72,0.31,3300,727.27,2200,4.29,3.76,2.9,5.6,4.53,5.6,11.64},2},
{{0.16,0.11,0.2,0.07,0.09,0.08,0.09,0.08,0.07,0,0.1,0.09,0.08,0.09,0.07,0.09,0.15,0.14,0.12,0,0.14,0.05,0.09,0.13,0.09,0.07,0.09,0.08,0.15,0,0,9.96,0.14,4375,875,2566.67,4.22,3.44,3.31,5.62,4.2,5.62,11.91},2},
{{0.15,0.11,0.11,0.18,0.1,0.07,0.08,0.08,0.07,0,0.1,0.09,0.12,0.08,0.05,0.09,0.14,0.1,0.11,0,0.09,0.1,0.07,0.11,0.1,0.09,0.14,0.11,0.07,0,0,10.02,0.27,1100,513.89,1100,4.36,3.8,2.98,5.77,4.51,5.77,11.93},2},
{{0.16,0.08,0.12,0.11,0.13,0.09,0.08,0.11,0.09,0,0.11,0.08,0.09,0.08,0.09,0.11,0.09,0.17,0.08,0,0.1,0.08,0.1,0.09,0.08,0.13,0.1,0.08,0.16,0,0,9.8,0.36,1520,831.82,1300,4.59,3.62,3.02,5.92,4.47,5.92,11.85},2},
{{0.12,0.13,0.12,0.15,0.13,0.09,0.05,0.07,0.1,0,0.09,0.12,0.05,0.07,0.09,0.12,0.1,0.14,0.09,0,0.07,0.13,0.08,0.13,0.09,0.05,0.15,0.13,0.08,0,0,10.12,0.14,3275,656.67,2566.67,4.29,3.63,2.86,5.72,4.43,5.72,11.95},2},
{{0.13,0.13,0.09,0.14,0.12,0.11,0.07,0.06,0.1,0,0.09,0.12,0.08,0.1,0.08,0.11,0.11,0.09,0.11,0,0.1,0.08,0.05,0.14,0.13,0.09,0.11,0.14,0.08,0,0,9.92,0.17,1912.5,737.5,1740,4.45,3.63,2.75,5.83,4.36,5.83,11.78},2},
{{0.15,0.1,0.14,0.1,0.07,0.12,0.09,0.1,0.08,0,0.08,0.09,0.1,0.11,0.08,0.08,0.17,0.08,0.14,0,0.1,0.07,0.12,0.08,0.09,0.11,0.11,0.09,0.15,0,0,9.95,0.2,2212.5,1400,1675,4.44,3.44,2.96,5.73,4.17,5.73,11.87},2},
{{0.11,0.13,0.14,0.11,0.08,0.08,0.06,0.14,0.09,0,0.1,0.06,0.09,0.09,0.12,0.1,0.1,0.11,0.13,0,0.06,0.12,0.07,0.11,0.1,0.12,0.14,0.11,0.11,0,0,9.92,0.32,2583.33,983.33,3875,4.49,3.42,2.72,5.77,4.17,5.77,11.8},2},
{{0.14,0.11,0.13,0.13,0.07,0.1,0.09,0.1,0.07,0,0.08,0.09,0.1,0.08,0.08,0.13,0.1,0.11,0.14,0,0.09,0.08,0.1,0.11,0.07,0.13,0.12,0.09,0.13,0,0,10.06,0.29,3350,895,1308.33,4.45,3.38,2.87,5.77,4.13,5.77,11.94},2},
{{0.12,0.11,0.12,0.09,0.13,0.07,0.08,0.09,0.12,0,0.11,0.06,0.08,0.13,0.11,0.11,0.08,0.14,0.11,0,0.06,0.07,0.1,0.07,0.14,0.12,0.11,0.12,0.1,0,0,9.71,0.57,2500,966.67,1600,4.79,3.39,2.88,6.12,4.16,6.12,11.78},2},
{{0.14,0.1,0.14,0.1,0.11,0.09,0.08,0.13,0.07,0,0.07,0.09,0.09,0.08,0.12,0.14,0.1,0.14,0.11,0,0.05,0.11,0.07,0.12,0.1,0.15,0.07,0.11,0.14,0,0,9.92,0.28,1675,994.44,2800,4.39,3.11,2.74,5.64,3.86,5.64,11.72},2},
{{0.12,0.13,0.1,0.13,0.11,0.11,0.04,0.11,0.1,0,0.09,0.07,0.09,0.1,0.07,0.13,0.12,0.12,0.12,0,0.06,0.09,0.09,0.12,0.13,0.12,0.09,0.1,0.11,0,0,10.06,0.41,2933.33,831.82,2216.67,4.57,3.34,2.94,5.85,4.13,5.85,11.98},2},
{{0.12,0.09,0.13,0.14,0.09,0.12,0.06,0.1,0.07,0,0.1,0.08,0.11,0.09,0.07,0.13,0.1,0.06,0.19,0,0.09,0.09,0.1,0.11,0.08,0.07,0.13,0.12,0.1,0,0,9.92,0.29,2200,673.08,2187.5,4.59,3.58,2.89,5.9,4.35,5.9,11.92},2},
{{0.13,0.09,0.1,0.16,0.1,0.1,0.08,0.11,0.08,0,0.11,0.08,0.08,0.11,0.06,0.16,0.11,0.1,0.13,0,0.07,0.06,0.11,0.11,0.1,0.12,0.12,0.12,0.1,0,0,9.85,0.32,4325,642.86,1441.67,4.53,3.43,2.76,5.79,4.25,5.79,11.74},2},
{{0.15,0.09,0.1,0.15,0.11,0.08,0.12,0.08,0.08,0,0.1,0.07,0.1,0.08,0.09,0.15,0.1,0.13,0.09,0,0.06,0.09,0.09,0.12,0.14,0.1,0.12,0.11,0.11,0,0,9.87,0.22,1675,818.18,1700,4.41,3.33,2.7,5.64,4.14,5.64,11.68},2},
{{0.09,0.12,0.15,0.12,0.11,0.09,0.08,0.1,0.09,0,0.1,0.05,0.15,0.05,0.09,0.14,0.1,0.1,0.12,0,0.06,0.1,0.1,0.1,0.08,0.11,0.14,0.13,0.1,0,0,9.86,0.27,1337.5,689.29,1730,4.35,3.49,2.68,5.69,4.29,5.69,11.69},2},
{{0.12,0.13,0.09,0.12,0.15,0.07,0.08,0.11,0.08,0,0.09,0.05,0.12,0.07,0.12,0.1,0.1,0.16,0.12,0,0.06,0.1,0.11,0.07,0.13,0.14,0.09,0.12,0.09,0,0,10,0.14,1866.67,975,1866.67,4.57,3.33,2.75,5.85,4.03,5.85,11.87},2},
{{0.15,0.11,0.09,0.12,0.1,0.09,0.09,0.1,0.09,0,0.12,0.09,0.1,0.08,0.08,0.1,0.1,0.13,0.11,0,0.09,0.09,0.1,0.11,0.12,0.09,0.07,0.12,0.12,0,0,9.8,0.25,2212.5,804.55,2250,4.73,3.67,3.03,5.95,4.43,5.95,11.88},2},
{{0.15,0.1,0.06,0.14,0.14,0.09,0.08,0.11,0.08,0,0.1,0.06,0.12,0.07,0.11,0.09,0.11,0.13,0.09,0,0.08,0.11,0.09,0.11,0.08,0.14,0.09,0.13,0.06,0,0,9.98,0.18,2616.67,781.82,2233.33,4.68,3.54,2.9,5.98,4.29,5.98,11.95},2},
{{0.13,0.12,0.1,0.09,0.11,0.1,0.11,0.13,0.08,0,0.1,0.1,0.1,0.06,0.08,0.13,0.11,0.15,0.1,0,0.06,0.09,0.09,0.09,0.18,0.1,0.07,0.1,0.14,0,0,9.77,0.21,2966.67,804.17,4450,4.66,3.44,2.8,5.88,4.16,5.88,11.7},2},
{{0.14,0.1,0.08,0.12,0.16,0.13,0.05,0.08,0.08,0,0.08,0.09,0.09,0.07,0.1,0.14,0.1,0.16,0.09,0,0.08,0.1,0.11,0.07,0.13,0.07,0.12,0.13,0.11,0,0,9.91,0.18,1112.5,570,2600,4.47,3.29,2.8,5.7,4.06,5.7,11.71},2},
{{0.15,0.11,0.07,0.13,0.13,0.12,0.06,0.11,0.08,0,0.11,0.08,0.1,0.1,0.09,0.12,0.1,0.1,0.11,0,0.08,0.08,0.12,0.12,0.08,0.06,0.12,0.11,0.12,0,0,9.62,0.34,1570,592.86,1491.67,4.56,3.6,3,5.77,4.4,5.77,11.59},2},
{{0.12,0.15,0.07,0.13,0.13,0.07,0.12,0.09,0.09,0,0.1,0.09,0.08,0.07,0.1,0.13,0.09,0.14,0.09,0,0.09,0.09,0.08,0.1,0.11,0.11,0.13,0.09,0.11,0,0,9.87,0.32,1570,642.86,1800,4.55,3.51,2.9,5.82,4.29,5.82,11.8},2},
{{0.06,0.07,0.12,0.06,0.06,0.04,0.04,0.03,0.05,0,0.04,0.07,0.05,0.04,0.06,0.04,0.08,0.08,0.06,0,0.05,0.05,0.05,0.06,0.04,0.05,0.07,0.06,0.07,0,0,5.5,0.24,1083.33,707.14,1650,2.25,2.77,1.67,5.55,6.11,5.55,6.5},2},
{{0.04,0.12,0.11,0.07,0.14,0.12,0.1,0.1,0.17,0.05,0.07,0.09,0.11,0.11,0.05,0.16,0.14,0.14,0.08,0,0.07,0.09,0.07,0.12,0.1,0.13,0.1,0.14,0.08,0.12,0,8.18,0.52,700,568.75,3800,10.31,7.26,4.13,11.93,8.14,11.93,16.08},0},
{{0.1,0.11,0.12,0.07,0.16,0.07,0.11,0.1,0.06,0.08,0.1,0.1,0.11,0.14,0.09,0.13,0.09,0.07,0.08,0,0.06,0.08,0.09,0.14,0.1,0.14,0.14,0.12,0.11,0.05,0,6.76,-0.29,473.53,508.82,2925,10.23,7.4,3.23,11.94,8.51,11.94,15.12},0},
{{0.1,0.14,0.06,0.07,0.15,0.1,0.15,0.12,0.05,0.04,0.18,0.11,0.1,0.1,0.03,0.11,0.14,0.09,0.03,0,0.11,0.09,0.09,0.05,0.11,0.08,0.12,0.15,0.11,0.1,0,6.45,0.03,603.33,809.09,1220,10.61,7.83,3.89,11.96,8.7,11.96,15.52},0},
{{0.11,0.1,0.13,0.11,0.07,0.07,0.1,0.1,0.12,0.07,0.1,0.12,0.11,0.1,0.08,0.08,0.11,0.12,0.06,0,0.12,0.11,0.11,0.11,0.06,0.06,0.12,0.06,0.12,0.15,0,7.71,0.3,561.76,715.38,1483.33,11.13,8.15,4.81,12.78,8.84,12.78,17.01},0},
{{0.11,0.19,0.1,0.02,0.08,0.09,0.12,0.07,0.09,0.09,0.13,0.07,0.08,0.13,0.07,0.09,0.1,0.12,0.04,0,0.08,0.11,0.07,0.12,0.11,0.17,0.1,0.07,0.1,0.08,0,8.26,-0.19,571.88,715,600,11.59,8.19,3.88,12.94,8.9,12.94,17.18},0},
{{0.1,0.13,0.08,0.08,0.12,0.1,0.11,0.06,0.09,0.06,0.1,0.09,0.08,0.1,0.11,0.11,0.09,0.14,0.1,0,0.13,0.07,0.08,0.13,0.09,0.11,0.09,0.13,0.11,0.08,0,8.39,-0.4,465.79,465.79,2466.67,10.69,7.97,3.88,12.36,8.74,12.36,16.53},0},
{{0.11,0.16,0.06,0.11,0.06,0.11,0.06,0.1,0.11,0.09,0.13,0.11,0.09,0.14,0.1,0.08,0.06,0.08,0.1,0,0.11,0.07,0.12,0.11,0.04,0.1,0.15,0.13,0.09,0.1,0,7.12,-0.07,452.38,447.62,2433.33,11.22,8.14,4.19,12.87,8.99,12.87,16.58},0},
{{0.1,0.12,0.1,0.13,0.06,0.06,0.08,0.14,0.09,0.13,0.15,0.11,0.05,0.1,0.1,0.06,0.06,0.13,0.11,0,0.14,0.04,0.12,0.09,0.12,0.04,0.06,0.15,0.1,0.16,0,8.02,0.59,753.85,1044.44,3725,10.98,8.82,4.95,12.68,9.5,12.68,17.5},0},
{{0.11,0.13,0.13,0.13,0.06,0.1,0.08,0.1,0.09,0.07,0.13,0.09,0.11,0.11,0.07,0.07,0.1,0.1,0.09,0,0.13,0.11,0.12,0.1,0.11,0.07,0.1,0.1,0.08,0.11,0,7.75,-0.56,575,1033.33,2850,10.24,8.42,4.18,12.06,9.14,12.06,16.45},0},
{{0.11,0.1,0.15,0.09,0.07,0.09,0.11,0.1,0.11,0.1,0.11,0.13,0.1,0.06,0.14,0.06,0.13,0.09,0.08,0,0.12,0.1,0.11,0.1,0.11,0.08,0.09,0.1,0.12,0.11,0,7.42,-0.22,471.05,692.86,866.67,10.69,8.1,4.17,12.38,8.81,12.38,16.3},0},
{{0.15,0.12,0.07,0.11,0.1,0.07,0.14,0.06,0.09,0.06,0.1,0.09,0.16,0.07,0.12,0.05,0.12,0.1,0.12,0,0.16,0.11,0.13,0.1,0.09,0.1,0.08,0.12,0.07,0.07,0,7.76,-1.4,544.12,593.75,3075,10.81,8.14,3.82,12.45,8.79,12.45,16.35},0},
{{0.12,0.08,0.09,0.13,0.11,0.17,0.06,0.05,0.1,0.05,0.13,0.09,0.11,0.08,0.11,0.11,0.11,0.07,0.13,0,0.11,0.08,0.12,0.08,0.11,0.12,0.14,0.1,0.1,0.07,0,7.09,-0.6,397.83,568.75,3400,9.67,7.79,3.48,11.48,8.78,11.48,15.17},0},
{{0.06,0.11,0.05,0.17,0.13,0.09,0.13,0.14,0.09,0.04,0.1,0.1,0.12,0.11,0.08,0.12,0.06,0.16,0.1,0,0.08,0.06,0.11,0.11,0.12,0.08,0.1,0.12,0.16,0.08,0,7.58,0.17,763.64,758.33,1625,9.46,7.92,3.84,11.21,8.76,11.21,15.32},0},
{{0.08,0.08,0.11,0.09,0.14,0.08,0.08,0.14,0.14,0.03,0.08,0.09,0.12,0.12,0.07,0.14,0.11,0.09,0.11,0,0.12,0.1,0.1,0.12,0.08,0.09,0.07,0.1,0.11,0.13,0,7.88,0,535.29,492.11,1800,10.46,7.59,4.46,12.22,8.43,12.22,16.27},0},
{{0.13,0.06,0.11,0.13,0.11,0.09,0.11,0.07,0.12,0.08,0.09,0.12,0.09,0.08,0.13,0.09,0.09,0.09,0.12,0,0.11,0.06,0.11,0.11,0.13,0.09,0.08,0.16,0.05,0.11,0,7.93,-0.39,407.14,534.38,2983.33,10.28,8.01,3.75,12.09,8.85,12.09,16.26},0},
{{0.09,0.08,0.11,0.11,0.1,0.1,0.09,0.11,0.14,0.05,0.08,0.11,0.11,0.1,0.12,0.05,0.13,0.13,0.08,0,0.08,0.15,0.11,0.09,0.1,0.11,0.1,0.1,0.09,0.1,0,8.17,-0.47,544.12,519.44,1625,10.72,8.02,3.76,12.42,8.62,12.42,16.35},0},
{{0.11,0.09,0.13,0.09,0.12,0.08,0.11,0.1,0.1,0.06,0.15,0.1,0.11,0.1,0.1,0.12,0.08,0.11,0.03,0,0.13,0.11,0.08,0.07,0.08,0.07,0.11,0.14,0.1,0.14,0,6.14,0.29,556.25,885,3175,10.58,7.45,4.55,12.27,8.56,12.27,15.83},0},
{{0.13,0.04,0.14,0.06,0.1,0.14,0.12,0.06,0.14,0.07,0.1,0.13,0.08,0.09,0.1,0.09,0.09,0.11,0.07,0,0.13,0.17,0.07,0.07,0.08,0.09,0.09,0.13,0.1,0.09,0,7.8,-0.57,477.5,452.38,2100,10.99,8.28,4.12,12.53,9.06,12.53,16.74},0},
{{0.11,0.09,0.18,0.05,0.06,0.16,0.09,0.06,0.09,0.09,0.11,0.08,0.13,0.11,0.1,0.08,0.12,0.12,0.05,0,0.11,0.12,0.08,0.11,0.16,0.06,0.09,0.08,0.12,0.09,0,7.32,-0.57,616.67,711.54,1750,10.54,7.77,3.85,12.13,8.55,12.13,15.95},0},
{{0.13,0.07,0.13,0.11,0.06,0.11,0.1,0.09,0.13,0.04,0.09,0.08,0.08,0.15,0.12,0.12,0.13,0.05,0.11,0,0.04,0.15,0.09,0.11,0.12,0.14,0.08,0.07,0.09,0.14,0,7.21,-0.13,550,614.29,4125,10.74,7.12,3.7,12.45,8.15,12.45,15.77},0},
{{0.13,0.08,0.08,0.12,0.09,0.1,0.08,0.15,0.09,0.05,0.06,0.13,0.06,0.07,0.11,0.12,0.15,0.09,0.08,0,0.12,0.11,0.12,0.09,0.14,0.14,0.05,0.05,0.09,0.11,0,8.83,-0.74,680.77,531.25,1850,10.86,7.7,3.79,12.56,8.45,12.56,16.9},0},
{{0.1,0.08,0.08,0.14,0.09,0.07,0.14,0.15,0.09,0.07,0.05,0.11,0.12,0.08,0.15,0.16,0.08,0.1,0.06,0,0.1,0.13,0.08,0.11,0.12,0.08,0.11,0.07,0.08,0.15,0,7.46,-0.03,540.63,481.25,675,10.54,7.16,4.22,12.28,8.08,12.28,16.02},0},
{{0.09,0.11,0.1,0.06,0.11,0.16,0.08,0.12,0.11,0.07,0.07,0.08,0.11,0.16,0.13,0.09,0.11,0.11,0.05,0,0.08,0.14,0.11,0.09,0.06,0.14,0.09,0.08,0.14,0.09,0,7.41,-0.06,684.62,623.33,3650,10.64,7.41,3.86,12.08,8.26,12.08,15.67},0},
{{0.05,0.12,0.09,0.12,0.13,0.11,0.09,0.12,0.1,0.09,0.06,0.07,0.12,0.07,0.15,0.17,0.1,0.07,0.11,0,0.04,0.1,0.11,0.1,0.13,0.18,0.13,0.07,0.11,0.06,0,7.94,-0.38,596.88,561.76,2816.67,9.91,7.02,2.89,11.68,8.02,11.68,15.11},0},
{{0.08,0.07,0.08,0.12,0.16,0.12,0.11,0.12,0.06,0.07,0.08,0.13,0.08,0.09,0.13,0.12,0.09,0.1,0.1,0,0.09,0.11,0.13,0.12,0.08,0.1,0.14,0.06,0.09,0.1,0,7.78,-0.51,558.82,552.94,950,10.01,7.58,3.57,11.73,8.41,11.73,15.63},0},
{{0.05,0.05,0.04,0.12,0.07,0.09,0.08,0.08,0.06,0.03,0.05,0.07,0.08,0.06,0.07,0.07,0.05,0.05,0.09,0,0.03,0.06,0.06,0.12,0.07,0.07,0.07,0.05,0.09,0.04,0,5.05,-0.08,587.5,533.33,1583.33,6.08,4.84,2.14,11.17,9.13,11.17,9.65},0},
{{0.08,0.06,0.05,0.11,0.13,0.19,0.11,0.09,0.1,0.1,0.12,0.1,0.12,0.1,0.13,0.09,0.14,0.09,0.04,0.08,0.05,0.07,0.08,0.07,0.15,0.19,0.15,0.07,0.1,0.1,0,9.57,1.14,2916.67,1266.67,2233.33,3.3,3.96,2.97,4.21,4.77,4.21,11.3},2},
{{0.04,0.09,0.11,0.11,0.11,0.1,0.11,0.1,0.13,0.12,0.1,0.1,0.1,0.14,0.13,0.13,0.07,0.11,0.05,0.08,0.03,0.07,0.11,0.14,0.14,0.15,0.09,0.09,0.14,0.07,0,9.74,0.94,2550,1092.86,1625,3.62,3.74,2.94,4.44,4.6,4.44,11.37},2},
{{0.04,0.11,0.08,0.13,0.09,0.13,0.08,0.09,0.12,0.15,0.12,0.1,0.12,0.09,0.11,0.1,0.11,0.1,0.07,0.12,0.04,0.06,0.13,0.16,0.12,0.11,0.09,0.11,0.1,0.1,0,9.77,0.97,2162.5,1090,2162.5,3.62,4.15,3.14,4.38,4.9,4.38,11.52},2},
{{0.06,0.06,0.12,0.1,0.1,0.12,0.09,0.1,0.15,0.12,0.12,0.1,0.09,0.1,0.1,0.12,0.08,0.08,0.12,0.11,0.07,0.12,0.13,0.08,0.09,0.11,0.1,0.1,0.11,0.12,0,9.93,0.99,1650,2175,1242.86,3.6,4.19,3.54,4.42,4.92,4.42,11.83},2},
{{0.07,0.06,0.1,0.15,0.08,0.13,0.08,0.07,0.13,0.15,0.12,0.07,0.12,0.11,0.11,0.12,0.08,0.1,0.1,0.1,0.04,0.08,0.13,0.12,0.13,0.09,0.12,0.1,0.09,0.11,0,9.95,1.09,3875,1770,2212.5,3.73,4.07,3.36,4.47,4.86,4.47,11.82},2},
{{0.06,0.07,0.12,0.14,0.1,0.08,0.13,0.09,0.1,0.13,0.13,0.08,0.09,0.13,0.09,0.12,0.07,0.12,0.13,0.06,0.05,0.09,0.11,0.11,0.09,0.14,0.1,0.13,0.1,0.11,0,9.84,1.16,1083.33,1760,2583.33,3.67,4.12,3.34,4.49,4.86,4.49,11.73},2},
{{0.06,0.08,0.11,0.13,0.11,0.13,0.09,0.12,0.1,0.1,0.1,0.1,0.1,0.13,0.11,0.09,0.13,0.09,0.1,0.08,0.03,0.1,0.13,0.12,0.1,0.14,0.13,0.1,0.08,0.11,0,9.93,1.03,1766.67,1433.33,3200,3.46,3.94,3.16,4.24,4.7,4.24,11.6},2},
{{0.09,0.06,0.12,0.12,0.1,0.12,0.1,0.08,0.12,0.12,0.11,0.1,0.09,0.09,0.15,0.13,0.1,0.13,0.06,0.07,0.07,0.07,0.08,0.14,0.15,0.1,0.11,0.1,0.09,0.12,0,9.85,0.97,2800,2237.5,1675,3.68,3.87,3.3,4.51,4.66,4.51,11.69},2},
{{0.09,0.06,0.1,0.09,0.14,0.13,0.1,0.1,0.09,0.12,0.15,0.11,0.07,0.08,0.11,0.14,0.1,0.1,0.05,0.11,0.08,0.08,0.1,0.09,0.11,0.11,0.14,0.1,0.1,0.11,0,9.59,0.95,2883.33,1416.67,1637.5,3.67,4.22,3.43,4.6,4.99,4.6,11.58},2},
{{0.09,0.07,0.13,0.11,0.09,0.07,0.18,0.1,0.09,0.09,0.1,0.08,0.1,0.13,0.09,0.16,0.11,0.08,0.06,0.11,0.08,0.14,0.1,0.12,0.09,0.09,0.1,0.09,0.08,0.14,0,10.11,0.76,1100,2175,2900,3.57,3.81,3.78,4.58,4.59,4.58,12.07},2},
{{0.07,0.1,0.19,0.1,0.09,0.09,0.09,0.11,0.12,0.07,0.08,0.08,0.14,0.13,0.11,0.08,0.11,0.07,0.18,0.05,0.09,0.16,0.1,0.13,0.11,0.05,0.1,0.11,0.07,0.11,0,10.14,0.38,1816.67,3225,1510,3.95,3.7,3.57,4.86,4.35,4.86,12.14},2},
{{0.15,0.21,0.08,0.03,0.08,0.06,0.12,0.12,0.08,0.1,0.02,0.04,0.09,0.1,0.12,0.07,0.15,0.12,0.24,0.08,0.16,0.17,0.1,0.12,0.08,0.05,0.06,0.1,0.08,0.11,0,11.91,-0.18,1675,1466.67,1100,4.77,3.13,3.87,5.88,3.64,5.88,14.07},2},
{{0.28,0.18,0.09,0.05,0.05,0.05,0.08,0.07,0.1,0.08,0.03,0.14,0.11,0.07,0.06,0.06,0.08,0.19,0.2,0.1,0.31,0.15,0.04,0.1,0.07,0.06,0.04,0.08,0.08,0.07,0,11.33,-1.24,1450,1275,2750,5.43,3.91,4.2,6.31,4.4,6.31,14.02},2},
{{0.24,0.25,0.12,0.02,0.05,0.01,0.07,0.09,0.07,0.1,0.01,0.12,0.24,0.03,0.03,0.06,0.07,0.08,0.2,0.19,0.25,0.27,0.04,0.04,0.09,0.07,0.04,0.02,0.1,0.09,0,11.07,-1.02,3150,2050,2112.5,5.62,4.17,4.16,6.46,4.5,6.46,13.96},2},
{{0.16,0.23,0.08,0.05,0.06,0.1,0.09,0.11,0.09,0.06,0.08,0.22,0.09,0.05,0.05,0.08,0.13,0.13,0.06,0.13,0.13,0.15,0.13,0.09,0.07,0.06,0.14,0.07,0.12,0.07,0,9.82,0.04,3325,1125,2225,4.62,4.52,3.59,5.64,4.98,5.64,12.3},2},
{{0.06,0.09,0.14,0.14,0.07,0.1,0.13,0.1,0.12,0.08,0.06,0.07,0.11,0.09,0.08,0.19,0.1,0.13,0.05,0.14,0.18,0.09,0.06,0.09,0.12,0.06,0.08,0.12,0.14,0.08,0,10.65,0.42,1650,1816.67,1637.5,3.59,3.57,3.78,4.43,4.33,4.43,12.49},2},
{{0.15,0.2,0.11,0.09,0.04,0.05,0.11,0.07,0.1,0.11,0.03,0.05,0.11,0.12,0.09,0.11,0.11,0.12,0.08,0.2,0.3,0.09,0.06,0.08,0.08,0.07,0.1,0.08,0.09,0.07,0,11.54,-0.91,3975,2250,4500,4.71,3.53,3.73,5.58,4.13,5.58,13.64},2},
{{0.12,0.13,0.08,0.08,0.12,0.11,0.11,0.1,0.07,0.09,0.08,0.08,0.19,0.07,0.12,0.07,0.1,0.08,0.1,0.14,0.17,0.08,0.1,0.1,0.09,0.09,0.1,0.11,0.1,0.09,0,10.24,0.34,2900,1450,2175,4.15,4.19,3.8,5.22,4.89,5.22,12.45},2},
{{0.09,0.1,0.09,0.12,0.13,0.09,0.07,0.14,0.07,0.13,0.1,0.16,0.08,0.13,0.08,0.08,0.08,0.11,0.11,0.11,0.03,0.11,0.13,0.12,0.13,0.09,0.1,0.1,0.11,0.11,0,9.78,0.99,3200,1720,2866.67,3.77,4.32,3.33,4.62,4.97,4.62,11.74},2},
{{0.08,0.07,0.12,0.12,0.1,0.08,0.1,0.11,0.12,0.12,0.09,0.14,0.1,0.12,0.09,0.07,0.15,0.11,0.06,0.09,0.06,0.09,0.09,0.1,0.13,0.11,0.14,0.13,0.09,0.08,0,9.73,0.92,3325,1770,1770,3.67,4.09,3.16,4.49,4.75,4.49,11.58},2},
{{0.1,0.06,0.12,0.14,0.09,0.08,0.11,0.1,0.1,0.13,0.13,0.09,0.11,0.12,0.09,0.08,0.09,0.09,0.1,0.12,0.08,0.1,0.06,0.1,0.13,0.13,0.12,0.13,0.06,0.11,0,9.87,0.9,2325,1258.33,2516.67,3.81,4.24,3.27,4.71,4.95,4.71,11.88},2},
{{0.07,0.09,0.11,0.13,0.1,0.1,0.11,0.09,0.09,0.14,0.14,0.09,0.09,0.11,0.11,0.11,0.06,0.12,0.08,0.13,0.07,0.1,0.06,0.1,0.11,0.16,0.1,0.11,0.1,0.12,0,9.87,1.1,2750,1071.43,1875,3.69,4.29,3.4,4.5,5.08,4.5,11.84},2},
{{0.09,0.06,0.13,0.13,0.11,0.1,0.08,0.1,0.12,0.11,0.08,0.15,0.07,0.14,0.1,0.09,0.11,0.14,0.1,0.05,0.07,0.09,0.11,0.11,0.12,0.08,0.13,0.14,0.1,0.09,0,9.89,0.99,4375,1250,1816.67,3.87,3.94,3.35,4.71,4.62,4.71,11.8},2},
{{0.13,0.04,0.15,0.07,0.09,0.15,0.13,0.09,0.09,0.1,0.12,0.13,0.11,0.07,0.12,0.08,0.1,0.05,0.07,0.18,0.11,0.11,0.09,0.07,0.09,0.11,0.12,0.11,0.1,0.12,0,9.86,0.89,1600,918.75,1225,3.77,4.55,3.8,4.83,5.34,4.83,12.1},2},
{{0.11,0.07,0.12,0.1,0.1,0.11,0.11,0.08,0.12,0.1,0.13,0.09,0.11,0.09,0.09,0.06,0.12,0.1,0.09,0.15,0.11,0.09,0.11,0.11,0.06,0.1,0.11,0.13,0.09,0.12,0,10.04,0.92,1737.5,2816.67,1850,3.83,4.45,3.77,4.79,5.16,4.79,12.23},2},
{{0.09,0.08,0.12,0.11,0.1,0.11,0.08,0.13,0.11,0.09,0.14,0.1,0.11,0.1,0.1,0.07,0.1,0.11,0.11,0.08,0.06,0.1,0.12,0.09,0.1,0.16,0.1,0.08,0.09,0.12,0,9.59,1.02,1912.5,1740,2900,3.69,4.3,3.53,4.58,5.07,4.58,11.67},2},
{{0.09,0.09,0.11,0.09,0.12,0.13,0.08,0.13,0.1,0.08,0.13,0.09,0.1,0.1,0.1,0.11,0.12,0.05,0.08,0.13,0.07,0.12,0.11,0.11,0.11,0.09,0.09,0.08,0.13,0.11,0,9.84,0.97,2516.67,1221.43,3775,3.67,4.16,3.76,4.54,4.99,4.54,11.94},2},
{{0.09,0.07,0.09,0.09,0.14,0.13,0.11,0.12,0.1,0.09,0.15,0.1,0.04,0.11,0.1,0.15,0.11,0.07,0.09,0.12,0.09,0.09,0.09,0.11,0.08,0.08,0.11,0.16,0.12,0.11,0,9.84,1.14,1800,2283.33,1235.71,3.51,4.15,3.66,4.42,4.91,4.42,11.79},2},
{{0.1,0.07,0.08,0.13,0.1,0.14,0.13,0.08,0.13,0.07,0.13,0.09,0.07,0.12,0.11,0.1,0.1,0.12,0.07,0.11,0.08,0.07,0.08,0.12,0.12,0.11,0.09,0.11,0.13,0.11,0,9.9,1.06,1650,2200,4375,3.55,4.12,3.57,4.54,4.87,4.54,11.83},2},
{{0.11,0.07,0.07,0.1,0.14,0.13,0.09,0.13,0.1,0.08,0.1,0.11,0.07,0.13,0.13,0.12,0.09,0.11,0.09,0.07,0.09,0.07,0.12,0.09,0.13,0.09,0.09,0.07,0.17,0.1,0,9.81,1.06,1466.67,2933.33,1833.33,3.63,3.92,3.67,4.59,4.68,4.59,11.82},2},
{{0.09,0.07,0.1,0.12,0.12,0.12,0.13,0.12,0.08,0.08,0.13,0.1,0.08,0.09,0.15,0.13,0.11,0.08,0.09,0.06,0.11,0.04,0.14,0.08,0.11,0.09,0.09,0.16,0.11,0.1,0,9.58,1.01,2166.67,1458.33,2533.33,3.54,3.89,3.56,4.45,4.68,4.45,11.53},2},
{{0.05,0.1,0.08,0.07,0.12,0.09,0.12,0.09,0.06,0.07,0.1,0.1,0.05,0.1,0.1,0.11,0.07,0.09,0.07,0.07,0.05,0.06,0.08,0.1,0.08,0.11,0.09,0.08,0.11,0.09,0,8.11,1.16,2200,1850,1625,2.9,3.51,2.99,4.42,4.95,4.42,9.75},2},
{{0.09,0.09,0.13,0.09,0.14,0.11,0.1,0.1,0.1,0.07,0.13,0.11,0.1,0.07,0.08,0.13,0.12,0.1,0.11,0,0.07,0.09,0.12,0.07,0.12,0.12,0.12,0.11,0.13,0.08,0,7.36,0.06,667.86,522.22,1787.5,9.6,7.8,3.58,11.4,8.68,11.4,15.29},0},
{{0.12,0.14,0.1,0.05,0.08,0.13,0.12,0.07,0.07,0.09,0.1,0.13,0.11,0.07,0.08,0.13,0.12,0.06,0.08,0,0.09,0.06,0.12,0.11,0.11,0.12,0.08,0.13,0.12,0.07,0,7.38,-0.22,678.57,528.57,1783.33,10.6,7.79,3.51,12.14,8.7,12.14,15.88},0},
{{0.08,0.12,0.15,0.06,0.06,0.14,0.11,0.07,0.1,0.09,0.11,0.16,0.12,0.07,0.12,0.06,0.13,0.08,0.07,0,0.06,0.07,0.12,0.14,0.07,0.13,0.08,0.14,0.14,0.09,0,6.24,0.34,584.38,860,3350,10.16,7.69,3.74,11.91,8.61,11.91,15.3},0},
{{0.11,0.16,0.1,0.08,0.08,0.08,0.07,0.06,0.16,0.11,0.06,0.14,0.11,0.08,0.1,0.09,0.1,0.09,0.13,0,0.12,0.11,0.1,0.1,0.09,0.1,0.13,0.09,0.11,0.08,0,7.99,-0.4,633.33,988.89,1916.67,10.68,8.04,3.93,12.43,8.71,12.43,16.39},0},
{{0.11,0.16,0.12,0.07,0.05,0.12,0.14,0.03,0.1,0.09,0.09,0.13,0.1,0.09,0.09,0.08,0.14,0.13,0.05,0,0.12,0.07,0.08,0.14,0.11,0.1,0.1,0.08,0.13,0.1,0,7.56,-0.17,590.63,575,1625,10.14,7.85,3.77,11.76,8.63,11.76,15.81},0},
{{0.11,0.08,0.1,0.1,0.12,0.12,0.08,0.09,0.09,0.1,0.1,0.13,0.08,0.13,0.09,0.1,0.11,0.1,0.09,0,0.09,0.06,0.09,0.08,0.07,0.16,0.12,0.13,0.13,0.09,0,7.36,0.3,661.54,476.32,3250,10.22,7.75,3.6,11.94,8.54,11.94,15.43},0},
{{0.09,0.13,0.13,0.06,0.1,0.09,0.09,0.16,0.1,0.06,0.03,0.2,0.16,0.11,0.07,0.09,0.07,0.09,0.11,0,0.09,0.06,0.09,0.07,0.13,0.1,0.12,0.09,0.15,0.13,0,6.72,0.89,537.5,563.33,2333.33,10.06,7.61,4.3,11.72,8.42,11.72,15.32},0},
{{0.11,0.14,0.08,0.1,0.05,0.08,0.08,0.08,0.19,0.08,0.1,0.07,0.13,0.09,0.13,0.09,0.07,0.1,0.03,0,0.15,0.13,0.07,0.13,0.08,0.07,0.13,0.06,0.1,0.11,0,7.98,-0.64,639.29,679.17,2233.33,11,8.1,4.03,12.69,8.83,12.69,16.6},0},
{{0.11,0.12,0.1,0.11,0.11,0.08,0.1,0.11,0.11,0.07,0.14,0.1,0.12,0.09,0.1,0.08,0.08,0.07,0.08,0,0.19,0.13,0.12,0.09,0.06,0.09,0.09,0.11,0.1,0.05,0,7.24,-1.46,561.76,863.64,2700,9.9,8.18,3.67,11.69,8.9,11.69,15.59},0},
{{0.1,0.14,0.1,0.08,0.11,0.1,0.11,0.1,0.08,0.09,0.14,0.09,0.08,0.12,0.1,0.1,0.1,0.07,0.07,0,0.12,0.09,0.1,0.09,0.11,0.11,0.07,0.1,0.11,0.13,0,7.08,0.08,566.67,768.18,950,10.03,7.79,4.07,11.78,8.7,11.78,15.48},0},
{{0.11,0.1,0.14,0.11,0.07,0.07,0.09,0.13,0.12,0.08,0.11,0.1,0.09,0.1,0.09,0.13,0.09,0.11,0.1,0,0.11,0.12,0.14,0.1,0.12,0.09,0.08,0.06,0.08,0.12,0,7.72,-0.52,653.33,671.43,2850,10.19,7.75,4.06,12.02,8.57,12.02,16.1},0},
{{0.13,0.07,0.13,0.07,0.09,0.11,0.12,0.12,0.08,0.05,0.11,0.09,0.1,0.08,0.07,0.12,0.12,0.1,0.1,0,0.16,0.06,0.12,0.07,0.09,0.11,0.1,0.11,0.13,0.07,0,8.09,-0.5,536.11,571.88,2500,10.4,7.87,3.71,12.03,8.73,12.03,16.17},0},
{{0.09,0.1,0.1,0.12,0.12,0.09,0.08,0.14,0.08,0.09,0.1,0.08,0.1,0.16,0.09,0.12,0.09,0.11,0.08,0,0.13,0.13,0.1,0.12,0.12,0.13,0.08,0.06,0.07,0.1,0,7.01,-0.9,480,467.5,2400,9.81,7.39,3.45,11.61,8.38,11.61,15.11},0},
{{0.08,0.1,0.1,0.13,0.13,0.11,0.12,0.07,0.1,0.08,0.12,0.06,0.14,0.07,0.1,0.12,0.1,0.14,0.07,0,0.05,0.05,0.1,0.12,0.09,0.11,0.15,0.15,0.13,0.08,0,7.05,0.48,465.79,571.88,2100,9.47,7.6,3.36,11.24,8.54,11.24,14.8},0},
{{0.1,0.08,0.11,0.12,0.14,0.07,0.11,0.12,0.08,0.05,0.07,0.06,0.13,0.15,0.09,0.08,0.14,0.09,0.08,0,0.1,0.09,0.11,0.1,0.09,0.12,0.1,0.13,0.1,0.08,0,8.11,-0.49,844.44,610,1283.33,9.74,7.6,3.39,11.61,8.33,11.61,15.35},0},
{{0.11,0.09,0.07,0.12,0.11,0.08,0.11,0.14,0.12,0.08,0.11,0.07,0.11,0.09,0.13,0.08,0.08,0.15,0.15,0,0.12,0.12,0.1,0.12,0.07,0.1,0.1,0.09,0.06,0.14,0,8,-0.23,630,525,3475,10.59,8.13,4.06,12.27,8.85,12.27,16.4},0},
{{0.1,0.08,0.12,0.1,0.09,0.1,0.11,0.1,0.12,0.08,0.06,0.08,0.12,0.1,0.12,0.1,0.15,0.1,0.11,0,0.12,0.13,0.09,0.1,0.11,0.09,0.1,0.11,0.09,0.09,0,7.8,-0.6,438.1,425,1325,10.36,7.3,3.78,12.18,8.13,12.18,15.81},0},
{{0.13,0.08,0.11,0.11,0.07,0.12,0.09,0.1,0.11,0.08,0.12,0.05,0.08,0.11,0.15,0.13,0.1,0.04,0.13,0,0.13,0.12,0.1,0.07,0.13,0.06,0.13,0.1,0.09,0.09,0,7.38,-0.73,678.57,633.33,1733.33,10.5,7.52,3.75,12.27,8.53,12.27,15.88},0},
{{0.08,0.08,0.1,0.12,0.09,0.16,0.13,0.08,0.09,0.1,0.15,0.07,0.07,0.07,0.13,0.12,0.1,0.13,0.11,0,0.05,0.15,0.09,0.09,0.15,0.11,0.09,0.08,0.09,0.11,0,7.31,-0.21,623.33,567.65,3450,10.09,7.85,3.62,11.81,8.84,11.81,15.7},0},
{{0.07,0.07,0.09,0.15,0.15,0.11,0.15,0.09,0.03,0.08,0.13,0.12,0.08,0.12,0.07,0.12,0.11,0.1,0.09,0,0.05,0.09,0.15,0.13,0.12,0.12,0.1,0.1,0.06,0.11,0,6.93,-0.35,1027.78,613.33,3066.67,9.21,7.76,3.25,11.1,8.61,11.1,14.66},0},
{{0.09,0.1,0.1,0.12,0.14,0.08,0.11,0.1,0.08,0.08,0.1,0.1,0.09,0.11,0.14,0.08,0.07,0.1,0.12,0,0.07,0.08,0.1,0.13,0.12,0.11,0.08,0.1,0.11,0.11,0,7.42,0.09,596.43,508.33,4175,9.54,7.85,3.63,11.38,8.64,11.38,15.25},0},
{{0.12,0.11,0.09,0.1,0.12,0.11,0.09,0.08,0.09,0.09,0.08,0.08,0.1,0.14,0.13,0.07,0.08,0.11,0.13,0,0.13,0.08,0.09,0.11,0.11,0.08,0.12,0.14,0.09,0.08,0,8.09,-0.55,428.57,454.76,3925,9.8,7.94,3.48,11.65,8.59,11.65,15.54},0},
{{0.1,0.08,0.09,0.07,0.11,0.06,0.07,0.16,0.14,0.08,0.09,0.12,0.08,0.12,0.09,0.13,0.13,0.08,0.09,0,0.08,0.12,0.08,0.13,0.09,0.05,0.09,0.14,0.06,0.15,0,7.21,0.85,488.24,502.94,1100,11.4,7.55,4.59,13,8.48,13,16.6},0},
{{0.1,0.08,0.08,0.1,0.11,0.14,0.08,0.13,0.14,0.06,0.09,0.11,0.12,0.1,0.08,0.09,0.09,0.1,0.16,0,0.06,0.11,0.1,0.13,0.1,0.11,0.12,0.09,0.1,0.11,0,7.88,0.09,606.67,470,1300,10.42,8.02,3.64,12.07,8.74,12.07,16.07},0},
{{0.1,0.09,0.07,0.1,0.1,0.13,0.11,0.11,0.1,0.1,0.1,0.11,0.07,0.09,0.14,0.1,0.07,0.12,0.1,0,0.1,0.12,0.07,0.1,0.07,0.12,0.1,0.1,0.1,0.15,0,7.96,0.39,711.54,484.21,3875,10.54,8.01,4.14,12.18,8.75,12.18,16.36},0},
{{0.11,0.08,0.09,0.13,0.15,0.08,0.08,0.11,0.09,0.1,0.1,0.12,0.08,0.11,0.13,0.13,0.09,0.11,0.11,0,0.1,0.14,0.07,0.11,0.09,0.1,0.11,0.11,0.08,0.12,0,6.89,-0.16,522.22,570.59,1500,9.66,7.44,3.81,11.54,8.41,11.54,15.1},0},
{{0.09,0.09,0.09,0.15,0.09,0.11,0.12,0.09,0.11,0.08,0.12,0.1,0.09,0.11,0.08,0.1,0.1,0.11,0.13,0,0.09,0.12,0.12,0.08,0.12,0.11,0.09,0.09,0.09,0.12,0,7.51,-0.3,615.38,436.11,1475,9.85,8.16,3.76,11.67,8.95,11.67,15.79},0},
{{0.03,0.02,0.04,0.06,0.05,0.05,0.04,0.03,0.03,0,0.04,0.04,0.05,0.05,0.02,0.03,0.03,0.03,0.04,0,0.03,0.06,0.05,0.01,0.03,0.04,0.04,0.05,0.05,0.01,0,2.38,-0.21,1500,421.43,675,2.97,2.7,1.17,10.49,10.03,10.49,4.97},0},
{{0.06,0.06,0.08,0.1,0.07,0.11,0.11,0.15,0.15,0.13,0.1,0.14,0.09,0.13,0.12,0.06,0.11,0.09,0.08,0.1,0.09,0.09,0.07,0.14,0.11,0.09,0.13,0.1,0.1,0.11,0,8.81,2.69,2150,1680,1975,1.69,2.96,1.9,2.23,3.84,2.23,9.91},5},
{{0.06,0.09,0.11,0.1,0.09,0.11,0.11,0.1,0.12,0.13,0.09,0.08,0.14,0.08,0.12,0.09,0.06,0.12,0.12,0.13,0.11,0.12,0.08,0.12,0.08,0.11,0.11,0.1,0.11,0.08,0,9.36,2.66,875,1925,1866.67,1.6,2.91,2.18,2.24,3.85,2.24,10.46},5},
{{0.15,0.05,0.09,0.1,0.13,0.12,0.11,0.07,0.11,0.09,0.1,0.12,0.09,0.08,0.14,0.09,0.1,0.09,0.1,0.1,0.13,0.14,0.09,0.1,0.11,0.07,0.09,0.1,0.1,0.1,0,9.08,2.39,2000,1625,2675,1.37,2.86,2.09,1.83,3.78,1.83,10.1},5},
{{0.09,0.13,0.15,0.11,0.12,0.06,0.07,0.09,0.11,0.09,0.12,0.07,0.07,0.09,0.06,0.15,0.13,0.11,0.1,0.12,0.13,0.1,0.11,0.11,0.11,0.11,0.09,0.08,0.08,0.1,0,9.27,2.5,1825,2100,3200,1.34,3.02,2.04,1.9,4.08,1.9,10.26},5},
{{0.14,0.13,0.09,0.12,0.1,0.12,0.11,0.11,0.05,0.06,0.1,0.1,0.1,0.09,0.1,0.12,0.08,0.1,0.16,0.08,0.07,0.1,0.08,0.11,0.09,0.16,0.07,0.13,0.1,0.1,0,9.12,2.93,1733.33,1933.33,2600,1.34,2.77,2.17,1.87,3.64,1.87,10.2},5},
{{0.08,0.08,0.1,0.05,0.04,0.09,0.08,0.06,0.05,0.07,0.07,0.08,0.08,0.09,0.06,0.08,0.1,0.06,0.03,0.07,0.05,0.04,0.11,0.03,0.07,0.04,0.09,0.06,0.11,0.09,0,5.82,2.11,2300,1766.67,1180,0.94,2.72,1.41,1.89,4.62,1.89,6.7},5},
{{0.1,0.13,0.11,0.11,0.1,0.1,0.11,0.08,0.1,0.08,0.07,0.09,0.12,0.12,0.09,0.13,0.12,0.1,0.09,0.1,0.1,0.08,0.12,0.1,0.12,0.08,0.1,0.09,0.14,0.1,0,8.94,0.86,3675,2425,1156.25,4.41,2.74,1.89,5.22,3.47,5.22,10.48},1},
{{0.11,0.09,0.11,0.09,0.09,0.12,0.11,0.13,0.1,0.06,0.09,0.08,0.12,0.09,0.12,0.12,0.11,0.06,0.14,0.09,0.11,0.09,0.08,0.1,0.08,0.11,0.09,0.15,0.09,0.1,0,8.96,0.97,1580,1700,2450,4.57,2.95,2.05,5.29,3.71,5.29,10.59},1},
{{0.08,0.09,0.14,0.1,0.09,0.11,0.13,0.11,0.08,0.1,0.1,0.1,0.1,0.09,0.09,0.12,0.11,0.11,0.11,0.09,0.1,0.11,0.13,0.09,0.08,0.11,0.11,0.1,0.1,0.1,0,8.91,0.76,1558.33,2916.67,2533.33,4.62,2.92,1.96,5.36,3.66,5.36,10.54},1},
{{0.12,0.09,0.09,0.09,0.11,0.1,0.11,0.09,0.1,0.11,0.12,0.08,0.08,0.14,0.09,0.1,0.12,0.09,0.08,0.12,0.1,0.1,0.13,0.12,0.09,0.08,0.12,0.08,0.08,0.11,0,8.84,0.71,1116.67,985.71,4100,4.77,2.95,2.03,5.61,3.71,5.61,10.57},1},
{{0.11,0.12,0.1,0.09,0.09,0.07,0.11,0.09,0.13,0.12,0.1,0.13,0.06,0.11,0.13,0.08,0.08,0.12,0.09,0.11,0.11,0.1,0.08,0.11,0.14,0.13,0.1,0.09,0.08,0.1,0,8.86,0.68,1075,1190,2166.67,4.67,3.13,1.93,5.5,3.9,5.5,10.51},1},
{{0.06,0.06,0.02,0.09,0.08,0.05,0.05,0.05,0.07,0.09,0.08,0.09,0.08,0.04,0.05,0.03,0.03,0.08,0.07,0.05,0.05,0.07,0.06,0.03,0.08,0.05,0.06,0.05,0.08,0.07,0,5.23,0.73,683.33,1060,2625,3.02,2.44,1.27,5.93,5.58,5.93,6.39},1},
{{0.04,0.08,0.08,0.08,0.06,0.1,0.12,0.1,0.16,0.19,0.11,0.1,0.1,0.13,0.14,0.07,0.08,0.11,0.06,0.12,0.08,0.09,0.1,0.1,0.11,0.08,0.1,0.12,0.12,0.11,0,8.87,2.71,3725,2733.33,2466.67,2.23,2.81,2.14,2.76,3.78,2.76,10.17},5},
{{0.08,0.05,0.1,0.12,0.16,0.1,0.1,0.09,0.09,0.13,0.1,0.13,0.08,0.12,0.08,0.07,0.12,0.07,0.12,0.13,0.11,0.13,0.11,0.12,0.12,0.09,0.1,0.09,0.07,0.09,0,9.06,2.23,1900,1050,1175,1.86,3.06,1.97,2.39,3.91,2.39,10.09},5},
{{0.09,0.09,0.1,0.16,0.09,0.15,0.08,0.08,0.1,0.08,0.09,0.07,0.11,0.09,0.11,0.14,0.11,0.11,0.1,0.09,0.11,0.09,0.11,0.05,0.1,0.11,0.11,0.13,0.1,0.11,0,9.22,2.59,1975,883.33,1300,1.66,2.66,2.1,2.22,3.67,2.22,10.28},5},
{{0.12,0.11,0.09,0.08,0.08,0.12,0.1,0.15,0.11,0.06,0.1,0.12,0.1,0.11,0.12,0.07,0.12,0.1,0.09,0.09,0.1,0.06,0.1,0.1,0.07,0.13,0.12,0.12,0.11,0.11,0,8.84,2.67,2683.33,3025,2750,1.65,2.78,2.02,2.08,3.65,2.08,9.98},5},
{{0.14,0.09,0.08,0.11,0.14,0.07,0.09,0.1,0.1,0.12,0.09,0.12,0.1,0.08,0.08,0.14,0.11,0.09,0.13,0.08,0.09,0.08,0.1,0.1,0.14,0.1,0.12,0.1,0.09,0.11,0,9.15,2.65,1550,1316.67,1766.67,1.8,2.89,2.01,2.32,3.82,2.32,10.24},5},
{{0.12,0.15,0.12,0.07,0.11,0.13,0.08,0.1,0.07,0.06,0.13,0.08,0.1,0.07,0.08,0.13,0.06,0.13,0.12,0.1,0.12,0.12,0.07,0.1,0.14,0.08,0.08,0.09,0.14,0.08,0,9.08,2.26,3825,4150,3800,1.58,3.21,1.93,2.23,4.14,2.23,10.07},5},
{{0.05,0.07,0.01,0.02,0.02,0.01,0.02,0.04,0.02,0.01,0.02,0.02,0.04,0.02,0.01,0.01,0.06,0.03,0.01,0.03,0.03,0.07,0.02,0.03,0.01,0.02,0.01,0.02,0.02,0.03,0,2.15,0.5,625,683.33,383.33,0.26,1.67,0.55,1.57,7.88,1.57,2.34},5},
{{0.03,0.03,0.08,0.07,0.09,0.07,0.11,0.15,0.17,0.22,0.08,0.1,0.14,0.11,0.09,0.1,0.1,0.11,0.1,0.1,0.07,0.14,0.11,0.11,0.09,0.12,0.13,0.1,0.08,0.08,0,9.35,2.57,3175,1680,1225,2.48,3.2,2.42,3.14,3.97,3.14,10.48},1},
{{0.02,0.07,0.07,0.08,0.09,0.12,0.15,0.13,0.15,0.14,0.08,0.1,0.13,0.1,0.11,0.13,0.07,0.1,0.11,0.1,0.12,0.08,0.13,0.12,0.08,0.09,0.11,0.1,0.1,0.09,0,9.45,2.44,1800,1235.71,1250,2.03,3.25,2.75,2.61,4.09,2.61,10.54},1},
{{0.06,0.14,0.08,0.09,0.11,0.12,0.13,0.08,0.1,0.12,0.09,0.11,0.1,0.07,0.11,0.12,0.12,0.11,0.09,0.1,0.11,0.07,0.1,0.11,0.12,0.11,0.08,0.11,0.11,0.11,0,9.52,2.69,2150,875,2000,1.91,3.25,2.74,2.41,4.19,2.41,10.64},1},
{{0.16,0.12,0.13,0.12,0.12,0.08,0.09,0.08,0.09,0.04,0.11,0.11,0.1,0.11,0.1,0.08,0.11,0.08,0.13,0.1,0.08,0.13,0.08,0.09,0.11,0.08,0.11,0.12,0.12,0.12,0,9.29,2.78,625,988.89,1093.75,1.75,3.48,2.86,2.23,4.35,2.23,10.46},1},
{{0.17,0.11,0.13,0.15,0.09,0.12,0.06,0.09,0.05,0.06,0.13,0.11,0.08,0.08,0.08,0.1,0.08,0.12,0.11,0.12,0.12,0.11,0.12,0.08,0.11,0.11,0.08,0.07,0.1,0.13,0,9.5,2.57,3900,1307.14,1162.5,1.72,3.73,2.87,2.2,4.57,2.2,10.61},1},
{{0.14,0.13,0.1,0.08,0.1,0.08,0.07,0.06,0.05,0.02,0.1,0.04,0.07,0.12,0.09,0.1,0.1,0.08,0.06,0.08,0.07,0.09,0.06,0.08,0.1,0.08,0.09,0.09,0.09,0.08,0,7.52,2.35,1083.33,900,1625,1.41,2.69,2.25,2.22,4.51,2.22,8.48},1},
{{0.11,0.12,0.12,0.13,0.13,0.1,0.08,0.09,0.05,0,0.11,0.13,0.08,0.09,0.09,0.1,0.07,0.15,0.07,0,0.1,0.1,0.08,0.12,0.11,0.1,0.09,0.14,0.09,0,0,9.13,2.8,1733.33,2800,4175,1.25,3.25,1.99,1.76,4.14,1.76,10.22},5},
{{0.08,0.16,0.11,0.1,0.1,0.09,0.13,0.09,0.1,0,0.09,0.11,0.09,0.09,0.12,0.1,0.09,0.09,0.13,0,0.1,0.16,0.13,0.11,0.07,0.1,0.08,0.09,0.09,0,0,9.43,2.54,1925,1900,1200,1.25,3.01,2.14,1.89,3.94,1.89,10.38},5},
{{0.12,0.11,0.09,0.08,0.12,0.1,0.14,0.1,0.07,0,0.1,0.11,0.1,0.12,0.08,0.12,0.11,0.09,0.08,0,0.11,0.1,0.09,0.11,0.12,0.07,0.1,0.11,0.12,0,0,9.1,2.74,1587.5,2883.33,1225,1.36,2.95,2.02,1.97,3.89,1.97,10.16},5},
{{0.09,0.1,0.1,0.06,0.11,0.1,0.08,0.11,0.15,0,0.09,0.06,0.15,0.1,0.1,0.1,0.13,0.11,0.1,0,0.08,0.11,0.08,0.11,0.11,0.11,0.14,0.1,0.09,0,0,9.3,2.97,3350,2975,3275,1.31,2.7,1.99,1.72,3.72,1.72,10.39},5},
{{0.07,0.07,0.09,0.1,0.1,0.11,0.12,0.09,0.16,0,0.11,0.1,0.08,0.12,0.1,0.13,0.13,0.07,0.1,0,0.11,0.07,0.12,0.09,0.12,0.11,0.1,0.07,0.12,0,0,9,2.84,3825,1275,1537.5,1.29,2.9,2.12,1.85,3.85,1.85,10.11},5},
{{0.1,0.06,0.1,0.08,0.07,0.05,0.09,0.12,0.08,0,0.1,0.08,0.1,0.08,0.07,0.08,0.08,0.1,0.12,0,0.1,0.06,0.09,0.06,0.07,0.12,0.09,0.1,0.09,0,0,7.84,2.56,1383.33,1416.67,3050,1.24,2.92,1.81,2.05,4.18,2.05,8.83},5},
{{0.08,0.09,0.1,0.09,0.12,0.1,0.11,0.12,0.14,0.09,0.1,0.11,0.1,0.09,0.12,0.09,0.11,0.1,0.1,0.12,0.09,0.1,0.1,0.12,0.11,0.1,0.09,0.1,0.11,0.11,0,9.35,2.99,937.5,1093.75,1650,1.64,3.23,2.58,2.13,4.09,2.13,10.41},1},
{{0.1,0.12,0.09,0.11,0.11,0.11,0.08,0.12,0.08,0.1,0.11,0.13,0.09,0.09,0.1,0.08,0.07,0.12,0.11,0.12,0.11,0.09,0.11,0.07,0.07,0.08,0.13,0.13,0.1,0.14,0,9.45,3.29,1675,1860,1600,1.87,3.48,2.99,2.41,4.37,2.41,10.76},1},
{{0.11,0.1,0.09,0.09,0.08,0.12,0.11,0.1,0.08,0.14,0.09,0.1,0.1,0.11,0.12,0.08,0.12,0.09,0.11,0.1,0.11,0.11,0.11,0.09,0.12,0.09,0.11,0.08,0.12,0.08,0,9.32,2.77,2250,905,2583.33,1.84,3.09,2.72,2.37,3.99,2.37,10.48},1},
{{0.08,0.11,0.1,0.1,0.1,0.09,0.08,0.1,0.13,0.13,0.1,0.12,0.08,0.13,0.08,0.1,0.08,0.12,0.13,0.09,0.1,0.07,0.15,0.1,0.04,0.11,0.13,0.12,0.1,0.1,0,9.34,2.93,2383.33,1591.67,3925,1.87,3.26,2.73,2.36,4.11,2.36,10.49},1},
{{0.12,0.12,0.08,0.1,0.06,0.11,0.11,0.13,0.08,0.1,0.11,0.07,0.11,0.1,0.1,0.1,0.14,0.09,0.11,0.1,0.11,0.1,0.11,0.11,0.11,0.09,0.08,0.11,0.12,0.09,0,9.29,2.55,1650,828.57,2200,1.87,3.09,2.86,2.44,4.06,2.44,10.46},1},
{{0.1,0.09,0.14,0.12,0.13,0.09,0.11,0.08,0.1,0.07,0.1,0.09,0.1,0.11,0.1,0.17,0.09,0.1,0.07,0.09,0.09,0.13,0.06,0.12,0.14,0.13,0.1,0.08,0.07,0.1,0,9.14,2.75,1675,1112.5,1662.5,1.81,2.81,2.61,2.28,3.81,2.28,10.3},1},
{{0,0,0.01,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0.03,0.01,1675,1112.5,1662.5,0.01,0.03,0.01,2.56,6.01,2.56,0.03},1},
{{0.09,0.09,0.11,0.08,0.11,0.08,0.13,0.11,0.13,0.09,0.08,0.12,0.1,0.08,0.12,0.1,0.12,0.1,0.1,0.1,0.08,0.13,0.11,0.07,0.1,0.11,0.09,0.13,0.1,0.1,0,9.17,2.8,3325,1825,2650,1.18,2.78,1.93,1.65,3.6,1.65,10.18},5},
{{0.09,0.09,0.09,0.08,0.12,0.13,0.1,0.13,0.09,0.1,0.09,0.12,0.11,0.11,0.11,0.05,0.14,0.09,0.09,0.11,0.09,0.1,0.09,0.1,0.13,0.08,0.09,0.14,0.11,0.09,0,9.09,2.79,1200,2025,2525,1.23,2.92,1.97,1.82,3.84,1.82,10.15},5},
{{0.12,0.14,0.09,0.1,0.09,0.07,0.11,0.09,0.11,0.1,0.1,0.09,0.12,0.08,0.13,0.12,0.08,0.1,0.1,0.1,0.11,0.09,0.08,0.09,0.16,0.11,0.07,0.06,0.11,0.15,0,9.14,2.88,1300,1612.5,2733.33,1.39,2.98,2.19,1.94,4.02,1.94,10.34},5},
{{0.1,0.13,0.08,0.11,0.13,0.11,0.13,0.05,0.09,0.09,0.1,0.08,0.11,0.12,0.08,0.11,0.1,0.12,0.1,0.1,0.11,0.08,0.09,0.11,0.09,0.1,0.14,0.08,0.11,0.1,0,9.21,2.79,1950,2616.67,3650,1.28,2.93,2.02,1.83,3.86,1.83,10.29},5},
{{0.14,0.05,0.09,0.11,0.09,0.1,0.11,0.08,0.14,0.11,0.11,0.1,0.1,0.11,0.1,0.12,0.07,0.11,0.11,0.09,0.11,0.11,0.11,0.12,0.09,0.1,0.12,0.08,0.1,0.07,0,9.1,2.66,2866.67,1066.67,4300,1.42,2.97,2.04,2.11,3.92,2.11,10.17},5},
{{0.05,0.09,0.11,0.08,0.12,0.04,0.1,0.07,0.09,0.1,0.11,0.08,0.08,0.08,0.05,0.09,0.09,0.08,0.1,0.09,0.08,0.08,0.1,0.1,0.06,0.08,0.08,0.11,0.06,0.09,0,7.58,2.31,2850,2275,2275,1.04,3.1,1.63,1.7,4.44,1.7,8.44},5},
{{0.08,0.1,0.11,0.11,0.13,0.09,0.09,0.1,0.12,0.09,0.1,0.09,0.08,0.13,0.08,0.13,0.11,0.13,0.07,0.09,0.06,0.11,0.14,0.1,0.11,0.11,0.1,0.1,0.09,0.1,0,9.46,2.98,990,1192.86,2300,1.7,3.22,2.71,2.16,4.11,2.16,10.54},1},
{{0.11,0.06,0.12,0.12,0.09,0.14,0.1,0.1,0.09,0.08,0.1,0.11,0.09,0.11,0.11,0.09,0.1,0.1,0.11,0.1,0.07,0.12,0.12,0.1,0.12,0.09,0.1,0.1,0.12,0.08,0,9.4,2.94,887.5,877.27,1325,1.76,3.46,2.9,2.46,4.37,2.46,10.61},1},
{{0.07,0.12,0.12,0.13,0.08,0.1,0.09,0.12,0.07,0.12,0.09,0.1,0.1,0.1,0.13,0.09,0.1,0.11,0.11,0.07,0.11,0.06,0.11,0.1,0.11,0.11,0.09,0.11,0.12,0.09,0,9.35,2.88,1600,1550,1675,1.76,3.34,2.91,2.28,4.24,2.28,10.58},1},
{{0.11,0.1,0.08,0.1,0.11,0.11,0.08,0.11,0.09,0.13,0.09,0.1,0.09,0.08,0.12,0.12,0.1,0.11,0.11,0.1,0.11,0.11,0.08,0.12,0.09,0.1,0.09,0.13,0.1,0.09,0,9.59,2.78,2833.33,783.33,2075,1.93,3.39,2.97,2.55,4.3,2.55,10.87},1},
{{0.12,0.1,0.08,0.06,0.08,0.1,0.14,0.1,0.12,0.1,0.11,0.12,0.13,0.1,0.08,0.09,0.1,0.06,0.1,0.11,0.13,0.09,0.08,0.11,0.08,0.1,0.08,0.11,0.13,0.11,0,9.28,3,2325,779.17,880,1.92,3.67,3.21,2.51,4.6,2.51,10.69},1},
{{0.08,0.08,0.07,0.04,0.04,0.06,0.05,0.08,0.08,0.06,0.08,0.06,0.07,0.03,0.09,0.06,0.06,0.06,0.07,0.09,0.08,0.07,0.04,0.05,0.08,0.07,0.09,0.04,0.03,0.1,0,6.13,2.01,1233.33,791.67,625,1.34,2.92,2.17,2.65,5.77,2.65,7.1},1},
{{0.05,0.03,0.07,0.08,0.06,0.11,0.11,0.13,0.13,0.25,0.13,0.08,0.09,0.09,0.09,0.1,0.14,0.12,0.09,0.09,0.14,0.11,0.09,0.11,0.09,0.11,0.07,0.1,0.1,0.1,0,9.38,2.56,1950,1500,2750,1.73,2.78,1.67,2.19,3.55,2.19,10.15},1},
{{0.01,0.02,0.08,0.07,0.11,0.1,0.13,0.15,0.15,0.18,0.11,0.11,0.1,0.1,0.08,0.1,0.12,0.08,0.13,0.1,0.14,0.1,0.08,0.15,0.1,0.1,0.06,0.1,0.12,0.07,0,9.49,2.52,2625,1006.25,2125,1.54,2.82,1.54,2.06,3.47,2.06,10.2},1},
{{0.02,0.04,0.09,0.06,0.09,0.13,0.15,0.13,0.16,0.15,0.09,0.13,0.09,0.04,0.12,0.14,0.08,0.13,0.11,0.1,0.12,0.07,0.11,0.11,0.08,0.08,0.16,0.11,0.09,0.1,0,9.39,2.66,1937.5,859.09,3500,1.41,2.63,1.47,1.84,3.28,1.84,10.09},1},
{{0.02,0.05,0.08,0.11,0.1,0.14,0.12,0.1,0.17,0.13,0.08,0.1,0.12,0.1,0.07,0.11,0.1,0.13,0.1,0.1,0.1,0.07,0.08,0.12,0.12,0.1,0.14,0.08,0.08,0.12,0,9.44,2.76,1300,2383.33,2387.5,1.34,2.58,1.39,1.76,3.16,1.76,10.13},1},
{{0.04,0.06,0.08,0.11,0.14,0.1,0.13,0.12,0.13,0.11,0.09,0.11,0.11,0.09,0.14,0.09,0.11,0.07,0.12,0.09,0.07,0.12,0.11,0.07,0.09,0.16,0.11,0.08,0.14,0.07,0,9.26,2.73,3525,1100,2075,1.27,2.63,1.37,1.66,3.28,1.66,9.94},1},
{{0.05,0.1,0.12,0.15,0.1,0.12,0.09,0.08,0.11,0.1,0.08,0.11,0.13,0.1,0.07,0.12,0.09,0.11,0.12,0.09,0.07,0.11,0.14,0.1,0.09,0.09,0.12,0.1,0.1,0.1,0,9.45,2.66,1766.67,1410,2033.33,1.26,2.73,1.39,1.65,3.36,1.65,10.08},1},
{{0.13,0.12,0.1,0.07,0.11,0.1,0.12,0.09,0.08,0.1,0.13,0.09,0.08,0.09,0.11,0.1,0.12,0.1,0.09,0.12,0.08,0.1,0.09,0.13,0.11,0.1,0.1,0.1,0.12,0.09,0,9.43,2.72,2475,966.67,1316.67,1.39,2.81,1.43,1.75,3.57,1.75,10.12},1},
{{0.13,0.14,0.11,0.14,0.09,0.11,0.09,0.1,0.07,0.05,0.1,0.09,0.11,0.1,0.12,0.11,0.12,0.09,0.08,0.1,0.11,0.1,0.09,0.08,0.08,0.12,0.13,0.08,0.09,0.14,0,9.32,2.83,875,2366.67,2200,1.26,2.54,1.63,1.59,3.26,1.59,10.06},1},
{{0.17,0.15,0.12,0.1,0.13,0.07,0.09,0.09,0.07,0.03,0.1,0.09,0.1,0.14,0.11,0.08,0.1,0.08,0.09,0.15,0.1,0.14,0.08,0.11,0.09,0.06,0.11,0.08,0.13,0.11,0,9.65,2.68,2350,1362.5,2000,1.31,3.03,1.64,1.66,3.72,1.66,10.34},1},
{{0.22,0.17,0.13,0.08,0.09,0.09,0.07,0.06,0.07,0.05,0.11,0.09,0.09,0.14,0.1,0.11,0.05,0.11,0.11,0.09,0.09,0.1,0.11,0.11,0.1,0.09,0.07,0.14,0.08,0.11,0,9.44,2.73,1883.33,975,2625,1.45,2.92,1.53,1.77,3.65,1.77,10.15},1},
{{0.22,0.14,0.15,0.1,0.1,0.08,0.08,0.07,0.05,0.03,0.1,0.11,0.09,0.1,0.12,0.11,0.11,0.09,0.09,0.11,0.07,0.14,0.09,0.11,0.09,0.08,0.11,0.12,0.11,0.1,0,9.3,2.76,1066.67,1410,1050,1.46,2.67,1.49,1.83,3.4,1.83,10.02},1},
{{0.11,0.09,0.1,0.06,0.05,0.05,0.04,0.05,0.01,0,0.05,0.05,0.06,0.06,0.05,0.04,0.07,0.08,0.06,0.05,0.08,0.02,0.02,0.03,0.07,0.07,0.06,0.09,0.06,0.06,0,5.05,1.53,1250,925,950,0.74,2.39,1.14,1.76,5.35,1.76,5.47},1},
{{0.03,0.08,0.1,0.08,0.1,0.12,0.06,0.15,0.16,0.15,0.13,0.08,0.11,0.08,0.14,0.08,0.07,0.1,0.14,0.1,0.07,0.07,0.13,0.12,0.13,0.11,0.11,0.08,0.12,0.1,0,9.61,1.77,1987.5,1207.14,2375,1.79,3.63,1.84,2.2,4.36,2.2,10.32},2},
{{0.06,0.06,0.07,0.09,0.1,0.11,0.12,0.19,0.14,0.08,0.12,0.09,0.12,0.08,0.11,0.08,0.12,0.09,0.07,0.14,0.08,0.06,0.11,0.12,0.1,0.11,0.1,0.13,0.09,0.13,0,9.62,2.03,2766.67,1078.57,2950,1.64,3.58,2.06,2.1,4.32,2.1,10.43},2},
{{0.08,0.08,0.09,0.13,0.07,0.06,0.12,0.18,0.14,0.09,0.07,0.11,0.11,0.13,0.09,0.11,0.09,0.1,0.13,0.09,0.06,0.07,0.09,0.15,0.1,0.12,0.12,0.12,0.07,0.12,0,9.69,1.96,1650,886.36,1462.5,1.87,3.33,1.92,2.32,3.97,2.32,10.47},2},
{{0.1,0.06,0.09,0.11,0.08,0.12,0.11,0.13,0.14,0.1,0.07,0.11,0.11,0.12,0.1,0.12,0.08,0.1,0.13,0.09,0.08,0.08,0.11,0.15,0.06,0.13,0.08,0.14,0.09,0.11,0,9.69,1.8,1916.67,1933.33,950,1.81,3.26,1.92,2.31,3.89,2.31,10.42},2},
{{0.11,0.05,0.13,0.11,0.09,0.13,0.13,0.08,0.13,0.07,0.12,0.07,0.12,0.09,0.08,0.12,0.1,0.12,0.13,0.08,0.07,0.09,0.1,0.16,0.08,0.11,0.1,0.08,0.11,0.13,0,9.56,1.97,450,1458.33,1675,1.88,3.53,2.12,2.54,4.21,2.54,10.45},2},
{{0.08,0.07,0.11,0.13,0.13,0.11,0.17,0.12,0.06,0.04,0.07,0.18,0.1,0.05,0.12,0.12,0.11,0.1,0.11,0.06,0.06,0.13,0.12,0.11,0.05,0.13,0.11,0.11,0.08,0.13,0,9.11,1.83,2283.33,1820,2766.67,1.69,3.52,1.96,2.33,4.15,2.33,9.89},2},
{{0.12,0.09,0.1,0.13,0.1,0.16,0.13,0.08,0.08,0.04,0.07,0.13,0.07,0.13,0.11,0.11,0.11,0.12,0.12,0.06,0.08,0.07,0.09,0.08,0.13,0.12,0.11,0.12,0.12,0.1,0,9.56,1.81,2950,1142.86,1750,1.88,3.17,1.83,2.57,3.82,2.57,10.35},2},
{{0.12,0.12,0.11,0.11,0.1,0.14,0.09,0.11,0.05,0.06,0.1,0.09,0.13,0.11,0.07,0.11,0.13,0.06,0.16,0.07,0.09,0.07,0.09,0.11,0.1,0.06,0.1,0.17,0.12,0.11,0,9.45,2.03,3400,960,2583.33,1.99,3.46,2.12,2.64,4.07,2.64,10.36},2},
{{0.12,0.11,0.14,0.11,0.1,0.14,0.11,0.07,0.09,0.03,0.07,0.11,0.1,0.13,0.11,0.09,0.1,0.12,0.11,0.09,0.06,0.07,0.1,0.12,0.11,0.16,0.12,0.05,0.13,0.11,0,9.59,1.94,2500,1400,1483.33,2,3.31,1.94,2.66,3.99,2.66,10.43},2},
{{0.13,0.11,0.09,0.13,0.12,0.11,0.13,0.09,0.06,0.06,0.08,0.1,0.11,0.14,0.08,0.14,0.1,0.12,0.07,0.09,0.07,0.11,0.12,0.06,0.09,0.11,0.13,0.12,0.12,0.11,0,9.46,1.9,3425,1018.75,2925,2.02,3.26,1.99,2.75,3.92,2.75,10.33},2},
{{0.14,0.13,0.1,0.07,0.16,0.11,0.13,0.07,0.07,0.04,0.1,0.09,0.12,0.09,0.1,0.12,0.09,0.1,0.11,0.1,0.09,0.09,0.07,0.1,0.08,0.13,0.11,0.17,0.09,0.09,0,9.52,1.79,3350,925,1250,2.06,3.47,1.91,2.76,4.15,2.76,10.4},2},
{{0.14,0.12,0.09,0.11,0.13,0.13,0.12,0.08,0.07,0.03,0.1,0.1,0.12,0.09,0.08,0.14,0.05,0.12,0.13,0.1,0.06,0.09,0.1,0.13,0.1,0.09,0.09,0.13,0.12,0.11,0,9.57,1.98,2225,877.78,1000,1.94,3.46,2.04,2.59,4.14,2.59,10.44},2},
{{0.13,0.12,0.11,0.12,0.13,0.12,0.11,0.08,0.06,0.04,0.1,0.1,0.13,0.07,0.09,0.15,0.08,0.08,0.11,0.11,0.09,0.1,0.1,0.07,0.07,0.1,0.1,0.15,0.13,0.12,0,9.61,2.02,2450,977.78,1760,2.04,3.46,2.17,2.71,4.18,2.71,10.54},2},
{{0.13,0.15,0.09,0.11,0.06,0.18,0.16,0.05,0.05,0.05,0.11,0.09,0.11,0.11,0.07,0.11,0.14,0.07,0.11,0.1,0.08,0.09,0.1,0.09,0.1,0.11,0.09,0.14,0.13,0.1,0,9.56,1.94,2425,972.22,925,2.07,3.57,2.06,2.86,4.24,2.86,10.5},2},
{{0.15,0.11,0.06,0.15,0.1,0.12,0.11,0.09,0.09,0.03,0.1,0.1,0.1,0.1,0.1,0.13,0.1,0.11,0.08,0.1,0.07,0.08,0.11,0.1,0.09,0.15,0.08,0.09,0.16,0.09,0,9.52,1.87,1875,1087.5,1720,2.1,3.49,1.95,2.8,4.23,2.8,10.4},2},
{{0.13,0.13,0.12,0.07,0.15,0.13,0.1,0.11,0.05,0.04,0.08,0.1,0.12,0.13,0.08,0.13,0.11,0.1,0.06,0.1,0.08,0.08,0.1,0.09,0.09,0.13,0.1,0.1,0.15,0.11,0,9.52,2.03,2150,950,3850,2.05,3.26,2.12,2.79,3.97,2.79,10.45},2},
{{0.14,0.11,0.09,0.1,0.15,0.16,0.11,0.09,0.05,0.02,0.09,0.08,0.14,0.09,0.08,0.12,0.13,0.11,0.09,0.1,0.08,0.05,0.11,0.09,0.13,0.09,0.13,0.1,0.13,0.11,0,9.56,2.02,4400,1237.5,1466.67,1.93,3.35,1.98,2.63,3.99,2.63,10.42},2},
{{0.15,0.1,0.09,0.15,0.13,0.11,0.11,0.1,0.06,0.03,0.1,0.08,0.13,0.1,0.12,0.11,0.1,0.09,0.11,0.09,0.04,0.08,0.15,0.07,0.12,0.12,0.1,0.12,0.11,0.11,0,9.49,1.99,3475,3033.33,2250,2.06,3.29,1.95,2.74,3.99,2.74,10.36},2},
{{0.16,0.11,0.13,0.09,0.12,0.12,0.09,0.09,0.05,0.06,0.09,0.1,0.1,0.13,0.08,0.12,0.1,0.1,0.11,0.08,0.08,0.08,0.11,0.08,0.1,0.09,0.13,0.11,0.13,0.12,0,9.56,2.04,3233.33,1680,3400,2.23,3.32,2.11,2.94,3.98,2.94,10.53},2},
{{0.16,0.11,0.11,0.12,0.1,0.13,0.1,0.08,0.08,0.04,0.1,0.1,0.12,0.11,0.08,0.13,0.09,0.1,0.08,0.11,0.07,0.11,0.13,0.08,0.07,0.08,0.11,0.14,0.11,0.12,0,9.57,1.94,3400,1093.75,1540,2.15,3.45,2.11,2.84,4.13,2.84,10.49},2},
{{0.16,0.11,0.11,0.11,0.1,0.1,0.12,0.09,0.07,0.05,0.09,0.1,0.11,0.08,0.11,0.13,0.11,0.08,0.15,0.07,0.06,0.1,0.12,0.1,0.1,0.06,0.1,0.16,0.13,0.1,0,9.59,1.87,3350,1107.14,1600,2.15,3.33,1.92,2.85,4.01,2.85,10.45},2},
{{0.13,0.13,0.12,0.12,0.09,0.12,0.13,0.09,0.06,0.05,0.11,0.11,0.08,0.14,0.08,0.09,0.11,0.1,0.1,0.1,0.07,0.09,0.09,0.13,0.07,0.1,0.14,0.1,0.13,0.1,0,9.51,2,1700,992.86,1560,2.07,3.48,2.11,2.76,4.14,2.76,10.44},2},
{{0.15,0.13,0.11,0.09,0.12,0.12,0.12,0.1,0.06,0.04,0.12,0.08,0.12,0.1,0.09,0.11,0.12,0.09,0.08,0.11,0.08,0.1,0.12,0.06,0.1,0.11,0.1,0.14,0.12,0.09,0,9.46,1.84,1933.33,988.89,1550,2.12,3.56,2.01,2.85,4.27,2.85,10.37},2},
{{0.12,0.11,0.12,0.14,0.12,0.11,0.1,0.09,0.06,0.05,0.1,0.1,0.1,0.09,0.14,0.09,0.11,0.09,0.11,0.09,0.07,0.06,0.12,0.11,0.1,0.08,0.11,0.11,0.18,0.09,0,9.51,1.97,3875,762.5,1475,2.05,3.38,1.95,2.74,4.12,2.74,10.4},2},
{{0.15,0.1,0.1,0.11,0.14,0.11,0.11,0.11,0.04,0.05,0.09,0.12,0.1,0.09,0.13,0.09,0.12,0.1,0.12,0.08,0.08,0.08,0.1,0.1,0.08,0.12,0.11,0.12,0.14,0.1,0,9.54,1.91,2425,983.33,1250,2.07,3.37,1.95,2.82,4.09,2.82,10.43},2},
{{0.16,0.11,0.14,0.09,0.08,0.15,0.1,0.09,0.06,0.04,0.1,0.1,0.11,0.07,0.09,0.1,0.15,0.11,0.12,0.08,0.08,0.06,0.13,0.1,0.1,0.12,0.09,0.11,0.12,0.12,0,9.7,2.04,2925,1250,1550,2.11,3.42,2.13,2.79,4.08,2.79,10.63},2},
{{0.14,0.14,0.08,0.1,0.09,0.13,0.16,0.07,0.06,0.06,0.11,0.1,0.11,0.11,0.11,0.09,0.09,0.11,0.11,0.09,0.08,0.12,0.08,0.08,0.07,0.12,0.13,0.12,0.13,0.1,0,9.55,1.85,1900,1114.29,1966.67,2.09,3.43,2,2.84,4.12,2.84,10.47},2},
{{0.17,0.08,0.11,0.11,0.14,0.11,0.1,0.11,0.04,0.05,0.13,0.08,0.12,0.06,0.11,0.1,0.08,0.1,0.1,0.14,0.08,0.12,0.1,0.08,0.08,0.14,0.11,0.11,0.11,0.08,0,9.64,1.76,1925,750,1916.67,2.16,3.79,1.99,2.95,4.52,2.95,10.56},2},
{{0.14,0.11,0.12,0.12,0.09,0.13,0.11,0.08,0.06,0.05,0.12,0.11,0.09,0.13,0.09,0.09,0.09,0.11,0.1,0.09,0.08,0.11,0.07,0.09,0.07,0.08,0.16,0.1,0.16,0.1,0,9.37,1.84,2000,709.09,2000,2.13,3.63,1.98,2.84,4.35,2.84,10.31},2},
{{0.13,0.14,0.08,0.1,0.14,0.14,0.08,0.09,0.06,0.06,0.08,0.12,0.09,0.11,0.11,0.08,0.15,0.12,0.08,0.09,0.08,0.09,0.1,0.08,0.1,0.1,0.13,0.12,0.11,0.12,0,9.63,1.92,2150,1225,1180,2.1,3.26,2.08,2.8,3.93,2.8,10.55},2},
{{0.13,0.12,0.12,0.11,0.12,0.12,0.1,0.08,0.07,0.05,0.1,0.09,0.1,0.13,0.05,0.15,0.09,0.1,0.14,0.08,0.1,0.12,0.09,0.08,0.11,0.08,0.08,0.14,0.14,0.09,0,9.61,1.77,2875,1730,2566.67,2.12,3.34,2.05,2.84,4,2.84,10.51},2},
{{0.14,0.15,0.14,0.12,0.11,0.09,0.1,0.06,0.05,0.07,0.13,0.07,0.09,0.11,0.1,0.11,0.14,0.07,0.12,0.09,0.11,0.12,0.07,0.07,0.07,0.09,0.09,0.17,0.13,0.1,0,9.52,1.92,2400,828.57,2850,2.3,3.49,2.17,2.96,4.24,2.96,10.54},2},
{{0.14,0.17,0.09,0.09,0.15,0.08,0.1,0.06,0.09,0.06,0.13,0.09,0.11,0.09,0.1,0.1,0.12,0.08,0.11,0.1,0.15,0.1,0.08,0.1,0.04,0.12,0.07,0.13,0.13,0.09,0,9.36,1.8,2450,1128.57,2200,2.25,3.75,2.36,2.9,4.55,2.9,10.47},2},
{{0.14,0.14,0.09,0.1,0.14,0.13,0.11,0.07,0.06,0.05,0.11,0.09,0.1,0.14,0.05,0.11,0.11,0.11,0.14,0.08,0.09,0.11,0.08,0.1,0.07,0.1,0.11,0.12,0.13,0.1,0,9.64,1.85,2450,766.67,2266.67,2.15,3.6,2.09,2.87,4.28,2.87,10.57},2},
{{0.14,0.13,0.12,0.11,0.11,0.1,0.1,0.08,0.08,0.04,0.09,0.1,0.09,0.11,0.09,0.14,0.12,0.11,0.08,0.09,0.08,0.1,0.08,0.07,0.11,0.12,0.07,0.14,0.15,0.1,0,9.6,1.92,1612.5,1062.5,1966.67,2.18,3.22,1.96,2.81,3.89,2.81,10.49},2},
{{0.12,0.14,0.11,0.12,0.12,0.11,0.12,0.08,0.06,0.05,0.06,0.12,0.1,0.09,0.14,0.09,0.14,0.13,0.08,0.08,0.07,0.09,0.1,0.11,0.07,0.11,0.09,0.15,0.14,0.1,0,9.65,1.9,3025,1983.33,2633.33,2.07,3.1,1.96,2.72,3.74,2.72,10.53},2},
{{0.11,0.1,0.11,0.18,0.1,0.13,0.13,0.05,0.05,0.07,0.06,0.13,0.1,0.12,0.11,0.1,0.11,0.16,0.08,0.06,0.09,0.06,0.08,0.08,0.11,0.12,0.13,0.11,0.15,0.1,0,9.53,1.88,1600,3850,1450,1.97,3.09,1.87,2.62,3.71,2.62,10.41},2},
{{0.04,0.02,0.1,0.1,0.08,0.1,0.12,0.1,0.1,0.24,0.05,0.11,0.12,0.13,0.12,0.12,0.15,0.08,0.06,0.09,0.07,0.12,0.08,0.13,0.15,0.09,0.11,0.08,0.13,0.08,0,9.5,1.64,1450,1500,1450,2.09,3,1.78,2.69,3.7,2.69,10.31},2},
{{0,0.04,0.04,0.12,0.08,0.06,0.06,0.09,0.16,0.38,0.05,0.16,0.08,0.15,0.12,0.07,0.12,0.08,0.09,0.1,0.12,0.1,0.12,0.1,0.13,0.13,0.07,0.09,0.08,0.08,0,9.49,1.43,1562.5,1325,1475,2.19,3.3,1.95,2.56,3.96,2.56,10.32},2},
{{0,0.03,0.08,0.08,0.09,0.1,0.05,0.1,0.22,0.28,0.05,0.15,0.1,0.08,0.17,0.09,0.1,0.07,0.09,0.13,0.07,0.15,0.1,0.14,0.08,0.09,0.12,0.09,0.09,0.09,0,9.65,1.59,1475,1483.33,1580,2.02,3.3,1.99,2.4,4.03,2.4,10.43},2},
{{0.01,0.06,0.05,0.1,0.11,0.05,0.08,0.09,0.25,0.23,0.09,0.11,0.14,0.08,0.1,0.1,0.1,0.1,0.09,0.11,0.12,0.13,0.07,0.14,0.11,0.12,0.07,0.09,0.09,0.09,0,9.48,1.45,1675,825,3850,2,3.53,2.04,2.42,4.21,2.42,10.3},2},
{{0.03,0.06,0.08,0.08,0.08,0.06,0.07,0.12,0.18,0.26,0.11,0.13,0.08,0.07,0.11,0.13,0.09,0.09,0.09,0.13,0.15,0.11,0.1,0.13,0.12,0.08,0.09,0.1,0.05,0.09,0,9.65,1.32,1566.67,709.09,1933.33,2.12,3.6,2.09,2.54,4.38,2.54,10.52},2},
{{0.02,0.06,0.08,0.08,0.12,0.06,0.07,0.16,0.19,0.19,0.07,0.15,0.11,0.09,0.09,0.09,0.15,0.09,0.08,0.1,0.13,0.1,0.1,0.12,0.15,0.07,0.09,0.09,0.08,0.09,0,9.57,1.48,975,925,1900,1.92,3.52,1.97,2.35,4.22,2.35,10.35},2},
{{0.03,0.06,0.1,0.1,0.09,0.08,0.08,0.12,0.15,0.22,0.09,0.14,0.07,0.1,0.11,0.09,0.13,0.07,0.1,0.12,0.16,0.12,0.07,0.08,0.11,0.13,0.1,0.12,0.05,0.09,0,9.57,1.33,2766.67,506.67,2216.67,2.02,3.56,2,2.52,4.27,2.52,10.4},2},
{{0.04,0.09,0.08,0.09,0.09,0.1,0.06,0.13,0.15,0.19,0.12,0.11,0.09,0.09,0.11,0.13,0.06,0.09,0.1,0.13,0.15,0.08,0.1,0.11,0.11,0.15,0.1,0.04,0.1,0.08,0,9.64,1.41,1520,622.73,2162.5,1.97,3.73,2.06,2.36,4.53,2.36,10.47},2},
{{0.04,0.11,0.08,0.09,0.1,0.09,0.09,0.1,0.19,0.14,0.1,0.1,0.1,0.09,0.09,0.13,0.09,0.1,0.14,0.1,0.15,0.12,0.08,0.1,0.12,0.11,0.13,0.07,0.08,0.09,0,9.83,1.44,883.33,760,1500,1.95,3.53,2.12,2.37,4.25,2.37,10.66},2},
{{0.06,0.09,0.11,0.1,0.08,0.08,0.14,0.1,0.12,0.15,0.11,0.1,0.1,0.13,0.08,0.1,0.1,0.11,0.08,0.13,0.12,0.15,0.08,0.07,0.11,0.13,0.12,0.11,0.03,0.11,0,9.61,1.47,2375,1175,2137.5,1.97,3.56,2.06,2.48,4.26,2.48,10.46},2},
{{0.07,0.11,0.1,0.06,0.08,0.08,0.09,0.15,0.13,0.17,0.1,0.11,0.1,0.08,0.1,0.11,0.06,0.11,0.13,0.11,0.13,0.11,0.11,0.13,0.08,0.13,0.06,0.08,0.1,0.08,0,9.69,1.39,1530,1087.5,1720,2.05,3.67,2.11,2.51,4.39,2.51,10.58},2},
{{0.07,0.08,0.13,0.07,0.08,0.09,0.1,0.14,0.12,0.16,0.11,0.1,0.1,0.1,0.14,0.06,0.06,0.12,0.11,0.13,0.13,0.1,0.1,0.1,0.11,0.12,0.09,0.12,0.06,0.09,0,9.74,1.49,840,730.77,975,2.03,3.74,1.97,2.57,4.49,2.57,10.59},2},
{{0.04,0.09,0.11,0.09,0.1,0.06,0.13,0.11,0.14,0.16,0.07,0.14,0.09,0.08,0.16,0.07,0.08,0.1,0.13,0.1,0.12,0.08,0.13,0.12,0.15,0.14,0.07,0.07,0.06,0.09,0,9.56,1.42,1475,1350,1950,1.93,3.43,1.88,2.39,4.15,2.39,10.34},2},
{{0.05,0.08,0.13,0.1,0.08,0.09,0.09,0.12,0.16,0.13,0.1,0.11,0.11,0.1,0.12,0.05,0.12,0.07,0.1,0.15,0.1,0.1,0.11,0.11,0.14,0.13,0.09,0.08,0.05,0.12,0,9.8,1.83,1687.5,709.09,2925,1.92,3.77,2.29,2.39,4.47,2.39,10.67},2},
{{0.08,0.09,0.09,0.11,0.08,0.08,0.08,0.11,0.14,0.16,0.11,0.1,0.08,0.1,0.14,0.06,0.06,0.14,0.12,0.12,0.13,0.1,0.12,0.12,0.12,0.1,0.05,0.1,0.1,0.09,0,9.76,1.51,950,1228.57,2866.67,2.17,3.63,2.12,2.7,4.34,2.7,10.63},2},
{{0.08,0.09,0.12,0.1,0.04,0.08,0.09,0.16,0.12,0.15,0.13,0.09,0.11,0.07,0.11,0.1,0.08,0.11,0.07,0.15,0.15,0.12,0.07,0.15,0.09,0.09,0.1,0.09,0.05,0.11,0,9.6,1.52,3066.67,588.46,2550,2.16,3.8,2.23,2.67,4.51,2.67,10.52},2},
{{0.05,0.08,0.14,0.08,0.08,0.07,0.1,0.15,0.11,0.16,0.11,0.09,0.09,0.12,0.13,0.09,0.09,0.1,0.09,0.11,0.12,0.12,0.12,0.12,0.13,0.1,0.09,0.06,0.07,0.09,0,9.56,1.39,2450,1466.67,2933.33,1.99,3.5,2.02,2.43,4.25,2.43,10.36},2},
{{0.07,0.07,0.09,0.12,0.1,0.08,0.06,0.16,0.17,0.12,0.1,0.09,0.1,0.13,0.08,0.12,0.09,0.12,0.08,0.12,0.11,0.09,0.13,0.11,0.11,0.12,0.1,0.08,0.08,0.09,0,9.74,1.47,1500,546.88,3375,1.87,3.44,1.93,2.27,4.15,2.27,10.48},2},
{{0.09,0.07,0.1,0.09,0.12,0.08,0.08,0.1,0.18,0.14,0.1,0.08,0.09,0.13,0.09,0.11,0.09,0.12,0.11,0.1,0.1,0.1,0.09,0.11,0.12,0.17,0.1,0.06,0.08,0.09,0,9.74,1.56,1816.67,1760,2933.33,1.99,3.37,1.9,2.43,4.02,2.43,10.5},2},
{{0.07,0.11,0.11,0.07,0.11,0.06,0.14,0.15,0.08,0.13,0.11,0.08,0.12,0.1,0.1,0.12,0.08,0.11,0.09,0.11,0.12,0.1,0.08,0.14,0.09,0.13,0.08,0.08,0.08,0.11,0,9.64,1.61,2575,944.44,3425,1.93,3.42,2.11,2.48,4.12,2.48,10.49},2},
{{0.07,0.08,0.11,0.12,0.08,0.08,0.11,0.11,0.15,0.11,0.11,0.09,0.1,0.08,0.11,0.07,0.14,0.14,0.09,0.1,0.09,0.09,0.11,0.15,0.12,0.09,0.06,0.11,0.1,0.11,0,9.64,1.63,975,1810,2016.67,1.95,3.63,2.02,2.45,4.32,2.45,10.49},2},
{{0.06,0.1,0.1,0.1,0.1,0.09,0.13,0.11,0.1,0.13,0.08,0.13,0.08,0.09,0.13,0.08,0.13,0.1,0.13,0.08,0.1,0.09,0.11,0.1,0.1,0.11,0.08,0.12,0.11,0.11,0,9.69,1.74,1750,900,2016.67,1.95,3.3,2.06,2.55,3.95,2.55,10.53},2},
{{0.08,0.12,0.12,0.05,0.1,0.11,0.06,0.13,0.12,0.13,0.1,0.12,0.07,0.11,0.1,0.1,0.09,0.12,0.12,0.09,0.14,0.12,0.07,0.1,0.12,0.12,0.1,0.07,0.08,0.11,0,9.66,1.53,2475,1616.67,1962.5,2.1,3.48,2.15,2.67,4.19,2.67,10.55},2},
{{0.1,0.08,0.12,0.11,0.1,0.06,0.11,0.08,0.13,0.13,0.13,0.06,0.12,0.09,0.08,0.15,0.07,0.07,0.12,0.12,0.17,0.11,0.1,0.1,0.1,0.08,0.07,0.13,0.07,0.09,0,9.72,1.37,2800,1520,3800,2.2,3.67,2.24,2.81,4.46,2.81,10.63},2},
{{0.13,0.13,0.09,0.09,0.06,0.08,0.09,0.13,0.12,0.11,0.17,0.09,0.11,0.08,0.07,0.08,0.06,0.08,0.1,0.18,0.16,0.15,0.09,0.09,0.06,0.09,0.08,0.12,0.08,0.11,0,9.45,1.49,2550,578.57,2233.33,2.33,4.27,2.37,2.93,5.02,2.93,10.56},2},
{{0.11,0.15,0.08,0.12,0.06,0.04,0.11,0.09,0.12,0.14,0.15,0.08,0.09,0.11,0.05,0.09,0.1,0.09,0.1,0.15,0.13,0.17,0.11,0.07,0.08,0.07,0.1,0.12,0.07,0.1,0,9.58,1.35,1925,618.18,2233.33,2.3,4.12,2.32,2.81,4.92,2.81,10.71},2},
{{0.12,0.16,0.08,0.07,0.08,0.06,0.11,0.12,0.09,0.13,0.14,0.09,0.07,0.11,0.1,0.09,0.08,0.08,0.13,0.13,0.17,0.1,0.14,0.09,0.06,0.08,0.07,0.1,0.12,0.09,0,9.64,1.38,2533.33,945,4725,2.36,3.84,2.3,2.99,4.6,2.99,10.63},2},
{{0.13,0.13,0.1,0.07,0.08,0.11,0.08,0.11,0.06,0.15,0.13,0.09,0.07,0.11,0.11,0.08,0.1,0.12,0.07,0.15,0.17,0.11,0.1,0.1,0.03,0.1,0.12,0.12,0.08,0.11,0,9.72,1.5,3125,887.5,3350,2.41,3.7,2.3,3.11,4.41,3.11,10.78},2},
{{0.12,0.13,0.1,0.11,0.1,0.08,0.12,0.1,0.08,0.1,0.11,0.09,0.08,0.11,0.08,0.12,0.09,0.12,0.11,0.1,0.11,0.14,0.11,0.09,0.05,0.12,0.12,0.11,0.08,0.1,0,9.74,1.52,1210,1133.33,1925,2.2,3.5,2.08,2.82,4.22,2.82,10.62},2},
{{0.1,0.16,0.08,0.1,0.09,0.11,0.1,0.11,0.1,0.08,0.12,0.1,0.1,0.1,0.09,0.09,0.11,0.08,0.08,0.14,0.15,0.12,0.08,0.09,0.08,0.1,0.1,0.12,0.07,0.11,0,9.52,1.53,1450,1075,1925,2.16,3.82,2.27,2.83,4.59,2.83,10.5},2},
{{0.13,0.08,0.1,0.14,0.11,0.08,0.09,0.06,0.07,0.05,0.09,0.1,0.09,0.09,0.1,0.13,0.08,0.08,0.09,0.06,0.15,0.07,0.09,0.12,0.05,0.08,0.07,0.06,0.05,0.16,0,8.17,1.44,650,1566.67,1475,1.83,3.06,2.26,2.73,4.21,2.73,9.27},2},
{{0.18,0.13,0.1,0.12,0.05,0.08,0.11,0.1,0.09,0.07,0.1,0.09,0.04,0.11,0.1,0.1,0.11,0.13,0.11,0.12,0.16,0.17,0.08,0.08,0.05,0.06,0.12,0.13,0.09,0.09,0,9.42,-1.29,1400,675,3700,5.03,3.28,2.9,6.22,4.29,6.22,11.83},2},
{{0.12,0.11,0.1,0.12,0.1,0.1,0.08,0.12,0.09,0.09,0.1,0.08,0.1,0.11,0.11,0.11,0.1,0.1,0.08,0.13,0.19,0.12,0.11,0.06,0.07,0.08,0.09,0.08,0.15,0.07,0,9.08,-1.45,2350,696.43,3525,5.57,3.21,2.9,6.71,4.28,6.71,11.82},2},
{{0.13,0.1,0.09,0.07,0.1,0.12,0.1,0.1,0.08,0.13,0.13,0.07,0.13,0.1,0.06,0.1,0.11,0.09,0.16,0.07,0.11,0.17,0.09,0.11,0.09,0.04,0.06,0.11,0.14,0.09,0,8.74,-1.14,1550,1037.5,1383.33,5.84,3.24,3.07,7.05,4.24,7.05,11.76},2},
{{0.12,0.11,0.07,0.08,0.16,0.08,0.11,0.09,0.09,0.12,0.11,0.11,0.08,0.09,0.11,0.09,0.09,0.1,0.12,0.12,0.13,0.09,0.07,0.13,0.12,0.06,0.08,0.12,0.13,0.09,0,8.98,-1.08,2650,1350,2833.33,5.74,3.28,2.95,6.86,4.29,6.86,11.74},2},
{{0.13,0.08,0.1,0.11,0.11,0.13,0.09,0.11,0.07,0.1,0.06,0.16,0.11,0.08,0.09,0.13,0.1,0.11,0.09,0.1,0.13,0.07,0.12,0.08,0.04,0.13,0.13,0.16,0.11,0.07,0,8.95,-1.08,3725,931.25,2483.33,5.59,3,2.67,6.77,3.98,6.77,11.53},2},
{{0.12,0.08,0.14,0.08,0.09,0.07,0.16,0.07,0.13,0.08,0.06,0.16,0.1,0.06,0.12,0.09,0.13,0.08,0.12,0.11,0.17,0.06,0.09,0.11,0.04,0.08,0.21,0.13,0.08,0.07,0,9.12,-1.26,2500,1600,3225,5.54,3.16,2.59,6.64,4.11,6.64,11.67},2},
{{0.1,0.12,0.09,0.09,0.1,0.11,0.11,0.15,0.08,0.08,0.1,0.14,0.07,0.11,0.11,0.06,0.11,0.12,0.09,0.1,0.11,0.09,0.07,0.14,0.08,0.1,0.12,0.12,0.1,0.1,0,8.75,-1.11,2400,1650,3600,5.6,3.19,2.55,6.64,4.16,6.64,11.41},2},
{{0.1,0.13,0.1,0.07,0.12,0.1,0.08,0.13,0.11,0.09,0.16,0.12,0.09,0.07,0.05,0.08,0.11,0.11,0.13,0.11,0.14,0.13,0.08,0.1,0.13,0.08,0.09,0.05,0.1,0.12,0,8.74,-1.11,2600,928.57,3575,5.73,3.46,3.03,6.84,4.37,6.84,11.68},2},
{{0.05,0.13,0.06,0.09,0.1,0.18,0.08,0.13,0.09,0.1,0.1,0.13,0.12,0.09,0.04,0.1,0.13,0.12,0.09,0.1,0.04,0.1,0.1,0.18,0.11,0.14,0.07,0.07,0.09,0.13,0,8.75,-0.92,2200,1143.75,1325,5.89,3.04,2.78,6.92,3.98,6.92,11.58},2},
{{0.09,0.09,0.11,0.13,0.07,0.07,0.14,0.08,0.1,0.14,0.12,0.12,0.12,0.08,0.07,0.1,0.11,0.08,0.1,0.12,0.09,0.11,0.06,0.11,0.1,0.11,0.12,0.09,0.12,0.11,0,8.84,-0.74,2050,1044.44,2575,5.93,3.42,3.04,7.07,4.43,7.07,11.86},2},
{{0.11,0.09,0.12,0.12,0.12,0.08,0.08,0.07,0.11,0.13,0.11,0.09,0.13,0.11,0.08,0.1,0.12,0.09,0.09,0.11,0.09,0.1,0.11,0.13,0.09,0.1,0.11,0.08,0.06,0.16,0,8.81,-0.79,1400,700,2800,5.74,3.11,3.06,6.97,4.17,6.97,11.64},2},
{{0.13,0.1,0.08,0.13,0.11,0.05,0.09,0.09,0.12,0.12,0.11,0.1,0.1,0.11,0.07,0.1,0.11,0.11,0.11,0.1,0.13,0.1,0.16,0.07,0.09,0.13,0.09,0.08,0.09,0.1,0,9.01,-1.17,2483.33,800,2137.5,5.7,3.27,2.89,6.95,4.33,6.95,11.85},2},
{{0.11,0.08,0.13,0.09,0.11,0.11,0.1,0.08,0.11,0.1,0.1,0.09,0.1,0.1,0.11,0.1,0.11,0.09,0.1,0.11,0.09,0.11,0.1,0.1,0.09,0.09,0.12,0.1,0.15,0.07,0,9.03,-0.88,2133.33,758.33,2133.33,5.69,3.17,2.8,6.88,4.17,6.88,11.76},2},
{{0.12,0.13,0.09,0.13,0.07,0.07,0.08,0.13,0.11,0.1,0.11,0.12,0.09,0.08,0.12,0.11,0.14,0.08,0.07,0.12,0.08,0.12,0.13,0.04,0.08,0.08,0.12,0.16,0.11,0.09,0,8.86,-0.86,1525,1321.43,3125,5.58,3.13,2.73,6.77,4.19,6.77,11.58},2},
{{0.09,0.1,0.13,0.11,0.12,0.08,0.09,0.12,0.12,0.08,0.09,0.11,0.1,0.07,0.15,0.07,0.12,0.08,0.13,0.1,0.06,0.09,0.12,0.1,0.14,0.09,0.14,0.09,0.09,0.1,0,9.02,-0.96,2433.33,1112.5,2433.33,5.72,3.09,2.65,6.82,4.03,6.82,11.66},2},
{{0.11,0.08,0.12,0.1,0.09,0.1,0.1,0.12,0.11,0.09,0.08,0.14,0.12,0.1,0.06,0.14,0.11,0.07,0.09,0.11,0.07,0.1,0.11,0.14,0.09,0.07,0.13,0.17,0.09,0.07,0,8.91,-0.98,1525,762.5,1783.33,5.8,3.11,2.6,6.95,4.14,6.95,11.62},2},
{{0.1,0.06,0.15,0.13,0.08,0.12,0.08,0.11,0.11,0.09,0.09,0.1,0.09,0.13,0.13,0.1,0.11,0.12,0.06,0.1,0.08,0.12,0.08,0.12,0.11,0.11,0.1,0.16,0.09,0.06,0,8.8,-1.14,1637.5,831.82,2725,5.71,2.91,2.53,6.8,4,6.8,11.45},2},
{{0.08,0.1,0.12,0.08,0.12,0.1,0.11,0.1,0.07,0.13,0.08,0.09,0.09,0.14,0.09,0.16,0.09,0.1,0.09,0.1,0.13,0.1,0.09,0.1,0.14,0.08,0.08,0.11,0.11,0.09,0,8.94,-1.03,1433.33,975,2516.67,5.85,2.89,2.9,7.07,3.94,7.07,11.77},2},
{{0.09,0.1,0.11,0.12,0.08,0.08,0.14,0.07,0.12,0.12,0.12,0.08,0.1,0.1,0.16,0.1,0.05,0.13,0.1,0.09,0.1,0.13,0.09,0.09,0.12,0.11,0.11,0.06,0.09,0.13,0,8.82,-0.94,880,1031.25,1625,5.84,3.14,2.99,7,4.15,7,11.74},2},
{{0.08,0.13,0.09,0.1,0.12,0.1,0.09,0.08,0.12,0.12,0.09,0.11,0.09,0.11,0.15,0.13,0.07,0.07,0.1,0.09,0.07,0.12,0.12,0.11,0.08,0.15,0.08,0.08,0.12,0.1,0,8.71,-0.97,2133.33,994.44,3200,5.87,2.88,2.78,7.02,3.93,7.02,11.55},2},
{{0.1,0.11,0.09,0.1,0.12,0.1,0.08,0.1,0.12,0.11,0.12,0.07,0.11,0.09,0.11,0.09,0.12,0.09,0.11,0.1,0.08,0.1,0.09,0.15,0.13,0.12,0.07,0.07,0.08,0.13,0,8.86,-0.94,1220,1206.25,2725,5.81,3.16,2.96,7.04,4.15,7.04,11.73},2},
{{0.08,0.07,0.1,0.1,0.11,0.14,0.1,0.11,0.11,0.1,0.09,0.08,0.13,0.14,0.08,0.09,0.08,0.14,0.1,0.08,0.07,0.08,0.11,0.11,0.13,0.16,0.07,0.07,0.11,0.12,0,8.79,-0.78,1083.33,1242.86,1375,5.84,2.86,2.89,6.86,3.77,6.86,11.53},2},
{{0.08,0.09,0.1,0.08,0.12,0.12,0.11,0.11,0.08,0.14,0.1,0.07,0.11,0.09,0.12,0.13,0.12,0.08,0.13,0.09,0.1,0.07,0.11,0.11,0.13,0.1,0.1,0.09,0.1,0.11,0,8.98,-0.99,1816.67,1208.33,2433.33,6.05,2.92,2.82,7.15,3.91,7.15,11.82},2},
{{0.12,0.1,0.07,0.08,0.11,0.1,0.09,0.12,0.11,0.14,0.12,0.07,0.12,0.15,0.06,0.11,0.13,0.05,0.1,0.1,0.12,0.09,0.09,0.09,0.12,0.13,0.05,0.11,0.11,0.13,0,8.77,-0.77,1055.56,1061.11,3225,5.94,3.09,3.19,7.15,4.17,7.15,11.8},2},
{{0.07,0.1,0.11,0.12,0.09,0.09,0.1,0.08,0.13,0.14,0.11,0.1,0.12,0.09,0.07,0.12,0.09,0.16,0.08,0.1,0.09,0.12,0.07,0.15,0.14,0.12,0.06,0.06,0.06,0.17,0,8.75,-0.81,2383.33,1740,3575,6.1,2.96,3.17,7.25,3.91,7.25,11.82},2},
{{0.08,0.1,0.13,0.13,0.07,0.12,0.09,0.07,0.12,0.1,0.11,0.08,0.14,0.08,0.09,0.09,0.13,0.09,0.13,0.09,0.08,0.15,0.08,0.1,0.09,0.08,0.14,0.1,0.09,0.13,0,8.84,-0.76,2866.67,1228.57,2150,5.69,3.08,2.94,6.84,4.01,6.84,11.57},2},
{{0.12,0.13,0.09,0.06,0.1,0.11,0.11,0.09,0.1,0.1,0.09,0.09,0.08,0.07,0.16,0.13,0.1,0.1,0.12,0.08,0.07,0.12,0.08,0.12,0.07,0.12,0.14,0.09,0.09,0.11,0,8.99,-0.86,1083.33,845,1625,5.48,2.88,2.82,6.74,3.88,6.74,11.63},2},
{{0.09,0.1,0.12,0.1,0.08,0.07,0.14,0.12,0.1,0.1,0.12,0.09,0.08,0.1,0.1,0.1,0.08,0.14,0.12,0.09,0.09,0.11,0.11,0.11,0.06,0.11,0.12,0.13,0.11,0.08,0,8.94,-0.89,2166.67,1085.71,3250,5.76,3.18,2.79,6.9,4.12,6.9,11.69},2},
{{0.07,0.06,0.14,0.08,0.14,0.13,0.1,0.11,0.12,0.07,0.06,0.13,0.11,0.12,0.12,0.08,0.11,0.15,0.05,0.11,0.05,0.08,0.1,0.12,0.11,0.16,0.08,0.11,0.11,0.11,0,8.84,-0.71,1400,825,2216.67,5.78,2.79,2.73,6.73,3.7,6.73,11.47},2},
{{0.08,0.1,0.09,0.09,0.08,0.18,0.15,0.1,0.09,0.06,0.08,0.12,0.11,0.1,0.1,0.13,0.09,0.09,0.13,0.07,0.08,0.03,0.08,0.11,0.13,0.11,0.13,0.12,0.12,0.11,0,8.77,-0.52,1850,1183.33,2237.5,5.47,2.78,2.74,6.38,3.73,6.38,11.31},2},
{{0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0.05,0,1850,1183.33,2237.5,0.01,0.05,0,3.85,9.91,3.85,0.05},2},
{{0.15,0.14,0.09,0.07,0.11,0.09,0.05,0.04,0.12,0.11,0.13,0.05,0.12,0.2,0.04,0.09,0.11,0.07,0.07,0,0.28,0.09,0.11,0.06,0.09,0.06,0.08,0.12,0.07,0.06,0,6.7,-2.69,384,461.9,2550,8.52,7.68,3.74,10.89,8.78,10.89,14.33},0},
{{0.05,0.15,0.11,0.13,0.1,0.06,0.07,0.09,0.16,0.09,0.12,0.12,0.14,0.08,0.08,0.1,0.09,0.09,0.05,0,0.17,0.15,0.1,0.1,0.1,0.07,0.13,0.07,0.07,0.08,0,6.64,-2.21,715.38,567.65,875,8.48,7.86,3.44,10.78,8.87,10.78,14.25},0},
{{0.11,0.12,0.12,0.09,0.09,0.09,0.09,0.1,0.1,0.12,0.11,0.13,0.08,0.16,0.06,0.12,0.04,0.11,0.1,0,0.12,0.09,0.13,0.12,0.05,0.1,0.11,0.13,0.07,0.1,0,6.82,-1.25,505.56,472.5,3150,8.46,7.73,3.56,10.6,8.69,10.6,13.91},0},
{{0.05,0.16,0.12,0.11,0.09,0.07,0.08,0.08,0.14,0.11,0.1,0.12,0.11,0.08,0.11,0.08,0.1,0.07,0.1,0,0.18,0.14,0.12,0.08,0.05,0.1,0.14,0.05,0.07,0.09,0,7.45,-1.94,469.44,513.16,3325,8.6,7.94,3.63,10.94,8.88,10.94,14.64},0},
{{0.08,0.07,0.1,0.12,0.11,0.09,0.12,0.09,0.1,0.09,0.11,0.09,0.1,0.08,0.08,0.1,0.12,0.08,0.15,0,0.1,0.11,0.11,0.1,0.08,0.08,0.12,0.09,0.13,0.1,0,7.79,-1.04,700,425,2300,9.13,7.84,3.61,11.1,8.94,11.1,14.98},0},
{{0.11,0.1,0.13,0.16,0.07,0.07,0.07,0.1,0.13,0.07,0.12,0.15,0.08,0.06,0.09,0.1,0.11,0.09,0.11,0,0.11,0.12,0.13,0.12,0.11,0.09,0.09,0.07,0.08,0.1,0,7.07,-1.64,720,457.89,1800,8.02,8.04,3.47,10.24,9.1,10.24,14.13},0},
{{0.1,0.08,0.12,0.08,0.13,0.09,0.13,0.11,0.1,0.07,0.13,0.07,0.14,0.08,0.12,0.09,0.1,0.11,0.08,0,0.06,0.08,0.17,0.1,0.04,0.17,0.11,0.11,0.07,0.11,0,6.94,-1.02,815,576.67,1387.5,8.44,7.45,3.21,10.32,8.44,10.32,13.55},0},
{{0.1,0.09,0.11,0.07,0.1,0.14,0.08,0.09,0.13,0.1,0.1,0.09,0.1,0.1,0.14,0.09,0.09,0.09,0.09,0,0.15,0.1,0.1,0.08,0.1,0.1,0.11,0.1,0.1,0.09,0,7.51,-1.35,561.76,395.83,3900,8.96,7.65,3.48,10.99,8.65,10.99,14.4},0},
{{0.14,0.12,0.12,0.11,0.04,0.09,0.06,0.12,0.06,0.13,0.14,0.08,0.13,0.1,0.09,0.11,0.05,0.1,0.1,0,0.16,0.1,0.12,0.07,0.1,0.09,0.09,0.09,0.13,0.08,0,6.82,-1.64,514.71,527.78,2866.67,8.48,7.8,3.61,10.78,8.88,10.78,14.2},0},
{{0.08,0.13,0.13,0.07,0.09,0.11,0.07,0.12,0.1,0.1,0.12,0.08,0.1,0.12,0.11,0.08,0.1,0.09,0.09,0,0.11,0.14,0.09,0.14,0.09,0.11,0.09,0.08,0.09,0.08,0,7.28,-1.57,606.67,502.63,1200,8.39,7.65,3.29,10.61,8.72,10.61,14.03},0},
{{0.09,0.09,0.12,0.14,0.08,0.1,0.1,0.13,0.09,0.05,0.1,0.08,0.12,0.1,0.11,0.11,0.12,0.11,0.09,0,0.11,0.07,0.1,0.11,0.07,0.13,0.12,0.1,0.11,0.11,0,7.01,-0.97,1250,514.71,3016.67,8.12,7.4,3.29,10.17,8.45,10.17,13.52},0},
{{0.07,0.09,0.1,0.12,0.1,0.12,0.14,0.09,0.09,0.1,0.06,0.12,0.11,0.1,0.12,0.09,0.09,0.16,0.11,0,0.04,0.09,0.08,0.12,0.1,0.14,0.13,0.08,0.13,0.11,0,7.74,-0.48,827.27,525,2933.33,8.55,7.46,3.23,10.38,8.36,10.38,13.99},0},
{{0.1,0.12,0.09,0.11,0.13,0.07,0.05,0.1,0.13,0.12,0.09,0.13,0.1,0.11,0.06,0.13,0.09,0.08,0.11,0,0.08,0.14,0.12,0.07,0.08,0.14,0.06,0.09,0.14,0.09,0,7.51,-0.96,920,581.25,1533.33,8.8,7.71,3.66,10.96,8.7,10.96,14.55},0},
{{0.12,0.12,0.11,0.06,0.12,0.13,0.08,0.1,0.09,0.09,0.13,0.08,0.13,0.08,0.13,0.08,0.14,0.1,0.1,0,0.11,0.12,0.11,0.08,0.12,0.08,0.11,0.08,0.13,0.08,0,6.65,-1.28,740.91,442.86,1850,8.16,7.38,3.43,10.2,8.55,10.2,13.53},0},
{{0.09,0.09,0.13,0.09,0.13,0.09,0.12,0.1,0.07,0.11,0.13,0.11,0.11,0.08,0.12,0.1,0.13,0.08,0.08,0,0.1,0.09,0.08,0.06,0.14,0.11,0.14,0.12,0.1,0.08,0,6.49,-1.08,616.67,568.75,3050,8.3,7.42,3.19,10.37,8.56,10.37,13.4},0},
{{0.1,0.12,0.11,0.09,0.05,0.11,0.12,0.08,0.12,0.13,0.07,0.1,0.09,0.09,0.09,0.09,0.13,0.11,0.11,0,0.1,0.1,0.1,0.18,0.1,0.09,0.1,0.06,0.09,0.11,0,8.62,-1.26,662.5,463.16,3525,8.94,7.65,3.54,11.13,8.61,11.13,15.28},0},
{{0.11,0.1,0.06,0.1,0.07,0.13,0.15,0.12,0.08,0.09,0.1,0.11,0.12,0.07,0.08,0.09,0.11,0.14,0.11,0,0.05,0.07,0.06,0.18,0.1,0.12,0.13,0.1,0.13,0.09,0,7.59,-0.63,667.86,475,1433.33,8.86,7.75,3.17,10.63,8.61,10.63,14.22},0},
{{0.12,0.14,0.12,0.09,0.07,0.09,0.1,0.1,0.12,0.07,0.1,0.15,0.11,0.12,0.06,0.12,0.06,0.12,0.1,0,0.11,0.09,0.13,0.09,0.1,0.1,0.09,0.14,0.07,0.11,0,6.73,-1.13,791.67,431.82,800,7.93,7.61,3.5,10.09,8.61,10.09,13.36},0},
{{0.12,0.11,0.07,0.11,0.12,0.14,0.06,0.11,0.09,0.08,0.09,0.13,0.1,0.11,0.08,0.11,0.12,0.1,0.06,0,0.11,0.13,0.08,0.05,0.19,0.11,0.07,0.09,0.1,0.09,0,7.04,-1.37,775,606.25,3500,8.02,7.47,3.26,9.97,8.51,9.97,13.59},0},
{{0.11,0.11,0.11,0.08,0.08,0.09,0.11,0.09,0.17,0.08,0.09,0.1,0.09,0.13,0.13,0.1,0.06,0.1,0.1,0,0.12,0.09,0.05,0.08,0.12,0.08,0.12,0.11,0.11,0.14,0,7.13,-0.46,875,553.57,2125,8.75,7.31,3.92,10.78,8.38,10.78,14.2},0},
{{0.11,0.09,0.14,0.07,0.11,0.07,0.12,0.14,0.12,0.06,0.13,0.09,0.06,0.09,0.07,0.11,0.12,0.1,0.16,0,0.08,0.07,0.14,0.14,0.1,0.11,0.06,0.13,0.07,0.14,0,8.17,-0.73,1307.14,486.84,900,8.52,7.84,3.77,10.5,8.81,10.5,14.83},0},
{{0.12,0.07,0.07,0.1,0.12,0.1,0.14,0.14,0.08,0.07,0.07,0.09,0.08,0.08,0.14,0.12,0.14,0.08,0.11,0,0.04,0.09,0.13,0.11,0.1,0.07,0.1,0.11,0.1,0.18,0,7.87,-0.11,1420,509.38,3950,8.75,7.1,3.88,10.48,8.24,10.48,14.26},0},
{{0.1,0.06,0.09,0.08,0.13,0.17,0.11,0.12,0.06,0.09,0.08,0.09,0.08,0.12,0.12,0.08,0.19,0.09,0.1,0,0.07,0.06,0.08,0.14,0.09,0.12,0.1,0.1,0.18,0.1,0,7.55,-0.35,745.83,513.89,1500,8.77,6.97,3.41,10.47,8.02,10.47,13.87},0},
{{0.09,0.06,0.1,0.14,0.13,0.11,0.17,0.08,0.05,0.07,0.12,0.11,0.1,0.09,0.1,0.09,0.07,0.15,0.09,0,0.08,0.03,0.09,0.11,0.13,0.08,0.08,0.14,0.15,0.13,0,7.25,-0.1,1157.14,566.67,1966.67,8.29,7.86,3.55,10.06,8.82,10.06,13.8},0},
{{0.12,0.06,0.13,0.09,0.11,0.08,0.12,0.13,0.1,0.05,0.06,0.14,0.11,0.09,0.15,0.1,0.08,0.1,0.12,0,0.03,0.12,0.1,0.11,0.13,0.07,0.11,0.16,0.08,0.1,0,6.88,-0.73,931.25,421.43,2150,8.45,7.03,3.18,10.41,8.12,10.41,13.25},0},
{{0.1,0.07,0.06,0.14,0.12,0.13,0.13,0.1,0.06,0.07,0.07,0.09,0.09,0.09,0.15,0.1,0.09,0.11,0.11,0,0.08,0.11,0.11,0.05,0.09,0.11,0.1,0.12,0.14,0.11,0,7.95,-0.61,905,472.5,3650,8.67,7.2,3.67,10.41,8.31,10.41,14.24},0},
{{0.09,0.06,0.11,0.12,0.12,0.14,0.16,0.07,0.08,0.05,0.1,0.09,0.1,0.11,0.14,0.11,0.08,0.13,0.11,0,0.07,0.09,0.12,0.08,0.17,0.11,0.06,0.1,0.1,0.12,0,7.16,-0.85,905,487.5,2650,8.04,7.18,3.38,9.74,8.27,9.74,13.46},0},
{{0.08,0.03,0.04,0.09,0.12,0.1,0.06,0.06,0.05,0.04,0.05,0.04,0.03,0.07,0.09,0.14,0.1,0.08,0.04,0,0.03,0.03,0.08,0.04,0.08,0.11,0.07,0.08,0.1,0.06,0,5.03,-0.23,1112.5,493.75,750,5.31,4.13,1.95,9.69,7.76,9.69,8.62},0},
{{0.16,0.12,0.12,0.07,0.08,0.11,0.09,0.1,0.09,0.09,0.15,0.12,0.09,0.07,0.09,0.09,0.11,0.09,0.1,0.09,0.13,0.11,0.1,0.08,0.07,0.08,0.15,0.08,0.12,0.09,0,9.87,-0.84,1525,584.38,4150,3.88,3.73,2.73,5.05,4.73,5.05,11.61},2},
{{0.12,0.11,0.07,0.1,0.06,0.14,0.11,0.12,0.1,0.1,0.15,0.07,0.11,0.09,0.06,0.11,0.08,0.11,0.11,0.12,0.13,0.13,0.14,0.08,0.07,0.07,0.06,0.09,0.13,0.14,0,9.92,-0.59,2600,787.5,2600,3.97,3.59,3.08,5.01,4.5,5.01,11.76},2},
{{0.12,0.09,0.09,0.09,0.1,0.12,0.1,0.08,0.09,0.13,0.11,0.12,0.1,0.11,0.09,0.05,0.08,0.14,0.09,0.13,0.11,0.1,0.12,0.09,0.06,0.11,0.13,0.11,0.1,0.09,0,10.01,-0.72,2766.67,623.33,2550,4.09,3.61,2.65,5.36,4.49,5.36,11.78},2},
{{0.14,0.13,0.1,0.07,0.1,0.08,0.09,0.1,0.1,0.12,0.14,0.09,0.1,0.09,0.05,0.09,0.1,0.12,0.09,0.12,0.12,0.07,0.09,0.12,0.09,0.1,0.1,0.14,0.09,0.1,0,10.03,-0.87,2337.5,753.85,2600,4.07,3.71,2.48,5.3,4.64,5.3,11.74},2},
{{0.12,0.15,0.08,0.08,0.11,0.05,0.13,0.11,0.1,0.1,0.14,0.08,0.07,0.15,0.09,0.09,0.06,0.14,0.08,0.12,0.11,0.07,0.11,0.1,0.09,0.06,0.19,0.13,0.08,0.09,0,10.06,-0.86,3700,787.5,2125,3.98,3.52,2.28,5.12,4.47,5.12,11.66},2},
{{0.13,0.07,0.11,0.14,0.08,0.11,0.09,0.09,0.07,0.13,0.13,0.1,0.09,0.12,0.09,0.07,0.11,0.1,0.1,0.11,0.1,0.12,0.06,0.07,0.09,0.12,0.17,0.11,0.1,0.09,0,9.82,-0.78,2650,840,1600,3.9,3.44,2.37,5.15,4.36,5.15,11.49},2},
{{0.14,0.09,0.1,0.06,0.07,0.13,0.09,0.13,0.08,0.13,0.13,0.09,0.09,0.13,0.09,0.08,0.08,0.11,0.11,0.12,0.13,0.09,0.1,0.07,0.08,0.07,0.15,0.12,0.1,0.11,0,10,-0.74,3575,766.67,2600,4.28,3.47,2.55,5.42,4.4,5.42,11.84},2},
{{0.11,0.12,0.09,0.05,0.11,0.11,0.1,0.09,0.15,0.08,0.16,0.12,0.11,0.07,0.05,0.07,0.1,0.11,0.13,0.1,0.11,0.08,0.07,0.11,0.12,0.14,0.08,0.14,0.1,0.08,0,9.86,-0.88,3125,700,1050,4.02,3.77,2.47,5.18,4.61,5.18,11.6},2},
{{0.12,0.08,0.12,0.08,0.09,0.13,0.09,0.11,0.1,0.1,0.11,0.11,0.11,0.1,0.07,0.08,0.11,0.15,0.12,0.05,0.09,0.09,0.08,0.14,0.13,0.05,0.13,0.1,0.12,0.09,0,9.92,-0.76,4800,905,3200,3.95,3.2,2.46,5.16,4.06,5.16,11.54},2},
{{0.12,0.09,0.09,0.07,0.11,0.1,0.11,0.09,0.12,0.12,0.1,0.08,0.12,0.14,0.06,0.08,0.15,0.11,0.08,0.09,0.09,0.07,0.13,0.14,0.12,0.1,0.06,0.11,0.09,0.11,0,9.93,-0.74,2150,754.17,3225,4.13,3.16,2.65,5.24,4.16,5.24,11.67},2},
{{0.13,0.08,0.13,0.07,0.07,0.11,0.09,0.12,0.13,0.09,0.1,0.12,0.09,0.11,0.1,0.09,0.08,0.1,0.11,0.12,0.11,0.1,0.14,0.09,0.09,0.1,0.08,0.09,0.1,0.11,0,10.06,-0.73,4225,772.73,3175,3.96,3.42,2.72,5.02,4.38,5.02,11.72},2},
{{0.12,0.09,0.12,0.11,0.08,0.07,0.08,0.14,0.11,0.1,0.08,0.1,0.11,0.09,0.1,0.13,0.12,0.07,0.1,0.11,0.1,0.09,0.12,0.1,0.13,0.08,0.07,0.11,0.12,0.1,0,10.15,-0.7,2100,650,1766.67,3.92,3.09,2.6,5.08,4.09,5.08,11.73},2},
{{0.02,0.1,0.12,0.11,0.17,0.14,0.1,0.1,0.09,0.07,0.05,0.13,0.14,0.07,0.12,0.14,0.09,0.13,0.08,0.08,0.09,0.11,0.1,0.09,0.11,0.1,0.1,0.14,0.11,0.08,0,9.98,-0.76,1925,1106.25,1850,3.29,2.77,2.4,4.35,3.66,4.35,11.24},2},
{{0.1,0.1,0.09,0.1,0.1,0.1,0.13,0.09,0.11,0.09,0.06,0.15,0.08,0.12,0.13,0.1,0.09,0.12,0.06,0.11,0.12,0.1,0.09,0.09,0.09,0.12,0.11,0.12,0.09,0.1,0,10.06,-0.77,1800,742.31,2700,3.84,3.07,2.55,4.93,4.05,4.93,11.62},2},
{{0.1,0.12,0.09,0.09,0.11,0.09,0.08,0.12,0.12,0.1,0.11,0.13,0.06,0.11,0.13,0.1,0.1,0.07,0.11,0.1,0.13,0.08,0.07,0.09,0.1,0.1,0.11,0.16,0.08,0.1,0,9.93,-0.75,2125,795.83,1416.67,4,3.25,2.45,5.16,4.18,5.16,11.57},2},
{{0.12,0.1,0.09,0.13,0.09,0.1,0.09,0.12,0.11,0.08,0.06,0.13,0.08,0.09,0.14,0.13,0.08,0.09,0.1,0.11,0.14,0.1,0.09,0.06,0.07,0.12,0.14,0.14,0.13,0.04,0,10.16,-0.81,2516.67,900,2516.67,3.86,3.09,2.43,5.03,4.06,5.03,11.68},2},
{{0.1,0.07,0.11,0.12,0.11,0.11,0.09,0.12,0.08,0.11,0.06,0.14,0.09,0.1,0.13,0.1,0.09,0.1,0.12,0.09,0.06,0.13,0.1,0.14,0.1,0.08,0.1,0.11,0.11,0.1,0,10.07,-0.77,2225,800,2225,3.73,3.11,2.52,4.92,3.97,4.92,11.6},2},
{{0.1,0.08,0.13,0.11,0.11,0.09,0.08,0.09,0.1,0.13,0.12,0.09,0.14,0.1,0.09,0.13,0.05,0.11,0.09,0.11,0.14,0.13,0.08,0.09,0.12,0.09,0.08,0.07,0.09,0.14,0,9.86,-0.84,1525,669.23,2200,4.01,3.36,2.88,5.42,4.35,5.42,11.72},2},
{{0.13,0.09,0.11,0.07,0.09,0.11,0.1,0.1,0.12,0.1,0.12,0.07,0.09,0.1,0.11,0.12,0.1,0.09,0.1,0.11,0.12,0.12,0.09,0.11,0.12,0.12,0.06,0.09,0.08,0.12,0,10.1,-0.83,1520,840.91,2166.67,3.98,3.21,2.74,5.12,4.17,5.12,11.77},2},
{{0.07,0.1,0.12,0.12,0.1,0.09,0.12,0.08,0.1,0.13,0.11,0.08,0.09,0.1,0.13,0.13,0.09,0.09,0.08,0.12,0.1,0.09,0.11,0.09,0.11,0.13,0.09,0.07,0.12,0.11,0,10.05,-0.71,2116.67,818.18,1625,3.86,3.09,2.63,5.11,4.03,5.11,11.63},2},
{{0.06,0.12,0.08,0.14,0.12,0.07,0.11,0.11,0.1,0.1,0.11,0.07,0.11,0.13,0.07,0.15,0.1,0.09,0.12,0.08,0.09,0.09,0.11,0.11,0.12,0.11,0.07,0.08,0.1,0.14,0,10.06,-0.62,1833.33,820.83,2200,3.78,3.06,2.84,4.99,4,4.99,11.65},2},
{{0.1,0.1,0.11,0.09,0.12,0.1,0.09,0.1,0.1,0.11,0.12,0.05,0.13,0.11,0.1,0.1,0.12,0.07,0.12,0.07,0.08,0.13,0.08,0.1,0.11,0.11,0.09,0.11,0.09,0.11,0,9.92,-0.71,3750,712.5,2500,3.8,3.14,2.69,5.02,4.13,5.02,11.52},2},
{{0.08,0.1,0.14,0.13,0.11,0.06,0.09,0.08,0.1,0.12,0.11,0.09,0.12,0.07,0.1,0.1,0.08,0.15,0.12,0.08,0.09,0.12,0.13,0.08,0.09,0.14,0.07,0.08,0.07,0.14,0,10.03,-0.74,1625,950,2166.67,3.79,3.26,2.71,5.17,4.13,5.17,11.67},2},
{{0.07,0.08,0.12,0.18,0.09,0.08,0.09,0.09,0.13,0.11,0.11,0.06,0.1,0.11,0.1,0.13,0.14,0.08,0.11,0.07,0.09,0.13,0.13,0.07,0.09,0.14,0.07,0.08,0.09,0.12,0,9.97,-0.7,1887.5,961.11,3775,3.83,3,2.8,5.15,3.98,5.15,11.63},2},
{{0.1,0.08,0.11,0.14,0.1,0.07,0.11,0.08,0.09,0.13,0.12,0.1,0.11,0.09,0.08,0.11,0.1,0.09,0.12,0.08,0.14,0.12,0.08,0.11,0.08,0.11,0.06,0.09,0.13,0.12,0,9.96,-0.69,1650,689.29,1850,3.92,3.34,2.97,5.19,4.28,5.19,11.73},2},
{{0.08,0.14,0.12,0.1,0.07,0.07,0.11,0.1,0.13,0.11,0.08,0.12,0.11,0.09,0.11,0.09,0.12,0.07,0.13,0.1,0.1,0.12,0.12,0.11,0.11,0.09,0.08,0.08,0.09,0.12,0,10.08,-0.73,3900,653.85,2075,3.91,3.22,2.89,5.14,4.1,5.14,11.76},2},
{{0.1,0.09,0.11,0.11,0.08,0.15,0.08,0.08,0.09,0.12,0.12,0.06,0.1,0.11,0.11,0.1,0.1,0.13,0.12,0.09,0.08,0.09,0.1,0.12,0.09,0.12,0.14,0.07,0.12,0.11,0,10.06,-0.61,1490,738.46,2483.33,3.91,3.11,2.61,5.23,4.02,5.23,11.68},2},
{{0.1,0.1,0.07,0.09,0.12,0.11,0.13,0.12,0.08,0.11,0.09,0.1,0.13,0.11,0.09,0.1,0.13,0.08,0.11,0.08,0.08,0.08,0.09,0.1,0.15,0.12,0.12,0.07,0.11,0.11,0,9.9,-0.72,1900,779.17,2175,3.97,3.05,2.48,5.1,3.94,5.1,11.46},2},
{{0.07,0.1,0.11,0.08,0.13,0.11,0.11,0.15,0.1,0.07,0.06,0.13,0.08,0.11,0.12,0.12,0.11,0.14,0.08,0.08,0.04,0.07,0.17,0.13,0.08,0.14,0.07,0.12,0.1,0.1,0,10.02,-0.67,2225,1061.11,2225,3.59,2.75,2.43,4.59,3.61,4.59,11.36},2},
{{0.04,0.09,0.08,0.12,0.12,0.16,0.12,0.14,0.1,0.05,0.02,0.15,0.11,0.09,0.14,0.15,0.09,0.13,0.08,0.08,0.06,0.06,0.11,0.09,0.15,0.15,0.12,0.07,0.09,0.13,0,10.1,-0.65,2850,1133.33,3425,3.44,2.6,2.39,4.27,3.38,4.27,11.31},2},
{{0.03,0.1,0.08,0.08,0.14,0.15,0.14,0.06,0.07,0.06,0.02,0.14,0.1,0.1,0.11,0.1,0.11,0.09,0.11,0.05,0.06,0.04,0.08,0.1,0.13,0.12,0.11,0.1,0.13,0.05,0,8.84,-0.72,2500,1537.5,3400,2.89,2.31,1.94,4.09,3.39,4.09,9.84},2},
{{0.13,0.11,0.09,0.11,0.13,0.11,0.08,0.06,0.1,0.11,0.1,0.11,0.09,0.13,0.11,0.13,0.1,0.11,0.07,0,0.11,0.08,0.1,0.09,0.11,0.1,0.17,0.09,0.07,0.1,0,7.01,-0.84,685,630,2650,7.79,6.89,3.31,9.8,7.98,9.8,13.14},0},
{{0.13,0.17,0.08,0.07,0.06,0.08,0.07,0.08,0.15,0.13,0.14,0.09,0.09,0.1,0.06,0.13,0.1,0.08,0.11,0,0.14,0.14,0.17,0.08,0.11,0.09,0.07,0.09,0.06,0.08,0,7.88,-1.8,691.67,497.22,2450,8.46,7.78,3.51,10.64,8.81,10.64,14.67},0},
{{0.12,0.1,0.12,0.1,0.12,0.05,0.02,0.07,0.15,0.15,0.12,0.12,0.1,0.1,0.06,0.09,0.12,0.06,0.06,0,0.12,0.15,0.16,0.1,0.08,0.1,0.1,0.04,0.07,0.1,0,7.68,-1.42,480,550,1950,8.66,7.98,3.69,10.96,8.88,10.96,14.82},0},
{{0.12,0.13,0.1,0.08,0.06,0.1,0.12,0.11,0.09,0.13,0.08,0.12,0.11,0.12,0.07,0.08,0.11,0.06,0.13,0,0.12,0.13,0.13,0.07,0.13,0.08,0.14,0.04,0.1,0.09,0,8.1,-1.26,750,642.86,1837.5,8.44,7.86,3.6,10.46,8.74,10.46,14.63},0},
{{0.12,0.14,0.09,0.1,0.07,0.04,0.09,0.15,0.1,0.09,0.12,0.08,0.09,0.11,0.07,0.09,0.1,0.09,0.12,0,0.13,0.12,0.11,0.13,0.08,0.09,0.09,0.1,0.08,0.09,0,8.56,-1.42,805,786.36,2025,8.63,8.06,3.58,10.75,9,10.75,15.16},0},
{{0.13,0.12,0.07,0.08,0.08,0.09,0.1,0.08,0.09,0.17,0.11,0.11,0.08,0.1,0.12,0.07,0.08,0.09,0.14,0,0.1,0.11,0.07,0.11,0.14,0.12,0.07,0.08,0.08,0.13,0,7.81,-0.56,639.29,650,4350,9.2,7.93,3.9,11.19,8.92,11.19,15.16},0},
{{0.11,0.09,0.11,0.06,0.12,0.08,0.07,0.1,0.12,0.15,0.1,0.12,0.11,0.1,0.08,0.11,0.11,0.08,0.09,0,0.14,0.13,0.1,0.08,0.1,0.08,0.08,0.09,0.08,0.14,0,7.54,-0.78,676.92,486.11,1175,9.08,7.68,4.23,11.15,8.68,11.15,14.95},0},
{{0.08,0.08,0.1,0.11,0.13,0.13,0.09,0.14,0.05,0.1,0.08,0.12,0.1,0.07,0.11,0.13,0.12,0.08,0.12,0,0.1,0.1,0.06,0.12,0.08,0.07,0.09,0.16,0.12,0.12,0,7.74,-0.28,1250,586.67,4225,8.33,7.23,3.83,10.19,8.33,10.19,14.1},0},
{{0.11,0.07,0.12,0.12,0.09,0.12,0.09,0.1,0.11,0.08,0.1,0.08,0.12,0.12,0.12,0.11,0.08,0.07,0.15,0,0.12,0.11,0.09,0.11,0.08,0.12,0.1,0.08,0.15,0.08,0,7.39,-1.02,870,445.24,2300,8.19,7.26,3.55,10.12,8.37,10.12,13.69},0},
{{0.06,0.07,0.11,0.13,0.18,0.12,0.1,0.12,0.06,0.07,0.09,0.11,0.11,0.12,0.1,0.11,0.1,0.09,0.09,0,0.08,0.06,0.11,0.11,0.08,0.11,0.14,0.1,0.14,0.09,0,7.25,-0.39,1910,678.57,1500,7.84,7.42,3.4,9.56,8.47,9.56,13.3},0},
{{0.08,0.11,0.12,0.11,0.08,0.09,0.11,0.09,0.12,0.1,0.11,0.07,0.12,0.08,0.16,0.07,0.11,0.07,0.1,0,0.09,0.12,0.11,0.11,0.07,0.11,0.11,0.14,0.08,0.08,0,7.6,-1.04,875,481.58,3975,8.31,7.5,3.38,10.34,8.56,10.34,13.92},0},
{{0.11,0.14,0.07,0.12,0.15,0.08,0.09,0.1,0.08,0.08,0.06,0.17,0.11,0.13,0.12,0.08,0.1,0.04,0.1,0,0.14,0.07,0.06,0.15,0.07,0.15,0.09,0.14,0.06,0.1,0,6.67,-0.9,827.27,525,4200,7.73,7.24,3.52,9.63,8.33,9.63,13.06},0},
{{0.09,0.1,0.09,0.1,0.09,0.1,0.12,0.1,0.12,0.09,0.08,0.11,0.11,0.1,0.08,0.13,0.09,0.13,0.11,0,0.08,0.09,0.13,0.09,0.12,0.12,0.06,0.06,0.09,0.19,0,7.94,-0.15,775,413.04,1366.67,8.82,7.31,4.05,10.7,8.29,10.7,14.67},0},
{{0.08,0.13,0.09,0.09,0.09,0.13,0.07,0.1,0.1,0.13,0.12,0.09,0.11,0.07,0.09,0.1,0.12,0.14,0.05,0,0.1,0.1,0.08,0.12,0.14,0.08,0.12,0.08,0.09,0.11,0,8.16,-0.83,679.17,471.05,1600,8.9,7.69,3.4,10.95,8.69,10.95,14.8},0},
{{0.09,0.12,0.1,0.12,0.1,0.05,0.14,0.13,0.11,0.05,0.13,0.1,0.09,0.11,0.07,0.1,0.12,0.11,0.07,0,0.09,0.08,0.09,0.1,0.14,0.09,0.1,0.11,0.11,0.12,0,7.62,-0.5,1050,409.09,2650,8.02,7.7,3.58,9.93,8.63,9.93,13.91},0},
{{0.07,0.1,0.16,0.08,0.1,0.12,0.09,0.08,0.05,0.16,0.14,0.09,0.08,0.1,0.13,0.07,0.11,0.1,0.12,0,0.09,0.12,0.07,0.1,0.12,0.12,0.1,0.1,0.09,0.11,0,7.2,-0.65,512.5,428.95,2975,8.29,7.59,3.48,10.58,8.67,10.58,13.97},0},
{{0.12,0.15,0.09,0.09,0.05,0.13,0.08,0.05,0.12,0.14,0.1,0.09,0.12,0.08,0.09,0.12,0.09,0.1,0.12,0,0.16,0.13,0.1,0.08,0.09,0.11,0.09,0.1,0.06,0.11,0,7.91,-1.3,736.36,481.58,2775,8.53,7.55,3.82,10.74,8.55,10.74,14.71},0},
{{0.1,0.08,0.15,0.06,0.1,0.09,0.16,0.05,0.13,0.1,0.1,0.09,0.07,0.12,0.1,0.14,0.1,0.12,0.08,0,0.09,0.13,0.09,0.09,0.11,0.11,0.11,0.07,0.13,0.1,0,7.87,-0.84,925,530.56,2875,8.49,7.24,3.49,10.41,8.36,10.41,14.34},0},
{{0.11,0.07,0.06,0.12,0.12,0.13,0.14,0.14,0.06,0.07,0.09,0.07,0.13,0.11,0.1,0.12,0.12,0.12,0.08,0,0.07,0.11,0.08,0.14,0.15,0.07,0.1,0.11,0.12,0.07,0,7.75,-0.93,1200,463.89,3825,8.33,6.91,3.17,9.85,7.95,9.85,13.69},0},
{{0.09,0.09,0.09,0.13,0.07,0.14,0.11,0.09,0.13,0.07,0.11,0.12,0.1,0.08,0.11,0.07,0.15,0.12,0.09,0,0.08,0.09,0.09,0.08,0.13,0.07,0.1,0.17,0.12,0.09,0,7.55,-0.24,1121.43,515.79,1950,8.45,7.58,3.54,10.25,8.49,10.25,14.11},0},
{{0.08,0.09,0.08,0.12,0.12,0.09,0.14,0.17,0.06,0.08,0.12,0.05,0.12,0.1,0.11,0.1,0.08,0.16,0.08,0,0.09,0.1,0.1,0.12,0.09,0.08,0.12,0.07,0.11,0.13,0,7.73,-0.42,835,389.58,3975,8.5,7.57,3.93,10.16,8.64,10.16,14.68},0},
{{0.13,0.1,0.1,0.09,0.09,0.13,0.13,0.08,0.1,0.08,0.13,0.11,0.09,0.12,0.11,0.13,0.08,0.04,0.13,0,0.09,0.09,0.14,0.13,0.11,0.12,0.08,0.08,0.11,0.08,0,6.77,-1.21,1341.67,482.35,2650,8.05,7.15,3.27,9.84,8.44,9.84,13.34},0},
{{0.09,0.08,0.12,0.12,0.09,0.09,0.12,0.1,0.11,0.1,0.09,0.09,0.13,0.1,0.11,0.11,0.07,0.13,0.15,0,0.09,0.1,0.1,0.08,0.07,0.11,0.13,0.12,0.15,0.08,0,7.65,-0.49,1483.33,481.58,1737.5,8.34,7.41,3.49,10.26,8.39,10.26,13.88},0},
{{0.1,0.13,0.13,0.11,0.09,0.09,0.1,0.09,0.15,0.04,0.06,0.13,0.08,0.11,0.16,0.13,0.1,0.1,0.08,0,0.1,0.08,0.09,0.07,0.11,0.13,0.14,0.1,0.13,0.08,0,7.35,-0.59,1114.29,590.63,2100,7.65,6.72,3.33,9.59,7.92,9.59,13.1},0},
{{0.13,0.13,0.08,0.08,0.11,0.09,0.09,0.12,0.11,0.08,0.1,0.07,0.14,0.14,0.14,0.06,0.09,0.1,0.06,0,0.1,0.14,0.11,0.1,0.05,0.11,0.09,0.08,0.15,0.1,0,7.03,-0.79,1088.89,519.44,1975,8.02,7.23,3.65,9.92,8.25,9.92,13.44},0},
{{0.09,0.08,0.13,0.11,0.1,0.08,0.11,0.11,0.11,0.09,0.11,0.16,0.08,0.1,0.08,0.09,0.09,0.14,0.12,0,0.09,0.07,0.08,0.06,0.1,0.16,0.1,0.14,0.11,0.11,0,7.22,-0.23,1228.57,436.36,2275,8.36,7.71,3.5,10.35,8.63,10.35,13.99},0},
{{0.1,0.09,0.13,0.1,0.13,0.09,0.13,0.12,0.09,0.05,0.06,0.09,0.1,0.12,0.12,0.13,0.07,0.17,0.09,0,0.08,0.06,0.15,0.14,0.07,0.09,0.09,0.14,0.07,0.14,0,7.92,-0.46,2450,452.94,3625,7.75,6.98,3.76,9.55,7.98,9.55,13.67},0},
{{0.09,0.07,0.11,0.14,0.09,0.12,0.12,0.13,0.1,0.05,0.1,0.1,0.1,0.09,0.08,0.11,0.11,0.13,0.11,0,0.07,0.08,0.12,0.14,0.07,0.11,0.08,0.13,0.15,0.08,0,8.04,-0.35,1107.14,481.58,950,8.12,7.56,3.6,9.83,8.53,9.83,14.22},0},
{{0.09,0.04,0.08,0.11,0.14,0.18,0.15,0.1,0.08,0.05,0.13,0.09,0.11,0.07,0.1,0.11,0.11,0.14,0.12,0,0.08,0.05,0.08,0.11,0.13,0.07,0.12,0.18,0.09,0.11,0,7.67,-0.26,2700,775,2166.67,8.17,7.38,3.3,9.56,8.38,9.56,13.8},0},
{{0,0,0,0.03,0.01,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.01,0,0,0,0,0.01,0.01,0,0.01,0.01,0,0,0.01,0,0.4,-0.04,2700,775,2166.67,0.15,0.38,0.11,4.55,11.33,4.55,0.44},0},
{{0.11,0.09,0.06,0.05,0.07,0.09,0.11,0.12,0.14,0.05,0.08,0.11,0.08,0.1,0.13,0.09,0.11,0.1,0.1,0,0.12,0.06,0.05,0.08,0.07,0.13,0.13,0.11,0.11,0,0,9.56,0.34,4125,1987.5,3975,3.88,2.66,2.4,4.82,3.39,4.82,11.05},5},
{{0.1,0.11,0.09,0.12,0.11,0.1,0.11,0.07,0.11,0.03,0.1,0.11,0.1,0.09,0.11,0.09,0.09,0.12,0.11,0,0.08,0.14,0.08,0.09,0.1,0.1,0.08,0.11,0.15,0,0,9.36,0.03,2800,1470,1825,4.41,2.69,2.18,5.18,3.38,5.18,11.08},5},
{{0.1,0.1,0.13,0.07,0.14,0.11,0.09,0.12,0.09,0.03,0.12,0.1,0.1,0.09,0.11,0.1,0.11,0.09,0.11,0,0.11,0.09,0.14,0.09,0.1,0.11,0.11,0.09,0.13,0,0,9.18,-0.43,3550,1383.33,850,4.53,2.57,1.78,5.19,3.28,5.19,10.84},5},
{{0.11,0.09,0.09,0.09,0.1,0.1,0.12,0.11,0.11,0.06,0.09,0.1,0.08,0.1,0.1,0.12,0.12,0.09,0.12,0,0.11,0.1,0.1,0.08,0.12,0.09,0.13,0.14,0.06,0,0,9.31,-0.27,3775,2075,1320,4.25,2.5,1.92,5.02,3.31,5.02,10.86},5},
{{0.1,0.09,0.12,0.1,0.12,0.13,0.06,0.13,0.08,0.04,0.1,0.09,0.12,0.13,0.09,0.11,0.08,0.14,0.05,0,0.07,0.11,0.12,0.12,0.15,0.1,0.08,0.1,0.08,0,0,9.26,-0.32,2525,1221.43,1625,4.42,2.52,1.8,5.1,3.3,5.1,10.83},5},
{{0.08,0.12,0.12,0.11,0.11,0.07,0.11,0.09,0.07,0.01,0.11,0.09,0.09,0.08,0.09,0.1,0.09,0.08,0.11,0,0.11,0.1,0.09,0.08,0.11,0.1,0.1,0.06,0.08,0,0,8.19,-0.35,2275,1225,1675,4.19,2.37,1.73,5.19,3.42,5.19,9.74},5},
{{0.13,0.13,0.11,0.1,0.1,0.06,0.11,0.11,0.08,0.07,0.07,0.11,0.09,0.1,0.12,0.1,0.11,0.11,0.1,0.12,0.05,0.1,0.1,0.09,0.08,0.11,0.14,0.11,0.09,0.14,0,8.72,0.81,2700,1500,1750,5.36,2.51,1.97,6.3,3.13,6.3,10.97},1},
{{0.11,0.09,0.09,0.09,0.1,0.11,0.12,0.09,0.11,0.12,0.12,0.08,0.07,0.11,0.06,0.11,0.16,0.1,0.11,0.1,0.15,0.14,0.08,0.07,0.08,0.09,0.08,0.11,0.06,0.16,0,8.71,0.29,862.5,3725,825,5.96,2.67,2.32,6.85,3.39,6.85,11.36},1},
{{0.11,0.1,0.08,0.09,0.11,0.1,0.09,0.13,0.08,0.12,0.1,0.11,0.11,0.1,0.1,0.11,0.06,0.11,0.12,0.1,0.11,0.09,0.14,0.09,0.12,0.11,0.11,0.07,0.13,0.06,0,8.49,0.09,2783.33,835.71,1850,6.07,2.64,1.83,7.1,3.25,7.1,11.16},1},
{{0.06,0.09,0.1,0.12,0.12,0.11,0.08,0.1,0.13,0.11,0.1,0.08,0.13,0.1,0.1,0.1,0.1,0.13,0.1,0.09,0.09,0.09,0.1,0.13,0.09,0.1,0.1,0.11,0.12,0.07,0,8.55,0.37,1887.5,2366.67,3100,6,2.53,2.02,6.75,3.14,6.75,11.15},1},
{{0.09,0.11,0.12,0.1,0.09,0.1,0.12,0.09,0.09,0.1,0.11,0.12,0.11,0.09,0.12,0.08,0.1,0.07,0.08,0.12,0.08,0.1,0.1,0.13,0.09,0.13,0.08,0.1,0.12,0.08,0,8.54,0.45,583.33,1800,2600,5.72,2.86,1.97,6.65,3.58,6.65,11.11},1},
{{0.02,0,0.02,0.01,0,0.02,0,0.01,0.02,0.01,0,0.02,0,0.02,0.02,0.01,0.01,0.01,0.01,0,0.02,0,0.01,0.01,0.02,0,0.01,0.01,0.01,0.03,0,0.71,0.06,583.33,133.33,350,0.51,0.65,0.32,6.74,7.44,6.74,1},1},
{{0.11,0.08,0.1,0.12,0.07,0.1,0.08,0.14,0.11,0.13,0.1,0.1,0.09,0.13,0.08,0.1,0.11,0.1,0.09,0.13,0.13,0.09,0.09,0.08,0.06,0.08,0.11,0.13,0.12,0.13,0,10.26,-0.13,3125,1358.33,925,2.82,2.61,2.02,3.64,3.21,3.64,11.15},5},
{{0.09,0.11,0.1,0.12,0.1,0.14,0.11,0.13,0.08,0.05,0.08,0.1,0.09,0.12,0.14,0.11,0.1,0.08,0.09,0.12,0.09,0.08,0.09,0.11,0.15,0.15,0.08,0.11,0.1,0.06,0,10.32,-0.32,1800,950,3225,2.21,2.51,1.55,2.8,3.14,2.8,10.87},5},
{{0.09,0.13,0.09,0.06,0.13,0.07,0.09,0.12,0.11,0.12,0.09,0.15,0.13,0.11,0.06,0.05,0.12,0.09,0.11,0.1,0.11,0.18,0.07,0.09,0.09,0.1,0.1,0.08,0.09,0.11,0,10.09,-0.41,3350,1214.29,1830,2.91,2.84,2.01,3.79,3.48,3.79,11.05},5},
{{0.1,0.12,0.09,0.1,0.09,0.1,0.13,0.07,0.1,0.13,0.14,0.08,0.08,0.1,0.07,0.13,0.11,0.1,0.1,0.1,0.1,0.1,0.12,0.12,0.14,0.07,0.08,0.08,0.1,0.11,0,10.06,-0.34,1112.5,1000,1333.33,2.79,2.7,1.93,3.62,3.49,3.62,10.97},5},
{{0.11,0.08,0.14,0.1,0.1,0.07,0.1,0.08,0.13,0.11,0.09,0.11,0.08,0.08,0.11,0.13,0.09,0.09,0.12,0.1,0.09,0.11,0.14,0.08,0.12,0.11,0.11,0.09,0.07,0.1,0,10.3,-0.25,2100,1516.67,2000,2.76,2.6,1.84,3.6,3.29,3.6,11.13},5},
{{0.08,0.06,0.07,0.06,0.09,0.1,0.09,0.03,0.05,0.04,0.06,0.05,0.07,0.06,0.08,0.06,0.06,0.1,0.07,0.04,0.05,0.03,0.06,0.07,0.05,0.07,0.09,0.09,0.09,0.06,0,6.53,0.05,1050,1625,1950,1.5,2.45,1.09,3.16,4.7,3.16,6.94},5},
{{0.11,0.07,0.09,0.11,0.1,0.11,0.08,0.12,0.11,0.12,0.11,0.11,0.09,0.09,0.1,0.09,0.12,0.09,0.11,0.12,0.12,0.07,0.09,0.09,0.09,0.12,0.11,0.13,0.12,0.08,0,9.87,0.49,2500,1257.14,975,3.36,2.97,2.01,4.24,3.73,4.24,11.06},1},
{{0.06,0.1,0.13,0.11,0.1,0.12,0.09,0.12,0.08,0.11,0.08,0.1,0.13,0.1,0.1,0.12,0.11,0.09,0.12,0.08,0.06,0.13,0.12,0.11,0.12,0.1,0.09,0.08,0.09,0.12,0,9.81,0.57,1500,1540,1500,3.34,2.65,1.83,4.01,3.25,4.01,10.81},1},
{{0.1,0.11,0.08,0.1,0.12,0.08,0.16,0.08,0.12,0.07,0.1,0.1,0.09,0.08,0.12,0.14,0.09,0.13,0.08,0.1,0.11,0.08,0.12,0.1,0.1,0.13,0.09,0.1,0.1,0.09,0,9.81,0.32,3600,950,4200,3.46,2.64,1.91,4.21,3.25,4.21,10.93},1},
{{0.14,0.08,0.1,0.1,0.1,0.09,0.07,0.12,0.1,0.12,0.1,0.11,0.11,0.1,0.1,0.09,0.11,0.09,0.1,0.12,0.11,0.16,0.08,0.07,0.09,0.09,0.09,0.12,0.09,0.14,0,9.85,0.47,1616.67,1128.57,3200,3.69,2.97,2.14,4.54,3.66,4.54,11.15},1},
{{0.09,0.12,0.12,0.08,0.09,0.1,0.08,0.08,0.09,0.08,0.11,0.08,0.08,0.13,0.09,0.07,0.07,0.11,0.09,0.09,0.1,0.06,0.1,0.1,0.11,0.07,0.12,0.08,0.11,0.08,0,8.82,0.51,3250,2500,2050,3.36,2.7,1.75,4.58,3.83,4.58,9.96},1},
{{0.19,0.13,0.13,0.07,0.07,0.1,0.07,0.07,0.08,0.11,0.1,0.08,0.07,0.07,0.1,0.11,0.07,0.09,0.15,0.18,0.14,0.12,0.14,0.09,0.07,0.08,0.07,0.12,0.09,0.09,0,9.6,-0.69,1375,2383.33,2383.33,5.15,2.85,1.86,6.25,3.36,6.25,11.58},5},
{{0.09,0.09,0.11,0.1,0.11,0.08,0.12,0.13,0.12,0.08,0.1,0.12,0.1,0.11,0.09,0.09,0.13,0.08,0.09,0.1,0.11,0.14,0.11,0.1,0.07,0.12,0.09,0.07,0.11,0.11,0,8.71,-0.55,2450,1400,2425,5.75,2.44,1.84,6.56,3.13,6.56,11.04},5},
{{0.07,0.09,0.08,0.14,0.11,0.11,0.1,0.09,0.11,0.12,0.12,0.12,0.11,0.08,0.09,0.12,0.1,0.12,0.07,0.11,0.09,0.11,0.11,0.12,0.1,0.11,0.07,0.11,0.08,0.12,0,8.51,-0.5,2525,661.11,1575,6.09,2.35,1.68,7.05,2.96,7.05,11.07},5},
{{0.08,0.11,0.12,0.09,0.12,0.09,0.12,0.12,0.08,0.1,0.09,0.1,0.11,0.15,0.11,0.08,0.1,0.1,0.09,0.1,0.1,0.06,0.08,0.12,0.11,0.11,0.11,0.14,0.09,0.11,0,8.55,-0.28,4200,587.5,1250,5.71,2.47,1.64,6.58,3.2,6.58,10.86},5},
{{0.07,0.09,0.08,0.1,0.12,0.1,0.13,0.1,0.13,0.1,0.08,0.09,0.12,0.14,0.12,0.12,0.11,0.09,0.09,0.06,0.06,0.05,0.08,0.12,0.15,0.14,0.11,0.11,0.12,0.08,0,8.45,-0.26,2666.67,3100,1370,5.99,1.98,1.45,6.73,2.57,6.73,10.84},5},
{{0.1,0.09,0.08,0.08,0.09,0.09,0.08,0.1,0.06,0.1,0.11,0.08,0.09,0.05,0.09,0.08,0.11,0.11,0.1,0.07,0.09,0.1,0.08,0.06,0.07,0.08,0.11,0.08,0.11,0.09,0,7.5,-0.36,2200,2283.33,1775,4.81,2.13,1.52,6.57,3.19,6.57,9.42},5},
{{0.07,0.1,0.13,0.11,0.07,0.1,0.12,0.12,0.11,0.1,0.14,0.08,0.11,0.09,0.08,0.1,0.11,0.09,0.11,0.12,0.07,0.07,0.1,0.07,0.12,0.09,0.14,0.11,0.11,0.13,0,9.92,0.68,4450,1562.5,2350,2.99,2.96,1.81,3.73,3.6,3.73,10.84},1},
{{0.12,0.1,0.09,0.09,0.12,0.11,0.08,0.1,0.1,0.12,0.07,0.08,0.11,0.11,0.11,0.13,0.12,0.08,0.11,0.09,0.11,0.1,0.08,0.15,0.07,0.11,0.08,0.12,0.1,0.11,0,10.05,0.17,1850,1812.5,2337.5,2.96,2.47,1.83,3.8,3.07,3.8,10.95},1},
{{0.1,0.08,0.1,0.11,0.11,0.12,0.11,0.09,0.12,0.09,0.11,0.16,0.1,0.09,0.11,0.06,0.11,0.08,0.08,0.13,0.07,0.11,0.1,0.12,0.14,0.13,0.07,0.11,0.11,0.07,0,9.86,0.16,1512.5,1290,1700,2.91,2.91,1.57,3.65,3.48,3.65,10.69},1},
{{0.12,0.09,0.11,0.08,0.09,0.1,0.11,0.14,0.07,0.13,0.1,0.09,0.09,0.07,0.13,0.13,0.09,0.13,0.09,0.1,0.12,0.12,0.12,0.09,0.07,0.1,0.1,0.09,0.09,0.13,0,10.04,0.1,4450,1512.5,3800,2.98,2.63,1.91,3.82,3.25,3.82,11.01},1},
{{0.09,0.12,0.13,0.1,0.1,0.1,0.08,0.1,0.11,0.1,0.08,0.12,0.11,0.13,0.12,0.09,0.06,0.11,0.11,0.09,0.09,0.12,0.09,0.12,0.11,0.08,0.12,0.1,0.1,0.08,0,9.89,0.13,2175,1156.25,325,2.89,2.79,1.73,3.76,3.41,3.76,10.79},1},
{{0.06,0.04,0.02,0.05,0.05,0.03,0.05,0.01,0.04,0.03,0.04,0.03,0.03,0.02,0.02,0.05,0.06,0.06,0.04,0.04,0.07,0.05,0.04,0.02,0.02,0.05,0.03,0.03,0.03,0.03,0,3.74,-0.16,475,475,333.33,0.97,2.4,0.76,3.36,7.43,3.36,4.05},1},
{{0.09,0.1,0.09,0.11,0.1,0.1,0.13,0.1,0.1,0.1,0.13,0.12,0.08,0.12,0.08,0.09,0.1,0.08,0.13,0.1,0.09,0.06,0.08,0.12,0.07,0.1,0.11,0.12,0.13,0.15,0,9.67,0.24,1525,2500,4075,3.75,2.66,1.88,4.71,3.26,4.71,10.92},5},
{{0.11,0.1,0.07,0.12,0.1,0.11,0.11,0.12,0.09,0.1,0.11,0.08,0.13,0.1,0.08,0.12,0.11,0.07,0.13,0.1,0.13,0.09,0.09,0.12,0.11,0.1,0.14,0.04,0.11,0.09,0,9.71,-0.37,2750,1150,1900,3.72,2.4,1.72,4.65,3.05,4.65,10.92},5},
{{0.11,0.08,0.07,0.09,0.07,0.16,0.09,0.15,0.12,0.09,0.1,0.11,0.11,0.09,0.11,0.1,0.07,0.14,0.06,0.12,0.07,0.12,0.13,0.08,0.09,0.12,0.11,0.13,0.09,0.08,0,9.74,-0.22,3875,2250,1340,3.81,2.5,1.61,4.61,3.09,4.61,10.89},5},
{{0.09,0.13,0.1,0.1,0.07,0.09,0.1,0.08,0.12,0.15,0.07,0.13,0.07,0.11,0.1,0.11,0.11,0.12,0.14,0.07,0.14,0.13,0.11,0.09,0.11,0.08,0.06,0.12,0.07,0.1,0,9.78,-0.36,3275,1850,3900,3.83,2.33,1.98,4.72,2.94,4.72,11.1},5},
{{0.1,0.09,0.1,0.12,0.1,0.09,0.1,0.09,0.12,0.12,0.08,0.08,0.1,0.11,0.1,0.13,0.12,0.11,0.1,0.09,0.11,0.13,0.1,0.1,0.1,0.08,0.11,0.11,0.09,0.1,0,9.84,-0.38,3033.33,2266.67,2875,3.63,2.24,1.69,4.37,2.89,4.37,10.93},5},
{{0.1,0.09,0.11,0.12,0.13,0.12,0.1,0.1,0.08,0.08,0.12,0.09,0.11,0.1,0.14,0.07,0.1,0.09,0.08,0.13,0.08,0.09,0.09,0.11,0.15,0.13,0.13,0.08,0.09,0.08,0,9.69,-0.32,2875,1720,1566.67,3.43,2.59,1.44,4.37,3.26,4.37,10.68},5},
{{0.03,0.03,0.02,0.01,0.02,0.01,0,0.02,0,0,0,0.01,0.02,0.01,0.02,0.02,0.02,0.01,0,0.02,0.01,0,0,0,0,0,0.01,0.03,0.06,0.03,0,1.17,0.2,350,233.33,450,0.23,1.03,0.23,2.45,8.88,2.45,1.24},5},
{{0.17,0.11,0.08,0.13,0.1,0.06,0.08,0.1,0.09,0.1,0.06,0.07,0.1,0.08,0.11,0.12,0.11,0.13,0.12,0.12,0.07,0.07,0.07,0.15,0.1,0.11,0.1,0.11,0.12,0.12,0,9.25,0.98,1875,2000,2525,5.16,2.67,1.96,6.14,3.38,6.14,11.35},1},
{{0.06,0.11,0.14,0.1,0.1,0.09,0.1,0.12,0.11,0.1,0.09,0.12,0.06,0.1,0.09,0.1,0.13,0.13,0.1,0.09,0.11,0.1,0.1,0.11,0.12,0.09,0.1,0.1,0.12,0.06,0,8.82,0.42,1516.67,1762.5,3200,5.78,2.66,1.81,6.61,3.45,6.61,11.14},1},
{{0.11,0.08,0.1,0.12,0.08,0.13,0.08,0.1,0.1,0.12,0.06,0.11,0.13,0.09,0.11,0.09,0.12,0.12,0.07,0.11,0.14,0.13,0.11,0.09,0.09,0.09,0.13,0.08,0.07,0.09,0,8.77,0.32,2200,2733.33,4775,5.7,2.61,1.91,6.59,3.35,6.59,11.09},1},
{{0.06,0.14,0.06,0.1,0.1,0.12,0.1,0.11,0.11,0.12,0.13,0.1,0.11,0.14,0.11,0.1,0.1,0.06,0.07,0.1,0.09,0.08,0.08,0.12,0.13,0.13,0.09,0.11,0.08,0.11,0,8.23,0.75,2950,1291.67,2200,5.98,2.74,1.84,6.9,3.66,6.9,10.97},1},
{{0.06,0.1,0.09,0.11,0.12,0.11,0.12,0.11,0.1,0.1,0.14,0.09,0.12,0.11,0.1,0.07,0.1,0.08,0.11,0.11,0.11,0.13,0.13,0.06,0.08,0.07,0.1,0.12,0.13,0.1,0,8.55,0.61,2000,2833.33,2533.33,5.84,2.87,2.18,6.66,3.61,6.66,11.13},1},
{{0.09,0.06,0.08,0.06,0.05,0.09,0.08,0.06,0.07,0.04,0.09,0.06,0.04,0.07,0.08,0.07,0.06,0.05,0.11,0.06,0.06,0.07,0.05,0.08,0.04,0.07,0.06,0.08,0.06,0.1,0,5.74,0.53,1725,1383.33,750,3.38,2.35,1.27,6.06,4.64,6.06,7.15},1},
{{0.12,0.05,0.09,0.11,0.13,0.13,0.08,0.11,0.11,0.09,0.09,0.09,0.13,0.07,0.13,0.13,0.11,0.11,0.08,0.08,0.09,0.1,0.09,0.1,0.16,0.13,0.12,0.1,0.05,0.1,0,10.04,0.32,1766.67,850,1575,2.03,3.52,2.92,2.69,4.4,2.69,11.16},2},
{{0.11,0.09,0.07,0.08,0.13,0.11,0.14,0.15,0.06,0.09,0.09,0.09,0.12,0.1,0.1,0.11,0.13,0.1,0.11,0.09,0.07,0.09,0.15,0.13,0.11,0.11,0.11,0.09,0.08,0.1,0,10.2,0.35,3175,770.83,1587.5,1.91,3.68,3.04,2.59,4.5,2.59,11.3},2},
{{0.08,0.08,0.12,0.08,0.14,0.1,0.16,0.11,0.09,0.07,0.12,0.08,0.09,0.09,0.15,0.1,0.11,0.11,0.11,0.08,0.07,0.06,0.13,0.14,0.12,0.13,0.11,0.07,0.1,0.1,0,10.01,0.38,1650,625,1912.5,1.84,3.6,3.05,2.52,4.47,2.52,11.16},2},
{{0.09,0.09,0.1,0.11,0.12,0.11,0.13,0.11,0.1,0.07,0.08,0.1,0.09,0.14,0.09,0.1,0.11,0.13,0.11,0.07,0.09,0.05,0.12,0.12,0.12,0.13,0.1,0.11,0.07,0.11,0,10.19,0.62,3825,1085.71,1050,1.9,3.54,3.11,2.5,4.29,2.5,11.28},2},
{{0.09,0.11,0.1,0.11,0.09,0.1,0.11,0.09,0.13,0.09,0.09,0.11,0.12,0.09,0.11,0.09,0.11,0.08,0.12,0.11,0.11,0.11,0.1,0.09,0.13,0.1,0.1,0.08,0.12,0.09,0,10.19,0.18,1766.67,712.5,2100,2.1,3.91,3.19,2.72,4.73,2.72,11.41},2},
{{0.09,0.16,0.1,0.12,0.07,0.09,0.06,0.08,0.11,0.15,0.11,0.1,0.07,0.11,0.12,0.12,0.1,0.08,0.09,0.12,0.1,0.12,0.12,0.1,0.1,0.09,0.12,0.11,0.08,0.09,0,10.11,0.18,3675,703.85,3166.67,2.51,3.9,3.23,3.12,4.83,3.12,11.52},2},
{{0.13,0.07,0.11,0.1,0.12,0.06,0.09,0.15,0.1,0.09,0.1,0.14,0.08,0.09,0.09,0.11,0.08,0.15,0.09,0.1,0.11,0.14,0.07,0.11,0.11,0.09,0.07,0.15,0.08,0.09,0,10.14,0.23,3150,729.17,2100,2.21,3.99,3.35,2.89,4.79,2.89,11.47},2},
{{0.11,0.13,0.11,0.06,0.09,0.08,0.11,0.12,0.11,0.11,0.13,0.1,0.09,0.09,0.11,0.08,0.11,0.08,0.12,0.11,0.15,0.1,0.07,0.1,0.1,0.09,0.1,0.11,0.1,0.1,0,10.11,0.24,3200,804.17,3200,2.26,4.21,3.47,2.9,5.09,2.9,11.59},2},
{{0.08,0.12,0.12,0.13,0.1,0.12,0.1,0.06,0.07,0.13,0.1,0.1,0.12,0.09,0.09,0.08,0.11,0.13,0.12,0.09,0.1,0.09,0.1,0.13,0.07,0.14,0.07,0.11,0.1,0.11,0,10.14,0.48,2100,733.33,2133.33,2.18,3.98,3.39,2.8,4.78,2.8,11.52},2},
{{0.08,0.11,0.1,0.11,0.09,0.11,0.1,0.11,0.13,0.08,0.09,0.08,0.12,0.12,0.12,0.1,0.1,0.1,0.1,0.1,0.09,0.12,0.09,0.1,0.1,0.12,0.08,0.1,0.12,0.1,0,10.17,0.42,2833.33,632.14,2625,2.06,3.66,3.26,2.69,4.52,2.69,11.4},2},
{{0.1,0.12,0.13,0.09,0.09,0.09,0.1,0.08,0.11,0.11,0.12,0.11,0.09,0.07,0.11,0.08,0.15,0.09,0.1,0.09,0.11,0.12,0.1,0.1,0.12,0.06,0.1,0.13,0.1,0.09,0,9.95,0.27,2116.67,1016.67,3725,2.35,4.11,3.37,2.99,4.99,2.99,11.38},2},
{{0.13,0.08,0.06,0.11,0.08,0.11,0.12,0.09,0.1,0.14,0.11,0.11,0.09,0.08,0.12,0.1,0.08,0.08,0.12,0.12,0.13,0.13,0.09,0.08,0.06,0.12,0.12,0.09,0.12,0.08,0,10.19,0.13,2366.67,660.71,1033.33,2.22,4.14,3.4,2.93,5.07,2.93,11.56},2},
{{0.09,0.14,0.1,0.08,0.12,0.09,0.1,0.11,0.07,0.12,0.09,0.1,0.13,0.13,0.08,0.11,0.07,0.1,0.1,0.11,0.08,0.11,0.08,0.13,0.11,0.13,0.1,0.12,0.07,0.1,0,10.15,0.43,3225,636.67,2150,2.13,3.84,3.19,2.67,4.69,2.67,11.38},2},
{{0.09,0.15,0.08,0.1,0.09,0.09,0.11,0.11,0.11,0.11,0.1,0.12,0.11,0.12,0.08,0.1,0.11,0.08,0.09,0.12,0.11,0.09,0.12,0.1,0.09,0.13,0.09,0.11,0.1,0.08,0,10.09,0.37,2083.33,730.77,1825,2.18,3.98,3.23,2.78,4.79,2.78,11.35},2},
{{0.1,0.11,0.11,0.13,0.09,0.08,0.09,0.1,0.12,0.08,0.09,0.13,0.12,0.1,0.06,0.14,0.09,0.08,0.12,0.09,0.12,0.08,0.09,0.09,0.1,0.13,0.12,0.1,0.1,0.1,0,10.02,0.45,1783.33,781.82,1800,2.19,3.87,3.23,2.8,4.67,2.8,11.3},2},
{{0.09,0.1,0.09,0.13,0.09,0.1,0.11,0.11,0.08,0.12,0.12,0.07,0.11,0.11,0.13,0.1,0.09,0.09,0.11,0.1,0.09,0.09,0.1,0.11,0.16,0.12,0.07,0.11,0.09,0.09,0,10.11,0.28,2675,860,1575,2.11,3.76,3.05,2.69,4.63,2.69,11.25},2},
{{0.11,0.09,0.07,0.12,0.09,0.11,0.1,0.12,0.13,0.09,0.1,0.11,0.1,0.11,0.08,0.1,0.08,0.11,0.11,0.12,0.1,0.13,0.11,0.08,0.09,0.14,0.07,0.11,0.13,0.08,0,10.21,0.33,4550,630,1450,2.05,4.14,3.35,2.68,5.01,2.68,11.49},2},
{{0.11,0.07,0.09,0.14,0.12,0.07,0.11,0.07,0.15,0.09,0.1,0.09,0.12,0.09,0.09,0.11,0.1,0.11,0.11,0.1,0.11,0.11,0.13,0.11,0.06,0.08,0.11,0.11,0.11,0.1,0,10.16,0.3,3725,712.5,1600,2.14,3.95,3.47,2.73,4.82,2.73,11.51},2},
{{0.1,0.11,0.11,0.12,0.07,0.1,0.09,0.09,0.13,0.12,0.09,0.12,0.11,0.09,0.09,0.09,0.1,0.11,0.12,0.1,0.12,0.08,0.11,0.12,0.08,0.1,0.09,0.12,0.09,0.1,0,10.18,0.25,3725,850,2816.67,2.25,3.98,3.33,2.84,4.81,2.84,11.49},2},
{{0.1,0.12,0.13,0.09,0.09,0.09,0.11,0.05,0.12,0.12,0.13,0.11,0.09,0.11,0.1,0.07,0.11,0.08,0.1,0.11,0.11,0.08,0.12,0.1,0.07,0.12,0.12,0.08,0.11,0.1,0,9.98,0.42,3700,795.83,1750,2.28,4.11,3.32,2.84,4.98,2.84,11.34},2},
{{0.11,0.11,0.08,0.11,0.11,0.09,0.08,0.07,0.16,0.11,0.09,0.12,0.09,0.13,0.09,0.14,0.08,0.08,0.07,0.13,0.11,0.1,0.12,0.09,0.06,0.12,0.13,0.08,0.11,0.11,0,10.17,0.32,3750,526.47,1783.33,2.26,3.89,3.42,2.83,4.84,2.83,11.53},2},
{{0.13,0.08,0.14,0.1,0.05,0.08,0.1,0.13,0.12,0.1,0.1,0.08,0.12,0.11,0.07,0.12,0.07,0.14,0.08,0.12,0.1,0.14,0.11,0.08,0.09,0.06,0.11,0.11,0.11,0.12,0,10.24,0.38,3750,804.17,2850,2.29,3.94,3.53,2.98,4.77,2.98,11.58},2},
{{0.11,0.12,0.12,0.1,0.08,0.09,0.1,0.11,0.08,0.11,0.09,0.14,0.1,0.1,0.08,0.09,0.11,0.1,0.1,0.12,0.11,0.11,0.09,0.1,0.08,0.1,0.11,0.09,0.15,0.09,0,10.1,0.7,1650,684.62,1862.5,2.23,4.04,3.47,2.81,4.88,2.81,11.46},2},
{{0.1,0.11,0.08,0.1,0.12,0.11,0.1,0.1,0.08,0.11,0.1,0.07,0.11,0.12,0.12,0.11,0.1,0.13,0.06,0.1,0.11,0.07,0.11,0.12,0.08,0.09,0.08,0.12,0.12,0.12,0,10.13,0.65,1900,718.18,2883.33,2.09,3.66,3.57,2.71,4.58,2.71,11.49},2},
{{0.09,0.07,0.11,0.09,0.12,0.13,0.11,0.12,0.08,0.09,0.11,0.08,0.09,0.11,0.09,0.11,0.13,0.11,0.1,0.1,0.09,0.13,0.11,0.08,0.09,0.1,0.09,0.12,0.12,0.11,0,10.14,0.49,2750,758.33,2750,1.94,3.82,3.41,2.6,4.67,2.6,11.42},2},
{{0.09,0.1,0.12,0.09,0.07,0.14,0.11,0.12,0.07,0.11,0.1,0.11,0.09,0.09,0.09,0.1,0.11,0.11,0.13,0.09,0.1,0.11,0.11,0.07,0.11,0.07,0.12,0.12,0.1,0.11,0,10.24,0.55,2150,1131.25,2725,2.05,3.89,3.44,2.69,4.69,2.69,11.51},2},
{{0.1,0.1,0.08,0.12,0.16,0.09,0.11,0.06,0.08,0.11,0.09,0.13,0.1,0.08,0.13,0.09,0.09,0.1,0.1,0.11,0.09,0.11,0.08,0.11,0.11,0.08,0.09,0.14,0.09,0.13,0,10.05,0.69,2650,746.15,1612.5,2.11,3.84,3.37,2.72,4.66,2.72,11.3},2},
{{0.11,0.1,0.12,0.1,0.08,0.12,0.09,0.09,0.08,0.13,0.1,0.12,0.09,0.1,0.09,0.1,0.11,0.1,0.1,0.11,0.09,0.12,0.11,0.09,0.11,0.11,0.09,0.06,0.12,0.13,0,10.16,0.61,3800,629.17,2150,2.22,3.95,3.49,2.8,4.79,2.8,11.54},2},
{{0.1,0.08,0.1,0.09,0.15,0.07,0.1,0.11,0.11,0.1,0.11,0.08,0.12,0.09,0.1,0.11,0.1,0.13,0.1,0.08,0.09,0.1,0.08,0.1,0.1,0.11,0.09,0.1,0.13,0.12,0,10.17,0.71,2725,905,2175,2.1,3.9,3.42,2.74,4.77,2.74,11.51},2},
{{0.12,0.09,0.12,0.06,0.14,0.1,0.1,0.1,0.1,0.1,0.09,0.09,0.11,0.11,0.14,0.08,0.08,0.11,0.1,0.11,0.1,0.08,0.09,0.13,0.12,0.06,0.14,0.08,0.11,0.12,0,10.21,0.58,1450,700,1637.5,2.12,3.81,3.43,2.72,4.64,2.72,11.49},2},
{{0.1,0.07,0.1,0.09,0.11,0.15,0.13,0.1,0.08,0.09,0.11,0.11,0.07,0.13,0.11,0.1,0.08,0.12,0.12,0.08,0.08,0.09,0.11,0.12,0.11,0.06,0.09,0.15,0.1,0.12,0,9.95,0.55,2150,1228.57,1800,1.93,3.78,3.35,2.6,4.57,2.6,11.21},2},
{{0.04,0.02,0.03,0.05,0.06,0.04,0.06,0.03,0.04,0.04,0.03,0.03,0.06,0.03,0.04,0.06,0.06,0.03,0.03,0.04,0.03,0.02,0.03,0.04,0.05,0.04,0.06,0.04,0.05,0.05,0,3.94,0.36,1175,425,1125,0.71,2.54,1.17,2.47,7.52,2.47,4.37},2},
{{0.08,0.09,0.08,0.11,0.13,0.12,0.1,0.09,0.09,0.12,0.08,0.1,0.12,0.13,0.1,0.13,0.1,0.08,0.05,0,0.09,0.1,0.12,0.11,0.08,0.1,0.15,0.09,0.11,0.08,0,7.4,0.84,2466.67,854.55,1983.33,4.12,7.44,7.17,5.34,8.61,5.34,13.66},0},
{{0.11,0.09,0.13,0.12,0.08,0.1,0.08,0.07,0.1,0.12,0.1,0.08,0.09,0.15,0.12,0.09,0.1,0.1,0.08,0,0.13,0.09,0.1,0.14,0.07,0.07,0.08,0.11,0.14,0.09,0,7.47,0.57,1812.5,445.24,3000,4.57,7.66,7.61,5.68,8.85,5.68,14.25},0},
{{0.1,0.05,0.12,0.14,0.07,0.12,0.11,0.11,0.11,0.1,0.12,0.09,0.13,0.1,0.1,0.11,0.11,0.09,0.09,0,0.1,0.13,0.12,0.09,0.1,0.12,0.13,0.06,0.09,0.08,0,7.02,0.32,2525,522.22,2300,4.05,7.63,7.22,5.1,8.88,5.1,13.76},0},
{{0.07,0.13,0.13,0.12,0.1,0.1,0.1,0.1,0.08,0.1,0.11,0.08,0.1,0.13,0.13,0.07,0.08,0.1,0.09,0,0.08,0.11,0.12,0.13,0.11,0.1,0.08,0.1,0.11,0.09,0,7.94,0.52,2000,425,1975,4.14,7.95,6.97,5.15,9.01,5.15,14},0},
{{0.11,0.08,0.13,0.1,0.13,0.08,0.09,0.1,0.11,0.09,0.12,0.06,0.12,0.08,0.13,0.07,0.12,0.1,0.09,0,0.14,0.07,0.12,0.08,0.1,0.09,0.12,0.12,0.12,0.06,0,7.88,0.57,2950,502.63,2933.33,4.26,8.05,7.38,5.29,9.24,5.29,14.4},0},
{{0.08,0.08,0.08,0.14,0.11,0.11,0.12,0.1,0.1,0.09,0.12,0.1,0.07,0.11,0.1,0.11,0.09,0.1,0.09,0,0.1,0.13,0.1,0.1,0.08,0.11,0.06,0.15,0.1,0.1,0,7.68,0.62,2366.67,402.17,1500,3.9,8.1,7.55,4.91,9.33,4.91,14.44},0},
{{0.07,0.12,0.15,0.11,0.09,0.11,0.1,0.15,0.07,0.05,0.11,0.12,0.08,0.09,0.12,0.11,0.08,0.11,0.08,0,0.11,0.11,0.1,0.13,0.1,0.12,0.06,0.11,0.11,0.08,0,7.55,0.41,2416.67,434.09,2100,3.85,7.89,7.26,4.83,9.08,4.83,13.97},0},
{{0.08,0.09,0.08,0.14,0.09,0.11,0.13,0.12,0.1,0.09,0.09,0.1,0.11,0.1,0.14,0.08,0.08,0.13,0.05,0,0.11,0.1,0.09,0.12,0.1,0.12,0.11,0.04,0.1,0.14,0,7.67,0.88,1383.33,530.56,2283.33,3.9,7.84,7.43,4.86,9.01,4.86,14.13},0},
{{0.08,0.11,0.11,0.11,0.12,0.09,0.09,0.12,0.1,0.1,0.06,0.15,0.12,0.07,0.11,0.12,0.1,0.09,0.07,0,0.07,0.12,0.13,0.05,0.15,0.09,0.11,0.09,0.09,0.12,0,7.58,1.03,1512.5,461.9,900,4.17,7.6,7.01,5.14,8.66,5.14,13.86},0},
{{0.12,0.14,0.06,0.1,0.15,0.07,0.06,0.12,0.07,0.13,0.09,0.14,0.07,0.12,0.13,0.1,0.05,0.13,0.06,0,0.09,0.09,0.13,0.1,0.1,0.14,0.05,0.1,0.1,0.12,0,7.54,1.19,2400,393.75,1275,4.59,7.67,7.35,5.6,8.82,5.6,14.2},0},
{{0.12,0.13,0.09,0.08,0.07,0.13,0.1,0.12,0.08,0.11,0.11,0.11,0.1,0.08,0.08,0.12,0.13,0.09,0.08,0,0.14,0.09,0.1,0.05,0.08,0.13,0.12,0.09,0.07,0.15,0,7.69,0.95,1391.67,447.62,1425,4.43,7.94,7.8,5.48,9.13,5.48,14.78},0},
{{0.13,0.11,0.07,0.07,0.12,0.1,0.12,0.11,0.1,0.1,0.1,0.11,0.13,0.08,0.09,0.06,0.12,0.11,0.09,0,0.11,0.09,0.09,0.06,0.12,0.11,0.13,0.06,0.07,0.18,0,7.79,1.66,3050,413.64,1307.14,4.34,8.44,7.24,5.51,9.34,5.51,14.69},0},
{{0.12,0.07,0.09,0.1,0.09,0.1,0.11,0.09,0.19,0.07,0.1,0.08,0.13,0.09,0.09,0.07,0.16,0.09,0.1,0,0.1,0.08,0.07,0.1,0.07,0.19,0.1,0.1,0.12,0.08,0,7.81,1.48,1416.67,467.5,3425,4.39,7.86,6.72,5.46,8.89,5.46,14.13},0},
{{0.1,0.08,0.12,0.11,0.09,0.15,0.1,0.07,0.09,0.11,0.1,0.1,0.09,0.08,0.14,0.11,0.06,0.11,0.1,0,0.06,0.1,0.14,0.1,0.1,0.11,0.12,0.07,0.09,0.14,0,8.04,1.54,1325,427.27,3700,4.28,7.99,7.01,5.56,9.12,5.56,14.42},0},
{{0.13,0.11,0.08,0.12,0.11,0.04,0.13,0.1,0.11,0.09,0.12,0.1,0.1,0.05,0.08,0.14,0.1,0.11,0.07,0,0.12,0.1,0.09,0.11,0.11,0.06,0.12,0.07,0.09,0.14,0,7.88,0.64,1850,415.91,1675,4.51,8.17,7.72,5.49,9.38,5.49,15.09},0},
{{0.13,0.11,0.1,0.07,0.1,0.1,0.13,0.08,0.09,0.11,0.13,0.09,0.12,0.07,0.08,0.12,0.14,0.09,0.08,0,0.13,0.08,0.16,0.09,0.07,0.09,0.11,0.08,0.13,0.09,0,7.01,0.39,2250,431.82,1883.33,4.43,7.94,7.67,5.48,9.2,5.48,14.34},0},
{{0.12,0.08,0.14,0.14,0.1,0.07,0.1,0.06,0.09,0.12,0.09,0.08,0.15,0.11,0.12,0.11,0.1,0.1,0.05,0,0.11,0.12,0.1,0.1,0.08,0.09,0.11,0.11,0.1,0.1,0,7.08,0.56,2375,419.05,2033.33,4.56,7.5,7.49,5.56,8.75,5.56,14.09},0},
{{0.12,0.1,0.08,0.12,0.1,0.1,0.07,0.12,0.11,0.09,0.09,0.14,0.13,0.09,0.09,0.08,0.11,0.13,0.06,0,0.09,0.14,0.12,0.08,0.12,0.1,0.07,0.1,0.08,0.13,0,7,0.64,3250,462.5,1360,4.39,7.96,7.51,5.46,9.01,5.46,14.06},0},
{{0.08,0.12,0.08,0.09,0.11,0.11,0.1,0.13,0.1,0.09,0.12,0.11,0.12,0.06,0.1,0.08,0.1,0.12,0.09,0,0.14,0.08,0.06,0.12,0.12,0.11,0.08,0.11,0.1,0.1,0,7.81,0.86,1883.33,436.36,4225,4.06,8.46,7.37,5.06,9.48,5.06,14.62},0},
{{0.12,0.13,0.1,0.11,0.07,0.08,0.09,0.1,0.1,0.13,0.07,0.1,0.09,0.2,0.09,0.12,0.08,0.08,0.06,0,0.07,0.1,0.1,0.11,0.1,0.07,0.12,0.16,0.12,0.07,0,7.35,1.39,875,531.25,1800,4.76,7.25,6.74,5.72,8.45,5.72,13.68},0},
{{0.11,0.11,0.09,0.08,0.11,0.11,0.1,0.12,0.1,0.09,0.09,0.11,0.1,0.12,0.09,0.08,0.12,0.1,0.09,0,0.11,0.08,0.11,0.08,0.08,0.09,0.11,0.15,0.1,0.12,0,7.98,1.41,3700,402.08,2075,4.32,7.95,7.48,5.46,8.96,5.46,14.62},0},
{{0.11,0.14,0.08,0.09,0.11,0.07,0.15,0.08,0.09,0.09,0.11,0.09,0.1,0.09,0.09,0.14,0.08,0.09,0.08,0,0.11,0.13,0.06,0.09,0.1,0.14,0.09,0.14,0.09,0.07,0,7.75,0.72,2500,378.26,1875,4.38,8.13,7.12,5.4,9.3,5.4,14.54},0},
{{0.1,0.11,0.12,0.1,0.1,0.08,0.08,0.09,0.14,0.11,0.07,0.15,0.07,0.1,0.09,0.1,0.08,0.16,0.07,0,0.09,0.12,0.07,0.09,0.13,0.1,0.13,0.13,0.12,0.06,0,8.16,1.09,2050,379.17,3116.67,4.61,7.95,6.79,5.55,8.9,5.55,14.4},0},
{{0.1,0.12,0.07,0.11,0.08,0.12,0.12,0.06,0.1,0.15,0.12,0.11,0.08,0.12,0.1,0.08,0.1,0.11,0.07,0,0.14,0.11,0.08,0.07,0.12,0.1,0.11,0.08,0.11,0.11,0,7.21,0.55,2775,343.75,1362.5,4.57,8.24,7.75,5.67,9.42,5.67,14.74},0},
{{0.09,0.13,0.05,0.09,0.11,0.09,0.1,0.09,0.14,0.13,0.1,0.09,0.09,0.09,0.1,0.12,0.11,0.07,0.1,0,0.1,0.07,0.1,0.13,0.09,0.05,0.12,0.11,0.11,0.15,0,8.18,1.88,1257.14,454.76,2733.33,4.59,7.86,7.31,5.64,9.06,5.64,14.87},0},
{{0.13,0.07,0.09,0.1,0.12,0.12,0.08,0.1,0.07,0.14,0.12,0.1,0.09,0.11,0.07,0.1,0.12,0.08,0.06,0,0.11,0.12,0.07,0.09,0.11,0.07,0.09,0.15,0.13,0.07,0,7.68,0.9,1060,465,750,4.62,8.37,7.3,5.94,9.44,5.94,14.75},0},
{{0.06,0.09,0.16,0.08,0.11,0.07,0.12,0.14,0.1,0.08,0.12,0.1,0.07,0.12,0.13,0.09,0.13,0.08,0.07,0,0.05,0.12,0.12,0.14,0.14,0.1,0.08,0.07,0.12,0.08,0,7.36,0.79,1633.33,393.48,3150,3.99,7.87,6.73,4.92,9.12,4.92,13.64},0},
{{0.01,0.02,0.03,0.03,0.02,0.05,0.06,0.05,0.02,0.02,0.01,0,0.02,0.04,0.02,0.09,0.06,0.03,0.02,0,0.01,0.01,0.04,0.1,0.07,0.02,0.03,0.02,0.01,0,0,2.72,0.11,1125,383.33,650,0.86,2.23,1.07,3.94,9.22,3.94,3.38},0},
{{0.18,0.11,0.13,0.09,0.13,0.14,0.09,0.06,0.05,0.05,0.11,0.14,0.07,0.1,0.1,0.08,0.09,0.16,0.1,0.09,0.09,0.12,0.09,0.08,0.15,0.12,0.04,0.15,0.11,0.08,0,9.9,0.84,2125,845,1600,2.37,4.08,3.42,3.01,4.86,3.01,11.37},2},
{{0.18,0.12,0.14,0.13,0.12,0.09,0.09,0.04,0.05,0.07,0.11,0.13,0.06,0.11,0.14,0.08,0.09,0.11,0.09,0.11,0.1,0.09,0.11,0.15,0.06,0.14,0.1,0.09,0.1,0.1,0,9.99,0.78,2116.67,563.33,3166.67,2.64,4.11,3.5,3.24,5.05,3.24,11.54},2},
{{0.17,0.08,0.13,0.11,0.1,0.1,0.07,0.11,0.1,0.06,0.1,0.1,0.13,0.1,0.09,0.09,0.11,0.09,0.12,0.09,0.11,0.08,0.1,0.06,0.14,0.16,0.08,0.1,0.07,0.12,0,9.91,0.82,1530,1050,3650,2.38,4.05,3.3,3.07,4.92,3.07,11.34},2},
{{0.18,0.1,0.07,0.12,0.15,0.1,0.07,0.08,0.05,0.11,0.11,0.12,0.1,0.08,0.12,0.07,0.07,0.06,0.16,0.12,0.12,0.09,0.12,0.09,0.12,0.11,0.08,0.06,0.12,0.13,0,9.99,0.85,1625,734.62,1550,2.6,4.36,3.77,3.36,5.26,3.36,11.71},2},
{{0.18,0.1,0.1,0.1,0.08,0.09,0.11,0.09,0.1,0.09,0.12,0.11,0.07,0.1,0.1,0.07,0.12,0.09,0.11,0.13,0.16,0.07,0.1,0.08,0.1,0.09,0.11,0.12,0.09,0.1,0,10.02,0.65,3850,1038.89,2433.33,2.52,4.4,3.74,3.28,5.35,3.28,11.75},2},
{{0.19,0.11,0.08,0.11,0.06,0.09,0.11,0.1,0.07,0.12,0.1,0.13,0.1,0.08,0.08,0.11,0.1,0.08,0.12,0.13,0.12,0.15,0.09,0.08,0.08,0.05,0.12,0.11,0.13,0.09,0,10.02,0.72,4200,669.23,1837.5,2.56,4.3,3.92,3.3,5.2,3.3,11.75},2},
{{0.16,0.12,0.11,0.07,0.08,0.07,0.11,0.1,0.12,0.08,0.11,0.1,0.1,0.09,0.09,0.11,0.1,0.11,0.1,0.11,0.15,0.09,0.1,0.09,0.09,0.09,0.08,0.1,0.14,0.09,0,10.08,0.82,3600,877.27,2083.33,2.38,4.13,3.92,3.03,5.06,3.03,11.74},2},
{{0.1,0.06,0.07,0.11,0.09,0.11,0.09,0.15,0.13,0.13,0.11,0.11,0.12,0.09,0.06,0.12,0.11,0.1,0.1,0.09,0.09,0.09,0.08,0.16,0.1,0.13,0.09,0.1,0.08,0.11,0,9.85,0.8,3650,1027.78,3050,1.96,4.15,3.33,2.59,5.05,2.59,11.25},2},
{{0.1,0.09,0.06,0.1,0.13,0.11,0.1,0.15,0.07,0.11,0.11,0.07,0.12,0.12,0.09,0.1,0.09,0.12,0.12,0.09,0.08,0.1,0.11,0.14,0.05,0.13,0.14,0.11,0.06,0.09,0,9.98,0.71,2925,1018.75,1600,2.03,4.01,3.3,2.65,4.97,2.65,11.4},2},
{{0.08,0.11,0.08,0.09,0.1,0.09,0.09,0.14,0.12,0.14,0.1,0.09,0.1,0.09,0.11,0.12,0.1,0.12,0.07,0.12,0.11,0.08,0.12,0.1,0.08,0.11,0.15,0.05,0.12,0.11,0,10.18,0.79,2675,707.69,3200,2.1,3.93,3.48,2.71,4.85,2.71,11.55},2},
{{0.08,0.07,0.1,0.11,0.13,0.1,0.14,0.11,0.09,0.1,0.1,0.09,0.08,0.12,0.1,0.15,0.08,0.11,0.11,0.08,0.1,0.11,0.1,0.09,0.08,0.12,0.11,0.07,0.11,0.13,0,9.91,0.87,700,895,2650,1.9,3.75,3.54,2.5,4.68,2.5,11.31},2},
{{0.1,0.09,0.13,0.07,0.09,0.11,0.1,0.1,0.13,0.11,0.1,0.08,0.1,0.12,0.1,0.12,0.12,0.09,0.11,0.09,0.09,0.13,0.11,0.09,0.11,0.07,0.12,0.11,0.08,0.11,0,10.05,0.65,2400,885,2650,2.08,3.83,3.56,2.6,4.74,2.6,11.47},2},
{{0.1,0.11,0.08,0.11,0.07,0.12,0.09,0.11,0.11,0.12,0.1,0.07,0.11,0.1,0.11,0.06,0.12,0.12,0.12,0.1,0.1,0.11,0.11,0.09,0.09,0.08,0.13,0.12,0.09,0.12,0,10.33,0.87,3800,786.36,1310,2.12,4,3.62,2.69,4.81,2.69,11.73},2},
{{0.11,0.05,0.09,0.08,0.16,0.14,0.09,0.06,0.14,0.1,0.12,0.09,0.09,0.13,0.12,0.08,0.09,0.11,0.11,0.09,0.11,0.13,0.09,0.08,0.1,0.09,0.12,0.1,0.1,0.11,0,9.86,0.75,2200,868.18,4400,1.99,4.06,3.67,2.56,4.98,2.56,11.33},2},
{{0.1,0.1,0.06,0.1,0.13,0.12,0.08,0.12,0.11,0.09,0.09,0.13,0.08,0.1,0.11,0.11,0.09,0.14,0.08,0.1,0.14,0.09,0.09,0.06,0.11,0.1,0.09,0.12,0.1,0.12,0,10.01,0.9,1050,950,4225,2.16,3.91,3.78,2.85,4.77,2.85,11.56},2},
{{0.05,0.09,0.09,0.11,0.15,0.09,0.17,0.13,0.06,0.09,0.08,0.08,0.11,0.13,0.11,0.12,0.09,0.13,0.08,0.1,0.11,0.09,0.13,0.07,0.09,0.13,0.11,0.09,0.13,0.09,0,10.12,0.8,3800,716.67,1425,1.75,3.66,3.49,2.31,4.55,2.31,11.39},2},
{{0.07,0.1,0.08,0.13,0.11,0.11,0.12,0.14,0.09,0.08,0.11,0.08,0.1,0.08,0.14,0.1,0.11,0.13,0.1,0.08,0.07,0.09,0.11,0.1,0.13,0.13,0.09,0.12,0.08,0.11,0,10.01,0.91,3975,704.55,2466.67,1.88,3.78,3.34,2.52,4.65,2.52,11.31},2},
{{0.05,0.14,0.09,0.11,0.11,0.14,0.09,0.07,0.11,0.1,0.11,0.09,0.09,0.12,0.09,0.1,0.15,0.07,0.14,0.06,0.08,0.1,0.07,0.13,0.13,0.12,0.1,0.11,0.1,0.08,0,10.01,0.79,1433.33,1228.57,2675,1.97,3.81,3.15,2.46,4.61,2.46,11.21},2},
{{0.05,0.1,0.12,0.1,0.09,0.14,0.15,0.1,0.08,0.1,0.1,0.08,0.1,0.12,0.1,0.13,0.1,0.1,0.11,0.07,0.05,0.07,0.13,0.1,0.14,0.12,0.14,0.07,0.11,0.09,0,10.02,0.99,4225,836.36,4325,1.83,3.76,2.98,2.41,4.59,2.41,11.1},2},
{{0.06,0.09,0.1,0.13,0.1,0.13,0.1,0.13,0.07,0.12,0.12,0.1,0.12,0.12,0.08,0.08,0.13,0.08,0.08,0.13,0.08,0.11,0.13,0.09,0.09,0.11,0.11,0.08,0.13,0.09,0,9.92,0.92,2150,615.63,1690,1.92,4.16,3.46,2.42,5.04,2.42,11.22},2},
{{0.07,0.09,0.1,0.08,0.14,0.07,0.09,0.14,0.13,0.12,0.09,0.1,0.13,0.1,0.1,0.12,0.1,0.09,0.08,0.11,0.11,0.11,0.1,0.1,0.1,0.11,0.13,0.08,0.1,0.09,0,9.97,0.63,3725,632.14,3225,2.01,3.9,3.42,2.56,4.81,2.56,11.28},2},
{{0.09,0.13,0.12,0.09,0.05,0.09,0.08,0.11,0.14,0.12,0.11,0.09,0.14,0.08,0.09,0.1,0.06,0.12,0.11,0.12,0.11,0.12,0.11,0.09,0.1,0.07,0.11,0.09,0.12,0.1,0,10.12,0.72,1550,791.67,2100,2.32,4.27,3.65,2.91,5.14,2.91,11.64},2},
{{0.07,0.1,0.12,0.16,0.1,0.07,0.11,0.06,0.1,0.14,0.09,0.11,0.11,0.11,0.13,0.09,0.08,0.09,0.09,0.12,0.09,0.11,0.08,0.12,0.1,0.1,0.09,0.1,0.12,0.11,0,9.93,0.94,2625,734.62,3725,2.24,3.98,3.61,2.79,4.89,2.79,11.42},2},
{{0.08,0.13,0.1,0.1,0.08,0.09,0.12,0.09,0.1,0.14,0.11,0.09,0.1,0.09,0.13,0.09,0.12,0.07,0.11,0.11,0.11,0.08,0.11,0.12,0.08,0.08,0.13,0.14,0.08,0.09,0,10.09,0.77,1625,765,1625,2.16,3.98,3.43,2.76,4.88,2.76,11.47},2},
{{0.06,0.12,0.12,0.08,0.12,0.08,0.09,0.12,0.11,0.11,0.09,0.1,0.1,0.09,0.13,0.11,0.12,0.07,0.09,0.12,0.1,0.1,0.1,0.12,0.13,0.08,0.07,0.12,0.09,0.13,0,10.08,0.78,1125,617.86,3275,2.17,3.88,3.54,2.75,4.81,2.75,11.44},2},
{{0.1,0.14,0.09,0.08,0.09,0.14,0.06,0.08,0.11,0.12,0.1,0.12,0.1,0.07,0.14,0.08,0.11,0.1,0.07,0.15,0.11,0.09,0.08,0.11,0.08,0.08,0.1,0.11,0.14,0.13,0,10.2,1.1,1650,765,2900,2.3,4.14,3.79,2.88,5.03,2.88,11.75},2},
{{0.1,0.1,0.12,0.1,0.11,0.09,0.1,0.11,0.08,0.12,0.09,0.11,0.11,0.09,0.08,0.13,0.08,0.08,0.14,0.1,0.12,0.1,0.08,0.13,0.08,0.08,0.1,0.11,0.12,0.1,0,10.12,0.7,4350,910,1912.5,2.21,4.09,3.59,2.83,4.96,2.83,11.54},2},
{{0.08,0.11,0.09,0.13,0.07,0.08,0.08,0.13,0.09,0.15,0.11,0.08,0.12,0.1,0.1,0.1,0.1,0.12,0.07,0.12,0.09,0.11,0.1,0.13,0.09,0.11,0.08,0.11,0.11,0.09,0,10.1,0.64,1783.33,809.09,2675,2.23,4.06,3.4,2.82,4.94,2.82,11.47},2},
{{0.07,0.12,0.14,0.09,0.08,0.1,0.09,0.11,0.11,0.11,0.11,0.11,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.11,0.1,0.11,0.14,0.1,0.07,0.1,0.13,0.1,0.08,0.1,0,10.01,0.6,2125,716.67,3225,2.15,4.16,3.49,2.69,4.99,2.69,11.35},2},
{{0.09,0.09,0.09,0.13,0.09,0.13,0.07,0.12,0.09,0.12,0.09,0.1,0.1,0.11,0.12,0.13,0.09,0.09,0.09,0.11,0.1,0.08,0.09,0.12,0.11,0.11,0.09,0.12,0.07,0.12,0,10.04,0.84,3275,730.77,1833.33,2.15,3.84,3.42,2.8,4.75,2.8,11.38},2},
{{0.11,0.09,0.11,0.08,0.11,0.09,0.09,0.11,0.15,0.08,0.08,0.11,0.11,0.11,0.09,0.1,0.12,0.09,0.1,0.1,0.1,0.06,0.12,0.1,0.13,0.09,0.1,0.12,0.1,0.1,0,10.11,0.73,1783.33,781.82,2850,2.15,3.92,3.42,2.77,4.72,2.77,11.42},2},
{{0.09,0.09,0.1,0.11,0.08,0.1,0.11,0.09,0.13,0.12,0.11,0.09,0.08,0.09,0.13,0.11,0.11,0.07,0.13,0.1,0.1,0.11,0.12,0.09,0.08,0.11,0.12,0.11,0.11,0.1,0,10.12,0.8,1625,833.33,2700,2.12,3.93,3.32,2.69,4.82,2.69,11.37},2},
{{0.06,0.07,0.13,0.07,0.11,0.12,0.09,0.12,0.06,0.08,0.07,0.11,0.08,0.09,0.1,0.12,0.1,0.09,0.06,0.08,0.05,0.1,0.1,0.1,0.14,0.08,0.05,0.12,0.09,0.07,0,8.78,0.66,1025,740.91,2075,1.72,3.3,2.82,2.5,4.68,2.5,9.79},2},
{{0.12,0.07,0.11,0.09,0.11,0.1,0.14,0.07,0.15,0.06,0.12,0.15,0.05,0.06,0.13,0.12,0.11,0.11,0.1,0,0.14,0.1,0.08,0.13,0.14,0.06,0.08,0.06,0.11,0.1,0,7.08,0.15,1050,409.09,1933.33,4.36,7.93,7.63,5.48,9.24,5.48,14.52},0},
{{0.12,0.09,0.08,0.08,0.09,0.14,0.17,0.1,0.07,0.09,0.09,0.13,0.07,0.08,0.13,0.1,0.11,0.09,0.13,0,0.1,0.06,0.16,0.08,0.08,0.16,0.08,0.07,0.08,0.16,0,7.87,1.28,1590,438.1,2350,4.11,7.68,7.35,5.25,9,5.25,14.45},0},
{{0.12,0.08,0.11,0.06,0.1,0.17,0.08,0.1,0.12,0.09,0.11,0.12,0.07,0.12,0.1,0.09,0.09,0.1,0.13,0,0.1,0.12,0.11,0.1,0.05,0.09,0.13,0.08,0.1,0.14,0,7.63,0.84,1300,386,1350,4.28,8.31,7.84,5.38,9.58,5.38,15.01},0},
{{0.12,0.09,0.09,0.13,0.06,0.11,0.15,0.1,0.08,0.1,0.07,0.09,0.06,0.15,0.14,0.08,0.11,0.1,0.11,0,0.07,0.13,0.12,0.07,0.06,0.1,0.11,0.11,0.13,0.13,0,8.24,1.57,1012.5,372,1450,4.23,7.66,7.55,5.21,8.93,5.21,14.73},0},
{{0.14,0.08,0.11,0.08,0.13,0.11,0.14,0.09,0.07,0.07,0.12,0.12,0.11,0.11,0.11,0.07,0.08,0.09,0.12,0,0.09,0.14,0.09,0.1,0.09,0.11,0.16,0.07,0.08,0.09,0,6.81,0.07,1725,472.5,2012.5,3.96,8.28,7.13,4.99,9.68,4.99,14},0},
{{0.14,0.08,0.08,0.06,0.13,0.15,0.11,0.09,0.11,0.07,0.16,0.12,0.09,0.04,0.1,0.09,0.12,0.07,0.14,0,0.16,0.12,0.1,0.08,0.12,0.08,0.08,0.09,0.06,0.13,0,6.76,-0.63,1475,413.04,1875,4.01,8.83,8.07,5.03,10.14,5.03,14.93},0},
{{0.14,0.11,0.04,0.09,0.05,0.17,0.12,0.05,0.2,0.05,0.11,0.16,0.06,0.08,0.13,0.06,0.1,0.1,0.13,0,0.09,0.13,0.09,0.13,0.08,0.1,0.14,0.06,0.08,0.13,0,7.06,0.8,1750,434.09,966.67,4.33,8.32,7.16,5.32,9.52,5.32,14.26},0},
{{0.12,0.1,0.12,0.07,0.16,0.13,0.09,0.06,0.09,0.08,0.12,0.1,0.09,0.11,0.12,0.06,0.11,0.11,0.11,0,0.1,0.14,0.08,0.09,0.13,0.08,0.1,0.1,0.1,0.11,0,7.27,0.48,2800,350,2550,4.01,8.19,7.31,5.12,9.44,5.12,14.28},0},
{{0.11,0.13,0.07,0.09,0.13,0.14,0.11,0.1,0.08,0.08,0.11,0.1,0.11,0.11,0.12,0.07,0.09,0.09,0.12,0,0.11,0.08,0.14,0.09,0.16,0.07,0.09,0.05,0.11,0.12,0,7.65,0.58,2725,410.87,1310,3.88,8.17,7.23,4.89,9.38,4.89,14.31},0},
{{0.07,0.11,0.09,0.09,0.14,0.07,0.13,0.07,0.1,0.15,0.12,0.08,0.11,0.12,0.08,0.09,0.09,0.14,0.07,0,0.11,0.11,0.1,0.08,0.08,0.08,0.09,0.16,0.13,0.07,0,7.62,0.92,1358.33,395.83,4525,4.35,8.15,7.35,5.46,9.3,5.46,14.58},0},
{{0.11,0.09,0.08,0.1,0.15,0.11,0.09,0.06,0.1,0.11,0.11,0.11,0.1,0.13,0.09,0.09,0.09,0.09,0.11,0,0.14,0.11,0.13,0.08,0.07,0.06,0.13,0.1,0.08,0.12,0,6.77,-0.1,1380,342.86,1930,4.54,8.28,8.04,5.77,9.66,5.77,14.78},0},
{{0.1,0.09,0.06,0.15,0.14,0.1,0.1,0.07,0.09,0.11,0.13,0.08,0.16,0.09,0.09,0.11,0.07,0.11,0.1,0,0.11,0.15,0.14,0.07,0.1,0.09,0.08,0.1,0.07,0.12,0,6.77,-0.41,2900,363.04,1450,4.24,8.19,7.64,5.39,9.6,5.39,14.32},0},
{{0.11,0.08,0.13,0.11,0.09,0.12,0.1,0.1,0.08,0.11,0.13,0.09,0.09,0.11,0.08,0.09,0.14,0.12,0.1,0,0.11,0.1,0.08,0.07,0.13,0.14,0.09,0.08,0.11,0.11,0,7.35,0.76,1500,436.36,557.14,4.16,8.33,7.02,5.21,9.54,5.21,14.48},0},
{{0.09,0.08,0.13,0.11,0.07,0.09,0.13,0.12,0.07,0.13,0.1,0.11,0.12,0.1,0.12,0.09,0.09,0.09,0.1,0,0.09,0.11,0.11,0.09,0.07,0.12,0.12,0.13,0.1,0.1,0,7.35,1.02,1650,341.07,2400,4.37,7.86,7.15,5.32,9.1,5.32,14.15},0},
{{0.08,0.13,0.08,0.12,0.08,0.11,0.09,0.11,0.08,0.14,0.11,0.1,0.12,0.06,0.13,0.08,0.08,0.11,0.08,0,0.13,0.08,0.13,0.08,0.08,0.14,0.08,0.11,0.1,0.1,0,7.32,0.27,2166.67,519.44,1510,4.45,8.37,7.62,5.41,9.78,5.41,14.83},0},
{{0.07,0.12,0.14,0.11,0.07,0.06,0.06,0.16,0.12,0.11,0.11,0.13,0.07,0.07,0.1,0.14,0.08,0.14,0.1,0,0.14,0.09,0.11,0.07,0.1,0.11,0.09,0.1,0.12,0.09,0,7.64,0.3,2366.67,434.09,3775,4.6,8.08,7.52,5.42,9.4,5.42,14.81},0},
{{0.13,0.13,0.1,0.13,0.07,0.08,0.08,0.1,0.08,0.12,0.06,0.09,0.13,0.12,0.11,0.11,0.08,0.08,0.1,0,0.07,0.09,0.09,0.12,0.11,0.12,0.1,0.11,0.07,0.14,0,8.24,1.56,1916.67,413.64,1362.5,4.59,7.67,6.62,5.47,8.79,5.47,14.18},0},
{{0.09,0.1,0.11,0.11,0.08,0.09,0.13,0.15,0.06,0.11,0.08,0.09,0.1,0.16,0.06,0.12,0.12,0.07,0.09,0,0.08,0.1,0.11,0.12,0.11,0.1,0.12,0.14,0.11,0.05,0,7.8,0.81,2166.67,402.17,1737.5,4.28,7.79,6.36,5.22,9.01,5.22,13.84},0},
{{0.08,0.1,0.13,0.11,0.12,0.06,0.09,0.08,0.07,0.19,0.09,0.08,0.08,0.19,0.1,0.07,0.12,0.11,0.07,0,0.1,0.08,0.08,0.09,0.06,0.1,0.13,0.17,0.13,0.08,0,7.69,1.46,1625,428.57,2950,4.81,7.71,6.84,5.94,8.85,5.94,14.46},0},
{{0.1,0.14,0.09,0.14,0.08,0.06,0.1,0.1,0.11,0.1,0.11,0.11,0.07,0.11,0.09,0.08,0.11,0.14,0.08,0,0.1,0.1,0.08,0.1,0.07,0.11,0.13,0.09,0.13,0.1,0,7.73,1.27,2866.67,464.29,1000,4.39,8.34,7.04,5.29,9.55,5.29,14.61},0},
{{0.11,0.11,0.12,0.14,0.13,0.05,0.08,0.08,0.16,0.06,0.11,0.08,0.15,0.08,0.11,0.14,0.09,0.09,0.1,0,0.1,0.13,0.09,0.11,0.12,0.09,0.13,0.07,0.11,0.09,0,7.07,0.31,1025,329.17,2583.33,4.32,7.37,6.97,5.15,8.76,5.15,13.77},0},
{{0.09,0.09,0.12,0.07,0.13,0.09,0.07,0.13,0.07,0.17,0.06,0.1,0.09,0.14,0.07,0.13,0.12,0.11,0.04,0,0.11,0.07,0.07,0.15,0.09,0.1,0.07,0.13,0.13,0.11,0,8.32,1.52,2516.67,390,1371.43,4.53,7.45,7.01,5.56,8.57,5.56,14.46},0},
{{0.07,0.11,0.1,0.14,0.09,0.08,0.1,0.14,0.1,0.1,0.09,0.1,0.15,0.1,0.13,0.06,0.1,0.09,0.08,0,0.1,0.1,0.1,0.1,0.11,0.17,0.04,0.09,0.12,0.09,0,7.5,0.62,2850,393.18,4575,4.09,7.86,6.9,4.98,9.02,4.98,13.71},0},
{{0.08,0.18,0.08,0.1,0.1,0.1,0.07,0.13,0.09,0.1,0.11,0.13,0.12,0.12,0.07,0.08,0.11,0.1,0.09,0,0.11,0.09,0.13,0.06,0.09,0.09,0.15,0.1,0.12,0.08,0,6.74,0.54,1650,419.05,810,4.34,8.17,7.03,5.27,9.29,5.27,13.87},0},
{{0.06,0.17,0.1,0.09,0.1,0.07,0.11,0.09,0.16,0.08,0.11,0.06,0.13,0.1,0.11,0.09,0.11,0.11,0.11,0,0.1,0.07,0.14,0.11,0.07,0.08,0.09,0.08,0.18,0.1,0,7.76,1.19,3025,419.57,3025,4.26,7.97,7.08,4.98,9.24,4.98,14.42},0},
{{0.13,0.06,0.16,0.12,0.02,0.04,0.08,0.15,0.14,0.13,0.11,0.12,0.08,0.1,0.08,0.13,0.04,0.13,0.1,0,0.11,0.1,0.07,0.13,0.08,0.12,0.08,0.14,0.08,0.12,0,7.48,0.95,1031.25,412.5,1212.5,4.92,8.26,7.1,5.6,9.61,5.6,14.68},0},
{{0.11,0.09,0.11,0.1,0.08,0.05,0.05,0.15,0.15,0.14,0.06,0.1,0.13,0.08,0.12,0.14,0.1,0.06,0.06,0,0.07,0.1,0.06,0.09,0.14,0.1,0.14,0.16,0.1,0.08,0,8.29,1.79,1137.5,455,1400,4.99,7.36,6.09,5.89,8.55,5.89,14.17},0},
{{0.08,0.1,0.12,0.1,0.11,0.06,0.11,0.15,0.11,0.07,0.11,0.06,0.16,0.09,0.08,0.1,0.19,0.08,0.07,0,0.07,0.1,0.11,0.13,0.14,0.11,0.07,0.14,0.08,0.07,0,7.36,0.69,1550,405.26,3200,4.17,7.55,6.2,5.03,8.73,5.03,13.35},0},
{{0.01,0.01,0.02,0.06,0.09,0.16,0.06,0.03,0.01,0.01,0,0.01,0.01,0.01,0.04,0.24,0.1,0.03,0.02,0,0,0,0.03,0.18,0.14,0.04,0.02,0.03,0.01,0.01,0,4.56,0.24,200,650,800,0.81,2.74,1.21,2.61,6.94,2.61,5.03},0},
{{0.15,0.07,0.07,0.06,0.07,0.07,0.1,0.07,0.12,0.24,0.14,0.09,0.1,0.1,0.09,0.11,0.06,0.08,0.07,0.17,0.16,0.1,0.09,0.07,0.05,0.07,0.12,0.1,0.15,0.11,0,9.52,1.69,2833.33,1041.67,3025,2.14,4.02,2.14,2.83,5.06,2.83,10.74},5},
{{0.12,0.11,0.12,0.1,0.09,0.11,0.09,0.1,0.12,0.07,0.13,0.08,0.13,0.1,0.11,0.04,0.08,0.1,0.14,0.12,0.1,0.13,0.12,0.07,0.1,0.09,0.14,0.09,0.08,0.1,0,9.59,1.6,625,3016.67,2983.33,1.64,3.71,1.68,2.09,4.37,2.09,10.34},5},
{{0.14,0.09,0.08,0.11,0.09,0.12,0.14,0.11,0.07,0.07,0.11,0.11,0.11,0.1,0.07,0.09,0.1,0.12,0.1,0.11,0.07,0.1,0.08,0.1,0.11,0.09,0.16,0.11,0.1,0.09,0,9.48,1.74,1000,1725,1860,1.61,3.61,1.52,2.1,4.34,2.1,10.18},5},
{{0.06,0.13,0.1,0.12,0.14,0.13,0.11,0.08,0.06,0.09,0.07,0.11,0.06,0.11,0.13,0.11,0.13,0.15,0.09,0.06,0.1,0.07,0.11,0.11,0.16,0.1,0.1,0.09,0.09,0.1,0,9.68,1.65,1100,1275,3625,1.53,2.98,1.55,1.92,3.69,1.92,10.28},5},
{{0.05,0.1,0.12,0.12,0.11,0.12,0.09,0.11,0.12,0.08,0.08,0.12,0.09,0.1,0.13,0.11,0.11,0.1,0.09,0.11,0.09,0.14,0.13,0.1,0.11,0.12,0.04,0.09,0.12,0.08,0,9.68,1.52,3850,2075,2475,1.44,3.17,1.67,1.85,3.91,1.85,10.3},5},
{{0.08,0.12,0.08,0.12,0.14,0.1,0.08,0.13,0.12,0.06,0.09,0.1,0.1,0.11,0.09,0.11,0.14,0.11,0.12,0.06,0.09,0.07,0.11,0.13,0.11,0.11,0.09,0.11,0.08,0.12,0,9.55,1.71,1566.67,1358.33,2500,1.42,3.19,1.7,1.84,3.9,1.84,10.24},5},
{{0.02,0.01,0.01,0.01,0,0.01,0,0.01,0.04,0.03,0.01,0.02,0.02,0.01,0.01,0.02,0.01,0.01,0.01,0.01,0,0.01,0,0.01,0.01,0,0.02,0.02,0.03,0.03,0,1.13,0.36,166.67,325,233.33,0.23,1,0.32,2.43,9.38,2.43,1.24},5},
{{0.11,0.09,0.07,0.08,0.08,0.15,0.13,0.09,0.12,0.11,0.13,0.09,0.1,0.09,0.09,0.06,0.11,0.13,0.1,0.11,0.11,0.07,0.09,0.09,0.06,0.11,0.15,0.1,0.12,0.11,0,9.51,1.86,3325,679.17,2075,2.38,3.14,1.83,3.1,4,3.1,10.36},1},
{{0.09,0.12,0.13,0.11,0.1,0.1,0.09,0.1,0.12,0.08,0.11,0.12,0.12,0.1,0.12,0.06,0.08,0.06,0.12,0.13,0.08,0.09,0.11,0.09,0.1,0.12,0.07,0.13,0.12,0.1,0,9.49,1.76,2375,1937.5,2925,2.53,3.11,1.88,3.28,3.82,3.28,10.4},1},
{{0.18,0.13,0.07,0.12,0.08,0.08,0.08,0.12,0.09,0.08,0.14,0.11,0.07,0.11,0.09,0.1,0.08,0.12,0.08,0.13,0.13,0.06,0.14,0.08,0.11,0.12,0.1,0.07,0.07,0.14,0,9.41,1.56,2950,1042.86,1625,2.89,3.07,2.02,3.68,3.89,3.68,10.44},1},
{{0.1,0.12,0.12,0.14,0.12,0.08,0.08,0.1,0.08,0.09,0.08,0.11,0.11,0.08,0.11,0.13,0.09,0.1,0.11,0.09,0.11,0.16,0.11,0.13,0.13,0.05,0.08,0.1,0.06,0.09,0,9.51,1.25,2275,1987.5,475,2.6,2.75,1.83,3.26,3.57,3.26,10.37},1},
{{0.06,0.08,0.11,0.08,0.13,0.1,0.13,0.11,0.14,0.09,0.06,0.06,0.11,0.11,0.16,0.14,0.14,0.1,0.1,0.06,0.06,0.09,0.12,0.06,0.14,0.13,0.13,0.11,0.11,0.07,0,9.57,1.72,4050,550,2700,2.1,2.11,1.56,2.71,2.82,2.71,10.3},1},
{{0.07,0.08,0.1,0.11,0.13,0.08,0.13,0.09,0.1,0.13,0.07,0.12,0.12,0.11,0.07,0.13,0.12,0.1,0.09,0.1,0.09,0.08,0.11,0.11,0.1,0.1,0.1,0.11,0.13,0.1,0,9.62,1.72,4075,1440,2983.33,2.22,2.69,1.83,2.81,3.47,2.81,10.38},1},
{{0.03,0.04,0.04,0.04,0.03,0.04,0.04,0.05,0.03,0.09,0.05,0.05,0.05,0.03,0.03,0.03,0.04,0.05,0.06,0.03,0.08,0.05,0.03,0.05,0.03,0.04,0.04,0.02,0.04,0.06,0,3.83,0.59,266.67,616.67,975,1.18,2.29,0.94,3.98,6.59,3.98,4.33},1},
{{0.12,0.12,0.1,0.09,0.09,0.05,0.1,0.07,0.08,0.18,0.17,0.12,0.13,0.06,0.05,0.05,0.04,0.07,0.12,0.21,0.1,0.1,0.12,0.08,0.11,0.1,0.12,0.11,0.09,0.09,0,9.32,1.76,775,2137.5,2625,1.66,3.44,1.74,2.04,4.24,2.04,10.09},5},
{{0.14,0.1,0.08,0.11,0.1,0.1,0.1,0.14,0.08,0.08,0.13,0.1,0.11,0.1,0.08,0.08,0.12,0.08,0.11,0.11,0.11,0.12,0.09,0.1,0.1,0.08,0.08,0.13,0.08,0.14,0,9.27,2,2250,3025,1487.5,1.53,2.43,1.91,1.89,3.14,1.89,10.09},5},
{{0.12,0.08,0.16,0.09,0.1,0.09,0.08,0.1,0.1,0.1,0.08,0.1,0.12,0.08,0.11,0.11,0.09,0.1,0.12,0.1,0.1,0.1,0.14,0.11,0.08,0.1,0.1,0.1,0.08,0.12,0,9.53,1.81,2350,3775,1466.67,1.54,2.17,1.73,1.94,2.89,1.94,10.19},5},
{{0.09,0.12,0.12,0.08,0.09,0.14,0.08,0.08,0.15,0.08,0.1,0.11,0.08,0.14,0.07,0.07,0.14,0.11,0.11,0.08,0.08,0.11,0.08,0.13,0.11,0.08,0.13,0.09,0.09,0.11,0,9.26,2.1,3150,2275,1966.67,1.45,2.29,1.9,1.82,3.01,1.82,10.08},5},
{{0.08,0.12,0.07,0.1,0.11,0.12,0.1,0.13,0.09,0.1,0.08,0.11,0.07,0.09,0.11,0.13,0.11,0.11,0.13,0.09,0.12,0.13,0.1,0.08,0.1,0.09,0.1,0.11,0.09,0.09,0,9.42,1.78,2233.33,2150,3100,1.42,2.12,1.75,1.75,2.84,1.75,10.1},5},
{{0.05,0.1,0.09,0.12,0.1,0.12,0.12,0.1,0.12,0.11,0.05,0.08,0.14,0.13,0.09,0.17,0.1,0.11,0.1,0.05,0.11,0.11,0.08,0.12,0.09,0.12,0.08,0.09,0.14,0.06,0,9.48,1.93,1600,1650,1700,1.27,1.72,1.76,1.53,2.4,1.53,10.12},5},
{{0.09,0.09,0.08,0.11,0.12,0.13,0.06,0.13,0.1,0.11,0.11,0.1,0.07,0.14,0.11,0.11,0.11,0.11,0.08,0.09,0.08,0.08,0.07,0.08,0.12,0.13,0.11,0.11,0.13,0.12,0,9.18,2.24,2566.67,1525,1540,1.37,2.15,1.83,1.73,2.9,1.73,10.01},5},
{{0.09,0.1,0.08,0.1,0.09,0.15,0.09,0.15,0.09,0.08,0.1,0.1,0.08,0.08,0.13,0.14,0.11,0.1,0.09,0.08,0.09,0.08,0.09,0.14,0.11,0.09,0.11,0.11,0.12,0.09,0,9.32,2,3575,2850,1475,1.41,2.11,1.7,1.76,2.88,1.76,10.02},5},
{{0.03,0.02,0.01,0.01,0.01,0.02,0.01,0.01,0.03,0.01,0.01,0.01,0.03,0.01,0.02,0.01,0.02,0.03,0.01,0.03,0.02,0.03,0.03,0.01,0.01,0.01,0.02,0.01,0,0.02,0,1.47,0.16,350,400,625,0.27,1.26,0.22,2.46,9.16,2.46,1.56},5},
{{0.11,0.06,0.12,0.09,0.08,0.08,0.1,0.15,0.13,0,0.1,0.08,0.09,0.09,0.08,0.14,0.14,0.11,0.1,0,0.09,0.09,0.11,0.12,0.07,0.16,0.1,0.09,0.09,0,0,9.62,2.19,2475,1483.33,2000,1.45,1.87,1.5,1.82,2.48,1.82,10.19},1},
{{0.07,0.11,0.1,0.13,0.1,0.12,0.12,0.08,0.08,0,0.11,0.09,0.07,0.11,0.1,0.14,0.08,0.11,0.11,0,0.12,0.07,0.12,0.13,0.09,0.08,0.13,0.09,0.1,0,0,9.63,1.97,1583.33,1537.5,2475,1.26,2.15,1.6,1.64,2.97,1.64,10.17},1},
{{0.09,0.11,0.1,0.06,0.09,0.1,0.09,0.15,0.14,0,0.1,0.08,0.12,0.15,0.1,0.09,0.08,0.1,0.1,0,0.1,0.11,0.11,0.08,0.13,0.09,0.12,0.11,0.07,0,0,9.53,2.17,1516.67,2516.67,1616.67,1.39,2.03,1.56,1.69,2.69,1.69,10.1},1},
{{0.12,0.09,0.08,0.1,0.1,0.12,0.11,0.07,0.12,0,0.07,0.11,0.12,0.11,0.1,0.1,0.12,0.11,0.11,0,0.11,0.1,0.09,0.09,0.12,0.12,0.07,0.13,0.11,0,0,9.57,2.12,650,2112.5,3925,1.35,1.85,1.52,1.68,2.5,1.68,10.13},1},
{{0.1,0.11,0.1,0.14,0.1,0.1,0.1,0.08,0.1,0,0.1,0.09,0.1,0.1,0.12,0.13,0.09,0.12,0.09,0,0.09,0.13,0.09,0.1,0.11,0.1,0.1,0.12,0.1,0,0,9.56,2.02,1000,850,3450,1.27,1.98,1.55,1.62,2.75,1.62,10.1},1},
{{0.09,0.1,0.1,0.1,0.11,0.15,0.08,0.1,0.11,0,0.07,0.11,0.12,0.13,0.12,0.09,0.1,0.07,0.09,0,0.1,0.09,0.08,0.14,0.08,0.1,0.08,0.12,0.12,0,0,9.63,2.14,3000,1533.33,1975,1.25,2.03,1.69,1.59,2.74,1.59,10.22},1},
{{0.12,0.11,0.09,0.14,0.11,0.1,0.07,0.08,0.09,0,0.12,0.12,0.09,0.08,0.08,0.1,0.11,0.1,0.11,0,0.1,0.12,0.1,0.09,0.08,0.09,0.1,0.12,0.12,0,0,9.55,2.23,600,2025,1200,1.37,2.19,1.68,1.83,2.91,1.83,10.17},1},
{{0.05,0.06,0.05,0.02,0.01,0.05,0.03,0.06,0.01,0,0.08,0.05,0.05,0.02,0.03,0.02,0.03,0.02,0.05,0,0.05,0.04,0.04,0.04,0.06,0.02,0.03,0.03,0.05,0,0,3.75,1.01,1675,487.5,916.67,0.7,2.29,1,2.24,6.85,2.24,4.14},1},
{{0.11,0.12,0.08,0.11,0.09,0.12,0.04,0.12,0.13,0.09,0.12,0.07,0.11,0.1,0.09,0.09,0.1,0.09,0.11,0.13,0.11,0.11,0.14,0.09,0.12,0.1,0.1,0.1,0.07,0.08,0,9.61,1.73,2975,1825,2000,1.08,2.3,1.65,1.41,3.17,1.41,10.16},5},
{{0.11,0.13,0.11,0.08,0.1,0.09,0.12,0.1,0.08,0.1,0.12,0.09,0.11,0.09,0.1,0.08,0.1,0.08,0.13,0.13,0.08,0.1,0.11,0.1,0.11,0.08,0.14,0.1,0.09,0.1,0,9.4,2,2433.33,2116.67,2825,1.07,2.29,1.79,1.44,3.03,1.44,10.12},5},
{{0.11,0.1,0.15,0.08,0.1,0.12,0.06,0.12,0.11,0.08,0.1,0.1,0.08,0.12,0.13,0.09,0.09,0.1,0.08,0.12,0.09,0.12,0.11,0.13,0.09,0.09,0.1,0.1,0.08,0.11,0,9.43,1.91,3975,983.33,4400,1.09,2.02,1.76,1.42,2.77,1.42,10.06},5},
{{0.08,0.1,0.11,0.15,0.13,0.14,0.06,0.1,0.07,0.09,0.1,0.1,0.11,0.11,0.1,0.08,0.14,0.09,0.11,0.09,0.1,0.09,0.07,0.11,0.1,0.15,0.11,0.09,0.1,0.11,0,9.4,2.08,4450,2066.67,1550,0.99,1.98,1.72,1.26,2.66,1.26,10.05},5},
{{0.09,0.1,0.08,0.13,0.1,0.11,0.13,0.1,0.12,0.07,0.09,0.09,0.09,0.11,0.09,0.15,0.08,0.08,0.14,0.09,0.1,0.08,0.12,0.11,0.07,0.12,0.09,0.13,0.11,0.09,0,9.5,2.04,1775,1550,2375,0.92,1.92,1.84,1.23,2.65,1.23,10.17},5},
{{0.13,0.07,0.11,0.13,0.1,0.1,0.13,0.08,0.08,0.1,0.09,0.11,0.1,0.11,0.13,0.11,0.09,0.14,0.07,0.07,0.07,0.1,0.09,0.12,0.09,0.1,0.08,0.13,0.11,0.14,0,9.22,2.31,2975,942.86,2550,1.06,1.84,1.87,1.44,2.49,1.44,10.01},5},
{{0.1,0.1,0.09,0.06,0.08,0.12,0.11,0.11,0.12,0.14,0.07,0.11,0.13,0.08,0.11,0.09,0.18,0.1,0.09,0.07,0.11,0.13,0.13,0.06,0.07,0.1,0.1,0.07,0.14,0.11,0,9.41,2.01,1325,2416.67,2783.33,1.03,1.77,1.94,1.39,2.39,1.39,10.08},5},
{{0.09,0.11,0.11,0.08,0.07,0.1,0.11,0.09,0.13,0.12,0.09,0.12,0.08,0.07,0.09,0.1,0.12,0.1,0.13,0.12,0.09,0.09,0.1,0.1,0.1,0.16,0.08,0.1,0.1,0.1,0,9.48,1.97,250,1600,2566.67,1.19,2.24,1.73,1.83,3.02,1.83,10.23},5},
{{0.05,0.03,0.04,0.02,0.03,0.05,0.03,0.05,0.05,0.13,0.08,0.06,0.05,0.03,0.05,0.03,0.04,0.05,0.06,0.04,0.08,0.05,0.02,0.05,0.04,0.06,0.04,0.06,0.06,0.04,0,3.89,0.63,150,966.67,800,0.95,2.48,1.17,3.23,5.94,3.23,4.69},5},
{{0.1,0.1,0.1,0.07,0.09,0.09,0.11,0.11,0.08,0.17,0.11,0.09,0.11,0.1,0.08,0.1,0.09,0.1,0.12,0.12,0.09,0.09,0.1,0.11,0.12,0.08,0.13,0.09,0.09,0.12,0,9.6,2.31,183.33,1325,3025,1.58,2.03,1.58,1.99,2.79,1.99,10.29},1},
{{0.1,0.11,0.06,0.15,0.1,0.1,0.13,0.1,0.09,0.09,0.1,0.09,0.12,0.07,0.12,0.09,0.12,0.11,0.11,0.09,0.08,0.09,0.09,0.1,0.14,0.08,0.09,0.12,0.13,0.1,0,9.54,2.33,1475,1716.67,1000,1.25,1.79,1.51,1.57,2.42,1.57,10.11},1},
{{0.14,0.1,0.15,0.09,0.07,0.09,0.08,0.08,0.13,0.1,0.1,0.09,0.11,0.07,0.12,0.12,0.09,0.13,0.09,0.09,0.08,0.09,0.14,0.07,0.11,0.12,0.11,0.11,0.09,0.1,0,9.59,2.23,2383.33,1490,2800,1.42,1.75,1.44,1.73,2.41,1.73,10.15},1},
{{0.1,0.08,0.1,0.09,0.14,0.07,0.13,0.11,0.11,0.09,0.11,0.11,0.12,0.11,0.11,0.08,0.09,0.07,0.12,0.1,0.11,0.08,0.1,0.11,0.12,0.1,0.1,0.1,0.11,0.09,0,9.58,2.21,3425,1600,2225,1.31,1.95,1.63,1.65,2.59,1.65,10.17},1},
{{0.1,0.1,0.11,0.09,0.09,0.12,0.13,0.07,0.09,0.11,0.09,0.1,0.08,0.12,0.08,0.12,0.11,0.1,0.11,0.1,0.09,0.17,0.1,0.1,0.06,0.11,0.08,0.09,0.09,0.13,0,9.63,2.15,1662.5,1110,2316.67,1.33,1.79,1.72,1.66,2.4,1.66,10.22},1},
{{0.11,0.08,0.12,0.12,0.13,0.06,0.07,0.13,0.13,0.08,0.09,0.11,0.08,0.11,0.1,0.1,0.14,0.09,0.1,0.1,0.12,0.09,0.07,0.15,0.09,0.08,0.1,0.09,0.13,0.1,0,9.58,2.1,2650,3233.33,3575,1.31,1.76,1.62,1.63,2.39,1.63,10.14},1},
{{0.06,0.08,0.1,0.12,0.11,0.13,0.12,0.07,0.1,0.06,0.08,0.1,0.09,0.1,0.1,0.13,0.1,0.08,0.08,0.1,0.13,0.08,0.08,0.11,0.06,0.14,0.1,0.09,0.11,0.07,0,8.89,1.87,1525,910,2450,1.05,1.57,1.39,1.46,2.36,1.46,9.34},1},
{{0.42,0.1,0.11,0.13,0.13,0.11,0.01,0.01,0,0,0.1,0.06,0.06,0.09,0.09,0.11,0.15,0.14,0.14,0.02,0.11,0.13,0.07,0.11,0.08,0.09,0.06,0.15,0.12,0.09,0,8.08,-0.33,2675,428.57,2783.33,7.88,7.76,4.69,9.93,8.9,9.93,14.89},0},
{{0.39,0.14,0.1,0.18,0.14,0.07,0,0,0,0,0.07,0.07,0.08,0.18,0.12,0.08,0.19,0.08,0.06,0.03,0.08,0.09,0.11,0.08,0.1,0.11,0.13,0.11,0.09,0.12,0,6.71,0.19,1766.67,465,1975,7.11,6.82,4.39,9.29,7.8,9.29,12.77},0},
{{0.39,0.09,0.14,0.15,0.17,0.07,0,0,0,0,0.05,0.06,0.15,0.12,0.13,0.12,0.09,0.11,0.06,0.05,0.04,0.05,0.14,0.07,0.08,0.13,0.14,0.11,0.14,0.13,0,7.07,1.14,2950,486.84,1416.67,7.37,7.16,4.19,9.53,8.13,9.53,12.93},0},
{{0.44,0.09,0.13,0.14,0.14,0.05,0.03,0,0,0,0.06,0.06,0.07,0.12,0.12,0.07,0.18,0.14,0.06,0.06,0.05,0.11,0.12,0.07,0.08,0.16,0.08,0.09,0.11,0.16,0,8.19,0.86,1925,477.5,3400,7.58,7.08,4.79,9.71,8.02,9.71,14.1},0},
{{0.36,0.11,0.2,0.12,0.19,0.03,0,0,0,0,0.05,0.1,0.21,0.07,0.11,0.07,0.14,0.08,0.08,0.02,0.08,0.08,0.1,0.16,0.12,0.11,0.09,0.06,0.08,0.15,0,6.42,0.3,3525,610,2087.5,6.72,7.24,4.72,9.05,8.1,9.05,12.45},0},
{{0.34,0.1,0.22,0.17,0.14,0.04,0,0,0,0,0.03,0.1,0.21,0.07,0.07,0.11,0.12,0.13,0.04,0.04,0.12,0.06,0.12,0.1,0.09,0.11,0.11,0.09,0.13,0.09,0,7.1,-0.45,2175,620,2575,6.29,7.21,4.25,8.66,8.08,8.66,12.34},0},
{{0.22,0.14,0.2,0.19,0.16,0.04,0.03,0.02,0.01,0,0.05,0.2,0.1,0.09,0.09,0.09,0.11,0.08,0.13,0.01,0.14,0.12,0.08,0.08,0.14,0.13,0.1,0.05,0.09,0.09,0,6.47,-0.92,700,478.95,1762.5,5.89,7.53,4.36,8.2,8.46,8.2,12.29},0},
{{0,0.05,0.12,0.26,0.1,0.09,0.12,0.07,0.08,0.03,0.16,0.06,0.06,0.13,0.18,0.06,0.04,0.11,0.13,0.02,0.13,0.07,0.12,0.14,0.13,0.11,0.08,0.08,0.11,0.05,0,5.99,-1.18,461.11,540.63,1450,8.58,8.18,3.77,11.19,9.42,11.19,14.59},0},
{{0.05,0.07,0.09,0.09,0.07,0.16,0.12,0.13,0.11,0.06,0.15,0.08,0.1,0.08,0.11,0.1,0.05,0.12,0.13,0.01,0.13,0.11,0.07,0.08,0.1,0.11,0.1,0.1,0.15,0.07,0,6.35,-0.64,475,477.78,375,10.69,8.58,4.35,12.6,9.92,12.6,16.57},0},
{{0.13,0.08,0.06,0.08,0.05,0.09,0.18,0.13,0.14,0.02,0.15,0.06,0.05,0.1,0.1,0.13,0.13,0.1,0.1,0.02,0.09,0.07,0.1,0.11,0.11,0.06,0.1,0.22,0.09,0.08,0,6.27,-0.01,430.95,406.52,1900,10.97,8.47,3.99,12.73,10.14,12.73,16.82},0},
{{0.1,0.06,0.11,0.06,0.02,0.15,0.17,0.12,0.08,0.04,0.12,0.04,0.07,0.12,0.14,0.11,0.12,0.1,0.09,0.02,0.11,0.11,0.07,0.11,0.09,0.1,0.06,0.11,0.13,0.15,0,6.43,0.12,436.36,402.08,4175,10.92,8.17,4.76,12.68,9.86,12.68,16.72},0},
{{0.1,0.08,0.09,0.07,0.03,0.16,0.17,0.12,0.11,0.02,0.09,0.08,0.11,0.12,0.11,0.08,0.13,0.07,0.16,0.03,0.15,0.11,0.08,0.11,0.1,0.08,0.07,0.13,0.13,0.06,0,6.64,-1.12,442.11,466.67,1450,10.37,7.97,4.34,12.15,9.32,12.15,16.1},0},
{{0.07,0.09,0.08,0.07,0.16,0.12,0.11,0.09,0.1,0.03,0.11,0.1,0.11,0.08,0.12,0.09,0.1,0.11,0.05,0.05,0.14,0.08,0.12,0.07,0.12,0.08,0.17,0.11,0.07,0.07,0,6.42,-1.26,421.74,440.91,3025,9.7,7.98,3.88,11.83,9.19,11.83,15.52},0},
{{0.01,0.07,0.14,0.18,0.13,0.06,0.07,0.12,0.11,0.02,0.12,0.08,0.15,0.12,0.09,0.12,0.05,0.11,0.07,0.01,0.11,0.1,0.08,0.13,0.14,0.1,0.12,0.06,0.08,0.11,0,5.47,-0.55,369.23,365.38,1950,9.14,7.64,3.98,11.84,9,11.84,14.6},0},
{{0.01,0.07,0.1,0.18,0.14,0.1,0.09,0.12,0.12,0.03,0.1,0.14,0.13,0.08,0.12,0.08,0.08,0.1,0.09,0.04,0.08,0.11,0.12,0.1,0.08,0.14,0.11,0.11,0.11,0.08,0,5.81,-0.37,395.65,419.05,2650,9.34,7.63,3.75,11.8,8.71,11.8,14.26},0},
{{0.01,0.08,0.13,0.12,0.14,0.1,0.06,0.09,0.12,0.09,0.08,0.13,0.14,0.1,0.14,0.06,0.1,0.1,0.09,0.02,0.17,0.07,0.06,0.1,0.08,0.09,0.15,0.07,0.11,0.12,0,6,-0.29,513.16,469.05,3900,9.97,7.59,4.59,12.49,8.62,12.49,15.35},0},
{{0.05,0.14,0.1,0.08,0.05,0.09,0.14,0.11,0.16,0.02,0.08,0.1,0.12,0.09,0.08,0.16,0.09,0.07,0.11,0.02,0.12,0.11,0.12,0.05,0.11,0.11,0.13,0.08,0.1,0.1,0,6.78,-0.59,433.33,423.91,575,10.53,7.55,4.04,12.55,8.77,12.55,15.74},0},
{{0.05,0.09,0.07,0.07,0.11,0.1,0.14,0.14,0.11,0.02,0.06,0.13,0.08,0.1,0.07,0.14,0.11,0.1,0.09,0,0.06,0.11,0.08,0.04,0.11,0.09,0.15,0.13,0.15,0.11,0,7.7,0.55,482.5,447.5,3125,10.7,7.7,4.14,12.65,8.7,12.65,16.34},0},
{{0.05,0.09,0.15,0.06,0.04,0.15,0.13,0.15,0.09,0.04,0.1,0.08,0.07,0.1,0.14,0.09,0.08,0.15,0.1,0.04,0.13,0.1,0.09,0.09,0.07,0.09,0.13,0.13,0.06,0.14,0,7.03,-0.22,450,410.87,2575,10.21,8.1,4.45,12.25,9.38,12.25,16.12},0},
{{0.04,0.08,0.14,0.03,0.05,0.16,0.15,0.12,0.14,0.02,0.1,0.06,0.08,0.06,0.14,0.13,0.07,0.11,0.14,0.06,0.1,0.11,0.11,0.09,0.12,0.08,0.15,0.07,0.09,0.09,0,7.68,-0.98,374,388,2133.33,10.95,8.2,4.06,12.79,9.52,12.79,16.71},0},
{{0.03,0.11,0.13,0.07,0.09,0.13,0.14,0.09,0.12,0.04,0.11,0.12,0.11,0.08,0.12,0.12,0.08,0.07,0.11,0.02,0.14,0.11,0.09,0.09,0.06,0.12,0.19,0.07,0.06,0.11,0,5.96,-0.99,527.78,497.37,4050,10.16,8.01,4.11,12.32,9.36,12.32,15.51},0},
{{0.06,0.09,0.03,0.15,0.09,0.13,0.13,0.11,0.14,0.02,0.12,0.11,0.12,0.07,0.12,0.08,0.09,0.12,0.12,0.02,0.1,0.11,0.09,0.09,0.09,0.1,0.08,0.11,0.11,0.14,0,6.15,0.13,491.67,420.45,2033.33,10.06,8.14,4.7,11.99,9.32,11.99,15.64},0},
{{0.04,0.17,0.07,0.14,0.08,0.12,0.11,0.12,0.07,0.02,0.11,0.11,0.06,0.23,0.1,0.08,0.1,0.08,0.08,0.04,0.09,0.12,0.07,0.11,0.15,0.13,0.13,0.06,0.05,0.1,0,5.18,-0.62,431.82,500,2800,8.92,7.16,3.49,11.15,8.42,11.15,13.42},0},
{{0.04,0.14,0.07,0.08,0.1,0.11,0.14,0.11,0.12,0.02,0.07,0.14,0.14,0.11,0.08,0.11,0.06,0.12,0.07,0.04,0.06,0.14,0.09,0.1,0.11,0.13,0.07,0.11,0.1,0.11,0,6.51,-0.18,376.92,466.67,2250,10.3,7.8,4,12.26,8.81,12.26,15.29},0},
{{0.06,0.12,0.07,0.08,0.08,0.09,0.16,0.12,0.08,0.03,0.11,0.19,0.07,0.08,0.08,0.08,0.1,0.12,0.07,0.04,0.08,0.12,0.07,0.11,0.12,0.11,0.08,0.08,0.13,0.12,0,5.97,-0.07,418.18,513.16,3075,10.58,8.29,4.26,12.59,9.39,12.59,15.83},0},
{{0.09,0.08,0.12,0.05,0.1,0.13,0.09,0.17,0.06,0.02,0.11,0.07,0.14,0.09,0.11,0.11,0.09,0.11,0.1,0.02,0.09,0.05,0.17,0.12,0.08,0.11,0.13,0.1,0.08,0.11,0,6.28,-0.41,459.52,438.1,3950,10.33,7.74,3.89,12.32,9.03,12.32,15.51},0},
{{0.05,0.12,0.1,0.09,0.12,0.1,0.09,0.09,0.13,0.03,0.09,0.1,0.15,0.07,0.1,0.11,0.12,0.09,0.07,0.03,0.16,0.1,0.1,0.07,0.11,0.1,0.12,0.07,0.05,0.16,0,6.24,-0.78,400,484.21,2083.33,9.78,7.72,4.51,12.09,8.9,12.09,15.24},0},
{{0.04,0.12,0.1,0.12,0.07,0.09,0.16,0.13,0.06,0.02,0.08,0.12,0.1,0.15,0.16,0.09,0.09,0.05,0.06,0.04,0.14,0.11,0.05,0.11,0.07,0.14,0.11,0.12,0.09,0.09,0,5.58,-0.54,505.56,505.56,2583.33,9.81,7.15,3.99,11.97,8.62,11.97,14.54},0},
{{0.03,0.11,0.14,0.08,0.04,0.16,0.16,0.11,0.08,0.03,0.14,0.09,0.11,0.09,0.13,0.13,0.08,0.07,0.08,0.04,0.12,0.1,0.09,0.07,0.07,0.07,0.17,0.17,0.1,0.07,0,5.31,-0.49,529.41,454.76,3750,9.57,7.78,3.85,11.69,9.36,11.69,14.78},0},
{{0.07,0.14,0.07,0.06,0.08,0.13,0.12,0.14,0.11,0.04,0.13,0.09,0.05,0.11,0.11,0.18,0.13,0.08,0.06,0.01,0.08,0.09,0.15,0.09,0.05,0.13,0.11,0.15,0.13,0.05,0,5.35,-0.38,538.89,567.65,900,10.33,7.39,3.65,12.2,9.31,12.2,15.44},0},
{{0.05,0.09,0.1,0.06,0.11,0.19,0.09,0.1,0.1,0.06,0.15,0.08,0.05,0.11,0.14,0.08,0.1,0.12,0.09,0.05,0.1,0.13,0.09,0.08,0.13,0.1,0.09,0.07,0.17,0.06,0,6.14,-0.76,526.47,526.47,3625,10.14,8.36,4.09,12.2,9.81,12.2,15.81},0},
{{0.13,0.1,0.05,0.06,0.06,0.1,0.13,0.07,0.09,0.02,0.11,0.06,0.05,0.1,0.07,0.11,0.13,0.07,0.15,0.04,0.09,0.15,0.11,0.16,0.09,0.07,0.09,0.11,0.12,0.04,0,8.07,-1.31,489.47,606.67,2850,11.72,8.36,3.85,13.53,9.83,13.53,18},0},
{{0.12,0.08,0.07,0.07,0.11,0.05,0.06,0.1,0.15,0.1,0.07,0.07,0.05,0.09,0.15,0.11,0.04,0.12,0.16,0.05,0.1,0.1,0.1,0.13,0.05,0.08,0.09,0.12,0.14,0.1,0,8.63,-0.48,520,533.33,2450,11.73,8.38,4.65,13.76,9.63,13.76,18.56},0},
{{0.14,0.06,0.05,0.05,0.08,0.16,0.14,0.08,0.15,0.03,0.1,0.08,0.06,0.1,0.06,0.11,0.17,0.11,0.12,0.03,0.12,0.07,0.11,0.07,0.09,0.08,0.06,0.17,0.2,0.05,0,7.91,-0.55,507.89,507.89,1000,11.27,8.07,4.62,12.89,9.33,12.89,17.74},0},
{{0.16,0.06,0.08,0.07,0.07,0.13,0.15,0.1,0.09,0.02,0.13,0.09,0.04,0.06,0.09,0.09,0.17,0.18,0.05,0.03,0.12,0.11,0.12,0.06,0.07,0.13,0.09,0.16,0.12,0.04,0,7.23,-1.13,380,527.78,3100,10.56,8.32,4,12.3,9.92,12.3,16.92},0},
{{0.09,0.09,0.1,0.06,0.04,0.07,0.11,0.18,0.18,0.04,0.1,0.05,0.07,0.13,0.08,0.1,0.11,0.15,0.14,0.01,0.05,0.13,0.08,0.07,0.08,0.08,0.16,0.2,0.12,0.06,0,7.54,0.11,511.11,575,1300,11.68,8.29,3.66,13.51,10.01,13.51,17.78},0},
{{0.07,0.08,0.07,0.05,0.08,0.11,0.16,0.15,0.15,0.03,0.08,0.09,0.1,0.12,0.05,0.09,0.14,0.14,0.1,0.04,0.1,0.09,0.07,0.16,0.08,0.1,0.1,0.14,0.13,0.06,0,7.83,-0.81,497.37,497.37,2750,11.49,8.09,3.95,13.17,9.34,13.17,17.43},0},
{{0.07,0.08,0.07,0.1,0.07,0.11,0.16,0.12,0.16,0.02,0.11,0.08,0.07,0.06,0.07,0.15,0.17,0.08,0.13,0.01,0.06,0.09,0.08,0.09,0.08,0.13,0.1,0.21,0.12,0.08,0,6.92,0.14,395.65,488.89,1275,10.99,8.23,3.73,12.84,10.06,12.84,17.09},0},
{{0.03,0.11,0.13,0.18,0.11,0.08,0.08,0.12,0.07,0.04,0.08,0.1,0.13,0.13,0.12,0.12,0.08,0.12,0.06,0.02,0.06,0.12,0.11,0.07,0.17,0.09,0.11,0.08,0.1,0.12,0,5.71,0.09,425,494.74,2816.67,8.56,6.92,4.24,11.15,8.07,11.15,13.64},0},
{{0.1,0.09,0.09,0.06,0.1,0.1,0.1,0.08,0.13,0.06,0.08,0.08,0.15,0.08,0.06,0.12,0.13,0.07,0.15,0.04,0.11,0.12,0.11,0.08,0.11,0.07,0.07,0.12,0.1,0.11,0,6.9,-0.04,508.82,400,675,10.63,7.98,4.95,12.73,9.3,12.73,16.73},0},
{{0.06,0.07,0.13,0.16,0.12,0.07,0.07,0.15,0.09,0.05,0.19,0.09,0.12,0.1,0.12,0.05,0.09,0.08,0.1,0.02,0.14,0.06,0.1,0.12,0.11,0.08,0.12,0.05,0.11,0.13,0,4.73,-0.44,653.57,633.33,1750,9.01,8.05,4.59,11.41,9.36,11.41,14.71},0},
{{0.05,0.12,0.07,0.12,0.16,0.09,0.1,0.13,0.1,0.02,0.12,0.1,0.13,0.11,0.07,0.08,0.1,0.11,0.12,0.01,0.07,0.08,0.15,0.14,0.11,0.12,0.05,0.08,0.11,0.12,0,6.2,-0.08,445,438.1,933.33,9.42,8.1,4.35,11.63,9.11,11.63,14.91},0},
{{0.05,0.15,0.08,0.13,0.1,0.1,0.08,0.1,0.11,0.04,0.11,0.14,0.08,0.1,0.12,0.1,0.07,0.14,0.08,0.02,0.13,0.14,0.09,0.1,0.12,0.07,0.1,0.11,0.08,0.09,0,6.05,-1.14,378,470,2700,9.64,7.84,3.96,11.9,9,11.9,14.86},0},
{{0.07,0.1,0.07,0.13,0.14,0.09,0.08,0.12,0.11,0.03,0.11,0.15,0.09,0.06,0.12,0.1,0.12,0.1,0.09,0.02,0.14,0.06,0.12,0.12,0.07,0.11,0.13,0.09,0.08,0.11,0,5.87,-0.64,571.88,538.24,2416.67,9.34,7.55,4.25,11.65,8.7,11.65,14.81},0},
{{0.04,0.08,0.13,0.1,0.14,0.09,0.08,0.15,0.14,0.03,0.09,0.2,0.13,0.07,0.1,0.08,0.08,0.07,0.12,0.02,0.06,0.07,0.13,0.12,0.13,0.18,0.06,0.09,0.08,0.11,0,4.97,-0.02,596.67,626.67,2200,9.82,7.7,3.69,12.13,9.03,12.13,14.5},0},
{{0.01,0.19,0.12,0.07,0.1,0.11,0.06,0.11,0.17,0.02,0.12,0.11,0.17,0.14,0.08,0.1,0.08,0.08,0.09,0.03,0.07,0.11,0.14,0.11,0.12,0.15,0.07,0.07,0.03,0.15,0,4.66,-0.43,502.78,455,3050,9.28,7.26,3.85,11.7,8.64,11.7,13.93},0},
{{0.06,0.11,0.08,0.05,0.1,0.12,0.13,0.19,0.1,0.02,0.08,0.15,0.12,0.11,0.05,0.11,0.09,0.14,0.13,0.02,0.08,0.11,0.06,0.1,0.11,0.08,0.09,0.1,0.1,0.2,0,6.21,0.73,687.5,567.65,1125,10.58,7.74,4.85,12.41,8.82,12.41,15.89},0},
{{0.03,0.16,0.09,0.08,0.12,0.1,0.09,0.11,0.14,0.03,0.11,0.14,0.1,0.08,0.09,0.11,0.11,0.1,0.07,0.06,0.09,0.13,0.08,0.14,0.15,0.06,0.1,0.04,0.12,0.12,0,6.26,-0.34,386.96,366.67,1333.33,9.66,7.7,4.23,11.92,8.81,11.92,14.96},0},
{{0.07,0.1,0.08,0.1,0.16,0.09,0.07,0.08,0.12,0.07,0.14,0.07,0.15,0.12,0.08,0.09,0.06,0.1,0.12,0.03,0.04,0.11,0.14,0.1,0.13,0.1,0.11,0.08,0.08,0.13,0,5.79,0.12,429.55,408.7,3225,9.81,8,4.16,12.1,9.05,12.1,14.84},0},
{{0.06,0.11,0.08,0.11,0.12,0.06,0.09,0.09,0.15,0.03,0.09,0.07,0.12,0.16,0.11,0.09,0.1,0.08,0.12,0.02,0.13,0.13,0.08,0.13,0.11,0.08,0.07,0.06,0.09,0.15,0,6.41,-0.29,430.95,481.58,2750,10.35,7.44,4.81,12.61,8.5,12.61,15.54},0},
{{0.03,0.14,0.1,0.13,0.17,0.06,0.07,0.13,0.1,0.02,0.16,0.12,0.1,0.09,0.09,0.11,0.09,0.11,0.06,0.02,0.12,0.09,0.12,0.16,0.12,0.08,0.05,0.14,0.07,0.08,0,5.28,-0.98,454.76,530.56,2916.67,8.87,7.67,3.76,11.24,8.91,11.24,14.03},0},
{{0.08,0.11,0.12,0.02,0.05,0.17,0.11,0.14,0.1,0.04,0.09,0.16,0.09,0.1,0.08,0.11,0.09,0.07,0.1,0.05,0.17,0.1,0.14,0.11,0.07,0.12,0.08,0.06,0.06,0.12,0,6.21,-1.47,564.71,480,1275,10.52,8.13,4.67,12.37,9.39,12.37,16.13},0},
{{0.08,0.11,0.09,0.08,0.1,0.07,0.13,0.1,0.14,0.03,0.11,0.17,0.08,0.11,0.1,0.08,0.06,0.11,0.11,0.05,0.09,0.13,0.11,0.11,0.14,0.12,0.1,0.04,0.09,0.08,0,6.07,-0.88,372.92,370,2775,10.33,8.33,3.6,12.4,9.42,12.4,15.58},0},
{{0.03,0.03,0.02,0.02,0.02,0.04,0.04,0.03,0.04,0.01,0.03,0.09,0.01,0.02,0.03,0.02,0.02,0.03,0.02,0.04,0.01,0.02,0.08,0.02,0.04,0.03,0.01,0.03,0.03,0.04,0,1.52,-0.05,675,450,475,3.09,2.3,1.16,12.68,10.12,12.68,4.41},0},
{{0.16,0.1,0.12,0.11,0.13,0.1,0.1,0.09,0.04,0.07,0.08,0.11,0.09,0.09,0.07,0.05,0.14,0.16,0.14,0.1,0.14,0.15,0.11,0.12,0.09,0.05,0.11,0.07,0.05,0.13,0,9.61,-0.55,1366.67,845.45,2066.67,4.84,3.04,2.6,6.38,3.9,6.38,11.82},2},
{{0.18,0.11,0.09,0.11,0.11,0.08,0.12,0.11,0.03,0.09,0.1,0.11,0.05,0.09,0.07,0.06,0.13,0.14,0.17,0.11,0.11,0.15,0.15,0.06,0.1,0.07,0.11,0.07,0.07,0.12,0,9.71,-0.5,1430,800,2050,5.24,3.17,2.49,6.84,4.04,6.84,12.06},2},
{{0.16,0.1,0.12,0.09,0.12,0.07,0.09,0.12,0.05,0.1,0.1,0.12,0.07,0.07,0.05,0.13,0.09,0.14,0.14,0.1,0.11,0.14,0.13,0.06,0.13,0.07,0.08,0.12,0.09,0.1,0,9.54,-0.51,1575,885,1225,5.34,3.12,2.39,6.99,3.96,6.99,11.97},2},
{{0.13,0.14,0.1,0.1,0.12,0.1,0.07,0.11,0.09,0.06,0.09,0.14,0.07,0.09,0.08,0.1,0.08,0.1,0.16,0.11,0.14,0.12,0.08,0.08,0.1,0.12,0.08,0.1,0.08,0.12,0,9.56,-0.43,1230,657.14,1800,5.34,3.34,2.63,7,4.2,7,12.09},2},
{{0.1,0.06,0.11,0.12,0.14,0.14,0.19,0.07,0.06,0.04,0.08,0.08,0.05,0.13,0.1,0.13,0.12,0.11,0.15,0.08,0.13,0.11,0.12,0.16,0.08,0.06,0.08,0.06,0.14,0.08,0,9.48,-0.72,1370,1125,4125,5.05,2.62,2.27,6.37,3.44,6.37,11.65},2},
{{0.1,0.15,0.11,0.09,0.07,0.11,0.14,0.12,0.07,0.07,0.11,0.1,0.08,0.11,0.09,0.08,0.15,0.1,0.12,0.1,0.09,0.14,0.1,0.11,0.11,0.09,0.11,0.08,0.1,0.09,0,9.28,-0.49,1940,772.73,1325,5.3,3,2.3,6.83,3.91,6.83,11.76},2},
{{0.11,0.16,0.09,0.09,0.12,0.09,0.05,0.11,0.1,0.1,0.09,0.08,0.11,0.08,0.08,0.1,0.15,0.14,0.12,0.09,0.13,0.14,0.12,0.09,0.08,0.1,0.1,0.08,0.09,0.09,0,9.47,-0.62,2366.67,920,3375,5.5,2.91,2.45,7.19,3.79,7.19,12.05},2},
{{0.11,0.11,0.11,0.1,0.15,0.09,0.11,0.09,0.09,0.08,0.1,0.07,0.11,0.06,0.11,0.1,0.13,0.15,0.08,0.1,0.11,0.12,0.15,0.08,0.13,0.08,0.04,0.11,0.08,0.12,0,9.3,-0.4,1391.67,759.09,1583.33,5.36,2.77,2.63,7.03,3.78,7.03,11.84},2},
{{0.14,0.09,0.11,0.07,0.12,0.09,0.1,0.08,0.12,0.1,0.12,0.08,0.09,0.1,0.08,0.12,0.1,0.11,0.09,0.12,0.15,0.11,0.12,0.08,0.09,0.1,0.08,0.1,0.05,0.14,0,9.33,-0.4,1270,671.43,1133.33,5.8,3.15,2.7,7.45,4.14,7.45,12.15},2},
{{0.15,0.1,0.1,0.1,0.11,0.09,0.07,0.1,0.1,0.1,0.13,0.05,0.11,0.1,0.09,0.09,0.1,0.12,0.12,0.11,0.18,0.14,0.1,0.1,0.05,0.08,0.07,0.06,0.09,0.14,0,9.42,-0.48,1630,711.54,2025,5.6,3.14,2.8,7.27,4.08,7.27,12.16},2},
{{0.12,0.13,0.1,0.07,0.09,0.09,0.06,0.07,0.1,0.18,0.1,0.14,0.12,0.07,0.08,0.08,0.07,0.15,0.11,0.1,0.16,0.11,0.12,0.08,0.08,0.09,0.07,0.08,0.12,0.12,0,9.18,-0.37,1230,692.31,2000,6.09,3.16,2.87,7.86,4,7.86,12.35},2},
{{0.09,0.15,0.09,0.08,0.1,0.08,0.1,0.1,0.12,0.12,0.11,0.12,0.14,0.08,0.09,0.06,0.12,0.09,0.09,0.13,0.1,0.13,0.13,0.08,0.1,0.12,0.08,0.08,0.1,0.11,0,9.25,-0.38,2075,790.91,4400,5.88,3.33,2.51,7.54,4.23,7.54,12.22},2},
{{0.11,0.14,0.1,0.07,0.05,0.09,0.13,0.11,0.11,0.11,0.06,0.17,0.16,0.12,0.07,0.07,0.08,0.07,0.12,0.1,0.06,0.09,0.14,0.06,0.17,0.13,0.1,0.1,0.08,0.09,0,9.08,-0.46,1575,809.09,2116.67,5.99,3.21,2.08,7.52,4.1,7.52,11.98},2},
{{0.06,0.12,0.11,0.11,0.07,0.09,0.12,0.12,0.13,0.1,0.08,0.14,0.14,0.12,0.11,0.07,0.08,0.09,0.1,0.1,0.1,0.13,0.09,0.07,0.13,0.11,0.1,0.09,0.11,0.09,0,8.97,-0.34,3650,642.31,2087.5,5.87,3.03,2.44,7.45,3.92,7.45,11.96},2},
{{0.08,0.11,0.1,0.1,0.09,0.08,0.11,0.09,0.15,0.12,0.08,0.15,0.15,0.09,0.08,0.08,0.09,0.1,0.09,0.12,0.07,0.11,0.1,0.07,0.12,0.12,0.1,0.14,0.1,0.09,0,9.03,-0.19,1750,887.5,1575,6.16,3.14,2.31,7.77,3.96,7.77,12.13},2},
{{0.07,0.12,0.13,0.1,0.09,0.05,0.1,0.08,0.19,0.1,0.11,0.14,0.11,0.14,0.06,0.06,0.09,0.1,0.09,0.12,0.09,0.13,0.07,0.09,0.13,0.11,0.08,0.14,0.07,0.1,0,9.05,-0.31,2287.5,800,2025,6.02,3.32,2.4,7.8,4.2,7.8,12.13},2},
{{0.08,0.13,0.11,0.08,0.08,0.08,0.11,0.08,0.15,0.13,0.16,0.12,0.1,0.11,0.1,0.09,0.06,0.11,0.08,0.1,0.08,0.12,0.09,0.08,0.12,0.11,0.1,0.13,0.12,0.08,0,8.81,-0.34,1590,840,2000,6.12,3.26,2.23,7.86,4.25,7.86,11.9},2},
{{0.07,0.11,0.13,0.09,0.12,0.09,0.08,0.08,0.11,0.14,0.16,0.12,0.08,0.09,0.08,0.09,0.07,0.09,0.13,0.12,0.1,0.1,0.09,0.08,0.12,0.1,0.11,0.1,0.11,0.12,0,9.15,-0.13,1512.5,827.27,2050,5.8,3.56,2.54,7.56,4.42,7.56,12.07},2},
{{0.08,0.13,0.1,0.11,0.13,0.09,0.08,0.13,0.09,0.08,0.07,0.1,0.12,0.11,0.1,0.09,0.09,0.14,0.11,0.09,0.09,0.05,0.09,0.13,0.12,0.1,0.08,0.14,0.13,0.1,0,9.22,-0.1,2075,779.17,1625,5.46,2.86,2.43,7.11,3.73,7.11,11.87},2},
{{0.06,0.11,0.05,0.14,0.12,0.15,0.12,0.09,0.1,0.08,0.08,0.11,0.11,0.09,0.13,0.15,0.11,0.09,0.07,0.09,0.08,0.08,0.15,0.13,0.1,0.08,0.08,0.09,0.1,0.12,0,9.04,-0.21,1350,1007.14,2137.5,5.78,2.63,2.55,7.31,3.55,7.31,11.82},2},
{{0.06,0.07,0.07,0.13,0.15,0.12,0.1,0.11,0.11,0.09,0.08,0.07,0.12,0.11,0.16,0.14,0.09,0.07,0.1,0.08,0.06,0.08,0.13,0.06,0.16,0.09,0.1,0.13,0.14,0.08,0,8.98,-0.22,1850,733.33,3850,5.96,2.52,2.21,7.47,3.46,7.47,11.82},2},
{{0.1,0.08,0.05,0.12,0.12,0.12,0.15,0.12,0.07,0.08,0.07,0.1,0.09,0.14,0.16,0.17,0.07,0.06,0.09,0.08,0.08,0.05,0.11,0.07,0.13,0.15,0.11,0.1,0.17,0.05,0,8.89,-0.34,1950,1031.25,600,5.85,2.43,2,7.24,3.39,7.24,11.51},2},
{{0.06,0.07,0.07,0.14,0.15,0.13,0.13,0.09,0.11,0.07,0.06,0.12,0.13,0.11,0.09,0.15,0.13,0.07,0.08,0.1,0.1,0.05,0.09,0.12,0.14,0.11,0.1,0.12,0.13,0.08,0,9.06,-0.35,1433.33,1940,2450,5.89,2.65,2.18,7.41,3.57,7.41,11.8},2},
{{0.07,0.08,0.11,0.12,0.14,0.11,0.12,0.13,0.06,0.09,0.07,0.1,0.07,0.13,0.09,0.19,0.11,0.08,0.1,0.09,0.08,0.08,0.08,0.15,0.12,0.1,0.12,0.09,0.1,0.1,0,9.19,-0.2,2166.67,785.71,2187.5,5.68,2.57,2.43,7.3,3.46,7.3,11.91},2},
{{0.06,0.06,0.1,0.12,0.15,0.12,0.11,0.12,0.08,0.09,0.07,0.1,0.13,0.11,0.15,0.13,0.13,0.05,0.05,0.1,0.07,0.07,0.11,0.16,0.13,0.08,0.12,0.12,0.08,0.09,0,8.91,-0.43,1070,1143.75,1625,5.71,2.53,2.05,7.23,3.54,7.23,11.56},2},
{{0.08,0.08,0.06,0.12,0.15,0.12,0.09,0.1,0.11,0.11,0.08,0.11,0.11,0.12,0.15,0.11,0.1,0.1,0.06,0.08,0.09,0.09,0.08,0.16,0.1,0.07,0.13,0.09,0.11,0.1,0,8.82,-0.34,1266.67,905,1100,6.12,2.57,2.26,7.7,3.52,7.7,11.81},2},
{{0.08,0.06,0.07,0.16,0.09,0.16,0.17,0.09,0.04,0.1,0.06,0.07,0.12,0.1,0.17,0.11,0.12,0.09,0.11,0.06,0.06,0.1,0.11,0.11,0.13,0.09,0.1,0.11,0.15,0.07,0,9.03,-0.36,1700,1370,3425,5.65,2.34,2.08,7.17,3.1,7.17,11.6},2},
{{0.08,0.06,0.07,0.15,0.15,0.12,0.13,0.12,0.08,0.07,0.07,0.11,0.1,0.11,0.14,0.15,0.13,0.06,0.08,0.08,0.09,0.09,0.14,0.11,0.13,0.08,0.1,0.1,0.09,0.1,0,8.95,-0.45,1228.57,860,2325,5.75,2.45,2.24,7.26,3.43,7.26,11.65},2},
{{0.07,0.09,0.07,0.11,0.14,0.14,0.16,0.09,0.07,0.08,0.13,0.07,0.08,0.11,0.14,0.11,0.1,0.11,0.08,0.1,0.06,0.11,0.11,0.13,0.12,0.08,0.09,0.11,0.13,0.09,0,9.04,-0.27,2150,1392.86,4525,5.71,2.75,2.26,7.22,3.7,7.22,11.74},2},
{{0.11,0.09,0.12,0.07,0.13,0.11,0.09,0.08,0.12,0.09,0.06,0.13,0.06,0.1,0.12,0.12,0.12,0.14,0.08,0.1,0.08,0.12,0.11,0.11,0.12,0.08,0.09,0.1,0.12,0.1,0,9.28,-0.31,1587.5,668.18,1566.67,5.66,2.75,2.38,7.28,3.74,7.28,11.92},2},
{{0.11,0.08,0.13,0.08,0.1,0.12,0.09,0.15,0.07,0.08,0.07,0.11,0.09,0.07,0.07,0.14,0.13,0.15,0.12,0.08,0.1,0.12,0.08,0.09,0.09,0.09,0.1,0.13,0.15,0.07,0,9.41,-0.3,1416.67,945,2783.33,5.63,2.75,2.27,7.22,3.66,7.22,11.95},2},
{{0.09,0.09,0.09,0.14,0.13,0.09,0.09,0.1,0.09,0.12,0.08,0.1,0.08,0.1,0.18,0.12,0.12,0.09,0.07,0.1,0.07,0.08,0.12,0.1,0.15,0.11,0.08,0.12,0.08,0.11,0,9.07,-0.3,1416.67,910,3150,5.81,2.65,2.33,7.52,3.67,7.52,11.87},2},
{{0.09,0.09,0.11,0.12,0.1,0.12,0.1,0.1,0.1,0.1,0.09,0.11,0.12,0.06,0.11,0.12,0.12,0.11,0.07,0.11,0.11,0.09,0.14,0.12,0.11,0.07,0.14,0.06,0.05,0.14,0,9.1,-0.4,1031.25,770.83,2100,5.77,2.88,2.53,7.44,3.85,7.44,11.93},2},
{{0.09,0.05,0.13,0.13,0.1,0.12,0.11,0.04,0.12,0.12,0.12,0.08,0.1,0.1,0.09,0.13,0.12,0.08,0.11,0.1,0.11,0.07,0.09,0.18,0.11,0.08,0.09,0.08,0.07,0.13,0,9.16,-0.33,1420,831.82,2366.67,5.76,2.95,2.57,7.46,3.96,7.46,12},2},
{{0.11,0.11,0.12,0.09,0.08,0.09,0.07,0.08,0.12,0.15,0.15,0.11,0.09,0.07,0.11,0.07,0.11,0.11,0.1,0.11,0.11,0.08,0.1,0.13,0.1,0.1,0.1,0.12,0.08,0.11,0,9.02,-0.33,1420,703.85,1235.71,6.16,3.3,2.39,8.01,4.26,8.01,12.16},2},
{{0.12,0.13,0.08,0.07,0.09,0.11,0.07,0.08,0.14,0.13,0.14,0.1,0.07,0.13,0.07,0.09,0.08,0.12,0.11,0.11,0.14,0.12,0.09,0.07,0.07,0.1,0.13,0.11,0.08,0.11,0,9.22,-0.34,1150,643.33,1500,6.13,3.37,2.55,7.85,4.32,7.85,12.27},2},
{{0.11,0.12,0.1,0.12,0.04,0.1,0.09,0.07,0.12,0.14,0.12,0.12,0.07,0.12,0.08,0.12,0.07,0.12,0.12,0.09,0.08,0.09,0.08,0.12,0.13,0.11,0.11,0.1,0.07,0.14,0,9,-0.11,2683.33,865,2050,5.98,3.12,2.44,7.74,4.04,7.74,12.02},2},
{{0.1,0.13,0.12,0.08,0.06,0.09,0.11,0.07,0.14,0.12,0.15,0.1,0.08,0.08,0.12,0.1,0.07,0.11,0.1,0.12,0.1,0.09,0.11,0.11,0.17,0.06,0.09,0.12,0.06,0.12,0,9.15,-0.23,1307.14,596.88,3050,5.97,3.27,2.53,7.72,4.26,7.72,12.12},2},
{{0.14,0.11,0.09,0.09,0.09,0.09,0.08,0.08,0.12,0.13,0.13,0.11,0.09,0.05,0.11,0.1,0.09,0.11,0.12,0.11,0.1,0.11,0.09,0.06,0.1,0.11,0.17,0.08,0.12,0.09,0,9.22,-0.25,2033.33,657.14,2075,6.03,3.29,2.29,7.71,4.27,7.71,12.12},2},
{{0.15,0.15,0.12,0.04,0.06,0.1,0.08,0.09,0.12,0.12,0.14,0.08,0.08,0.08,0.06,0.1,0.11,0.12,0.14,0.1,0.15,0.08,0.07,0.08,0.1,0.1,0.15,0.06,0.12,0.12,0,9.37,-0.28,2525,818.18,1140,5.84,3.35,2.45,7.52,4.32,7.52,12.14},2},
{{0.1,0.09,0.13,0.1,0.06,0.06,0.12,0.11,0.12,0.14,0.1,0.12,0.11,0.15,0.09,0.06,0.09,0.09,0.11,0.11,0.1,0.08,0.09,0.09,0.15,0.1,0.1,0.08,0.12,0.12,0,9.08,-0.16,1458.33,673.08,3700,6.23,3.2,2.45,7.95,4.1,7.95,12.19},2},
{{0.12,0.14,0.09,0.09,0.07,0.07,0.13,0.04,0.13,0.15,0.13,0.11,0.14,0.1,0.07,0.07,0.06,0.12,0.09,0.13,0.07,0.12,0.13,0.08,0.12,0.13,0.09,0.07,0.11,0.1,0,9.15,-0.29,1950,550,587.5,6.04,3.53,2.42,7.75,4.44,7.75,12.19},2},
{{0.1,0.12,0.1,0.11,0.09,0.09,0.07,0.09,0.11,0.15,0.13,0.12,0.14,0.11,0.1,0.08,0.05,0.08,0.11,0.11,0.08,0.1,0.12,0.14,0.11,0.11,0.08,0.1,0.06,0.13,0,8.85,-0.2,1180,1200,1200,6.2,3.3,2.58,8.01,4.22,8.01,12.07},2},
{{0.1,0.13,0.07,0.11,0.08,0.12,0.05,0.13,0.12,0.11,0.12,0.12,0.15,0.1,0.07,0.07,0.07,0.1,0.09,0.13,0.04,0.15,0.11,0.1,0.1,0.09,0.09,0.08,0.16,0.09,0,9.08,-0.14,1840,1375,2216.67,6.13,3.45,2.45,7.83,4.4,7.83,12.2},2},
{{0.12,0.13,0.07,0.12,0.06,0.05,0.08,0.12,0.15,0.11,0.15,0.08,0.16,0.1,0.06,0.05,0.07,0.12,0.11,0.13,0.12,0.09,0.1,0.07,0.1,0.12,0.11,0.07,0.15,0.09,0,9.1,-0.22,1810,1292.86,4525,6.26,3.52,2.51,7.99,4.35,7.99,12.26},2},
{{0.18,0.12,0.1,0.07,0.04,0.06,0.11,0.12,0.13,0.1,0.16,0.06,0.08,0.08,0.13,0.12,0.09,0.08,0.1,0.12,0.12,0.1,0.08,0.06,0.06,0.12,0.16,0.13,0.11,0.09,0,9.14,-0.29,1450,700,1975,5.98,3.47,2.2,7.64,4.61,7.64,12},2},
{{0.12,0.11,0.11,0.07,0.09,0.07,0.08,0.15,0.12,0.11,0.18,0.07,0.09,0.06,0.08,0.1,0.08,0.11,0.1,0.16,0.12,0.11,0.07,0.03,0.07,0.08,0.18,0.15,0.12,0.1,0,9.51,-0.06,1271.43,785,3000,6.25,3.92,2.45,7.94,4.95,7.94,12.55},2},
{{0.09,0.07,0.13,0.11,0.1,0.08,0.11,0.08,0.13,0.12,0.15,0.08,0.1,0.09,0.13,0.11,0.08,0.06,0.1,0.1,0.14,0.06,0.09,0.09,0.11,0.11,0.12,0.1,0.11,0.11,0,8.98,-0.18,1640,707.69,1366.67,6.02,3.15,2.59,7.75,4.14,7.75,12.01},2},
{{0.09,0.11,0.1,0.11,0.1,0.13,0.1,0.1,0.09,0.09,0.1,0.09,0.09,0.09,0.13,0.13,0.12,0.08,0.1,0.09,0.06,0.08,0.09,0.06,0.1,0.18,0.14,0.11,0.1,0.1,0,9.18,-0.1,2300,809.09,1150,5.64,2.82,2.26,7.28,3.8,7.28,11.81},2},
{{0.07,0.11,0.11,0.07,0.12,0.07,0.11,0.15,0.12,0.09,0.08,0.15,0.07,0.16,0.11,0.12,0.1,0.08,0.04,0.12,0.1,0.11,0.08,0.1,0.16,0.05,0.13,0.11,0.09,0.1,0,8.92,-0.38,1025,918.75,775,6.08,2.87,2.37,7.73,3.95,7.73,11.96},2},
{{0.08,0.07,0.14,0.1,0.08,0.12,0.08,0.11,0.13,0.11,0.09,0.1,0.11,0.13,0.1,0.08,0.1,0.12,0.1,0.08,0.13,0.11,0.08,0.08,0.1,0.11,0.07,0.15,0.08,0.11,0,9.05,-0.29,1850,653.85,520,6.15,2.95,2.52,7.98,3.88,7.98,12.18},2},
{{0.06,0.1,0.1,0.09,0.1,0.1,0.11,0.16,0.11,0.09,0.07,0.08,0.14,0.13,0.09,0.07,0.15,0.11,0.07,0.11,0.09,0.09,0.1,0.06,0.1,0.1,0.15,0.1,0.09,0.13,0,9.28,0.12,2100,667.86,2783.33,6.19,2.98,2.68,7.69,4.04,7.69,12.36},2},
{{0.1,0.1,0.1,0.09,0.11,0.13,0.07,0.11,0.08,0.13,0.07,0.09,0.14,0.15,0.09,0.09,0.12,0.1,0.08,0.1,0.07,0.08,0.14,0.08,0.11,0.09,0.15,0.08,0.12,0.11,0,9.03,-0.13,1541.67,1178.57,1866.67,5.92,2.78,2.41,7.61,3.7,7.61,11.97},2},
{{0.11,0.09,0.09,0.15,0.06,0.1,0.07,0.13,0.13,0.09,0.1,0.1,0.13,0.09,0.14,0.09,0.11,0.06,0.11,0.09,0.1,0.09,0.09,0.09,0.12,0.11,0.1,0.1,0.11,0.12,0,9.03,-0.21,2312.5,1027.78,1470,6.02,2.92,2.44,7.68,3.82,7.68,11.99},2},
{{0.11,0.07,0.08,0.08,0.14,0.12,0.16,0.13,0.05,0.09,0.07,0.1,0.06,0.11,0.15,0.16,0.1,0.07,0.1,0.1,0.08,0.08,0.07,0.07,0.08,0.11,0.16,0.17,0.12,0.09,0,9.27,-0.05,1062.5,888.89,975,5.81,2.73,2.23,7.17,3.71,7.17,11.93},2},
{{0.08,0.07,0.13,0.13,0.15,0.11,0.13,0.13,0.05,0.05,0.05,0.07,0.11,0.13,0.09,0.13,0.09,0.16,0.14,0.05,0.16,0.05,0.1,0.04,0.04,0.09,0.13,0.22,0.12,0.06,0,9.26,-0.44,2200,1258.33,2187.5,4.99,2.5,2.19,6.36,3.22,6.36,11.48},2},
{{0.01,0.04,0.03,0.07,0.05,0.08,0.04,0.01,0.02,0.01,0.01,0.02,0.03,0.03,0.06,0.03,0.04,0.06,0.07,0.01,0.09,0.03,0.03,0.04,0.03,0.02,0.03,0.04,0.03,0.01,0,3.09,-0.61,475,500,525,1.26,2.08,0.8,4.91,6.89,4.91,3.59},2},
{{0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.09,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.08,0.12,0,8.92,-0.21,300,1683.33,2200,3.49,3.34,1.78,4.41,4.1,4.41,10.19},5},
{{0.1,0.1,0.08,0.11,0.1,0.09,0.11,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.11,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.11,0.1,0.1,0.1,0,8.98,-0.01,1925,553.85,3525,3.67,2.96,1.61,4.84,4.01,4.84,10.14},1},
{{0,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0.13,-0.01,1925,553.85,3525,0.08,0.13,0.01,5.21,8.45,5.21,0.15},1},
{{0.11,0.11,0.09,0.06,0.09,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.1,0.06,0.08,0.11,0.11,0.11,0.11,0.11,0.11,0.08,0.09,0.07,0.12,0.11,0.11,0.11,0.11,0,8.95,-0.32,1325,1160,2816.67,4.16,3.03,1.56,4.87,3.81,4.87,10.26},5},
{{0,0.01,0.02,0.06,0.02,0.01,0.01,0,0,0,0,0,0,0.02,0.03,0.06,0.01,0,0,0,0.01,0.01,0.02,0.04,0.03,0.01,0,0.01,0.01,0,0,0.94,-0.11,1325,266.67,2816.67,0.54,0.83,0.12,4.98,7.61,4.98,1.09},5},
{{0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.09,0.11,0.1,0.1,0.11,0.1,0.1,0.1,0.08,0.11,0.1,0.11,0.1,0.1,0.1,0.1,0.1,0.1,0.08,0.11,0.11,0.1,0.1,0,8.73,-0.57,2150,536.36,1900,4.3,2.87,1.73,5.37,4.04,5.37,10.27},1},
{{0,0,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0.01,0,0,0,0.01,0,0,0,0,0.01,0,0,0.01,0,0,0.01,0,0,0.13,0,2150,536.36,1900,0.08,0.13,0.02,5.44,8.75,5.44,0.15},1},
{{0.1,0.09,0.1,0.09,0.1,0.09,0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.09,0.1,0.1,0.1,0,8.58,-0.37,550,1416.67,2275,4.19,3.17,1.68,4.98,4.09,4.98,9.98},5},
{{0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.1,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.09,0,7.53,-0.09,2200,431.25,2625,3.42,2.45,1.96,4.88,3.95,4.88,8.82},1},
{{0.09,0.09,0.09,0.08,0.09,0.09,0.08,0.09,0.09,0.09,0.08,0.09,0.08,0.1,0.09,0.09,0.09,0.09,0.08,0.09,0.09,0.08,0.09,0.09,0.08,0.09,0.08,0.1,0.09,0.09,0,7.74,-0.2,325,1280,1650,4.11,3.19,1.76,5.43,4.47,5.43,9.25},5},
{{0.09,0.08,0.09,0.09,0.08,0.08,0.1,0.09,0.08,0.09,0.09,0.08,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.08,0.1,0.07,0.11,0.08,0.09,0.09,0.09,0.08,0,7.7,-0.23,2750,590,2225,3.68,2.61,1.57,5.26,4.09,5.26,9.02},1},
{{0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.09,0.09,0.11,0.09,0.1,0.1,0.1,0.1,0,8.62,-0.38,2750,1066.67,1550,4.28,3.26,1.82,5.12,4.12,5.12,10.13},5},
{{0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0,0.07,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0,0,6.24,-0.12,683.33,525,775,2.9,2.44,1.25,5.11,4.9,5.11,7.26},1},
{{0.08,0.08,0.07,0.09,0.09,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.07,0.09,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.09,0.08,0.09,0.08,0.08,0.08,0,7.39,-0.29,1600,841.67,1162.5,3.6,3.29,1.58,5.22,4.78,5.22,8.69},5},
{{0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.08,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0,6.75,-0.02,983.33,608.33,1583.33,3.19,2.54,1.55,5.08,4.69,5.08,8.02},1},
{{0.09,0.09,0.08,0.09,0.08,0.1,0.07,0.11,0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.08,0.09,0,7.73,-0.11,550,400,2300,4.1,3.35,1.66,5.59,4.81,5.59,9.23},5},
{{0.07,0.07,0.06,0.08,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.06,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.06,0.08,0.07,0.07,0.07,0.07,0,6.63,0.01,1125,525,1650,2.95,2.44,1.47,5.01,4.6,5.01,7.75},1},
{{0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0,7.33,-0.22,1525,671.43,2150,4.12,3.56,1.67,5.67,5.13,5.67,8.95},5},
{{0.07,0.07,0.07,0.07,0.07,0.06,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.06,0.07,0.09,0.07,0.07,0.07,0.07,0,6.4,0.16,1350,516.67,2450,3,2.81,1.88,5.09,5,5.09,7.71},1},
{{0.09,0.09,0.09,0.09,0.09,0.08,0.09,0.08,0.09,0.09,0.09,0.09,0.09,0.09,0.07,0.1,0.09,0.09,0.08,0.09,0.09,0.09,0.08,0.09,0.08,0.09,0.09,0.08,0.1,0.09,0,7.58,-0.14,3225,1275,2800,4.06,3.35,1.62,5.46,4.88,5.46,9.09},5},
{{0.06,0.06,0.07,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.05,0.07,0.06,0.06,0.06,0.06,0.06,0.06,0.05,0.07,0.07,0.06,0.06,0.06,0.06,0.07,0.06,0,5.69,0.13,950,670,2175,2.4,2.66,1.4,4.8,5.5,4.8,6.62},1},
{{0.08,0.08,0.08,0.08,0.08,0.08,0.07,0.1,0.09,0.07,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.09,0.08,0.08,0.08,0.08,0.08,0.09,0.08,0,7.02,-0.05,1950,750,1475,3.76,3.36,1.52,5.46,5.09,5.46,8.47},5},
{{0.06,0.06,0.07,0.06,0.07,0.06,0.05,0.08,0.06,0.06,0.06,0.06,0.07,0.06,0.07,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.07,0.06,0.06,0.06,0,5.52,-0.02,725,616.67,650,2.56,2.79,1.43,5.2,5.85,5.2,6.6},1},
{{0.09,0.1,0.09,0.09,0.09,0.09,0.1,0.09,0.09,0.09,0.09,0.09,0.09,0.1,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.1,0.09,0.09,0.09,0.09,0.09,0.09,0,8.14,-0.35,1500,920,1225,4.43,3.49,1.84,5.69,4.76,5.69,9.92},5},
{{0.07,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.06,0.08,0.07,0.07,0.08,0,6.38,-0.11,825,441.67,1525,2.99,2.73,1.84,4.94,4.84,4.94,7.75},1},
{{0.24,0.17,0.13,0.11,0.12,0.11,0.11,0.02,0.01,0,0.08,0.07,0.17,0.07,0.08,0.08,0.1,0.18,0.1,0.08,0.05,0.06,0.08,0.09,0.22,0.15,0.11,0.11,0.09,0.07,0,5.82,-0.14,2525,485.71,875,5.98,6.33,3.9,7.96,7.65,7.96,12.15},0},
{{0.12,0.15,0.09,0.13,0.14,0.07,0.18,0.1,0.05,0,0.09,0.07,0.15,0.13,0.05,0.06,0.05,0.08,0.1,0.18,0.11,0.07,0.05,0.04,0.1,0.13,0.2,0.11,0.12,0.11,0,6.78,0.61,650,638.46,2750,5.62,8.47,4.97,7.16,9.96,7.16,13.85},0},
{{0.14,0.15,0.15,0.2,0.14,0.07,0.07,0.09,0.02,0,0.04,0.08,0.11,0.1,0.06,0.06,0.09,0.11,0.1,0.23,0.09,0.08,0.12,0.07,0.07,0.07,0.19,0.14,0.09,0.11,0,8.42,0.14,375,348.15,1525,4.24,7.21,5.19,5.46,8.2,5.46,12.83},0},
{{0.37,0.14,0.16,0.06,0.1,0.07,0.06,0.05,0,0,0.08,0.1,0.09,0.07,0.03,0.1,0.1,0.11,0.19,0.13,0.07,0.08,0.09,0.07,0.07,0.13,0.11,0.12,0.16,0.11,0,7.48,0.81,1683.33,561.76,950,6.67,7.27,5.08,8.38,8.53,8.38,14.04},0},
{{0.28,0.09,0.12,0.1,0.1,0.16,0.1,0.06,0.01,0,0.07,0.11,0.17,0.1,0.06,0.08,0.06,0.12,0.14,0.08,0.1,0.1,0.09,0.04,0.04,0.13,0.16,0.15,0.12,0.09,0,5.4,0.44,1175,965,1500,6.87,6.99,4.98,9,8.31,9,13.06},0},
{{0.17,0.21,0.24,0.14,0.14,0.06,0.06,0,0,0,0.07,0.08,0.07,0.07,0.04,0.07,0.08,0.15,0.19,0.15,0.12,0.14,0.1,0.09,0.04,0.11,0.1,0.1,0.1,0.12,0,8.67,-0.49,3300,372.92,1766.67,3.96,7,5.65,5.05,8.18,5.05,13.38},0},
{{0.18,0.19,0.24,0.17,0.07,0.11,0.04,0,0,0,0.07,0.1,0.09,0.05,0.04,0.07,0.12,0.15,0.14,0.13,0.14,0.16,0.07,0.03,0.06,0.12,0.1,0.08,0.15,0.11,0,7.96,-0.44,1450,428.13,550,4.25,7.06,5.8,5.46,8.28,5.46,13.11},0},
{{0.24,0.15,0.12,0.11,0.07,0.13,0.17,0.04,0.01,0,0.04,0.06,0.14,0.08,0.06,0.05,0.11,0.12,0.17,0.12,0.11,0.11,0.06,0.09,0.08,0.06,0.16,0.13,0.15,0.08,0,8.4,0.13,1900,442.5,4575,5.75,6.83,5.28,7.11,7.95,7.11,13.73},0},
{{0.09,0.11,0.07,0.14,0.11,0.15,0.17,0.14,0.04,0.01,0.03,0.09,0.12,0.07,0.06,0.03,0.09,0.11,0.15,0.2,0.13,0.18,0.09,0.04,0.02,0.06,0.16,0.07,0.16,0.11,0,9.07,0,1950,442.86,1408.33,5.26,7.24,6.02,6.45,8.16,6.45,14.4},0},
{{0.06,0.1,0.16,0.13,0.13,0.19,0.13,0.11,0.01,0,0.03,0.07,0.11,0.08,0.08,0.03,0.06,0.14,0.18,0.18,0.09,0.11,0.08,0.08,0.07,0.08,0.13,0.13,0.14,0.11,0,9.25,0.87,1600,397.83,3083.33,4.33,7.2,5.35,5.32,8.2,5.32,13.88},0},
{{0.18,0.19,0.12,0.14,0.13,0.08,0.11,0.07,0,0,0.08,0.06,0.09,0.09,0.08,0.08,0.08,0.09,0.14,0.2,0.08,0.11,0.11,0.03,0.06,0.07,0.17,0.19,0.11,0.1,0,8.12,0.77,3400,393.75,3325,5.14,7.53,4.86,6.58,8.67,6.58,13.53},0},
{{0.15,0.1,0.1,0.07,0.13,0.15,0.21,0.09,0.01,0,0.05,0.08,0.14,0.09,0.05,0.04,0.06,0.05,0.19,0.18,0.1,0.1,0.05,0.06,0.03,0.14,0.17,0.19,0.13,0.06,0,8.86,0.32,583.33,457.14,4575,5.4,7.91,4.59,6.45,8.8,6.45,13.79},0},
{{0.19,0.1,0.09,0.14,0.19,0.16,0.12,0.04,0,0,0.03,0.06,0.08,0.08,0.06,0.06,0.19,0.12,0.13,0.13,0.13,0.09,0.07,0.12,0.05,0.08,0.09,0.17,0.15,0.08,0,8.83,0.05,1050,529.41,2450,4.52,6.33,5.4,5.75,7.57,5.75,13.24},0},
{{0.23,0.22,0.23,0.13,0.11,0.05,0.04,0.01,0.01,0,0.04,0.08,0.05,0.05,0.06,0.09,0.12,0.1,0.22,0.17,0.31,0.1,0.05,0.07,0.07,0.06,0.08,0.06,0.09,0.13,0,9.76,-2.95,4450,389.13,3200,4.46,6.64,7.34,5.6,7.85,5.6,15.05},0},
{{0.25,0.21,0.27,0.11,0.1,0.07,0.01,0.01,0,0,0.07,0.07,0.07,0.04,0.05,0.07,0.15,0.11,0.2,0.16,0.3,0.11,0.07,0.05,0.05,0.07,0.06,0.1,0.12,0.09,0,8.8,-2.92,1875,442.86,1862.5,4.66,6.68,7.59,6,7.98,6,14.7},0},
{{0.25,0.28,0.23,0.13,0.08,0.03,0.01,0,0,0,0.04,0.09,0.03,0.03,0.04,0.06,0.14,0.26,0.19,0.13,0.35,0.1,0.08,0.06,0.05,0.07,0.08,0.07,0.08,0.1,0,9.37,-3.52,2625,492.11,1375,4.68,5.64,6.91,6.1,7.15,6.1,14.67},0},
{{0.32,0.19,0.21,0.14,0.08,0.04,0.03,0.01,0,0,0.06,0.07,0.03,0.05,0.03,0.07,0.17,0.18,0.17,0.15,0.24,0.16,0.09,0.05,0.05,0.05,0.06,0.13,0.09,0.09,0,9.17,-2.26,1216.67,415.22,1850,5.42,5.98,6.47,7.1,7.45,7.1,14.43},0},
{{0.12,0.05,0.13,0.15,0.15,0.18,0.15,0.07,0.03,0.01,0.06,0.07,0.03,0.05,0.09,0.11,0.1,0.06,0.16,0.21,0.21,0.1,0.1,0.06,0.09,0.06,0.09,0.11,0.07,0.13,0,9.76,-1.26,625,438.1,4400,4.54,7.31,6.14,5.83,8.38,5.83,14.84},0},
{{0.05,0.12,0.17,0.2,0.15,0.16,0.14,0.03,0,0,0.08,0.06,0.06,0.04,0.06,0.06,0.11,0.12,0.18,0.18,0.21,0.14,0.13,0.08,0.07,0.07,0.06,0.04,0.08,0.14,0,9.54,-1.87,2700,371.15,4600,3.34,7.09,6.29,4.23,8.43,4.23,14.5},0},
{{0.16,0.15,0.19,0.15,0.16,0.07,0.09,0.05,0.01,0,0.06,0.08,0.03,0.05,0.06,0.06,0.17,0.13,0.17,0.15,0.17,0.14,0.11,0.05,0.04,0.1,0.11,0.12,0.08,0.12,0,9.27,-0.94,2500,402.08,1850,4.33,6.39,6.1,5.7,7.8,5.7,14.08},0},
{{0.28,0.18,0.1,0.09,0.07,0.14,0.08,0.05,0.02,0,0.05,0.03,0.07,0.05,0.09,0.08,0.13,0.14,0.21,0.14,0.06,0.08,0.09,0.08,0.07,0.12,0.16,0.18,0.11,0.09,0,9.12,0.64,1975,442.86,3050,5.89,6.11,4.56,7.23,7.33,7.23,13.7},0},
{{0.08,0.1,0.06,0.09,0.1,0.15,0.21,0.14,0.08,0.02,0.02,0.11,0.12,0.11,0.09,0.04,0.12,0.07,0.19,0.14,0.11,0.08,0.13,0.1,0.04,0.08,0.14,0.17,0.12,0.06,0,7.36,-0.05,650,522.22,2300,6.32,6.64,4.91,7.8,7.65,7.8,13.13},0},
{{0.05,0.11,0.06,0.15,0.09,0.18,0.18,0.15,0.04,0.01,0.03,0.08,0.16,0.06,0.07,0.07,0.09,0.14,0.19,0.11,0.11,0.13,0.09,0.09,0.04,0.11,0.09,0.16,0.08,0.13,0,7.82,0.14,1850,500,1150,5.26,6.64,5.59,6.55,7.59,6.55,13.13},0},
{{0.05,0.16,0.16,0.17,0.17,0.14,0.05,0.09,0.03,0.01,0.04,0.07,0.07,0.11,0.07,0.05,0.13,0.12,0.15,0.17,0.11,0.1,0.09,0.06,0.08,0.11,0.09,0.12,0.14,0.13,0,8.62,0.74,1725,508.33,1612.5,4.15,6.61,5.77,5.56,7.75,5.56,13.3},0},
{{0.06,0.13,0.22,0.18,0.13,0.09,0.13,0.05,0.04,0,0.01,0.05,0.07,0.1,0.08,0.11,0.15,0.11,0.23,0.11,0.03,0.06,0.09,0.13,0.15,0.15,0.13,0.13,0.06,0.09,0,8.8,0.17,1816.67,623.33,2350,3.99,5.61,4.02,5.36,6.58,5.36,12.07},0},
{{0.06,0.03,0.1,0.06,0.12,0.11,0.13,0.12,0.18,0.05,0.1,0.07,0.13,0.09,0.14,0.13,0.07,0.09,0.12,0.1,0.06,0.08,0.12,0.12,0.12,0.07,0.09,0.15,0.09,0.12,0,5.51,0.64,485.29,556.25,1875,8.45,6.19,5.21,10.48,7.7,10.48,13.97},0},
{{0.06,0.03,0.06,0.13,0.13,0.11,0.09,0.14,0.14,0.06,0.11,0.11,0.07,0.11,0.11,0.13,0.12,0.05,0.07,0.14,0.12,0.09,0.16,0.06,0.14,0.09,0.09,0.09,0.1,0.1,0,5.04,-0.48,465,696.15,2062.5,8.32,6.45,5.16,10.59,8.16,10.59,13.98},0},
{{0.07,0.1,0.04,0.06,0.05,0.1,0.08,0.14,0.18,0.11,0.09,0.06,0.05,0.15,0.14,0.13,0.15,0.13,0.09,0.04,0.1,0.11,0.11,0.12,0.09,0.04,0.07,0.09,0.11,0.19,0,4.96,0.88,397.92,1062.5,3150,10.33,5.03,6.32,12.21,6.64,12.21,15.26},0},
{{0.05,0.09,0.1,0.1,0.07,0.05,0.08,0.11,0.15,0.1,0.14,0.1,0.1,0.11,0.16,0.13,0.19,0.05,0.05,0,0.15,0.11,0.08,0.1,0.08,0.1,0.08,0.08,0.12,0.13,0,2.59,-0.33,600,3000,4500,9.59,4.99,5.95,11.84,6.2,11.84,14.23},0},
{{0.09,0.09,0.09,0.05,0.1,0.08,0.06,0.12,0.14,0.1,0.21,0.12,0.05,0.06,0.09,0.1,0.19,0.15,0.05,0,0.2,0.08,0.1,0.09,0.13,0.11,0.07,0.08,0.09,0.07,0,2.53,-1.98,415.91,2550,3200,9.48,6.57,5.41,11.61,7.6,11.61,14.71},0},
{{0.05,0.06,0.06,0.07,0.1,0.1,0.11,0.11,0.21,0.1,0.17,0.17,0.08,0.1,0.14,0.12,0.09,0.08,0.06,0.01,0.14,0.09,0.15,0.1,0.09,0.06,0.06,0.05,0.1,0.18,0,2.03,-0.13,428.57,1050,2400,9.28,5.49,6.46,11.31,6.63,11.31,14.14},0},
{{0.05,0.08,0.1,0.08,0.06,0.08,0.1,0.09,0.15,0.12,0.19,0.13,0.08,0.04,0.13,0.17,0.14,0.11,0.04,0,0.12,0.1,0.13,0.09,0.12,0.1,0.05,0.09,0.13,0.09,0,2.05,-0.65,450,3650,2366.67,9.82,6.13,5.18,12.1,7.19,12.1,14.41},0},
{{0.1,0.09,0.08,0.1,0.06,0.04,0.12,0.09,0.18,0.08,0.23,0.08,0.08,0.05,0.04,0.09,0.17,0.15,0.1,0.03,0.2,0.06,0.1,0.06,0.07,0.13,0.07,0.09,0.07,0.17,0,2.94,-0.45,535.29,2616.67,750,9.22,7.35,6.25,11.3,8.4,11.3,15.16},0},
{{0.03,0.05,0.06,0.09,0.09,0.09,0.07,0.17,0.19,0.09,0.12,0.13,0.09,0.13,0.16,0.16,0.05,0.11,0.06,0.03,0.03,0.14,0.13,0.14,0.12,0.07,0.11,0.09,0.05,0.13,0,3.06,-0.06,374,2100,2375,9.76,5.31,4.9,11.92,6.8,11.92,13.9},0},
{{0.04,0.06,0.03,0.08,0.11,0.11,0.11,0.14,0.14,0.15,0.15,0.11,0.1,0.15,0.14,0.14,0.09,0.08,0.06,0.01,0.02,0.12,0.16,0.12,0.12,0.11,0.06,0.12,0.1,0.09,0,2.53,0.05,373.08,1975,3650,9.54,5.09,4.59,11.69,6.4,11.69,13.27},0},
{{0.03,0.05,0.04,0.07,0.11,0.14,0.07,0.17,0.16,0.11,0.17,0.13,0.11,0.12,0.13,0.11,0.09,0.08,0.07,0.02,0.01,0.1,0.11,0.17,0.11,0.11,0.14,0.07,0.1,0.11,0,2.23,0.42,467.5,2633.33,1783.33,9.19,5.55,4.6,11.25,6.83,11.25,13.14},0},
{{0.01,0.05,0.05,0.07,0.13,0.1,0.1,0.16,0.22,0.09,0.14,0.16,0.07,0.17,0.16,0.1,0.08,0.07,0.06,0.01,0.03,0.07,0.14,0.17,0.13,0.15,0.06,0.1,0.07,0.11,0,2.15,-0.04,393.75,1350,1000,9.19,5.11,4.24,11.24,6.38,11.24,12.87},0},
{{0.03,0.05,0.05,0.06,0.11,0.13,0.11,0.13,0.18,0.11,0.12,0.17,0.13,0.13,0.17,0.12,0.05,0.06,0.06,0.02,0.01,0.08,0.12,0.11,0.2,0.13,0.1,0.1,0.06,0.11,0,2.11,0.23,369.23,2225,1566.67,9.25,4.91,4.29,11.34,6.09,11.34,12.7},0},
{{0.01,0.09,0.03,0.08,0.1,0.16,0.06,0.14,0.18,0.1,0.11,0.16,0.08,0.12,0.13,0.14,0.08,0.06,0.11,0.02,0.01,0.09,0.13,0.12,0.15,0.13,0.15,0.06,0.09,0.09,0,3.14,0.14,391.67,1483.33,2875,9.04,5.61,4.2,11.17,6.96,11.17,13.01},0},
{{0.06,0.03,0.06,0.07,0.07,0.12,0.14,0.08,0.19,0.12,0.16,0.12,0.09,0.16,0.12,0.1,0.14,0.07,0.07,0.01,0.05,0.11,0.11,0.1,0.12,0.16,0.11,0.07,0.1,0.09,0,2.36,0.06,361.11,2312.5,2237.5,10.1,5.41,4.68,12.16,6.71,12.16,14.03},0},
{{0.07,0.06,0.06,0.12,0.05,0.08,0.09,0.11,0.17,0.13,0.15,0.15,0.13,0.12,0.1,0.2,0.08,0.09,0.01,0,0.08,0.15,0.09,0.11,0.11,0.1,0.09,0.06,0.11,0.12,0,1.64,-0.14,511.11,1780,2716.67,9.79,5.01,5.27,12,5.99,12,13.72},0},
{{0.05,0.07,0.07,0.04,0.09,0.1,0.11,0.07,0.17,0.13,0.18,0.14,0.07,0.11,0.08,0.18,0.13,0.08,0.04,0,0.11,0.15,0.1,0.13,0.05,0.12,0.08,0.09,0.1,0.11,0,2.04,-0.57,550,550,1670,10.18,5.5,5.27,12.34,6.49,12.34,14.23},0},
{{0.03,0.08,0.07,0.08,0.12,0.12,0.04,0.09,0.15,0.11,0.19,0.15,0.06,0.1,0.1,0.17,0.1,0.13,0.01,0.01,0.09,0.1,0.11,0.12,0.19,0.07,0.07,0.06,0.09,0.13,0,1.57,-0.21,593.75,1283.33,1283.33,9.37,5.94,5.18,11.77,6.89,11.77,13.85},0},
{{0.02,0.07,0.11,0.08,0.09,0.08,0.07,0.14,0.13,0.13,0.16,0.16,0.06,0.13,0.16,0.14,0.13,0.07,0.01,0,0.06,0.14,0.11,0.18,0.09,0.1,0.09,0.09,0.08,0.1,0,1.52,-0.53,472.5,3125,1166.67,9.39,5.31,4.85,11.72,6.26,11.72,13.49},0},
{{0.02,0.08,0.06,0.04,0.12,0.09,0.12,0.13,0.12,0.17,0.17,0.09,0.17,0.17,0.15,0.1,0.03,0.11,0.04,0,0.02,0.1,0.1,0.17,0.19,0.11,0.08,0.09,0.07,0.09,0,1.42,-0.28,452.38,3575,3125,9.91,5,4.08,12.08,6.31,12.08,13.36},0},
{{0.02,0.06,0.07,0.07,0.08,0.12,0.08,0.13,0.2,0.12,0.13,0.14,0.18,0.14,0.17,0.11,0.04,0.08,0.03,0,0.02,0.05,0.14,0.19,0.12,0.13,0.07,0.08,0.13,0.1,0,1.61,0.56,429.55,2325,375,9.76,4.57,4.79,11.86,5.61,11.86,13.2},0},
{{0.02,0.06,0.07,0.05,0.09,0.07,0.08,0.22,0.21,0.09,0.13,0.16,0.13,0.19,0.14,0.11,0.07,0.09,0,0,0.06,0.1,0.14,0.11,0.18,0.11,0.07,0.08,0.1,0.09,0,1.45,-0.35,397.92,1321.43,1900,10.05,4.49,4.67,11.88,5.51,11.88,13.37},0},
{{0.03,0.07,0.05,0.09,0.07,0.06,0.13,0.17,0.21,0.08,0.14,0.14,0.12,0.14,0.18,0.17,0.05,0.07,0.01,0,0.04,0.08,0.16,0.18,0.15,0.08,0.06,0.08,0.09,0.11,0,1.59,-0.23,404.35,1400,3216.67,9.73,4.47,4.67,11.6,5.35,11.6,13},0},
{{0.04,0.06,0.04,0.07,0.07,0.08,0.14,0.21,0.15,0.1,0.16,0.11,0.14,0.15,0.21,0.1,0.04,0.09,0.02,0,0.02,0.08,0.12,0.2,0.17,0.07,0.11,0.08,0.12,0.06,0,1.55,-0.37,310.34,2633.33,1225,9.55,4.53,3.96,11.39,5.57,11.39,12.53},0},
{{0,0.06,0.07,0.05,0.08,0.06,0.15,0.2,0.19,0.12,0.06,0.12,0.18,0.22,0.16,0.14,0.08,0.04,0.01,0,0.05,0.05,0.12,0.09,0.18,0.19,0.11,0.08,0.1,0.06,0,2.01,-0.31,541.67,2966.67,2225,9.83,3.55,3.7,11.67,4.48,11.67,12.28},0},
{{0.05,0.03,0.05,0.1,0.1,0.11,0.11,0.18,0.11,0.14,0.16,0.09,0.16,0.11,0.1,0.18,0.13,0.05,0.04,0.02,0.07,0.1,0.11,0.12,0.11,0.16,0.11,0.08,0.12,0.06,0,2.33,-0.53,415.22,1425,2175,9.1,5.13,4.23,11.31,6.23,11.31,12.92},0},
{{0.03,0.04,0.01,0.08,0.1,0.1,0.13,0.2,0.16,0.11,0.12,0.18,0.12,0.12,0.13,0.13,0.07,0.1,0.06,0,0.05,0.08,0.12,0.14,0.19,0.14,0.11,0.08,0.06,0.07,0,2.12,-0.68,323.33,2200,2225,9.74,5.39,3.85,11.68,6.65,11.68,13.35},0},
{{0.03,0.05,0.06,0.05,0.1,0.12,0.1,0.12,0.22,0.14,0.17,0.11,0.14,0.15,0.17,0.11,0.1,0.06,0.02,0,0.03,0.08,0.12,0.16,0.15,0.12,0.13,0.06,0.09,0.09,0,1.42,-0.05,390,2800,1650,9.89,4.88,4.22,11.89,5.87,11.89,13.11},0},
{{0.07,0.04,0.02,0.04,0.07,0.07,0.1,0.18,0.24,0.13,0.08,0.1,0.18,0.12,0.16,0.13,0.16,0.06,0.04,0,0.06,0.11,0.08,0.15,0.15,0.13,0.09,0.08,0.07,0.1,0,2.75,-0.39,411.9,1750,975,10.77,4.42,4.24,12.36,5.4,12.36,13.92},0},
{{0,0,0,0,0,0.02,0.04,0.1,0.06,0.01,0.01,0.02,0.07,0.08,0.02,0.02,0,0.01,0,0,0.02,0.01,0.01,0,0.05,0.07,0.02,0.01,0.03,0.01,0,0.23,-0.02,625,650,900,2.16,0.5,0.68,10.94,3.29,10.94,2.43},0},
{{0.13,0.16,0.07,0.06,0.07,0.07,0.1,0.16,0.12,0.08,0.2,0.16,0.09,0.09,0.17,0.06,0.04,0.07,0.07,0.08,0.09,0.05,0.07,0.07,0.06,0.06,0.09,0.14,0.13,0.27,0,7.72,1.45,2275,816.67,1100,4.71,3.42,3.7,6.06,4.38,6.06,10.86},2},
{{0.01,0.04,0.07,0.05,0.04,0.06,0.1,0.25,0.17,0.24,0.06,0.18,0.19,0.16,0.11,0.07,0.05,0.1,0.05,0.05,0.03,0.16,0.11,0.1,0.13,0.1,0.1,0.12,0.11,0.08,0,8,-0.35,1600,2666.67,3175,6.69,2.78,2.44,7.97,3.58,7.97,11.49},2},
{{0,0.02,0.06,0.06,0.08,0.08,0.1,0.17,0.22,0.22,0.08,0.13,0.17,0.18,0.14,0.1,0.05,0.08,0.08,0.01,0.06,0.07,0.09,0.12,0.1,0.09,0.16,0.12,0.14,0.08,0,7.79,0.04,3116.67,733.33,2750,6.61,2.53,2.53,7.9,3.24,7.9,11.3},2},
{{0,0.01,0.05,0.03,0.06,0.07,0.09,0.17,0.31,0.24,0.06,0.19,0.23,0.21,0.08,0.03,0.06,0.11,0.06,0,0.01,0.11,0.08,0.13,0.1,0.1,0.1,0.15,0.17,0.07,0,7.38,0.06,1166.67,1790,3550,7.26,2.39,2.37,8.31,3.04,8.31,11.29},2},
{{0,0.01,0.03,0.03,0.04,0.05,0.11,0.09,0.4,0.26,0.12,0.25,0.21,0.17,0.04,0.07,0.03,0.1,0.03,0,0.05,0.12,0.08,0.14,0.14,0.05,0.09,0.1,0.15,0.11,0,6.72,0.06,3125,2087.5,3150,8,2.22,2.76,8.95,2.88,8.95,11.48},2},
{{0.05,0.06,0.09,0.08,0.12,0.12,0.16,0.16,0.1,0.07,0.09,0.08,0.12,0.12,0.11,0.11,0.09,0.1,0.12,0.08,0.07,0.11,0.09,0.1,0.11,0.1,0.13,0.13,0.08,0.09,0,9.23,-0.29,1366.67,1170,2066.67,4.29,3.31,2.5,5.53,3.95,5.53,11.03},2},
{{0.18,0.14,0.14,0.16,0.13,0.08,0.08,0.07,0.04,0.02,0.13,0.07,0.04,0.08,0.12,0.08,0.12,0.11,0.11,0.15,0.13,0.14,0.09,0.09,0.09,0.1,0.1,0.08,0.1,0.11,0,9.92,-0.41,1733.33,657.14,2050,2.8,3.79,2.97,3.67,4.57,3.67,11.28},2},
{{0.28,0.15,0.18,0.12,0.11,0.07,0.04,0.04,0.03,0.01,0.13,0.06,0.05,0.14,0.06,0.07,0.11,0.09,0.13,0.18,0.18,0.12,0.09,0.09,0.06,0.15,0.06,0.07,0.08,0.11,0,9.91,-0.57,1225,696.15,1983.33,2.73,4.1,3.07,3.55,4.85,3.55,11.41},2},
{{0.19,0.15,0.17,0.13,0.12,0.11,0.06,0.04,0.04,0.02,0.11,0.05,0.09,0.07,0.11,0.1,0.12,0.11,0.13,0.14,0.16,0.12,0.07,0.1,0.08,0.09,0.11,0.1,0.09,0.1,0,9.95,-0.51,1233.33,1006.25,2366.67,2.71,3.62,2.81,3.59,4.37,3.59,11.19},2},
{{0.2,0.19,0.14,0.13,0.1,0.12,0.02,0.04,0.05,0.04,0.09,0.06,0.07,0.08,0.11,0.13,0.11,0.13,0.1,0.14,0.12,0.08,0.07,0.11,0.11,0.14,0.1,0.12,0.09,0.09,0,10.02,-0.44,1025,781.82,2750,2.95,3.5,2.57,4.08,4.33,4.08,11.31},2},
{{0.26,0.25,0.16,0.11,0.07,0.06,0.04,0.03,0.03,0,0.11,0.08,0.06,0.11,0.09,0.09,0.11,0.1,0.14,0.14,0.12,0.11,0.11,0.08,0.06,0.13,0.12,0.1,0.09,0.1,0,9.89,-0.38,3450,596.43,2783.33,2.74,3.79,2.8,3.53,4.53,3.53,11.23},2},
{{0.21,0.17,0.19,0.15,0.09,0.04,0.07,0.03,0.05,0.02,0.1,0.08,0.09,0.05,0.08,0.11,0.1,0.15,0.14,0.12,0.11,0.09,0.07,0.1,0.13,0.12,0.09,0.08,0.14,0.09,0,10.09,-0.36,1050,855.56,3675,2.82,3.68,2.74,3.83,4.44,3.83,11.32},2},
{{0.14,0.2,0.09,0.15,0.12,0.11,0.05,0.04,0.09,0.04,0.1,0.1,0.09,0.04,0.05,0.11,0.11,0.17,0.1,0.15,0.1,0.06,0.08,0.11,0.16,0.13,0.09,0.12,0.1,0.07,0,10.23,-0.51,1333.33,758.33,3033.33,3.22,3.71,2.28,4.49,4.54,4.49,11.49},2},
{{0.1,0.12,0.16,0.1,0.09,0.14,0.11,0.07,0.07,0.07,0.12,0.08,0.12,0.06,0.03,0.12,0.14,0.14,0.09,0.13,0.09,0.08,0.11,0.13,0.13,0.13,0.08,0.07,0.14,0.07,0,9.83,-0.57,1525,745.45,3550,3.55,3.64,2.28,4.81,4.46,4.81,11.22},2},
{{0.08,0.09,0.09,0.12,0.12,0.08,0.14,0.12,0.1,0.09,0.16,0.09,0.08,0.03,0.05,0.13,0.13,0.12,0.09,0.14,0.13,0.09,0.1,0.08,0.13,0.11,0.13,0.07,0.11,0.08,0,9.71,-0.51,2766.67,715.38,1037.5,4.07,3.89,2.57,5.36,4.76,5.36,11.46},2},
{{0.05,0.07,0.08,0.1,0.11,0.09,0.12,0.17,0.11,0.13,0.11,0.16,0.1,0.08,0.09,0.12,0.09,0.04,0.07,0.17,0.11,0.08,0.12,0.12,0.1,0.12,0.09,0.1,0.08,0.1,0,9.26,-0.35,2262.5,587.5,3500,4.82,3.95,2.72,6.16,4.79,6.16,11.47},2},
{{0.1,0.06,0.1,0.11,0.12,0.17,0.11,0.09,0.06,0.1,0.09,0.17,0.09,0.06,0.07,0.1,0.12,0.08,0.12,0.13,0.23,0.1,0.1,0.11,0.1,0.06,0.09,0.06,0.06,0.11,0,9.61,-0.9,1450,620,2000,4.11,3.92,2.95,5.44,4.71,5.44,11.58},2},
{{0.1,0.09,0.12,0.13,0.13,0.09,0.12,0.1,0.07,0.08,0.1,0.08,0.11,0.08,0.11,0.07,0.1,0.13,0.09,0.15,0.16,0.12,0.11,0.07,0.08,0.12,0.09,0.07,0.07,0.12,0,9.73,-0.58,1025,762.5,2050,3.77,3.79,2.8,5.13,4.55,5.13,11.46},2},
{{0.05,0.04,0.08,0.11,0.08,0.13,0.21,0.1,0.09,0.12,0.1,0.11,0.05,0.08,0.1,0.16,0.13,0.11,0.07,0.12,0.08,0.1,0.11,0.14,0.11,0.12,0.08,0.06,0.12,0.09,0,9.53,-0.44,2033.33,681.82,3075,4.54,3.26,2.52,5.94,4.12,5.94,11.41},2},
{{0.05,0.04,0.06,0.07,0.11,0.14,0.16,0.17,0.07,0.16,0.09,0.14,0.11,0.07,0.1,0.12,0.14,0.08,0.09,0.09,0.08,0.15,0.1,0.15,0.09,0.1,0.07,0.08,0.09,0.11,0,9.18,-0.37,2150,890,3500,5.15,3.34,2.77,6.54,4.12,6.54,11.55},2},
{{0.04,0.03,0.04,0.06,0.05,0.11,0.13,0.19,0.21,0.17,0.07,0.15,0.11,0.11,0.2,0.11,0.04,0.03,0.1,0.09,0.09,0.19,0.09,0.15,0.06,0.1,0.07,0.07,0.09,0.12,0,8.7,-0.46,1762.5,1540,1700,6.3,3.1,2.77,7.56,3.97,7.56,11.78},2},
{{0.04,0.07,0.05,0.07,0.13,0.1,0.1,0.16,0.15,0.16,0.09,0.14,0.12,0.16,0.12,0.09,0.05,0.06,0.1,0.09,0.11,0.16,0.14,0.1,0.08,0.04,0.09,0.11,0.06,0.13,0,8.68,-0.49,1000,800,1075,5.46,3.33,2.81,6.95,4.13,6.95,11.37},2},
{{0.12,0.12,0.16,0.13,0.13,0.1,0.11,0.05,0.06,0.06,0.09,0.08,0.09,0.08,0.15,0.08,0.1,0.12,0.15,0.1,0.06,0.13,0.14,0.09,0.1,0.07,0.09,0.1,0.1,0.13,0,9.72,-0.11,1075,827.78,2650,3.31,3.45,3.02,4.59,4.11,4.59,11.27},2},
{{0.04,0.04,0.07,0.09,0.08,0.18,0.17,0.16,0.08,0.1,0.07,0.09,0.1,0.06,0.07,0.21,0.13,0.1,0.12,0.07,0.09,0.12,0.13,0.11,0.11,0.13,0.07,0.03,0.13,0.11,0,9.52,-0.29,1600,1400,2125,4.45,2.91,2.87,5.68,3.67,5.68,11.39},2},
{{0.04,0.05,0.04,0.09,0.05,0.18,0.14,0.2,0.1,0.13,0.04,0.11,0.08,0.14,0.17,0.15,0.09,0.09,0.1,0.07,0.06,0.1,0.14,0.12,0.14,0.1,0.07,0.08,0.11,0.1,0,9.22,-0.24,4250,1466.67,1075,5.06,2.81,2.67,6.28,3.54,6.28,11.37},2},
{{0.1,0.14,0.15,0.18,0.14,0.1,0.11,0.04,0.04,0.02,0.06,0.07,0.08,0.09,0.13,0.12,0.12,0.1,0.17,0.09,0.09,0.09,0.15,0.08,0.09,0.13,0.09,0.08,0.08,0.14,0,9.99,-0.02,1066.67,2150,3750,2.56,3.18,3.04,3.52,3.8,3.52,11.13},2},
{{0.11,0.13,0.14,0.15,0.12,0.11,0.09,0.07,0.05,0.05,0.09,0.05,0.08,0.09,0.12,0.12,0.09,0.14,0.11,0.13,0.07,0.1,0.08,0.12,0.14,0.12,0.11,0.08,0.1,0.1,0,10.03,-0.19,1283.33,845,1600,3.09,3.49,2.66,4.24,4.23,4.24,11.24},2},
{{0.06,0.09,0.06,0.1,0.17,0.14,0.16,0.08,0.1,0.05,0.05,0.1,0.06,0.09,0.13,0.16,0.11,0.11,0.11,0.11,0.06,0.07,0.1,0.06,0.14,0.17,0.14,0.14,0.07,0.08,0,9.84,-0.23,2650,1307.14,3150,3.8,3.1,2.31,4.91,3.87,4.91,11.26},2},
{{0.03,0.1,0.04,0.12,0.1,0.15,0.15,0.15,0.09,0.1,0.07,0.11,0.08,0.09,0.14,0.13,0.11,0.09,0.07,0.12,0.11,0.09,0.1,0.08,0.1,0.12,0.11,0.1,0.13,0.09,0,9.53,-0.35,2400,768.75,2575,4.42,3.3,2.58,5.72,4.11,5.72,11.35},2},
{{0.04,0.05,0.08,0.04,0.11,0.14,0.11,0.2,0.12,0.13,0.06,0.08,0.11,0.15,0.17,0.09,0.09,0.09,0.11,0.08,0.1,0.09,0.14,0.1,0.08,0.12,0.12,0.1,0.09,0.09,0,9.2,-0.59,1050,2483.33,2733.33,4.97,3.07,2.48,6.13,3.71,6.13,11.41},2},
{{0.14,0.12,0.14,0.19,0.13,0.12,0.07,0.05,0.04,0.03,0.06,0.07,0.07,0.16,0.09,0.11,0.13,0.05,0.13,0.14,0.12,0.11,0.09,0.06,0.11,0.1,0.11,0.13,0.1,0.09,0,9.99,-0.2,1766.67,740,2466.67,2.7,3.48,2.92,3.79,4.23,3.79,11.24},2},
{{0.12,0.12,0.14,0.15,0.13,0.13,0.1,0.06,0.05,0.03,0.06,0.03,0.09,0.12,0.1,0.12,0.12,0.13,0.14,0.11,0.09,0.09,0.08,0.1,0.11,0.15,0.07,0.15,0.1,0.09,0,10.19,-0.14,1730,1325,2866.67,2.9,3.16,2.73,3.79,3.81,3.79,11.36},2},
{{0.21,0.16,0.14,0.19,0.09,0.1,0.08,0.04,0.01,0.01,0.11,0.05,0.07,0.1,0.13,0.08,0.13,0.1,0.15,0.12,0.12,0.15,0.1,0.08,0.05,0.09,0.13,0.13,0.06,0.12,0,9.99,-0.23,3350,1171.43,1475,2.45,3.58,2.98,3.15,4.29,3.15,11.2},2},
{{0.12,0.13,0.14,0.11,0.19,0.1,0.09,0.07,0.04,0.03,0.05,0.13,0.06,0.08,0.06,0.13,0.14,0.14,0.14,0.1,0.11,0.07,0.07,0.1,0.07,0.15,0.14,0.13,0.08,0.11,0,10.05,-0.13,2100,1335.71,1025,2.84,3.24,2.78,3.78,3.95,3.78,11.24},2},
{{0.06,0.14,0.08,0.1,0.16,0.18,0.11,0.06,0.1,0.04,0.04,0.08,0.1,0.05,0.09,0.19,0.11,0.16,0.08,0.12,0.07,0.05,0.06,0.08,0.14,0.15,0.18,0.09,0.14,0.06,0,10.14,-0.22,2600,944.44,2600,3.41,3.07,2.17,4.55,3.85,4.55,11.33},2},
{{0.12,0.15,0.13,0.13,0.1,0.11,0.11,0.08,0.06,0.04,0.06,0.09,0.06,0.11,0.1,0.13,0.11,0.12,0.12,0.12,0.05,0.09,0.07,0.11,0.14,0.08,0.21,0.12,0.06,0.1,0,9.92,-0.09,2825,1125,1400,3.19,3.33,2.42,4.3,4.06,4.3,11.16},2},
{{0.23,0.16,0.16,0.1,0.16,0.07,0.04,0.05,0.03,0.01,0.11,0.03,0.06,0.11,0.11,0.11,0.08,0.15,0.17,0.1,0.07,0.1,0.12,0.12,0.09,0.11,0.14,0.1,0.09,0.1,0,10.08,-0.09,2716.67,964.29,1350,2.61,3.55,2.81,3.37,4.29,3.37,11.28},2},
{{0.16,0.15,0.14,0.13,0.14,0.12,0.07,0.03,0.07,0.02,0.08,0.06,0.06,0.1,0.09,0.11,0.17,0.12,0.12,0.11,0.11,0.11,0.06,0.09,0.11,0.1,0.13,0.12,0.1,0.1,0,10.05,-0.25,1000,1022.22,1350,2.84,3.27,2.63,3.81,4.04,3.81,11.19},2},
{{0.16,0.09,0.15,0.16,0.12,0.11,0.09,0.05,0.06,0.04,0.09,0.05,0.08,0.08,0.13,0.12,0.12,0.11,0.12,0.14,0.1,0.12,0.13,0.12,0.09,0.1,0.05,0.1,0.1,0.1,0,10.1,-0.36,2050,1610,883.33,2.99,3.44,2.9,4.06,4.18,4.06,11.42},2},
{{0.12,0.13,0.15,0.13,0.14,0.1,0.07,0.06,0.09,0.04,0.06,0.1,0.07,0.09,0.09,0.11,0.13,0.13,0.11,0.14,0.11,0.05,0.12,0.1,0.08,0.12,0.09,0.18,0.09,0.08,0,10.14,-0.36,1000,809.09,1550,3.29,3.52,2.48,4.65,4.3,4.65,11.47},2},
{{0.13,0.1,0.12,0.15,0.14,0.11,0.09,0.08,0.07,0.03,0.08,0.09,0.05,0.08,0.1,0.12,0.12,0.17,0.11,0.09,0.09,0.1,0.1,0.07,0.1,0.11,0.13,0.12,0.11,0.09,0,9.88,-0.25,4575,1410,1500,3.11,3.25,2.64,4.22,3.94,4.22,11.18},2},
{{0.11,0.08,0.09,0.08,0.12,0.12,0.13,0.14,0.07,0.08,0.06,0.11,0.08,0.09,0.09,0.1,0.18,0.11,0.09,0.12,0.11,0.11,0.15,0.09,0.07,0.13,0.07,0.06,0.15,0.09,0,9.85,-0.49,2616.67,820.83,2975,4.03,3.29,2.78,5.16,4.07,5.16,11.55},2},
{{0.06,0.04,0.04,0.04,0.06,0.12,0.11,0.21,0.15,0.2,0.01,0.17,0.14,0.14,0.14,0.12,0.07,0.08,0.08,0.07,0.09,0.1,0.22,0.1,0.08,0.08,0.05,0.1,0.14,0.07,0,8.83,-0.56,1183.33,1200,2025,6.2,3.01,2.59,7.42,3.83,7.42,11.69},2},
{{0.03,0.04,0.03,0.04,0.05,0.08,0.09,0.2,0.29,0.18,0.04,0.12,0.25,0.19,0.11,0.05,0.04,0.07,0.08,0.06,0.05,0.12,0.22,0.1,0.13,0.05,0.09,0.07,0.09,0.1,0,8.16,-0.47,2262.5,2100,1620,6.68,2.83,2.56,7.73,3.54,7.73,11.49},2},
{{0,0.06,0.03,0.04,0.03,0.06,0.08,0.13,0.27,0.33,0.21,0.2,0.19,0.08,0.07,0.04,0.06,0.06,0.06,0.05,0.04,0.1,0.13,0.15,0.11,0.1,0.09,0.08,0.15,0.08,0,7,-0.15,975,2437.5,1550,8.04,3.11,2.6,9.26,3.97,9.26,11.86},2},
{{0.01,0.03,0.05,0.07,0.02,0.07,0.07,0.12,0.15,0.44,0.28,0.19,0.2,0.05,0.01,0.04,0.09,0.09,0.06,0.02,0.1,0.1,0.17,0.05,0.08,0.1,0.13,0.09,0.11,0.1,0,6.64,-0.4,1480,2950,1616.67,8.19,3.24,2.71,9.54,4.07,9.54,11.96},2},
{{0.01,0.05,0.06,0.02,0.03,0.07,0.11,0.08,0.13,0.47,0.44,0.14,0.09,0.08,0.04,0.06,0.06,0.04,0.04,0.03,0.1,0.12,0.11,0.12,0.1,0.14,0.07,0.07,0.1,0.1,0,5.49,-0.55,1783.33,1933.33,1887.5,8.66,3.27,2.64,10.13,4.25,10.13,11.8},2},
{{0.2,0.17,0.17,0.11,0.11,0.09,0.05,0.04,0.04,0.05,0.09,0.05,0.1,0.09,0.12,0.1,0.04,0.16,0.14,0.12,0.14,0.08,0.05,0.04,0.08,0.05,0.14,0.17,0.12,0.15,0,10.09,0.28,250,718.18,800,3.14,3.86,3.19,4.39,4.61,4.39,11.76},2},
{{0.19,0.19,0.15,0.12,0.16,0.08,0.06,0.04,0.01,0.01,0.09,0.06,0.08,0.06,0.14,0.15,0.08,0.1,0.13,0.13,0.12,0.11,0.09,0.07,0.1,0.08,0.15,0.1,0.09,0.12,0,9.98,0.07,800,2237.5,1850,2.5,3.38,3.26,3.23,4.12,3.23,11.26},2},
{{0.08,0.08,0.08,0.07,0.12,0.16,0.16,0.11,0.11,0.06,0.06,0.08,0.09,0.1,0.09,0.11,0.16,0.09,0.1,0.13,0.09,0.11,0.08,0.12,0.12,0.06,0.13,0.1,0.11,0.1,0,9.95,-0.11,2575,1125,2550,4.09,3.35,2.86,5.15,4.14,5.15,11.61},2},
{{0.08,0.09,0.14,0.1,0.15,0.15,0.11,0.09,0.06,0.05,0.05,0.09,0.08,0.12,0.1,0.1,0.13,0.14,0.08,0.12,0.08,0.1,0.14,0.12,0.1,0.09,0.14,0.07,0.09,0.1,0,9.87,-0.29,1600,628.57,3700,3.41,3.31,2.66,4.57,4.1,4.57,11.26},2},
{{0.17,0.14,0.11,0.17,0.13,0.07,0.08,0.08,0.06,0.02,0.09,0.04,0.11,0.09,0.12,0.11,0.08,0.12,0.14,0.12,0.13,0.14,0.05,0.09,0.09,0.1,0.12,0.11,0.08,0.12,0,9.99,-0.26,1000,1064.29,1525,3,3.67,2.95,3.95,4.43,3.95,11.4},2},
{{0.09,0.08,0.12,0.11,0.13,0.11,0.12,0.08,0.09,0.09,0.06,0.14,0.06,0.08,0.08,0.12,0.12,0.15,0.1,0.11,0.14,0.09,0.11,0.07,0.15,0.07,0.08,0.11,0.09,0.11,0,9.92,-0.43,4250,840,3550,3.9,3.45,2.81,5.21,4.21,5.21,11.63},2},
{{0.07,0.05,0.08,0.02,0.14,0.12,0.14,0.18,0.08,0.14,0.09,0.12,0.08,0.07,0.11,0.11,0.14,0.12,0.06,0.12,0.12,0.09,0.14,0.14,0.09,0.12,0.06,0.06,0.11,0.1,0,9.5,-0.52,4100,1150,1850,4.94,3.41,2.66,6.26,4.22,6.26,11.64},2},
{{0.04,0.05,0.05,0.06,0.05,0.1,0.14,0.13,0.2,0.22,0.08,0.16,0.15,0.16,0.11,0.09,0.08,0.05,0.08,0.08,0.1,0.09,0.1,0.11,0.14,0.1,0.12,0.04,0.13,0.1,0,8.35,-0.45,2525,3350,2366.67,6.45,3.04,2.48,7.82,3.8,7.82,11.54},2},
{{0.03,0.04,0.05,0.04,0.02,0.06,0.1,0.17,0.23,0.28,0.07,0.19,0.16,0.16,0.12,0.08,0.07,0.06,0.07,0.05,0.07,0.11,0.12,0.1,0.08,0.11,0.15,0.08,0.1,0.1,0,7.93,-0.12,2516.67,1287.5,1825,7.19,2.81,2.75,8.34,3.55,8.34,11.78},2},
{{0,0.03,0.04,0.06,0.03,0.05,0.13,0.12,0.25,0.31,0.16,0.21,0.18,0.14,0.08,0.03,0.08,0.07,0.07,0.01,0.07,0.06,0.12,0.14,0.12,0.09,0.11,0.14,0.08,0.1,0,6.96,-0.25,1950,1335.71,1275,7.57,2.67,2.55,8.82,3.5,8.82,11.46},2},
{{0.04,0.09,0.07,0.07,0.08,0.16,0.17,0.16,0.12,0.06,0.11,0.07,0.11,0.1,0.09,0.11,0.1,0.09,0.14,0.11,0.15,0.1,0.03,0.07,0.09,0.06,0.17,0.14,0.1,0.11,0,9.51,-0.09,2075,1510,3100,4.32,3.62,2.87,5.47,4.33,5.47,11.37},2},
{{0.16,0.11,0.15,0.16,0.17,0.11,0.07,0.05,0.03,0.01,0.15,0.06,0.05,0.07,0.1,0.12,0.09,0.1,0.11,0.16,0.18,0.08,0.08,0.09,0.04,0.08,0.11,0.15,0.11,0.11,0,9.78,-0.08,4675,712.5,3950,2.53,4.03,3.19,3.28,4.91,3.28,11.2},2},
{{0.25,0.16,0.2,0.17,0.13,0.04,0.05,0.01,0,0,0.15,0.04,0.05,0.11,0.13,0.09,0.1,0.07,0.11,0.17,0.19,0.07,0.08,0.05,0.06,0.09,0.1,0.19,0.1,0.09,0,9.85,-0.29,987.5,620,1975,2.28,4.06,3.11,3.04,4.96,3.04,11.26},2},
{{0.18,0.12,0.09,0.06,0.02,0.01,0,0,0,0,0.04,0.02,0.04,0.05,0.05,0.05,0.06,0.04,0.08,0.06,0.09,0.04,0.03,0.01,0.03,0.01,0.05,0.13,0.04,0.06,0,4.81,-0.04,1175,762.5,1250,1.13,2.73,1.45,3.07,6.95,3.07,5.36},2},
{{0.06,0.06,0.06,0.07,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.07,0.06,0.06,0.05,0.07,0.06,0.06,0.06,0.06,0.06,0.05,0.07,0.06,0.06,0.06,0.07,0.06,0,5.55,-0.13,1700,1633.33,1600,2.87,2.42,1.15,6,4.69,6,6.79},5},
{{0.07,0.07,0.07,0.06,0.07,0.06,0.07,0.06,0.07,0,0.07,0.07,0.06,0.07,0.07,0.06,0.07,0.07,0.07,0,0.07,0.07,0.07,0.07,0.06,0.07,0.07,0.07,0.06,0,0,6.31,0.47,625,300,1016.67,1.08,2.76,1,2.14,5.06,2.14,6.62},1},
{{0.11,0.09,0.08,0.09,0.09,0.13,0.1,0.09,0.11,0.11,0.11,0.1,0.11,0.09,0.09,0.08,0.1,0.1,0.1,0.1,0.11,0.11,0.09,0.08,0.11,0.09,0.09,0.11,0.1,0.11,0,9.89,0.12,3150,645,3425,2.01,2.7,1.9,2.72,3.55,2.72,10.52},5},
{{0,0.02,0.02,0.02,0,0.01,0.01,0.02,0,0,0,0,0.01,0.01,0.02,0.03,0.01,0.01,0.01,0.01,0,0,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0,0.84,-0.02,175,150,3425,0.08,0.77,0.08,1.27,9.21,1.27,0.85},5},
{{0.1,0.09,0.07,0.11,0.1,0.12,0.1,0.11,0.11,0.11,0.11,0.11,0.1,0.1,0.1,0.08,0.09,0.11,0.11,0.11,0.11,0.11,0.08,0.07,0.11,0.11,0.1,0.11,0.11,0.11,0,9.66,0.03,1250,1912.5,1925,2.01,2.75,1.39,2.64,3.56,2.64,10.15},1},
{{0.02,0.02,0.02,0.03,0,0.01,0.02,0,0,0.01,0,0,0.02,0.01,0.01,0.04,0.02,0.01,0,0.01,0,0.01,0.03,0.06,0,0,0.01,0.01,0.01,0,0,1.03,-0.07,1250,216.67,1925,0.12,0.92,0.09,1.66,8.95,1.66,1.05},1},
{{0.08,0.1,0.09,0.1,0.1,0.1,0.11,0.12,0.1,0.12,0.1,0.12,0.11,0.1,0.11,0.08,0.09,0.09,0.11,0.11,0.11,0.1,0.09,0.1,0.09,0.1,0.11,0.11,0.11,0.11,0,9.79,0.13,1762.5,775,3900,2.15,2.97,2.08,2.85,3.89,2.85,10.52},5},
{{0.03,0.02,0.01,0.03,0.02,0.01,0.01,0,0,0,0,0,0.01,0.01,0.01,0.04,0.02,0.03,0,0,0.01,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0,0,0,1.05,-0.12,250,162.5,3900,0.15,0.94,0.12,2.11,9.03,2.11,1.08},5},
{{0.09,0.07,0.1,0.11,0.1,0.09,0.11,0.1,0.13,0.12,0.12,0.11,0.11,0.1,0.08,0.09,0.09,0.09,0.12,0.12,0.07,0.1,0.07,0.09,0.12,0.13,0.11,0.1,0.13,0.1,0,9.5,0.26,2000,1175,2775,2.77,2.85,1.44,3.45,3.49,3.45,10.24},1},
{{0.04,0.05,0.03,0.01,0.03,0.03,0.02,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.04,0.04,0.04,0.03,0.01,0.01,0.05,0.03,0.04,0.03,0.02,0,0.01,0.01,0.01,0.02,0,2.06,-0.08,533.33,280,475,0.4,1.63,0.42,2.5,7.98,2.5,2.19},1},
{{0.1,0.1,0.09,0.09,0.08,0.1,0.11,0.11,0.11,0.11,0.11,0.11,0.12,0.1,0.12,0.1,0.06,0.08,0.11,0.1,0.1,0.08,0.08,0.09,0.12,0.09,0.11,0.1,0.11,0.11,0,9.64,-0.07,1225,740.91,4550,2.56,2.86,1.66,3.28,3.8,3.28,10.36},5},
{{0.02,0.01,0.03,0.02,0.03,0.03,0.01,0,0,0,0.01,0,0,0.01,0,0.02,0.05,0.03,0.01,0.01,0.01,0.03,0.02,0.02,0.01,0.02,0.01,0.02,0.01,0.01,0,1.26,-0.1,333.33,400,375,0.15,1.1,0.17,1.49,8.96,1.49,1.29},5},
{{0.1,0.08,0.09,0.08,0.11,0.11,0.1,0.1,0.1,0.1,0.1,0.11,0.1,0.1,0.11,0.07,0.09,0.1,0.1,0.1,0.09,0.11,0.1,0.08,0.1,0.09,0.1,0.1,0.1,0.1,0,9.53,-0.13,3200,1310,3700,2.69,3.11,1.54,3.49,3.91,3.49,10.27},1},
{{0.01,0.02,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0.04,0.01,0,0,0,0,0,0,0.02,0.02,0.01,0.01,0,0.01,0,0,0.44,-0.02,3200,100,3700,0.03,0.42,0.04,1.06,9.46,1.06,0.45},1},
{{0.09,0.09,0.11,0.09,0.1,0.1,0.11,0.1,0.11,0.12,0.11,0.11,0.1,0.11,0.1,0.08,0.1,0.09,0.11,0.11,0.09,0.09,0.11,0.09,0.11,0.11,0.12,0.11,0.1,0.09,0,9.49,-0.23,1400,650,575,3.16,2.92,1.66,4.14,3.74,4.14,10.5},5},
{{0.03,0.03,0.01,0.03,0.02,0.02,0.01,0.02,0.01,0,0.01,0.01,0.02,0.01,0.02,0.04,0.03,0.03,0.01,0.01,0.03,0.01,0.02,0.02,0.01,0.02,0.01,0.01,0.02,0.03,0,1.52,-0.04,650,400,575,0.31,1.28,0.38,2.43,8.6,2.43,1.64},5},
{{0.09,0.09,0.1,0.1,0.09,0.11,0.1,0.1,0.1,0.1,0.11,0.11,0.11,0.1,0.09,0.09,0.08,0.09,0.1,0.11,0.11,0.09,0.1,0.1,0.09,0.08,0.09,0.12,0.11,0.1,0,9.44,-0.26,2475,2550,1866.67,2.99,2.92,1.42,3.97,3.84,3.97,10.29},1},
{{0.02,0.02,0.01,0.01,0.01,0.01,0.01,0,0.01,0.01,0,0,0,0.01,0.02,0.02,0.04,0.02,0.01,0,0,0.01,0,0.02,0.03,0.03,0.01,0,0,0.01,0,0.95,-0.07,2475,325,1866.67,0.19,0.86,0.07,2.79,9.1,2.79,0.99},1},
{{0.08,0.09,0.11,0.08,0.12,0.08,0.11,0.1,0.11,0.1,0.11,0.11,0.11,0.1,0.09,0.09,0.07,0.1,0.11,0.1,0.1,0.1,0.1,0.1,0.08,0.11,0.1,0.09,0.1,0.1,0,9.43,-0.28,1325,1062.5,2050,3.43,2.77,1.42,4.31,3.55,4.31,10.44},5},
{{0.03,0.02,0.01,0.01,0.01,0.02,0,0.01,0,0,0,0,0,0.01,0.02,0.02,0.03,0.02,0,0.01,0.01,0.01,0.01,0.01,0.02,0.01,0.01,0.02,0.01,0.01,0,0.93,0,225,250,225,0.15,0.84,0.14,2.08,8.96,2.08,0.97},5},
{{0.1,0.1,0.08,0.1,0.11,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.09,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.09,0.1,0.11,0.09,0.11,0.1,0,9.46,-0.08,1800,718.18,3150,3.02,3.32,1.7,3.92,4.15,3.92,10.38},1},
{{0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.09,0.1,0.1,0.09,0.1,0.1,0.1,0.1,0.09,0.1,0.1,0.1,0.09,0.11,0.1,0.09,0.1,0.11,0.1,0.1,0.1,0.1,0,9.04,-0.1,725,693.75,2416.67,3.46,2.66,1.62,4.68,3.72,4.68,10.17},5},
{{0.08,0.11,0.09,0.09,0.09,0.09,0.1,0.09,0.09,0.1,0.09,0.09,0.1,0.09,0.09,0.09,0.09,0.09,0.1,0.09,0.09,0.1,0.09,0.08,0.1,0.09,0.09,0.09,0.09,0.09,0,8.69,-0.35,1966.67,1040,2425,3.2,3.28,1.57,4.36,4.43,4.36,9.74},1},
{{0.1,0.09,0.09,0.11,0.09,0.11,0.1,0.09,0.11,0.1,0.09,0.1,0.08,0.11,0.1,0.09,0.11,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.1,0.09,0.1,0.09,0.1,0,9.38,1,2700,921.43,975,3.15,3.06,2.36,4.1,4.04,4.1,10.64},5},
{{0.09,0.09,0.12,0.08,0.1,0.09,0.13,0.08,0.12,0,0.12,0.12,0.1,0.07,0.09,0.1,0.05,0.11,0.15,0,0.16,0.1,0.1,0.12,0.07,0.08,0.08,0.14,0.08,0,0,9.77,-0.75,2025,671.43,2000,3.88,5,2.54,5,5.76,5,11.69},2},
{{0.1,0.07,0.12,0.09,0.12,0.13,0.09,0.09,0.09,0,0.13,0.11,0.07,0.11,0.06,0.12,0.11,0.09,0.11,0,0.12,0.1,0.06,0.14,0.09,0.08,0.13,0.11,0.09,0,0,9.84,-0.52,1050,667.86,2083.33,3.85,4.74,2.34,5,5.51,5,11.59},2},
{{0.1,0.08,0.06,0.1,0.14,0.13,0.07,0.09,0.12,0,0.11,0.12,0.09,0.09,0.1,0.1,0.09,0.12,0.11,0,0.08,0.13,0.1,0.09,0.11,0.11,0.14,0.08,0.1,0,0,9.82,-0.37,2137.5,715.38,2700,3.81,4.55,2.39,4.83,5.28,4.83,11.48},2},
{{0.03,0.16,0.07,0.09,0.14,0.12,0.09,0.11,0.11,0,0.1,0.09,0.09,0.12,0.13,0.09,0.08,0.11,0.12,0,0.09,0.14,0.09,0.08,0.13,0.11,0.12,0.09,0.08,0,0,9.9,-0.51,1720,716.67,1625,3.54,4.31,2.37,4.47,5.1,4.47,11.47},2},
{{0.07,0.15,0.09,0.09,0.13,0.11,0.06,0.09,0.12,0,0.1,0.1,0.1,0.11,0.11,0.12,0.09,0.07,0.15,0,0.07,0.13,0.07,0.09,0.12,0.14,0.1,0.11,0.1,0,0,9.76,-0.26,3325,837.5,1850,3.52,4.34,2.48,4.48,5.11,4.48,11.37},2},
{{0.07,0.1,0.09,0.12,0.09,0.11,0.09,0.09,0.17,0,0.12,0.08,0.11,0.1,0.1,0.11,0.11,0.09,0.09,0,0.14,0.11,0.09,0.06,0.11,0.09,0.08,0.13,0.11,0,0,9.79,-0.34,1650,466.67,2200,3.74,4.53,2.69,4.66,5.34,4.66,11.55},2},
{{0.08,0.1,0.09,0.1,0.09,0.16,0.09,0.08,0.15,0,0.12,0.11,0.09,0.11,0.1,0.09,0.1,0.09,0.1,0,0.12,0.1,0.11,0.13,0.08,0.08,0.1,0.1,0.09,0,0,9.71,-0.56,4275,505.26,3200,3.76,4.57,2.43,4.76,5.37,4.76,11.38},2},
{{0.1,0.1,0.1,0.06,0.1,0.13,0.11,0.1,0.13,0,0.13,0.08,0.13,0.06,0.08,0.16,0.08,0.08,0.11,0,0.09,0.09,0.13,0.1,0.1,0.15,0.09,0.11,0.09,0,0,9.7,-0.51,1300,580,1900,3.68,4.57,2.34,4.73,5.37,4.73,11.41},2},
{{0.1,0.13,0.1,0.09,0.14,0.09,0.1,0.09,0.09,0,0.07,0.1,0.13,0.12,0.08,0.12,0.11,0.1,0.09,0,0.05,0.09,0.12,0.1,0.14,0.15,0.09,0.08,0.14,0,0,9.88,-0.2,1850,783.33,1850,3.59,4.31,2.42,4.6,5.05,4.6,11.43},2},
{{0.1,0.15,0.04,0.07,0.14,0.12,0.08,0.13,0.1,0,0.13,0.07,0.12,0.07,0.11,0.09,0.09,0.1,0.12,0,0.11,0.12,0.08,0.08,0.14,0.11,0.11,0.1,0.06,0,0,9.9,-0.4,1740,637.5,2725,3.68,4.59,2.48,4.69,5.35,4.69,11.54},2},
{{0.11,0.07,0.08,0.09,0.14,0.12,0.1,0.11,0.09,0,0.12,0.12,0.09,0.09,0.12,0.05,0.12,0.1,0.11,0,0.14,0.08,0.08,0.13,0.1,0.1,0.1,0.08,0.11,0,0,9.78,-0.53,2133.33,684.62,2133.33,3.71,4.7,2.48,4.62,5.41,4.62,11.4},2},
{{0.12,0.09,0.14,0.12,0.1,0.09,0.07,0.08,0.09,0,0.13,0.13,0.09,0.08,0.11,0.05,0.08,0.13,0.12,0,0.13,0.09,0.14,0.1,0.1,0.06,0.08,0.12,0.11,0,0,9.81,-0.6,1920,567.65,3225,3.54,4.98,2.48,4.54,5.73,4.54,11.4},2},
{{0.1,0.08,0.11,0.12,0.07,0.1,0.15,0.08,0.15,0,0.11,0.12,0.11,0.06,0.13,0.07,0.07,0.1,0.1,0,0.16,0.09,0.09,0.11,0.08,0.1,0.1,0.11,0.07,0,0,9.85,-0.59,1600,793.75,525,3.46,4.83,2.48,4.26,5.62,4.26,11.43},2},
{{0.11,0.1,0.09,0.09,0.11,0.13,0.08,0.15,0.06,0,0.14,0.08,0.07,0.1,0.08,0.11,0.09,0.13,0.13,0,0.12,0.11,0.1,0.1,0.11,0.08,0.1,0.11,0.11,0,0,10.06,-0.46,1075,790,1800,3.55,4.61,2.54,4.5,5.4,4.5,11.62},2},
{{0.13,0.05,0.14,0.12,0.07,0.08,0.12,0.11,0.1,0,0.12,0.13,0.08,0.09,0.08,0.07,0.11,0.13,0.1,0,0.11,0.09,0.12,0.13,0.08,0.07,0.1,0.1,0.1,0,0,9.75,-0.28,3175,544.12,3175,3.64,4.88,2.68,4.63,5.58,4.63,11.45},2},
{{0.14,0.07,0.11,0.11,0.09,0.12,0.1,0.1,0.08,0,0.11,0.1,0.1,0.13,0.1,0.08,0.13,0.1,0.06,0,0.08,0.11,0.12,0.09,0.11,0.08,0.16,0.08,0.09,0,0,9.57,-0.36,1337.5,758.33,2150,3.65,4.5,2.38,4.61,5.28,4.61,11.2},2},
{{0.13,0.1,0.07,0.11,0.1,0.11,0.1,0.09,0.11,0,0.1,0.09,0.09,0.14,0.12,0.06,0.13,0.09,0.12,0,0.06,0.1,0.12,0.14,0.07,0.12,0.1,0.08,0.13,0,0,9.75,-0.15,2200,977.78,2916.67,3.59,4.22,2.56,4.49,4.93,4.49,11.33},2},
{{0.12,0.08,0.12,0.08,0.1,0.06,0.13,0.1,0.14,0,0.04,0.11,0.14,0.11,0.13,0.14,0.09,0.07,0.11,0,0.05,0.09,0.1,0.12,0.09,0.14,0.14,0.07,0.1,0,0,9.97,-0.17,4500,930,2250,3.7,3.97,2.38,4.47,4.79,4.47,11.45},2},
{{0.1,0.09,0.08,0.15,0.09,0.1,0.11,0.09,0.1,0,0.1,0.1,0.11,0.12,0.07,0.09,0.13,0.15,0.07,0,0.1,0.14,0.09,0.07,0.14,0.11,0.06,0.11,0.1,0,0,9.64,-0.63,2175,795.45,2725,3.46,4.39,2.34,4.32,5.08,4.32,11.12},2},
{{0.11,0.1,0.1,0.08,0.12,0.09,0.13,0.1,0.1,0,0.09,0.09,0.09,0.15,0.09,0.12,0.13,0.05,0.11,0,0.11,0.11,0.07,0.08,0.11,0.12,0.11,0.09,0.1,0,0,9.84,-0.3,1100,575,1100,3.48,4.22,2.44,4.31,4.99,4.31,11.34},2},
{{0.08,0.12,0.15,0.07,0.11,0.07,0.1,0.12,0.09,0,0.05,0.13,0.1,0.13,0.1,0.17,0.1,0.07,0.08,0,0.07,0.11,0.09,0.1,0.12,0.12,0.09,0.12,0.08,0,0,9.73,-0.22,1687.5,639.29,1700,3.44,4.02,2.38,4.4,4.84,4.4,11.21},2},
{{0.11,0.09,0.16,0.07,0.13,0.07,0.13,0.08,0.09,0,0.08,0.13,0.1,0.1,0.07,0.11,0.15,0.09,0.09,0,0.09,0.07,0.14,0.11,0.09,0.08,0.11,0.11,0.11,0,0,9.87,-0.1,2250,500,4475,3.35,4.5,2.7,4.3,5.26,4.3,11.42},2},
{{0.13,0.12,0.14,0.1,0.06,0.1,0.09,0.09,0.07,0,0.08,0.11,0.1,0.11,0.13,0.12,0.13,0.1,0.06,0,0.08,0.1,0.08,0.11,0.11,0.09,0.11,0.15,0.11,0,0,9.72,-0.25,1650,606.67,1466.67,3.36,4.06,2.32,4.37,4.93,4.37,11.16},2},
{{0.12,0.12,0.09,0.12,0.09,0.08,0.06,0.15,0.08,0,0.11,0.08,0.13,0.03,0.14,0.1,0.1,0.12,0.1,0,0.1,0.1,0.1,0.09,0.12,0.1,0.08,0.1,0.13,0,0,10.09,-0.12,1650,692.31,1662.5,3.52,4.56,2.68,4.55,5.35,4.55,11.65},2},
{{0.11,0.12,0.07,0.13,0.08,0.12,0.11,0.1,0.09,0,0.07,0.09,0.11,0.09,0.17,0.09,0.09,0.1,0.13,0,0.12,0.07,0.11,0.08,0.11,0.12,0.11,0.1,0.08,0,0,9.96,-0.28,2600,780,3925,3.34,4.17,2.47,4.19,4.94,4.19,11.42},2},
{{0.09,0.15,0.1,0.1,0.11,0.1,0.08,0.11,0.09,0,0.07,0.11,0.11,0.11,0.1,0.15,0.09,0.08,0.13,0,0.09,0.08,0.1,0.11,0.09,0.15,0.07,0.13,0.1,0,0,9.94,-0.24,1833.33,676.92,2550,3.41,4.15,2.37,4.43,4.94,4.43,11.4},2},
{{0.11,0.11,0.1,0.1,0.12,0.09,0.09,0.13,0.11,0,0.12,0.08,0.12,0.11,0.12,0.07,0.09,0.11,0.11,0,0.09,0.09,0.11,0.13,0.09,0.09,0.12,0.11,0.1,0,0,9.74,-0.37,1400,625,2166.67,3.4,4.52,2.43,4.25,5.3,4.25,11.24},2},
{{0.07,0.1,0.14,0.12,0.12,0.11,0.08,0.09,0.07,0,0.11,0.11,0.08,0.13,0.07,0.1,0.09,0.13,0.1,0,0.06,0.11,0.1,0.12,0.11,0.12,0.09,0.12,0.08,0,0,9.98,-0.27,1450,628.57,1100,3.55,4.47,2.41,4.66,5.25,4.66,11.5},2},
{{0.11,0.09,0.11,0.08,0.1,0.13,0.1,0.11,0.1,0,0.12,0.11,0.07,0.07,0.12,0.08,0.1,0.15,0.09,0,0.11,0.07,0.16,0.09,0.06,0.1,0.11,0.12,0.12,0,0,9.92,-0.42,4225,538.24,2116.67,3.71,4.66,2.38,4.69,5.46,4.69,11.56},2},
{{0.1,0.12,0.08,0.1,0.08,0.11,0.13,0.11,0.12,0,0.11,0.1,0.09,0.11,0.12,0.13,0.1,0.09,0.1,0,0.11,0.09,0.1,0.11,0.1,0.09,0.11,0.11,0.11,0,0,9.7,-0.38,1337.5,629.17,2437.5,3.47,4.19,2.51,4.31,5.01,4.31,11.28},2},
{{0.12,0.07,0.08,0.12,0.1,0.11,0.11,0.12,0.09,0,0.1,0.1,0.11,0.09,0.11,0.09,0.1,0.13,0.1,0,0.1,0.09,0.14,0.12,0.11,0.09,0.08,0.09,0.13,0,0,9.81,-0.45,2500,593.33,2150,3.71,4.51,2.52,4.61,5.24,4.61,11.42},2},
{{0.08,0.09,0.09,0.14,0.09,0.09,0.14,0.11,0.12,0,0.05,0.12,0.13,0.12,0.1,0.1,0.12,0.09,0.07,0,0.1,0.08,0.1,0.11,0.14,0.12,0.06,0.09,0.1,0,0,9.79,-0.34,1362.5,538.24,3850,3.56,4.3,2.51,4.4,5.09,4.4,11.29},2},
{{0.03,0.04,0.03,0.02,0.01,0.01,0.02,0.03,0.02,0,0.01,0.03,0.04,0.02,0.02,0.03,0.02,0.03,0.01,0,0.02,0,0.01,0.01,0,0,0.02,0.02,0.08,0,0,1.75,0.5,433.33,525,250,0.69,1.42,0.76,4.64,8.23,4.64,2.28},2},
{{0.1,0.16,0.13,0.14,0.11,0.09,0.05,0.06,0.13,0.05,0.07,0.09,0.08,0.09,0.08,0.11,0.12,0.13,0.12,0.13,0.07,0.09,0.12,0.13,0.13,0.12,0.12,0.08,0.07,0.08,0,-0.31,-1.3,3200,875,2187.5,8.12,6.28,4.29,10.27,8.23,10.27,12.42},0},
{{0,0,0,0.11,0.07,0.18,0.15,0.09,0.14,0.27,0.25,0.19,0.06,0.07,0.09,0.06,0.15,0.07,0.08,0,0.07,0.07,0.12,0.15,0.12,0.12,0.05,0.14,0.1,0.08,0,-6.6,-1,2275,2225,1475,4.83,7.89,4.5,6.22,8.76,6.22,11.94},0},
{{0,0,0.02,0.09,0.18,0.1,0.11,0.09,0.08,0.33,0.24,0.16,0.05,0.04,0.11,0.03,0.16,0.11,0.07,0.04,0.12,0.06,0.09,0.14,0.09,0.09,0.1,0.1,0.08,0.14,0,-5.57,-0.83,1150,1775,2425,6.17,7.96,5.26,8.08,8.95,8.08,12.78},0},
{{0,0,0,0.08,0.18,0.11,0.09,0.04,0.1,0.38,0.13,0.11,0.08,0.1,0.07,0.09,0.16,0.13,0.06,0.09,0.08,0.1,0.08,0.17,0.12,0.06,0.09,0.1,0.11,0.12,0,-2.74,-0.7,745.45,4700,2183.33,7.38,6.62,4.99,9.7,8.29,9.7,12.36},0},
{{0,0.01,0.05,0.09,0.09,0.13,0.09,0.1,0.08,0.39,0,0.01,0.07,0.05,0.06,0.08,0.11,0.07,0.11,0.42,0.07,0.07,0.13,0.1,0.14,0.1,0.1,0.1,0.12,0.11,0,7.21,-0.55,1237.5,567.86,2287.5,6.99,7.24,4.72,8.94,8.27,8.94,13.73},0},
{{0.11,0.08,0.05,0.09,0.18,0.09,0.11,0.11,0.07,0.14,0,0,0,0.06,0.14,0.13,0.11,0.08,0.1,0.34,0.11,0.1,0.07,0.09,0.12,0.11,0.07,0.11,0.14,0.08,0,6.6,-0.49,2033.33,712.5,1750,6.84,6.97,5.17,9.14,7.91,9.14,12.94},0},
{{0.12,0.15,0.14,0.13,0.08,0.11,0.14,0.07,0.06,0.03,0.11,0.1,0.08,0.11,0.14,0.12,0.09,0.1,0.11,0.07,0.08,0.09,0.14,0.1,0.13,0.13,0.11,0.09,0.05,0.09,0,-2.76,-1.38,1260,350,2200,7.79,5.87,4.38,10.13,7.48,10.13,12.08},0},
{{0.15,0.08,0.13,0.11,0.08,0.06,0.12,0.14,0.12,0.04,0.1,0.07,0.11,0.09,0.1,0.15,0.13,0.11,0.13,0.05,0.08,0.12,0.09,0.07,0.07,0.09,0.13,0.12,0.18,0.07,0,-2.08,-0.53,2700,2750,2075,7.72,5.5,4.94,10,7.09,10,11.78},0},
{{0.09,0.14,0.19,0.13,0.08,0.07,0.13,0.09,0.08,0.03,0.13,0.14,0.05,0.08,0.1,0.13,0.11,0.15,0.1,0.03,0.06,0.09,0.12,0.12,0.08,0.09,0.17,0.12,0.1,0.08,0,-3.16,-0.77,750,3275,2866.67,7.84,6.36,4.41,9.97,7.76,9.97,12.11},0},
{{0.12,0.15,0.12,0.1,0.06,0.12,0.14,0.13,0.07,0.02,0.1,0.12,0.1,0.09,0.12,0.1,0.12,0.11,0.12,0.05,0.11,0.09,0.12,0.11,0.11,0.07,0.11,0.12,0.09,0.09,0,-2.63,-1.32,2000,3550,3475,7.9,5.9,4.97,10.33,7.44,10.33,12.3},0},
{{0.11,0.1,0.16,0.07,0.08,0.08,0.14,0.14,0.1,0.04,0.11,0.06,0.05,0.11,0.15,0.17,0.12,0.08,0.13,0.05,0.08,0.15,0.11,0.07,0.12,0.07,0.07,0.11,0.12,0.11,0,-2.07,-1.06,3183.33,4025,3350,7.51,5.25,5.22,9.81,7.13,9.81,11.83},0},
{{0.1,0.13,0.12,0.12,0.12,0.09,0.07,0.09,0.11,0.07,0.14,0.14,0.08,0.11,0.12,0.07,0.09,0.11,0.11,0.05,0.09,0.07,0.12,0.13,0.08,0.12,0.11,0.1,0.09,0.09,0,-3.93,-1.14,1725,2500,2950,7.63,6.72,4.68,9.71,8.12,9.71,12.79},0},
{{0.12,0.16,0.08,0.09,0.1,0.11,0.05,0.13,0.11,0.08,0.14,0.09,0.08,0.11,0.09,0.1,0.08,0.1,0.16,0.08,0.09,0.13,0.07,0.08,0.09,0.07,0.05,0.17,0.14,0.13,0,-2.47,-0.2,2450,4450,2850,7.89,6.6,5.34,10.21,8.14,10.21,12.76},0},
{{0.1,0.09,0.11,0.06,0.1,0.1,0.13,0.14,0.14,0.05,0.1,0.09,0.12,0.08,0.1,0.12,0.09,0.14,0.1,0.07,0.15,0.08,0.09,0.07,0.1,0.11,0.11,0.11,0.1,0.1,0,-2.36,-1.13,2933.33,1770,3125,6.99,5.85,5.26,9.25,7.39,9.25,11.86},0},
{{0.12,0.12,0.09,0.1,0.12,0.07,0.07,0.1,0.12,0.1,0.09,0.1,0.2,0.1,0.06,0.11,0.1,0.07,0.13,0.07,0.18,0.13,0.08,0.07,0.1,0.06,0.13,0.08,0.1,0.09,0,-2.68,-2.03,1316.67,1716.67,2100,7.82,6.02,5.59,10.02,7.51,10.02,12.86},0},
{{0.14,0.11,0.13,0.08,0.1,0.05,0.09,0.1,0.11,0.11,0.06,0.14,0.16,0.13,0.08,0.06,0.09,0.09,0.09,0.13,0.12,0.11,0.12,0.06,0.05,0.08,0.09,0.09,0.15,0.16,0,-1.82,-0.47,3275,2150,2150,8.49,6.01,5.99,10.55,7.26,10.55,13.16},0},
{{0.13,0.1,0.12,0.08,0.09,0.12,0.11,0.09,0.11,0.07,0.11,0.12,0.12,0.1,0.12,0.09,0.08,0.09,0.13,0.07,0.16,0.13,0.12,0.07,0.09,0.08,0.09,0.13,0.07,0.1,0,-2.93,-1.94,1566.67,2675,2012.5,7.56,6.09,5.56,9.97,7.69,9.97,12.62},0},
{{0.12,0.15,0.09,0.11,0.08,0.08,0.07,0.11,0.12,0.09,0.08,0.08,0.12,0.13,0.11,0.08,0.1,0.11,0.13,0.09,0.12,0.16,0.06,0.11,0.1,0.07,0.08,0.12,0.09,0.1,0,-1.53,-1.49,1975,1825,1516.67,8.32,5.64,5.24,10.55,7.23,10.55,12.71},0},
{{0.17,0.08,0.09,0.08,0.12,0.09,0.11,0.09,0.11,0.08,0.12,0.09,0.15,0.12,0.07,0.11,0.07,0.1,0.08,0.11,0.12,0.11,0.11,0.07,0.08,0.14,0.09,0.08,0.08,0.15,0,-2.54,-0.84,1733.33,2000,2775,7.98,6.23,5.39,10.39,7.8,10.39,12.84},0},
{{0.1,0.11,0.13,0.09,0.1,0.08,0.08,0.13,0.12,0.07,0.04,0.12,0.2,0.08,0.08,0.09,0.09,0.1,0.11,0.11,0.16,0.09,0.06,0.09,0.1,0.07,0.11,0.11,0.1,0.13,0,-1.64,-0.92,1075,3775,2233.33,7.61,5.6,5.82,9.67,6.84,9.67,12.25},0},
{{0.15,0.11,0.12,0.09,0.08,0.08,0.08,0.16,0.14,0.03,0.08,0.09,0.11,0.18,0.1,0.11,0.08,0.09,0.08,0.11,0.1,0.12,0.12,0.07,0.09,0.08,0.11,0.11,0.14,0.08,0,-1.86,-0.92,3525,1733.33,1450,8.02,5.47,5.25,10.37,7.22,10.37,12.55},0},
{{0.1,0.13,0.14,0.1,0.07,0.12,0.09,0.09,0.12,0.05,0.07,0.11,0.08,0.1,0.13,0.11,0.17,0.07,0.09,0.1,0.02,0.09,0.13,0.14,0.11,0.13,0.12,0.12,0.06,0.1,0,-1.64,-0.52,2325,2300,2400,7.5,5.31,4.2,9.7,6.9,9.7,11.2},0},
{{0.11,0.1,0.13,0.15,0.08,0.14,0.12,0.07,0.09,0.04,0.06,0.11,0.11,0.16,0.08,0.08,0.12,0.1,0.13,0.08,0.11,0.09,0.1,0.16,0.09,0.12,0.06,0.1,0.12,0.08,0,-1.91,-1.07,733.33,3000,2000,7.1,5.43,5.01,9.4,6.9,9.4,11.38},0},
{{0.13,0.1,0.09,0.08,0.09,0.12,0.15,0.13,0.07,0.06,0.09,0.14,0.12,0.13,0.08,0.1,0.07,0.12,0.09,0.08,0.1,0.07,0.15,0.07,0.1,0.13,0.12,0.07,0.13,0.08,0,-2.67,-0.95,2425,1633.33,1125,7.22,5.99,4.7,9.71,7.49,9.71,12.04},0},
{{0.13,0.09,0.1,0.08,0.14,0.12,0.1,0.11,0.1,0.06,0.12,0.06,0.15,0.13,0.1,0.13,0.06,0.1,0.08,0.1,0.11,0.13,0.08,0.1,0.13,0.09,0.16,0.05,0.09,0.09,0,-2.4,-1.61,2066.67,2116.67,2383.33,7.16,5.63,4.92,9.6,7.31,9.6,11.79},0},
{{0.1,0.16,0.12,0.11,0.1,0.15,0.07,0.06,0.11,0.05,0.05,0.1,0.16,0.11,0.15,0.13,0.04,0.09,0.07,0.13,0.08,0.09,0.12,0.11,0.1,0.14,0.14,0.07,0.09,0.08,0,-1.82,-1.25,2416.67,2250,2933.33,7.77,5.2,4.54,10.09,6.71,10.09,11.76},0},
{{0.11,0.09,0.12,0.17,0.09,0.08,0.05,0.04,0.06,0.05,0.12,0.13,0.07,0.09,0.11,0.07,0.05,0.08,0.05,0.09,0.09,0.08,0.07,0.08,0.1,0.1,0.09,0.07,0.07,0.11,0,-2.97,-0.74,1833.33,2475,2925,6.79,5.75,4.21,10.12,8.63,10.12,11.15},0},
{{0.52,0.32,0.04,0.05,0.05,0.04,0,0,0,0,0.03,0.08,0.06,0.05,0.06,0.05,0.12,0.16,0.19,0,0.07,0.08,0.12,0.11,0.12,0.13,0.05,0.12,0.14,0,0,10.03,-0.2,1733.33,590.63,2466.67,3.12,4.6,2.78,3.91,5.36,3.91,11.41},2},
{{0.44,0.36,0.09,0.03,0.05,0.04,0.01,0,0,0,0.01,0.07,0.04,0.07,0.06,0.06,0.13,0.21,0.18,0,0.04,0.1,0.16,0.09,0.17,0.1,0.08,0.09,0.1,0,0,9.93,-0.38,1510,596.67,2950,2.54,4.19,2.56,3.26,5,3.26,11.07},2},
{{0.35,0.4,0.08,0.06,0.05,0.07,0,0,0,0,0,0.06,0.05,0.08,0.09,0.06,0.13,0.13,0.24,0,0.09,0.1,0.02,0.12,0.2,0.14,0.05,0.11,0.1,0,0,10,-0.23,1193.75,561.76,2625,2.39,4.45,2.72,3.2,5.13,3.2,11.14},2},
{{0.38,0.26,0.17,0.08,0.06,0.06,0.01,0,0,0,0.02,0.06,0.08,0.07,0.06,0.07,0.08,0.16,0.22,0,0.08,0.11,0.13,0.08,0.17,0.08,0.07,0.11,0.1,0,0,9.98,-0.23,1062.5,640,2975,2.54,4.54,2.97,3.36,5.28,3.36,11.31},2},
{{0.2,0.28,0.27,0.09,0.07,0.1,0.02,0,0,0,0.01,0.05,0.04,0.06,0.1,0.08,0.11,0.18,0.2,0,0.04,0.14,0.09,0.13,0.12,0.13,0.05,0.13,0.1,0,0,10.09,-0.3,1887.5,502.78,4325,2.23,4.24,2.67,3.03,4.98,3.03,11.14},2},
{{0.19,0.17,0.33,0.08,0.12,0.09,0.03,0,0,0,0,0.03,0.04,0.06,0.12,0.06,0.1,0.22,0.24,0,0.03,0.11,0.12,0.14,0.17,0.12,0.04,0.1,0.12,0,0,9.96,-0.43,2675,562.5,4575,2.35,3.79,2.51,3.16,4.62,3.16,10.98},2},
{{0.23,0.23,0.25,0.12,0.06,0.09,0.05,0,0,0,0,0.03,0.09,0.08,0.09,0.06,0.1,0.16,0.24,0,0.1,0.07,0.11,0.13,0.16,0.11,0.08,0.08,0.11,0,0,9.91,-0.6,1262.5,497.37,533.33,2.41,4.33,2.45,3.23,5.04,3.23,10.99},2},
{{0.19,0.17,0.22,0.23,0.06,0.06,0.08,0,0,0,0.01,0.03,0.07,0.08,0.09,0.08,0.07,0.16,0.26,0,0.11,0.09,0.08,0.12,0.13,0.12,0.05,0.12,0.13,0,0,9.97,-0.45,1300,534.38,1550,2.59,4.31,2.67,3.44,4.99,3.44,11.19},2},
{{0.17,0.16,0.2,0.24,0.11,0.05,0.08,0.02,0,0,0,0.02,0.07,0.09,0.1,0.05,0.1,0.19,0.2,0,0.09,0.12,0.09,0.12,0.13,0.09,0.08,0.09,0.13,0,0,9.95,-0.43,1290,646.67,3225,2.8,4.2,2.77,3.68,4.93,3.68,11.27},2},
{{0.11,0.12,0.18,0.25,0.13,0.11,0.07,0.04,0,0,0.01,0.03,0.06,0.09,0.1,0.05,0.13,0.18,0.14,0,0.09,0.08,0.07,0.13,0.17,0.12,0.08,0.1,0.1,0,0,9.81,-0.42,1241.67,544.12,4250,3.21,4.3,2.6,4.12,5.03,4.12,11.23},2},
{{0.1,0.12,0.16,0.24,0.16,0.1,0.08,0.06,0.01,0,0,0.03,0.08,0.09,0.06,0.06,0.11,0.19,0.24,0,0.1,0.1,0.09,0.11,0.12,0.11,0.06,0.15,0.09,0,0,9.85,-0.35,2375,682.14,2675,3.51,4.05,2.79,4.53,4.82,4.53,11.43},2},
{{0.04,0.06,0.07,0.1,0.16,0.15,0.21,0.1,0.07,0,0.05,0.1,0.07,0.08,0.1,0.12,0.13,0.18,0.09,0,0.11,0.09,0.08,0.09,0.11,0.16,0.09,0.15,0.04,0,0,7.59,-0.48,1175,857.14,1775,6.64,3.86,2.68,8.05,4.78,8.05,11.6},2},
{{0,0.04,0.03,0.09,0.11,0.16,0.15,0.15,0.15,0,0.14,0.1,0.07,0.1,0.22,0.16,0.09,0.07,0.03,0,0.13,0.06,0.11,0.12,0.09,0.1,0.1,0.11,0.14,0,0,5.37,-0.47,1600,1650,3175,8.7,2.98,2.77,9.96,4.29,9.96,11.62},2},
{{0,0.03,0.06,0.09,0.16,0.11,0.12,0.15,0.12,0,0.19,0.09,0.1,0.11,0.13,0.14,0.11,0.08,0.03,0,0.17,0.11,0.08,0.12,0.05,0.1,0.11,0.11,0.08,0,0,5,-0.91,2225,1162.5,2075,8.71,3.38,2.98,10.22,4.67,10.22,11.76},2},
{{0,0.01,0.06,0.09,0.12,0.1,0.18,0.15,0.14,0,0.14,0.09,0.09,0.1,0.16,0.12,0.11,0.09,0.07,0,0.13,0.09,0.08,0.14,0.07,0.08,0.11,0.14,0.09,0,0,5.58,-0.64,800,1383.33,866.67,9.19,3.45,2.98,10.63,4.62,10.63,12.37},2},
{{0,0.02,0.04,0.11,0.1,0.15,0.12,0.17,0.14,0,0.14,0.1,0.12,0.18,0.09,0.16,0.07,0.07,0.02,0,0.11,0.09,0.1,0.12,0.09,0.13,0.08,0.08,0.11,0,0,5.05,-0.52,920,1460,3125,8.87,3.24,3.05,10.31,4.51,10.31,11.83},2},
{{0,0.01,0.06,0.1,0.12,0.12,0.12,0.17,0.18,0,0.13,0.1,0.14,0.19,0.13,0.11,0.1,0.05,0.03,0,0.12,0.14,0.07,0.1,0.06,0.09,0.14,0.1,0.13,0,0,4.8,-0.61,813.64,2766.67,900,9.09,2.8,2.93,10.45,4.01,10.45,11.7},2},
{{0,0.03,0.05,0.06,0.11,0.12,0.16,0.14,0.18,0,0.14,0.1,0.17,0.14,0.14,0.11,0.12,0.05,0.03,0,0.11,0.12,0.08,0.11,0.05,0.11,0.11,0.11,0.09,0,0,4.7,-0.34,880,1075,1508.33,9.32,2.68,3.07,10.72,3.75,10.72,11.81},2},
{{0,0.03,0.1,0.05,0.04,0.16,0.14,0.15,0.18,0,0.15,0.16,0.13,0.08,0.12,0.14,0.09,0.04,0.05,0,0.13,0.06,0.1,0.08,0.08,0.05,0.21,0.09,0.11,0,0,4.81,-0.24,2137.5,1537.5,1100,9.21,3.25,3.02,10.61,4.41,10.61,12.07},2},
{{0,0.02,0.05,0.08,0.14,0.11,0.09,0.17,0.18,0,0.17,0.12,0.14,0.12,0.11,0.13,0.1,0.06,0.03,0,0.15,0.1,0.1,0.08,0.09,0.09,0.12,0.07,0.11,0,0,4.58,-0.39,895,1660,2766.67,9.45,3.14,3.31,10.91,4.34,10.91,12.16},2},
{{0,0.02,0.04,0.08,0.09,0.14,0.12,0.19,0.17,0,0.18,0.12,0.16,0.15,0.13,0.08,0.08,0.05,0.02,0,0.13,0.13,0.1,0.09,0.04,0.06,0.14,0.11,0.1,0,0,4.46,-0.08,1100,1700,3233.33,9.43,3.12,3.66,10.71,4.41,10.71,12.19},2},
{{0,0.01,0.06,0.1,0.08,0.13,0.14,0.14,0.17,0,0.15,0.17,0.16,0.12,0.08,0.14,0.09,0.04,0.04,0,0.12,0.16,0.07,0.09,0.04,0.05,0.15,0.1,0.1,0,0,4.34,-0.37,653.33,1270,2450,9.6,3.1,3.37,11.05,4.28,11.05,12.17},2},
{{0,0.01,0.05,0.07,0.12,0.13,0.12,0.17,0.16,0,0.18,0.15,0.1,0.16,0.12,0.09,0.12,0.04,0.02,0,0.09,0.12,0.12,0.07,0.07,0.04,0.15,0.13,0.12,0,0,4.45,-0.11,950,1575,2116.67,9.78,3,3.01,11.14,4.13,11.14,12.1},2},
{{0,0.01,0.04,0.1,0.15,0.08,0.12,0.15,0.19,0,0.17,0.17,0.15,0.12,0.09,0.14,0.09,0.03,0.03,0,0.12,0.11,0.11,0.12,0.06,0.06,0.15,0.09,0.07,0,0,4.15,-0.43,865,2483.33,1116.67,9.4,2.89,3.11,10.83,4.02,10.83,11.77},2},
{{0,0.03,0.03,0.1,0.12,0.1,0.09,0.16,0.19,0,0.19,0.14,0.17,0.08,0.11,0.12,0.09,0.06,0.02,0,0.1,0.11,0.08,0.09,0.09,0.12,0.11,0.09,0.08,0,0,4.16,-0.08,966.67,1216.67,2800,9.66,3.17,3.33,11.16,4.39,11.16,12.22},2},
{{0,0.01,0.05,0.09,0.12,0.1,0.14,0.14,0.17,0,0.19,0.15,0.16,0.09,0.11,0.11,0.1,0.04,0.02,0,0.13,0.11,0.14,0.12,0.06,0.06,0.14,0.04,0.1,0,0,4.22,-0.6,716.67,1930,1078.57,9.67,3.04,3.24,11.07,4.23,11.07,12.12},2},
{{0,0.02,0.04,0.07,0.14,0.12,0.11,0.16,0.16,0,0.17,0.2,0.17,0.09,0.1,0.07,0.11,0.02,0.04,0,0.12,0.09,0.13,0.07,0.08,0.07,0.12,0.12,0.07,0,0,4.12,-0.22,804.55,1700,1300,9.46,3.04,3.26,10.94,4.24,10.94,11.98},2},
{{0,0.01,0.07,0.06,0.07,0.13,0.12,0.21,0.21,0,0.22,0.18,0.16,0.07,0.11,0.11,0.06,0.05,0.02,0,0.06,0.07,0.09,0.1,0.12,0.11,0.18,0.09,0.11,0,0,4.01,-0.22,981.25,2650,1487.5,9.67,3.12,2.55,10.94,4.21,10.94,11.78},2},
{{0,0.01,0.06,0.06,0.07,0.09,0.24,0.19,0.19,0,0.16,0.14,0.15,0.08,0.09,0.18,0.11,0.04,0.03,0,0.06,0.07,0.11,0.09,0.07,0.12,0.15,0.1,0.12,0,0,4.01,0.11,1675,2075,3525,8.64,2.44,2.66,10.15,3.3,10.15,10.75},2},
{{0.12,0.11,0.09,0.07,0.09,0.08,0.12,0.13,0.15,0.07,0.08,0.05,0.07,0.14,0.11,0.12,0.15,0.06,0.1,0.12,0.06,0.14,0.09,0.15,0.09,0.09,0.11,0.09,0.09,0.1,0,-0.72,-0.84,3750,3625,3300,7.73,5.96,5.21,10.21,8.02,10.21,12.46},0},
{{0.1,0.07,0.08,0.1,0.13,0.11,0.08,0.11,0.16,0.08,0.08,0.09,0.12,0.19,0.06,0.09,0.14,0.07,0.09,0.09,0.07,0.15,0.11,0.07,0.08,0.14,0.09,0.13,0.1,0.09,0,-2.59,-0.65,1025,2950,2150,6.84,5.82,5.28,9.06,7.22,9.06,11.81},0},
{{0.08,0.1,0.1,0.09,0.12,0.09,0.1,0.13,0.17,0.04,0.07,0.13,0.14,0.11,0.1,0.13,0.12,0.04,0.08,0.09,0.07,0.14,0.1,0.09,0.09,0.03,0.14,0.14,0.12,0.1,0,-2.74,-0.24,990,1800,1450,7,5.77,5.6,9.32,7.27,9.32,12.17},0},
{{0.08,0.08,0.09,0.12,0.09,0.1,0.11,0.15,0.12,0.09,0.13,0.12,0.05,0.11,0.09,0.07,0.12,0.16,0.07,0.11,0.08,0.13,0.09,0.07,0.12,0.1,0.13,0.18,0.07,0.07,0,-2.43,-0.66,1762.5,775,4225,6.91,6.93,5.21,9.13,8.6,9.13,12.54},0},
{{0.12,0.12,0.06,0.1,0.1,0.1,0.1,0.11,0.09,0.12,0.12,0.12,0.13,0.11,0.05,0.1,0.06,0.07,0.15,0.11,0.14,0.06,0.09,0.11,0.08,0.09,0.12,0.11,0.13,0.08,0,-2.7,-0.66,500,1900,825,7.85,7.08,5.94,10.25,8.49,10.25,13.64},0},
{{0.13,0.05,0.07,0.09,0.09,0.12,0.13,0.08,0.13,0.13,0.12,0.06,0.14,0.1,0.12,0.08,0.09,0.1,0.09,0.12,0.11,0.11,0.07,0.08,0.13,0.13,0.09,0.06,0.12,0.13,0,-2.61,-0.41,1533.33,3450,3975,6.93,6.36,5.56,9.32,7.9,9.32,12.46},0},
{{0.11,0.1,0.1,0.06,0.1,0.09,0.14,0.13,0.07,0.11,0.13,0.09,0.13,0.11,0.07,0.07,0.05,0.11,0.12,0.13,0.11,0.1,0.09,0.09,0.1,0.07,0.14,0.11,0.14,0.08,0,-2.48,-0.51,1283.33,1533.33,1700,7.4,6.94,5.71,9.76,8.32,9.76,13.04},0},
{{0.12,0.07,0.08,0.12,0.1,0.09,0.11,0.14,0.1,0.11,0.12,0.08,0.14,0.1,0.07,0.08,0.09,0.14,0.11,0.09,0.12,0.12,0.09,0.09,0.05,0.1,0.13,0.11,0.1,0.12,0,-2.57,-0.54,2462.5,3400,1150,7.32,6.41,6.2,9.65,7.81,9.65,12.9},0},
{{0.1,0.1,0.07,0.08,0.13,0.15,0.1,0.05,0.1,0.15,0.11,0.12,0.17,0.09,0.04,0.05,0.07,0.1,0.12,0.15,0.14,0.11,0.08,0.1,0.1,0.09,0.08,0.09,0.11,0.11,0,-2.43,-1,3975,1066.67,3975,7.4,7.21,6.15,9.79,8.37,9.79,13.66},0},
{{0.08,0.07,0.12,0.08,0.14,0.09,0.11,0.08,0.08,0.18,0.08,0.1,0.2,0.08,0.06,0.04,0.08,0.11,0.11,0.15,0.11,0.08,0.08,0.11,0.15,0.09,0.08,0.08,0.11,0.12,0,-2.13,-0.45,1483.33,1450,2575,7.29,6.71,5.77,9.38,7.88,9.38,12.85},0},
{{0.07,0.13,0.09,0.07,0.12,0.13,0.08,0.1,0.08,0.16,0.06,0.1,0.14,0.11,0.05,0.09,0.09,0.08,0.14,0.16,0.12,0.08,0.07,0.09,0.07,0.15,0.13,0.05,0.09,0.15,0,-1.18,-0.13,2883.33,3300,2150,7.59,6.44,5.85,9.75,7.68,9.75,13.09},0},
{{0.07,0.09,0.14,0.08,0.16,0.1,0.09,0.07,0.09,0.14,0.08,0.13,0.11,0.11,0.06,0.07,0.09,0.11,0.16,0.11,0.11,0.12,0.09,0.07,0.09,0.11,0.13,0.09,0.07,0.13,0,-1.69,-0.73,3775,1600,1450,7.34,6.53,6.02,9.44,7.71,9.44,12.85},0},
{{0.12,0.1,0.07,0.1,0.12,0.13,0.08,0.1,0.1,0.11,0.1,0.18,0.15,0.08,0.07,0.07,0.04,0.09,0.13,0.1,0.15,0.08,0.12,0.12,0.1,0.09,0.1,0.07,0.07,0.13,0,-3.26,-1.23,3200,1375,3225,7.5,6.88,6.15,9.94,8.11,9.94,13.57},0},
{{0.1,0.12,0.05,0.07,0.07,0.14,0.15,0.09,0.04,0.19,0.11,0.16,0.11,0.09,0.08,0.04,0.05,0.09,0.12,0.16,0.16,0.07,0.08,0.1,0.11,0.11,0.11,0.08,0.12,0.1,0,-2.41,-0.98,3375,1230,2250,7.99,7.57,6.1,10.48,8.91,10.48,14.3},0},
{{0.1,0.07,0.08,0.11,0.13,0.12,0.11,0.04,0.07,0.19,0.09,0.12,0.17,0.1,0.08,0.06,0.1,0.09,0.09,0.13,0.15,0.07,0.08,0.08,0.12,0.1,0.1,0.08,0.11,0.13,0,-2.6,-0.62,1760,1043.75,1300,7.83,6.52,6.27,10.17,7.88,10.17,13.7},0},
{{0.12,0.09,0.12,0.07,0.12,0.12,0.12,0.07,0.08,0.11,0.13,0.18,0.15,0.08,0.03,0.03,0.08,0.11,0.09,0.16,0.16,0.08,0.08,0.12,0.11,0.08,0.08,0.1,0.07,0.14,0,-3.11,-1.11,2200,1300,2200,8.19,7.56,6.73,10.66,8.6,10.66,14.64},0},
{{0.08,0.12,0.12,0.09,0.14,0.14,0.08,0.07,0.05,0.12,0.14,0.14,0.11,0.1,0.05,0.04,0.1,0.09,0.11,0.13,0.14,0.13,0.08,0.09,0.14,0.09,0.06,0.08,0.06,0.15,0,-3.15,-1.2,1850,1800,1825,7.96,7.41,6.43,10.31,8.76,10.31,14.18},0},
{{0.1,0.13,0.07,0.09,0.13,0.09,0.08,0.07,0.07,0.17,0.1,0.09,0.16,0.12,0.13,0.07,0.06,0.1,0.1,0.11,0.12,0.07,0.06,0.1,0.15,0.14,0.06,0.1,0.13,0.1,0,-2.64,-0.41,4050,2100,1025,8.57,6.03,5.6,10.83,7.55,10.83,13.62},0},
{{0.11,0.1,0.13,0.14,0.07,0.07,0.08,0.07,0.15,0.1,0.07,0.05,0.06,0.16,0.19,0.09,0.1,0.1,0.13,0.08,0.12,0.1,0.13,0.11,0.09,0.13,0.04,0.11,0.09,0.11,0,-1.39,-1.27,2466.67,2200,2675,8.3,5.27,5.74,10.34,6.93,10.34,12.9},0},
{{0.13,0.06,0.16,0.12,0.07,0.07,0.11,0.05,0.14,0.1,0.07,0.07,0.03,0.16,0.17,0.12,0.11,0.11,0.12,0.08,0.1,0.15,0.09,0.09,0.15,0.06,0.12,0.08,0.07,0.11,0,-1.48,-1.16,1450,2162.5,3250,8.17,5.27,5.57,10.19,7.03,10.19,12.62},0},
{{0.14,0.07,0.11,0.17,0.05,0.08,0.08,0.19,0.1,0.03,0.11,0.06,0.03,0.07,0.17,0.2,0.13,0.09,0.1,0.07,0.05,0.09,0.18,0.1,0.12,0.1,0.09,0.08,0.09,0.13,0,-2,-0.45,1266.67,1925,3875,7.67,5.11,5.18,9.95,6.98,9.95,11.78},0},
{{0.1,0.14,0.12,0.12,0.07,0.06,0.11,0.17,0.12,0.02,0.13,0.07,0.05,0.06,0.11,0.22,0.14,0.1,0.09,0.06,0.04,0.09,0.15,0.13,0.08,0.1,0.09,0.16,0.11,0.08,0,-2.69,-0.31,1475,1200,662.5,7.9,5.82,4.92,10.2,7.54,10.2,12.01},0},
{{0.1,0.12,0.16,0.08,0.07,0.11,0.07,0.07,0.15,0.09,0.08,0.11,0.01,0.12,0.13,0.15,0.18,0.1,0.09,0.06,0.07,0.17,0.09,0.09,0.06,0.11,0.13,0.13,0.1,0.09,0,-2.03,-0.85,2433.33,1216.67,1275,8.34,5.21,5.5,10.49,6.85,10.49,12.53},0},
{{0.1,0.12,0.12,0.17,0.05,0.1,0.12,0.11,0.1,0.04,0.1,0.08,0.05,0.06,0.17,0.17,0.12,0.15,0.08,0.05,0.05,0.11,0.12,0.13,0.11,0.14,0.07,0.1,0.12,0.07,0,-2.1,-0.69,2725,3125,2725,7.83,5.13,4.73,10.08,6.81,10.08,11.61},0},
{{0.12,0.15,0.09,0.1,0.09,0.11,0.12,0.11,0.1,0.03,0.13,0.06,0.05,0.03,0.17,0.19,0.15,0.13,0.06,0.06,0.1,0.04,0.17,0.12,0.1,0.09,0.11,0.13,0.09,0.08,0,-2.61,-0.96,3200,1850,675,7.84,5.62,5.21,10.37,7.49,10.37,12.05},0},
{{0.07,0.16,0.12,0.11,0.07,0.06,0.12,0.17,0.11,0.05,0.09,0.09,0.05,0.08,0.17,0.15,0.16,0.16,0.06,0.02,0.07,0.06,0.18,0.11,0.07,0.12,0.12,0.11,0.16,0.04,0,-2.62,-0.78,2283.33,2375,1183.33,7.77,4.94,4.86,10.02,6.48,10.02,11.46},0},
{{0.05,0.14,0.15,0.16,0.08,0.08,0.07,0.1,0.07,0.01,0.07,0.11,0.03,0.03,0.16,0.2,0.13,0.08,0.06,0.04,0.02,0.04,0.14,0.11,0.09,0.13,0.09,0.13,0.13,0.04,0,-2.25,0.23,1125,1825,3250,7.16,4.2,3.78,10.18,6.36,10.18,10.05},0},
{{0.17,0.19,0.17,0.11,0.07,0.11,0.09,0.04,0.04,0.02,0.12,0.07,0.07,0.08,0.13,0.14,0.06,0.12,0.12,0.09,0.09,0.15,0.12,0.09,0.14,0.09,0.09,0.06,0.09,0.1,0,2.02,0.25,4625,380,3550,6.05,5.69,3.68,8.44,7.82,8.44,10.27},5},
{{0.02,0.06,0.06,0.13,0.13,0.11,0.06,0.14,0.13,0.14,0.06,0.11,0.12,0.11,0.11,0.09,0.1,0.07,0.13,0.1,0.14,0.08,0.1,0.13,0.13,0.05,0.09,0.11,0.09,0.09,0,2.76,0.1,420.83,733.33,3600,5.92,5.47,3.73,8.54,7.25,8.54,10.05},5},
{{0.2,0.15,0.14,0.07,0.08,0.12,0.14,0.08,0.02,0.03,0.15,0.1,0.1,0.13,0.09,0.09,0.12,0.09,0.05,0.08,0.12,0.12,0.09,0.08,0.05,0.12,0.13,0.09,0.12,0.12,0,0.74,0.49,4275,308.33,2775,6.47,5.99,3.84,9.07,8.8,9.07,10.95},5},
{{0,0,0.03,0.08,0.1,0.06,0.12,0.14,0.21,0.17,0.07,0.11,0.11,0.08,0.06,0.1,0.11,0.12,0.1,0.09,0.05,0.06,0.09,0.09,0.09,0.15,0.09,0.14,0.1,0.09,0,1.96,0.63,805.56,450,3150,6.21,4.58,2.73,9.35,6.91,9.35,9.03},5},
{{0.15,0.13,0.14,0.15,0.1,0.11,0.13,0.04,0.03,0.04,0.05,0.13,0.11,0.09,0.12,0.15,0.12,0.1,0.08,0.07,0.08,0.06,0.06,0.12,0.12,0.12,0.15,0.12,0.09,0.09,0,9,1.23,1225,730.77,975,4.54,3.83,3.23,5.67,4.72,5.67,11.12},1},
{{0.1,0.08,0.09,0.1,0.08,0.1,0.11,0.11,0.14,0.11,0.12,0.1,0.11,0.09,0.06,0.12,0.1,0.07,0.13,0.12,0.11,0.13,0.12,0.09,0.08,0.13,0.08,0.09,0.09,0.11,0,9.13,0.81,1925,607.14,2583.33,3.47,4.71,3.66,4.8,5.62,4.8,11.06},1},
{{0.09,0.1,0.08,0.09,0.12,0.12,0.06,0.15,0.11,0.1,0.12,0.09,0.07,0.13,0.09,0.09,0.12,0.12,0.09,0.1,0.09,0.13,0.11,0.11,0.12,0.07,0.08,0.1,0.13,0.07,0,9.23,0.78,3675,536.11,2450,3.58,4.43,3.65,4.82,5.32,4.82,11.25},1},
{{0.03,0.06,0.04,0.04,0.06,0.05,0.07,0.06,0.1,0.12,0.08,0.05,0.08,0.07,0.08,0.02,0.03,0.08,0.06,0.09,0.09,0.05,0.07,0.05,0.05,0.05,0.06,0.05,0.07,0.09,0,5.58,0.78,1250,583.33,1850,1.99,3.12,2.88,4.31,6.51,4.31,7.15},1},
{{0.21,0.16,0.15,0.08,0.09,0.11,0.11,0.09,0.02,0,0.11,0.1,0.04,0.09,0.13,0.15,0.12,0.12,0.05,0.1,0.15,0.11,0.11,0.06,0.07,0.08,0.09,0.12,0.09,0.11,0,0.86,0.32,2075,416.67,2062.5,6.78,4.78,3.94,9.51,7.41,9.51,10.42},5},
{{0.05,0.06,0.11,0.12,0.12,0.11,0.1,0.08,0.12,0.12,0.19,0.1,0.11,0.08,0.14,0.1,0.1,0.06,0.09,0.06,0.1,0.15,0.09,0.14,0.06,0.1,0.08,0.09,0.08,0.11,0,-1.34,0.07,450,875,3750,6.06,5.1,3.54,8.81,7.05,8.81,9.54},5},
{{0,0,0,0.11,0.09,0.08,0.11,0.16,0.22,0.2,0.01,0.07,0.14,0.11,0.08,0.04,0.06,0.11,0.22,0.16,0.06,0.07,0.1,0.12,0.12,0.13,0.09,0.11,0.11,0.09,0,3.68,0.56,397.92,1760,4275,7.65,5.02,2.78,10.27,6.11,10.27,10.44},5},
{{0.1,0.15,0.1,0.05,0.08,0.07,0.03,0.05,0.02,0.01,0.07,0.09,0.08,0.07,0.04,0.07,0.09,0.06,0.03,0.05,0.05,0.04,0.06,0.06,0.09,0.07,0.1,0.05,0.08,0.06,0,0.39,0.3,150,420,925,4.2,3.05,1.66,8.97,6.93,8.97,5.97},5},
{{0.12,0.18,0.14,0.08,0.09,0.08,0.09,0.04,0.08,0.11,0.09,0.14,0.12,0.1,0.13,0.1,0.08,0.11,0.07,0.09,0.07,0.12,0.07,0.1,0.12,0.11,0.1,0.12,0.13,0.08,0,8.15,1.59,125,466.67,2150,3.53,4.11,3.34,4.67,5.01,4.67,10.5},1},
{{0.15,0.08,0.12,0.14,0.08,0.11,0.05,0.1,0.09,0.11,0.07,0.06,0.1,0.07,0.13,0.1,0.13,0.13,0.14,0.08,0.06,0.1,0.13,0.11,0.1,0.13,0.12,0.13,0.08,0.06,0,9.47,1.13,475,696.15,3775,3.16,4.06,2.93,4.31,4.93,4.31,11.13},1},
{{0.08,0.12,0.11,0.1,0.12,0.13,0.11,0.1,0.11,0.04,0.05,0.1,0.11,0.11,0.12,0.12,0.11,0.09,0.11,0.09,0.13,0.09,0.13,0.11,0.11,0.12,0.1,0.11,0.05,0.07,0,9.24,0.86,3425,492.11,3600,2.32,4.15,3.05,3.26,5.02,3.26,10.58},1},
{{0.07,0.08,0.09,0.12,0.15,0.13,0.13,0.1,0.07,0.07,0.04,0.06,0.09,0.15,0.11,0.12,0.12,0.09,0.13,0.1,0.09,0.12,0.12,0.13,0.12,0.1,0.11,0.08,0.12,0.03,0,9.54,0.82,3425,745.83,2150,2.16,4.02,2.96,3.08,4.82,3.08,10.63},1},
{{0.1,0.07,0.05,0.07,0.06,0.08,0.1,0.15,0.15,0.2,0.17,0.11,0.12,0.08,0.06,0.09,0.09,0.1,0.08,0.13,0.18,0.08,0.09,0.06,0.09,0.08,0.09,0.07,0.13,0.15,0,8.18,1.59,2625,470.59,1275,2.79,4.98,4.42,3.85,5.96,3.85,10.91},1},
{{0,0.01,0,0.03,0.02,0.01,0.02,0.07,0.02,0.01,0.1,0.07,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.03,0.14,0,0.36,1.55,366.67,375,287.5,0.23,0.31,1.29,1.77,2.15,1.77,1.64},1},
{{0.15,0.12,0.13,0.06,0.07,0.11,0.1,0.09,0.1,0.07,0.06,0.08,0.08,0.16,0.09,0.06,0.14,0.11,0.09,0.13,0.11,0.12,0.09,0.07,0.07,0.07,0.1,0.1,0.16,0.13,0,2.26,0.87,300,590,2062.5,7.86,5.19,4.22,10.29,6.92,10.29,11.36},5},
{{0.17,0.12,0.13,0.13,0.14,0.1,0.11,0.07,0.05,0.01,0.24,0.14,0.07,0.07,0.09,0.17,0.12,0.07,0.03,0.01,0.13,0.07,0.13,0.1,0.09,0.12,0.1,0.11,0.09,0.08,0,-3.27,-0.02,1075,1650,2700,6.32,5.71,3.54,9.01,7.14,9.01,10.14},5},
{{0,0,0.02,0.13,0.11,0.1,0.11,0.15,0.18,0.19,0.07,0.11,0.15,0.08,0.11,0.09,0.06,0.11,0.13,0.1,0.08,0.09,0.11,0.13,0.14,0.13,0.09,0.08,0.07,0.11,0,1.53,0.39,450,1108.33,1335.71,6.72,5.47,3.29,9.42,7.34,9.42,10.15},5},
{{0.06,0.14,0.11,0.04,0.1,0.08,0.07,0.08,0.07,0.08,0.01,0.06,0.08,0.08,0.09,0.07,0.08,0.09,0.14,0.14,0.07,0.11,0.06,0.1,0.1,0.07,0.1,0.1,0.07,0.06,0,3.69,0.32,725,1087.5,1100,5.94,4.58,2.62,9.55,7,9.55,8.87},5},
{{0.02,0.04,0.09,0.08,0.1,0.09,0.15,0.13,0.17,0.15,0.04,0.09,0.11,0.1,0.11,0.13,0.11,0.09,0.1,0.13,0.08,0.12,0.1,0.11,0.09,0.11,0.11,0.09,0.08,0.13,0,9.46,1.09,4250,540.63,2533.33,2.62,3.99,2.9,3.53,4.81,3.53,10.74},1},
{{0.05,0.08,0.06,0.08,0.09,0.17,0.11,0.14,0.1,0.13,0.06,0.08,0.13,0.08,0.13,0.13,0.08,0.11,0.08,0.14,0.07,0.08,0.13,0.1,0.12,0.1,0.12,0.11,0.11,0.08,0,9.29,1.08,2600,650,833.33,3.28,3.96,2.68,4.49,4.84,4.49,10.75},1},
{{0.1,0.11,0.08,0.14,0.12,0.07,0.11,0.06,0.15,0.08,0.09,0.1,0.08,0.12,0.08,0.08,0.11,0.16,0.11,0.07,0.1,0.13,0.11,0.1,0.08,0.07,0.11,0.14,0.08,0.08,0,9.01,1.02,2025,546.67,1575,4.25,4.08,3.27,5.73,4.9,5.73,11.16},1},
{{0.19,0.15,0.15,0.13,0.1,0.08,0.09,0.05,0.04,0.05,0.17,0.12,0.09,0.1,0.09,0.08,0.11,0.08,0.11,0.08,0.12,0.08,0.08,0.1,0.14,0.11,0.07,0.09,0.11,0.11,0,8.04,1.16,3300,805,2225,5.95,4.18,3.31,7.39,5.07,7.39,11.24},1},
{{0.09,0.06,0.05,0.03,0.02,0.02,0.01,0.02,0.03,0.03,0.08,0.03,0.04,0.04,0.02,0.04,0.03,0.01,0.03,0.02,0.06,0.02,0.01,0.03,0.03,0.04,0.02,0.03,0.07,0.05,0,2.33,0.49,1050,500,1150,2.32,1.78,1.23,8.55,6.83,8.55,3.88},1},
{{0.09,0.11,0.08,0.08,0.1,0.08,0.13,0.1,0.13,0.13,0.08,0.05,0.04,0.1,0.11,0.11,0.14,0.12,0.12,0.14,0.18,0.14,0.08,0.09,0.08,0.06,0.06,0.07,0.08,0.17,0,-0.96,0.69,2225,2062.5,2800,6.53,4.19,3.42,9.27,5.94,9.27,9.29},5},
{{0.1,0.07,0.09,0.1,0.12,0.11,0.1,0.1,0.12,0.12,0.12,0.12,0.08,0.09,0.09,0.14,0.09,0.1,0.09,0.11,0.07,0.1,0.1,0.12,0.11,0.11,0.15,0.07,0.12,0.08,0,-2.88,0.78,550,2316.67,1075,6.53,5.21,2.22,9.15,6.45,9.15,9.24},5},
{{0.12,0.12,0.12,0.11,0.07,0.11,0.09,0.1,0.08,0.09,0.12,0.13,0.11,0.13,0.09,0.06,0.1,0.09,0.11,0.1,0.08,0.09,0.12,0.1,0.07,0.14,0.09,0.15,0.11,0.07,0,-3.34,0.95,2125,4125,1200,7.88,5.28,2.26,10.38,6.49,10.38,10.48},5},
{{0.06,0.06,0.1,0.09,0.09,0.07,0.06,0.06,0.06,0.04,0.06,0.06,0.14,0.07,0.08,0.06,0.04,0.07,0.06,0.04,0.03,0.04,0.05,0.09,0.11,0.06,0.09,0.09,0.05,0.06,0,-2.18,0.79,2300,1500,1137.5,4.82,2.87,1.28,9.64,5.59,9.64,6.36},5},
{{0.19,0.07,0.04,0.08,0.08,0.03,0.07,0.08,0.11,0.25,0.19,0.13,0.05,0.13,0.08,0.09,0.07,0.13,0.09,0.06,0.08,0.08,0.07,0.11,0.11,0.12,0.14,0.11,0.09,0.11,0,6.96,1.25,325,800,3925,5.03,4.75,2.86,6.61,6,6.61,10.94},1},
{{0.05,0.14,0.12,0.12,0.15,0.1,0.12,0.09,0.06,0.07,0.07,0.07,0.11,0.09,0.13,0.11,0.11,0.12,0.09,0.12,0.13,0.1,0.09,0.13,0.09,0.1,0.06,0.11,0.11,0.09,0,9.23,1.22,3275,626.67,1550,2.77,4.17,3.41,3.79,5.11,3.79,10.82},1},
{{0.08,0.11,0.13,0.1,0.09,0.13,0.11,0.13,0.12,0.02,0.06,0.11,0.13,0.1,0.1,0.1,0.1,0.09,0.11,0.11,0.07,0.09,0.1,0.13,0.1,0.13,0.09,0.11,0.12,0.09,0,9.02,1.12,3800,552.94,1700,2.54,4.3,2.9,3.53,5.18,3.53,10.33},1},
{{0.06,0.07,0.1,0.09,0.09,0.14,0.08,0.1,0.1,0.06,0.06,0.1,0.11,0.08,0.08,0.09,0.1,0.07,0.12,0.1,0.11,0.12,0.13,0.05,0.1,0.05,0.09,0.06,0.08,0.11,0,8.25,0.92,1725,679.17,3525,2.31,3.87,3.49,3.57,5.32,3.57,9.84},1},
{{0.21,0.23,0.2,0,0.12,0.07,0,0.06,0.02,0.11,0.1,0.11,0,0,0.21,0,0,0.19,0.14,0.26,0.07,0.03,0,0.02,0.04,0,0.04,0.11,0.17,0.52,0,9.32,1.23,510.71,203.19,275,3.12,0.09,0.1,3.13,0.21,3.13,9.91},3},
{{0.07,0.22,0.28,0,0.22,0.12,0,0.04,0.04,0.03,0.05,0.09,0,0,0.24,0,0,0.33,0.15,0.15,0.01,0.02,0,0.01,0.06,0,0.13,0.22,0.31,0.26,0,9.3,1.21,540.91,223.26,1037.5,3.15,0.04,0.05,3.16,0.07,3.16,9.9},3},
{{0.18,0.23,0.15,0,0.15,0.09,0,0.09,0.03,0.11,0.11,0.11,0,0,0.18,0,0,0.23,0.16,0.22,0.02,0.02,0,0.07,0.05,0,0.22,0.23,0.16,0.25,0,9.31,1.19,226.74,202.17,491.67,3.15,0.06,0.06,3.16,0.09,3.16,9.9},3},
{{0.07,0.09,0.14,0,0.18,0.21,0,0.17,0.06,0.11,0.1,0.08,0,0,0.2,0,0,0.34,0.13,0.16,0.03,0.02,0,0.08,0.21,0,0.29,0.23,0.1,0.06,0,9.3,1.15,387.5,315.52,351.79,3.2,0.05,0.04,3.21,0.08,3.21,9.9},3},
{{0.08,0.15,0.1,0,0.15,0.09,0,0.16,0.07,0.22,0.11,0.1,0,0,0.19,0,0,0.24,0.19,0.18,0.2,0.08,0,0.05,0.14,0,0.15,0.17,0.1,0.13,0,9.3,1.12,1068.75,198.94,1900,3.22,0.06,0.1,3.23,0.09,3.23,9.91},3},
{{0.06,0.05,0.06,0,0.1,0.14,0,0.13,0.15,0.31,0.11,0.12,0,0,0.27,0,0,0.26,0.12,0.12,0.15,0.1,0,0.14,0.21,0,0.15,0.14,0.06,0.06,0,9.29,1.11,2825,201.04,1770,3.27,0.06,0.07,3.28,0.12,3.28,9.92},3},
{{0.02,0.01,0.01,0,0.04,0.15,0,0.3,0.25,0.23,0.04,0.11,0,0,0.33,0,0,0.35,0.12,0.07,0.04,0.14,0,0.34,0.27,0,0.15,0.04,0.01,0.02,0,9.29,1.1,1250,203.19,925,3.27,0.03,0.04,3.28,0.07,3.28,9.92},3},
{{0.02,0.02,0.02,0,0.07,0.09,0,0.23,0.2,0.37,0.07,0.07,0,0,0.33,0,0,0.31,0.15,0.08,0.15,0.24,0,0.29,0.18,0,0.12,0.03,0.01,0.01,0,9.3,1.07,381.25,230,1162.5,3.29,0.04,0.04,3.29,0.06,3.29,9.92},3},
{{0.08,0.07,0.14,0,0.19,0.2,0,0.17,0.06,0.11,0.05,0.15,0,0,0.28,0,0,0.3,0.15,0.09,0.07,0.09,0,0.22,0.23,0,0.24,0.09,0.03,0.04,0,9.29,1.11,426.92,247.37,825,3.2,0.04,0.05,3.21,0.07,3.21,9.89},3},
{{0.02,0.07,0.1,0,0.22,0.29,0,0.19,0.09,0.05,0.05,0.08,0,0,0.36,0,0,0.31,0.13,0.08,0.04,0.12,0,0.22,0.35,0,0.18,0.07,0.02,0.02,0,9.29,1.11,445.24,228.57,543.75,3.21,0.03,0.04,3.21,0.06,3.21,9.89},3},
{{0,0.01,0.02,0,0.09,0.17,0,0.14,0.05,0.02,0.01,0.04,0,0,0.14,0,0,0.21,0.07,0.02,0.02,0.05,0,0.12,0.16,0,0.09,0.04,0,0.01,0,4.37,0.52,247.22,207.14,307.14,1.52,2.32,0.28,3.23,4.93,3.23,4.65},3},
{{0.11,0.04,0.04,0.03,0.1,0.09,0.12,0.09,0.19,0.21,0.16,0.08,0.09,0.16,0.06,0.11,0.07,0.06,0.07,0.17,0.28,0.16,0.12,0.09,0.1,0.06,0.06,0.02,0.04,0.09,0,9.9,-1.45,1066.67,147.73,525,0.94,0.21,0.36,1.18,0.33,1.18,10.09},4},
{{0.1,0.06,0.07,0.06,0.1,0.05,0.12,0.09,0.15,0.22,0.17,0.06,0.07,0.13,0.12,0.09,0.05,0.06,0.11,0.16,0.15,0.15,0.14,0.08,0.11,0.13,0.04,0.04,0.09,0.09,0,9.91,-1.35,1900,143.38,1750,0.88,0.2,0.31,1.05,0.27,1.05,10.06},4},
{{0.06,0.06,0.05,0.06,0.07,0.1,0.11,0.18,0.18,0.15,0.11,0.15,0.05,0.16,0.07,0.07,0.05,0.1,0.11,0.16,0.1,0.13,0.14,0.1,0.11,0.09,0.06,0.06,0.14,0.1,0,9.91,-1.3,3200,128.95,1750,0.8,0.17,0.28,0.89,0.21,0.89,10.04},4},
{{0.04,0.06,0.05,0.06,0.13,0.09,0.18,0.16,0.17,0.09,0.11,0.09,0.07,0.18,0.09,0.09,0.06,0.09,0.13,0.12,0.03,0.1,0.1,0.12,0.15,0.11,0.12,0.12,0.08,0.09,0,9.91,-1.26,800,124.68,1750,0.76,0.15,0.22,0.85,0.19,0.85,10.03},4},
{{0.14,0.21,0.17,0.1,0.16,0.07,0.1,0.06,0.01,0.01,0.02,0.04,0.06,0.17,0.16,0.17,0.17,0.09,0.1,0.04,0.02,0.03,0.07,0.1,0.13,0.17,0.13,0.15,0.12,0.1,0,9.93,-1.18,1483.33,180.77,1750,0.42,0.09,0.2,0.5,0.13,0.5,10.01},4},
{{0.13,0.16,0.17,0.11,0.14,0.09,0.05,0.05,0.1,0.03,0.02,0.06,0.04,0.16,0.15,0.15,0.14,0.1,0.13,0.08,0.02,0.04,0.06,0.06,0.14,0.09,0.13,0.16,0.22,0.11,0,9.94,-1.15,916.67,162.5,1750,0.51,0.1,0.22,0.62,0.14,0.62,10.03},4},
{{0.11,0.13,0.18,0.09,0.15,0.1,0.06,0.07,0.09,0.03,0.1,0.06,0.06,0.14,0.08,0.08,0.16,0.07,0.1,0.16,0.03,0.05,0.07,0.07,0.1,0.11,0.08,0.16,0.22,0.13,0,9.93,-1.15,1333.33,144.12,1750,0.53,0.15,0.24,0.63,0.19,0.63,10.02},4},
{{0.03,0.05,0.03,0.03,0.1,0.01,0.05,0.03,0.05,0.04,0.02,0.07,0.06,0.05,0.02,0.03,0.03,0.05,0.05,0.05,0.03,0.04,0.05,0.08,0.04,0.03,0.02,0.02,0.04,0.09,0,4.01,-0.5,675,123.33,1750,0.26,2.39,0.3,0.74,5.9,0.74,4.06},4},
{{0.13,0.12,0.11,0.12,0.12,0.07,0.1,0.09,0.1,0.06,0.1,0.1,0.11,0.08,0.13,0.11,0.07,0.13,0.09,0.1,0.11,0.12,0.16,0.15,0.11,0.11,0.04,0.07,0.06,0.1,0,9.8,0.09,2350,1028.57,2033.33,2.1,2.85,2.07,2.55,3.43,2.55,10.51},2},
{{0.11,0.1,0.15,0.09,0.09,0.1,0.1,0.12,0.1,0.06,0.14,0.07,0.12,0.1,0.06,0.09,0.09,0.13,0.09,0.14,0.12,0.12,0.14,0.08,0.11,0.11,0.09,0.09,0.07,0.1,0,9.97,0.27,2033.33,977.78,2050,1.99,3.28,2.25,2.43,3.89,2.43,10.74},2},
{{0.15,0.07,0.13,0.09,0.07,0.1,0.14,0.11,0.09,0.09,0.13,0.11,0.1,0.1,0.05,0.1,0.1,0.09,0.12,0.13,0.14,0.16,0.11,0.09,0.1,0.11,0.06,0.09,0.06,0.11,0,9.93,0.16,2900,2383.33,2383.33,2.01,3.32,2.34,2.48,3.9,2.48,10.74},2},
{{0.13,0.09,0.1,0.11,0.11,0.08,0.11,0.14,0.11,0.06,0.12,0.09,0.11,0.13,0.06,0.08,0.11,0.1,0.11,0.12,0.12,0.15,0.11,0.1,0.08,0.1,0.09,0.1,0.06,0.12,0,9.86,0.34,1225,2575,1358.33,1.94,3.26,2.35,2.4,3.85,2.4,10.63},2},
{{0.12,0.11,0.12,0.09,0.1,0.1,0.1,0.06,0.1,0.12,0.1,0.13,0.1,0.09,0.1,0.09,0.08,0.12,0.09,0.12,0.12,0.14,0.08,0.1,0.11,0.08,0.08,0.1,0.11,0.11,0,9.93,0.35,2350,1583.33,1500,2.11,3.21,2.45,2.54,3.84,2.54,10.82},2},
{{0.11,0.11,0.1,0.11,0.11,0.1,0.09,0.1,0.12,0.09,0.11,0.12,0.08,0.11,0.08,0.11,0.07,0.11,0.11,0.1,0.13,0.13,0.1,0.11,0.1,0.09,0.09,0.08,0.1,0.08,0,9.98,0.19,3050,1110,1550,2.01,3.19,2.25,2.41,3.83,2.41,10.74},2},
{{0.13,0.1,0.11,0.1,0.1,0.09,0.06,0.14,0.12,0.08,0.11,0.11,0.1,0.1,0.1,0.06,0.1,0.09,0.12,0.13,0.11,0.14,0.15,0.08,0.11,0.09,0.07,0.1,0.06,0.11,0,9.88,0.34,3100,1342.86,2087.5,2.03,3.21,2.24,2.45,3.79,2.45,10.62},2},
{{0.13,0.1,0.1,0.09,0.1,0.1,0.09,0.11,0.09,0.1,0.12,0.07,0.09,0.13,0.09,0.09,0.12,0.08,0.1,0.13,0.1,0.13,0.12,0.09,0.09,0.1,0.08,0.13,0.05,0.13,0,9.95,0.48,4250,1766.67,4250,2.11,3.09,2.36,2.59,3.71,2.59,10.79},2},
{{0.11,0.12,0.12,0.09,0.11,0.09,0.13,0.06,0.09,0.1,0.09,0.1,0.13,0.11,0.09,0.07,0.15,0.1,0.08,0.11,0.1,0.1,0.06,0.13,0.17,0.12,0.06,0.08,0.1,0.11,0,9.92,0.43,975,1600,3200,2.13,2.93,2.19,2.54,3.5,2.54,10.7},2},
{{0.05,0.12,0.14,0.15,0.11,0.09,0.08,0.1,0.12,0.07,0.07,0.12,0.1,0.13,0.1,0.11,0.13,0.1,0.07,0.1,0.08,0.1,0.08,0.15,0.13,0.08,0.11,0.1,0.08,0.11,0,9.86,0.49,2933.33,1100,1083.33,1.91,2.7,2.11,2.27,3.24,2.27,10.56},2},
{{0.08,0.12,0.14,0.14,0.1,0.1,0.07,0.09,0.1,0.09,0.11,0.07,0.15,0.06,0.14,0.07,0.11,0.11,0.1,0.11,0.1,0.07,0.1,0.08,0.16,0.12,0.12,0.09,0.07,0.12,0,9.86,0.65,1433.33,1783.33,2150,2.07,2.96,2.21,2.52,3.53,2.52,10.62},2},
{{0.11,0.12,0.08,0.13,0.08,0.1,0.08,0.11,0.11,0.11,0.12,0.09,0.12,0.09,0.11,0.08,0.08,0.12,0.09,0.11,0.1,0.14,0.1,0.09,0.1,0.08,0.13,0.09,0.1,0.11,0,9.77,0.49,1625,2150,2516.67,2.06,3.1,2.28,2.52,3.67,2.52,10.57},2},
{{0.1,0.11,0.13,0.11,0.09,0.09,0.1,0.06,0.09,0.14,0.1,0.12,0.08,0.09,0.09,0.09,0.11,0.12,0.13,0.09,0.1,0.08,0.1,0.12,0.13,0.12,0.06,0.11,0.09,0.11,0,9.98,0.56,2150,1600,2166.67,2.17,2.98,2.4,2.58,3.48,2.58,10.85},2},
{{0.12,0.1,0.07,0.11,0.09,0.12,0.07,0.1,0.14,0.11,0.12,0.11,0.11,0.08,0.08,0.1,0.13,0.08,0.1,0.13,0.1,0.11,0.1,0.09,0.08,0.11,0.1,0.13,0.09,0.12,0,9.83,0.6,1308.33,1241.67,2650,2.05,3.21,2.36,2.49,3.79,2.49,10.64},2},
{{0.15,0.05,0.04,0.14,0.07,0.11,0.13,0.11,0.1,0.11,0.12,0.1,0.11,0.09,0.08,0.08,0.07,0.17,0.09,0.1,0.11,0.11,0.14,0.05,0.12,0.11,0.08,0.11,0.09,0.1,0,9.82,0.33,1925,2466.67,3150,1.94,3.14,2.17,2.42,3.68,2.42,10.56},2},
{{0.09,0.09,0.08,0.11,0.1,0.11,0.13,0.1,0.09,0.13,0.12,0.1,0.11,0.07,0.1,0.1,0.09,0.11,0.11,0.12,0.1,0.09,0.14,0.09,0.08,0.11,0.1,0.12,0.08,0.12,0,9.98,0.55,1775,1470,2625,1.95,3.18,2.32,2.4,3.83,2.4,10.79},2},
{{0.12,0.07,0.08,0.11,0.08,0.13,0.11,0.08,0.11,0.13,0.09,0.11,0.14,0.06,0.1,0.1,0.1,0.11,0.09,0.12,0.11,0.09,0.11,0.1,0.09,0.11,0.1,0.1,0.11,0.12,0,9.9,0.61,4025,1912.5,1362.5,2.06,3.02,2.38,2.51,3.6,2.51,10.72},2},
{{0.11,0.09,0.08,0.1,0.11,0.13,0.07,0.09,0.11,0.13,0.1,0.11,0.09,0.09,0.1,0.09,0.12,0.1,0.09,0.13,0.1,0.1,0.09,0.1,0.1,0.12,0.11,0.1,0.11,0.1,0,9.9,0.5,2550,779.17,1750,2.1,3.02,2.23,2.57,3.56,2.57,10.72},2},
{{0.1,0.1,0.09,0.1,0.07,0.11,0.11,0.14,0.07,0.12,0.1,0.1,0.09,0.13,0.09,0.1,0.12,0.09,0.1,0.11,0.1,0.1,0.12,0.08,0.11,0.08,0.11,0.14,0.08,0.11,0,9.95,0.52,2325,1783.33,2125,2,2.92,2.26,2.46,3.55,2.46,10.74},2},
{{0.08,0.1,0.11,0.12,0.09,0.09,0.1,0.12,0.14,0.08,0.1,0.12,0.09,0.09,0.1,0.09,0.13,0.12,0.08,0.1,0.1,0.08,0.09,0.11,0.12,0.12,0.1,0.1,0.1,0.09,0,9.84,0.66,2533.33,1087.5,3800,1.95,2.99,2.36,2.38,3.59,2.38,10.67},2},
{{0.06,0.15,0.1,0.09,0.09,0.12,0.08,0.12,0.11,0.11,0.08,0.11,0.09,0.11,0.12,0.14,0.11,0.07,0.11,0.09,0.09,0.09,0.07,0.1,0.06,0.17,0.12,0.11,0.12,0.1,0,9.89,0.64,2825,1840,1712.5,2,2.71,2.17,2.46,3.28,2.46,10.66},2},
{{0.08,0.13,0.07,0.09,0.13,0.12,0.13,0.09,0.07,0.11,0.07,0.12,0.08,0.09,0.14,0.13,0.1,0.11,0.11,0.08,0.08,0.08,0.11,0.09,0.1,0.09,0.12,0.14,0.15,0.06,0,9.87,0.64,1933.33,481.58,1975,1.97,2.65,2.05,2.4,3.21,2.4,10.56},2},
{{0.1,0.08,0.13,0.07,0.09,0.11,0.11,0.09,0.12,0.12,0.09,0.09,0.1,0.12,0.1,0.09,0.11,0.12,0.11,0.1,0.1,0.09,0.08,0.08,0.11,0.12,0.12,0.13,0.12,0.08,0,9.91,0.63,3300,625,1650,2.02,2.86,2.13,2.45,3.36,2.45,10.65},2},
{{0.09,0.13,0.08,0.1,0.09,0.11,0.11,0.12,0.1,0.1,0.1,0.1,0.1,0.12,0.1,0.11,0.11,0.08,0.1,0.1,0.08,0.11,0.07,0.08,0.09,0.13,0.1,0.12,0.15,0.1,0,9.82,0.76,1725,3950,1975,1.96,2.82,2.23,2.4,3.41,2.4,10.59},2},
{{0.09,0.12,0.1,0.08,0.08,0.09,0.13,0.13,0.11,0.1,0.09,0.12,0.11,0.09,0.1,0.13,0.09,0.09,0.09,0.1,0.06,0.1,0.08,0.11,0.09,0.13,0.08,0.14,0.14,0.08,0,9.81,0.66,1750,1516.67,2250,1.95,2.85,2.12,2.45,3.38,2.45,10.53},2},
{{0.09,0.12,0.12,0.09,0.08,0.09,0.15,0.13,0.03,0.11,0.13,0.09,0.07,0.1,0.1,0.1,0.14,0.09,0.11,0.1,0.1,0.07,0.08,0.09,0.1,0.08,0.09,0.17,0.17,0.06,0,9.84,0.78,3350,2250,1516.67,2.12,3.01,2.26,2.7,3.59,2.7,10.74},2},
{{0.09,0.09,0.12,0.08,0.09,0.1,0.13,0.08,0.12,0.12,0.11,0.1,0.1,0.11,0.07,0.1,0.11,0.09,0.11,0.11,0.09,0.08,0.08,0.08,0.13,0.14,0.12,0.08,0.13,0.1,0,9.84,0.69,2437.5,770.83,2900,2,2.99,2.17,2.52,3.5,2.52,10.6},2},
{{0.1,0.1,0.08,0.12,0.12,0.1,0.11,0.07,0.1,0.12,0.08,0.09,0.1,0.12,0.15,0.1,0.09,0.09,0.11,0.09,0.09,0.06,0.11,0.1,0.12,0.1,0.11,0.12,0.1,0.11,0,9.87,0.66,2225,977.78,3825,2.09,2.76,2.17,2.57,3.34,2.57,10.66},2},
{{0.1,0.07,0.09,0.08,0.13,0.17,0.08,0.12,0.07,0.12,0.1,0.07,0.1,0.13,0.11,0.1,0.1,0.11,0.15,0.06,0.1,0.08,0.12,0.06,0.14,0.09,0.11,0.11,0.11,0.11,0,9.86,0.6,1512.5,1112.5,2966.67,1.88,2.74,2.24,2.31,3.26,2.31,10.61},2},
{{0.06,0.11,0.09,0.07,0.1,0.15,0.15,0.11,0.08,0.1,0.04,0.1,0.09,0.15,0.14,0.15,0.09,0.12,0.09,0.06,0.07,0.1,0.07,0.06,0.13,0.12,0.14,0.1,0.15,0.08,0,9.88,0.69,1725,2050,1150,1.76,2.36,2,2.18,2.86,2.18,10.52},2},
{{0.04,0.06,0.06,0.07,0.05,0.05,0.08,0.09,0.07,0.08,0.02,0.07,0.08,0.09,0.12,0.1,0.05,0.04,0.06,0.01,0.08,0.04,0.06,0.03,0.04,0.04,0.1,0.07,0.11,0.08,0,5.98,0.63,1225,413.64,1125,1.18,2.3,1.59,2.32,4.31,2.32,6.55},2},
{{0.1,0.07,0.09,0.07,0.11,0.1,0.08,0.1,0.18,0.13,0.13,0.12,0.09,0.1,0.07,0.05,0.09,0.09,0.12,0.1,0.2,0.15,0.11,0.05,0.07,0.05,0.03,0.13,0.14,0.1,0,8.58,0.36,1025,555.88,908.33,4.74,7.19,4.9,5.94,8.59,5.94,13.48},0},
{{0.08,0.07,0.08,0.07,0.1,0.1,0.09,0.17,0.13,0.14,0.14,0.09,0.1,0.07,0.09,0.09,0.09,0.12,0.06,0.12,0.15,0.18,0.09,0.1,0.05,0.04,0.06,0.07,0.13,0.15,0,8.47,0.71,2650,471.05,1900,4.18,6.63,4.71,5.29,7.99,5.29,12.75},0},
{{0.07,0.05,0.09,0.05,0.11,0.12,0.11,0.13,0.12,0.17,0.12,0.12,0.08,0.1,0.11,0.04,0.1,0.11,0.12,0.08,0.15,0.1,0.12,0.13,0.07,0.09,0.05,0.12,0.1,0.11,0,8.5,0.73,2250,596.88,1700,4.26,6.42,4.18,5.36,7.74,5.36,12.48},0},
{{0.1,0.07,0.04,0.09,0.12,0.06,0.12,0.13,0.17,0.14,0.12,0.08,0.12,0.06,0.08,0.07,0.13,0.1,0.11,0.12,0.14,0.14,0.1,0.09,0.08,0.06,0.06,0.11,0.12,0.12,0,8.94,1.03,2200,538.24,1887.5,4.42,6.58,4.46,5.57,7.88,5.57,13.09},0},
{{0.07,0.07,0.07,0.09,0.09,0.15,0.1,0.1,0.16,0.13,0.12,0.09,0.08,0.09,0.07,0.12,0.07,0.13,0.13,0.1,0.16,0.12,0.11,0.11,0.08,0.06,0.09,0.09,0.1,0.11,0,8.78,0.73,3750,584.38,1966.67,4.21,6.53,4.33,5.28,7.9,5.28,12.83},0},
{{0.06,0.12,0.07,0.1,0.1,0.09,0.09,0.12,0.08,0.21,0.14,0.1,0.1,0.08,0.06,0.08,0.1,0.11,0.09,0.14,0.12,0.13,0.12,0.12,0.07,0.04,0.09,0.06,0.15,0.11,0,8.45,0.99,2316.67,492.5,1875,4.7,6.79,4.37,5.65,8.11,5.65,12.83},0},
{{0.08,0.08,0.08,0.08,0.12,0.1,0.09,0.09,0.11,0.17,0.13,0.09,0.11,0.07,0.07,0.12,0.1,0.12,0.08,0.12,0.12,0.12,0.14,0.09,0.07,0.04,0.09,0.1,0.13,0.12,0,8.58,1.2,1616.67,457.14,2300,4.85,6.37,4.32,5.9,7.69,5.9,12.74},0},
{{0.1,0.06,0.07,0.09,0.09,0.1,0.13,0.08,0.13,0.18,0.15,0.1,0.07,0.05,0.11,0.09,0.07,0.12,0.15,0.09,0.13,0.11,0.16,0.09,0.1,0.05,0.07,0.09,0.1,0.14,0,8.57,0.95,1550,570.59,1433.33,4.67,6.66,4.34,5.79,8.04,5.79,12.97},0},
{{0.1,0.08,0.1,0.08,0.1,0.1,0.1,0.06,0.1,0.2,0.15,0.09,0.1,0.08,0.06,0.09,0.12,0.09,0.11,0.1,0.14,0.12,0.16,0.05,0.07,0.06,0.08,0.08,0.11,0.16,0,8.23,1.05,3175,476.32,1775,5.08,6.83,4.62,6.09,8.15,6.09,13.08},0},
{{0.07,0.13,0.09,0.08,0.09,0.16,0.06,0.07,0.1,0.18,0.12,0.14,0.1,0.06,0.09,0.08,0.11,0.08,0.13,0.12,0.13,0.08,0.1,0.1,0.12,0.06,0.11,0.13,0.09,0.11,0,8.19,1.25,3775,455,1500,5.09,6.77,3.89,6.02,8.06,6.02,12.59},0},
{{0.11,0.12,0.11,0.08,0.12,0.04,0.11,0.09,0.15,0.1,0.12,0.14,0.09,0.07,0.09,0.09,0.12,0.06,0.14,0.07,0.14,0.11,0.08,0.09,0.08,0.11,0.12,0.08,0.12,0.09,0,7.93,1.02,1666.67,603.33,3350,4.95,6.66,3.93,5.99,7.93,5.99,12.38},0},
{{0.11,0.14,0.1,0.08,0.12,0.09,0.11,0.12,0.08,0.08,0.1,0.13,0.08,0.11,0.08,0.14,0.09,0.1,0.08,0.09,0.1,0.1,0.1,0.08,0.1,0.1,0.11,0.15,0.12,0.08,0,8.22,1.28,4200,603.33,937.5,4.74,5.94,3.62,5.79,7.3,5.79,12.09},0},
{{0.12,0.11,0.15,0.08,0.08,0.11,0.06,0.1,0.11,0.12,0.1,0.15,0.12,0.06,0.08,0.09,0.11,0.11,0.11,0.09,0.07,0.1,0.12,0.1,0.11,0.1,0.1,0.13,0.11,0.08,0,8.21,1.39,2725,669.23,2175,5.02,6.35,3.48,5.97,7.65,5.97,12.26},0},
{{0.13,0.08,0.15,0.09,0.09,0.13,0.07,0.09,0.09,0.11,0.12,0.13,0.06,0.07,0.11,0.1,0.15,0.08,0.11,0.1,0.08,0.09,0.09,0.13,0.12,0.08,0.1,0.12,0.12,0.09,0,8.38,1.45,4075,500,1950,4.98,6.09,3.66,5.92,7.44,5.92,12.35},0},
{{0.13,0.1,0.12,0.13,0.1,0.07,0.07,0.1,0.1,0.11,0.15,0.08,0.1,0.08,0.11,0.09,0.11,0.09,0.11,0.08,0.11,0.1,0.08,0.13,0.08,0.06,0.1,0.15,0.1,0.1,0,8.15,1.38,1575,590.63,1175,5.15,6.35,4.19,6.16,7.79,6.16,12.79},0},
{{0.16,0.14,0.07,0.08,0.1,0.07,0.07,0.09,0.13,0.12,0.15,0.09,0.08,0.06,0.08,0.11,0.15,0.08,0.14,0.06,0.09,0.17,0.12,0.07,0.07,0.07,0.1,0.09,0.14,0.11,0,8.13,1.24,3450,646.43,1150,5.4,6.53,4.23,6.49,7.94,6.49,12.98},0},
{{0.12,0.14,0.1,0.12,0.08,0.08,0.09,0.1,0.07,0.12,0.12,0.09,0.1,0.07,0.1,0.13,0.1,0.11,0.1,0.07,0.12,0.11,0.07,0.09,0.07,0.1,0.12,0.12,0.14,0.09,0,8.37,1.33,3400,646.43,1750,5.22,6.07,3.87,6.25,7.56,6.25,12.7},0},
{{0.14,0.11,0.1,0.1,0.08,0.08,0.07,0.08,0.14,0.11,0.1,0.15,0.11,0.09,0.1,0.08,0.09,0.1,0.13,0.06,0.08,0.12,0.07,0.13,0.06,0.11,0.12,0.15,0.1,0.08,0,7.87,1.27,1100,692.31,1500,5.26,6.3,3.6,6.28,7.6,6.28,12.2},0},
{{0.11,0.11,0.09,0.11,0.12,0.08,0.06,0.11,0.12,0.11,0.11,0.12,0.11,0.1,0.13,0.1,0.07,0.06,0.14,0.07,0.07,0.11,0.09,0.09,0.11,0.1,0.14,0.14,0.1,0.07,0,7.98,1.29,675,667.86,4325,4.82,5.94,3.29,5.8,7.27,5.8,11.69},0},
{{0.04,0.13,0.1,0.11,0.13,0.13,0.1,0.12,0.1,0.06,0.03,0.13,0.12,0.13,0.11,0.13,0.12,0.09,0.12,0.04,0.06,0.08,0.09,0.15,0.12,0.14,0.13,0.12,0.07,0.06,0,8.73,1.03,1300,977.78,2325,4.08,4.81,2.98,4.93,5.88,4.93,11.07},0},
{{0.03,0.06,0.12,0.15,0.12,0.14,0.18,0.13,0.09,0.01,0.02,0.06,0.13,0.16,0.13,0.13,0.14,0.13,0.1,0.02,0.04,0.05,0.09,0.13,0.24,0.13,0.13,0.07,0.03,0.11,0,9.27,1.26,4050,2800,3183.33,3.38,3.83,2.71,4.32,4.73,4.32,10.94},0},
{{0.12,0.14,0.11,0.08,0.09,0.07,0.1,0.11,0.1,0.1,0.13,0.13,0.06,0.07,0.08,0.1,0.13,0.12,0.1,0.09,0.1,0.14,0.12,0.1,0.09,0.07,0.05,0.1,0.17,0.09,0,8.29,1.23,1925,636.67,1125,4.97,6.59,4.14,6.1,7.98,6.1,12.87},0},
{{0.12,0.12,0.11,0.14,0.06,0.07,0.1,0.11,0.08,0.11,0.12,0.1,0.1,0.05,0.13,0.1,0.11,0.1,0.1,0.11,0.12,0.09,0.1,0.15,0.06,0.06,0.08,0.17,0.12,0.08,0,8.38,1.23,2725,613.33,1230,5.14,6.23,4.01,6.23,7.63,6.23,12.68},0},
{{0.13,0.1,0.08,0.18,0.08,0.08,0.1,0.08,0.11,0.09,0.11,0.12,0.07,0.12,0.11,0.07,0.12,0.08,0.11,0.1,0.1,0.09,0.11,0.11,0.09,0.09,0.07,0.13,0.14,0.08,0,8.22,1.25,4100,532.35,1833.33,5.02,6.24,3.73,6.04,7.62,6.04,12.38},0},
{{0.11,0.15,0.09,0.09,0.13,0.09,0.08,0.06,0.13,0.11,0.14,0.09,0.13,0.08,0.08,0.07,0.11,0.08,0.1,0.11,0.12,0.05,0.13,0.12,0.05,0.09,0.13,0.14,0.11,0.09,0,8.22,1.29,1775,535.29,2200,5.03,6.62,3.74,5.94,7.94,5.94,12.38},0},
{{0.08,0.12,0.12,0.09,0.1,0.12,0.1,0.1,0.1,0.1,0.1,0.13,0.12,0.1,0.1,0.09,0.08,0.05,0.11,0.11,0.09,0.13,0.08,0.07,0.1,0.11,0.14,0.14,0.08,0.09,0,8.37,1.35,800,523.53,2166.67,4.6,6.3,3.54,5.64,7.58,5.64,11.91},0},
{{0.11,0.1,0.16,0.1,0.06,0.1,0.1,0.08,0.11,0.1,0.13,0.1,0.08,0.11,0.11,0.06,0.1,0.11,0.11,0.08,0.12,0.08,0.1,0.07,0.1,0.11,0.14,0.09,0.11,0.11,0,8.21,1.34,2816.67,567.65,3025,4.89,6.4,3.81,5.91,7.9,5.91,12.54},0},
{{0.11,0.12,0.13,0.09,0.08,0.1,0.05,0.12,0.11,0.11,0.12,0.13,0.1,0.11,0.08,0.08,0.1,0.09,0.12,0.06,0.1,0.07,0.08,0.14,0.1,0.08,0.16,0.14,0.1,0.08,0,8.27,1.37,4250,612.5,1716.67,4.86,6.32,3.47,5.81,7.64,5.81,12.16},0},
{{0.11,0.08,0.09,0.09,0.11,0.1,0.13,0.13,0.09,0.11,0.11,0.09,0.09,0.13,0.08,0.11,0.06,0.11,0.12,0.09,0.17,0.12,0.09,0.09,0.07,0.07,0.09,0.12,0.12,0.09,0,8.83,0.72,2416.67,540.63,1150,4.4,6.13,4.14,5.48,7.46,5.48,12.52},0},
{{0.09,0.09,0.11,0.09,0.09,0.09,0.1,0.09,0.13,0.14,0.13,0.11,0.12,0.08,0.04,0.12,0.07,0.07,0.13,0.11,0.17,0.1,0.12,0.09,0.07,0.06,0.1,0.08,0.09,0.14,0,8.38,0.66,1025,478.95,1262.5,4.67,6.94,4.64,5.72,8.33,5.72,13.02},0},
{{0.09,0.08,0.12,0.08,0.14,0.09,0.11,0.12,0.08,0.11,0.12,0.12,0.1,0.1,0.07,0.11,0.09,0.11,0.07,0.13,0.17,0.08,0.1,0.1,0.08,0.08,0.08,0.12,0.11,0.11,0,8.22,0.92,2425,529.41,1925,4.44,6.52,4.22,5.44,7.87,5.44,12.41},0},
{{0.1,0.09,0.13,0.14,0.11,0.08,0.06,0.1,0.09,0.11,0.09,0.14,0.08,0.08,0.12,0.09,0.08,0.1,0.14,0.1,0.11,0.07,0.12,0.12,0.09,0.06,0.12,0.11,0.13,0.08,0,8.74,1.12,4375,758.33,1183.33,4.9,6.06,3.65,5.79,7.31,5.79,12.27},0},
{{0.1,0.12,0.08,0.12,0.1,0.09,0.08,0.1,0.16,0.07,0.11,0.1,0.1,0.09,0.16,0.08,0.03,0.07,0.14,0.12,0.09,0.15,0.08,0.11,0.07,0.09,0.1,0.19,0.09,0.06,0,8.59,0.96,275,632.14,1500,4.67,6.06,3.57,5.7,7.43,5.7,12.2},0},
{{0.09,0.14,0.15,0.11,0.04,0.12,0.1,0.09,0.08,0.11,0.07,0.13,0.11,0.09,0.1,0.1,0.14,0.05,0.13,0.08,0.08,0.13,0.06,0.13,0.13,0.12,0.12,0.06,0.11,0.09,0,8.56,1.02,1875,716.67,2600,4.92,5.73,3.42,5.87,7.03,5.87,12.01},0},
{{0,0.08,0.12,0.13,0.21,0.16,0.18,0.1,0.04,0,0,0.02,0.17,0.15,0.14,0.16,0.13,0.17,0.07,0,0.03,0.05,0.14,0.09,0.26,0.19,0.1,0.03,0.04,0.09,0,9.38,1.01,1800,1168.75,1550,3.37,3.39,2.42,4.1,4.04,4.1,10.78},0},
{{0.01,0.07,0.08,0.13,0.19,0.2,0.19,0.13,0.02,0.01,0,0.01,0.15,0.19,0.15,0.12,0.16,0.14,0.1,0,0.02,0.06,0.1,0.12,0.23,0.23,0.11,0.02,0.03,0.1,0,9.4,1.15,1150,768.18,1600,3.03,3.38,2.37,3.84,4,3.84,10.68},0},
{{0.09,0.1,0.11,0.12,0.09,0.13,0.13,0.08,0.09,0.08,0.05,0.1,0.13,0.14,0.12,0.1,0.11,0.12,0.08,0.03,0.05,0.1,0.08,0.12,0.18,0.15,0.14,0.06,0.06,0.09,0,8.53,1.01,725,561.11,1916.67,4.46,5,2.87,5.54,6.34,5.54,11.46},0},
{{0.17,0.12,0.08,0.09,0.09,0.06,0.09,0.07,0.15,0.1,0.13,0.12,0.09,0.09,0.09,0.1,0.08,0.1,0.11,0.09,0.15,0.1,0.1,0.1,0.09,0.09,0.07,0.08,0.12,0.12,0,7.9,1,1333.33,568.75,3600,5.4,6.74,4.32,6.45,8.18,6.45,12.8},0},
{{0.17,0.1,0.1,0.1,0.07,0.09,0.08,0.12,0.09,0.1,0.12,0.11,0.07,0.14,0.1,0.08,0.07,0.07,0.12,0.12,0.13,0.05,0.09,0.1,0.12,0.12,0.11,0.1,0.1,0.1,0,8.42,1.24,2425,433.33,1687.5,5.11,6.4,3.77,6.19,7.84,6.19,12.72},0},
{{0.15,0.11,0.1,0.1,0.09,0.07,0.09,0.11,0.12,0.09,0.12,0.09,0.08,0.11,0.1,0.08,0.05,0.11,0.13,0.12,0.13,0.08,0.12,0.11,0.1,0.08,0.09,0.11,0.1,0.12,0,8.73,1.16,3925,609.38,950,4.97,6.45,4.02,6.1,7.81,6.1,12.95},0},
{{0.15,0.12,0.1,0.08,0.1,0.07,0.11,0.1,0.11,0.1,0.11,0.15,0.11,0.09,0.07,0.07,0.12,0.12,0.06,0.1,0.11,0.11,0.13,0.12,0.06,0.07,0.11,0.11,0.08,0.12,0,7.67,1.02,2416.67,586.67,1287.5,5.16,6.58,3.94,6.27,7.84,6.27,12.24},0},
{{0.17,0.12,0.07,0.1,0.05,0.07,0.09,0.08,0.13,0.15,0.11,0.14,0.1,0.08,0.1,0.08,0.08,0.11,0.11,0.1,0.09,0.14,0.09,0.1,0.11,0.07,0.09,0.11,0.1,0.13,0,7.97,1.15,2175,725,3150,5.46,6.51,3.99,6.59,7.89,6.59,12.68},0},
{{0.1,0.13,0.11,0.1,0.1,0.08,0.1,0.14,0.08,0.1,0.09,0.11,0.09,0.11,0.12,0.14,0.1,0.12,0.07,0.06,0.08,0.13,0.12,0.09,0.1,0.09,0.12,0.09,0.12,0.08,0,8.3,1.03,3600,885.71,4075,4.85,5.37,3.68,5.91,6.79,5.91,11.88},0},
{{0,0.08,0.09,0.19,0.16,0.17,0.18,0.11,0.05,0.01,0,0.02,0.18,0.17,0.15,0.13,0.17,0.15,0.05,0.01,0.02,0.07,0.06,0.13,0.16,0.28,0.11,0.05,0.04,0.1,0,9.18,1.44,1575,1350,2500,3.2,3.31,2.49,3.99,3.9,3.99,10.66},0},
{{0.01,0.06,0.1,0.17,0.16,0.22,0.16,0.12,0.03,0,0,0,0.16,0.18,0.16,0.14,0.17,0.18,0.02,0,0.01,0.09,0.05,0.13,0.15,0.28,0.13,0.05,0.05,0.08,0,9.25,1.27,1050,2375,1710,3.19,3.05,2.33,3.91,3.57,3.91,10.58},0},
{{0.1,0.14,0.1,0.08,0.09,0.12,0.11,0.1,0.11,0.08,0.08,0.13,0.11,0.11,0.13,0.09,0.1,0.07,0.11,0.08,0.07,0.07,0.09,0.12,0.15,0.08,0.13,0.09,0.1,0.11,0,8.11,1.51,1075,604.17,2425,4.68,5.61,3.45,5.77,6.89,5.77,11.68},0},
{{0.18,0.08,0.08,0.13,0.05,0.07,0.1,0.07,0.13,0.13,0.13,0.14,0.09,0.08,0.1,0.08,0.09,0.07,0.12,0.11,0.13,0.11,0.1,0.12,0.1,0.04,0.08,0.14,0.09,0.11,0,7.97,1.03,1600,500,1875,5.17,6.72,4.14,6.28,8.07,6.28,12.65},0},
{{0.15,0.16,0.08,0.08,0.07,0.08,0.1,0.1,0.13,0.08,0.14,0.07,0.11,0.06,0.12,0.12,0.06,0.1,0.11,0.09,0.11,0.11,0.1,0.09,0.1,0.07,0.08,0.13,0.11,0.12,0,8.26,1.34,2175,760,2016.67,5.14,6.41,4.3,6.31,7.95,6.31,13},0},
{{0.13,0.13,0.12,0.1,0.04,0.11,0.09,0.08,0.09,0.14,0.1,0.13,0.1,0.13,0.08,0.1,0.1,0.07,0.13,0.06,0.09,0.12,0.09,0.13,0.11,0.05,0.11,0.1,0.08,0.15,0,7.93,1.39,1500,738.46,1900,5.26,6.1,4.07,6.25,7.55,6.25,12.47},0},
{{0.17,0.13,0.08,0.06,0.09,0.1,0.06,0.07,0.14,0.12,0.13,0.11,0.06,0.09,0.09,0.11,0.13,0.12,0.09,0.06,0.1,0.14,0.13,0.08,0.08,0.05,0.06,0.11,0.13,0.14,0,7.94,1.58,3650,737.5,1875,5.4,6.37,4.6,6.53,7.82,6.53,12.98},0},
{{0.15,0.12,0.1,0.12,0.07,0.07,0.08,0.1,0.08,0.13,0.11,0.13,0.09,0.11,0.09,0.08,0.08,0.12,0.11,0.07,0.11,0.11,0.11,0.1,0.06,0.08,0.09,0.13,0.1,0.14,0,7.98,1.42,2700,480,1175,5.29,6.46,4.13,6.26,7.84,6.26,12.6},0},
{{0.08,0.12,0.11,0.1,0.09,0.12,0.11,0.11,0.09,0.09,0.06,0.09,0.12,0.13,0.15,0.09,0.11,0.12,0.1,0.04,0.08,0.04,0.05,0.15,0.13,0.18,0.12,0.07,0.09,0.11,0,8.57,1.51,1125,935,1583.33,4.44,4.84,3.23,5.48,6.16,5.48,11.66},0},
{{0.01,0.05,0.09,0.17,0.21,0.17,0.19,0.1,0.02,0,0,0.01,0.11,0.2,0.19,0.18,0.19,0.13,0.01,0,0,0.08,0.07,0.08,0.19,0.31,0.09,0.07,0.06,0.07,0,9.22,1.38,3900,1000,1675,3.16,2.7,2.21,3.89,3.19,3.89,10.53},0},
{{0,0.05,0.09,0.13,0.27,0.17,0.18,0.1,0.02,0,0,0.01,0.12,0.17,0.2,0.21,0.18,0.11,0.02,0,0,0.07,0.08,0.07,0.18,0.29,0.15,0.06,0.07,0.06,0,9.24,1.41,3900,2312.5,1350,3.13,2.56,2.15,3.82,3.17,3.82,10.51},0},
{{0.13,0.14,0.12,0.11,0.06,0.07,0.08,0.11,0.1,0.11,0.11,0.11,0.09,0.08,0.1,0.12,0.08,0.08,0.14,0.1,0.1,0.12,0.1,0.11,0.08,0.08,0.11,0.12,0.1,0.11,0,8.49,1.37,1125,692.86,3000,5.24,6.2,3.95,6.22,7.6,6.22,12.7},0},
{{0.11,0.14,0.11,0.11,0.08,0.08,0.1,0.1,0.11,0.09,0.14,0.14,0.07,0.11,0.1,0.08,0.07,0.07,0.07,0.11,0.15,0.11,0.08,0.08,0.11,0.07,0.11,0.11,0.14,0.07,0,7.91,0.92,2800,514.29,1866.67,4.97,6.86,3.99,5.99,8.23,5.99,12.32},0},
{{0.15,0.09,0.1,0.1,0.1,0.07,0.09,0.12,0.1,0.1,0.11,0.12,0.12,0.09,0.09,0.09,0.08,0.07,0.1,0.12,0.11,0.08,0.1,0.07,0.11,0.07,0.13,0.11,0.09,0.15,0,8.34,1.77,925,593.33,1410,4.96,6.43,4.23,6.13,7.75,6.13,12.59},0},
{{0.14,0.1,0.09,0.09,0.1,0.08,0.07,0.11,0.13,0.11,0.12,0.11,0.1,0.13,0.1,0.05,0.08,0.11,0.08,0.12,0.1,0.08,0.13,0.09,0.1,0.11,0.09,0.09,0.09,0.14,0,8.27,1.4,3700,485,1233.33,4.97,6.45,3.98,6.08,7.82,6.08,12.46},0},
{{0.05,0.06,0.07,0.04,0.08,0.04,0.09,0.04,0.05,0.07,0.06,0.06,0.06,0.05,0.04,0.07,0.06,0.07,0.06,0.04,0.06,0.05,0.06,0.05,0.05,0.09,0.06,0.04,0.07,0.05,0,4.63,0.63,933.33,587.5,783.33,2.47,3.93,2.04,5.46,8.35,5.46,6.77},0},
{{0.16,0.09,0.07,0.05,0.12,0.06,0.08,0.1,0.14,0,0.16,0.06,0.13,0.05,0.05,0.03,0.1,0.11,0.11,0,0.22,0.1,0.08,0.08,0.09,0.09,0.09,0.13,0.08,0,0,9.53,1.52,4125,3075,2583.33,1.77,2.52,1.75,2.3,3.16,2.3,10.25},5},
{{0.17,0.1,0.1,0.08,0.07,0.08,0.1,0.06,0.13,0,0.16,0.1,0.1,0.11,0.1,0.04,0.09,0.09,0.11,0,0.08,0.07,0.11,0.08,0.08,0.16,0.15,0.09,0.08,0,0,9.03,2.3,3750,1530,1700,1.79,2.05,1.75,2.21,2.58,2.21,9.94},5},
{{0.13,0.09,0.1,0.1,0.1,0.08,0.1,0.12,0.11,0,0.11,0.14,0.09,0.08,0.06,0.06,0.09,0.16,0.12,0,0.04,0.1,0.1,0.16,0.14,0.1,0.07,0.14,0.09,0,0,9.26,2.09,2166.67,2016.67,2700,1.58,1.84,1.57,1.94,2.25,1.94,9.95},5},
{{0.09,0.12,0.13,0.11,0.08,0.08,0.05,0.12,0.1,0,0.09,0.11,0.11,0.11,0.12,0.08,0.12,0.1,0.09,0,0.08,0.14,0.11,0.08,0.1,0.1,0.11,0.08,0.1,0,0,9.23,2.11,3600,1790,2875,1.53,1.58,1.78,1.87,2.04,1.87,9.96},5},
{{0.05,0.12,0.12,0.13,0.16,0.14,0.07,0.1,0.06,0,0.08,0.1,0.08,0.12,0.1,0.17,0.11,0.1,0.07,0,0.06,0.1,0.11,0.13,0.15,0.08,0.09,0.1,0.11,0,0,9.27,1.98,1875,1250,2783.33,1.52,1.42,1.59,1.72,1.9,1.72,9.88},5},
{{0.03,0.14,0.11,0.13,0.11,0.1,0.15,0.08,0.1,0,0.06,0.12,0.11,0.12,0.14,0.12,0.15,0.07,0.08,0,0.06,0.1,0.07,0.11,0.11,0.1,0.12,0.09,0.15,0,0,9.11,2.4,400,2750,2075,1.43,1.36,1.77,1.64,1.82,1.64,9.86},5},
{{0.06,0.05,0.1,0.12,0.07,0.13,0.16,0.16,0.09,0,0.06,0.06,0.12,0.09,0.15,0.18,0.11,0.11,0.11,0,0.15,0.09,0.11,0.11,0.08,0.1,0.09,0.09,0.09,0,0,9.36,1.87,2525,2250,1583.33,1.31,1.25,1.78,1.57,1.71,1.57,9.98},5},
{{0.04,0.11,0.09,0.1,0.1,0.12,0.12,0.1,0.1,0.14,0.08,0.12,0.09,0.1,0.13,0.09,0.1,0.13,0.11,0.08,0.17,0.09,0.07,0.08,0.09,0.1,0.09,0.14,0.12,0.08,0,9.5,1.2,150,1900,2466.67,1.44,2.45,1.66,1.82,3.14,1.82,10.02},1},
{{0.09,0.09,0.06,0.11,0.15,0.09,0.07,0.13,0.13,0.09,0.11,0.07,0.13,0.1,0.08,0.13,0.07,0.12,0.12,0.09,0.07,0.09,0.14,0.09,0.09,0.13,0.08,0.11,0.12,0.12,0,9.63,1.74,2425,1800,2850,1.48,2.54,1.33,1.93,3.2,1.93,10.1},1},
{{0.12,0.1,0.13,0.09,0.11,0.12,0.08,0.11,0.08,0.09,0.07,0.13,0.08,0.11,0.08,0.1,0.14,0.09,0.09,0.12,0.11,0.12,0.14,0.13,0.08,0.09,0.11,0.09,0.07,0.08,0,9.76,1.3,475,1783.33,1375,1.66,2.51,1.35,2.11,3.22,2.11,10.2},1},
{{0.12,0.12,0.12,0.09,0.08,0.08,0.12,0.1,0.07,0.11,0.11,0.08,0.12,0.1,0.11,0.08,0.14,0.1,0.1,0.08,0.07,0.1,0.08,0.11,0.15,0.11,0.11,0.09,0.11,0.11,0,9.51,1.71,4600,1291.67,3625,1.66,2.41,1.21,2.09,3.11,2.09,9.99},1},
{{0.13,0.1,0.12,0.11,0.08,0.09,0.09,0.1,0.11,0.1,0.14,0.08,0.09,0.09,0.1,0.09,0.09,0.1,0.09,0.14,0.08,0.08,0.09,0.1,0.1,0.11,0.09,0.11,0.11,0.14,0,9.79,1.81,716.67,2625,900,1.74,3.05,1.47,2.21,3.84,2.21,10.38},1},
{{0,0,0,0,0.01,0,0.01,0,0,0,0,0.01,0.01,0.01,0.01,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0.15,-0.02,716.67,2625,900,0.01,0.15,0.02,1.03,7.6,1.03,0.15},1},
{{0.17,0.1,0.09,0.04,0.11,0.05,0.1,0.12,0.1,0.13,0.15,0.12,0.12,0.09,0.07,0.06,0.03,0.07,0.13,0.18,0.12,0.11,0.08,0.06,0.13,0.13,0.12,0.08,0.08,0.1,0,9.15,2.05,275,750,2075,2.11,2.26,1.63,2.56,2.79,2.56,10.03},5},
{{0.12,0.06,0.11,0.13,0.1,0.1,0.09,0.11,0.09,0.12,0.14,0.09,0.12,0.08,0.1,0.05,0.07,0.12,0.14,0.1,0.06,0.08,0.1,0.09,0.13,0.15,0.11,0.1,0.09,0.09,0,9.13,2.33,3400,1950,1400,1.92,1.94,1.61,2.27,2.45,2.27,9.99},5},
{{0.11,0.1,0.11,0.09,0.07,0.12,0.1,0.08,0.1,0.13,0.14,0.08,0.1,0.09,0.08,0.12,0.1,0.11,0.11,0.11,0.12,0.08,0.09,0.12,0.08,0.11,0.11,0.13,0.07,0.13,0,9.07,2.25,2075,2162.5,2450,1.91,1.75,1.73,2.23,2.23,2.23,9.92},5},
{{0.05,0.12,0.1,0.09,0.1,0.07,0.13,0.13,0.13,0.11,0.08,0.09,0.09,0.11,0.12,0.13,0.12,0.1,0.12,0.07,0.11,0.12,0.11,0.11,0.05,0.11,0.12,0.08,0.11,0.1,0,9.17,2.13,850,2500,2250,1.77,1.46,1.68,2.06,1.95,2.06,9.91},5},
{{0.05,0.11,0.07,0.09,0.1,0.12,0.14,0.12,0.12,0.1,0.05,0.1,0.11,0.1,0.12,0.17,0.13,0.09,0.06,0.09,0.12,0.08,0.15,0.1,0.09,0.08,0.06,0.09,0.15,0.1,0,9.17,2.24,925,1887.5,2575,1.73,1.34,1.82,1.99,1.86,1.99,9.95},5},
{{0.07,0.11,0.1,0.1,0.14,0.09,0.14,0.09,0.09,0.09,0.03,0.11,0.12,0.12,0.08,0.13,0.16,0.11,0.08,0.08,0.08,0.09,0.1,0.12,0.11,0.09,0.08,0.14,0.11,0.09,0,9.23,2.15,2000,2525,1900,1.87,1.29,1.58,2.12,1.7,2.12,9.94},5},
{{0.12,0.08,0.12,0.11,0.08,0.07,0.05,0.09,0.09,0.05,0.09,0.09,0.05,0.08,0.12,0.09,0.08,0.1,0.08,0.07,0.06,0.06,0.14,0.08,0.08,0.07,0.09,0.09,0.09,0.08,0,7.54,1.89,2950,1475,2466.67,1.81,1.79,1.46,2.53,2.56,2.53,8.34},5},
{{0.09,0.1,0.07,0.1,0.08,0.1,0.13,0.1,0.12,0.13,0.08,0.1,0.09,0.11,0.14,0.11,0.09,0.11,0.08,0.09,0.06,0.09,0.12,0.14,0.09,0.07,0.1,0.1,0.15,0.11,0,9.57,2,2750,3650,1237.5,1.5,2.41,1.38,1.96,3.09,1.96,10.12},1},
{{0.1,0.06,0.1,0.1,0.14,0.13,0.12,0.09,0.08,0.09,0.09,0.12,0.09,0.09,0.12,0.12,0.1,0.14,0.06,0.1,0.11,0.07,0.08,0.1,0.08,0.15,0.13,0.1,0.06,0.13,0,9.54,1.84,875,1050,1770,1.43,2.23,1.5,1.84,2.77,1.84,10.06},1},
{{0.09,0.1,0.1,0.11,0.1,0.1,0.09,0.11,0.13,0.09,0.05,0.12,0.08,0.12,0.09,0.12,0.11,0.09,0.12,0.11,0.15,0.15,0.08,0.13,0.08,0.1,0.07,0.09,0.09,0.08,0,9.8,1.43,4200,762.5,1866.67,1.47,2.22,1.53,1.88,2.73,1.88,10.24},1},
{{0.11,0.11,0.13,0.09,0.08,0.1,0.11,0.07,0.11,0.1,0.1,0.09,0.15,0.09,0.08,0.1,0.09,0.11,0.11,0.09,0.08,0.11,0.11,0.07,0.11,0.14,0.13,0.1,0.1,0.08,0,9.56,1.77,2525,3125,3250,1.66,2.37,1.3,2.1,2.93,2.1,10.1},1},
{{0.11,0.12,0.11,0.11,0.09,0.08,0.1,0.13,0.09,0.09,0.16,0.07,0.11,0.1,0.08,0.07,0.11,0.08,0.11,0.13,0.08,0.11,0.11,0.08,0.09,0.11,0.09,0.12,0.11,0.12,0,9.54,1.99,2075,1300,3925,1.59,2.82,1.46,2.07,3.48,2.07,10.13},1},
{{0.02,0.01,0.02,0.03,0.02,0.02,0.02,0.02,0.02,0.02,0.04,0.02,0.01,0.01,0.01,0.01,0.02,0.01,0.03,0.03,0.03,0.01,0.02,0.02,0.02,0.02,0,0.02,0.02,0.02,0,1.81,0.31,200,362.5,525,0.31,1.48,0.54,2.13,8.82,2.13,1.99},1},
{{0.19,0.1,0.08,0.07,0.09,0.06,0.09,0.09,0.11,0.15,0.19,0.08,0.12,0.07,0.06,0.05,0.06,0.09,0.11,0.17,0.11,0.1,0.06,0.09,0.1,0.12,0.13,0.11,0.12,0.08,0,9.1,2.51,2975,4025,2900,1.81,2.37,1.61,2.24,2.93,2.24,10.02},5},
{{0.1,0.14,0.1,0.09,0.11,0.1,0.07,0.1,0.08,0.13,0.11,0.11,0.1,0.08,0.08,0.09,0.07,0.08,0.18,0.13,0.12,0.14,0.07,0.09,0.12,0.12,0.08,0.1,0.08,0.09,0,9.24,2.28,2200,1410,2150,1.71,1.79,1.71,2.03,2.19,2.03,10.03},5},
{{0.1,0.09,0.12,0.09,0.11,0.11,0.11,0.07,0.1,0.1,0.13,0.1,0.11,0.15,0.1,0.09,0.08,0.07,0.09,0.1,0.06,0.07,0.07,0.1,0.11,0.13,0.1,0.08,0.13,0.17,0,8.89,3.05,2425,1540,2525,1.61,1.66,1.89,1.89,2.16,1.89,9.94},5},
{{0.05,0.1,0.09,0.11,0.11,0.13,0.12,0.11,0.13,0.07,0.06,0.1,0.09,0.1,0.12,0.12,0.17,0.12,0.08,0.07,0.13,0.08,0.13,0.1,0.1,0.08,0.12,0.1,0.09,0.09,0,9.18,2.4,4400,3875,4525,1.44,1.33,1.65,1.7,1.82,1.7,9.9},5},
{{0.09,0.07,0.12,0.13,0.1,0.1,0.11,0.11,0.12,0.08,0.06,0.11,0.08,0.1,0.11,0.12,0.16,0.13,0.07,0.09,0.1,0.14,0.14,0.07,0.11,0.08,0.1,0.12,0.09,0.08,0,9.29,2.31,2550,1275,2000,1.54,1.42,1.54,1.86,1.95,1.86,9.98},5},
{{0.07,0.07,0.1,0.12,0.11,0.1,0.12,0.11,0.09,0.08,0.05,0.12,0.08,0.12,0.12,0.12,0.1,0.09,0.09,0.05,0.08,0.05,0.12,0.14,0.09,0.08,0.09,0.08,0.12,0.1,0,8.4,2.5,1725,2266.67,1337.5,1.37,1.42,1.61,1.72,1.94,1.72,9.18},5},
{{0.08,0.1,0.09,0.13,0.11,0.09,0.12,0.09,0.09,0.11,0.08,0.09,0.11,0.1,0.09,0.14,0.12,0.09,0.11,0.08,0.07,0.11,0.11,0.11,0.1,0.1,0.12,0.11,0.1,0.09,0,9.63,1.77,2866.67,1187.5,921.43,1.41,2.13,1.24,1.76,2.81,1.76,10.08},1},
{{0.1,0.08,0.11,0.07,0.15,0.12,0.09,0.08,0.11,0.12,0.08,0.09,0.14,0.09,0.08,0.12,0.11,0.1,0.08,0.11,0.07,0.11,0.09,0.08,0.11,0.09,0.13,0.11,0.11,0.11,0,9.67,2,2700,3875,2583.33,1.45,2.27,1.36,1.85,2.92,1.85,10.18},1},
{{0.12,0.1,0.1,0.09,0.1,0.1,0.09,0.11,0.08,0.12,0.11,0.06,0.11,0.13,0.11,0.09,0.07,0.14,0.11,0.09,0.1,0.09,0.1,0.12,0.09,0.12,0.09,0.11,0.09,0.12,0,9.7,1.85,1340,1762.5,1875,1.54,2.28,1.34,1.97,2.86,1.97,10.2},1},
{{0.1,0.14,0.1,0.09,0.08,0.11,0.06,0.1,0.13,0.11,0.12,0.12,0.06,0.11,0.08,0.1,0.09,0.11,0.11,0.12,0.12,0.13,0.09,0.12,0.11,0.09,0.09,0.08,0.1,0.1,0,9.68,1.67,3975,1800,2350,1.52,2.55,1.43,1.92,3.15,1.92,10.17},1},
{{0.11,0.07,0.09,0.09,0.1,0.08,0.07,0.14,0.11,0.06,0.11,0.12,0.08,0.06,0.09,0.08,0.08,0.07,0.09,0.11,0.12,0.07,0.09,0.09,0.07,0.09,0.08,0.1,0.1,0.08,0,8.52,1.46,3075,1750,2825,1.28,2.32,1.51,1.99,3.46,1.99,9.06},1},
{{0.17,0.11,0.07,0.07,0.07,0.07,0.09,0.06,0.1,0.18,0.16,0.14,0.1,0.08,0.04,0.04,0.04,0.07,0.13,0.22,0.13,0.1,0.09,0.1,0.13,0.14,0.09,0.06,0.09,0.09,0,8.8,2.71,800,1133.33,2650,1.92,2.81,1.76,2.36,3.51,2.36,9.98},5},
{{0.12,0.11,0.12,0.11,0.07,0.08,0.1,0.09,0.08,0.14,0.15,0.07,0.09,0.11,0.08,0.06,0.09,0.1,0.15,0.12,0.09,0.09,0.1,0.07,0.1,0.14,0.12,0.15,0.06,0.1,0,8.93,3.05,1150,1075,1187.5,1.8,1.94,1.77,2.12,2.44,2.12,10.03},5},
{{0.11,0.12,0.12,0.08,0.12,0.1,0.09,0.11,0.06,0.1,0.05,0.09,0.1,0.12,0.12,0.12,0.1,0.14,0.08,0.1,0.09,0.12,0.09,0.15,0.11,0.08,0.1,0.09,0.11,0.08,0,9.14,2.69,2225,960,3400,1.72,1.38,1.72,1.99,1.81,1.99,10.01},5},
{{0.07,0.09,0.09,0.06,0.13,0.11,0.12,0.1,0.13,0.12,0.11,0.09,0.13,0.11,0.08,0.11,0.12,0.1,0.1,0.08,0.1,0.09,0.09,0.09,0.13,0.07,0.11,0.1,0.13,0.11,0,8.81,3.11,2300,1430,1633.33,1.49,1.58,1.91,1.81,1.98,1.81,9.86},5},
{{0.05,0.09,0.11,0.11,0.14,0.14,0.13,0.12,0.07,0.07,0.05,0.11,0.11,0.1,0.13,0.13,0.15,0.1,0.07,0.07,0.1,0.15,0.16,0.09,0.04,0.09,0.08,0.09,0.12,0.1,0,8.97,2.74,2450,2550,2733.33,1.56,1.29,1.85,1.75,1.68,1.75,9.84},5},
{{0.09,0.08,0.16,0.09,0.13,0.08,0.11,0.09,0.14,0.07,0.07,0.14,0.11,0.09,0.11,0.09,0.16,0.09,0.1,0.06,0.1,0.08,0.1,0.1,0.11,0.09,0.09,0.11,0.14,0.1,0,8.84,3.04,1100,1508.33,3425,1.55,1.46,1.85,1.81,1.83,1.81,9.84},5},
{{0.08,0.09,0.08,0.09,0.11,0.14,0.09,0.12,0.1,0.04,0.09,0.07,0.07,0.11,0.14,0.08,0.1,0.12,0.09,0.07,0.07,0.09,0.1,0.1,0.09,0.1,0.12,0.09,0.08,0.11,0,8.2,2.78,1400,1550,3975,1.44,1.58,1.61,1.81,2.12,1.81,9.1},5},
{{0.09,0.08,0.08,0.1,0.12,0.11,0.12,0.11,0.11,0.1,0.08,0.11,0.13,0.09,0.09,0.1,0.11,0.09,0.11,0.1,0.08,0.09,0.11,0.14,0.1,0.09,0.16,0.08,0.08,0.1,0,9.49,1.95,2900,1675,987.5,1.58,2.34,1.32,2.04,2.92,2.04,10.04},1},
{{0.12,0.1,0.12,0.08,0.09,0.09,0.1,0.11,0.09,0.13,0.11,0.09,0.12,0.12,0.1,0.06,0.07,0.13,0.11,0.1,0.08,0.1,0.13,0.06,0.09,0.14,0.09,0.1,0.13,0.12,0,9.53,2,675,1816.67,1487.5,1.75,2.47,1.42,2.23,2.99,2.23,10.14},1},
{{0.1,0.11,0.09,0.1,0.14,0.11,0.11,0.11,0.08,0.07,0.09,0.11,0.09,0.12,0.09,0.13,0.09,0.1,0.1,0.1,0.11,0.13,0.05,0.11,0.1,0.07,0.12,0.12,0.12,0.09,0,9.52,1.82,2225,1092.86,1025,1.68,2.27,1.55,2.1,2.9,2.1,10.12},1},
{{0.1,0.1,0.06,0.14,0.09,0.1,0.11,0.1,0.11,0.09,0.1,0.07,0.11,0.1,0.12,0.11,0.14,0.1,0.08,0.08,0.13,0.09,0.14,0.09,0.1,0.09,0.08,0.13,0.08,0.08,0,9.58,1.78,2000,940,3350,1.68,2.25,1.61,2.13,2.97,2.13,10.19},1},
{{0.08,0.11,0.12,0.1,0.09,0.07,0.07,0.11,0.13,0.14,0.14,0.1,0.08,0.08,0.1,0.09,0.12,0.07,0.11,0.12,0.1,0.11,0.09,0.11,0.08,0.12,0.08,0.08,0.12,0.13,0,9.5,1.93,2400,1033.33,1500,1.68,2.7,1.58,2.13,3.4,2.13,10.12},1},
{{0.04,0.06,0.04,0.05,0.02,0.04,0.02,0.02,0.02,0.05,0.02,0.05,0.01,0.05,0.03,0.02,0.05,0.04,0.04,0.04,0.05,0.03,0.02,0.03,0.04,0.05,0.02,0.03,0.04,0.03,0,3.28,0.57,1125,783.33,275,0.67,2.2,0.68,2.43,7.35,2.43,3.5},1},
{{0.94,0.03,0.01,0.03,0,0,0,0,0,0,0.02,0,0.09,0,0,0,0.24,0,0,0.66,0.85,0.14,0.01,0.01,0,0,0,0,0,0,0,-2.21,7.74,1125,783.33,257.89,5.16,0.04,0.05,5.16,0.2,5.16,9.56},3},
{{0.15,0.53,0.31,0.01,0,0,0,0,0,0,0.07,0,0.37,0,0,0,0.43,0,0,0.14,0.12,0.24,0.36,0.29,0,0,0,0,0,0,0,-2.27,7.87,1125,783.33,277.94,4.99,0.03,0.04,4.99,0.05,4.99,9.6},3},
{{0.01,0.15,0.63,0.22,0,0,0,0,0,0,0.01,0,0.23,0,0,0,0.53,0,0,0.24,0.01,0.27,0.51,0.21,0,0,0,0,0,0,0,-2.26,7.88,1125,783.33,351.92,4.91,0.02,0.02,4.92,0.04,4.92,9.56},3},
{{0,0.1,0.5,0.41,0,0,0,0,0,0,0.05,0,0.21,0,0,0,0.54,0,0,0.22,0,0.21,0.3,0.49,0.01,0.01,0,0,0,0,0,-2.26,7.91,1125,783.33,348.21,4.89,0.02,0.04,4.9,0.04,4.9,9.57},3},
{{0.01,0.02,0.36,0.59,0.03,0.01,0,0,0,0,0.02,0,0.26,0,0,0,0.48,0,0,0.26,0,0.01,0.08,0.88,0.05,0,0,0,0,0,0,-2.25,7.96,1125,783.33,265.28,4.86,0.04,0.04,4.86,0.06,4.86,9.59},3},
{{0,0,0,0.03,0.5,0.22,0.16,0.06,0.03,0.01,0.03,0,0.11,0,0,0,0.26,0,0,0.61,0,0,0.01,0.02,0.12,0.29,0.37,0,0.17,0,0,-2.23,8.22,1125,783.33,227.91,4.43,0.04,0.04,4.43,0.06,4.43,9.6},3},
{{0,0,0,0,0.32,0.38,0.27,0.04,0,0,0.05,0,0.38,0,0,0,0.52,0,0,0.05,0,0,0,0,0.01,0.28,0.4,0,0.3,0,0,-2.28,8.24,1125,783.33,359.26,4.41,0.02,0.03,4.41,0.03,4.41,9.62},3},
{{0,0,0,0,0.13,0.19,0.38,0.19,0.08,0.04,0.1,0,0.32,0,0,0,0.48,0,0,0.1,0,0,0,0,0.07,0.18,0.39,0,0.29,0,0,-2.28,8.24,1125,783.33,286.36,4.37,0.03,0.03,4.37,0.04,4.37,9.6},3},
{{0,0,0,0,0.03,0.06,0.14,0.24,0.29,0.26,0.01,0,0.22,0,0,0,0.62,0,0,0.16,0,0,0,0,0.06,0.33,0.42,0,0.17,0,0,-2.26,8.23,1125,783.33,288.24,4.31,0.02,0.03,4.31,0.03,4.31,9.56},3},
{{0,0,0,0,0.02,0.03,0.05,0.12,0.37,0.41,0,0,0.17,0,0,0,0.59,0,0,0.25,0,0,0,0,0.03,0.24,0.44,0,0.24,0,0,-2.26,8.24,1125,783.33,310,4.28,0.02,0.03,4.29,0.03,4.29,9.56},3},
{{0,0,0,0,0,0,0.05,0.21,0.4,0.35,0,0,0.08,0,0,0,0.49,0,0,0.44,0,0,0,0,0,0,0.1,0,0.32,0,0,-2.24,8.3,1125,783.33,309.68,4.29,0.02,0.03,4.29,0.03,4.29,9.61},3},
{{0,0,0,0,0.02,0.08,0.08,0.32,0.25,0.26,0,0,0.06,0,0,0,0.31,0,0,0.64,0,0,0,0,0,0,0.01,0,0.15,0,0,-2.23,8.34,1125,783.33,304.69,4.3,0.02,0.04,4.31,0.03,4.31,9.65},3},
{{0,0,0,0,0.01,0,0.02,0.05,0.09,0.34,0.02,0,0,0,0,0,0.1,0,0,0.39,0.01,0,0,0,0.01,0,0.02,0,0.08,0,0,-1.12,4.16,1125,783.33,244.74,2.13,0.56,2.08,4.26,1.12,4.26,4.8},3},
{{0.01,0,0.01,0,0.01,0,0.02,0.06,0.2,0.69,0.12,0.06,0,0.16,0,0.16,0,0.14,0.14,0.23,0.02,0.07,0.1,0.09,0.1,0.2,0.12,0.11,0.07,0.15,0,9.46,2.62,1125,245,421.88,0.47,0.09,0.13,0.54,0.15,0.54,9.83},4},
{{0,0.01,0.02,0.06,0.13,0.4,0.24,0.09,0.04,0.03,0.12,0.1,0,0.25,0,0.3,0,0.15,0.07,0.03,0,0,0,0.01,0.08,0.22,0.16,0.19,0.13,0.23,0,9.4,2.72,1125,337.93,362.96,0.92,0.06,0.08,0.94,0.09,0.94,9.83},4},
{{0,0.01,0.02,0.06,0.09,0.16,0.15,0.24,0.2,0.08,0.14,0.1,0,0.17,0,0.21,0,0.18,0.11,0.1,0,0.01,0.02,0.04,0.09,0.26,0.23,0.12,0.09,0.16,0,9.42,2.69,1125,207.78,861.11,0.84,0.07,0.08,0.86,0.09,0.86,9.83},4},
{{0,0,0,0.01,0.01,0.02,0.12,0.24,0.49,0.12,0.05,0.03,0,0.18,0,0.32,0,0.16,0.13,0.15,0,0.02,0.06,0.05,0.13,0.17,0.22,0.19,0.11,0.08,0,9.45,2.66,1125,224.42,371.15,0.72,0.06,0.08,0.73,0.08,0.73,9.84},4},
{{0,0,0,0.02,0.1,0.28,0.24,0.19,0.18,0.01,0.05,0.15,0,0.32,0,0.31,0,0.14,0.05,0.01,0,0,0,0,0.01,0.07,0.16,0.28,0.23,0.26,0,9.4,2.74,1125,333.93,210,0.86,0.04,0.05,0.87,0.06,0.87,9.84},4},
{{0.01,0.01,0.03,0.14,0.22,0.24,0.15,0.08,0.11,0.04,0.1,0.25,0,0.23,0,0.16,0,0.14,0.06,0.08,0.01,0.03,0.02,0.02,0.07,0.13,0.1,0.14,0.19,0.31,0,9.4,2.72,1125,320,614.29,0.94,0.07,0.1,0.96,0.09,0.96,9.83},4},
{{0.35,0.13,0.23,0.22,0.06,0.01,0,0,0.01,0,0.02,0.03,0,0.06,0,0.09,0,0.15,0.15,0.53,0.67,0.33,0,0,0,0,0,0,0,0,0,9.52,2.09,1125,273.61,596.88,1.37,0.06,0.15,1.39,0.09,1.39,9.84},4},
{{0.24,0.14,0.28,0.16,0.1,0.06,0.03,0,0,0.01,0.09,0.09,0,0.12,0,0.23,0,0.1,0.09,0.29,0.2,0.28,0.14,0.09,0.15,0.13,0.01,0.02,0,0.01,0,9.47,2.37,1125,217.78,450,1.3,0.1,0.17,1.32,0.13,1.32,9.85},4},
{{0.12,0.23,0.42,0.22,0.02,0,0,0,0,0,0.05,0.05,0,0.15,0,0.4,0,0.24,0.09,0.04,0,0.11,0.36,0.22,0.23,0.07,0.02,0.01,0,0,0,9.43,2.48,1125,325.86,357.69,1.32,0.04,0.06,1.33,0.06,1.33,9.84},4},
{{0.14,0.11,0.31,0.06,0.01,0.01,0,0,0,0,0.05,0.03,0,0.09,0,0.14,0,0.16,0.09,0.06,0.02,0.15,0.25,0.11,0.07,0,0.01,0.01,0,0.01,0,5.85,1.52,1125,313.16,2500,0.85,2.22,0.58,1.38,3.59,1.38,6.11},4},
{{0,0,0.01,0.03,0.07,0.17,0.14,0.26,0.24,0.1,0.06,0.12,0.13,0.18,0.08,0.08,0.04,0.09,0.1,0.02,0.11,0.12,0.12,0.15,0.07,0.09,0.09,0.12,0.06,0.09,0,9.76,-0.57,2750,496.43,2250,5.88,6.85,4.25,7.25,8.01,7.25,14.36},0},
{{0,0,0,0.04,0.13,0.19,0.19,0.25,0.09,0.14,0.16,0.09,0.09,0.08,0.05,0.08,0.08,0.08,0.14,0.06,0.09,0.19,0.17,0.09,0.09,0.12,0.06,0.03,0.09,0.09,0,9.9,-0.98,2750,316.13,3775,5.62,8.31,4.05,7.39,9.42,7.39,15.48},0},
{{0.04,0.08,0.12,0.12,0.13,0.11,0.15,0.07,0.07,0.12,0.06,0.11,0.14,0.09,0.05,0.12,0.08,0.11,0.07,0.06,0.09,0.12,0.07,0.06,0.1,0.12,0.13,0.1,0.13,0.1,0,10.71,0.44,1520,420.45,700,8.74,7.09,4.17,10.49,8.13,10.49,16.78},0},
{{0.09,0.08,0.08,0.15,0.1,0.09,0.17,0.09,0.06,0.11,0.08,0.09,0.09,0.16,0.1,0.1,0.07,0.13,0.11,0.04,0.08,0.16,0.12,0.09,0.1,0.1,0.1,0.09,0.07,0.11,0,10.37,-0.1,1171.43,510.53,2400,9.28,6.49,4.2,11.29,7.83,11.29,16.8},0},
{{0.09,0.1,0.08,0.12,0.13,0.15,0.11,0.11,0.05,0.08,0.09,0.08,0.1,0.11,0.08,0.11,0.09,0.11,0.12,0.05,0.13,0.12,0.11,0.06,0.16,0.08,0.07,0.11,0.1,0.09,0,10.76,-0.65,1216.67,380,3975,8.83,6.92,4.44,10.68,8.02,10.68,16.6},0},
{{0.1,0.08,0.1,0.1,0.13,0.08,0.11,0.13,0.08,0.11,0.09,0.09,0.15,0.09,0.07,0.14,0.13,0.1,0.08,0.01,0.08,0.1,0.1,0.11,0.06,0.11,0.13,0.11,0.1,0.11,0,9.81,0.67,1750,350,3750,9.34,6.84,4.32,11.15,8.04,11.15,16.59},0},
{{0.09,0.11,0.1,0.13,0.13,0.12,0.07,0.09,0.1,0.08,0.1,0.11,0.17,0.05,0.08,0.13,0.08,0.1,0.14,0.02,0.06,0.11,0.15,0.1,0.13,0.08,0.07,0.11,0.06,0.15,0,9.6,0.47,870,410.87,2125,9.76,7.17,4.45,11.42,8.18,11.42,16.59},0},
{{0.1,0.11,0.07,0.11,0.13,0.09,0.08,0.11,0.13,0.09,0.14,0.08,0.12,0.12,0.07,0.13,0.08,0.11,0.07,0.04,0.07,0.1,0.09,0.1,0.12,0.09,0.09,0.12,0.13,0.11,0,8.99,0.61,1250,402.08,2350,9.6,7.41,4.11,11.36,8.64,11.36,16.25},0},
{{0.13,0.15,0.08,0.1,0.1,0.1,0.13,0.08,0.08,0.07,0.1,0.13,0.06,0.07,0.11,0.12,0.13,0.07,0.12,0.03,0.08,0.12,0.11,0.1,0.07,0.14,0.13,0.06,0.1,0.11,0,9.91,-0.01,1466.67,341.07,2425,9.97,7.14,4.1,11.77,8.51,11.77,16.64},0},
{{0.12,0.12,0.06,0.15,0.1,0.1,0.08,0.06,0.12,0.11,0.13,0.1,0.12,0.09,0.13,0.1,0.1,0.1,0.07,0.02,0.12,0.08,0.06,0.09,0.08,0.11,0.08,0.12,0.11,0.16,0,8.96,0.74,1308.33,317.86,2975,10.23,7.18,4.61,11.75,8.44,11.75,16.61},0},
{{0.14,0.12,0.09,0.13,0.05,0.08,0.13,0.06,0.11,0.11,0.11,0.09,0.09,0.09,0.19,0.07,0.05,0.12,0.13,0.02,0.1,0.12,0.1,0.1,0.07,0.12,0.11,0.14,0.11,0.06,0,9.86,-0.38,1530,400,4175,10.37,6.99,3.9,12.1,8.49,12.1,16.88},0},
{{0.13,0.15,0.09,0.11,0.08,0.12,0.1,0.07,0.07,0.09,0.08,0.09,0.08,0.11,0.1,0.12,0.13,0.13,0.09,0.02,0.14,0.1,0.12,0.09,0.07,0.08,0.1,0.07,0.14,0.11,0,10.55,-0.26,1266.67,351.79,1612.5,10.34,6.49,4.63,12.08,7.86,12.08,17.45},0},
{{0.12,0.14,0.15,0.08,0.07,0.08,0.08,0.1,0.11,0.07,0.1,0.1,0.1,0.08,0.1,0.13,0.16,0.08,0.07,0.03,0.13,0.08,0.13,0.07,0.11,0.1,0.08,0.1,0.1,0.12,0,10,-0.08,1350,378,1475,10.49,6.78,4.26,12.07,8,12.07,16.93},0},
{{0.12,0.12,0.1,0.06,0.15,0.09,0.11,0.06,0.1,0.11,0.1,0.09,0.11,0.11,0.11,0.11,0.1,0.12,0.08,0.03,0.12,0.07,0.08,0.07,0.15,0.06,0.14,0.1,0.11,0.12,0,9.77,0.37,1333.33,436.36,1000,10.11,6.88,4.34,11.9,8.2,11.9,16.84},0},
{{0.1,0.11,0.15,0.11,0.1,0.08,0.09,0.08,0.1,0.08,0.1,0.08,0.12,0.09,0.14,0.1,0.06,0.12,0.12,0.02,0.1,0.12,0.09,0.08,0.12,0.08,0.12,0.07,0.16,0.09,0,10.26,-0.1,962.5,351.85,1650,10.23,6.51,4.22,11.83,7.79,11.83,16.92},0},
{{0.11,0.13,0.11,0.08,0.13,0.09,0.09,0.06,0.1,0.1,0.12,0.06,0.12,0.07,0.08,0.13,0.13,0.12,0.11,0.01,0.11,0.11,0.12,0.1,0.06,0.09,0.06,0.1,0.15,0.12,0,10.15,0.27,1264.29,419.57,1275,10.29,6.91,4.68,12.01,8.05,12.01,17.28},0},
{{0.14,0.1,0.18,0.05,0.14,0.08,0.07,0.08,0.1,0.08,0.1,0.09,0.07,0.13,0.09,0.07,0.11,0.13,0.11,0.04,0.13,0.09,0.05,0.09,0.13,0.1,0.09,0.13,0.11,0.1,0,10.5,-0.2,1087.5,514.29,3300,10.42,6.7,4.24,12.06,7.84,12.06,17.16},0},
{{0.12,0.1,0.12,0.11,0.11,0.1,0.07,0.11,0.1,0.06,0.09,0.1,0.08,0.09,0.13,0.11,0.15,0.06,0.12,0.04,0.14,0.09,0.09,0.13,0.08,0.13,0.13,0.08,0.06,0.1,0,10.38,-0.67,993.75,482.5,1350,9.91,6.57,4.13,11.56,7.85,11.56,16.85},0},
{{0.08,0.1,0.13,0.11,0.1,0.09,0.09,0.13,0.09,0.08,0.1,0.08,0.12,0.08,0.13,0.1,0.13,0.09,0.08,0.05,0.11,0.06,0.15,0.11,0.09,0.09,0.12,0.11,0.07,0.12,0,10.21,-0.05,905,426.09,2166.67,9.64,6.52,4.11,11.28,7.73,11.28,16.38},0},
{{0.1,0.09,0.09,0.13,0.08,0.13,0.08,0.11,0.08,0.13,0.07,0.16,0.14,0.08,0.11,0.07,0.13,0.07,0.14,0.02,0.07,0.07,0.11,0.17,0.11,0.1,0.07,0.12,0.15,0.06,0,9.4,0.08,1520,472.22,1600,9.78,6.98,3.59,11.46,7.97,11.46,15.76},0},
{{0.12,0.09,0.09,0.11,0.12,0.11,0.08,0.08,0.13,0.1,0.09,0.14,0.09,0.1,0.12,0.11,0.11,0.1,0.07,0.01,0.1,0.06,0.11,0.08,0.14,0.11,0.12,0.12,0.1,0.08,0,9.5,0.09,2075,409.52,3925,9.83,6.66,3.87,11.49,7.8,11.49,15.93},0},
{{0.09,0.14,0.13,0.12,0.08,0.09,0.09,0.09,0.09,0.09,0.08,0.14,0.08,0.1,0.09,0.12,0.13,0.09,0.08,0.03,0.11,0.11,0.08,0.1,0.1,0.12,0.13,0.11,0.06,0.11,0,10.06,-0.22,1150,472.5,1830,10,6.81,4.12,11.63,7.92,11.63,16.54},0},
{{0.12,0.09,0.12,0.13,0.08,0.11,0.07,0.12,0.11,0.08,0.12,0.08,0.08,0.1,0.11,0.09,0.15,0.15,0.06,0.03,0.12,0.07,0.11,0.14,0.13,0.06,0.09,0.1,0.13,0.07,0,9.76,-0.57,1580,462.5,1850,9.69,6.88,4.04,11.34,8.03,11.34,16.29},0},
{{0.13,0.12,0.1,0.11,0.07,0.08,0.1,0.09,0.12,0.1,0.18,0.07,0.09,0.09,0.09,0.11,0.12,0.09,0.1,0.02,0.1,0.05,0.07,0.1,0.13,0.17,0.1,0.12,0.1,0.09,0,9.04,0.25,1108.33,381.58,1025,10.41,7.48,3.6,12.21,8.56,12.21,16.36},0},
{{0.13,0.09,0.16,0.11,0.11,0.08,0.06,0.07,0.12,0.08,0.08,0.14,0.09,0.1,0.15,0.08,0.08,0.11,0.09,0.03,0.09,0.12,0.04,0.13,0.04,0.12,0.14,0.15,0.09,0.11,0,9.54,0.18,966.67,500,2450,10.39,6.95,4.15,11.84,8.15,11.84,16.49},0},
{{0.11,0.11,0.13,0.11,0.07,0.08,0.11,0.13,0.07,0.1,0.12,0.09,0.09,0.12,0.12,0.1,0.06,0.06,0.16,0.02,0.09,0.11,0.1,0.15,0.09,0.05,0.12,0.08,0.12,0.11,0,9.7,-0.06,964.29,309.68,1862.5,9.85,7.12,4.36,11.64,8.46,11.64,16.57},0},
{{0.14,0.14,0.08,0.1,0.07,0.07,0.08,0.11,0.16,0.07,0.11,0.13,0.1,0.14,0.08,0.06,0.11,0.09,0.08,0.07,0.07,0.09,0.1,0.11,0.13,0.16,0.08,0.12,0.09,0.09,0,9.2,0.07,1883.33,438.89,2400,10.23,7.27,3.66,11.96,8.3,11.96,16.04},0},
{{0.01,0,0.01,0.02,0.02,0.01,0.02,0.01,0.01,0,0.01,0.01,0.01,0.02,0.01,0.01,0.01,0.01,0.01,0,0,0.01,0.01,0.01,0.01,0.02,0.02,0,0.01,0,0,0.8,-0.02,1883.33,225,275,0.55,0.81,0.18,8.02,11.11,8.02,1.11},0},
{{0.1,0.08,0.06,0.11,0.13,0.1,0.15,0.12,0.1,0.07,0.11,0.13,0.12,0.09,0.11,0.11,0.09,0.08,0.12,0.05,0.1,0.12,0.07,0.09,0.08,0.09,0.12,0.05,0.13,0.16,0,10.28,-0.44,1050,466.67,1175,4.37,4.12,2.97,5.31,5,5.31,12.35},2},
{{0.14,0.09,0.09,0.09,0.07,0.14,0.15,0.1,0.08,0.08,0.06,0.16,0.11,0.13,0.07,0.12,0.09,0.08,0.1,0.08,0.18,0.12,0.08,0.1,0.1,0.09,0.04,0.08,0.09,0.14,0,10.63,-1.14,4150,522.22,2783.33,4.7,4.13,3.28,5.83,4.97,5.83,12.99},2},
{{0.1,0.09,0.11,0.09,0.11,0.11,0.15,0.12,0.06,0.09,0.04,0.1,0.23,0.11,0.08,0.11,0.07,0.12,0.05,0.11,0.13,0.14,0.08,0.12,0.1,0.09,0.09,0.09,0.08,0.11,0,10.58,-1.21,2566.67,475,2750,4.58,3.85,2.81,5.75,4.62,5.75,12.63},2},
{{0.11,0.1,0.09,0.06,0.11,0.1,0.19,0.13,0.07,0.07,0.04,0.14,0.16,0.08,0.11,0.08,0.12,0.08,0.12,0.05,0.12,0.13,0.1,0.06,0.09,0.09,0.11,0.08,0.12,0.12,0,10.78,-0.99,2112.5,463.16,3775,4.65,3.93,2.9,5.84,4.73,5.84,12.86},2},
{{0.12,0.1,0.12,0.09,0.09,0.12,0.11,0.11,0.08,0.09,0.06,0.17,0.08,0.09,0.1,0.12,0.1,0.08,0.12,0.05,0.11,0.09,0.1,0.11,0.12,0.08,0.13,0.06,0.12,0.1,0,10.92,-1.02,4600,593.75,4600,4.84,4.12,2.5,5.85,5,5.85,12.89},2},
{{0.08,0.11,0.1,0.11,0.11,0.09,0.13,0.1,0.11,0.09,0.06,0.13,0.13,0.1,0.08,0.07,0.14,0.11,0.1,0.05,0.12,0.1,0.12,0.1,0.07,0.07,0.13,0.12,0.07,0.13,0,10.8,-0.94,3550,527.78,2500,4.67,4.09,2.76,5.61,4.89,5.61,12.79},2},
{{0.1,0.13,0.09,0.1,0.11,0.1,0.09,0.13,0.06,0.12,0.09,0.12,0.08,0.12,0.09,0.13,0.11,0.08,0.11,0.08,0.09,0.12,0.12,0.09,0.09,0.08,0.1,0.12,0.09,0.12,0,10.92,-0.95,2525,505.56,2050,4.85,4.08,2.62,5.76,5.01,5.76,12.93},2},
{{0.11,0.12,0.08,0.08,0.12,0.1,0.1,0.1,0.1,0.11,0.06,0.11,0.1,0.15,0.1,0.1,0.13,0.1,0.08,0.06,0.11,0.12,0.11,0.1,0.09,0.07,0.08,0.12,0.11,0.11,0,10.98,-1.04,2750,461.11,3625,4.86,3.85,2.71,5.86,4.74,5.86,13},2},
{{0.14,0.1,0.08,0.1,0.06,0.13,0.14,0.1,0.08,0.1,0.09,0.12,0.1,0.08,0.13,0.07,0.09,0.12,0.1,0.08,0.12,0.14,0.11,0.08,0.08,0.07,0.08,0.11,0.13,0.11,0,10.86,-1.17,2500,442.86,2383.33,4.82,4.25,2.88,5.82,5.16,5.82,13.04},2},
{{0.13,0.14,0.06,0.07,0.09,0.12,0.14,0.07,0.12,0.08,0.12,0.1,0.09,0.11,0.07,0.1,0.13,0.09,0.09,0.06,0.13,0.12,0.09,0.08,0.09,0.13,0.11,0.06,0.09,0.13,0,10.76,-1.17,2033.33,454.76,1733.33,4.97,4.35,2.75,6.05,5.25,6.05,13.06},2},
{{0.12,0.12,0.11,0.09,0.08,0.1,0.1,0.09,0.11,0.1,0.11,0.09,0.09,0.1,0.13,0.07,0.1,0.12,0.11,0.05,0.13,0.08,0.1,0.13,0.09,0.07,0.11,0.1,0.08,0.12,0,10.87,-1.1,4000,584.38,4000,5.01,4.15,2.8,5.95,5.14,5.95,13.17},2},
{{0.09,0.11,0.12,0.08,0.09,0.11,0.1,0.11,0.14,0.09,0.09,0.13,0.1,0.09,0.08,0.1,0.12,0.11,0.12,0.04,0.14,0.07,0.12,0.09,0.09,0.09,0.08,0.11,0.13,0.11,0,10.77,-1.17,4100,527.78,2600,4.87,4.23,2.89,5.82,5.07,5.82,13},2},
{{0.09,0.13,0.06,0.11,0.1,0.12,0.09,0.13,0.11,0.09,0.11,0.12,0.1,0.09,0.1,0.11,0.12,0.05,0.13,0.07,0.12,0.11,0.12,0.08,0.09,0.07,0.1,0.13,0.11,0.09,0,10.81,-1.07,2000,481.58,2000,4.72,4.16,2.71,5.71,5.07,5.71,12.88},2},
{{0.07,0.1,0.1,0.09,0.15,0.11,0.1,0.09,0.08,0.14,0.1,0.08,0.11,0.12,0.08,0.13,0.09,0.08,0.12,0.06,0.11,0.11,0.09,0.08,0.11,0.12,0.1,0.1,0.09,0.12,0,10.88,-1.01,4125,420.45,3625,4.79,4.12,2.78,5.79,5.09,5.79,13.04},2},
{{0.07,0.11,0.15,0.11,0.08,0.08,0.07,0.11,0.12,0.12,0.11,0.12,0.07,0.08,0.13,0.09,0.09,0.14,0.11,0.04,0.1,0.11,0.11,0.06,0.11,0.1,0.1,0.1,0.13,0.1,0,10.78,-0.93,1775,491.18,2350,4.96,4.21,2.6,5.89,5.15,5.89,12.94},2},
{{0.11,0.09,0.12,0.11,0.07,0.13,0.04,0.1,0.11,0.14,0.13,0.05,0.1,0.1,0.14,0.08,0.13,0.08,0.09,0.08,0.06,0.11,0.12,0.1,0.1,0.14,0.12,0.13,0.09,0.06,0,10.9,-1.03,2333.33,476.32,2000,5.11,4.24,2.04,6.04,5.3,6.04,13},2},
{{0.1,0.13,0.13,0.1,0.07,0.09,0.11,0.06,0.11,0.13,0.13,0.07,0.07,0.09,0.13,0.11,0.1,0.13,0.08,0.06,0.08,0.08,0.13,0.09,0.13,0.12,0.13,0.08,0.11,0.09,0,11.08,-0.98,2000,547.22,2975,5.1,4.17,2.31,5.96,5.27,5.96,13.26},2},
{{0.12,0.09,0.14,0.07,0.1,0.09,0.1,0.1,0.1,0.11,0.12,0.07,0.09,0.08,0.11,0.12,0.11,0.13,0.08,0.09,0.09,0.11,0.1,0.13,0.11,0.1,0.11,0.09,0.1,0.08,0,11,-1.13,3975,538.89,1675,5.02,4.14,2.33,5.96,5.19,5.96,13.19},2},
{{0.08,0.12,0.15,0.08,0.07,0.11,0.07,0.09,0.14,0.11,0.12,0.09,0.1,0.1,0.09,0.07,0.13,0.11,0.09,0.07,0.07,0.13,0.13,0.13,0.08,0.12,0.07,0.08,0.1,0.11,0,10.83,-1.04,1000,485,1216.67,5.13,4.34,2.49,6.06,5.28,6.06,13.09},2},
{{0.09,0.1,0.13,0.12,0.09,0.09,0.09,0.09,0.13,0.1,0.12,0.08,0.11,0.11,0.08,0.11,0.08,0.09,0.13,0.07,0.1,0.06,0.08,0.15,0.12,0.09,0.11,0.16,0.05,0.1,0,10.79,-0.94,2033.33,538.24,3575,5.04,4.39,2.38,6.08,5.32,6.08,13},2},
{{0.08,0.1,0.1,0.17,0.09,0.09,0.08,0.12,0.08,0.1,0.13,0.1,0.1,0.06,0.11,0.13,0.08,0.09,0.13,0.06,0.09,0.12,0.07,0.1,0.11,0.07,0.09,0.16,0.12,0.09,0,10.76,-0.96,2033.33,593.75,3075,4.87,4.49,2.44,5.92,5.45,5.92,12.83},2},
{{0.06,0.09,0.14,0.12,0.13,0.08,0.08,0.11,0.09,0.13,0.15,0.03,0.13,0.13,0.07,0.1,0.09,0.14,0.09,0.07,0.1,0.1,0.11,0.12,0.12,0.09,0.06,0.14,0.09,0.1,0,10.76,-1.21,1666.67,525,3000,4.81,4.26,2.63,5.8,5.19,5.8,12.93},2},
{{0.09,0.09,0.13,0.1,0.07,0.14,0.07,0.11,0.13,0.11,0.13,0.1,0.11,0.11,0.09,0.06,0.11,0.07,0.14,0.04,0.1,0.12,0.11,0.09,0.1,0.08,0.09,0.1,0.15,0.09,0,10.71,-1.03,2550,434.09,1750,4.94,4.5,2.59,5.99,5.44,5.99,12.89},2},
{{0.1,0.06,0.12,0.13,0.13,0.1,0.09,0.06,0.1,0.13,0.15,0.07,0.1,0.08,0.1,0.07,0.11,0.16,0.08,0.06,0.09,0.06,0.08,0.09,0.12,0.12,0.15,0.14,0.09,0.09,0,10.84,-0.78,2525,552.94,1875,4.79,4.51,2.38,5.65,5.46,5.65,13},2},
{{0.08,0.09,0.11,0.14,0.12,0.09,0.09,0.09,0.11,0.09,0.13,0.09,0.07,0.09,0.1,0.12,0.09,0.13,0.1,0.07,0.08,0.06,0.11,0.12,0.09,0.15,0.09,0.11,0.12,0.09,0,10.83,-0.86,2683.33,522.22,4050,4.65,4.25,2.32,5.53,5.23,5.53,12.77},2},
{{0.11,0.08,0.09,0.14,0.12,0.08,0.09,0.09,0.12,0.1,0.12,0.09,0.07,0.12,0.1,0.09,0.11,0.13,0.09,0.04,0.09,0.08,0.08,0.08,0.16,0.14,0.11,0.11,0.08,0.09,0,10.69,-1.05,3575,571.88,1683.33,4.9,4.16,2.23,5.85,5.13,5.85,12.79},2},
{{0.1,0.08,0.1,0.14,0.12,0.08,0.09,0.09,0.14,0.09,0.11,0.09,0.1,0.06,0.13,0.12,0.09,0.09,0.11,0.06,0.07,0.09,0.09,0.1,0.11,0.13,0.16,0.08,0.13,0.08,0,10.9,-0.82,2037.5,511.11,1525,4.84,4.2,2.16,5.76,5.26,5.76,12.87},2},
{{0.11,0.09,0.11,0.11,0.11,0.07,0.09,0.12,0.11,0.1,0.1,0.11,0.12,0.09,0.1,0.1,0.1,0.1,0.08,0.07,0.07,0.09,0.1,0.11,0.14,0.11,0.1,0.09,0.14,0.07,0,10.68,-0.94,4600,575,3575,5.01,4.29,2.21,5.91,5.24,5.91,12.79},2},
{{0.12,0.09,0.08,0.1,0.11,0.11,0.08,0.14,0.1,0.09,0.11,0.12,0.07,0.12,0.08,0.12,0.09,0.07,0.13,0.07,0.1,0.1,0.09,0.09,0.09,0.11,0.17,0.08,0.11,0.09,0,10.74,-0.92,4100,561.76,4100,4.92,4.31,2.37,5.9,5.21,5.9,12.83},2},
{{0.09,0.14,0.08,0.08,0.12,0.11,0.08,0.11,0.07,0.13,0.11,0.08,0.09,0.12,0.1,0.09,0.11,0.11,0.12,0.05,0.09,0.08,0.11,0.13,0.09,0.13,0.12,0.1,0.06,0.11,0,10.95,-0.93,2400,502.63,2900,4.95,4.1,2.46,6.01,4.99,6.01,13.04},2},
{{0.08,0.11,0.09,0.08,0.16,0.08,0.13,0.1,0.1,0.09,0.06,0.09,0.1,0.13,0.15,0.14,0.09,0.1,0.06,0.05,0.07,0.08,0.12,0.1,0.14,0.15,0.11,0.12,0.05,0.08,0,10.79,-1.02,1033.33,553.33,2650,4.48,3.4,2.03,5.41,4.35,5.41,12.44},2},
{{0,0,0,0,0.01,0.01,0.01,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0,0,0,0.16,-0.03,1033.33,553.33,2650,0.02,0.16,0.03,1.99,10.61,1.99,0.17},2},
{{0.07,0.09,0.1,0.1,0.08,0.07,0.15,0.15,0.09,0.1,0.06,0.16,0.15,0.1,0.04,0.09,0.07,0.09,0.1,0.07,0.03,0.12,0.09,0.1,0.07,0.13,0.09,0.18,0.13,0.07,0,9.59,0.6,2950,452.38,725,8.9,7.51,3.61,10.88,8.49,10.88,16.05},0},
{{0.06,0.15,0.11,0.08,0.1,0.08,0.18,0.1,0.07,0.09,0.06,0.09,0.1,0.13,0.11,0.14,0.1,0.12,0.07,0.03,0.07,0.1,0.07,0.13,0.06,0.11,0.14,0.17,0.11,0.06,0,10.32,0.09,1775,394,2333.33,8.88,6.35,3.74,10.7,7.66,10.7,16.02},0},
{{0.14,0.08,0.1,0.08,0.08,0.11,0.13,0.09,0.11,0.1,0.1,0.1,0.13,0.09,0.09,0.1,0.1,0.08,0.12,0.02,0.11,0.08,0.07,0.13,0.07,0.1,0.16,0.08,0.12,0.1,0,9.67,-0.16,2725,433.33,2050,9.58,7.29,4.31,11.44,8.49,11.44,16.43},0},
{{0.11,0.15,0.11,0.08,0.08,0.09,0.08,0.1,0.1,0.11,0.09,0.09,0.07,0.08,0.1,0.1,0.06,0.14,0.15,0.06,0.11,0.12,0.12,0.13,0.07,0.06,0.05,0.06,0.17,0.14,0,11.03,-0.1,725,335.19,1016.67,10.44,7.11,4.92,12.18,8.5,12.18,18.16},0},
{{0.1,0.09,0.14,0.08,0.13,0.07,0.08,0.08,0.15,0.07,0.12,0.11,0.12,0.08,0.05,0.1,0.11,0.17,0.08,0.01,0.1,0.11,0.13,0.08,0.08,0.07,0.09,0.14,0.11,0.12,0,9.3,0.01,1328.57,495.83,1816.67,10.17,7.41,4.59,11.76,8.33,11.76,16.66},0},
{{0.08,0.11,0.07,0.11,0.14,0.12,0.07,0.1,0.13,0.07,0.11,0.12,0.14,0.1,0.07,0.07,0.09,0.11,0.14,0.02,0.1,0.14,0.08,0.08,0.09,0.1,0.09,0.13,0.09,0.13,0,9.09,-0.23,983.33,318.33,2525,9.38,7.57,4.53,11,8.64,11,16.23},0},
{{0.08,0.14,0.1,0.09,0.07,0.09,0.08,0.09,0.1,0.14,0.08,0.08,0.12,0.11,0.09,0.08,0.13,0.12,0.12,0.04,0.09,0.1,0.07,0.08,0.08,0.14,0.09,0.12,0.12,0.12,0,10.38,0.43,981.25,482.5,1175,10.94,6.79,4.31,12.57,8.06,12.57,17.94},0},
{{0.09,0.1,0.13,0.09,0.1,0.1,0.09,0.1,0.09,0.12,0.08,0.11,0.13,0.11,0.08,0.08,0.14,0.13,0.07,0.03,0.11,0.09,0.12,0.07,0.13,0.09,0.1,0.07,0.17,0.06,0,9.87,-0.25,1085.71,567.65,1500,10.05,6.92,4.16,11.7,8.08,11.7,16.69},0},
{{0.06,0.14,0.12,0.09,0.07,0.1,0.11,0.09,0.11,0.12,0.1,0.06,0.12,0.13,0.11,0.13,0.15,0.05,0.08,0.04,0.1,0.1,0.08,0.1,0.07,0.12,0.11,0.14,0.14,0.08,0,9.45,-0.16,1157.14,402.17,2225,9.81,6.74,4.19,11.47,8.2,11.47,16.46},0},
{{0.13,0.09,0.05,0.08,0.17,0.1,0.1,0.1,0.11,0.08,0.13,0.07,0.07,0.09,0.13,0.08,0.1,0.14,0.13,0.03,0.17,0.08,0.12,0.14,0.06,0.06,0.1,0.1,0.1,0.09,0,10.09,-0.99,1285.71,402.17,2475,9.49,7.19,4.87,11.28,8.62,11.28,17.05},0},
{{0.08,0.16,0.07,0.1,0.12,0.13,0.09,0.11,0.08,0.06,0.11,0.11,0.08,0.05,0.17,0.11,0.11,0.11,0.1,0.02,0.08,0.11,0.08,0.09,0.16,0.14,0.11,0.11,0.09,0.06,0,9.82,-0.37,2112.5,389.58,4225,9.54,6.91,3.67,11.29,8.23,11.29,16.32},0},
{{0.09,0.06,0.12,0.13,0.11,0.11,0.11,0.1,0.13,0.05,0.13,0.08,0.13,0.09,0.09,0.15,0.11,0.07,0.08,0.03,0.08,0.13,0.11,0.1,0.13,0.12,0.07,0.11,0.07,0.11,0,8.86,-0.37,1680,459.52,4500,8.77,7.16,3.91,10.53,8.4,10.53,15.32},0},
{{0.12,0.08,0.06,0.13,0.1,0.14,0.1,0.09,0.11,0.1,0.14,0.12,0.05,0.11,0.16,0.09,0.1,0.08,0.05,0.03,0.15,0.06,0.05,0.07,0.16,0.17,0.09,0.1,0.09,0.09,0,8.36,-0.2,2200,370.83,1950,9.34,7.62,4.2,11.03,9.15,11.03,15.95},0},
{{0.07,0.07,0.1,0.12,0.12,0.09,0.08,0.11,0.09,0.16,0.09,0.13,0.06,0.16,0.12,0.12,0.07,0.12,0.07,0.03,0.09,0.12,0.09,0.09,0.11,0.11,0.08,0.11,0.05,0.18,0,9.07,0.58,938.89,452.38,2000,9.99,6.87,4.88,11.68,8.46,11.68,17},0},
{{0.08,0.08,0.12,0.11,0.12,0.11,0.1,0.11,0.11,0.08,0.09,0.16,0.08,0.12,0.12,0.14,0.09,0.06,0.06,0.04,0.11,0.13,0.1,0.07,0.07,0.12,0.13,0.08,0.13,0.09,0,9,-0.3,4125,587.5,3750,9.22,6.8,4.42,10.9,8.09,10.9,15.56},0},
{{0.11,0.09,0.13,0.07,0.11,0.1,0.11,0.1,0.11,0.09,0.1,0.08,0.13,0.1,0.1,0.13,0.07,0.1,0.12,0.02,0.11,0.07,0.15,0.08,0.11,0.1,0.1,0.1,0.08,0.12,0,9.59,-0.15,992.86,502.63,2733.33,9.79,6.98,4.3,11.58,8.16,11.58,16.46},0},
{{0.13,0.06,0.09,0.14,0.11,0.08,0.12,0.09,0.13,0.07,0.12,0.1,0.07,0.13,0.1,0.09,0.11,0.1,0.1,0.04,0.07,0.13,0.13,0.09,0.14,0.1,0.08,0.05,0.12,0.11,0,9.54,-0.1,1358.33,492.11,2350,9.44,7.13,4.15,11.22,8.32,11.22,16.28},0},
{{0.08,0.11,0.09,0.11,0.08,0.09,0.11,0.18,0.09,0.08,0.15,0.14,0.09,0.07,0.09,0.09,0.08,0.11,0.12,0.03,0.09,0.08,0.14,0.1,0.13,0.07,0.09,0.13,0.09,0.11,0,8.87,-0.2,1290,425,1862.5,9.07,7.7,4.4,10.95,8.73,10.95,15.85},0},
{{0.11,0.13,0.09,0.09,0.1,0.13,0.1,0.12,0.1,0.06,0.1,0.12,0.11,0.09,0.12,0.1,0.07,0.13,0.1,0.02,0.09,0.09,0.12,0.11,0.11,0.07,0.14,0.07,0.11,0.11,0,9.46,0.17,1216.67,378.26,2575,9.3,6.99,4.43,11.2,8.16,11.2,16.13},0},
{{0.14,0.12,0.04,0.13,0.1,0.08,0.15,0.09,0.1,0.08,0.11,0.12,0.1,0.1,0.12,0.13,0.05,0.05,0.1,0.05,0.09,0.11,0.1,0.12,0.11,0.1,0.09,0.11,0.1,0.1,0,9.4,-0.18,1880,359.62,1180,9.6,7.16,4.14,11.57,8.35,11.57,16.22},0},
{{0.15,0.05,0.17,0.09,0.08,0.14,0.08,0.08,0.12,0.07,0.1,0.11,0.12,0.06,0.15,0.06,0.13,0.08,0.09,0.02,0.12,0.12,0.06,0.1,0.11,0.12,0.12,0.04,0.08,0.14,0,9.99,-0.09,2300,438.1,1425,9.93,6.78,4.92,11.59,7.92,11.59,16.97},0},
{{0.15,0.09,0.1,0.11,0.11,0.1,0.09,0.08,0.1,0.07,0.11,0.09,0.08,0.07,0.08,0.11,0.1,0.12,0.11,0.05,0.11,0.12,0.12,0.1,0.13,0.09,0.11,0.07,0.09,0.09,0,10.71,-0.85,1850,465,3275,10.33,7.13,4.2,12.04,8.32,12.04,17.5},0},
{{0.1,0.11,0.14,0.1,0.1,0.1,0.1,0.09,0.08,0.11,0.09,0.11,0.08,0.13,0.08,0.09,0.12,0.09,0.11,0.05,0.15,0.05,0.13,0.13,0.08,0.11,0.11,0.07,0.07,0.12,0,10.33,-0.71,1600,436.36,3216.67,10.12,6.96,4.69,11.79,8.14,11.79,17.13},0},
{{0.11,0.1,0.08,0.12,0.12,0.1,0.09,0.1,0.09,0.09,0.07,0.1,0.1,0.09,0.11,0.07,0.12,0.17,0.11,0.04,0.12,0.08,0.09,0.14,0.11,0.07,0.11,0.1,0.1,0.11,0,10.66,-0.31,1021.43,420.45,4625,9.77,6.59,4.27,11.56,7.74,11.56,16.87},0},
{{0.11,0.12,0.12,0.11,0.07,0.06,0.11,0.08,0.08,0.14,0.09,0.05,0.12,0.14,0.05,0.07,0.18,0.08,0.15,0.06,0.08,0.14,0.08,0.1,0.12,0.13,0.03,0.13,0.1,0.12,0,10.83,-0.06,1425,489.47,3550,10.73,6.56,4.24,12.43,7.63,12.43,17.61},0},
{{0.09,0.1,0.08,0.11,0.13,0.13,0.08,0.11,0.1,0.09,0.12,0.08,0.08,0.11,0.11,0.1,0.15,0.1,0.08,0.03,0.11,0.08,0.13,0.12,0.11,0.08,0.11,0.12,0.09,0.08,0,9.57,-0.52,1183.33,376.92,3150,9.51,6.85,4.32,11.11,8.2,11.11,16.31},0},
{{0.08,0.06,0.11,0.12,0.05,0.09,0.1,0.07,0.08,0.04,0.06,0.09,0.09,0.09,0.11,0.1,0.07,0.03,0.08,0.03,0.1,0.08,0.09,0.08,0.1,0.09,0.08,0.07,0.05,0.05,0,7.16,-0.96,1037.5,373.68,1525,7.1,5.25,3.03,11.1,7.87,11.1,11.86},0},
{{0.04,0.08,0.1,0.07,0.1,0.16,0.18,0.15,0.07,0.08,0.04,0.07,0.17,0.16,0.13,0.12,0.1,0.07,0.11,0.04,0.09,0.09,0.1,0.11,0.11,0.1,0.08,0.1,0.14,0.11,0,10.63,-0.27,1083.33,616.67,2200,3.58,3.16,2.19,4.66,3.91,4.66,11.94},2},
{{0.08,0.1,0.07,0.1,0.12,0.12,0.09,0.12,0.12,0.09,0.04,0.13,0.14,0.12,0.08,0.16,0.11,0.1,0.07,0.08,0.07,0.16,0.1,0.12,0.09,0.1,0.12,0.06,0.1,0.11,0,10.75,-0.44,2675,534.38,2125,4.02,3.37,2.28,5.05,4.12,5.05,12.24},2},
{{0.11,0.12,0.07,0.09,0.11,0.08,0.1,0.06,0.09,0.19,0.16,0.07,0.07,0.08,0.11,0.09,0.09,0.12,0.09,0.11,0.1,0.12,0.11,0.1,0.08,0.09,0.1,0.09,0.11,0.12,0,11,-0.33,2733.33,502.63,1933.33,4.69,4.21,2.58,5.6,5.05,5.6,12.87},2},
{{0.12,0.12,0.11,0.08,0.09,0.1,0.1,0.06,0.14,0.11,0.12,0.11,0.04,0.13,0.08,0.12,0.13,0.08,0.1,0.08,0.12,0.11,0.08,0.1,0.1,0.08,0.09,0.11,0.12,0.12,0,10.88,-0.62,1025,511.11,4250,4.55,3.94,2.6,5.52,4.81,5.52,12.71},2},
{{0.12,0.14,0.1,0.13,0.07,0.06,0.06,0.07,0.12,0.15,0.17,0.05,0.07,0.09,0.11,0.13,0.11,0.1,0.08,0.08,0.11,0.11,0.07,0.11,0.11,0.08,0.13,0.13,0.07,0.11,0,10.86,-0.6,2066.67,538.24,3550,4.85,4.06,2.37,5.68,5.03,5.68,12.8},2},
{{0.12,0.1,0.11,0.13,0.07,0.09,0.1,0.1,0.07,0.14,0.15,0.08,0.1,0.06,0.13,0.07,0.11,0.12,0.11,0.09,0.12,0.11,0.09,0.11,0.09,0.1,0.08,0.07,0.11,0.15,0,10.92,-0.57,2600,540.63,1075,4.57,4.16,2.5,5.61,4.98,5.61,12.78},2},
{{0.09,0.09,0.12,0.12,0.1,0.08,0.08,0.11,0.12,0.11,0.12,0.12,0.08,0.1,0.08,0.08,0.09,0.13,0.11,0.08,0.13,0.07,0.1,0.11,0.09,0.08,0.1,0.11,0.13,0.11,0,10.9,-0.52,2750,664.29,3025,4.38,4.22,2.52,5.27,4.97,5.27,12.63},2},
{{0.08,0.1,0.12,0.14,0.06,0.08,0.09,0.12,0.1,0.12,0.11,0.08,0.09,0.08,0.1,0.11,0.15,0.09,0.1,0.09,0.09,0.09,0.15,0.13,0.1,0.09,0.1,0.09,0.09,0.1,0,11.07,-0.5,1033.33,482.35,1725,4.43,3.73,2.22,5.31,4.62,5.31,12.67},2},
{{0.06,0.15,0.11,0.1,0.12,0.08,0.09,0.09,0.11,0.13,0.08,0.13,0.13,0.06,0.11,0.07,0.12,0.1,0.13,0.07,0.12,0.12,0.13,0.09,0.06,0.12,0.06,0.12,0.09,0.12,0,11.06,-0.52,2100,593.33,3800,4.31,3.94,2.51,5.21,4.66,5.21,12.61},2},
{{0.08,0.09,0.11,0.11,0.11,0.11,0.13,0.09,0.12,0.07,0.12,0.09,0.09,0.12,0.12,0.09,0.11,0.08,0.1,0.06,0.12,0.09,0.12,0.11,0.09,0.11,0.07,0.11,0.11,0.1,0,10.73,-0.48,3100,623.33,2725,3.87,3.77,2.39,4.73,4.61,4.73,12.14},2},
{{0.08,0.14,0.13,0.09,0.1,0.07,0.1,0.09,0.09,0.13,0.13,0.08,0.08,0.11,0.09,0.1,0.13,0.08,0.11,0.08,0.1,0.1,0.13,0.1,0.07,0.09,0.09,0.1,0.12,0.12,0,10.81,-0.5,2650,514.71,4550,4.53,3.99,2.38,5.46,4.89,5.46,12.6},2},
{{0.14,0.09,0.12,0.09,0.09,0.09,0.08,0.11,0.1,0.12,0.15,0.09,0.07,0.07,0.1,0.11,0.09,0.12,0.09,0.09,0.11,0.07,0.15,0.13,0.09,0.09,0.07,0.09,0.1,0.11,0,10.85,-0.53,3150,500,1350,4.62,4.15,2.33,5.59,5.04,5.59,12.68},2},
{{0.15,0.1,0.12,0.07,0.05,0.12,0.1,0.16,0.08,0.08,0.13,0.07,0.12,0.08,0.09,0.09,0.08,0.13,0.12,0.07,0.1,0.15,0.09,0.08,0.12,0.11,0.08,0.09,0.06,0.14,0,10.91,-0.62,2066.67,541.18,1825,4.65,4.1,2.33,5.67,4.89,5.67,12.76},2},
{{0.13,0.1,0.1,0.1,0.06,0.11,0.07,0.09,0.13,0.13,0.13,0.07,0.09,0.1,0.09,0.07,0.05,0.16,0.16,0.05,0.11,0.09,0.15,0.08,0.07,0.09,0.14,0.11,0.08,0.1,0,11.33,-0.64,3925,587.5,2975,4.77,4.35,2.41,5.66,5.11,5.66,13.22},2},
{{0.12,0.09,0.11,0.11,0.13,0.07,0.09,0.06,0.13,0.11,0.13,0.08,0.11,0.08,0.11,0.06,0.1,0.11,0.11,0.09,0.13,0.05,0.09,0.08,0.1,0.13,0.1,0.15,0.09,0.1,0,10.89,-0.5,3575,516.67,3600,4.37,4.27,2.45,5.15,5.07,5.15,12.67},2},
{{0.16,0.12,0.08,0.1,0.08,0.08,0.09,0.07,0.08,0.17,0.13,0.08,0.07,0.13,0.08,0.08,0.1,0.1,0.14,0.05,0.13,0.11,0.08,0.09,0.08,0.09,0.08,0.12,0.14,0.11,0,10.98,-0.6,2650,527.78,2433.33,4.88,4.17,2.63,5.72,5.02,5.72,12.96},2},
{{0.12,0.09,0.13,0.09,0.12,0.09,0.07,0.09,0.11,0.12,0.11,0.12,0.09,0.11,0.09,0.1,0.09,0.11,0.11,0.08,0.11,0.11,0.09,0.09,0.07,0.1,0.09,0.15,0.09,0.12,0,10.81,-0.35,2766.67,606.25,1460,4.64,3.96,2.36,5.67,4.74,5.67,12.58},2},
{{0.12,0.09,0.1,0.1,0.09,0.09,0.12,0.1,0.1,0.11,0.09,0.13,0.09,0.11,0.09,0.09,0.09,0.11,0.12,0.09,0.09,0.1,0.1,0.12,0.11,0.13,0.14,0.06,0.08,0.09,0,10.89,-0.6,1100,517.65,1725,4.49,3.99,2.06,5.47,4.74,5.47,12.55},2},
{{0.13,0.12,0.08,0.09,0.11,0.09,0.06,0.12,0.12,0.1,0.14,0.08,0.09,0.09,0.08,0.07,0.09,0.19,0.08,0.08,0.11,0.08,0.08,0.07,0.14,0.13,0.12,0.1,0.09,0.1,0,10.99,-0.52,4125,507.89,2925,4.53,4.12,2.18,5.33,4.92,5.33,12.7},2},
{{0.09,0.09,0.14,0.09,0.13,0.09,0.08,0.08,0.13,0.1,0.09,0.11,0.1,0.1,0.11,0.07,0.07,0.14,0.12,0.07,0.09,0.1,0.07,0.09,0.11,0.09,0.1,0.13,0.13,0.12,0,11.1,-0.28,2750,476.32,2000,4.22,4.06,2.29,5.04,4.8,5.04,12.61},2},
{{0.09,0.11,0.09,0.13,0.11,0.11,0.1,0.08,0.09,0.12,0.08,0.09,0.17,0.09,0.11,0.08,0.1,0.08,0.13,0.07,0.11,0.1,0.06,0.11,0.08,0.13,0.12,0.11,0.11,0.11,0,10.95,-0.45,3200,536.11,4125,4.1,3.96,2.35,4.99,4.76,4.99,12.46},2},
{{0.07,0.09,0.11,0.11,0.14,0.12,0.13,0.08,0.11,0.07,0.07,0.1,0.12,0.12,0.12,0.11,0.1,0.1,0.1,0.05,0.11,0.08,0.11,0.09,0.08,0.13,0.08,0.14,0.12,0.08,0,10.76,-0.48,1816.67,543.75,1725,3.69,3.6,2.22,4.55,4.44,4.55,12.07},2},
{{0.09,0.11,0.08,0.11,0.12,0.12,0.09,0.12,0.09,0.1,0.15,0.08,0.07,0.08,0.13,0.1,0.14,0.08,0.07,0.1,0.1,0.08,0.1,0.12,0.11,0.11,0.09,0.12,0.15,0.05,0,10.83,-0.57,4325,487.5,1375,4.03,3.95,2.15,4.87,4.88,4.87,12.32},2},
{{0.1,0.1,0.07,0.1,0.13,0.1,0.08,0.12,0.12,0.09,0.08,0.1,0.12,0.12,0.09,0.15,0.1,0.07,0.11,0.06,0.1,0.14,0.07,0.08,0.08,0.07,0.13,0.14,0.09,0.12,0,10.73,-0.38,2725,621.43,1700,4.03,3.63,2.39,4.83,4.56,4.83,12.3},2},
{{0.1,0.09,0.11,0.09,0.11,0.11,0.16,0.1,0.08,0.08,0.07,0.12,0.12,0.09,0.13,0.12,0.09,0.07,0.12,0.07,0.05,0.12,0.11,0.12,0.14,0.14,0.13,0.08,0.07,0.07,0,10.8,-0.43,1025,606.67,525,3.99,3.61,1.72,4.99,4.41,4.99,12.1},2},
{{0.15,0.07,0.09,0.07,0.13,0.08,0.12,0.13,0.1,0.08,0.06,0.11,0.11,0.11,0.14,0.11,0.11,0.09,0.08,0.08,0.1,0.12,0.1,0.07,0.07,0.08,0.1,0.15,0.14,0.1,0,11.01,-0.36,3225,505.88,2100,4.28,3.6,2.33,5.21,4.44,5.21,12.56},2},
{{0.11,0.1,0.12,0.08,0.11,0.08,0.08,0.12,0.14,0.07,0.06,0.13,0.11,0.13,0.06,0.08,0.14,0.11,0.1,0.06,0.1,0.09,0.05,0.13,0.08,0.07,0.1,0.14,0.13,0.13,0,11.02,-0.27,2175,477.5,4400,4.32,3.75,2.37,5.14,4.49,5.14,12.53},2},
{{0.06,0.08,0.13,0.11,0.13,0.14,0.09,0.13,0.09,0.06,0.06,0.14,0.13,0.09,0.09,0.12,0.13,0.08,0.1,0.04,0.07,0.12,0.09,0.09,0.1,0.18,0.13,0.06,0.12,0.07,0,10.64,-0.49,1816.67,584.38,1900,3.56,3.58,1.85,4.54,4.32,4.54,11.79},2},
{{0.09,0.13,0.1,0.1,0.09,0.11,0.14,0.12,0.09,0.06,0.07,0.16,0.09,0.09,0.12,0.15,0.07,0.09,0.11,0.04,0.05,0.11,0.08,0.11,0.15,0.19,0.12,0.07,0.08,0.07,0,10.6,-0.52,1500,590,1221.43,4,3.52,1.64,5.07,4.32,5.07,11.91},2},
{{0.06,0.1,0.11,0.1,0.09,0.15,0.17,0.09,0.08,0.06,0.02,0.13,0.16,0.09,0.12,0.15,0.11,0.08,0.06,0.08,0.01,0.1,0.12,0.19,0.18,0.14,0.1,0.08,0.07,0.04,0,10.79,-0.53,1100,537.5,3175,3.66,3.24,1.34,4.81,4.06,4.81,11.91},2},
{{0.08,0.07,0.09,0.12,0.08,0.17,0.14,0.15,0.07,0.06,0.06,0.06,0.16,0.13,0.16,0.14,0.09,0.09,0.09,0.05,0.16,0.11,0.12,0.1,0.1,0.11,0.07,0.08,0.08,0.09,0,10.66,-1.16,1125,759.09,1783.33,3.53,2.99,2.56,4.52,3.82,4.52,12.09},2},
{{0,0,0,0,0.01,0.04,0.02,0,0,0,0.03,0.03,0.01,0.01,0,0,0,0,0,0,0.07,0,0,0,0,0,0,0,0,0,0,0.32,-0.62,1125,250,1783.33,0.05,0.3,0.58,1.12,4.83,1.12,0.7},2},
{{0.21,0.17,0.11,0.1,0.12,0.11,0.08,0.07,0.03,0.02,0.11,0.12,0.08,0.08,0.05,0.12,0.07,0.17,0.12,0.1,0.13,0.15,0.09,0.1,0.04,0.09,0.15,0.08,0.07,0.13,0,10.11,-1.65,1075,845.45,1816.67,3.58,4.21,3.05,4.23,5.2,4.23,12.15},2},
{{0.12,0.14,0.13,0.08,0.1,0.1,0.12,0.12,0.06,0.05,0.11,0.1,0.1,0.09,0.09,0.07,0.09,0.15,0.1,0.12,0.11,0.14,0.11,0.11,0.07,0.09,0.1,0.12,0.09,0.09,0,10.07,-1.66,1887.5,745.83,2533.33,3.9,4.07,2.92,4.82,5.07,4.82,12.17},2},
{{0.12,0.09,0.12,0.13,0.09,0.09,0.09,0.09,0.11,0.09,0.12,0.1,0.08,0.09,0.08,0.07,0.16,0.11,0.09,0.13,0.13,0.1,0.12,0.12,0.06,0.08,0.12,0.07,0.1,0.12,0,10.12,-1.53,3650,630,3625,4.1,4.14,2.94,5.14,5.2,5.14,12.34},2},
{{0.08,0.11,0.13,0.11,0.11,0.11,0.09,0.1,0.08,0.09,0.11,0.07,0.12,0.1,0.07,0.12,0.1,0.08,0.13,0.12,0.12,0.1,0.12,0.09,0.09,0.1,0.09,0.08,0.12,0.11,0,10.3,-1.48,1450,621.43,3250,4.02,3.94,3.01,5.25,4.95,5.25,12.39},2},
{{0.11,0.11,0.08,0.12,0.1,0.13,0.07,0.11,0.11,0.09,0.09,0.11,0.12,0.07,0.08,0.12,0.1,0.13,0.1,0.09,0.11,0.12,0.09,0.14,0.1,0.1,0.1,0.08,0.11,0.08,0,10.01,-1.69,4250,804.55,2133.33,4.09,3.94,2.74,5.07,4.91,5.07,12.13},2},
{{0.11,0.08,0.13,0.11,0.09,0.12,0.09,0.11,0.11,0.09,0.11,0.12,0.08,0.1,0.1,0.06,0.12,0.15,0.1,0.09,0.1,0.12,0.13,0.1,0.08,0.08,0.09,0.14,0.09,0.11,0,9.92,-1.54,3750,780,2675,4.18,4.02,2.84,5.29,4.93,5.29,12.1},2},
{{0.1,0.09,0.13,0.09,0.11,0.09,0.12,0.11,0.12,0.07,0.11,0.1,0.11,0.09,0.1,0.09,0.11,0.1,0.12,0.09,0.13,0.1,0.12,0.1,0.04,0.1,0.12,0.09,0.11,0.1,0,9.96,-1.55,1887.5,592.31,2150,4.28,3.9,3,5.44,4.86,5.44,12.18},2},
{{0.08,0.1,0.08,0.13,0.14,0.09,0.1,0.09,0.08,0.13,0.12,0.08,0.12,0.07,0.11,0.09,0.1,0.13,0.14,0.08,0.1,0.08,0.13,0.09,0.11,0.11,0.1,0.12,0.09,0.09,0,10.05,-1.44,4400,845,2200,4.17,3.94,2.74,5.33,4.9,5.33,12.19},2},
{{0.08,0.06,0.12,0.13,0.12,0.12,0.1,0.06,0.13,0.11,0.09,0.12,0.07,0.07,0.14,0.12,0.12,0.1,0.11,0.08,0.08,0.11,0.12,0.09,0.09,0.14,0.12,0.06,0.12,0.1,0,10.08,-1.29,2533.33,1081.25,2162.5,4.13,3.61,2.78,5.23,4.63,5.23,12.14},2},
{{0.08,0.1,0.12,0.11,0.11,0.11,0.1,0.09,0.1,0.11,0.11,0.08,0.11,0.09,0.1,0.13,0.11,0.11,0.08,0.11,0.09,0.13,0.09,0.11,0.15,0.06,0.13,0.07,0.11,0.08,0,10.07,-1.56,1100,646.67,2100,4.15,3.82,2.79,5.32,4.89,5.32,12.21},2},
{{0.12,0.08,0.1,0.09,0.11,0.08,0.1,0.1,0.12,0.13,0.1,0.11,0.12,0.1,0.08,0.13,0.08,0.1,0.08,0.12,0.1,0.14,0.1,0.12,0.05,0.09,0.11,0.09,0.12,0.09,0,9.84,-1.4,1100,800,1090,4.61,3.96,3.04,5.65,4.94,5.65,12.28},2},
{{0.07,0.11,0.14,0.11,0.09,0.07,0.13,0.09,0.1,0.1,0.1,0.06,0.17,0.12,0.06,0.1,0.09,0.11,0.1,0.11,0.12,0.12,0.08,0.13,0.04,0.09,0.1,0.12,0.12,0.11,0,10.01,-1.46,1091.67,532.35,1750,4.35,3.91,3.04,5.65,4.84,5.65,12.24},2},
{{0.08,0.09,0.1,0.1,0.14,0.11,0.11,0.08,0.12,0.09,0.09,0.11,0.12,0.09,0.08,0.1,0.09,0.15,0.11,0.09,0.07,0.13,0.09,0.12,0.1,0.11,0.11,0.09,0.11,0.09,0,10.13,-1.43,2225,827.27,4400,4.17,3.81,2.83,5.32,4.71,5.32,12.23},2},
{{0.07,0.11,0.09,0.11,0.15,0.11,0.11,0.07,0.1,0.1,0.09,0.12,0.09,0.07,0.09,0.09,0.13,0.13,0.14,0.07,0.08,0.09,0.1,0.08,0.14,0.12,0.14,0.09,0.07,0.1,0,10.15,-1.37,2216.67,1027.78,3850,4,3.79,2.63,5.18,4.68,5.18,12.12},2},
{{0.08,0.1,0.11,0.12,0.08,0.08,0.12,0.11,0.12,0.09,0.09,0.09,0.12,0.1,0.11,0.12,0.09,0.11,0.1,0.09,0.1,0.06,0.1,0.11,0.13,0.11,0.13,0.11,0.09,0.09,0,9.94,-1.28,4325,692.31,2700,4.34,3.72,2.7,5.44,4.74,5.44,12.09},2},
{{0.1,0.1,0.12,0.1,0.09,0.1,0.07,0.13,0.12,0.11,0.1,0.11,0.08,0.13,0.12,0.09,0.1,0.1,0.08,0.13,0.12,0.09,0.1,0.1,0.09,0.1,0.13,0.09,0.12,0.09,0,10,-1.45,1612.5,570.59,1720,4.42,3.89,2.89,5.59,4.97,5.59,12.3},2},
{{0.1,0.14,0.07,0.08,0.09,0.09,0.12,0.1,0.1,0.13,0.09,0.08,0.13,0.11,0.12,0.12,0.07,0.11,0.07,0.12,0.08,0.12,0.1,0.12,0.11,0.09,0.11,0.09,0.12,0.07,0,10.06,-1.38,1625,885,4400,4.52,3.72,2.86,5.51,4.72,5.51,12.31},2},
{{0.08,0.12,0.1,0.1,0.12,0.09,0.06,0.14,0.12,0.09,0.09,0.14,0.09,0.06,0.13,0.12,0.11,0.07,0.12,0.09,0.09,0.11,0.08,0.12,0.11,0.13,0.1,0.11,0.06,0.12,0,10,-1.33,1100,676.92,2175,4.38,3.8,2.75,5.55,4.81,5.55,12.15},2},
{{0.09,0.1,0.11,0.1,0.08,0.11,0.08,0.11,0.12,0.11,0.09,0.12,0.07,0.13,0.1,0.14,0.1,0.09,0.1,0.08,0.08,0.11,0.1,0.1,0.09,0.13,0.1,0.1,0.09,0.12,0,9.93,-1.2,3250,650,1087.5,4.45,3.62,2.93,5.57,4.66,5.57,12.18},2},
{{0.09,0.11,0.1,0.12,0.09,0.07,0.1,0.12,0.1,0.13,0.1,0.07,0.12,0.13,0.1,0.13,0.09,0.09,0.09,0.11,0.11,0.09,0.1,0.1,0.11,0.09,0.12,0.1,0.09,0.12,0,10.01,-1.28,1937.5,635.71,2233.33,4.51,3.64,2.97,5.69,4.68,5.69,12.25},2},
{{0.08,0.14,0.05,0.09,0.14,0.13,0.08,0.11,0.08,0.12,0.09,0.11,0.09,0.11,0.09,0.13,0.11,0.11,0.1,0.08,0.1,0.11,0.09,0.11,0.14,0.07,0.08,0.1,0.12,0.1,0,9.91,-1.4,3300,875,2175,4.21,3.76,2.84,5.14,4.74,5.14,12.05},2},
{{0.11,0.08,0.13,0.1,0.05,0.06,0.14,0.12,0.1,0.13,0.11,0.1,0.11,0.14,0.07,0.09,0.09,0.11,0.09,0.12,0.12,0.09,0.07,0.13,0.09,0.09,0.08,0.13,0.1,0.12,0,9.94,-1.32,1540,544.12,3300,4.74,3.9,3.07,6,4.82,6,12.31},2},
{{0.13,0.09,0.09,0.09,0.07,0.06,0.09,0.17,0.11,0.13,0.11,0.11,0.1,0.11,0.1,0.11,0.09,0.08,0.1,0.12,0.13,0.12,0.1,0.06,0.06,0.11,0.1,0.12,0.11,0.11,0,9.92,-1.36,2483.33,635.71,1750,4.94,3.94,3.25,5.93,4.94,5.93,12.58},2},
{{0.12,0.08,0.09,0.09,0.11,0.12,0.1,0.12,0.11,0.09,0.1,0.1,0.09,0.13,0.1,0.08,0.12,0.09,0.12,0.08,0.1,0.08,0.13,0.08,0.11,0.14,0.06,0.11,0.12,0.1,0,9.94,-1.37,2533.33,950,1650,4.37,3.87,2.79,5.41,4.89,5.41,12.16},2},
{{0.1,0.11,0.1,0.06,0.1,0.13,0.09,0.11,0.1,0.12,0.11,0.14,0.07,0.12,0.1,0.11,0.11,0.07,0.09,0.11,0.09,0.09,0.13,0.09,0.11,0.1,0.09,0.11,0.08,0.12,0,9.76,-1.34,1912.5,675,3275,4.51,3.97,2.79,5.52,4.98,5.52,11.99},2},
{{0.11,0.09,0.1,0.1,0.13,0.1,0.1,0.1,0.1,0.1,0.1,0.11,0.06,0.12,0.13,0.08,0.14,0.07,0.12,0.09,0.08,0.07,0.09,0.11,0.14,0.12,0.09,0.09,0.08,0.14,0,9.92,-1.22,1400,754.17,1625,4.38,3.74,2.75,5.67,4.75,5.67,12.03},2},
{{0.11,0.11,0.1,0.08,0.08,0.1,0.12,0.1,0.1,0.11,0.1,0.11,0.11,0.12,0.11,0.07,0.09,0.1,0.11,0.1,0.08,0.08,0.12,0.12,0.1,0.13,0.06,0.14,0.1,0.1,0,9.86,-1.31,1866.67,715.38,2233.33,4.52,3.84,2.67,5.54,4.76,5.54,11.99},2},
{{0.1,0.09,0.11,0.07,0.11,0.14,0.08,0.07,0.11,0.14,0.09,0.11,0.11,0.11,0.09,0.12,0.11,0.1,0.09,0.09,0.07,0.11,0.1,0.12,0.14,0.07,0.09,0.14,0.08,0.1,0,9.88,-1.3,4350,905,1450,4.33,3.67,2.75,5.2,4.62,5.2,12},2},
{{0.1,0.09,0.09,0.1,0.1,0.12,0.09,0.1,0.11,0.12,0.08,0.13,0.11,0.1,0.1,0.15,0.06,0.11,0.07,0.11,0.1,0.08,0.08,0.1,0.17,0.08,0.1,0.1,0.11,0.11,0,9.88,-1.26,2225,818.18,2183.33,4.41,3.76,2.78,5.51,4.78,5.51,12.09},2},
{{0.11,0.1,0.08,0.06,0.14,0.12,0.1,0.1,0.1,0.12,0.11,0.1,0.11,0.09,0.12,0.08,0.1,0.09,0.11,0.12,0.1,0.09,0.06,0.11,0.12,0.09,0.11,0.11,0.13,0.09,0,9.91,-1.25,1433.33,639.29,3775,4.53,4.01,2.75,5.57,5.02,5.57,12.15},2},
{{0.12,0.09,0.09,0.09,0.09,0.09,0.15,0.12,0.1,0.08,0.12,0.08,0.1,0.13,0.14,0.1,0.08,0.08,0.1,0.1,0.11,0.06,0.09,0.1,0.13,0.11,0.11,0.1,0.12,0.09,0,9.83,-1.4,1450,669.23,1450,4.5,3.78,2.77,5.66,4.85,5.66,12.03},2},
{{0.1,0.11,0.11,0.07,0.11,0.12,0.11,0.09,0.09,0.12,0.13,0.09,0.11,0.11,0.11,0.1,0.1,0.07,0.12,0.1,0.1,0.09,0.09,0.1,0.09,0.14,0.06,0.13,0.1,0.12,0,9.78,-1.24,1280,573.53,2400,4.46,3.96,2.96,5.58,4.97,5.58,12.03},2},
{{0.01,0.05,0.04,0.07,0.05,0.08,0.06,0.03,0.03,0.04,0.04,0.04,0.02,0.09,0.07,0.04,0.04,0.04,0.04,0.04,0.03,0.03,0.05,0.03,0.05,0.06,0.07,0.05,0.05,0.05,0,4.31,-0.46,1100,733.33,1125,1.67,2.65,1.12,5.06,7.1,5.06,5.08},2},
{{0.06,0.07,0.09,0.13,0.12,0.2,0.12,0.09,0.1,0.04,0.14,0.08,0.09,0.13,0.16,0.12,0.1,0.07,0.05,0,0.07,0.06,0.12,0.16,0.12,0.16,0.09,0.1,0.1,0.04,0,7.35,-0.89,1225,523.53,1675,6.02,7.13,3.89,7.62,8.79,7.62,13.16},0},
{{0.13,0.09,0.08,0.11,0.15,0.06,0.07,0.12,0.12,0.1,0.17,0.06,0.11,0.08,0.17,0.04,0.08,0.08,0.14,0,0.08,0.06,0.13,0.12,0.09,0.08,0.16,0.07,0.11,0.13,0,7.64,-0.19,1357.14,497.22,4475,8.19,8.12,4.51,9.51,9.77,9.51,15.24},0},
{{0.1,0.11,0.13,0.1,0.08,0.08,0.12,0.09,0.08,0.12,0.12,0.12,0.11,0.09,0.05,0.09,0.09,0.14,0.07,0,0.09,0.11,0.13,0.1,0.07,0.1,0.12,0.13,0.07,0.1,0,8.67,-0.92,650,522.22,3250,8.34,8.51,4.92,9.6,9.96,9.6,16.19},0},
{{0.15,0.06,0.15,0.1,0.11,0.1,0.13,0.06,0.1,0.07,0.12,0.07,0.11,0.09,0.1,0.11,0.1,0.09,0.07,0,0.09,0.1,0.12,0.12,0.1,0.11,0.13,0.05,0.09,0.1,0,9.19,-1.13,4575,508.33,1900,8.02,7.78,4.64,9.39,9.08,9.39,15.64},0},
{{0.11,0.1,0.11,0.04,0.16,0.08,0.11,0.08,0.1,0.13,0.09,0.05,0.16,0.09,0.13,0.08,0.06,0.15,0.07,0,0.05,0.13,0.07,0.15,0.07,0.14,0.14,0.12,0.05,0.09,0,9.51,-0.58,2300,610,2866.67,8.12,7.24,4.19,9.59,8.31,9.59,15.31},0},
{{0.08,0.14,0.11,0.1,0.07,0.12,0.11,0.11,0.1,0.09,0.13,0.12,0.1,0.11,0.07,0.09,0.11,0.08,0.12,0,0.11,0.06,0.08,0.15,0.09,0.12,0.12,0.12,0.06,0.12,0,8.22,-0.58,2550,395.83,2400,7.89,8.08,4.75,9.23,9.47,9.23,15.42},0},
{{0.13,0.1,0.07,0.08,0.13,0.1,0.1,0.06,0.11,0.15,0.13,0.05,0.14,0.15,0.1,0.05,0.1,0.09,0.09,0,0.11,0.09,0.1,0.11,0.08,0.1,0.11,0.07,0.16,0.09,0,7.92,-0.6,3825,513.89,4150,8.52,7.77,4.86,10.05,9.29,10.05,15.55},0},
{{0.06,0.1,0.16,0.09,0.13,0.1,0.07,0.1,0.13,0.09,0.1,0.06,0.15,0.13,0.08,0.08,0.1,0.11,0.1,0,0.1,0.07,0.12,0.09,0.11,0.16,0.1,0.08,0.1,0.08,0,8.91,-0.53,1225,435,3875,8.05,7.52,4.62,9.31,8.86,9.31,15.3},0},
{{0.11,0.12,0.05,0.09,0.12,0.1,0.1,0.13,0.1,0.09,0.13,0.13,0.11,0.1,0.08,0.06,0.11,0.1,0.06,0,0.07,0.15,0.13,0.06,0.09,0.1,0.09,0.11,0.11,0.11,0,8.23,-0.6,4150,573.53,2350,7.75,7.97,4.87,9.12,9.39,9.12,15.16},0},
{{0.14,0.1,0.08,0.08,0.09,0.11,0.12,0.08,0.11,0.12,0.11,0.06,0.11,0.09,0.07,0.18,0.13,0.09,0.06,0,0.08,0.15,0.16,0.08,0.11,0.07,0.09,0.1,0.06,0.13,0,9.18,-1.2,1150,520,3750,8.37,7.1,4.82,9.79,8.54,9.79,15.91},0},
{{0.1,0.11,0.06,0.14,0.13,0.08,0.07,0.11,0.1,0.12,0.1,0.05,0.12,0.12,0.09,0.12,0.11,0.1,0.11,0,0.13,0.08,0.09,0.13,0.1,0.09,0.15,0.05,0.08,0.11,0,9.32,-1.03,2250,494.74,1050,8.34,7.51,4.85,9.69,9.22,9.69,16.24},0},
{{0.16,0.09,0.04,0.12,0.06,0.12,0.12,0.11,0.1,0.12,0.08,0.1,0.12,0.11,0.11,0.07,0.08,0.13,0.11,0,0.08,0.11,0.11,0.06,0.15,0.13,0.09,0.15,0.07,0.08,0,9.28,-0.92,2050,492.11,2150,8.26,7.56,4.4,9.8,8.64,9.8,15.51},0},
{{0.15,0.09,0.12,0.09,0.06,0.11,0.1,0.16,0.08,0.06,0.1,0.12,0.08,0.09,0.07,0.12,0.13,0.11,0.08,0,0.15,0.12,0.07,0.14,0.08,0.07,0.09,0.1,0.11,0.11,0,9.24,-1.35,1562.5,506.25,2312.5,8.21,7.9,5.11,9.57,9.34,9.57,16.22},0},
{{0.1,0.13,0.08,0.11,0.08,0.1,0.1,0.13,0.11,0.08,0.09,0.11,0.06,0.08,0.12,0.13,0.09,0.12,0.1,0,0.13,0.1,0.09,0.11,0.12,0.09,0.09,0.07,0.09,0.13,0,9.92,-1.22,2650,513.16,2975,8.26,7.02,4.99,9.6,8.25,9.6,16.06},0},
{{0.12,0.07,0.08,0.11,0.12,0.07,0.13,0.11,0.11,0.11,0.1,0.16,0.09,0.11,0.07,0.12,0.12,0.07,0.04,0,0.16,0.07,0.08,0.05,0.1,0.11,0.13,0.12,0.13,0.08,0,7.81,-0.95,2675,435.71,883.33,8.08,7.63,5.1,9.54,9.02,9.54,15.17},0},
{{0.06,0.11,0.14,0.14,0.09,0.1,0.09,0.1,0.08,0.12,0.11,0.1,0.06,0.11,0.13,0.09,0.1,0.12,0.05,0,0.12,0.1,0.1,0.11,0.1,0.13,0.06,0.14,0.08,0.1,0,8.78,-1.05,1787.5,546.88,2325,8.13,7.81,4.63,9.52,9.5,9.52,15.92},0},
{{0.13,0.06,0.16,0.07,0.06,0.13,0.11,0.03,0.12,0.15,0.07,0.14,0.06,0.15,0.07,0.04,0.11,0.14,0.09,0,0.06,0.14,0.06,0.12,0.13,0.12,0.15,0.13,0.07,0.04,0,9.83,-1.1,1375,634.62,2533.33,9.03,7.67,3.89,10.55,8.57,10.55,16.24},0},
{{0.07,0.13,0.09,0.11,0.13,0.11,0.07,0.09,0.13,0.08,0.07,0.17,0.07,0.07,0.12,0.12,0.09,0.08,0.1,0,0.16,0.1,0.04,0.08,0.13,0.06,0.13,0.12,0.12,0.1,0,9.07,-0.75,2137.5,513.16,937.5,8.08,7.48,5.17,9.53,8.76,9.53,15.77},0},
{{0.05,0.1,0.16,0.07,0.1,0.1,0.12,0.14,0.1,0.09,0.06,0.15,0.09,0.09,0.13,0.1,0.11,0.12,0.06,0,0.09,0.1,0.13,0.07,0.08,0.1,0.08,0.11,0.13,0.13,0,8.83,-0.2,2016.67,541.67,1933.33,7.86,7.16,4.93,9.19,8.47,9.19,15.21},0},
{{0.09,0.08,0.15,0.1,0.09,0.1,0.1,0.11,0.1,0.11,0.11,0.12,0.08,0.1,0.06,0.17,0.13,0.06,0.12,0,0.1,0.1,0.08,0.13,0.12,0.09,0.04,0.16,0.1,0.11,0,8.28,-0.68,4450,550,4450,8.23,7.66,4.75,9.66,9.29,9.66,15.6},0},
{{0.07,0.16,0.12,0.08,0.08,0.11,0.11,0.1,0.08,0.12,0.06,0.14,0.07,0.1,0.09,0.14,0.07,0.09,0.1,0,0.07,0.16,0.1,0.11,0.09,0.09,0.05,0.11,0.14,0.1,0,10.03,-0.86,3250,630,4300,8.32,7.25,4.77,9.72,8.37,9.72,16.07},0},
{{0.09,0.12,0.1,0.11,0.13,0.07,0.09,0.15,0.1,0.07,0.1,0.12,0.15,0.08,0.1,0.09,0.1,0.11,0.05,0,0.08,0.13,0.11,0.09,0.07,0.11,0.12,0.08,0.09,0.14,0,8.22,-0.47,2183.33,505.56,962.5,7.99,7.82,4.87,9.3,9.44,9.3,15.24},0},
{{0.1,0.1,0.07,0.11,0.1,0.1,0.1,0.11,0.09,0.11,0.09,0.11,0.1,0.11,0.11,0.1,0.13,0.09,0.09,0,0.08,0.1,0.1,0.08,0.15,0.1,0.03,0.12,0.17,0.11,0,8.36,-0.27,4550,538.24,2683.33,8.28,7.48,4.74,9.83,9.12,9.83,15.56},0},
{{0.12,0.09,0.11,0.13,0.1,0.11,0.1,0.08,0.07,0.11,0.09,0.08,0.12,0.06,0.16,0.1,0.09,0.11,0.08,0,0.11,0.1,0.1,0.08,0.11,0.1,0.07,0.11,0.13,0.11,0,9.36,-0.68,2000,522.22,1250,8.35,7.29,4.97,9.9,8.76,9.9,15.92},0},
{{0.12,0.1,0.09,0.09,0.09,0.09,0.11,0.11,0.14,0.08,0.12,0.07,0.11,0.09,0.11,0.09,0.11,0.12,0.06,0,0.13,0.1,0.09,0.06,0.13,0.07,0.05,0.14,0.13,0.13,0,9.05,-0.39,2633.33,511.11,1850,8.23,7.86,5.13,9.58,9.51,9.58,16.11},0},
{{0.05,0.07,0.07,0.13,0.08,0.08,0.07,0.06,0.07,0.1,0.07,0.09,0.03,0.09,0.08,0.13,0.08,0.08,0.05,0,0.07,0.05,0.14,0.06,0.11,0.03,0.07,0.07,0.09,0.07,0,6.75,-0.53,1925,468.18,2275,6.01,5.48,3.79,9.61,8.78,9.61,11.62},0},
{{0.05,0.09,0.11,0.12,0.13,0.08,0.14,0.11,0.11,0.07,0.12,0.09,0.15,0.05,0.11,0.09,0.07,0.1,0.15,0.09,0.09,0.08,0.12,0.12,0.13,0.08,0.1,0.07,0.13,0.08,0,9.42,-1.12,2150,965,4300,3.57,4.82,3.26,4.4,5.7,4.4,11.75},2},
{{0.06,0.08,0.15,0.1,0.13,0.09,0.09,0.12,0.1,0.11,0.1,0.09,0.13,0.09,0.07,0.12,0.06,0.12,0.16,0.07,0.1,0.09,0.09,0.12,0.1,0.13,0.07,0.12,0.1,0.11,0,9.59,-1.05,3700,962.5,2075,3.94,4.69,3.16,4.78,5.56,4.78,12.01},2},
{{0.07,0.08,0.15,0.11,0.1,0.1,0.08,0.12,0.09,0.11,0.11,0.07,0.14,0.08,0.1,0.09,0.05,0.09,0.21,0.09,0.1,0.1,0.14,0.11,0.08,0.09,0.07,0.12,0.12,0.1,0,9.74,-1.07,2833.33,837.5,1600,4.02,4.83,3.47,4.88,5.7,4.88,12.28},2},
{{0.05,0.17,0.09,0.1,0.11,0.09,0.11,0.11,0.08,0.11,0.07,0.12,0.16,0.09,0.06,0.09,0.07,0.11,0.18,0.08,0.09,0.08,0.1,0.15,0.12,0.07,0.08,0.11,0.12,0.09,0,9.71,-1.28,2625,1300,1575,3.96,4.62,3.13,4.73,5.35,4.73,11.99},2},
{{0.09,0.08,0.12,0.09,0.14,0.1,0.08,0.14,0.09,0.08,0.08,0.1,0.13,0.11,0.11,0.07,0.09,0.13,0.09,0.12,0.07,0.1,0.11,0.13,0.13,0.12,0.07,0.1,0.11,0.09,0,9.7,-1.15,3175,704.17,1587.5,3.98,4.63,3.12,4.95,5.55,4.95,12.06},2},
{{0.08,0.1,0.11,0.12,0.08,0.11,0.09,0.13,0.11,0.09,0.12,0.08,0.12,0.08,0.12,0.09,0.09,0.14,0.09,0.09,0.08,0.1,0.1,0.12,0.09,0.09,0.1,0.13,0.11,0.1,0,9.4,-1.14,1750,810,3175,4.04,4.64,3.09,4.94,5.62,4.94,11.85},2},
{{0.07,0.12,0.13,0.08,0.1,0.1,0.11,0.08,0.14,0.09,0.11,0.12,0.06,0.13,0.1,0.12,0.06,0.13,0.06,0.13,0.1,0.11,0.08,0.11,0.11,0.1,0.1,0.11,0.08,0.12,0,9.46,-1.16,3675,675,3125,4.17,4.81,3.18,5.19,5.85,5.19,12.04},2},
{{0.08,0.14,0.12,0.08,0.11,0.09,0.1,0.1,0.08,0.12,0.11,0.13,0.09,0.09,0.07,0.07,0.12,0.11,0.13,0.1,0.13,0.09,0.12,0.06,0.14,0.08,0.07,0.14,0.08,0.11,0,9.47,-1.26,2100,845,2112.5,4.2,5,3.29,5.1,5.85,5.1,12.17},2},
{{0.1,0.1,0.15,0.13,0.05,0.08,0.11,0.09,0.1,0.11,0.1,0.1,0.11,0.1,0.08,0.09,0.08,0.14,0.09,0.12,0.1,0.08,0.11,0.11,0.12,0.1,0.03,0.14,0.13,0.1,0,9.61,-1.18,2625,1057.14,1575,4.39,4.77,3.19,5.35,5.74,5.35,12.24},2},
{{0.1,0.11,0.12,0.08,0.08,0.1,0.17,0.07,0.1,0.1,0.09,0.11,0.1,0.12,0.08,0.11,0.08,0.09,0.14,0.1,0.09,0.07,0.1,0.13,0.12,0.11,0.12,0.11,0.09,0.09,0,9.67,-1.02,1266.67,1300,2533.33,4,4.6,3.13,4.96,5.47,4.96,12.1},2},
{{0.12,0.08,0.1,0.1,0.09,0.11,0.1,0.13,0.1,0.09,0.11,0.1,0.09,0.11,0.1,0.1,0.08,0.13,0.1,0.1,0.1,0.09,0.13,0.08,0.1,0.12,0.08,0.11,0.12,0.1,0,9.64,-1.18,2675,833.33,2137.5,3.91,4.65,3.12,4.87,5.6,4.87,12.11},2},
{{0.12,0.11,0.1,0.06,0.14,0.08,0.12,0.07,0.09,0.14,0.15,0.09,0.09,0.08,0.11,0.11,0.11,0.08,0.1,0.1,0.14,0.08,0.12,0.15,0.04,0.1,0.08,0.11,0.1,0.12,0,9.15,-1.44,4250,708.33,3725,4.26,4.95,3.38,5.22,5.98,5.22,12.06},2},
{{0.08,0.13,0.09,0.09,0.1,0.12,0.16,0.08,0.09,0.09,0.08,0.12,0.08,0.11,0.13,0.1,0.16,0.06,0.06,0.12,0.09,0.08,0.08,0.16,0.13,0.11,0.09,0.08,0.1,0.1,0,9.61,-1.23,2650,657.69,1783.33,4,4.39,3,5,5.42,5,12},2},
{{0.1,0.09,0.12,0.11,0.09,0.12,0.08,0.09,0.12,0.1,0.11,0.1,0.11,0.09,0.1,0.11,0.09,0.11,0.1,0.1,0.09,0.12,0.1,0.1,0.12,0.1,0.12,0.06,0.13,0.1,0,9.51,-1.18,4150,935,4150,4.19,4.8,3.2,5.09,5.78,5.09,12.07},2},
{{0.11,0.09,0.09,0.08,0.07,0.16,0.13,0.07,0.1,0.12,0.1,0.11,0.1,0.11,0.11,0.11,0.12,0.08,0.08,0.12,0.1,0.11,0.12,0.07,0.1,0.1,0.11,0.13,0.07,0.12,0,9.59,-1.23,1050,634.62,1050,4.07,4.64,3.14,5.11,5.62,5.11,12.06},2},
{{0.1,0.12,0.1,0.08,0.07,0.13,0.11,0.11,0.11,0.09,0.12,0.09,0.12,0.1,0.08,0.13,0.13,0.08,0.09,0.1,0.1,0.11,0.14,0.09,0.1,0.08,0.14,0.09,0.09,0.09,0,9.24,-1.41,4200,730.77,4750,4.17,4.78,3.12,5.13,5.74,5.13,11.88},2},
{{0.12,0.08,0.1,0.09,0.13,0.1,0.09,0.13,0.09,0.1,0.09,0.1,0.08,0.13,0.1,0.09,0.09,0.13,0.09,0.12,0.09,0.11,0.12,0.08,0.07,0.12,0.14,0.1,0.11,0.09,0,9.67,-1.14,4225,733.33,2150,4.11,4.64,3.01,5.13,5.64,5.13,12.15},2},
{{0.11,0.1,0.06,0.16,0.1,0.12,0.07,0.08,0.12,0.11,0.1,0.11,0.12,0.09,0.11,0.09,0.12,0.08,0.1,0.11,0.11,0.16,0.08,0.08,0.08,0.13,0.1,0.09,0.11,0.09,0,9.38,-1.42,2833.33,772.73,2116.67,4.3,4.72,3.21,5.15,5.63,5.15,12.06},2},
{{0.14,0.1,0.1,0.09,0.1,0.12,0.06,0.1,0.12,0.09,0.09,0.1,0.11,0.1,0.08,0.1,0.11,0.13,0.09,0.11,0.14,0.07,0.11,0.09,0.09,0.11,0.12,0.09,0.12,0.08,0,9.75,-1.33,1400,779.17,1025,4.5,4.71,3.2,5.51,5.61,5.51,12.47},2},
{{0.12,0.1,0.09,0.12,0.11,0.08,0.08,0.11,0.11,0.11,0.1,0.13,0.11,0.11,0.08,0.09,0.1,0.1,0.1,0.11,0.1,0.11,0.08,0.1,0.09,0.13,0.12,0.09,0.11,0.11,0,9.29,-1.15,1550,961.11,3650,4.4,4.86,3.21,5.29,5.79,5.29,12.05},2},
{{0.13,0.08,0.09,0.11,0.09,0.11,0.07,0.09,0.11,0.12,0.09,0.11,0.1,0.13,0.07,0.12,0.1,0.08,0.1,0.12,0.11,0.1,0.09,0.1,0.1,0.1,0.12,0.09,0.09,0.12,0,9.7,-1.22,2125,726.92,1416.67,4.41,4.63,3.16,5.33,5.55,5.33,12.22},2},
{{0.13,0.08,0.12,0.09,0.1,0.07,0.11,0.09,0.13,0.1,0.1,0.11,0.08,0.12,0.1,0.1,0.11,0.11,0.09,0.1,0.13,0.1,0.09,0.11,0.08,0.05,0.1,0.13,0.09,0.13,0,9.47,-1.1,3175,800,1766.67,4.27,4.61,3.51,5.26,5.59,5.26,12.2},2},
{{0.12,0.09,0.08,0.11,0.11,0.1,0.09,0.12,0.1,0.11,0.1,0.09,0.1,0.1,0.1,0.13,0.09,0.13,0.07,0.11,0.1,0.09,0.08,0.09,0.1,0.12,0.16,0.1,0.07,0.11,0,9.69,-1,2625,818.18,2325,4.25,4.5,2.96,5.29,5.42,5.29,12.02},2},
{{0.12,0.09,0.14,0.07,0.11,0.09,0.12,0.09,0.09,0.1,0.08,0.11,0.1,0.09,0.14,0.09,0.12,0.1,0.09,0.1,0.1,0.11,0.11,0.1,0.09,0.13,0.09,0.11,0.1,0.09,0,9.6,-1.39,3700,850,3700,4.29,4.42,3.12,5.29,5.37,5.29,12.16},2},
{{0.12,0.07,0.1,0.11,0.11,0.08,0.13,0.08,0.13,0.1,0.1,0.09,0.07,0.11,0.16,0.11,0.1,0.09,0.08,0.12,0.11,0.11,0.11,0.1,0.08,0.07,0.12,0.12,0.1,0.11,0,9.56,-1.17,1050,915,2450,4.22,4.47,3.32,5.32,5.61,5.32,12.25},2},
{{0.11,0.1,0.09,0.08,0.12,0.12,0.09,0.1,0.1,0.11,0.1,0.09,0.08,0.13,0.13,0.11,0.1,0.11,0.07,0.1,0.09,0.11,0.09,0.1,0.15,0.11,0.09,0.08,0.13,0.08,0,9.5,-1.27,4250,920,1625,4.19,4.37,3.05,5.23,5.38,5.23,12.06},2},
{{0.12,0.07,0.1,0.13,0.1,0.09,0.1,0.09,0.12,0.11,0.11,0.1,0.07,0.09,0.14,0.13,0.11,0.08,0.11,0.09,0.12,0.12,0.1,0.07,0.12,0.08,0.1,0.1,0.11,0.11,0,9.51,-1.27,2116.67,791.67,3725,4.27,4.53,3.3,5.23,5.65,5.23,12.23},2},
{{0.1,0.1,0.08,0.12,0.13,0.1,0.07,0.12,0.1,0.11,0.09,0.1,0.08,0.11,0.12,0.13,0.13,0.09,0.1,0.06,0.1,0.08,0.09,0.12,0.1,0.11,0.13,0.09,0.08,0.13,0,9.6,-1.11,3725,1300,3725,4.21,4.38,3.28,5.03,5.38,5.03,12.12},2},
{{0.07,0.07,0.07,0.07,0.06,0.08,0.08,0.05,0.09,0.06,0.06,0.07,0.08,0.07,0.08,0.07,0.11,0.05,0.05,0.07,0.08,0.05,0.06,0.09,0.08,0.08,0.06,0.09,0.03,0.1,0,6.62,-0.85,1625,1008.33,1625,2.89,3.54,2.2,5.21,6.1,5.21,8.28},2},
{{0.11,0.09,0.06,0.08,0.16,0.12,0.1,0.12,0.07,0,0.15,0.05,0.18,0.1,0.11,0.07,0.11,0.09,0.05,0,0.09,0.1,0.11,0.07,0.08,0.12,0.09,0.09,0.15,0,0,7.6,-0.59,2100,643.33,3700,7.8,7.99,5.28,9.44,9.65,9.44,15.37},0},
{{0.14,0.11,0.06,0.07,0.1,0.08,0.1,0.14,0.09,0,0.13,0.11,0.15,0.07,0.09,0.13,0.07,0.09,0.08,0,0.08,0.12,0.07,0.11,0.09,0.1,0.06,0.17,0.1,0,0,7.81,-0.37,1091.67,766.67,1200,9.04,8,5.15,10.39,9.53,10.39,16.08},0},
{{0.14,0.08,0.05,0.07,0.12,0.14,0.13,0.08,0.08,0,0.1,0.07,0.15,0.1,0.13,0.1,0.12,0.11,0.07,0,0.08,0.14,0.11,0.11,0.11,0.09,0.08,0.09,0.09,0,0,8.62,-0.95,1662.5,502.63,3575,8.27,7.37,5.13,9.92,9.01,9.92,15.99},0},
{{0.12,0.1,0.1,0.07,0.15,0.08,0.09,0.09,0.13,0,0.09,0.09,0.12,0.07,0.11,0.12,0.11,0.09,0.07,0,0.12,0.08,0.13,0.09,0.12,0.06,0.1,0.08,0.13,0,0,9.32,-1.09,750,766.67,2050,8.73,7.48,5.26,10.15,8.99,10.15,16.45},0},
{{0.09,0.13,0.08,0.09,0.09,0.11,0.13,0.08,0.15,0,0.08,0.13,0.08,0.15,0.07,0.1,0.12,0.07,0.1,0,0.06,0.1,0.13,0.12,0.07,0.15,0.16,0.13,0.02,0,0,9.29,-0.83,2025,600,1475,8.41,7.47,4.69,9.78,8.83,9.78,15.81},0},
{{0.11,0.09,0.1,0.12,0.09,0.12,0.08,0.14,0.11,0,0.13,0.09,0.08,0.09,0.1,0.11,0.11,0.12,0.09,0,0.11,0.12,0.12,0.09,0.13,0.08,0.14,0.06,0.08,0,0,8.84,-1.74,1037.5,490,650,8.06,8.07,4.94,9.51,9.85,9.51,16.22},0},
{{0.12,0.08,0.17,0.1,0.07,0.11,0.11,0.06,0.13,0,0.11,0.11,0.1,0.08,0.09,0.13,0.08,0.08,0.08,0,0.1,0.1,0.14,0.11,0.1,0.13,0.05,0.12,0.12,0,0,9.08,-1.53,2675,505.88,4300,8.76,7.91,4.88,10.18,9.41,10.18,16.26},0},
{{0.1,0.08,0.09,0.16,0.1,0.1,0.12,0.13,0.09,0,0.1,0.17,0.04,0.11,0.08,0.12,0.1,0.13,0.04,0,0.13,0.06,0.08,0.11,0.12,0.13,0.16,0.07,0.06,0,0,8.86,-1.05,2137.5,610,2850,7.87,7.96,4.8,9.17,9.48,9.17,15.63},0},
{{0.1,0.11,0.1,0.07,0.09,0.15,0.07,0.12,0.07,0,0.08,0.11,0.05,0.16,0.1,0.13,0.14,0.07,0.04,0,0.1,0.11,0.11,0.1,0.1,0.06,0.12,0.11,0.09,0,0,9.03,-1,1266.67,497.37,2033.33,8.76,7.11,5.19,10.29,8.7,10.29,16.07},0},
{{0.13,0.12,0.08,0.07,0.13,0.09,0.12,0.09,0.1,0,0.11,0.09,0.11,0.11,0.12,0.07,0.14,0.1,0.08,0,0.12,0.12,0.09,0.12,0.07,0.1,0.08,0.13,0.09,0,0,8.61,-1.29,1200,513.89,4775,8.62,7.72,5.2,10.11,9.52,10.11,16.23},0},
{{0.11,0.1,0.11,0.14,0.09,0.13,0.07,0.05,0.09,0,0.1,0.09,0.05,0.19,0.12,0.07,0.09,0.11,0.06,0,0.12,0.13,0.14,0.1,0.07,0.08,0.08,0.12,0.06,0,0,8.7,-1.63,250,510.53,2400,8.89,7.93,5.44,10.5,9.56,10.5,16.48},0},
{{0.07,0.12,0.1,0.1,0.14,0.08,0.08,0.13,0.06,0,0.12,0.09,0.15,0.05,0.1,0.13,0.08,0.09,0.07,0,0.14,0.11,0.12,0.09,0.06,0.11,0.07,0.06,0.16,0,0,8.42,-1.47,2150,592.31,1825,8.84,8.14,5.43,10.24,9.72,10.24,16.58},0},
{{0.09,0.09,0.13,0.07,0.1,0.09,0.1,0.11,0.09,0,0.09,0.09,0.11,0.13,0.07,0.15,0.09,0.12,0.06,0,0.11,0.08,0.07,0.09,0.14,0.09,0.1,0.13,0.13,0,0,9.28,-0.73,3925,513.16,2025,8.95,7.52,5.01,10.31,8.91,10.31,16.41},0},
{{0.07,0.09,0.09,0.12,0.11,0.07,0.11,0.15,0.1,0,0.06,0.16,0.05,0.13,0.11,0.12,0.11,0.08,0.07,0,0.11,0.09,0.08,0.08,0.12,0.09,0.1,0.13,0.13,0,0,9.17,-0.72,1525,535.29,1580,8.53,7.26,5.16,9.9,8.79,9.9,16.05},0},
{{0.09,0.06,0.14,0.1,0.1,0.09,0.13,0.09,0.1,0,0.1,0.08,0.14,0.06,0.12,0.08,0.13,0.13,0.06,0,0.11,0.03,0.11,0.07,0.14,0.13,0.11,0.12,0.08,0,0,9.28,-0.42,4550,593.75,3325,8.56,7.48,4.9,9.95,8.86,9.95,16.2},0},
{{0.06,0.1,0.14,0.15,0.08,0.08,0.1,0.11,0.07,0,0.13,0.1,0.11,0.11,0.13,0.08,0.08,0.09,0.06,0,0.06,0.11,0.12,0.14,0.07,0.16,0.15,0.03,0.09,0,0,7.75,-0.99,1800,464.29,3900,8.52,8.16,4.7,9.79,10.22,9.79,15.82},0},
{{0.06,0.11,0.15,0.16,0.07,0.06,0.11,0.12,0.11,0,0.04,0.16,0.09,0.08,0.15,0.09,0.05,0.11,0.05,0,0.09,0.09,0.08,0.06,0.17,0.1,0.15,0.09,0.07,0,0,9.82,-0.72,1850,565.63,925,8.53,7.36,4.65,9.65,8.8,9.65,16.01},0},
{{0.07,0.14,0.09,0.12,0.13,0.08,0.11,0.09,0.14,0,0.11,0.1,0.11,0.11,0.09,0.11,0.1,0.11,0.04,0,0.08,0.08,0.13,0.13,0.07,0.13,0.12,0.07,0.11,0,0,8.65,-0.84,2700,523.53,1840,8.17,7.67,4.93,9.38,9.19,9.38,15.55},0},
{{0.15,0.09,0.13,0.13,0.07,0.08,0.09,0.05,0.08,0,0.08,0.08,0.09,0.09,0.1,0.11,0.12,0.11,0.06,0,0.11,0.11,0.07,0.12,0.11,0.13,0.08,0.14,0.08,0,0,10.38,-1.3,1525,565.63,1966.67,9.4,7.45,4.83,10.65,8.89,10.65,17.21},0},
{{0.13,0.11,0.1,0.08,0.1,0.07,0.12,0.13,0.09,0,0.09,0.12,0.13,0.08,0.1,0.08,0.06,0.13,0.08,0,0.07,0.16,0.07,0.11,0.09,0.09,0.14,0.05,0.16,0,0,9.06,-0.84,2650,616.67,1183.33,8.84,8,4.95,10.12,9.39,10.12,16.32},0},
{{0.1,0.14,0.08,0.11,0.09,0.1,0.07,0.15,0.09,0,0.11,0.08,0.1,0.11,0.09,0.1,0.11,0.1,0.06,0,0.1,0.11,0.12,0.1,0.08,0.11,0.07,0.13,0.12,0,0,9.61,-1.24,2100,494.44,2983.33,8.78,7.75,5.07,10.11,9.2,10.11,16.62},0},
{{0.1,0.11,0.09,0.06,0.09,0.11,0.15,0.13,0.12,0,0.13,0.1,0.09,0.08,0.07,0.09,0.14,0.11,0.05,0,0.11,0.05,0.13,0.09,0.11,0.07,0.09,0.12,0.14,0,0,8.95,-0.61,4400,457.89,2925,8.04,8.28,5.15,9.41,9.75,9.41,16.17},0},
{{0.1,0.12,0.12,0.12,0.09,0.1,0.1,0.04,0.12,0,0.14,0.08,0.07,0.14,0.08,0.09,0.09,0.12,0.08,0,0.12,0.11,0.09,0.1,0.12,0.12,0.03,0.09,0.15,0,0,8.91,-1.16,3725,671.43,1900,8.96,8.04,5.21,10.33,9.55,10.33,16.5},0},
{{0.09,0.11,0.11,0.09,0.06,0.17,0.09,0.08,0.13,0,0.12,0.1,0.11,0.11,0.08,0.08,0.08,0.1,0.09,0,0.15,0.11,0.08,0.07,0.1,0.06,0.12,0.06,0.14,0,0,9.19,-0.93,3150,500,2483.33,8.39,8.07,5.86,9.9,9.47,9.9,16.48},0},
{{0.11,0.1,0.07,0.12,0.13,0.11,0.12,0.1,0.11,0,0.07,0.13,0.07,0.11,0.15,0.11,0.11,0.11,0.06,0,0.07,0.13,0.07,0.14,0.18,0.07,0.08,0.11,0.07,0,0,9.27,-1.02,1912.5,523.53,1916.67,7.93,7.1,4.86,9.41,8.75,9.41,15.66},0},
{{0,0,0,0.02,0.03,0.01,0,0.01,0,0,0,0.01,0,0.01,0.01,0.02,0.01,0.01,0,0,0,0,0,0,0.01,0.03,0.01,0,0.01,0,0,0.47,0.02,1912.5,523.53,1916.67,0.2,0.45,0.09,4.56,10.5,4.56,0.56},0},
{{0.15,0.12,0.09,0.09,0.1,0.07,0.13,0.1,0.07,0.1,0.15,0.07,0.04,0.09,0.11,0.1,0.12,0.1,0.11,0.13,0.11,0.13,0.08,0.05,0.1,0.09,0.1,0.12,0.09,0.15,0,10.02,-0.44,4350,1430,1383.33,2.84,3.71,2.16,3.47,4.66,3.47,11.12},5},
{{0.1,0.13,0.1,0.12,0.09,0.09,0.1,0.14,0.09,0.06,0.15,0.1,0.13,0.06,0.09,0.08,0.1,0.09,0.1,0.12,0.12,0.09,0.13,0.11,0.09,0.1,0.12,0.1,0.08,0.09,0,9.37,-0.85,1625,1068.75,3775,2.69,3.93,1.7,3.44,4.76,3.44,10.35},5},
{{0.1,0.12,0.11,0.08,0.09,0.08,0.1,0.11,0.09,0.13,0.09,0.11,0.13,0.12,0.07,0.09,0.06,0.12,0.1,0.11,0.08,0.12,0.09,0.12,0.12,0.08,0.1,0.11,0.09,0.1,0,10.01,-0.44,1637.5,1085.71,2175,3.16,3.8,1.97,4.01,4.54,4.01,11},5},
{{0.07,0.08,0.09,0.13,0.08,0.11,0.1,0.09,0.12,0.16,0.07,0.1,0.1,0.11,0.1,0.12,0.13,0.1,0.12,0.07,0.06,0.09,0.08,0.16,0.1,0.11,0.1,0.07,0.12,0.11,0,9.91,-0.37,3325,3016.67,1516.67,3.25,3.05,1.82,3.97,3.85,3.97,10.95},5},
{{0.07,0.07,0.1,0.09,0.16,0.11,0.1,0.07,0.11,0.07,0.03,0.13,0.11,0.12,0.13,0.1,0.11,0.09,0.07,0.06,0.13,0.08,0.1,0.07,0.06,0.15,0.09,0.12,0.11,0.05,0,9.22,-0.84,2000,2133.33,2100,2.62,2.8,1.55,3.44,3.78,3.44,9.98},5},
{{0.11,0.08,0.09,0.09,0.12,0.12,0.08,0.11,0.1,0.1,0.05,0.13,0.11,0.13,0.11,0.09,0.09,0.1,0.1,0.1,0.13,0.08,0.09,0.06,0.09,0.09,0.09,0.12,0.14,0.13,0,8.68,-0.61,3825,670,3050,4.78,4.65,3.95,6.22,5.78,6.22,12.18},1},
{{0.09,0.12,0.1,0.09,0.09,0.12,0.11,0.11,0.12,0.08,0.12,0.12,0.09,0.08,0.08,0.15,0.12,0.1,0.07,0.08,0.08,0.14,0.11,0.1,0.1,0.13,0.13,0.1,0.05,0.09,0,7.95,-1.48,4225,931.25,3050,4.49,5.01,2.87,5.75,6.17,5.75,11.31},1},
{{0.08,0.08,0.1,0.1,0.07,0.04,0.1,0.04,0.08,0.1,0.09,0.05,0.08,0.07,0.06,0.07,0.07,0.09,0.11,0.08,0.07,0.07,0.06,0.14,0.08,0.08,0.06,0.07,0.08,0.08,0,6.76,-0.83,2175,661.11,2350,3.29,4.31,2.44,5.73,6.95,5.73,9.25},1},
{{0.1,0.11,0.08,0.12,0.11,0.09,0.1,0.09,0.09,0,0.16,0.1,0.09,0.08,0.11,0.08,0.07,0.13,0.07,0,0.14,0.13,0.09,0.07,0.08,0.13,0.11,0.1,0.06,0,0,9.19,-0.56,4350,1050,3166.67,4.04,4.01,2.09,5.05,4.77,5.05,10.9},5},
{{0.11,0.1,0.1,0.08,0.11,0.09,0.13,0.07,0.09,0,0.13,0.11,0.08,0.09,0.09,0.12,0.1,0.07,0.15,0,0.1,0.11,0.13,0.1,0.09,0.1,0.1,0.09,0.11,0,0,9.49,-0.56,2500,1307.14,1100,4.02,3.79,1.77,5.03,4.53,5.03,10.85},5},
{{0.12,0.1,0.1,0.11,0.12,0.08,0.07,0.08,0.13,0,0.11,0.1,0.08,0.09,0.11,0.1,0.14,0.1,0.09,0,0.09,0.1,0.13,0.11,0.07,0.11,0.1,0.15,0.08,0,0,9.46,-0.45,3800,2187.5,3800,3.84,3.56,1.71,4.78,4.37,4.78,10.78},5},
{{0.06,0.14,0.11,0.06,0.15,0.09,0.08,0.13,0.13,0,0.09,0.12,0.09,0.11,0.11,0.07,0.12,0.12,0.13,0,0.07,0.09,0.1,0.1,0.11,0.11,0.11,0.1,0.13,0,0,9.59,-0.23,3850,1540,3850,3.88,3.44,1.72,4.78,4.06,4.78,10.86},5},
{{0.11,0.11,0.12,0.08,0.08,0.12,0.11,0.1,0.11,0,0.07,0.13,0.15,0.1,0.11,0.11,0.08,0.08,0.1,0,0.1,0.08,0.06,0.1,0.1,0.17,0.09,0.09,0.09,0,0,9.25,0,666.67,1200,775,3.97,3.43,2.27,5.1,4.13,5.1,10.97},5},
{{0.11,0.1,0.13,0.12,0.08,0.09,0.1,0.12,0.1,0,0.11,0.12,0.09,0.1,0.07,0.08,0.09,0.1,0.11,0,0.12,0.12,0.12,0.1,0.1,0.05,0.09,0.1,0.13,0,0,9.77,-0.57,2133.33,1887.5,3125,3.78,3.95,1.95,4.7,4.61,4.7,11.04},5},
{{0.12,0.12,0.04,0.12,0.1,0.12,0.1,0.09,0.08,0,0.08,0.1,0.1,0.13,0.13,0.11,0.1,0.1,0.1,0,0.1,0.11,0.08,0.12,0.14,0.12,0.1,0.08,0.09,0,0,9.44,-0.61,2850,2850,1125,4.2,3.18,1.75,5.38,3.9,5.38,10.96},5},
{{0.11,0.07,0.09,0.11,0.08,0.15,0.11,0.13,0.08,0,0.1,0.09,0.12,0.11,0.09,0.09,0.14,0.1,0.09,0,0.08,0.07,0.08,0.09,0.1,0.15,0.11,0.15,0.09,0,0,9.57,-0.14,1866.67,2000,1900,4.16,3.52,1.82,5.17,4.24,5.17,11.01},5},
{{0.1,0.09,0.12,0.1,0.07,0.1,0.11,0.12,0.13,0,0.07,0.07,0.13,0.11,0.09,0.11,0.11,0.15,0.09,0,0.09,0.08,0.14,0.11,0.1,0.08,0.12,0.1,0.14,0,0,9.83,-0.52,1550,1260,1650,3.93,3.32,1.68,4.78,3.96,4.78,11.08},5},
{{0.01,0.02,0.05,0.04,0.06,0.02,0.01,0.03,0.03,0,0.02,0.02,0.01,0.04,0.04,0.06,0.03,0.03,0.01,0,0.05,0.01,0.05,0.04,0.03,0.01,0.03,0.01,0.02,0,0,2.41,-0.33,475,475,475,0.79,1.81,0.5,3.98,8,3.98,2.67},5},
{{0.09,0.13,0.1,0.11,0.13,0.11,0.12,0.11,0.07,0,0.08,0.07,0.13,0.12,0.11,0.08,0.13,0.1,0.08,0,0.07,0.08,0.13,0.11,0.1,0.12,0.13,0.12,0.09,0,0,9.3,0.13,1916.67,657.14,1250,2.89,4.43,2.51,3.69,5.45,3.69,10.84},1},
{{0.11,0.1,0.12,0.1,0.1,0.06,0.1,0.09,0.09,0,0.08,0.14,0.11,0.11,0.08,0.14,0.06,0.09,0.11,0,0.12,0.12,0.08,0.11,0.11,0.06,0.09,0.09,0.1,0,0,9.06,0.17,4200,700,2250,3.53,4.63,3.26,4.35,5.6,4.35,11.12},1},
{{0.08,0.07,0.08,0.11,0.1,0.11,0.1,0.1,0.16,0,0.16,0.08,0.1,0.06,0.1,0.09,0.11,0.11,0.12,0,0.1,0.11,0.08,0.11,0.12,0.11,0.08,0.11,0.11,0,0,8.93,0.03,1300,620,2466.67,3.38,5.09,2.99,4.27,6.13,4.27,11.14},1},
{{0.04,0.02,0.01,0.01,0.01,0.04,0.01,0.01,0.02,0,0.01,0.01,0,0.03,0.02,0.02,0.02,0.02,0.02,0,0.03,0.02,0.02,0.01,0,0.02,0.03,0.02,0.02,0,0,1.62,-0.13,500,450,375,0.49,1.38,0.52,4.13,10.32,4.13,1.88},1},
{{0.1,0.12,0.11,0.1,0.12,0.1,0.1,0.05,0.08,0,0.12,0.08,0.07,0.15,0.13,0.1,0.12,0.06,0.08,0,0.13,0.12,0.13,0.07,0.11,0.08,0.11,0.11,0.1,0,0,9.59,-0.75,4025,687.5,1975,3.57,3.58,1.88,4.15,4.47,4.15,10.78},5},
{{0.1,0.09,0.09,0.11,0.07,0.12,0.11,0.11,0.1,0,0.13,0.13,0.09,0.08,0.06,0.11,0.09,0.1,0.13,0,0.08,0.12,0.09,0.11,0.08,0.1,0.08,0.11,0.12,0,0,9.62,-0.3,3525,2850,2975,3.29,4.07,1.98,4,4.71,4,10.76},5},
{{0.07,0.09,0.12,0.12,0.12,0.11,0.1,0.1,0.1,0,0.1,0.11,0.1,0.09,0.1,0.12,0.09,0.09,0.12,0,0.1,0.08,0.09,0.11,0.15,0.1,0.1,0.1,0.09,0,0,9.71,-0.4,1000,2037.5,2550,3.21,3.58,1.93,3.83,4.24,3.83,10.78},5},
{{0.12,0.13,0.08,0.09,0.09,0.07,0.08,0.13,0.15,0,0.07,0.09,0.12,0.1,0.13,0.09,0.11,0.1,0.11,0,0.1,0.09,0.09,0.11,0.09,0.12,0.11,0.1,0.11,0,0,10.1,-0.29,325,1533.33,3025,3.47,3.52,2.13,4.37,4.24,4.37,11.33},5},
{{0.08,0.04,0.05,0.07,0.07,0.06,0.09,0.06,0.05,0,0.05,0.06,0.08,0.07,0.06,0.05,0.06,0.09,0.06,0,0.05,0.08,0.05,0.08,0.06,0.07,0.07,0.07,0.05,0,0,5.77,-0.36,2050,1675,1675,2.02,2.72,1.06,4.16,5.58,4.16,6.44},5},
{{0.16,0.1,0.09,0.07,0.03,0.07,0.1,0.1,0.11,0.16,0.16,0.15,0.1,0.08,0.07,0.05,0.05,0.04,0.15,0.15,0.14,0.11,0.09,0.08,0.08,0.09,0.05,0.13,0.08,0.15,0,9.43,-0.3,2066.67,740.91,1887.5,3.89,4.94,2.91,4.96,5.93,4.96,11.64},1},
{{0.1,0.1,0.1,0.08,0.12,0.07,0.13,0.12,0.12,0.09,0.07,0.11,0.16,0.11,0.07,0.09,0.1,0.11,0.1,0.1,0.11,0.12,0.08,0.11,0.09,0.09,0.11,0.1,0.18,0.03,0,9.43,-0.82,3325,1050,2583.33,2.79,3.42,2.01,3.66,4.43,3.66,10.51},1},
{{0.09,0.08,0.1,0.09,0.13,0.14,0.12,0.14,0.09,0.05,0.04,0.11,0.12,0.11,0.11,0.14,0.13,0.09,0.08,0.08,0.06,0.07,0.1,0.13,0.14,0.1,0.13,0.12,0.12,0.06,0,9.48,-0.52,2125,840,2825,2.36,2.89,1.72,3.01,3.99,3.01,10.28},1},
{{0.05,0.12,0.07,0.21,0.16,0.11,0.12,0.1,0.06,0.03,0.03,0.04,0.07,0.11,0.18,0.17,0.19,0.1,0.06,0.07,0.08,0.12,0.16,0.14,0.11,0.09,0.12,0.04,0.1,0.07,0,9.9,-0.83,1025,860,1525,2.25,2.02,1.86,2.79,3.1,2.79,10.66},1},
{{0.11,0.1,0.11,0.08,0.06,0.09,0.05,0.05,0.13,0.17,0.2,0.09,0.05,0.1,0.07,0.05,0.02,0.16,0.11,0.08,0.11,0.08,0.07,0.06,0.07,0.14,0.1,0.09,0.03,0.2,0,7.93,-0.03,1050,1021.43,850,3.37,4.39,2.53,4.35,5.76,4.35,10.1},1},
{{0.08,0.09,0.1,0.09,0.09,0.09,0.06,0.11,0.17,0.15,0.13,0.13,0.1,0.09,0.11,0.09,0.04,0.1,0.13,0.09,0.1,0.13,0.11,0.11,0.11,0.09,0.08,0.1,0.07,0.11,0,10.19,-0.08,3625,850,1312.5,4.06,3.55,2.95,4.98,4.31,4.98,12.14},1},
{{0.13,0.11,0.09,0.09,0.08,0.09,0.1,0.09,0.11,0.1,0.09,0.1,0.09,0.11,0.11,0.12,0.08,0.11,0.1,0.09,0.09,0.09,0.1,0.11,0.16,0.09,0.09,0.1,0.09,0.09,0,10.54,0.02,2650,712.5,2450,3.66,3.22,2.74,4.5,4.01,4.5,12.21},1},
{{0.08,0.1,0.15,0.1,0.11,0.12,0.13,0.08,0.06,0.09,0.12,0.08,0.12,0.11,0.09,0.09,0.12,0.08,0.12,0.08,0.11,0.08,0.11,0.11,0.08,0.09,0.09,0.13,0.11,0.12,0,10.39,0.3,1383.33,626.92,650,3.01,3.4,3.05,3.76,4.2,3.76,11.89},1},
{{0.14,0.09,0.09,0.09,0.13,0.1,0.12,0.09,0.08,0.09,0.1,0.1,0.08,0.09,0.1,0.12,0.13,0.11,0.08,0.12,0.14,0.1,0.07,0.07,0.1,0.13,0.09,0.1,0.12,0.1,0,10.62,0.15,4725,677.78,2025,3.31,3.16,3.2,4.07,3.96,4.07,12.28},1},
{{0.1,0.11,0.07,0.13,0.09,0.07,0.11,0.13,0.12,0.09,0.08,0.13,0.11,0.1,0.1,0.08,0.1,0.09,0.12,0.1,0.1,0.1,0.09,0.09,0.1,0.12,0.12,0.09,0.11,0.11,0,10.61,0.16,2450,712.5,3033.33,3.62,3.42,2.96,4.33,4.12,4.33,12.23},1},
{{0.07,0.09,0.09,0.1,0.1,0.12,0.09,0.09,0.06,0.09,0.07,0.08,0.09,0.11,0.08,0.11,0.13,0.1,0.05,0.09,0.06,0.09,0.11,0.08,0.09,0.07,0.12,0.09,0.11,0.07,0,9.22,0.38,3000,476.92,750,2.91,2.68,2.55,4.03,4,4.03,10.6},1},
{{0.05,0.06,0.09,0.06,0.05,0.13,0.11,0.14,0.16,0.17,0.21,0.11,0.08,0.09,0.09,0.08,0.13,0.09,0.06,0.09,0.12,0.13,0.05,0.11,0.1,0.08,0.07,0.04,0.09,0.23,0,9,0.69,2366.67,740,1283.33,4.45,3.23,3.51,5.22,4.02,5.22,11.45},5},
{{0.11,0.08,0.11,0.11,0.11,0.14,0.15,0.08,0.06,0.07,0.09,0.09,0.09,0.07,0.14,0.11,0.11,0.13,0.12,0.08,0.06,0.08,0.12,0.08,0.12,0.18,0.14,0.1,0.08,0.07,0,10.03,-0.1,2450,1850,2450,3.17,2.54,1.7,3.89,3.37,3.89,11.13},5},
{{0.09,0.11,0.09,0.09,0.15,0.09,0.07,0.08,0.14,0.12,0.11,0.12,0.11,0.1,0.12,0.06,0.06,0.09,0.1,0.15,0.13,0.11,0.08,0.09,0.11,0.09,0.08,0.12,0.13,0.08,0,9.94,-0.23,2616.67,925,1600,3.62,3.45,2.48,4.54,4.58,4.54,11.64},5},
{{0.16,0.08,0.1,0.12,0.1,0.09,0.07,0.12,0.11,0.09,0.07,0.1,0.12,0.11,0.05,0.13,0.1,0.1,0.12,0.11,0.09,0.07,0.09,0.11,0.13,0.1,0.12,0.13,0.1,0.09,0,10.09,0.09,3800,1200,2033.33,3.49,2.97,2.2,4.41,4.13,4.41,11.66},5},
{{0.13,0.11,0.09,0.13,0.09,0.08,0.13,0.08,0.08,0.1,0.09,0.11,0.1,0.09,0.09,0.11,0.07,0.12,0.13,0.11,0.13,0.12,0.12,0.11,0.09,0.07,0.08,0.11,0.11,0.08,0,10.25,-0.39,1800,1183.33,1916.67,3.34,2.81,2.42,4.17,3.57,4.17,11.54},5},
{{0.07,0.16,0.14,0.12,0.11,0.08,0.08,0.1,0.09,0.07,0.04,0.09,0.1,0.15,0.13,0.11,0.1,0.12,0.1,0.09,0.1,0.09,0.11,0.1,0.09,0.11,0.13,0.1,0.13,0.07,0,10.26,-0.24,3100,2850,3325,3.17,2.21,2.14,4.2,2.87,4.2,11.43},5},
{{0.01,0.04,0,0.01,0.02,0.02,0.03,0.03,0,0.01,0,0.01,0.02,0.01,0.04,0.02,0.04,0.01,0.02,0,0.01,0.02,0.02,0.01,0.05,0.01,0.02,0.01,0.01,0.02,0,1.61,-0.03,375,200,150,0.45,1.36,0.33,3.58,8.97,3.58,1.76},5},
{{0.09,0.11,0.13,0.1,0.07,0.11,0.08,0.14,0.11,0,0.11,0.08,0.1,0.12,0.13,0.07,0.12,0.09,0.13,0,0.09,0.1,0.12,0.12,0.09,0.11,0.1,0.08,0.11,0,0,9.91,-0.32,1850,830,4350,4.31,3.58,2.48,5.66,4.39,5.66,11.8},1},
{{0.12,0.07,0.12,0.07,0.09,0.13,0.12,0.07,0.13,0,0.08,0.09,0.12,0.12,0.09,0.1,0.11,0.1,0.09,0,0.08,0.12,0.07,0.12,0.13,0.07,0.11,0.11,0.13,0,0,10.28,-0.31,1933.33,513.89,2666.67,4.37,3.66,2.34,5.8,4.48,5.8,12.05},1},
{{0.09,0.09,0.09,0.11,0.12,0.1,0.09,0.13,0.09,0,0.1,0.1,0.11,0.1,0.11,0.11,0.08,0.11,0.12,0,0.09,0.1,0.12,0.1,0.1,0.1,0.11,0.09,0.1,0,0,9.9,-0.39,2883.33,653.85,3500,4.09,3.53,2.47,5.33,4.33,5.33,11.68},1},
{{0.13,0.11,0.08,0.07,0.09,0.11,0.09,0.09,0.13,0,0.12,0.11,0.1,0.09,0.09,0.12,0.11,0.11,0.09,0,0.14,0.1,0.1,0.12,0.09,0.13,0.11,0.08,0.08,0,0,9.99,-0.68,1540,725,2433.33,4.57,3.6,2.42,5.9,4.43,5.9,11.96},1},
{{0.11,0.13,0.09,0.09,0.09,0.11,0.11,0.08,0.11,0,0.09,0.1,0.11,0.11,0.12,0.1,0.05,0.13,0.08,0,0.11,0.1,0.14,0.06,0.1,0.08,0.11,0.11,0.08,0,0,10.27,-0.23,1300,750,2083.33,4.42,3.75,2.71,5.62,4.54,5.62,12.18},1},
{{0.07,0.09,0.12,0.15,0.15,0.08,0.12,0.09,0.08,0,0.11,0.13,0.08,0.08,0.07,0.1,0.14,0.09,0.11,0,0.11,0.08,0.08,0.1,0.12,0.08,0.1,0.13,0.15,0,0,10.03,-0.28,1933.33,588.46,1475,3.85,3.74,2.35,4.85,4.57,4.85,11.6},1},
{{0.08,0.1,0.1,0.09,0.09,0.08,0.11,0.07,0.14,0.17,0.17,0.13,0.1,0.07,0.09,0.07,0.08,0.1,0.11,0.11,0.08,0.12,0.12,0.11,0.09,0.08,0.07,0.08,0.1,0.15,0,9.4,-0.25,2225,2783.33,2100,4.01,3.03,3.03,4.9,3.88,4.9,11.61},5},
{{0.08,0.1,0.13,0.11,0.07,0.11,0.12,0.12,0.09,0.09,0.1,0.1,0.07,0.1,0.09,0.12,0.12,0.08,0.12,0.11,0.12,0.09,0.09,0.1,0.11,0.11,0.13,0.08,0.1,0.09,0,10.09,-1,2950,1433.33,2133.33,3.57,2.46,2.22,4.44,3.21,4.44,11.5},5},
{{0.1,0.09,0.09,0.1,0.15,0.1,0.12,0.09,0.08,0.09,0.06,0.06,0.14,0.16,0.09,0.1,0.13,0.09,0.11,0.07,0.09,0.1,0.07,0.15,0.1,0.08,0.13,0.11,0.1,0.09,0,10.01,-0.84,2975,920,2725,3.47,1.99,2.1,4.32,2.58,4.32,11.29},5},
{{0.13,0.12,0.1,0.11,0.11,0.08,0.1,0.08,0.08,0.12,0.09,0.1,0.09,0.11,0.15,0.1,0.11,0.08,0.11,0.1,0.1,0.11,0.1,0.1,0.12,0.13,0.08,0.1,0.1,0.09,0,10.06,-0.95,2850,2183.33,1700,3.52,2.15,2.25,4.53,2.77,4.53,11.43},5},
{{0.12,0.11,0.08,0.11,0.07,0.13,0.1,0.12,0.11,0.09,0.09,0.1,0.1,0.09,0.12,0.11,0.11,0.1,0.1,0.11,0.1,0.08,0.1,0.11,0.11,0.1,0.11,0.09,0.13,0.09,0,10.13,-0.71,1916.67,800,4100,3.56,2.3,2.27,4.39,3.03,4.39,11.53},5},
{{0.07,0.05,0.07,0.09,0.06,0.09,0.06,0.09,0.08,0.03,0.06,0.08,0.06,0.08,0.05,0.07,0.05,0.11,0.04,0.08,0.08,0.07,0.06,0.06,0.04,0.08,0.07,0.11,0.05,0.07,0,6.65,-0.63,1733.33,1233.33,1250,2.3,2.6,1.52,4.26,4.71,4.26,7.54},5},
{{0.11,0.09,0.12,0.09,0.14,0.11,0.12,0.06,0.09,0.09,0.12,0.11,0.09,0.09,0.08,0.14,0.08,0.12,0.1,0.08,0.09,0.13,0.09,0.12,0.09,0.1,0.1,0.11,0.08,0.11,0,9.58,2.96,4550,1290,1875,1.74,2.47,1.58,2.15,2.97,2.15,10.41},2},
{{0.08,0.12,0.09,0.07,0.14,0.1,0.1,0.14,0.1,0.08,0.09,0.12,0.07,0.12,0.09,0.13,0.11,0.1,0.09,0.1,0.09,0.11,0.08,0.06,0.12,0.11,0.08,0.16,0.1,0.11,0,9.67,3.06,4000,2062.5,1500,1.82,2.36,1.55,2.23,2.89,2.23,10.54},2},
{{0.11,0.1,0.09,0.14,0.07,0.11,0.11,0.12,0.07,0.1,0.12,0.09,0.12,0.09,0.11,0.09,0.11,0.09,0.12,0.08,0.08,0.05,0.12,0.1,0.09,0.11,0.12,0.13,0.13,0.1,0,9.55,3.2,950,2150,1258.33,1.75,2.49,1.56,2.12,3.01,2.12,10.46},2},
{{0.09,0.07,0.14,0.09,0.08,0.07,0.12,0.11,0.15,0.1,0.09,0.1,0.09,0.13,0.09,0.09,0.11,0.12,0.08,0.12,0.09,0.11,0.1,0.13,0.08,0.13,0.1,0.08,0.1,0.1,0,9.7,2.99,2050,1358.33,1637.5,1.93,2.39,1.63,2.35,2.9,2.35,10.58},2},
{{0.11,0.1,0.08,0.11,0.09,0.12,0.08,0.07,0.11,0.13,0.09,0.08,0.14,0.1,0.11,0.09,0.11,0.1,0.1,0.11,0.14,0.11,0.09,0.11,0.1,0.1,0.12,0.05,0.11,0.09,0,9.79,2.85,1900,1100,3250,2.05,2.48,1.7,2.61,3.02,2.61,10.72},2},
{{0.05,0.07,0.04,0.05,0.04,0.06,0.04,0.06,0.06,0.08,0.06,0.05,0.06,0.03,0.05,0.06,0.04,0.04,0.07,0.08,0.06,0.07,0.05,0.07,0.04,0.05,0.07,0.04,0.04,0.06,0,5.13,1.47,933.33,543.75,1150,1.07,2.5,0.96,2.5,5.71,2.5,5.59},2},
{{0,0.03,0.05,0.12,0.05,0.1,0.12,0.18,0.13,0.25,0.16,0.05,0.04,0.08,0.08,0.07,0.14,0.08,0.1,0.15,0.03,0.18,0.06,0.09,0.08,0.1,0.08,0.13,0.15,0.13,0,8.62,1.62,1200,391.67,1316.67,4.38,6.59,3.61,5.78,7.71,5.78,11.94},0},
{{0,0,0.03,0.06,0.13,0.11,0.12,0.09,0.17,0.3,0.12,0.06,0.09,0.09,0.08,0.08,0.07,0.09,0.15,0.18,0.05,0.09,0.09,0.11,0.08,0.13,0.11,0.1,0.14,0.14,0,8.43,1.61,3166.67,433.33,4575,4.17,6.68,3.41,5.18,7.62,5.18,11.66},0},
{{0,0.01,0.03,0.05,0.07,0.13,0.11,0.13,0.19,0.3,0.09,0.08,0.07,0.09,0.09,0.06,0.11,0.11,0.12,0.17,0.07,0.09,0.1,0.06,0.14,0.09,0.11,0.07,0.13,0.15,0,8.68,1.44,3700,740.91,1625,4.14,6.31,3.49,5.29,7.28,5.29,11.67},0},
{{0,0,0,0.05,0.09,0.1,0.15,0.14,0.16,0.31,0.06,0.08,0.13,0.07,0.07,0.09,0.09,0.12,0.12,0.19,0.03,0.09,0.07,0.09,0.12,0.11,0.14,0.14,0.11,0.13,0,8.74,1.84,1050,527.27,966.67,3.93,6.15,3.22,5.14,7.01,5.14,11.29},0},
{{0,0,0.04,0.04,0.1,0.09,0.11,0.18,0.16,0.31,0.09,0.08,0.08,0.07,0.11,0.09,0.1,0.09,0.16,0.13,0.05,0.08,0.1,0.13,0.11,0.09,0.11,0.07,0.12,0.17,0,8.27,1.69,750,690.91,750,4.04,5.91,3.56,5.15,6.86,5.15,11.19},0},
{{0.01,0.01,0.07,0.08,0.07,0.09,0.1,0.16,0.24,0.19,0.08,0.09,0.1,0.08,0.07,0.09,0.1,0.12,0.11,0.18,0.02,0.08,0.08,0.12,0.13,0.13,0.11,0.11,0.12,0.13,0,8.42,1.7,750,530.56,750,3.79,6.11,3.1,4.82,7.06,4.82,11.09},0},
{{0.01,0.02,0.02,0.06,0.06,0.07,0.1,0.16,0.26,0.27,0.1,0.04,0.09,0.14,0.09,0.07,0.11,0.1,0.12,0.15,0.02,0.1,0.05,0.08,0.1,0.18,0.1,0.08,0.14,0.17,0,8.19,2.16,1090,519.44,1458.33,3.78,6.02,3.42,4.77,7.02,4.77,11.18},0},
{{0,0.05,0.05,0.03,0.06,0.09,0.11,0.17,0.26,0.21,0.07,0.07,0.08,0.11,0.1,0.08,0.12,0.12,0.11,0.18,0.04,0.06,0.09,0.1,0.09,0.1,0.1,0.13,0.14,0.18,0,8.63,2.29,175,694.44,1125,3.63,5.79,3.45,4.65,6.73,4.65,11.32},0},
{{0.06,0.02,0.08,0.1,0.09,0.1,0.15,0.14,0.12,0.15,0.11,0.04,0.06,0.08,0.11,0.17,0.07,0.14,0.1,0.14,0.02,0.11,0.1,0.09,0.08,0.11,0.1,0.12,0.13,0.17,0,8.16,2.11,1700,603.85,1450,4.32,5.55,3.56,5.81,6.71,5.81,11.58},0},
{{0.03,0.08,0.1,0.14,0.11,0.12,0.12,0.08,0.15,0.09,0.1,0.08,0.04,0.06,0.13,0.15,0.08,0.15,0.08,0.15,0.03,0.13,0.13,0.09,0.07,0.07,0.09,0.13,0.13,0.16,0,8,1.76,2625,473.53,2850,4.7,5.44,3.83,6.05,6.6,6.05,11.51},0},
{{0.06,0.12,0.14,0.11,0.09,0.14,0.07,0.11,0.09,0.1,0.08,0.06,0.08,0.09,0.14,0.13,0.08,0.12,0.13,0.11,0.07,0.13,0.08,0.08,0.03,0.09,0.13,0.15,0.11,0.16,0,7.86,1.87,1075,578.13,1750,5.55,5.27,3.73,7.04,6.24,7.04,11.79},0},
{{0.07,0.09,0.12,0.16,0.13,0.13,0.08,0.08,0.11,0.05,0.06,0.1,0.08,0.08,0.14,0.13,0.07,0.13,0.17,0.06,0.05,0.11,0.12,0.04,0.09,0.07,0.07,0.13,0.17,0.17,0,7.58,2.14,1100,661.11,2233.33,5.74,5.01,3.82,7.3,5.88,7.3,11.69},0},
{{0.07,0.13,0.12,0.15,0.13,0.12,0.1,0.09,0.04,0.07,0.07,0.1,0.06,0.07,0.13,0.16,0.14,0.1,0.13,0.07,0.1,0.1,0.06,0.08,0.07,0.1,0.07,0.13,0.14,0.17,0,7.43,1.93,2666.67,1130,3725,5.96,4.85,4.07,7.47,5.91,7.47,11.82},0},
{{0.11,0.15,0.16,0.08,0.1,0.08,0.13,0.09,0.06,0.07,0.08,0.09,0.07,0.09,0.08,0.16,0.13,0.14,0.1,0.09,0.07,0.09,0.08,0.08,0.08,0.11,0.09,0.17,0.13,0.12,0,7.53,1.66,3550,912.5,2683.33,6.67,5.04,3.48,8.34,6.13,8.34,12.14},0},
{{0.08,0.09,0.18,0.13,0.12,0.16,0.09,0.09,0.05,0.05,0.11,0.06,0.03,0.11,0.08,0.17,0.15,0.13,0.12,0.06,0.08,0.07,0.07,0.08,0.06,0.1,0.1,0.15,0.15,0.17,0,7.37,2.27,1500,625,983.33,5.95,4.78,3.8,7.59,5.87,7.59,11.88},0},
{{0.13,0.14,0.16,0.09,0.11,0.07,0.07,0.1,0.09,0.06,0.06,0.13,0.07,0.06,0.1,0.16,0.15,0.14,0.07,0.08,0.07,0.09,0.11,0.09,0.04,0.09,0.13,0.16,0.09,0.14,0,7.13,1.7,2175,818.18,2200,6.9,4.9,3.59,8.63,5.93,8.63,11.99},0},
{{0.1,0.15,0.15,0.12,0.09,0.11,0.08,0.06,0.09,0.06,0.11,0.08,0.05,0.07,0.1,0.15,0.15,0.13,0.13,0.05,0.09,0.08,0.1,0.06,0.08,0.09,0.1,0.13,0.13,0.17,0,7.25,1.88,2850,1025,3950,6.62,4.89,3.86,8.18,5.91,8.18,12.07},0},
{{0.13,0.15,0.13,0.11,0.1,0.1,0.09,0.09,0.07,0.06,0.1,0.09,0.05,0.09,0.15,0.1,0.16,0.14,0.06,0.08,0.05,0.13,0.07,0.05,0.16,0.09,0.11,0.15,0.1,0.12,0,6.97,1.52,4575,660,2816.67,6.79,4.91,3.32,8.46,5.97,8.46,11.73},0},
{{0.12,0.19,0.12,0.13,0.13,0.06,0.09,0.07,0.07,0.05,0.12,0.08,0.04,0.12,0.09,0.1,0.14,0.13,0.11,0.08,0.06,0.11,0.09,0.09,0.1,0.1,0.13,0.11,0.13,0.09,0,7.29,1.17,1450,850,3116.67,7.09,5.37,3.33,8.68,6.32,8.68,12.13},0},
{{0.11,0.1,0.18,0.13,0.08,0.09,0.1,0.13,0.06,0.04,0.09,0.09,0.07,0.1,0.14,0.1,0.11,0.12,0.11,0.09,0.08,0.09,0.08,0.1,0.07,0.1,0.12,0.18,0.09,0.13,0,7.22,1.55,2650,890.91,1450,6.27,5.23,3.44,8.02,6.22,8.02,11.59},0},
{{0.07,0.16,0.15,0.16,0.06,0.09,0.12,0.1,0.06,0.05,0.11,0.07,0.04,0.09,0.13,0.12,0.12,0.11,0.14,0.09,0.11,0.07,0.1,0.08,0.09,0.11,0.13,0.11,0.13,0.1,0,7.61,0.97,2525,828.57,3625,6.29,5.32,3.5,7.84,6.35,7.84,11.96},0},
{{0.08,0.11,0.16,0.12,0.13,0.09,0.07,0.11,0.1,0.04,0.05,0.07,0.1,0.11,0.12,0.09,0.09,0.12,0.16,0.12,0.16,0.08,0.1,0.1,0.09,0.13,0.15,0.11,0.08,0.03,0,8.23,-0.48,1050,810,2150,5.94,5.45,3.31,7.5,6.24,7.5,11.79},0},
{{0.04,0.15,0.1,0.13,0.12,0.09,0.13,0.12,0.12,0.03,0.01,0.07,0.1,0.17,0.08,0.08,0.11,0.09,0.19,0.13,0.19,0.11,0.13,0.15,0.08,0.11,0.1,0.07,0.07,0.01,0,8.7,-1.44,3425,679.17,2383.33,5.25,5.41,3.09,6.84,6.09,6.84,11.6},0},
{{0.08,0.18,0.1,0.11,0.1,0.15,0.07,0.16,0.05,0.02,0.01,0.08,0.13,0.14,0.09,0.07,0.12,0.1,0.17,0.11,0.19,0.11,0.14,0.13,0.14,0.09,0.09,0.06,0.04,0.03,0,8.2,-1.77,2850,555.56,700,5.84,5.34,3.17,7.55,6.04,7.55,11.64},0},
{{0.17,0.12,0.13,0.11,0.15,0.13,0.07,0.07,0.05,0.02,0.02,0.14,0.15,0.15,0.05,0.12,0.11,0.11,0.09,0.09,0.22,0.12,0.12,0.16,0.1,0.07,0.07,0.09,0.06,0.02,0,6.84,-1.73,1075,758.33,1050,7.04,5.16,3.28,8.81,5.96,8.81,11.59},0},
{{0.25,0.13,0.05,0.12,0.12,0.12,0.08,0.09,0.07,0,0.08,0.14,0.16,0.12,0.09,0.1,0.11,0.08,0.09,0.04,0.21,0.09,0.14,0.15,0.1,0.12,0.11,0.03,0.07,0.01,0,5.43,-1.58,2225,1510,1316.67,7.78,4.95,2.99,9.93,5.76,9.93,11.45},0},
{{0.27,0.17,0.06,0.09,0.12,0.1,0.12,0.04,0.05,0.01,0.15,0.14,0.2,0.15,0.11,0.1,0.09,0.06,0.02,0.01,0.17,0.11,0.19,0.16,0.12,0.09,0.09,0.05,0.04,0.02,0,3.36,-1.68,2883.33,2150,1666.67,8.45,3.97,2.72,10.5,4.87,10.5,10.83},0},
{{0.28,0.16,0.12,0.05,0.16,0.1,0.08,0.04,0.05,0,0.23,0.14,0.23,0.15,0.12,0.05,0.05,0.04,0.01,0,0.23,0.1,0.15,0.13,0.15,0.09,0.08,0.03,0.06,0,0,1.75,-2.15,1600,1450,1825,8.87,3.44,3.13,10.77,4.42,10.77,10.94},0},
{{0.29,0.13,0.11,0.13,0.12,0.1,0.08,0.04,0.03,0,0.2,0.31,0.19,0.11,0.1,0.06,0.04,0.02,0,0,0.21,0.15,0.08,0.16,0.17,0.09,0.06,0.08,0.02,0,0,1.01,-2.25,483.33,725,2383.33,8.91,3.08,3.11,10.87,3.98,10.87,10.85},0},
{{0.28,0.17,0.16,0.05,0.08,0.11,0.1,0.07,0.01,0,0.25,0.23,0.24,0.14,0.08,0.05,0.02,0.01,0,0,0.21,0.09,0.18,0.17,0.1,0.09,0.13,0.05,0.01,0,0,0.61,-2.06,375,1475,775,9,2.78,2.71,10.92,3.59,10.92,10.65},0},
{{0.23,0.13,0.1,0.12,0.07,0.06,0.08,0.03,0.02,0,0.2,0.19,0.22,0.09,0.05,0.06,0.02,0.01,0,0,0.18,0.1,0.08,0.08,0.16,0.13,0.07,0.03,0.01,0,0,0.48,-1.73,600,783.33,750,7.37,2.35,2.32,10.83,3.87,10.83,8.7},0},
{{0.11,0.09,0.09,0.14,0.13,0.1,0.09,0.09,0.09,0.09,0.12,0.07,0.09,0.09,0.11,0.1,0.1,0.11,0.15,0.1,0.08,0.1,0.07,0.1,0.08,0.11,0.09,0.12,0.17,0.09,0,9.45,0.24,2833.33,3925,1325,4.06,2.67,1.29,5.14,3.33,5.14,10.73},2},
{{0.12,0.11,0.09,0.11,0.11,0.13,0.11,0.06,0.09,0.1,0.11,0.13,0.11,0.04,0.13,0.08,0.09,0.1,0.1,0.12,0.1,0.08,0.08,0.12,0.11,0.1,0.1,0.1,0.17,0.07,0,9.27,0.1,2075,2950,525,4.01,2.83,1.25,5.05,3.56,5.05,10.55},2},
{{0.11,0.08,0.07,0.14,0.16,0.07,0.1,0.1,0.1,0.11,0.1,0.1,0.1,0.1,0.08,0.07,0.12,0.14,0.11,0.1,0.09,0.09,0.09,0.12,0.12,0.11,0.11,0.07,0.12,0.11,0,9.23,0.13,3116.67,1650,1650,4.08,2.65,1.26,5.03,3.32,5.03,10.54},2},
{{0.06,0.11,0.08,0.11,0.15,0.07,0.07,0.14,0.15,0.1,0.1,0.12,0.12,0.06,0.11,0.11,0.13,0.05,0.11,0.11,0.05,0.11,0.1,0.07,0.12,0.11,0.18,0.08,0.1,0.1,0,9.11,0.25,3100,2575,1416.67,4.4,2.6,1.19,5.4,3.31,5.4,10.62},2},
{{0.11,0.11,0.09,0.08,0.09,0.12,0.08,0.08,0.15,0.11,0.14,0.13,0.09,0.1,0.09,0.11,0.06,0.08,0.1,0.13,0.11,0.1,0.08,0.13,0.08,0.1,0.11,0.09,0.11,0.12,0,9.1,0.15,1766.67,835,4175,4.27,2.98,1.4,5.29,3.78,5.29,10.64},2},
{{0.13,0.09,0.09,0.12,0.06,0.08,0.09,0.11,0.12,0.13,0.13,0.12,0.08,0.08,0.08,0.11,0.09,0.09,0.13,0.1,0.12,0.08,0.1,0.13,0.08,0.08,0.12,0.12,0.06,0.12,0,9.24,0.09,2100,933.33,1083.33,4.31,2.89,1.4,5.4,3.71,5.4,10.78},2},
{{0.13,0.09,0.09,0.14,0.09,0.08,0.09,0.1,0.13,0.09,0.17,0.08,0.1,0.08,0.05,0.08,0.11,0.14,0.09,0.11,0.13,0.07,0.09,0.11,0.11,0.1,0.09,0.1,0.11,0.11,0,9.14,0.08,1825,1440,2000,4.19,2.9,1.39,5.29,3.64,5.29,10.63},2},
{{0.11,0.11,0.1,0.1,0.08,0.09,0.1,0.09,0.15,0.09,0.14,0.11,0.09,0.1,0.08,0.08,0.1,0.07,0.15,0.1,0.08,0.1,0.1,0.12,0.12,0.08,0.09,0.1,0.14,0.11,0,9.18,0.23,1450,1033.33,1550,4.14,2.85,1.38,5.19,3.51,5.19,10.58},2},
{{0.09,0.1,0.12,0.11,0.11,0.11,0.09,0.08,0.12,0.09,0.06,0.12,0.16,0.07,0.09,0.11,0.11,0.1,0.11,0.09,0.09,0.11,0.1,0.1,0.11,0.11,0.12,0.09,0.09,0.11,0,9.24,0.1,1490,2833.33,3175,4.02,2.59,1.31,5,3.28,5,10.59},2},
{{0.08,0.1,0.13,0.1,0.11,0.1,0.11,0.11,0.08,0.1,0.1,0.08,0.13,0.1,0.1,0.13,0.08,0.1,0.11,0.11,0.1,0.13,0.11,0.09,0.08,0.11,0.1,0.1,0.09,0.12,0,9.26,0.09,1750,1350,1525,4.16,2.55,1.36,5.14,3.2,5.14,10.68},2},
{{0.12,0.1,0.09,0.09,0.1,0.09,0.12,0.11,0.09,0.12,0.09,0.11,0.1,0.11,0.11,0.09,0.13,0.09,0.09,0.11,0.1,0.1,0.13,0.08,0.09,0.11,0.08,0.14,0.08,0.12,0,9.26,0.13,2412.5,950,2533.33,4.24,2.62,1.36,5.27,3.35,5.27,10.71},2},
{{0.08,0.12,0.07,0.11,0.14,0.08,0.09,0.1,0.12,0.11,0.08,0.1,0.11,0.09,0.12,0.09,0.11,0.15,0.09,0.09,0.08,0.12,0.15,0.08,0.11,0.11,0.07,0.09,0.11,0.1,0,9.2,0,2466.67,1425,1433.33,4.23,2.42,1.24,5.2,3.12,5.2,10.62},2},
{{0.07,0.12,0.12,0.09,0.09,0.13,0.1,0.13,0.06,0.11,0.08,0.12,0.13,0.12,0.09,0.11,0.1,0.1,0.09,0.1,0.09,0.11,0.1,0.1,0.1,0.08,0.15,0.1,0.09,0.1,0,9.14,0.08,3750,1810,1450,4.06,2.53,1.25,5,3.2,5,10.49},2},
{{0.08,0.09,0.14,0.09,0.11,0.11,0.08,0.12,0.08,0.11,0.13,0.07,0.11,0.08,0.13,0.1,0.11,0.09,0.08,0.11,0.11,0.12,0.09,0.08,0.11,0.1,0.11,0.1,0.08,0.12,0,9.23,0.13,1608.33,1710,2650,4.11,2.67,1.39,5.09,3.49,5.09,10.64},2},
{{0.08,0.12,0.09,0.08,0.11,0.14,0.12,0.15,0.04,0.1,0.08,0.09,0.09,0.12,0.16,0.13,0.07,0.11,0.1,0.08,0.11,0.07,0.09,0.11,0.14,0.11,0.12,0.11,0.07,0.1,0,9.17,0.03,1250,1164.29,2133.33,4.01,2.34,1.21,4.85,3.11,4.85,10.46},2},
{{0.09,0.12,0.12,0.09,0.1,0.08,0.1,0.11,0.11,0.1,0.05,0.11,0.1,0.14,0.12,0.11,0.09,0.09,0.12,0.09,0.07,0.12,0.08,0.13,0.12,0.09,0.08,0.15,0.12,0.08,0,9.26,0.08,1425,1250,600,4.08,2.41,1.19,5.02,3.1,5.02,10.58},2},
{{0.07,0.12,0.1,0.1,0.11,0.11,0.12,0.1,0.08,0.11,0.06,0.1,0.1,0.16,0.12,0.08,0.11,0.09,0.1,0.1,0.11,0.09,0.1,0.09,0.12,0.1,0.1,0.13,0.09,0.09,0,9.25,0.11,1710,1068.75,2850,4.07,2.49,1.27,4.97,3.24,4.97,10.59},2},
{{0.09,0.07,0.15,0.07,0.11,0.08,0.16,0.13,0.09,0.08,0.03,0.11,0.09,0.13,0.12,0.16,0.1,0.1,0.1,0.07,0.09,0.07,0.11,0.09,0.13,0.11,0.13,0.11,0.08,0.09,0,9.23,0.07,1078.57,1462.5,537.5,4.08,2.11,1.2,4.88,2.82,4.88,10.52},2},
{{0.12,0.09,0.1,0.12,0.11,0.11,0.08,0.07,0.09,0.12,0.12,0.08,0.11,0.08,0.11,0.12,0.12,0.09,0.09,0.11,0.11,0.1,0.09,0.11,0.09,0.12,0.08,0.12,0.08,0.11,0,9.27,0.14,2466.67,1560,2112.5,4.03,2.62,1.4,5.04,3.39,5.04,10.63},2},
{{0.11,0.1,0.09,0.12,0.08,0.14,0.09,0.08,0.11,0.09,0.1,0.09,0.07,0.12,0.15,0.07,0.1,0.11,0.09,0.12,0.13,0.12,0.06,0.11,0.12,0.08,0.07,0.09,0.11,0.12,0,9.35,0.04,2450,1264.29,550,4.05,2.72,1.4,5.03,3.55,5.03,10.67},2},
{{0.1,0.12,0.11,0.07,0.11,0.13,0.1,0.07,0.11,0.1,0.12,0.09,0.1,0.09,0.09,0.1,0.1,0.1,0.1,0.12,0.09,0.12,0.1,0.11,0.11,0.08,0.1,0.09,0.1,0.12,0,9.32,0.18,2733.33,1321.43,1716.67,4.09,2.77,1.44,5.18,3.54,5.18,10.72},2},
{{0.11,0.12,0.1,0.1,0.1,0.11,0.08,0.1,0.1,0.12,0.11,0.1,0.11,0.1,0.08,0.08,0.11,0.14,0.07,0.13,0.1,0.1,0.11,0.11,0.09,0.11,0.1,0.1,0.09,0.11,0,9.24,0.1,1812.5,1780,1550,4.15,2.7,1.39,5.22,3.4,5.22,10.66},2},
{{0.13,0.11,0.1,0.11,0.1,0.06,0.08,0.11,0.12,0.1,0.13,0.09,0.07,0.12,0.09,0.1,0.09,0.14,0.09,0.11,0.12,0.14,0.11,0.11,0.09,0.08,0.1,0.09,0.08,0.11,0,9.3,0.02,975,1533.33,2716.67,4.03,2.71,1.48,5.18,3.49,5.18,10.72},2},
{{0.1,0.11,0.12,0.07,0.08,0.09,0.14,0.15,0.09,0.08,0.06,0.13,0.09,0.1,0.12,0.17,0.08,0.1,0.06,0.11,0.1,0.08,0.13,0.07,0.1,0.13,0.13,0.08,0.11,0.09,0,9.23,0.1,1870,1320,3600,3.96,2.35,1.29,4.84,3.18,4.84,10.51},2},
{{0.14,0.06,0.09,0.09,0.14,0.08,0.09,0.12,0.09,0.11,0.11,0.1,0.09,0.08,0.08,0.12,0.13,0.1,0.12,0.09,0.1,0.1,0.11,0.11,0.09,0.1,0.09,0.12,0.11,0.1,0,9.27,0.08,2466.67,1250,1100,4.27,2.69,1.34,5.29,3.48,5.29,10.74},2},
{{0.12,0.08,0.1,0.1,0.06,0.13,0.13,0.09,0.11,0.1,0.1,0.11,0.1,0.14,0.07,0.07,0.12,0.08,0.14,0.1,0.11,0.11,0.12,0.06,0.12,0.1,0.09,0.09,0.14,0.09,0,9.28,0.1,2450,1783.33,1816.67,4.24,2.72,1.39,5.25,3.39,5.25,10.75},2},
{{0.06,0.09,0.13,0.13,0.1,0.07,0.14,0.12,0.1,0.08,0.11,0.11,0.07,0.11,0.08,0.1,0.09,0.16,0.1,0.09,0.1,0.06,0.11,0.13,0.11,0.1,0.11,0.12,0.09,0.1,0,9.24,0.12,1062.5,3050,1050,4.13,2.59,1.26,5.1,3.29,5.1,10.61},2},
{{0.11,0.12,0.09,0.09,0.07,0.12,0.1,0.1,0.12,0.1,0.13,0.11,0.1,0.08,0.08,0.09,0.12,0.08,0.11,0.11,0.08,0.12,0.12,0.11,0.12,0.08,0.11,0.1,0.12,0.08,0,9.15,0.02,4650,1093.75,1660,4.15,2.71,1.24,5.15,3.4,5.15,10.55},2},
{{0.08,0.1,0.15,0.1,0.09,0.09,0.11,0.11,0.1,0.11,0.11,0.09,0.14,0.1,0.11,0.08,0.1,0.09,0.1,0.11,0.13,0.09,0.08,0.11,0.12,0.06,0.13,0.13,0.07,0.11,0,9.22,0.13,1766.67,1820,1862.5,4.14,2.74,1.45,5.17,3.47,5.17,10.68},2},
{{0.04,0.09,0.06,0.13,0.08,0.1,0.06,0.09,0.09,0.06,0.06,0.05,0.08,0.08,0.12,0.11,0.08,0.08,0.08,0.06,0.07,0.05,0.04,0.1,0.06,0.1,0.11,0.1,0.1,0.08,0,7.16,0.21,1050,850,2150,3.17,2.07,0.94,4.95,3.48,4.95,8.17},2},
{{0.09,0.13,0.1,0.14,0.14,0.08,0.08,0.09,0.1,0.08,0.1,0.13,0.07,0.06,0.16,0.08,0.07,0.08,0.13,0.14,0.09,0.13,0.12,0.06,0.07,0.08,0.1,0.15,0.1,0.12,0,7.89,2.12,1300,367.31,2583.33,3.78,7.37,3.11,5.05,8.42,5.05,11.46},0},
{{0.08,0.1,0.1,0.14,0.1,0.16,0.1,0.07,0.09,0.08,0.07,0.1,0.12,0.11,0.1,0.09,0.1,0.09,0.11,0.13,0.05,0.1,0.13,0.11,0.09,0.06,0.1,0.14,0.14,0.09,0,7.86,2.23,2600,383.33,1237.5,3.6,6.94,2.79,4.88,7.85,4.88,10.93},0},
{{0.08,0.08,0.09,0.13,0.13,0.12,0.1,0.12,0.08,0.1,0.07,0.09,0.13,0.1,0.1,0.1,0.11,0.08,0.12,0.11,0.04,0.09,0.14,0.08,0.12,0.13,0.13,0.11,0.07,0.11,0,7.94,2.19,2125,423.91,2425,3.85,6.86,2.48,5.15,7.81,5.15,11.07},0},
{{0.08,0.07,0.11,0.09,0.12,0.12,0.09,0.15,0.13,0.07,0.08,0.11,0.1,0.1,0.09,0.08,0.12,0.15,0.11,0.1,0.04,0.09,0.13,0.15,0.13,0.11,0.1,0.14,0.1,0.04,0,8.27,1.93,1100,527.78,1450,4.03,6.9,2.32,5.09,7.82,5.09,11.41},0},
{{0.09,0.09,0.13,0.08,0.12,0.11,0.09,0.13,0.11,0.08,0.1,0.1,0.11,0.1,0.11,0.08,0.1,0.13,0.1,0.08,0.09,0.13,0.07,0.07,0.14,0.09,0.14,0.13,0.09,0.08,0,7.66,1.92,1483.33,517.65,4400,4.07,7.08,2.8,5.28,8.04,5.28,11.34},0},
{{0.1,0.08,0.1,0.13,0.1,0.09,0.13,0.09,0.1,0.09,0.08,0.12,0.09,0.11,0.09,0.14,0.06,0.09,0.12,0.1,0.15,0.08,0.09,0.11,0.07,0.08,0.11,0.14,0.09,0.1,0,7.61,1.77,3450,500,1425,4.17,7.01,3.09,5.43,8.11,5.43,11.39},0},
{{0.08,0.09,0.15,0.11,0.09,0.09,0.11,0.12,0.11,0.09,0.08,0.09,0.12,0.1,0.1,0.12,0.09,0.11,0.11,0.11,0.04,0.14,0.13,0.08,0.14,0.09,0.12,0.08,0.13,0.07,0,7.96,1.9,1625,418.18,2450,4,6.96,2.61,5.14,7.98,5.14,11.29},0},
{{0.1,0.08,0.13,0.14,0.07,0.12,0.07,0.11,0.12,0.08,0.08,0.09,0.13,0.1,0.11,0.03,0.14,0.12,0.13,0.09,0.06,0.11,0.09,0.11,0.14,0.12,0.09,0.12,0.11,0.07,0,7.93,1.99,2250,457.89,2100,4.06,7.07,2.53,5.33,7.95,5.33,11.32},0},
{{0.08,0.08,0.12,0.11,0.12,0.09,0.09,0.14,0.13,0.08,0.07,0.09,0.11,0.1,0.09,0.14,0.11,0.09,0.11,0.11,0.08,0.1,0.12,0.06,0.13,0.14,0.11,0.12,0.08,0.08,0,8.02,1.97,1620,397.83,1264.29,4.2,6.82,2.62,5.44,7.94,5.44,11.55},0},
{{0.09,0.08,0.11,0.08,0.16,0.14,0.06,0.1,0.11,0.09,0.09,0.08,0.12,0.12,0.09,0.09,0.15,0.08,0.13,0.07,0.08,0.11,0.08,0.08,0.15,0.11,0.11,0.08,0.13,0.08,0,7.46,2,1416.67,576.67,1520,4.15,6.87,2.67,5.63,7.9,5.63,11.14},0},
{{0.09,0.11,0.1,0.12,0.11,0.1,0.13,0.1,0.09,0.07,0.08,0.12,0.12,0.12,0.07,0.09,0.13,0.08,0.11,0.1,0.07,0.14,0.09,0.11,0.12,0.13,0.1,0.08,0.11,0.08,0,7.43,1.8,1280,478.95,3775,4,7.21,2.65,5.3,8.17,5.3,11.1},0},
{{0.09,0.07,0.1,0.1,0.1,0.14,0.14,0.1,0.12,0.06,0.08,0.09,0.12,0.14,0.1,0.08,0.09,0.12,0.1,0.09,0.07,0.13,0.08,0.12,0.1,0.12,0.1,0.13,0.12,0.07,0,7.58,1.98,2850,486.11,3700,3.98,7.03,2.75,5.16,8.03,5.16,11.09},0},
{{0.09,0.1,0.07,0.15,0.11,0.1,0.12,0.09,0.1,0.08,0.08,0.1,0.12,0.12,0.09,0.11,0.11,0.09,0.1,0.12,0.1,0.09,0.08,0.09,0.11,0.13,0.09,0.13,0.11,0.1,0,7.6,2.07,4275,404.35,4475,3.93,7.01,2.78,5.21,8.13,5.21,11.25},0},
{{0.09,0.12,0.11,0.11,0.11,0.06,0.14,0.08,0.1,0.11,0.1,0.09,0.12,0.1,0.09,0.1,0.13,0.08,0.1,0.09,0.1,0.11,0.11,0.08,0.09,0.07,0.13,0.1,0.11,0.11,0,7.46,1.98,1725,466.67,866.67,4.38,7.07,2.99,5.81,8.15,5.81,11.47},0},
{{0.09,0.09,0.1,0.09,0.14,0.11,0.1,0.13,0.09,0.08,0.1,0.09,0.11,0.13,0.08,0.12,0.09,0.09,0.13,0.09,0.1,0.08,0.15,0.09,0.07,0.12,0.08,0.12,0.11,0.1,0,7.52,1.88,1537.5,433.33,4350,4.16,7.12,2.96,5.47,8.27,5.47,11.43},0},
{{0.13,0.09,0.09,0.09,0.06,0.09,0.17,0.12,0.08,0.1,0.13,0.06,0.14,0.08,0.11,0.09,0.08,0.13,0.09,0.12,0.13,0.08,0.11,0.1,0.1,0.12,0.08,0.1,0.09,0.11,0,7.35,1.74,2400,480.56,1100,4.64,7.36,2.92,5.96,8.49,5.96,11.68},0},
{{0.09,0.1,0.09,0.11,0.15,0.13,0.09,0.06,0.1,0.1,0.11,0.11,0.08,0.11,0.06,0.1,0.13,0.08,0.13,0.12,0.09,0.12,0.07,0.09,0.08,0.13,0.15,0.1,0.1,0.09,0,7.82,1.97,880,463.16,733.33,3.94,7.38,2.83,5.32,8.4,5.32,11.62},0},
{{0.09,0.08,0.11,0.13,0.1,0.12,0.09,0.1,0.08,0.12,0.11,0.14,0.08,0.07,0.1,0.09,0.09,0.12,0.1,0.12,0.11,0.1,0.09,0.1,0.12,0.12,0.11,0.08,0.11,0.1,0,7.41,1.89,2325,404.35,3325,4.28,7.67,2.85,5.77,8.71,5.77,11.64},0},
{{0.06,0.15,0.1,0.08,0.12,0.12,0.09,0.1,0.1,0.1,0.12,0.09,0.12,0.1,0.1,0.07,0.11,0.1,0.12,0.09,0.13,0.07,0.1,0.12,0.11,0.08,0.1,0.12,0.09,0.1,0,7.29,1.83,1862.5,476.32,575,4.24,7.34,2.93,5.52,8.39,5.52,11.35},0},
{{0.13,0.14,0.1,0.07,0.08,0.08,0.12,0.11,0.09,0.11,0.11,0.11,0.11,0.06,0.09,0.11,0.07,0.13,0.1,0.11,0.13,0.09,0.09,0.09,0.08,0.1,0.12,0.11,0.11,0.12,0,7.46,1.9,1925,544.12,1683.33,4.79,7.66,3.09,6.13,8.86,6.13,12.08},0},
{{0.16,0.13,0.08,0.07,0.09,0.1,0.09,0.08,0.1,0.12,0.15,0.09,0.06,0.12,0.08,0.15,0.08,0.09,0.09,0.1,0.16,0.08,0.11,0.09,0.08,0.07,0.08,0.11,0.12,0.12,0,7.06,1.63,2800,502.78,1590,5.11,7.27,3.48,6.55,8.39,6.55,11.9},0},
{{0.15,0.09,0.1,0.09,0.07,0.08,0.11,0.1,0.09,0.14,0.12,0.12,0.08,0.07,0.12,0.12,0.1,0.09,0.09,0.11,0.11,0.13,0.1,0.09,0.08,0.08,0.11,0.11,0.09,0.12,0,7.15,1.73,1960,408.33,1925,5.22,7.35,3.22,6.79,8.61,6.79,12.14},0},
{{0.13,0.13,0.1,0.09,0.04,0.11,0.1,0.1,0.1,0.13,0.1,0.14,0.08,0.11,0.09,0.12,0.06,0.13,0.06,0.11,0.11,0.08,0.12,0.14,0.09,0.09,0.12,0.07,0.09,0.12,0,6.81,1.78,2000,452.38,1762.5,4.91,7.5,3,6.27,8.76,6.27,11.68},0},
{{0.05,0.11,0.11,0.12,0.11,0.12,0.11,0.08,0.09,0.13,0.11,0.13,0.07,0.1,0.08,0.12,0.15,0.08,0.12,0.06,0.11,0.08,0.11,0.1,0.08,0.12,0.12,0.12,0.06,0.13,0,6.9,1.96,2616.67,630.77,1212.5,4.35,7.31,2.88,5.96,8.43,5.96,11.44},0},
{{0.16,0.06,0.08,0.09,0.08,0.11,0.11,0.11,0.12,0.1,0.11,0.08,0.09,0.13,0.1,0.14,0.08,0.12,0.09,0.08,0.08,0.09,0.1,0.18,0.1,0.09,0.1,0.06,0.11,0.11,0,7.02,1.92,1450,643.33,1333.33,5.03,6.99,2.81,6.39,8.29,6.39,11.61},0},
{{0.08,0.13,0.12,0.1,0.09,0.12,0.09,0.08,0.1,0.11,0.13,0.07,0.13,0.09,0.12,0.12,0.09,0.08,0.11,0.08,0.1,0.13,0.09,0.09,0.1,0.09,0.11,0.09,0.11,0.12,0,6.91,1.93,1900,457.89,1600,4.44,7.23,3.1,6.05,8.55,6.05,11.52},0},
{{0.13,0.11,0.08,0.09,0.08,0.09,0.09,0.1,0.13,0.12,0.11,0.13,0.09,0.13,0.07,0.1,0.11,0.13,0.08,0.06,0.14,0.09,0.12,0.11,0.05,0.09,0.11,0.06,0.1,0.16,0,6.49,1.82,2312.5,542.31,2350,4.93,7.11,3.4,6.41,8.08,6.41,11.37},0},
{{0.08,0.15,0.09,0.1,0.09,0.1,0.08,0.1,0.1,0.13,0.12,0.1,0.09,0.11,0.16,0.07,0.08,0.11,0.1,0.09,0.1,0.1,0.1,0.11,0.12,0.11,0.05,0.09,0.09,0.14,0,6.6,1.86,2150,465.79,2125,4.9,7.28,3.07,6.46,8.66,6.46,11.66},0},
{{0.16,0.07,0.07,0.09,0.07,0.1,0.07,0.15,0.08,0.15,0.12,0.11,0.08,0.09,0.14,0.14,0.11,0.06,0.09,0.08,0.14,0.09,0.08,0.12,0.1,0.09,0.09,0.06,0.1,0.14,0,6.42,1.7,1750,581.25,3025,5.46,7.04,3.35,7,8.47,7,12.01},0},
{{0.13,0.13,0.1,0.06,0.08,0.07,0.1,0.12,0.09,0.15,0.16,0.09,0.07,0.13,0.1,0.11,0.08,0.12,0.07,0.08,0.16,0.09,0.08,0.12,0.1,0.07,0.09,0.05,0.11,0.15,0,6.26,1.7,2150,494.44,1380,4.96,7.41,3.44,6.36,8.66,6.36,11.81},0},
{{0.15,0.1,0.1,0.07,0.09,0.04,0.11,0.07,0.15,0.14,0.1,0.12,0.09,0.12,0.1,0.11,0.1,0.08,0.06,0.14,0.12,0.13,0.11,0.11,0.1,0.07,0.08,0.08,0.07,0.14,0,7,1.55,1640,355.56,1166.67,5.42,7.37,3.25,6.81,8.73,6.81,12.16},0},
{{0.01,0.01,0.04,0.03,0.02,0.06,0.04,0.01,0.02,0.02,0.02,0.01,0.02,0.02,0.05,0.03,0.05,0.03,0.01,0.02,0.03,0.01,0.03,0.03,0.06,0.02,0.02,0.02,0.01,0.02,0,1.94,0.34,400,400,550,0.85,1.88,0.59,5.33,9.38,5.33,2.58},0},
{{0.03,0.19,0.29,0.2,0.16,0.11,0.03,0,0,0,0,0.06,0.09,0.09,0.11,0.08,0.13,0.18,0.17,0.1,0.22,0.13,0.15,0.1,0.07,0.1,0.05,0.08,0.04,0.08,0,10,-0.55,1133.33,1066.67,2950,2.2,2.55,2.27,2.78,3.05,2.78,10.78},2},
{{0.02,0.21,0.23,0.17,0.19,0.15,0.04,0,0.01,0,0.02,0.05,0.08,0.13,0.1,0.08,0.06,0.14,0.19,0.16,0.27,0.15,0.09,0.09,0.05,0.06,0.05,0.09,0.09,0.09,0,10.05,-0.17,1816.67,1391.67,2700,2.19,2.92,2.73,2.81,3.38,2.81,10.94},2},
{{0.09,0.16,0.25,0.16,0.18,0.11,0.07,0.01,0,0,0.04,0.1,0.09,0.09,0.08,0.12,0.11,0.12,0.11,0.17,0.25,0.1,0.1,0.13,0.11,0.08,0.07,0.06,0.05,0.08,0,9.77,-0.38,3325,1870,2625,2.69,3.23,2.36,3.63,3.9,3.63,10.84},2},
{{0.04,0.12,0.21,0.24,0.14,0.2,0.05,0.02,0.01,0,0,0.07,0.1,0.09,0.07,0.12,0.14,0.13,0.13,0.18,0.14,0.19,0.11,0.12,0.09,0.06,0.08,0.07,0.07,0.09,0,10.24,-0.04,2283.33,707.14,1825,2.21,2.85,2.38,3.07,3.49,3.07,11.03},2},
{{0.03,0.12,0.22,0.19,0.23,0.21,0.02,0,0,0,0.01,0.09,0.06,0.12,0.07,0.11,0.1,0.12,0.21,0.14,0.23,0.11,0.08,0.08,0.06,0.08,0.12,0.09,0.08,0.1,0,10.03,0,3100,1250,1950,1.79,2.79,2.72,2.52,3.31,2.52,10.82},2},
{{0.05,0.09,0.16,0.19,0.28,0.21,0.03,0,0,0,0.01,0.05,0.11,0.1,0.1,0.09,0.14,0.11,0.17,0.14,0.24,0.07,0.08,0.08,0.09,0.06,0.09,0.11,0.08,0.13,0,9.95,0.18,2475,818.18,3450,1.77,2.78,2.8,2.65,3.32,2.65,10.77},2},
{{0.03,0.1,0.14,0.19,0.23,0.24,0.09,0,0,0,0.01,0.05,0.1,0.12,0.08,0.09,0.16,0.08,0.16,0.17,0.27,0.08,0.11,0.1,0.07,0.05,0.04,0.1,0.12,0.08,0,10.12,-0.1,3575,1231.25,2100,1.75,2.81,2.7,2.4,3.37,2.4,10.85},2},
{{0.03,0.08,0.19,0.18,0.24,0.19,0.1,0.01,0,0,0,0.04,0.12,0.12,0.05,0.15,0.1,0.11,0.15,0.17,0.25,0.12,0.16,0.07,0.07,0.05,0.06,0.05,0.09,0.1,0,10.23,-0.17,1500,1520,3016.67,1.78,2.92,2.64,2.45,3.5,2.45,10.98},2},
{{0.05,0.17,0.13,0.19,0.21,0.2,0.06,0.01,0,0.01,0.03,0.06,0.08,0.09,0.11,0.13,0.11,0.07,0.15,0.19,0.17,0.09,0.14,0.13,0.13,0.09,0.07,0.07,0.06,0.09,0,10.11,0.15,1310,657.69,2725,2.18,3.04,2.47,3.1,3.65,3.1,10.92},2},
{{0.02,0.16,0.16,0.21,0.23,0.18,0.05,0.02,0,0.01,0.03,0.08,0.1,0.06,0.05,0.12,0.06,0.19,0.17,0.17,0.06,0.1,0.12,0.1,0.14,0.13,0.1,0.07,0.1,0.11,0,10.26,0.81,2900,1566.67,1116.67,1.92,2.95,2.32,2.61,3.53,2.61,10.94},2},
{{0.04,0.2,0.15,0.18,0.16,0.21,0.06,0.01,0.01,0,0.03,0.08,0.09,0.09,0.07,0.08,0.08,0.17,0.13,0.21,0.09,0.12,0.14,0.09,0.12,0.09,0.1,0.12,0.08,0.08,0,10.14,0.55,1475,1133.33,2275,2.29,3.09,2.36,3.08,3.67,3.08,10.93},2},
{{0.04,0.16,0.2,0.18,0.16,0.17,0.07,0.03,0.01,0,0.04,0.09,0.09,0.06,0.08,0.08,0.11,0.11,0.17,0.19,0.1,0.19,0.1,0.1,0.12,0.14,0.07,0.07,0.07,0.07,0,10.09,0.17,2425,1660,1283.33,2.36,3.24,2.26,3.21,3.88,3.21,10.93},2},
{{0.09,0.19,0.17,0.2,0.18,0.11,0.05,0.03,0,0,0.02,0.06,0.1,0.08,0.1,0.15,0.09,0.12,0.11,0.19,0.07,0.16,0.15,0.1,0.14,0.06,0.12,0.06,0.07,0.1,0,10.04,0.5,1616.67,810,900,2.64,2.97,2.56,3.61,3.55,3.61,11.03},2},
{{0.04,0.18,0.21,0.14,0.16,0.16,0.11,0.02,0,0.01,0.04,0.11,0.07,0.07,0.07,0.1,0.08,0.11,0.14,0.23,0.14,0.12,0.14,0.13,0.11,0.06,0.07,0.06,0.05,0.14,0,10.12,0.52,4750,1193.75,1575,2.39,3.49,2.85,3.12,4.15,3.12,11.1},2},
{{0.04,0.13,0.21,0.19,0.21,0.18,0.07,0,0,0,0.01,0.08,0.1,0.06,0.08,0.13,0.09,0.15,0.14,0.18,0.1,0.14,0.15,0.13,0.1,0.1,0.05,0.05,0.08,0.14,0,10.08,0.65,1500,727.27,1650,2.01,2.96,2.77,2.75,3.53,2.75,10.9},2},
{{0.03,0.17,0.15,0.21,0.2,0.21,0.04,0.01,0,0,0.01,0.1,0.08,0.09,0.09,0.09,0.11,0.13,0.13,0.2,0.12,0.1,0.09,0.12,0.13,0.1,0.08,0.06,0.12,0.11,0,10.08,0.66,1025,1650,2725,1.96,3,2.54,2.66,3.54,2.66,10.83},2},
{{0.04,0.15,0.2,0.27,0.18,0.15,0.03,0.01,0,0,0.02,0.06,0.13,0.08,0.09,0.06,0.11,0.13,0.17,0.17,0.11,0.14,0.08,0.07,0.08,0.13,0.1,0.06,0.13,0.12,0,10.01,0.74,3550,1072.22,1750,1.99,3.01,2.69,2.71,3.49,2.71,10.87},2},
{{0.05,0.13,0.19,0.18,0.23,0.2,0.04,0.01,0,0,0.05,0.09,0.09,0.06,0.06,0.08,0.11,0.13,0.17,0.19,0.21,0.06,0.08,0.07,0.09,0.12,0.07,0.07,0.12,0.13,0,10,0.51,1975,600,1833.33,1.97,3.25,2.8,2.73,3.87,2.73,10.92},2},
{{0.03,0.15,0.16,0.22,0.23,0.17,0.04,0.02,0,0,0.02,0.07,0.1,0.08,0.09,0.08,0.09,0.14,0.16,0.19,0.08,0.11,0.11,0.13,0.11,0.09,0.08,0.1,0.1,0.11,0,10.17,0.75,4050,950,3275,1.96,3,2.48,2.72,3.52,2.72,10.92},2},
{{0.05,0.14,0.18,0.2,0.2,0.16,0.08,0.01,0,0,0.05,0.09,0.08,0.06,0.07,0.06,0.13,0.08,0.17,0.23,0.08,0.11,0.14,0.14,0.1,0.15,0.09,0.04,0.06,0.12,0,10.17,0.51,2300,877.78,2087.5,2.22,3.34,2.37,3.09,3.95,3.09,10.96},2},
{{0.04,0.15,0.22,0.18,0.21,0.15,0.06,0.02,0,0,0.07,0.07,0.09,0.05,0.08,0.09,0.08,0.13,0.15,0.22,0.17,0.08,0.09,0.09,0.13,0.08,0.07,0.1,0.08,0.13,0,10.05,0.68,4000,2483.33,2225,2.12,3.32,2.88,2.82,3.95,2.82,10.98},2},
{{0.06,0.13,0.19,0.27,0.14,0.16,0.04,0.01,0.01,0.01,0.06,0.09,0.07,0.08,0.05,0.08,0.06,0.15,0.18,0.19,0.06,0.12,0.12,0.1,0.13,0.19,0.09,0.05,0.06,0.1,0,10.11,0.57,3350,1300,1466.67,2.31,3.38,2.22,3.27,3.97,3.27,10.93},2},
{{0.06,0.12,0.23,0.18,0.15,0.16,0.09,0.02,0.01,0,0.02,0.1,0.1,0.08,0.08,0.07,0.1,0.12,0.11,0.24,0.06,0.12,0.13,0.16,0.11,0.13,0.06,0.08,0.06,0.12,0,10.23,0.71,2175,1200,2683.33,2.29,3.21,2.48,3.1,3.79,3.1,11.05},2},
{{0.03,0.17,0.2,0.22,0.16,0.11,0.1,0.03,0,0,0.03,0.08,0.12,0.07,0.08,0.1,0.08,0.12,0.15,0.21,0.05,0.15,0.16,0.09,0.1,0.12,0.12,0.07,0.08,0.08,0,10.16,0.53,2900,1466.67,2900,2.26,3.2,2.24,2.93,3.76,2.93,10.94},2},
{{0.04,0.17,0.18,0.21,0.18,0.18,0.05,0.01,0.01,0,0.02,0.08,0.1,0.07,0.09,0.06,0.11,0.15,0.16,0.19,0.05,0.12,0.15,0.07,0.11,0.14,0.11,0.09,0.09,0.09,0,10.19,0.71,4150,1450,4900,2.19,2.95,2.27,2.95,3.52,2.95,10.93},2},
{{0.04,0.12,0.22,0.18,0.2,0.2,0.03,0.02,0,0,0.03,0.08,0.11,0.1,0.07,0.11,0.07,0.13,0.14,0.2,0.08,0.08,0.16,0.16,0.06,0.13,0.09,0.08,0.05,0.12,0,9.98,0.67,1050,1025,2383.33,2.06,3.2,2.59,2.96,3.71,2.96,10.84},2},
{{0.03,0.13,0.16,0.14,0.15,0.25,0.12,0.03,0.01,0.01,0.15,0.03,0.09,0.05,0.02,0.04,0.1,0.09,0.2,0.26,0.13,0.19,0.13,0.11,0.08,0.1,0.05,0.05,0.12,0.07,0,10.25,0.26,275,3900,2450,2.25,3.79,2.55,2.93,4.45,2.93,11.13},2},
{{0.04,0.11,0.18,0.16,0.2,0.21,0.1,0.02,0,0,0.05,0.09,0.09,0.07,0.04,0.07,0.13,0.11,0.15,0.23,0.12,0.13,0.13,0.18,0.07,0.11,0.04,0.05,0.08,0.12,0,10.16,0.39,4000,1341.67,2550,2.05,3.35,2.57,2.81,4,2.81,10.97},2},
{{0.04,0.15,0.13,0.2,0.17,0.2,0.1,0.02,0.02,0,0.07,0.07,0.1,0.09,0.07,0.07,0.08,0.11,0.15,0.22,0.08,0.19,0.13,0.14,0.11,0.11,0.07,0.04,0.06,0.1,0,10.06,0.28,1075,1316.67,2316.67,2.22,3.46,2.39,3.05,4.06,3.05,10.9},2},
{{0.03,0.13,0.17,0.16,0.26,0.18,0.07,0.01,0,0,0.03,0.09,0.11,0.07,0.06,0.11,0.07,0.12,0.19,0.17,0.08,0.16,0.15,0.15,0.09,0.07,0.07,0.05,0.08,0.13,0,9.99,0.5,2450,1064.29,3925,1.93,3.14,2.56,2.71,3.65,2.71,10.76},2},
{{0.02,0.08,0.12,0.13,0.12,0.11,0.15,0.06,0.13,0.1,0.03,0.07,0.07,0.1,0.14,0.16,0.14,0.11,0.11,0.09,0.09,0.12,0.1,0.09,0.06,0.09,0.13,0.13,0.09,0.12,0,9.3,0.93,1350,1033.33,3650,3.37,2.43,2.57,4.26,3.05,4.26,10.72},2},
{{0,0,0,0,0.01,0.03,0.17,0.26,0.27,0.28,0.1,0.06,0.09,0.14,0.21,0.15,0.14,0.08,0.04,0.01,0.11,0.1,0.11,0.06,0.07,0.05,0.11,0.16,0.18,0.07,0,7.87,0.95,1716.67,1450,925,5.79,2.07,2.5,6.21,2.63,6.21,10.46},2},
{{0,0,0,0,0,0.01,0.16,0.3,0.27,0.27,0.04,0.12,0.1,0.15,0.2,0.17,0.09,0.13,0.03,0,0.03,0.06,0.09,0.14,0.07,0.18,0.09,0.11,0.18,0.08,0,7.93,1.3,3100,1143.75,975,5.84,1.94,2.32,6.18,2.39,6.18,10.47},2},
{{0,0,0,0.01,0.01,0.03,0.18,0.28,0.27,0.24,0.03,0.13,0.13,0.11,0.15,0.12,0.16,0.11,0.07,0.02,0.02,0.08,0.09,0.11,0.19,0.13,0.09,0.06,0.09,0.15,0,8.23,1.53,1475,1475,1920,5.66,2.31,2.95,6.1,2.72,6.1,10.89},2},
{{0,0,0,0.02,0.02,0.02,0.23,0.23,0.23,0.25,0.02,0.1,0.13,0.14,0.2,0.11,0.11,0.12,0.07,0.01,0.06,0.1,0.13,0.13,0.16,0.14,0.08,0.06,0.02,0.15,0,8.23,1.21,3650,2566.67,1430,5.65,2.06,3.19,6.32,2.52,6.32,10.96},2},
{{0,0,0.02,0,0.01,0.08,0.19,0.18,0.24,0.31,0.16,0.09,0.06,0.05,0.1,0.15,0.13,0.15,0.11,0.03,0.14,0.11,0.12,0.1,0.14,0.09,0.08,0.06,0.06,0.13,0,8.22,0.67,2300,1025,1180,5.96,2.91,2.99,6.66,3.43,6.66,10.98},2},
{{0,0,0,0,0,0.05,0.17,0.24,0.23,0.32,0.11,0.1,0.06,0.16,0.15,0.1,0.15,0.12,0.08,0.01,0.17,0.11,0.11,0.07,0.12,0.07,0.05,0.12,0.13,0.08,0,8.01,0.4,1250,1100,2600,6.05,2.45,2.59,6.63,2.95,6.63,10.75},2},
{{0,0,0,0.01,0.01,0.09,0.22,0.14,0.2,0.34,0.2,0.09,0.07,0.07,0.12,0.1,0.11,0.08,0.11,0.08,0.08,0.1,0.1,0.12,0.12,0.13,0.09,0.08,0.1,0.12,0,8.07,1.04,978.57,1375,1225,6.1,3.29,2.82,6.97,3.92,6.97,10.99},2},
{{0,0,0,0,0,0.02,0.18,0.25,0.28,0.29,0.12,0.11,0.08,0.11,0.15,0.14,0.1,0.12,0.06,0.04,0.1,0.16,0.07,0.07,0.06,0.08,0.11,0.13,0.16,0.1,0,7.97,0.8,1262.5,3075,3325,6.09,2.62,2.52,6.58,3.19,6.58,10.74},2},
{{0,0,0,0,0,0.06,0.19,0.25,0.26,0.24,0.1,0.07,0.12,0.14,0.18,0.1,0.14,0.07,0.1,0.01,0.08,0.11,0.06,0.07,0.1,0.08,0.09,0.21,0.14,0.08,0,7.99,0.97,810,1666.67,525,5.68,2.4,2.37,6.25,2.95,6.25,10.55},2},
{{0,0,0.02,0.01,0.01,0.06,0.19,0.22,0.24,0.27,0.04,0.11,0.11,0.14,0.14,0.13,0.15,0.12,0.06,0.03,0.07,0.06,0.05,0.06,0.14,0.17,0.16,0.1,0.09,0.14,0,8.3,1.38,2250,1530,525,5.63,2.3,2.49,6.18,2.74,6.18,10.84},2},
{{0,0,0,0.01,0.01,0.03,0.22,0.28,0.28,0.2,0.03,0.11,0.12,0.21,0.13,0.13,0.09,0.11,0.09,0.01,0.04,0.09,0.07,0.15,0.1,0.14,0.13,0.08,0.1,0.12,0,8.13,1.24,1716.67,729.17,1440,5.47,2.19,2.66,5.92,2.62,5.92,10.64},2},
{{0,0,0,0,0.01,0.05,0.19,0.22,0.31,0.24,0.05,0.13,0.11,0.1,0.19,0.15,0.13,0.11,0.04,0.01,0.06,0.07,0.07,0.1,0.1,0.12,0.13,0.13,0.11,0.13,0,7.96,1.41,700,900,2600,5.77,2.12,2.58,6.29,2.59,6.29,10.64},2},
{{0,0,0,0,0,0.03,0.15,0.27,0.25,0.31,0.05,0.14,0.12,0.11,0.17,0.16,0.13,0.09,0.04,0.01,0.02,0.06,0.1,0.14,0.12,0.15,0.09,0.09,0.12,0.13,0,7.82,1.31,1590,3925,2250,6.09,2.16,2.5,6.56,2.59,6.56,10.64},2},
{{0,0,0,0,0,0.01,0.13,0.25,0.31,0.31,0.1,0.14,0.08,0.09,0.19,0.13,0.14,0.11,0.05,0.01,0.02,0.08,0.17,0.14,0.11,0.13,0.07,0.06,0.12,0.12,0,7.82,1.25,2050,1020,2050,6.25,2.36,2.76,6.68,2.82,6.68,10.87},2},
{{0,0,0,0,0,0.01,0.16,0.28,0.31,0.24,0.05,0.12,0.12,0.14,0.14,0.18,0.12,0.08,0.06,0.01,0.02,0.08,0.09,0.1,0.13,0.18,0.06,0.12,0.1,0.15,0,7.89,1.55,1050,1491.67,2283.33,5.88,2.12,2.74,6.28,2.55,6.28,10.65},2},
{{0,0,0,0,0.01,0,0.21,0.3,0.27,0.23,0.03,0.11,0.12,0.16,0.2,0.19,0.09,0.09,0.03,0,0.02,0.08,0.11,0.06,0.11,0.09,0.16,0.11,0.16,0.13,0,7.88,1.49,3175,1680,2133.33,5.67,1.83,2.39,6.05,2.28,6.05,10.4},2},
{{0,0,0,0.01,0,0.04,0.23,0.27,0.27,0.2,0.05,0.09,0.11,0.17,0.16,0.18,0.11,0.07,0.05,0.03,0.05,0.08,0.1,0.07,0.09,0.11,0.14,0.13,0.12,0.13,0,7.99,1.39,1537.5,4225,1562.5,5.42,2.12,2.48,5.88,2.64,5.88,10.44},2},
{{0,0,0,0.01,0.01,0.05,0.23,0.27,0.22,0.24,0.06,0.14,0.11,0.14,0.11,0.12,0.16,0.11,0.06,0.01,0.02,0.07,0.08,0.11,0.08,0.14,0.16,0.11,0.13,0.12,0,7.95,1.53,1050,1612.5,1850,5.44,2.37,2.46,5.95,2.78,5.95,10.47},2},
{{0,0,0,0,0,0,0.21,0.3,0.24,0.26,0.06,0.14,0.09,0.09,0.19,0.2,0.11,0.1,0.05,0,0.03,0.13,0.09,0.11,0.08,0.12,0.11,0.1,0.12,0.12,0,7.89,1.27,811.11,638.46,1812.5,5.81,2.11,2.64,6.26,2.59,6.26,10.6},2},
{{0,0,0,0,0.01,0.05,0.2,0.27,0.27,0.21,0.06,0.13,0.1,0.14,0.18,0.08,0.13,0.14,0.06,0.01,0.04,0.08,0.09,0.06,0.11,0.11,0.15,0.12,0.13,0.13,0,7.96,1.5,1550,850,1416.67,5.56,2.27,2.54,6.11,2.73,6.11,10.57},2},
{{0,0,0.01,0.01,0.01,0.03,0.2,0.25,0.21,0.29,0.11,0.11,0.12,0.12,0.11,0.11,0.13,0.13,0.08,0.01,0.02,0.06,0.11,0.11,0.12,0.18,0.13,0.08,0.06,0.15,0,7.97,1.59,2000,2175,2275,5.75,2.61,2.87,6.35,3.06,6.35,10.75},2},
{{0,0,0,0.01,0.01,0.02,0.18,0.22,0.28,0.29,0.07,0.16,0.07,0.11,0.13,0.14,0.15,0.12,0.06,0.02,0.06,0.12,0.13,0.07,0.11,0.09,0.1,0.12,0.1,0.14,0,7.99,1.37,1610,1160,1000,5.91,2.47,2.95,6.4,2.91,6.4,10.88},2},
{{0.49,0.16,0.03,0,0,0.01,0.04,0.06,0.09,0.13,0.4,0.17,0.15,0.12,0.1,0.03,0.01,0.03,0,0.01,0.18,0.11,0.1,0.08,0.1,0.1,0.18,0.1,0.05,0.02,0,4.66,-0.57,866.67,1300,325,8.19,2.21,2.03,8.75,2.79,8.75,10.26},2},
{{0.52,0.34,0.1,0.02,0.03,0,0,0,0,0,0.3,0.23,0.14,0.1,0.1,0.08,0.05,0.01,0,0,0.22,0.03,0.01,0,0,0.05,0.13,0.22,0.24,0.13,0,5.22,0.9,866.67,2283.33,250,6.93,2.07,3.54,7.73,2.49,7.73,10.17},2},
{{0.71,0.26,0.04,0,0,0,0,0,0,0,0.42,0.17,0.21,0.14,0.05,0.01,0.01,0,0,0,0.01,0.02,0.05,0.03,0.05,0.12,0.28,0.21,0.21,0.04,0,4.24,1.7,866.67,1483.33,2350,8.4,1.84,1.53,8.97,2.24,8.97,10.02},2},
{{0.82,0.18,0.01,0,0,0,0,0,0,0,0.84,0.14,0.01,0.02,0,0,0,0,0,0,0.1,0.09,0.07,0.1,0.18,0.14,0.17,0.12,0.05,0.01,0,1.23,-0.05,866.67,4425,2833.33,9.73,1.86,1.39,10.35,2.41,10.35,10.26},2},
{{0.83,0.17,0,0,0,0,0,0,0,0,0.69,0.2,0.1,0.02,0,0,0,0,0,0,0.05,0.04,0.06,0.1,0.13,0.19,0.24,0.18,0.05,0,0,2.48,0.42,866.67,500,3250,9.49,1.66,1.19,9.97,2.09,9.97,10.17},2},
{{0.72,0.28,0,0,0,0,0,0,0,0,0.4,0.18,0.27,0.15,0.02,0,0,0,0,0,0,0,0.01,0.01,0.05,0.08,0.22,0.29,0.34,0.02,0,4.2,2.22,866.67,887.5,1333.33,8.52,1.66,1.24,8.99,1.93,8.99,10.07},2},
{{0.69,0.19,0.01,0,0,0,0,0,0,0,0.36,0.2,0.23,0.06,0.03,0,0,0,0,0,0,0.01,0.01,0.01,0.04,0.04,0.18,0.33,0.27,0.01,0,3.56,1.99,866.67,683.33,1500,7.63,1.42,1.01,9.09,1.93,9.09,8.89},2},
{{0.25,0.15,0.19,0.14,0.14,0.13,0.01,0,0,0,0.12,0.01,0.01,0.06,0.12,0.14,0.18,0.15,0.12,0.12,0.09,0.1,0.11,0.12,0.1,0.1,0.09,0.1,0.13,0.09,0,7.37,1.87,866.67,2400,3825,4.94,3.2,2.28,5.65,4.67,5.65,10.4},5},
{{0.2,0.16,0.12,0.13,0.16,0.17,0.07,0,0,0,0.02,0.03,0.05,0.09,0.13,0.1,0.09,0.1,0.2,0.22,0.17,0.11,0.09,0.12,0.13,0.09,0.09,0.07,0.09,0.06,0,8.84,1.05,2925,1128.57,3725,4.43,3.23,2.32,5.31,4.12,5.31,10.78},5},
{{0.19,0.14,0.13,0.12,0.18,0.2,0.05,0,0,0,0.06,0.03,0.03,0.06,0.11,0.18,0.14,0.11,0.1,0.2,0.13,0.15,0.13,0.1,0.08,0.08,0.1,0.07,0.1,0.09,0,8.41,1.44,2500,1280,1775,4.35,3.09,2.43,5.22,4.17,5.22,10.54},5},
{{0.16,0.2,0.13,0.26,0.15,0.07,0.05,0,0,0,0.06,0.02,0.04,0.02,0.07,0.17,0.17,0.23,0.11,0.13,0.11,0.1,0.08,0.09,0.16,0.1,0.1,0.13,0.08,0.08,0,8.17,1.86,3800,1066.67,4450,4.42,2.37,2.23,4.97,3.41,4.97,10.36},5},
{{0.12,0.15,0.18,0.19,0.13,0.2,0.04,0,0,0,0.01,0.02,0.02,0.04,0.12,0.12,0.16,0.21,0.16,0.16,0.11,0.11,0.15,0.16,0.11,0.11,0.08,0.09,0.05,0.05,0,8.78,1.09,366.67,783.33,2425,3.95,2.23,1.89,4.52,3.08,4.52,10.33},5},
{{0.09,0.2,0.17,0.2,0.16,0.18,0.01,0,0,0,0.04,0.01,0.01,0.03,0.14,0.16,0.15,0.15,0.2,0.14,0.05,0.12,0.13,0.12,0.1,0.11,0.12,0.11,0.07,0.1,0,8.51,2.02,366.67,3800,3750,4.04,2.29,2.15,4.53,3.1,4.53,10.29},5},
{{0.1,0.15,0.19,0.17,0.23,0.13,0.05,0,0,0,0,0.01,0.02,0.03,0.07,0.13,0.19,0.23,0.19,0.16,0.09,0.1,0.14,0.14,0.19,0.12,0.12,0.04,0.04,0.04,0,9.14,1.06,2225,2225,1425,3.92,1.99,1.55,4.4,2.71,4.4,10.45},5},
{{0.09,0.09,0.05,0.06,0.08,0.08,0.16,0.14,0.12,0.13,0.05,0.12,0.12,0.18,0.13,0.13,0.07,0.08,0.07,0.07,0.13,0.09,0.12,0.06,0.07,0.08,0.09,0.13,0.1,0.15,0,5.91,2.31,1050,866.67,1600,6.35,2.92,3.05,7.47,3.57,7.47,10.51},5},
{{0,0,0,0,0,0.01,0.2,0.26,0.28,0.26,0.17,0.23,0.24,0.2,0.09,0.03,0.01,0.01,0.04,0.02,0.12,0.11,0.1,0.11,0.1,0.11,0.09,0.05,0.11,0.11,0,3.3,1.93,1762.5,2100,1966.67,8.58,1.97,2.7,9.28,2.71,9.28,10.49},5},
{{0,0,0,0.01,0.01,0.02,0.19,0.24,0.28,0.26,0.22,0.25,0.18,0.21,0.07,0.03,0.02,0.01,0.01,0.02,0.06,0.09,0.07,0.08,0.06,0.11,0.12,0.18,0.1,0.15,0,2.98,3.06,3100,2500,2025,8.37,1.88,2.81,9.17,2.55,9.17,10.47},5},
{{0,0,0,0,0.01,0.03,0.2,0.28,0.22,0.28,0.23,0.24,0.22,0.17,0.08,0.03,0,0.02,0.03,0.01,0.05,0.06,0.08,0.07,0.08,0.08,0.13,0.15,0.18,0.15,0,2.84,3.38,1680,1983.33,3075,8.16,2,2.87,8.93,2.72,8.93,10.4},5},
{{0,0.01,0.01,0,0.01,0.02,0.18,0.24,0.29,0.27,0.24,0.23,0.25,0.12,0.1,0.03,0.01,0.01,0.01,0.01,0.04,0.05,0.04,0.06,0.08,0.12,0.1,0.15,0.2,0.17,0,2.73,3.48,1450,2516.67,2700,8.55,1.83,2.59,9.23,2.46,9.23,10.52},5},
{{0,0,0,0,0,0,0.03,0.06,0.05,0.04,0.02,0.04,0.02,0.06,0.03,0.02,0.01,0,0,0,0.08,0.03,0.02,0,0.01,0.01,0.02,0.01,0.01,0.01,0,0.62,-0.16,333.33,483.33,125,1.4,0.56,0.54,8.76,3.8,8.76,1.71},5},
{{0.09,0.14,0.08,0.13,0.08,0.1,0.07,0.14,0.12,0.07,0.04,0.09,0.07,0.12,0.14,0.09,0.15,0.12,0.13,0.07,0.15,0.18,0.08,0.05,0.02,0.07,0.12,0.11,0.12,0.1,0,8.39,1.67,1775,1800,175,4.86,2.73,2.01,5.57,3.39,5.57,10.35},1},
{{0.09,0.08,0.09,0.09,0.13,0.12,0.11,0.09,0.11,0.11,0.09,0.07,0.14,0.12,0.09,0.12,0.06,0.12,0.1,0.1,0.09,0.12,0.13,0.13,0.06,0.05,0.08,0.14,0.11,0.11,0,8.13,1.6,450,2450,525,5.22,3.26,1.68,6.04,4.03,6.04,10.18},1},
{{0.08,0.12,0.09,0.09,0.12,0.1,0.12,0.1,0.08,0.1,0.13,0.09,0.08,0.09,0.14,0.09,0.12,0.06,0.08,0.13,0.03,0.06,0.12,0.15,0.19,0.17,0.1,0.08,0.07,0.04,0,8.19,1.37,3175,300,2975,5.22,3.63,0.99,6.2,4.65,6.2,9.99},1},
{{0.12,0.08,0.14,0.11,0.1,0.08,0.12,0.07,0.09,0.1,0.12,0.14,0.08,0.1,0.07,0.12,0.08,0.1,0.06,0.13,0.03,0.05,0.07,0.12,0.16,0.12,0.13,0.11,0.1,0.13,0,7.9,2.02,1550,775,2216.67,5.09,3.67,1.66,6.11,4.65,6.11,9.94},1},
{{0.04,0.02,0.04,0.02,0.01,0.03,0.02,0.04,0.04,0.06,0.04,0.05,0.03,0.03,0.02,0.02,0.02,0.03,0.06,0.02,0.1,0.03,0.03,0.01,0.01,0.01,0.02,0.03,0.03,0.06,0,2.34,0.4,350,450,125,1.73,1.73,0.75,6.87,7.29,6.87,3.22},1},
{{0.16,0.16,0.12,0.12,0.1,0.1,0.13,0.05,0.05,0,0.08,0.06,0.05,0.1,0.08,0.13,0.12,0.09,0.17,0,0.03,0.05,0.13,0.15,0.16,0.1,0.09,0.1,0.12,0,0,8.51,2.18,2516.67,700,1550,4.15,2.77,2.34,4.94,3.64,4.94,10.46},5},
{{0.06,0.09,0.15,0.09,0.12,0.09,0.1,0.13,0.12,0,0.1,0.05,0.18,0.07,0.11,0.08,0.09,0.09,0.1,0,0.03,0.06,0.12,0.12,0.1,0.13,0.16,0.13,0.07,0,0,7.84,2.21,1100,525,625,5.49,2.65,2.26,6.23,3.24,6.23,10.43},5},
{{0.09,0.09,0.08,0.1,0.11,0.12,0.09,0.13,0.11,0,0.11,0.16,0.07,0.11,0.09,0.1,0.11,0.1,0.09,0,0.06,0.15,0.1,0.08,0.11,0.12,0.1,0.07,0.13,0,0,7.45,1.84,1812.5,1612.5,1650,5.61,2.55,2.67,6.46,3.43,6.46,10.32},5},
{{0.08,0.09,0.08,0.1,0.11,0.07,0.07,0.11,0.16,0,0.13,0.08,0.09,0.11,0.12,0.12,0.1,0.12,0.08,0,0.14,0.13,0.08,0.08,0.08,0.12,0.07,0.12,0.08,0,0,7.19,1.59,1812.5,1612.5,1650,6.04,2.07,2.91,6.93,2.67,6.93,10.61},5},
{{0.12,0.07,0.07,0.09,0.07,0.13,0.12,0.09,0.09,0,0.1,0.14,0.1,0.13,0.09,0.08,0.09,0.12,0.1,0,0.16,0.11,0.08,0.08,0.08,0.06,0.1,0.09,0.12,0,0,7.43,1.64,775,1200,800,5.96,2.45,3.29,6.98,3.14,6.98,10.88},5},
{{0.01,0.01,0.03,0.02,0.02,0.01,0.01,0.01,0,0,0.01,0.02,0.02,0.01,0.02,0.02,0.02,0.01,0,0,0.09,0.02,0,0,0,0,0,0,0,0,0,0.64,-0.53,225,150,800,0.43,0.57,0.48,4.83,5.93,4.83,0.98},5},
{{0.09,0.09,0.09,0.1,0.09,0.1,0.13,0.11,0.11,0.1,0.06,0.1,0.13,0.16,0.09,0.1,0.09,0.12,0.09,0.07,0.09,0.1,0.08,0.11,0.1,0.1,0.1,0.1,0.12,0.09,0,-9.4,1.47,1400,150,2150,1.88,3.49,2.04,2.56,4.28,2.56,10.26},1},
{{0.1,0.07,0.15,0.08,0.11,0.09,0.07,0.11,0.12,0.12,0.11,0.08,0.12,0.1,0.12,0.06,0.1,0.08,0.1,0.15,0.14,0.11,0.11,0.1,0.07,0.07,0.1,0.08,0.13,0.11,0,-9.46,1.2,3375,150,3500,2.07,4.11,2.04,2.94,5.01,2.94,10.33},1},
{{0.07,0.12,0.11,0.08,0.1,0.15,0.12,0.11,0.06,0.1,0.1,0.12,0.09,0.07,0.09,0.13,0.15,0.08,0.1,0.09,0.1,0.06,0.12,0.13,0.14,0.11,0.07,0.09,0.09,0.11,0,-9.57,1.25,3150,150,1600,1.8,3.76,1.71,2.52,4.64,2.52,10.23},1},
{{0.07,0.1,0.1,0.11,0.12,0.1,0.1,0.09,0.12,0.1,0.14,0.09,0.09,0.07,0.1,0.07,0.08,0.13,0.14,0.1,0.05,0.11,0.11,0.07,0.1,0.12,0.11,0.14,0.09,0.12,0,-9.55,1.52,3000,150,3225,1.93,4.29,1.74,2.68,5.1,2.68,10.28},1},
{{0.11,0.03,0.02,0.02,0.02,0.02,0.02,0.04,0.02,0.02,0.02,0.04,0.02,0.03,0.04,0.06,0.03,0.02,0.02,0.03,0.05,0.03,0.03,0.03,0.02,0.03,0.05,0.03,0.03,0.01,0,-2.78,0.12,575,150,1025,0.53,1.99,0.53,2.3,8.02,2.3,2.93},1},
{{0.17,0.14,0.09,0.08,0.11,0.09,0.07,0.1,0.08,0.08,0.11,0.09,0.13,0.08,0.11,0.08,0.11,0.11,0.1,0.1,0.13,0.11,0.12,0.09,0.06,0.08,0.09,0.1,0.12,0.11,0,9.6,0.21,600,1900,1025,2.94,3.55,2.36,3.8,4.49,3.8,10.92},5},
{{0.08,0.09,0.11,0.09,0.08,0.13,0.15,0.05,0.13,0.11,0.09,0.09,0.13,0.11,0.1,0.09,0.09,0.12,0.08,0.11,0.11,0.13,0.07,0.09,0.15,0.13,0.11,0.08,0.07,0.08,0,9.53,-0.35,2566.67,1100,3325,2.22,3.34,1.74,2.73,4.23,2.73,10.3},5},
{{0.11,0.09,0.11,0.06,0.11,0.13,0.09,0.12,0.08,0.11,0.11,0.13,0.09,0.11,0.1,0.09,0.1,0.12,0.09,0.09,0.09,0.08,0.12,0.09,0.09,0.07,0.11,0.13,0.11,0.13,0,9.35,0.4,2775,866.67,2675,2.36,3.42,2.09,3.03,4.32,3.03,10.3},5},
{{0.07,0.1,0.09,0.13,0.12,0.09,0.06,0.12,0.11,0.12,0.09,0.09,0.06,0.14,0.09,0.12,0.1,0.08,0.13,0.11,0.08,0.09,0.11,0.1,0.15,0.1,0.09,0.12,0.1,0.09,0,9.81,-0.08,300,3800,3825,2.24,3.23,1.82,2.79,4.03,2.79,10.53},5},
{{0.02,0.03,0.05,0.09,0.04,0.02,0.05,0.09,0.03,0.06,0.06,0.05,0.03,0.03,0.07,0.06,0.06,0.04,0.06,0.05,0.03,0.02,0.05,0.07,0.05,0.06,0.07,0.03,0.06,0.06,0,4.67,0.15,525,725,150,0.97,2.61,0.74,2.5,6.71,2.5,4.95},5},
{{0.11,0.09,0.12,0.09,0.09,0.13,0.08,0.14,0.11,0.07,0.08,0.1,0.14,0.07,0.09,0.1,0.1,0.11,0.15,0.08,0.13,0.11,0.09,0.07,0.12,0.1,0.1,0.12,0.09,0.1,0,9.79,1.34,525,1537.5,1800,1.94,3.56,1.57,2.65,4.2,2.65,10.44},1},
{{0.12,0.1,0.08,0.1,0.08,0.15,0.11,0.12,0.08,0.09,0.1,0.12,0.08,0.12,0.11,0.09,0.11,0.1,0.1,0.1,0.07,0.1,0.12,0.1,0.1,0.1,0.1,0.13,0.11,0.09,0,9.55,1.62,2362.5,1630,300,1.86,3.53,1.59,2.45,4.28,2.45,10.2},1},
{{0.09,0.14,0.1,0.06,0.08,0.09,0.13,0.07,0.14,0.13,0.07,0.07,0.08,0.12,0.12,0.15,0.13,0.11,0.08,0.1,0.09,0.1,0.13,0.12,0.12,0.1,0.1,0.08,0.12,0.07,0,9.87,1.34,2750,968.75,1900,1.85,3.11,1.5,2.45,3.91,2.45,10.41},1},
{{0.08,0.11,0.13,0.11,0.09,0.09,0.13,0.09,0.09,0.09,0.14,0.07,0.07,0.13,0.11,0.1,0.12,0.09,0.07,0.1,0.09,0.09,0.08,0.12,0.12,0.1,0.12,0.08,0.09,0.12,0,9.48,1.68,1200,805.56,1125,1.99,3.65,1.78,2.54,4.5,2.54,10.23},1},
{{0.07,0.03,0.04,0.09,0.06,0.04,0.04,0.06,0.06,0.1,0.05,0.11,0.09,0.05,0.02,0.03,0.03,0.06,0.06,0.08,0.08,0.04,0.05,0.03,0.07,0.07,0.03,0.07,0.06,0.09,0,5.65,0.9,1200,805.56,1125,1.07,2.75,1.07,2.58,6.54,2.58,6.09},1},
{{0.16,0.25,0.14,0.07,0.02,0.05,0.06,0.09,0.09,0.11,0.01,0.04,0.07,0.03,0.05,0.12,0.18,0.22,0.1,0.18,0.12,0.15,0.1,0.12,0.07,0.07,0.08,0.08,0.09,0.14,0,7.27,-0.05,1050,1408.33,1400,7.68,2.85,2.84,9.09,3.78,9.09,11.86},2},
{{0.14,0.16,0.07,0.07,0.06,0.11,0.08,0.1,0.09,0.12,0.02,0.11,0.04,0.09,0.1,0.16,0.17,0.09,0.09,0.15,0.16,0.12,0.11,0.11,0.09,0.08,0.09,0.08,0.09,0.1,0,6.18,-0.62,1050,1050,525,8.59,2.73,2.48,9.93,3.71,9.93,11.77},2},
{{0.1,0.14,0.05,0.1,0.04,0.13,0.1,0.18,0.12,0.06,0.09,0.12,0.03,0.11,0.08,0.14,0.12,0.12,0.12,0.09,0.1,0.1,0.14,0.07,0.06,0.17,0.08,0.09,0.1,0.12,0,5.36,0.05,1587.5,1280,1750,8.69,2.58,2.26,9.64,3.42,9.64,11.27},2},
{{0.11,0.1,0.12,0.06,0.09,0.08,0.11,0.16,0.09,0.11,0.08,0.18,0.07,0.09,0.09,0.09,0.07,0.1,0.16,0.09,0.09,0.13,0.12,0.08,0.1,0.07,0.13,0.11,0.11,0.09,0,5.35,-0.03,716.67,1283.33,1650,8.81,2.91,2.26,9.9,3.7,9.9,11.32},2},
{{0.14,0.12,0.1,0.11,0.09,0.06,0.06,0.13,0.11,0.11,0.09,0.1,0.09,0.11,0.1,0.14,0.08,0.05,0.15,0.11,0.13,0.08,0.13,0.13,0.08,0.07,0.06,0.11,0.13,0.11,0,5.6,-0.09,1000,1241.67,2150,8.53,3.06,2.5,9.75,4.07,9.75,11.44},2},
{{0.15,0.09,0.11,0.09,0.06,0.05,0.1,0.09,0.14,0.15,0.12,0.13,0.11,0.1,0.11,0.04,0.08,0.09,0.09,0.15,0.11,0.14,0.15,0.15,0.06,0.06,0.05,0.11,0.07,0.13,0,5.35,-0.16,1000,3175,2650,8.98,3.44,2.52,10.26,4.65,10.26,11.82},2},
{{0.13,0.14,0.1,0.08,0.05,0.08,0.09,0.14,0.08,0.14,0.11,0.13,0.09,0.07,0.13,0.07,0.13,0.1,0.11,0.1,0.13,0.1,0.18,0.11,0.06,0.03,0.09,0.09,0.11,0.12,0,5.22,-0.16,2900,1600,3450,8.73,2.78,2.57,9.94,3.69,9.94,11.42},2},
{{0.13,0.12,0.1,0.09,0.07,0.07,0.09,0.13,0.11,0.09,0.12,0.06,0.13,0.12,0.1,0.1,0.08,0.09,0.12,0.11,0.17,0.07,0.11,0.12,0.12,0.05,0.06,0.11,0.09,0.12,0,5.29,-0.26,1064.29,1050,2350,8.81,2.84,2.68,10.07,3.83,10.07,11.59},2},
{{0.12,0.13,0.06,0.1,0.08,0.08,0.1,0.11,0.1,0.14,0.11,0.12,0.14,0.1,0.09,0.06,0.09,0.09,0.1,0.12,0.07,0.17,0.09,0.14,0.11,0.05,0.07,0.08,0.1,0.14,0,5.19,0.02,1180,1250,1825,8.99,3.16,2.49,10.19,4.25,10.19,11.66},2},
{{0.09,0.17,0.07,0.08,0.1,0.09,0.07,0.11,0.12,0.12,0.12,0.14,0.08,0.1,0.09,0.08,0.11,0.1,0.09,0.11,0.09,0.09,0.11,0.13,0.14,0.07,0.1,0.08,0.08,0.13,0,5.04,0.08,950,1280,2650,8.93,2.94,2.24,10.1,3.98,10.1,11.44},2},
{{0.09,0.15,0.07,0.1,0.07,0.1,0.05,0.16,0.12,0.09,0.1,0.12,0.07,0.14,0.07,0.12,0.1,0.11,0.08,0.11,0.09,0.08,0.1,0.14,0.11,0.11,0.08,0.08,0.08,0.15,0,5.06,0.22,1550,2083.33,3400,8.85,2.69,2.41,9.91,3.69,9.91,11.38},2},
{{0.11,0.14,0.09,0.08,0.09,0.08,0.08,0.13,0.1,0.1,0.14,0.09,0.08,0.15,0.07,0.11,0.13,0.11,0.04,0.12,0.09,0.08,0.1,0.12,0.14,0.1,0.12,0.07,0.09,0.11,0,4.93,0.1,983.33,1033.33,2400,8.76,2.66,2.29,9.93,3.69,9.93,11.26},2},
{{0.11,0.13,0.09,0.08,0.09,0.06,0.13,0.14,0.08,0.11,0.09,0.14,0.04,0.14,0.08,0.1,0.13,0.11,0.1,0.1,0.1,0.11,0.13,0.13,0.08,0.06,0.09,0.11,0.08,0.13,0,5.05,0.11,1062.5,2100,2483.33,8.68,2.58,2.43,9.8,3.53,9.8,11.24},2},
{{0.1,0.08,0.1,0.12,0.1,0.1,0.11,0.13,0.07,0.09,0.1,0.08,0.09,0.12,0.09,0.12,0.14,0.11,0.09,0.09,0.09,0.1,0.08,0.13,0.09,0.15,0.07,0.07,0.11,0.12,0,5.16,0.06,1370,1987.5,2283.33,8.66,2.46,2.15,9.67,3.4,9.67,11.1},2},
{{0.08,0.11,0.09,0.09,0.1,0.13,0.11,0.15,0.08,0.07,0.08,0.09,0.08,0.12,0.14,0.12,0.11,0.13,0.07,0.09,0.04,0.09,0.08,0.15,0.13,0.1,0.12,0.1,0.14,0.07,0,5.03,0.15,1300,2212.5,3350,8.68,2.28,1.82,9.58,3.2,9.58,10.9},2},
{{0.16,0.03,0.1,0.11,0.06,0.15,0.13,0.08,0.12,0.05,0.06,0.15,0.1,0.09,0.08,0.1,0.12,0.08,0.15,0.09,0.12,0.1,0.06,0.14,0.12,0.1,0.09,0.11,0.1,0.08,0,5.35,-0.2,1120,1516.67,2600,8.45,2.75,2.07,9.61,3.73,9.61,11.08},2},
{{0.13,0.07,0.1,0.1,0.13,0.07,0.09,0.08,0.14,0.09,0.08,0.14,0.1,0.09,0.09,0.1,0.1,0.1,0.14,0.09,0.1,0.09,0.07,0.16,0.07,0.06,0.12,0.16,0.11,0.08,0,5.23,0.06,1075,850,1075,8.8,2.8,2.2,9.92,3.7,9.92,11.39},2},
{{0.13,0.1,0.07,0.11,0.12,0.09,0.07,0.11,0.09,0.11,0.12,0.16,0.13,0.07,0.09,0.08,0.08,0.03,0.11,0.15,0.15,0.07,0.07,0.11,0.09,0.06,0.09,0.17,0.1,0.11,0,5.2,-0.09,1075,2616.67,2200,8.72,3.47,2.46,9.9,4.61,9.9,11.51},2},
{{0.1,0.13,0.05,0.15,0.15,0.06,0.07,0.08,0.1,0.12,0.13,0.16,0.08,0.13,0.08,0.07,0.06,0.08,0.12,0.1,0.08,0.12,0.08,0.11,0.09,0.08,0.14,0.12,0.15,0.05,0,4.64,-0.06,1116.67,1700,3400,8.8,3.11,2.02,9.94,4.29,9.94,11.19},2},
{{0.08,0.1,0.07,0.13,0.12,0.09,0.1,0.12,0.13,0.07,0.09,0.13,0.12,0.14,0.1,0.06,0.06,0.09,0.12,0.12,0.15,0.1,0.08,0.05,0.09,0.08,0.14,0.12,0.11,0.11,0,5.08,-0.05,1135.71,1820,2275,8.89,3.05,2.33,9.84,4.07,9.84,11.4},2},
{{0.09,0.08,0.09,0.14,0.12,0.08,0.16,0.07,0.09,0.09,0.12,0.1,0.12,0.1,0.08,0.1,0.07,0.11,0.14,0.08,0.12,0.09,0.07,0.11,0.12,0.09,0.14,0.11,0.11,0.06,0,4.87,-0.22,1566.67,4075,1825,8.82,2.92,2.01,9.83,3.93,9.83,11.28},2},
{{0.1,0.1,0.1,0.1,0.1,0.12,0.1,0.09,0.12,0.09,0.1,0.11,0.1,0.13,0.08,0.11,0.08,0.1,0.14,0.07,0.12,0.08,0.1,0.12,0.08,0.1,0.13,0.1,0.11,0.09,0,4.84,-0.13,1321.43,2300,1925,8.73,2.68,2.16,9.77,3.68,9.77,11.18},2},
{{0.09,0.09,0.09,0.11,0.05,0.17,0.12,0.1,0.11,0.07,0.1,0.11,0.13,0.07,0.07,0.12,0.11,0.09,0.13,0.09,0.11,0.09,0.13,0.08,0.11,0.07,0.11,0.13,0.09,0.1,0,5.02,0.03,1366.67,2350,2325,8.84,2.77,2.26,9.73,3.79,9.73,11.31},2},
{{0.13,0.07,0.12,0.08,0.14,0.14,0.1,0.09,0.07,0.07,0.06,0.1,0.17,0.07,0.07,0.12,0.13,0.08,0.13,0.09,0.13,0.07,0.08,0.09,0.13,0.09,0.14,0.13,0.08,0.09,0,5.21,-0.14,1358.33,1158.33,1800,8.27,2.63,2.11,9.27,3.59,9.27,10.87},2},
{{0.11,0.08,0.11,0.09,0.14,0.11,0.09,0.1,0.08,0.08,0.09,0.06,0.13,0.1,0.1,0.16,0.11,0.05,0.13,0.11,0.13,0.11,0.03,0.12,0.09,0.08,0.15,0.12,0.11,0.08,0,5.23,-0.12,1000,1750,1933.33,8.56,2.53,2.19,9.6,3.47,9.6,11.15},2},
{{0.09,0.12,0.07,0.15,0.1,0.06,0.14,0.04,0.13,0.08,0.11,0.1,0.08,0.11,0.13,0.11,0.08,0.05,0.16,0.11,0.11,0.15,0.07,0.09,0.06,0.11,0.15,0.06,0.11,0.11,0,5.12,-0.1,1700,800,1775,8.79,3.04,2.28,9.88,4.21,9.88,11.45},2},
{{0.1,0.08,0.18,0.12,0.06,0.08,0.11,0.11,0.1,0.08,0.09,0.14,0.08,0.14,0.09,0.08,0.1,0.09,0.09,0.13,0.12,0.13,0.06,0.11,0.12,0.09,0.12,0.09,0.07,0.11,0,5.22,-0.02,250,550,775,8.36,2.84,2.36,9.36,3.76,9.36,11.07},2},
{{0.11,0.1,0.13,0.12,0.09,0.09,0.07,0.13,0.12,0.06,0.09,0.09,0.14,0.1,0.12,0.1,0.08,0.08,0.1,0.13,0.1,0.11,0.05,0.12,0.13,0.11,0.12,0.11,0.07,0.1,0,5.36,-0.12,1810,3950,2066.67,8.49,2.89,2.09,9.5,3.83,9.5,11.09},2},
{{0.12,0.09,0.1,0.1,0.09,0.1,0.11,0.1,0.08,0.13,0.12,0.1,0.07,0.07,0.11,0.16,0.1,0.06,0.14,0.09,0.15,0.08,0.06,0.16,0.12,0.07,0.07,0.08,0.08,0.16,0,5.26,0.07,1125,2225,1150,8.79,2.77,2.44,9.87,3.82,9.87,11.4},2},
{{0.1,0.09,0.1,0.17,0.08,0.07,0.13,0.07,0.11,0.09,0.12,0.08,0.1,0.09,0.13,0.11,0.14,0.07,0.1,0.08,0.11,0.07,0.09,0.1,0.1,0.13,0.09,0.13,0.1,0.1,0,4.89,-0.02,725,525,550,8.66,2.59,2.31,9.66,3.67,9.66,11.14},2},
{{0.11,0.09,0.04,0.18,0.13,0.09,0.09,0.09,0.09,0.11,0.1,0.13,0.08,0.13,0.06,0.11,0.11,0.11,0.09,0.1,0.15,0.15,0.12,0.07,0.11,0.1,0.08,0.06,0.06,0.12,0,4.98,-0.42,1325,3400,1933.33,8.77,2.59,2.35,9.86,3.5,9.86,11.28},2},
{{0.1,0.08,0.09,0.15,0.08,0.1,0.1,0.13,0.09,0.09,0.07,0.15,0.12,0.09,0.08,0.07,0.1,0.13,0.09,0.13,0.13,0.08,0.12,0.11,0.06,0.1,0.1,0.11,0.1,0.1,0,5.45,-0.12,1157.14,1830,2825,8.81,2.96,2.41,9.83,3.94,9.83,11.55},2},
{{0.1,0.1,0.13,0.12,0.09,0.08,0.1,0.08,0.15,0.06,0.11,0.1,0.11,0.1,0.11,0.11,0.08,0.09,0.13,0.09,0.14,0.11,0.1,0.09,0.07,0.12,0.08,0.12,0.1,0.09,0,5.02,-0.26,1140,2683.33,2200,8.7,2.85,2.38,9.78,3.93,9.78,11.31},2},
{{0.11,0.07,0.16,0.12,0.07,0.09,0.08,0.1,0.1,0.1,0.1,0.1,0.14,0.07,0.09,0.1,0.08,0.14,0.09,0.1,0.12,0.14,0.08,0.07,0.13,0.07,0.13,0.07,0.12,0.1,0,5.21,-0.27,4550,1125,2650,8.8,2.85,2.33,9.91,3.81,9.91,11.43},2},
{{0.11,0.06,0.12,0.14,0.09,0.09,0.12,0.09,0.09,0.1,0.12,0.06,0.12,0.11,0.1,0.11,0.08,0.12,0.09,0.1,0.13,0.07,0.1,0.11,0.1,0.09,0.1,0.13,0.08,0.12,0,5.21,0.01,971.43,2287.5,2250,8.73,2.65,2.35,9.76,3.61,9.76,11.34},2},
{{0.09,0.07,0.14,0.11,0.08,0.12,0.12,0.1,0.11,0.06,0.07,0.08,0.13,0.09,0.12,0.1,0.14,0.09,0.13,0.08,0.11,0.07,0.12,0.1,0.1,0.1,0.13,0.07,0.11,0.12,0,5.17,-0.05,1142.86,1725,2800,8.7,2.37,2.22,9.61,3.24,9.61,11.16},2},
{{0.09,0.09,0.12,0.11,0.12,0.09,0.15,0.1,0.08,0.06,0.08,0.09,0.12,0.09,0.13,0.11,0.1,0.12,0.12,0.06,0.09,0.12,0.1,0.14,0.14,0.1,0.06,0.08,0.08,0.12,0,5.06,-0.11,1285.71,1850,1750,8.58,2.35,2.25,9.52,3.21,9.52,11.02},2},
{{0.09,0.07,0.11,0.12,0.12,0.11,0.14,0.11,0.09,0.06,0.09,0.06,0.12,0.1,0.07,0.13,0.13,0.18,0.07,0.08,0.05,0.1,0.17,0.13,0.11,0.09,0.08,0.11,0.12,0.07,0,5.17,0.07,1130,1516.67,2275,8.54,2.43,2,9.42,3.42,9.42,11.05},2},
{{0.09,0.11,0.12,0.09,0.09,0.11,0.13,0.1,0.09,0.09,0.08,0.1,0.1,0.11,0.05,0.14,0.18,0.11,0.05,0.11,0.08,0.1,0.11,0.19,0.08,0.11,0.08,0.07,0.09,0.11,0,5.17,0.03,1250,1321.43,3050,8.72,2.42,2.2,9.75,3.44,9.75,11.25},2},
{{0.07,0.09,0.14,0.12,0.07,0.17,0.11,0.07,0.1,0.06,0.09,0.11,0.07,0.14,0.12,0.12,0.06,0.1,0.13,0.1,0.1,0.14,0.15,0.07,0.09,0.05,0.07,0.17,0.11,0.08,0,5.22,-0.21,250,550,2083.33,8.68,2.78,2.26,9.6,3.75,9.6,11.2},2},
{{0.08,0.09,0.09,0.13,0.11,0.15,0.11,0.08,0.1,0.07,0.11,0.09,0.13,0.09,0.09,0.1,0.12,0.09,0.11,0.09,0.11,0.11,0.11,0.13,0.07,0.08,0.09,0.13,0.09,0.1,0,5.04,-0.11,1425,1312.5,2550,8.57,2.71,2.21,9.45,3.7,9.45,11.08},2},
{{0.1,0.11,0.11,0.1,0.11,0.08,0.09,0.13,0.07,0.12,0.15,0.08,0.09,0.09,0.08,0.08,0.12,0.12,0.11,0.1,0.13,0.08,0.12,0.11,0.07,0.09,0.09,0.12,0.1,0.1,0,4.97,-0.08,785,1150,2225,8.86,2.97,2.37,10,4.09,10,11.55},2},
{{0.1,0.07,0.1,0.11,0.17,0.08,0.11,0.07,0.1,0.09,0.14,0.05,0.1,0.11,0.12,0.12,0.11,0.09,0.09,0.1,0.12,0.09,0.12,0.07,0.06,0.15,0.12,0.13,0.1,0.07,0,4.88,-0.15,877.78,3925,3950,8.76,2.59,2.06,9.81,3.64,9.81,11.17},2},
{{0.08,0.06,0.12,0.05,0.21,0.13,0.1,0.13,0.07,0.05,0.08,0.09,0.13,0.14,0.13,0.11,0.11,0.07,0.08,0.08,0.07,0.07,0.12,0.15,0.11,0.13,0.12,0.11,0.1,0.06,0,4.8,-0.13,1462.5,1950,2925,8.66,2.28,1.73,9.49,3.25,9.49,10.79},2},
{{0.09,0.08,0.1,0.13,0.09,0.15,0.11,0.08,0.1,0.09,0.1,0.1,0.09,0.1,0.12,0.08,0.09,0.15,0.11,0.08,0.09,0.07,0.12,0.11,0.09,0.08,0.16,0.09,0.12,0.08,0,4.98,0.05,1558.33,1875,1750,8.72,2.62,2.07,9.68,3.58,9.68,11.15},2},
{{0.09,0.07,0.1,0.1,0.16,0.09,0.09,0.15,0.07,0.08,0.09,0.1,0.14,0.11,0.13,0.08,0.11,0.09,0.08,0.09,0.06,0.1,0.14,0.07,0.08,0.13,0.19,0.07,0.13,0.06,0,4.8,0.03,1325,2483.33,2875,8.73,2.47,1.84,9.63,3.48,9.63,10.93},2},
{{0.08,0.07,0.11,0.07,0.15,0.11,0.15,0.1,0.08,0.1,0.13,0.04,0.11,0.12,0.1,0.18,0.08,0.08,0.1,0.09,0.12,0.08,0.07,0.07,0.09,0.13,0.11,0.12,0.15,0.09,0,4.86,0.19,1133.33,2275,1466.67,8.94,2.57,2.12,9.91,3.71,9.91,11.25},2},
{{0.08,0.09,0.11,0.07,0.09,0.18,0.11,0.09,0.11,0.06,0.09,0.11,0.07,0.1,0.09,0.13,0.12,0.11,0.12,0.07,0.08,0.11,0.1,0.1,0.08,0.12,0.11,0.13,0.1,0.09,0,5.02,0.12,1390,1150,3475,8.71,2.54,2,9.65,3.55,9.65,11.11},2},
{{0.08,0.1,0.11,0.06,0.14,0.11,0.11,0.1,0.13,0.07,0.14,0.06,0.09,0.1,0.08,0.2,0.08,0.1,0.06,0.11,0.06,0.11,0.09,0.08,0.08,0.19,0.11,0.14,0.11,0.06,0,4.98,0.1,1150,766.67,1750,8.85,2.5,1.77,9.8,3.52,9.8,11.11},2},
{{0.11,0.08,0.11,0.07,0.13,0.11,0.1,0.13,0.1,0.06,0.1,0.11,0.1,0.09,0.15,0.07,0.11,0.14,0.08,0.08,0.06,0.13,0.11,0.1,0.1,0.12,0.11,0.14,0.08,0.09,0,4.89,0.02,1830,2266.67,2275,8.69,2.48,2,9.66,3.39,9.66,11.02},2},
{{0.09,0.13,0.1,0.08,0.09,0.1,0.12,0.11,0.08,0.13,0.13,0.11,0.12,0.1,0.06,0.09,0.09,0.08,0.09,0.14,0.09,0.09,0.11,0.08,0.09,0.14,0.09,0.09,0.14,0.1,0,5.08,0.2,1316.67,1387.5,3300,8.88,3.11,2.22,9.9,4.14,9.9,11.42},2},
{{0.09,0.13,0.11,0.09,0.07,0.13,0.11,0.07,0.13,0.07,0.11,0.1,0.11,0.11,0.13,0.08,0.12,0.1,0.07,0.1,0.09,0.09,0.1,0.1,0.1,0.1,0.14,0.05,0.14,0.12,0,4.9,0.24,2100,800,350,8.59,2.67,2.28,9.61,3.75,9.61,11.06},2},
{{0.1,0.12,0.1,0.1,0.12,0.08,0.11,0.09,0.1,0.1,0.12,0.08,0.12,0.15,0.07,0.09,0.09,0.13,0.05,0.13,0.07,0.11,0.07,0.11,0.09,0.13,0.11,0.08,0.1,0.16,0,5.02,0.46,1150,1125,2225,8.72,2.81,2.3,9.77,3.83,9.77,11.29},2},
{{0.09,0.12,0.07,0.09,0.14,0.12,0.08,0.09,0.12,0.09,0.14,0.08,0.11,0.1,0.1,0.11,0.08,0.1,0.13,0.08,0.06,0.1,0.13,0.08,0.09,0.12,0.14,0.11,0.09,0.1,0,4.93,0.18,1292.86,2800,3375,8.84,2.84,1.99,9.82,3.85,9.82,11.27},2},
{{0.08,0.12,0.11,0.06,0.13,0.11,0.12,0.08,0.11,0.11,0.13,0.1,0.11,0.1,0.09,0.08,0.12,0.12,0.06,0.11,0.08,0.09,0.1,0.1,0.1,0.12,0.12,0.08,0.1,0.14,0,4.81,0.35,1350,1150,1650,8.83,2.84,2.3,9.82,3.92,9.82,11.28},2},
{{0.1,0.11,0.09,0.06,0.14,0.11,0.13,0.04,0.12,0.11,0.13,0.08,0.14,0.08,0.11,0.1,0.08,0.11,0.08,0.11,0.04,0.1,0.08,0.08,0.15,0.12,0.17,0.07,0.08,0.13,0,4.99,0.32,1125,1125,350,8.77,2.78,1.95,9.82,3.77,9.82,11.21},2},
{{0.08,0.08,0.13,0.09,0.12,0.1,0.12,0.1,0.1,0.1,0.11,0.1,0.11,0.11,0.11,0.09,0.1,0.13,0.07,0.09,0.09,0.08,0.12,0.1,0.1,0.17,0.08,0.05,0.12,0.12,0,4.95,0.26,1325,3975,3425,8.81,2.61,2.26,9.75,3.57,9.75,11.23},2},
{{0.09,0.12,0.04,0.14,0.05,0.14,0.14,0.1,0.11,0.07,0.1,0.09,0.08,0.14,0.14,0.07,0.13,0.12,0.05,0.12,0.05,0.08,0.12,0.08,0.13,0.11,0.09,0.1,0.13,0.13,0,4.92,0.56,2650,2883.33,1675,8.76,2.6,2.25,9.71,3.64,9.71,11.18},2},
{{0.08,0.14,0.09,0.09,0.09,0.12,0.13,0.06,0.13,0.09,0.14,0.06,0.08,0.09,0.14,0.1,0.14,0.05,0.11,0.11,0.08,0.11,0.02,0.13,0.08,0.1,0.14,0.13,0.13,0.11,0,5.08,0.49,1108.33,1487.5,2175,8.78,2.85,2.2,9.79,3.94,9.79,11.34},2},
{{0.07,0.12,0.11,0.08,0.1,0.12,0.13,0.06,0.15,0.07,0.12,0.06,0.16,0.06,0.1,0.07,0.12,0.12,0.13,0.09,0.1,0.1,0.05,0.06,0.18,0.13,0.08,0.1,0.14,0.08,0,5.12,0.1,1425,1150,1125,8.9,2.84,2.02,9.88,3.8,9.88,11.4},2},
{{0.1,0.07,0.1,0.07,0.16,0.17,0.08,0.09,0.09,0.06,0.11,0.06,0.11,0.12,0.11,0.09,0.1,0.13,0.11,0.08,0.08,0.09,0.09,0.08,0.15,0.12,0.11,0.11,0.11,0.08,0,5.02,0.11,1100,900,550,8.68,2.53,2.14,9.7,3.46,9.7,11.17},2},
{{0.09,0.08,0.08,0.09,0.07,0.1,0.07,0.11,0.07,0.07,0.06,0.07,0.09,0.06,0.11,0.07,0.07,0.15,0.07,0.09,0.04,0.09,0.06,0.08,0.1,0.1,0.13,0.08,0.08,0.08,0,4.57,0.23,1380,2266.67,3625,7.1,2.18,1.67,9.68,3.75,9.68,9.36},2},
{{0.12,0.11,0.05,0.09,0.05,0.09,0.08,0.13,0.13,0.18,0.16,0.07,0.03,0.08,0.14,0.14,0.1,0.11,0.09,0.1,0.05,0.09,0.1,0.12,0.09,0.08,0.12,0.15,0.12,0.11,0,9.72,-0.5,2475,1000,1483.33,3.83,3.45,1.83,4.64,4.51,4.64,11.19},5},
{{0.06,0.1,0.1,0.11,0.18,0.08,0.12,0.11,0.08,0.08,0.11,0.11,0.1,0.1,0.09,0.1,0.1,0.08,0.12,0.11,0.07,0.08,0.12,0.19,0.12,0.1,0.06,0.06,0.09,0.13,0,9.98,-0.96,1850,1093.75,2225,2.98,3.4,1.61,3.64,4.09,3.64,10.86},5},
{{0.1,0.08,0.09,0.13,0.1,0.11,0.16,0.08,0.11,0.07,0.07,0.11,0.13,0.08,0.12,0.09,0.12,0.09,0.1,0.11,0.13,0.1,0.11,0.09,0.16,0.04,0.1,0.09,0.06,0.13,0,9.88,-1.27,2625,2616.67,2933.33,3.07,3.14,2.01,3.73,3.75,3.73,10.95},5},
{{0.1,0.1,0.12,0.13,0.07,0.1,0.07,0.1,0.11,0.12,0.1,0.11,0.11,0.1,0.09,0.1,0.11,0.11,0.07,0.12,0.12,0.09,0.1,0.1,0.1,0.12,0.11,0.06,0.12,0.11,0,9.95,-1.06,2150,1433.33,2525,3.23,3.23,1.88,4.06,3.91,4.06,11.02},5},
{{0.07,0.05,0.1,0.11,0.12,0.19,0.1,0.08,0.09,0.1,0.08,0.12,0.11,0.15,0.09,0.07,0.1,0.12,0.12,0.05,0.08,0.14,0.07,0.07,0.09,0.14,0.14,0.12,0.11,0.06,0,9.62,-1,1850,1100,550,3.24,2.99,1.64,4,3.54,4,10.61},5},
{{0.11,0.12,0.12,0.09,0.08,0.09,0.07,0.14,0.09,0.1,0.1,0.12,0.08,0.11,0.09,0.1,0.1,0.11,0.11,0.11,0.13,0.08,0.1,0.08,0.06,0.11,0.1,0.14,0.12,0.1,0,9.98,-0.88,2500,1483.33,2800,3.24,3.25,2.02,4.07,3.91,4.07,11.07},5},
{{0.14,0.15,0.1,0.07,0.11,0.04,0.11,0.05,0.09,0.07,0.08,0.08,0.14,0.1,0.1,0.1,0.09,0.08,0.08,0.11,0.14,0.12,0.08,0.09,0.08,0.1,0.09,0.09,0.07,0.1,0,9.19,-1.13,2666.67,3950,2275,2.84,2.86,1.95,3.9,3.8,3.9,10.26},5},
{{0.13,0.14,0.11,0.1,0.08,0.07,0.08,0.11,0.1,0.1,0.04,0.09,0.12,0.11,0.08,0.07,0.14,0.16,0.11,0.09,0.09,0.09,0.12,0.13,0.06,0.12,0.11,0.12,0.1,0.1,0,9.69,0.61,2825,1790,700,5.1,3.17,3.13,6.62,3.93,6.62,12.27},1},
{{0.07,0.19,0.14,0.06,0.11,0.11,0.09,0.11,0.07,0.07,0.04,0.1,0.09,0.12,0.11,0.15,0.1,0.11,0.1,0.11,0.06,0.07,0.09,0.12,0.13,0.16,0.14,0.07,0.1,0.07,0,9.42,0.56,3175,445,950,4.74,3.1,2.69,6.25,3.88,6.25,11.75},1},
{{0.1,0.09,0.12,0.15,0.09,0.1,0.1,0.1,0.12,0.06,0.11,0.1,0.1,0.1,0.09,0.07,0.09,0.13,0.09,0.14,0.11,0.08,0.11,0.07,0.12,0.1,0.1,0.15,0.1,0.08,0,9.3,0.61,2475,1900,3900,5.07,3.8,3.17,6.35,4.65,6.35,12},1},
{{0.14,0.07,0.08,0.09,0.13,0.09,0.14,0.1,0.1,0.09,0.17,0.08,0.06,0.06,0.07,0.09,0.1,0.11,0.15,0.12,0.12,0.16,0.09,0.08,0.08,0.08,0.1,0.09,0.09,0.13,0,9.32,0.47,2883.33,813.64,3575,5.56,4.06,3.66,6.87,4.92,6.87,12.55},1},
{{0.12,0.12,0.11,0.09,0.1,0.11,0.1,0.11,0.08,0.09,0.09,0.1,0.06,0.13,0.06,0.15,0.11,0.09,0.11,0.11,0.09,0.09,0.09,0.12,0.09,0.12,0.12,0.13,0.08,0.1,0,9.26,0.47,2566.67,1310,2083.33,5.22,3.4,3.02,6.49,4.33,6.49,11.89},1},
{{0.09,0.04,0.12,0.12,0.1,0.15,0.07,0.1,0.11,0.11,0.08,0.1,0.13,0.09,0.21,0.11,0.07,0.06,0.08,0.09,0.08,0.1,0.12,0.11,0.15,0.06,0.1,0.11,0.08,0.12,0,8.6,0.51,1425,1316.67,1100,5.81,2.97,3.19,7.12,3.93,7.12,11.74},1},
{{0.08,0.09,0.09,0.11,0.11,0.11,0.1,0.09,0.12,0.13,0.11,0.13,0.12,0.1,0.09,0.12,0.1,0.07,0.1,0.09,0.13,0.11,0.11,0.08,0.13,0.06,0.07,0.06,0.15,0.12,0,8.58,0.5,1116.67,3100,2500,6.2,3.28,3.48,7.76,4.13,7.76,12.04},1},
{{0.05,0.04,0.02,0.06,0.08,0.06,0.08,0.09,0.11,0.16,0.15,0.09,0.09,0.09,0.07,0.04,0.06,0.07,0.05,0.04,0.1,0.07,0.09,0.06,0.05,0.09,0.06,0.06,0.09,0.06,0,5.33,0.24,920,1100,2116.67,5.52,2.56,2.45,8.91,4.53,8.91,8.8},1},
{{0.34,0.12,0.12,0.1,0.09,0.07,0.07,0.04,0.04,0.04,0.13,0.11,0.08,0.08,0.11,0.05,0.09,0.1,0.1,0.18,0.07,0.09,0.09,0.09,0.11,0.14,0.1,0.12,0.16,0.04,0,9.6,1.33,3175,961.11,4500,2.58,4.41,1.9,3.25,5.29,3.25,10.56},2},
{{0.28,0.16,0.16,0.14,0.14,0.07,0.04,0.03,0.01,0,0.05,0.11,0.06,0.09,0.09,0.15,0.11,0.16,0.1,0.1,0.04,0.12,0.16,0.16,0.15,0.1,0.1,0.07,0.06,0.06,0,9.77,1.11,725,1300,2266.67,1.85,3.1,1.73,2.26,3.77,2.26,10.33},2},
{{0.29,0.16,0.15,0.17,0.11,0.09,0.04,0.01,0,0,0.06,0.08,0.08,0.09,0.14,0.14,0.08,0.13,0.11,0.13,0.03,0.09,0.14,0.17,0.18,0.17,0.06,0.05,0.06,0.08,0,9.86,1.3,2000,570.59,1637.5,1.79,3.21,1.81,2.21,3.88,2.21,10.46},2},
{{0.25,0.18,0.17,0.12,0.14,0.1,0.04,0.02,0.01,0,0.07,0.07,0.08,0.09,0.15,0.1,0.09,0.15,0.15,0.07,0.06,0.08,0.13,0.19,0.11,0.17,0.11,0.04,0.07,0.06,0,9.75,1.14,3900,777.27,1530,1.84,3.2,1.67,2.23,3.83,2.23,10.34},2},
{{0.3,0.11,0.14,0.13,0.17,0.1,0.05,0.01,0.01,0,0.09,0.11,0.04,0.08,0.07,0.12,0.12,0.12,0.12,0.15,0.08,0.11,0.11,0.15,0.19,0.13,0.08,0.03,0.1,0.06,0,9.92,1.06,4475,578.13,2783.33,2.01,3.57,1.76,2.38,4.34,2.38,10.55},2},
{{0.27,0.15,0.11,0.11,0.15,0.13,0.07,0.03,0,0,0.08,0.08,0.07,0.07,0.15,0.14,0.06,0.14,0.11,0.12,0.12,0.11,0.1,0.14,0.09,0.15,0.11,0.06,0.08,0.07,0,9.76,1.07,850,1670,4175,2.06,3.39,1.94,2.45,4.15,2.45,10.47},2},
{{0.24,0.17,0.1,0.13,0.08,0.14,0.11,0.03,0.02,0,0.09,0.07,0.09,0.07,0.11,0.11,0.15,0.11,0.11,0.12,0.14,0.1,0.13,0.07,0.14,0.12,0.12,0.08,0.07,0.06,0,9.87,1.03,1875,605,1650,2.1,3.39,2,2.58,4.16,2.58,10.65},2},
{{0.24,0.06,0.13,0.13,0.08,0.12,0.09,0.11,0.04,0.01,0.09,0.09,0.06,0.1,0.15,0.08,0.09,0.1,0.1,0.17,0.11,0.11,0.11,0.08,0.14,0.16,0.06,0.09,0.08,0.08,0,9.79,1.17,4400,1816.67,2116.67,2.59,3.67,2,3.13,4.44,3.13,10.72},2},
{{0.15,0.17,0.09,0.14,0.06,0.12,0.14,0.09,0.05,0.03,0.1,0.1,0.08,0.12,0.08,0.12,0.1,0.1,0.11,0.11,0.13,0.12,0.09,0.09,0.09,0.12,0.11,0.09,0.07,0.1,0,9.39,1.32,4425,925,1490,2.53,3.53,2.29,3.18,4.24,3.18,10.43},2},
{{0.17,0.13,0.14,0.07,0.12,0.12,0.11,0.07,0.06,0.03,0.09,0.08,0.09,0.12,0.09,0.09,0.12,0.12,0.16,0.08,0.12,0.15,0.1,0.11,0.07,0.1,0.11,0.07,0.11,0.09,0,9.53,1.29,600,758.33,1290,2.54,3.45,2.28,3.19,4.1,3.19,10.55},2},
{{0.14,0.11,0.14,0.11,0.09,0.12,0.1,0.11,0.07,0.03,0.1,0.09,0.13,0.09,0.08,0.1,0.09,0.11,0.13,0.11,0.1,0.13,0.1,0.11,0.1,0.13,0.11,0.07,0.09,0.09,0,9.43,1.36,1566.67,938.89,2516.67,2.72,3.67,2.19,3.35,4.36,3.35,10.5},2},
{{0.11,0.12,0.09,0.08,0.11,0.07,0.12,0.13,0.13,0.06,0.1,0.09,0.13,0.07,0.13,0.07,0.12,0.08,0.12,0.11,0.11,0.12,0.08,0.08,0.09,0.08,0.16,0.09,0.12,0.09,0,9.29,1.5,1650,850,2125,3.22,3.59,2.19,3.9,4.3,3.9,10.56},2},
{{0.09,0.16,0.1,0.11,0.09,0.1,0.09,0.09,0.11,0.08,0.11,0.11,0.08,0.09,0.1,0.1,0.1,0.12,0.1,0.12,0.14,0.13,0.11,0.09,0.03,0.08,0.08,0.09,0.15,0.12,0,9.26,1.52,1100,950,2183.33,3.02,3.69,2.59,3.74,4.43,3.74,10.6},2},
{{0.1,0.11,0.12,0.08,0.09,0.1,0.11,0.12,0.16,0.03,0.11,0.08,0.12,0.1,0.11,0.05,0.13,0.12,0.1,0.11,0.13,0.08,0.12,0.12,0.06,0.1,0.09,0.13,0.1,0.1,0,9.25,1.42,2333.33,631.82,925,3.09,3.64,2.26,3.77,4.3,3.77,10.5},2},
{{0.07,0.13,0.12,0.1,0.1,0.09,0.07,0.13,0.14,0.07,0.09,0.09,0.12,0.1,0.11,0.09,0.12,0.1,0.12,0.09,0.15,0.1,0.09,0.04,0.1,0.09,0.11,0.13,0.1,0.11,0,9.31,1.56,1290,596.88,1730,3.2,3.4,2.48,3.91,4.04,3.91,10.69},2},
{{0.07,0.13,0.07,0.12,0.09,0.1,0.13,0.1,0.09,0.13,0.13,0.07,0.11,0.11,0.1,0.08,0.09,0.1,0.1,0.13,0.14,0.1,0.1,0.05,0.14,0.08,0.11,0.11,0.07,0.13,0,9.21,1.56,1216.67,505.56,2275,3.48,3.81,2.48,4.2,4.53,4.2,10.73},2},
{{0.1,0.11,0.1,0.08,0.09,0.12,0.1,0.1,0.14,0.09,0.11,0.08,0.12,0.1,0.11,0.09,0.08,0.13,0.1,0.11,0.1,0.11,0.12,0.07,0.08,0.09,0.12,0.13,0.12,0.09,0,9.22,1.62,1320,671.43,2500,3.36,3.62,2.29,4.04,4.38,4.04,10.61},2},
{{0.06,0.13,0.08,0.08,0.11,0.11,0.09,0.12,0.15,0.1,0.1,0.12,0.11,0.1,0.07,0.09,0.15,0.07,0.08,0.13,0.12,0.11,0.09,0.11,0.09,0.1,0.1,0.09,0.09,0.13,0,9.21,1.52,2400,639.29,3800,3.51,3.8,2.42,4.16,4.53,4.16,10.69},2},
{{0.05,0.11,0.12,0.03,0.13,0.1,0.11,0.11,0.12,0.14,0.13,0.13,0.1,0.07,0.08,0.08,0.09,0.11,0.07,0.15,0.11,0.1,0.1,0.09,0.09,0.1,0.1,0.13,0.1,0.1,0,9.08,1.6,2466.67,691.67,1120,3.65,3.99,2.32,4.35,4.73,4.35,10.59},2},
{{0.04,0.11,0.1,0.1,0.1,0.1,0.13,0.16,0.1,0.1,0.12,0.11,0.11,0.07,0.07,0.13,0.1,0.09,0.1,0.12,0.13,0.08,0.1,0.1,0.07,0.11,0.11,0.11,0.1,0.11,0,9.19,1.49,4225,760,1900,3.51,3.79,2.29,4.14,4.54,4.14,10.61},2},
{{0.06,0.11,0.1,0.04,0.13,0.1,0.13,0.11,0.12,0.12,0.12,0.16,0.07,0.08,0.09,0.09,0.06,0.13,0.09,0.13,0.12,0.1,0.07,0.1,0.1,0.13,0.07,0.13,0.07,0.13,0,9.1,1.64,1530,927.78,1433.33,3.59,3.92,2.4,4.24,4.62,4.24,10.64},2},
{{0.05,0.05,0.09,0.11,0.11,0.09,0.1,0.13,0.15,0.15,0.1,0.1,0.14,0.09,0.1,0.08,0.11,0.11,0.1,0.09,0.1,0.08,0.13,0.11,0.1,0.08,0.12,0.09,0.1,0.11,0,8.96,1.69,1266.67,1285.71,1900,3.93,3.55,2.35,4.58,4.23,4.58,10.6},2},
{{0.04,0.07,0.08,0.13,0.07,0.12,0.1,0.15,0.13,0.13,0.09,0.14,0.13,0.1,0.08,0.09,0.11,0.07,0.1,0.11,0.09,0.06,0.1,0.12,0.08,0.09,0.1,0.14,0.13,0.12,0,8.88,1.87,3625,1078.57,2450,3.79,3.56,2.39,4.42,4.2,4.42,10.5},2},
{{0.06,0.08,0.08,0.12,0.09,0.12,0.1,0.14,0.12,0.12,0.09,0.1,0.11,0.11,0.09,0.12,0.1,0.12,0.1,0.07,0.07,0.09,0.12,0.09,0.1,0.14,0.1,0.12,0.1,0.11,0,9.04,1.77,870,925,1266.67,3.7,3.32,2.23,4.32,3.99,4.32,10.55},2},
{{0.05,0.06,0.07,0.1,0.14,0.13,0.09,0.1,0.11,0.17,0.12,0.11,0.11,0.11,0.08,0.1,0.14,0.06,0.1,0.09,0.07,0.08,0.13,0.07,0.09,0.12,0.11,0.1,0.12,0.13,0,8.8,1.98,2150,1150,2233.33,3.93,3.57,2.4,4.6,4.25,4.6,10.49},2},
{{0.06,0.05,0.09,0.12,0.12,0.11,0.12,0.1,0.07,0.18,0.11,0.08,0.13,0.1,0.12,0.09,0.1,0.1,0.11,0.08,0.1,0.05,0.1,0.09,0.12,0.16,0.07,0.1,0.13,0.1,0,8.97,1.8,1475,918.75,1370,3.76,3.36,2.32,4.38,4.02,4.38,10.52},2},
{{0.05,0.09,0.06,0.11,0.09,0.09,0.15,0.1,0.12,0.16,0.12,0.11,0.1,0.12,0.11,0.08,0.08,0.14,0.09,0.08,0.06,0.1,0.12,0.1,0.09,0.08,0.14,0.09,0.14,0.1,0,8.84,1.78,812.5,675,2266.67,3.9,3.45,2.27,4.56,4.13,4.56,10.43},2},
{{0.06,0.08,0.07,0.13,0.14,0.06,0.16,0.08,0.09,0.16,0.08,0.11,0.15,0.1,0.1,0.1,0.11,0.12,0.08,0.07,0.04,0.09,0.12,0.09,0.15,0.09,0.15,0.11,0.08,0.1,0,8.91,1.85,2716.67,1100,3450,3.7,3.23,2.23,4.4,3.83,4.4,10.47},2},
{{0.03,0.08,0.07,0.08,0.13,0.15,0.13,0.1,0.13,0.13,0.09,0.12,0.11,0.11,0.13,0.09,0.14,0.06,0.13,0.05,0.08,0.12,0.05,0.1,0.11,0.11,0.12,0.1,0.11,0.12,0,8.82,1.84,1850,1233.33,1480,3.89,3.29,2.41,4.49,4.01,4.49,10.49},2},
{{0.03,0.05,0.1,0.07,0.15,0.14,0.13,0.17,0.07,0.11,0.06,0.09,0.17,0.13,0.11,0.13,0.06,0.13,0.06,0.08,0.05,0.1,0.05,0.07,0.08,0.14,0.18,0.16,0.14,0.06,0,8.87,1.88,650,2425,950,3.7,3.07,1.9,4.25,3.74,4.25,10.34},2},
{{0.2,0.12,0.13,0.1,0.07,0.12,0.11,0.07,0.03,0.06,0.12,0.08,0.11,0.09,0.14,0.11,0.07,0.09,0.08,0.13,0.12,0.04,0.07,0.13,0.09,0.1,0.12,0.16,0.16,0.04,0,9.15,1.32,3300,740,1625,2.93,4.06,1.91,3.68,5.16,3.68,10.44},2},
{{0.12,0.14,0.12,0.12,0.08,0.08,0.14,0.08,0.1,0.05,0.07,0.13,0.09,0.11,0.09,0.11,0.1,0.1,0.1,0.13,0.13,0.11,0.13,0.09,0.1,0.12,0.1,0.1,0.04,0.1,0,9.41,1.14,300,1462.5,2550,2.94,3.68,2.12,3.64,4.47,3.64,10.61},2},
{{0.16,0.12,0.09,0.07,0.12,0.15,0.12,0.09,0.06,0.04,0.05,0.1,0.1,0.14,0.12,0.09,0.11,0.12,0.07,0.11,0.06,0.1,0.15,0.14,0.12,0.09,0.09,0.1,0.07,0.11,0,9.45,1.46,1057.14,3850,2016.67,2.81,3.16,2.13,3.42,3.85,3.42,10.49},2},
{{0.13,0.1,0.14,0.09,0.09,0.11,0.16,0.08,0.11,0.02,0.07,0.11,0.11,0.09,0.12,0.11,0.13,0.08,0.13,0.07,0.08,0.12,0.14,0.15,0.09,0.12,0.1,0.05,0.08,0.09,0,9.32,1.23,3075,606.67,1366.67,2.84,3.21,2.06,3.44,3.87,3.44,10.36},2},
{{0.09,0.13,0.1,0.13,0.09,0.1,0.14,0.1,0.11,0.04,0.09,0.07,0.11,0.1,0.12,0.11,0.09,0.1,0.1,0.13,0.08,0.16,0.13,0.1,0.06,0.11,0.11,0.08,0.09,0.1,0,9.49,1.38,2212.5,1100,3000,3,3.46,2.31,3.65,4.17,3.65,10.69},2},
{{0.05,0.16,0.11,0.1,0.08,0.12,0.09,0.12,0.14,0.04,0.09,0.09,0.07,0.13,0.11,0.12,0.11,0.09,0.11,0.1,0.1,0.09,0.12,0.14,0.09,0.06,0.12,0.11,0.11,0.09,0,9.38,1.43,2725,1308.33,2933.33,3.08,3.37,2.31,3.76,4.1,3.76,10.61},2},
{{0.05,0.11,0.13,0.13,0.09,0.07,0.12,0.15,0.11,0.07,0.1,0.1,0.08,0.09,0.13,0.13,0.11,0.06,0.11,0.11,0.13,0.1,0.08,0.1,0.13,0.11,0.1,0.09,0.09,0.09,0,9.3,1.4,1483.33,1044.44,1975,3.23,3.34,2.24,3.88,4.08,3.88,10.57},2},
{{0.07,0.09,0.13,0.09,0.12,0.1,0.11,0.12,0.12,0.08,0.12,0.07,0.1,0.12,0.11,0.1,0.1,0.09,0.1,0.11,0.12,0.12,0.11,0.13,0.07,0.12,0.06,0.11,0.07,0.11,0,9.23,1.36,1540,1081.25,2900,3.29,3.54,2.35,3.95,4.29,3.95,10.6},2},
{{0.07,0.11,0.1,0.08,0.11,0.1,0.1,0.12,0.13,0.11,0.11,0.07,0.09,0.11,0.14,0.12,0.1,0.11,0.11,0.07,0.13,0.11,0.1,0.1,0.12,0.08,0.07,0.11,0.06,0.14,0,9.17,1.47,1550,665.38,2233.33,3.46,3.25,2.53,4.13,3.99,4.13,10.65},2},
{{0.04,0.13,0.1,0.08,0.08,0.1,0.1,0.13,0.13,0.12,0.1,0.1,0.1,0.11,0.09,0.12,0.1,0.09,0.12,0.08,0.13,0.08,0.12,0.11,0.08,0.11,0.09,0.11,0.1,0.1,0,9.16,1.39,945,859.09,1330,3.57,3.38,2.23,4.25,4.03,4.25,10.6},2},
{{0.06,0.07,0.13,0.09,0.09,0.09,0.08,0.11,0.16,0.14,0.08,0.15,0.1,0.11,0.08,0.1,0.11,0.09,0.13,0.08,0.09,0.13,0.08,0.13,0.08,0.07,0.12,0.1,0.11,0.12,0,9.05,1.66,1650,1100,1237.5,3.71,3.43,2.37,4.4,4.08,4.4,10.59},2},
{{0.04,0.1,0.08,0.1,0.08,0.09,0.08,0.14,0.17,0.15,0.1,0.13,0.11,0.11,0.1,0.12,0.06,0.13,0.05,0.11,0.09,0.15,0.09,0.09,0.09,0.09,0.08,0.11,0.12,0.12,0,8.9,1.7,4675,972.22,2200,3.93,3.54,2.5,4.61,4.25,4.61,10.58},2},
{{0.06,0.13,0.13,0.04,0.06,0.06,0.11,0.11,0.19,0.14,0.08,0.12,0.1,0.13,0.08,0.11,0.1,0.12,0.1,0.09,0.13,0.09,0.13,0.05,0.08,0.11,0.08,0.12,0.15,0.08,0,9.18,1.52,1710,632.14,2212.5,3.77,3.36,2.38,4.49,3.97,4.49,10.75},2},
{{0.07,0.09,0.11,0.08,0.08,0.09,0.09,0.11,0.17,0.14,0.12,0.09,0.13,0.12,0.09,0.09,0.08,0.08,0.11,0.11,0.1,0.14,0.08,0.08,0.07,0.09,0.09,0.14,0.1,0.12,0,9.04,1.61,600,911.11,1370,3.78,3.65,2.45,4.51,4.33,4.51,10.65},2},
{{0.05,0.12,0.09,0.11,0.07,0.08,0.09,0.1,0.18,0.14,0.11,0.13,0.07,0.1,0.14,0.09,0.06,0.1,0.11,0.11,0.12,0.13,0.11,0.07,0.08,0.1,0.08,0.1,0.11,0.12,0,9.06,1.61,1975,1000,1725,3.71,3.62,2.59,4.45,4.37,4.45,10.67},2},
{{0.05,0.1,0.08,0.11,0.08,0.11,0.1,0.08,0.16,0.15,0.09,0.12,0.08,0.11,0.12,0.13,0.09,0.07,0.11,0.11,0.08,0.14,0.13,0.08,0.06,0.07,0.1,0.14,0.1,0.12,0,9.15,1.66,972.22,610,2933.33,3.8,3.36,2.45,4.53,4.05,4.53,10.74},2},
{{0.05,0.08,0.08,0.1,0.12,0.09,0.11,0.09,0.15,0.16,0.12,0.1,0.1,0.08,0.08,0.15,0.09,0.11,0.09,0.1,0.12,0.08,0.06,0.1,0.14,0.1,0.07,0.14,0.09,0.13,0,9.04,1.7,2450,1050,3425,3.85,3.56,2.45,4.52,4.28,4.52,10.69},2},
{{0.09,0.08,0.11,0.12,0.08,0.09,0.08,0.11,0.09,0.19,0.16,0.1,0.08,0.1,0.09,0.09,0.08,0.1,0.12,0.11,0.11,0.14,0.11,0.04,0.13,0.07,0.07,0.1,0.13,0.14,0,8.94,1.79,2216.67,1433.33,1566.67,3.74,4.02,2.77,4.52,4.83,4.52,10.72},2},
{{0.06,0.07,0.09,0.11,0.12,0.08,0.06,0.11,0.16,0.17,0.13,0.09,0.11,0.1,0.07,0.09,0.13,0.08,0.12,0.11,0.17,0.13,0.1,0.07,0.04,0.07,0.11,0.12,0.1,0.12,0,9.09,1.41,1566.67,487.5,1883.33,3.87,3.78,2.66,4.61,4.49,4.61,10.79},2},
{{0.07,0.08,0.09,0.12,0.08,0.09,0.13,0.11,0.08,0.17,0.13,0.12,0.06,0.13,0.07,0.09,0.12,0.08,0.1,0.12,0.14,0.14,0.06,0.07,0.12,0.08,0.08,0.09,0.11,0.13,0,9,1.57,1650,1044.44,4250,3.75,3.89,2.63,4.53,4.67,4.53,10.7},2},
{{0.06,0.11,0.07,0.1,0.08,0.09,0.11,0.13,0.09,0.19,0.13,0.13,0.06,0.11,0.08,0.12,0.1,0.07,0.08,0.14,0.11,0.15,0.11,0.04,0.08,0.1,0.09,0.1,0.13,0.12,0,9.01,1.59,1075,930,2233.33,3.94,3.87,2.59,4.68,4.67,4.68,10.74},2},
{{0.04,0.1,0.09,0.1,0.12,0.1,0.06,0.15,0.13,0.14,0.11,0.1,0.14,0.13,0.06,0.11,0.09,0.07,0.11,0.1,0.11,0.06,0.11,0.08,0.09,0.13,0.09,0.13,0.12,0.11,0,8.95,1.82,2366.67,1575,4825,3.82,3.52,2.44,4.49,4.19,4.49,10.62},2},
{{0.07,0.07,0.12,0.1,0.05,0.14,0.1,0.08,0.14,0.16,0.12,0.07,0.14,0.12,0.07,0.15,0.1,0.07,0.13,0.06,0.11,0.08,0.07,0.07,0.14,0.09,0.1,0.13,0.13,0.11,0,8.89,1.85,1050,885,1475,3.75,3.31,2.36,4.5,3.98,4.5,10.53},2},
{{0.06,0.08,0.09,0.1,0.06,0.09,0.07,0.15,0.15,0.17,0.12,0.1,0.11,0.09,0.09,0.14,0.1,0.08,0.08,0.1,0.13,0.08,0.07,0.1,0.11,0.1,0.1,0.13,0.1,0.12,0,8.97,1.7,1071.43,520.59,1975,3.98,3.47,2.4,4.66,4.19,4.66,10.69},2},
{{0.07,0.07,0.12,0.09,0.09,0.1,0.05,0.15,0.12,0.16,0.09,0.09,0.15,0.13,0.08,0.1,0.14,0.07,0.12,0.06,0.13,0.06,0.07,0.08,0.12,0.11,0.09,0.11,0.13,0.11,0,8.94,1.77,2650,813.64,1737.5,3.77,3.25,2.42,4.47,3.87,4.47,10.58},2},
{{0.05,0.07,0.12,0.09,0.1,0.12,0.09,0.1,0.13,0.15,0.12,0.13,0.05,0.12,0.11,0.1,0.11,0.1,0.1,0.08,0.08,0.1,0.08,0.11,0.12,0.1,0.1,0.12,0.08,0.12,0,8.91,1.82,1516.67,1766.67,2925,3.75,3.45,2.35,4.47,4.17,4.47,10.53},2},
{{0.06,0.1,0.07,0.11,0.09,0.09,0.12,0.12,0.1,0.16,0.08,0.11,0.09,0.16,0.08,0.1,0.11,0.1,0.11,0.09,0.09,0.12,0.08,0.08,0.12,0.09,0.08,0.12,0.12,0.13,0,9.09,1.92,2625,787.5,2212.5,3.77,3.32,2.57,4.53,3.99,4.53,10.78},2},
{{0.06,0.08,0.06,0.09,0.17,0.09,0.11,0.11,0.12,0.14,0.1,0.11,0.14,0.09,0.07,0.12,0.15,0.07,0.1,0.08,0.09,0.09,0.09,0.12,0.14,0.11,0.08,0.09,0.08,0.15,0,8.89,1.85,2433.33,1037.5,1737.5,3.75,3.36,2.5,4.37,4.04,4.37,10.53},2},
{{0.05,0.07,0.07,0.12,0.12,0.11,0.12,0.1,0.14,0.14,0.12,0.1,0.12,0.11,0.08,0.1,0.12,0.1,0.1,0.08,0.07,0.08,0.12,0.1,0.13,0.1,0.1,0.11,0.09,0.13,0,8.86,1.87,2366.67,1150,2925,3.85,3.41,2.43,4.49,4.09,4.49,10.55},2},
{{0.05,0.09,0.08,0.1,0.1,0.1,0.11,0.12,0.09,0.18,0.1,0.11,0.12,0.1,0.11,0.09,0.1,0.14,0.08,0.07,0.07,0.09,0.1,0.09,0.13,0.11,0.13,0.1,0.11,0.1,0,8.9,1.72,4375,844.44,2300,3.85,3.34,2.22,4.57,4.02,4.57,10.5},2},
{{0.02,0.03,0.07,0.05,0.07,0.06,0.1,0.05,0.05,0.04,0.03,0.05,0.06,0.09,0.08,0.07,0.05,0.08,0.04,0,0.02,0.04,0.06,0.05,0.05,0.06,0.07,0.08,0.05,0.06,0,4.53,1,675,420,1000,1.8,2.34,1.05,4.03,5.31,4.03,5.28},2},
{{0.14,0.13,0.23,0.14,0.11,0.07,0.08,0.06,0.05,0.02,0.1,0.08,0.05,0.08,0.18,0.12,0.09,0.12,0.08,0.08,0.05,0.07,0.13,0.11,0.14,0.14,0.13,0.13,0.09,0.04,0,8.45,1.88,2900,502.94,1700,3.2,6.18,3.28,4.32,7.42,4.32,11.3},0},
{{0.1,0.13,0.15,0.14,0.12,0.11,0.1,0.05,0.09,0.03,0.11,0.11,0.08,0.1,0.11,0.07,0.09,0.08,0.14,0.09,0.06,0.09,0.14,0.07,0.13,0.12,0.14,0.08,0.14,0.05,0,8.23,1.9,1100,460.53,1683.33,3.83,6.84,3.76,5.07,7.85,5.07,11.65},0},
{{0.07,0.14,0.15,0.08,0.15,0.12,0.09,0.09,0.07,0.06,0.11,0.1,0.06,0.16,0.06,0.11,0.06,0.1,0.12,0.08,0.09,0.11,0.09,0.11,0.13,0.08,0.11,0.14,0.1,0.07,0,7.94,1.72,1700,423.91,1650,4.21,6.95,4.06,5.47,8.04,5.47,11.9},0},
{{0.11,0.09,0.14,0.11,0.09,0.09,0.14,0.1,0.09,0.07,0.13,0.07,0.1,0.12,0.1,0.08,0.12,0.08,0.13,0.07,0.08,0.1,0.1,0.11,0.13,0.1,0.1,0.15,0.1,0.07,0,7.93,1.81,1321.43,460,2150,4.73,6.74,3.96,6.1,7.77,6.1,12},0},
{{0.09,0.11,0.11,0.12,0.08,0.11,0.11,0.12,0.1,0.07,0.11,0.1,0.1,0.05,0.12,0.15,0.05,0.13,0.11,0.05,0.09,0.09,0.08,0.11,0.11,0.12,0.13,0.11,0.09,0.09,0,7.71,1.81,1375,606.25,2262.5,4.84,6.46,3.92,6.09,7.64,6.09,11.93},0},
{{0.07,0.09,0.13,0.1,0.1,0.12,0.12,0.1,0.1,0.09,0.1,0.1,0.12,0.08,0.09,0.09,0.14,0.09,0.09,0.11,0.11,0.11,0.1,0.09,0.1,0.09,0.11,0.08,0.12,0.11,0,7.96,1.92,2087.5,476.32,2100,5.03,6.54,4.39,6.49,7.63,6.49,12.2},0},
{{0.09,0.1,0.06,0.13,0.13,0.12,0.09,0.09,0.1,0.11,0.1,0.12,0.12,0.09,0.09,0.11,0.12,0.08,0.08,0.07,0.12,0.09,0.11,0.11,0.1,0.11,0.07,0.09,0.1,0.13,0,7.29,1.83,1825,527.78,2425,5.23,6.56,4.44,6.66,7.65,6.66,11.9},0},
{{0.08,0.14,0.06,0.13,0.12,0.06,0.11,0.12,0.09,0.12,0.12,0.1,0.09,0.09,0.09,0.14,0.1,0.09,0.09,0.08,0.08,0.1,0.1,0.15,0.1,0.11,0.09,0.06,0.13,0.1,0,7.44,1.82,2100,484.21,2025,5.27,6.62,4.18,6.71,7.82,6.71,12.12},0},
{{0.09,0.11,0.09,0.1,0.1,0.1,0.11,0.09,0.13,0.11,0.11,0.11,0.1,0.11,0.08,0.11,0.14,0.08,0.08,0.08,0.11,0.1,0.11,0.12,0.06,0.11,0.12,0.11,0.08,0.09,0,7.44,1.58,3066.67,457.5,2150,5.37,6.56,4.33,6.9,7.7,6.9,12.12},0},
{{0.14,0.05,0.06,0.13,0.09,0.13,0.11,0.12,0.1,0.1,0.09,0.11,0.08,0.13,0.11,0.06,0.13,0.13,0.08,0.06,0.1,0.09,0.12,0.09,0.1,0.15,0.07,0.11,0.12,0.08,0,7.68,1.67,2066.67,558.82,1125,5.47,6.57,4.21,6.81,7.67,6.81,12.28},0},
{{0.09,0.11,0.1,0.08,0.08,0.12,0.11,0.11,0.12,0.1,0.09,0.12,0.1,0.11,0.12,0.11,0.08,0.07,0.12,0.06,0.13,0.09,0.12,0.09,0.09,0.1,0.1,0.11,0.12,0.08,0,7.57,1.6,1650,532.35,2475,5.54,6.56,4.41,7.07,7.72,7.07,12.27},0},
{{0.09,0.09,0.09,0.11,0.12,0.08,0.1,0.16,0.09,0.11,0.11,0.08,0.12,0.11,0.1,0.09,0.07,0.12,0.1,0.09,0.11,0.09,0.1,0.09,0.12,0.08,0.12,0.11,0.11,0.09,0,7.91,1.78,1430,575,3200,5.43,6.71,4.27,6.88,7.74,6.88,12.38},0},
{{0.1,0.08,0.11,0.13,0.07,0.07,0.11,0.13,0.14,0.08,0.09,0.1,0.15,0.1,0.07,0.12,0.08,0.11,0.09,0.11,0.11,0.12,0.13,0.06,0.1,0.07,0.1,0.08,0.1,0.15,0,7.59,1.84,2716.67,426.19,1264.29,5.22,6.67,4.76,6.58,7.71,6.58,12.2},0},
{{0.08,0.11,0.1,0.09,0.1,0.09,0.12,0.13,0.09,0.11,0.08,0.11,0.16,0.09,0.11,0.06,0.1,0.08,0.11,0.08,0.08,0.13,0.12,0.09,0.1,0.07,0.1,0.15,0.09,0.09,0,7.73,1.96,3500,418.18,2616.67,5.28,6.72,4.26,6.77,7.71,6.77,12.02},0},
{{0.07,0.12,0.1,0.09,0.08,0.11,0.13,0.09,0.12,0.1,0.08,0.1,0.12,0.09,0.1,0.12,0.1,0.12,0.13,0.05,0.1,0.1,0.09,0.09,0.09,0.13,0.1,0.09,0.12,0.1,0,8.1,1.88,2100,606.67,3725,5.31,6.24,4.19,6.8,7.23,6.8,12.22},0},
{{0.08,0.1,0.12,0.11,0.07,0.11,0.12,0.09,0.1,0.13,0.09,0.1,0.11,0.08,0.14,0.08,0.1,0.13,0.08,0.09,0.12,0.09,0.12,0.09,0.1,0.09,0.04,0.14,0.11,0.12,0,7.93,1.9,708.33,656.67,1591.67,5.43,6.53,4.57,7.02,7.55,7.02,12.43},0},
{{0.09,0.11,0.1,0.1,0.1,0.07,0.13,0.13,0.1,0.1,0.11,0.11,0.08,0.1,0.12,0.09,0.11,0.1,0.1,0.06,0.09,0.09,0.09,0.13,0.11,0.12,0.09,0.11,0.08,0.1,0,7.7,1.9,1370,525,891.67,5.29,6.44,4.01,6.74,7.48,6.74,11.97},0},
{{0.09,0.08,0.09,0.09,0.11,0.1,0.11,0.11,0.13,0.11,0.1,0.09,0.1,0.12,0.11,0.08,0.09,0.13,0.12,0.06,0.11,0.11,0.1,0.08,0.1,0.06,0.08,0.12,0.11,0.13,0,7.87,1.87,1408.33,561.76,1550,5.55,6.48,4.79,6.95,7.5,6.95,12.52},0},
{{0.11,0.08,0.09,0.08,0.12,0.09,0.14,0.08,0.13,0.1,0.09,0.13,0.12,0.09,0.06,0.11,0.1,0.11,0.13,0.07,0.12,0.11,0.12,0.11,0.08,0.05,0.1,0.07,0.1,0.14,0,7.52,1.66,1866.67,603.33,2516.67,5.45,6.73,4.81,6.74,7.71,6.74,12.28},0},
{{0.14,0.1,0.05,0.09,0.12,0.1,0.07,0.11,0.1,0.12,0.12,0.1,0.11,0.13,0.09,0.1,0.11,0.11,0.08,0.03,0.11,0.11,0.07,0.12,0.09,0.13,0.13,0.07,0.09,0.1,0,7.15,1.55,1280,593.75,1750,6.02,6.25,4.16,7.67,7.3,7.67,12.07},0},
{{0.13,0.07,0.11,0.12,0.1,0.11,0.06,0.08,0.12,0.13,0.11,0.1,0.1,0.15,0.07,0.07,0.12,0.11,0.09,0.09,0.12,0.11,0.1,0.08,0.09,0.11,0.11,0.09,0.09,0.13,0,7.46,1.88,1366.67,555.88,2433.33,5.46,6.57,4.58,7.12,7.6,7.12,12.22},0},
{{0.11,0.09,0.09,0.1,0.1,0.12,0.08,0.09,0.14,0.11,0.11,0.1,0.11,0.08,0.1,0.11,0.13,0.07,0.1,0.07,0.11,0.1,0.12,0.1,0.11,0.09,0.08,0.1,0.07,0.14,0,7.56,1.7,2350,525,1000,5.42,6.51,4.4,6.91,7.66,6.91,12.3},0},
{{0.11,0.1,0.08,0.12,0.14,0.08,0.08,0.08,0.11,0.12,0.1,0.12,0.08,0.12,0.11,0.1,0.13,0.09,0.08,0.06,0.1,0.1,0.13,0.1,0.1,0.11,0.05,0.08,0.12,0.12,0,7.24,1.72,1850,571.88,1710,5.27,6.29,4.37,6.9,7.4,6.9,11.87},0},
{{0.08,0.13,0.09,0.09,0.11,0.12,0.09,0.11,0.08,0.13,0.11,0.11,0.11,0.09,0.09,0.11,0.08,0.12,0.1,0.06,0.11,0.14,0.09,0.09,0.07,0.08,0.11,0.08,0.14,0.11,0,7.44,1.79,1130,603.33,990,5.37,6.66,4.71,6.95,7.72,6.95,12.27},0},
{{0.11,0.11,0.08,0.12,0.14,0.07,0.06,0.08,0.12,0.13,0.11,0.1,0.09,0.13,0.1,0.1,0.1,0.11,0.08,0.06,0.12,0.1,0.07,0.09,0.13,0.11,0.11,0.11,0.07,0.12,0,7.33,1.73,1425,657.14,1283.33,5.49,6.42,4.26,7.24,7.49,7.24,12.14},0},
{{0.12,0.11,0.09,0.09,0.1,0.08,0.11,0.14,0.07,0.12,0.12,0.08,0.09,0.1,0.12,0.12,0.1,0.09,0.1,0.05,0.1,0.12,0.11,0.11,0.1,0.1,0.13,0.08,0.08,0.1,0,7.43,1.31,838.89,497.22,1150,5.49,6.3,4.18,7.04,7.54,7.04,12.2},0},
{{0.12,0.12,0.07,0.12,0.1,0.09,0.09,0.09,0.12,0.11,0.11,0.09,0.11,0.09,0.14,0.09,0.1,0.09,0.1,0.06,0.12,0.11,0.11,0.09,0.11,0.09,0.1,0.1,0.09,0.12,0,7.35,1.54,1690,428.57,425,5.47,6.51,4.47,7.11,7.71,7.11,12.27},0},
{{0.1,0.09,0.11,0.08,0.11,0.1,0.12,0.12,0.06,0.13,0.1,0.09,0.1,0.09,0.11,0.14,0.11,0.08,0.12,0.04,0.13,0.08,0.1,0.08,0.1,0.09,0.12,0.11,0.08,0.12,0,7.76,1.79,1088.89,519.44,2166.67,5.37,6.32,4.37,6.89,7.52,6.89,12.38},0},
{{0.11,0.09,0.11,0.06,0.08,0.09,0.15,0.08,0.12,0.12,0.1,0.11,0.1,0.08,0.11,0.14,0.09,0.13,0.09,0.05,0.11,0.08,0.08,0.11,0.11,0.12,0.1,0.12,0.1,0.09,0,7.58,1.7,1333.33,600,1350,5.58,6.27,4.17,6.97,7.4,6.97,12.35},0},
{{0.12,0.11,0.13,0.05,0.1,0.09,0.08,0.11,0.11,0.12,0.08,0.11,0.09,0.1,0.13,0.09,0.13,0.08,0.12,0.04,0.11,0.12,0.08,0.1,0.09,0.1,0.12,0.11,0.09,0.11,0,7.82,1.87,840,571.88,1162.5,5.5,6.19,4.32,7.16,7.28,7.16,12.16},0},
{{0.07,0.13,0.13,0.07,0.08,0.14,0.09,0.09,0.1,0.12,0.1,0.14,0.08,0.13,0.07,0.09,0.1,0.12,0.12,0.05,0.08,0.12,0.07,0.13,0.06,0.13,0.11,0.07,0.13,0.13,0,7.61,2.23,2350,541.18,1883.33,5.28,6.61,4.33,6.95,7.54,6.95,12.14},0},
{{0.06,0.06,0.04,0.05,0.05,0.13,0.07,0.05,0.06,0.08,0.07,0.07,0.08,0.04,0.06,0.09,0.06,0.05,0.08,0.04,0.02,0.07,0.05,0.11,0.08,0.07,0.07,0.08,0.06,0.04,0,4.76,1.3,1075,637.5,1450,3.44,4.21,2.15,6.85,7.89,6.85,7.43},0},
{{0.1,0.07,0.09,0.09,0.07,0.11,0.09,0.14,0.15,0.1,0.16,0.09,0.07,0.08,0.07,0.08,0.12,0.08,0.13,0.14,0.09,0.13,0.07,0.11,0.14,0.09,0.08,0.09,0.13,0.08,0,9.69,1.81,1125,1062.5,1000,1.89,3.29,1.86,2.47,3.96,2.47,10.51},5},
{{0.08,0.07,0.14,0.12,0.09,0.13,0.12,0.09,0.08,0.11,0.1,0.12,0.09,0.09,0.12,0.07,0.11,0.12,0.09,0.1,0.06,0.12,0.12,0.1,0.1,0.12,0.1,0.1,0.08,0.11,0,9.63,1.74,1000,1833.33,1541.67,1.55,2.94,1.63,2.1,3.6,2.1,10.27},5},
{{0.1,0.1,0.08,0.1,0.12,0.09,0.11,0.1,0.11,0.1,0.07,0.09,0.11,0.13,0.15,0.09,0.09,0.12,0.07,0.09,0.13,0.09,0.1,0.11,0.1,0.08,0.13,0.1,0.09,0.1,0,9.58,1.59,4275,2866.67,3650,1.7,2.63,1.65,2.29,3.25,2.29,10.19},5},
{{0.1,0.13,0.08,0.14,0.09,0.08,0.09,0.09,0.09,0.13,0.09,0.08,0.14,0.1,0.1,0.14,0.09,0.1,0.09,0.09,0.12,0.08,0.09,0.12,0.1,0.12,0.1,0.09,0.08,0.12,0,9.56,1.74,1850,1400,3700,1.74,2.61,1.7,2.36,3.25,2.36,10.25},5},
{{0.11,0.11,0.08,0.11,0.09,0.11,0.11,0.09,0.09,0.11,0.07,0.15,0.11,0.12,0.06,0.1,0.1,0.09,0.14,0.09,0.08,0.07,0.11,0.1,0.07,0.1,0.1,0.11,0.16,0.12,0,9.58,2,933.33,1330,1975,1.65,2.88,1.69,2.13,3.45,2.13,10.26},5},
{{0.06,0.05,0.07,0.03,0.03,0.05,0.05,0.04,0.04,0.03,0.05,0.04,0.02,0.04,0.06,0.06,0.05,0.04,0.04,0.04,0.07,0.04,0.06,0.04,0.03,0.06,0.04,0.04,0.04,0.04,0,4.19,0.56,975,1100,1150,0.64,2.4,0.71,1.91,6.42,1.91,4.4},5},
{{0.12,0.11,0.1,0.11,0.1,0.11,0.08,0.06,0.13,0.11,0.1,0.13,0.08,0.08,0.14,0.1,0.08,0.11,0.09,0.12,0.12,0.11,0.1,0.08,0.1,0.1,0.14,0.11,0.06,0.11,0,9.15,2.36,1600,804.55,1790,2.37,3.51,1.95,3.14,4.33,3.14,10.2},1},
{{0.12,0.11,0.1,0.09,0.12,0.11,0.12,0.1,0.06,0.09,0.13,0.07,0.13,0.1,0.08,0.09,0.1,0.11,0.09,0.1,0.08,0.09,0.13,0.13,0.1,0.12,0.07,0.08,0.09,0.13,0,8.93,2.56,3525,1333.33,1762.5,2.22,3.52,2,3.02,4.33,3.02,9.97},1},
{{0.12,0.12,0.1,0.08,0.07,0.08,0.14,0.11,0.09,0.11,0.08,0.12,0.1,0.09,0.1,0.12,0.1,0.11,0.09,0.1,0.11,0.13,0.08,0.11,0.1,0.07,0.09,0.13,0.12,0.08,0,9.15,2.44,1950,837.5,1675,2.39,3.42,2.04,3.1,4.28,3.1,10.21},1},
{{0.08,0.1,0.1,0.11,0.1,0.11,0.1,0.12,0.09,0.1,0.07,0.11,0.12,0.12,0.1,0.1,0.11,0.08,0.12,0.08,0.09,0.07,0.09,0.11,0.12,0.08,0.14,0.09,0.16,0.08,0,9.19,2.64,625,1500,4275,2.07,3.32,1.83,2.74,4.07,2.74,10.17},1},
{{0.08,0.08,0.12,0.12,0.11,0.1,0.07,0.12,0.13,0.1,0.11,0.07,0.09,0.12,0.11,0.11,0.11,0.1,0.09,0.11,0.09,0.11,0.12,0.08,0.11,0.12,0.1,0.09,0.1,0.11,0,9.07,2.52,3575,920,2400,2.33,3.31,1.89,3.17,4.16,3.17,10.14},1},
{{0.03,0.03,0.04,0.01,0.04,0.05,0.04,0.06,0.05,0.04,0.03,0.04,0.04,0.04,0.02,0.03,0.03,0.06,0.07,0.03,0.06,0.05,0.04,0.04,0.04,0.05,0.02,0.04,0.03,0.04,0,3.53,0.83,1500,800,1166.67,0.97,2.28,0.9,3.36,7.21,3.36,3.95},1},
{{0.08,0.05,0.1,0.09,0.11,0.1,0.19,0.09,0.11,0.1,0.06,0.07,0.13,0.14,0.1,0.11,0.09,0.12,0.1,0.09,0.11,0.13,0.08,0.13,0.08,0.13,0.09,0.08,0.1,0.1,0,9.57,1.62,4375,2150,1850,1.86,2.48,1.61,2.39,3.04,2.39,10.23},5},
{{0.09,0.13,0.09,0.09,0.1,0.06,0.1,0.09,0.14,0.14,0.14,0.09,0.08,0.06,0.13,0.09,0.12,0.09,0.11,0.12,0.11,0.08,0.12,0.08,0.11,0.09,0.09,0.12,0.1,0.1,0,9.54,1.86,1900,950,1625,2.01,2.81,1.81,2.59,3.38,2.59,10.34},5},
{{0.1,0.09,0.13,0.09,0.1,0.13,0.12,0.08,0.09,0.1,0.09,0.08,0.13,0.15,0.08,0.07,0.09,0.11,0.11,0.09,0.09,0.1,0.1,0.12,0.11,0.07,0.11,0.11,0.13,0.09,0,9.63,1.79,3375,1233.33,2725,1.81,2.84,1.6,2.42,3.43,2.42,10.28},5},
{{0.15,0.11,0.05,0.13,0.11,0.08,0.08,0.12,0.12,0.07,0.12,0.11,0.12,0.07,0.07,0.13,0.1,0.09,0.11,0.1,0.1,0.08,0.1,0.1,0.09,0.09,0.11,0.1,0.12,0.13,0,9.36,1.85,3225,987.5,1450,1.86,2.74,1.67,2.38,3.39,2.38,10.1},5},
{{0.08,0.13,0.12,0.12,0.09,0.16,0.06,0.09,0.08,0.11,0.1,0.14,0.06,0.09,0.1,0.12,0.11,0.1,0.08,0.12,0.08,0.12,0.08,0.1,0.09,0.17,0.1,0.08,0.08,0.1,0,9.45,1.75,2766.67,1050,2125,1.67,2.63,1.57,2.24,3.23,2.24,10.09},5},
{{0.06,0.04,0.04,0.04,0.03,0.05,0.02,0.05,0.04,0.03,0.04,0.02,0.06,0.04,0.05,0.02,0.05,0.05,0.03,0.04,0.03,0.05,0.05,0.03,0.06,0.03,0.04,0.06,0.03,0.03,0,3.57,0.54,500,400,1050,0.66,2.25,0.53,2.24,6.65,2.24,3.78},5},
{{0.07,0.06,0.07,0.14,0.11,0.14,0.1,0.14,0.12,0.08,0.04,0.1,0.1,0.15,0.14,0.13,0.11,0.09,0.09,0.08,0.07,0.08,0.09,0.1,0.11,0.09,0.13,0.15,0.12,0.09,0,9.13,2.61,1125,1250,1750,2.1,2.89,1.82,2.74,3.71,2.74,10.13},1},
{{0.08,0.12,0.09,0.12,0.08,0.1,0.1,0.1,0.11,0.11,0.08,0.1,0.09,0.11,0.11,0.13,0.09,0.13,0.11,0.08,0.09,0.11,0.11,0.09,0.1,0.1,0.13,0.14,0.06,0.11,0,9.11,2.45,1025,1810,2062.5,2.22,3.09,1.84,2.81,3.86,2.81,10.07},1},
{{0.09,0.12,0.08,0.12,0.11,0.09,0.1,0.09,0.1,0.1,0.11,0.11,0.14,0.07,0.06,0.12,0.09,0.1,0.11,0.11,0.07,0.12,0.09,0.11,0.09,0.12,0.11,0.1,0.08,0.12,0,9.1,2.65,3450,1162.5,2933.33,2.4,3.66,2.01,3.31,4.49,3.31,10.24},1},
{{0.13,0.12,0.1,0.11,0.08,0.07,0.07,0.13,0.08,0.14,0.14,0.11,0.09,0.07,0.1,0.08,0.12,0.08,0.12,0.11,0.14,0.11,0.1,0.12,0.06,0.1,0.08,0.07,0.13,0.1,0,9.06,2.33,1570,1441.67,2266.67,2.68,3.77,2.25,3.46,4.6,3.46,10.24},1},
{{0.13,0.11,0.11,0.1,0.12,0.08,0.1,0.1,0.08,0.09,0.13,0.09,0.09,0.1,0.09,0.08,0.11,0.1,0.09,0.14,0.12,0.08,0.13,0.11,0.12,0.09,0.12,0.07,0.07,0.12,0,9.07,2.27,2750,855,2275,2.42,3.78,2.01,3.31,4.63,3.31,10.16},1},
{{0.05,0.02,0.07,0.02,0.04,0.08,0.03,0.05,0.05,0.05,0.04,0.05,0.05,0.06,0.04,0.03,0.04,0.06,0.04,0.04,0.06,0.03,0.04,0.04,0.03,0.08,0.02,0.03,0.08,0.04,0,3.89,1.06,1675,633.33,1700,1.09,2.35,1.02,3.37,6.8,3.37,4.4},1},
{{0.13,0.1,0.09,0.12,0.09,0.1,0.08,0.1,0.11,0.09,0.13,0.1,0.09,0.11,0.1,0.09,0.08,0.14,0.08,0.1,0.11,0.12,0.1,0.13,0.09,0.09,0.06,0.12,0.09,0.11,0,9.44,1.87,3325,975,1866.67,1.66,2.85,1.88,2.13,3.49,2.13,10.17},5},
{{0.12,0.1,0.08,0.1,0.13,0.05,0.12,0.09,0.11,0.12,0.13,0.08,0.09,0.09,0.09,0.13,0.1,0.09,0.11,0.12,0.11,0.05,0.11,0.11,0.09,0.12,0.09,0.12,0.1,0.11,0,9.5,2.07,2233.33,972.22,2225,1.69,2.83,1.9,2.14,3.47,2.14,10.27},5},
{{0.07,0.09,0.09,0.12,0.13,0.17,0.08,0.07,0.1,0.1,0.08,0.13,0.1,0.1,0.1,0.07,0.11,0.13,0.13,0.08,0.06,0.09,0.11,0.11,0.14,0.1,0.1,0.09,0.12,0.11,0,9.56,2.02,1625,1383.33,3275,1.4,2.73,1.66,1.85,3.25,1.85,10.18},5},
{{0.09,0.08,0.12,0.1,0.1,0.1,0.13,0.14,0.09,0.07,0.09,0.08,0.11,0.14,0.09,0.12,0.12,0.06,0.11,0.1,0.08,0.13,0.08,0.09,0.13,0.13,0.1,0.08,0.11,0.09,0,9.52,1.83,2283.33,2933.33,2825,1.43,2.63,1.57,1.84,3.23,1.84,10.1},5},
{{0.07,0.12,0.12,0.08,0.07,0.11,0.1,0.13,0.1,0.11,0.09,0.1,0.09,0.12,0.11,0.1,0.1,0.09,0.09,0.13,0.12,0.14,0.08,0.09,0.07,0.1,0.09,0.15,0.09,0.08,0,9.63,1.78,1487.5,1392.86,2700,1.58,2.74,1.69,2.04,3.43,2.04,10.22},5},
{{0.1,0.11,0.07,0.06,0.08,0.05,0.07,0.08,0.09,0.11,0.06,0.1,0.1,0.06,0.09,0.1,0.08,0.09,0.08,0.08,0.1,0.07,0.09,0.05,0.09,0.06,0.1,0.08,0.08,0.1,0,7.78,1.68,1625,1080,1125,1.5,2.35,1.56,2.27,3.63,2.27,8.47},5},
{{0.13,0.06,0.13,0.12,0.1,0.08,0.13,0.09,0.06,0.12,0.11,0.07,0.13,0.1,0.11,0.11,0.07,0.12,0.13,0.07,0.09,0.08,0.09,0.13,0.12,0.1,0.11,0.1,0.11,0.1,0,9.03,2.23,2850,1333.33,2650,2.52,3.06,1.87,3.44,3.8,3.44,10.08},1},
{{0.09,0.11,0.1,0.15,0.1,0.13,0.07,0.08,0.1,0.09,0.08,0.13,0.08,0.12,0.09,0.11,0.1,0.12,0.07,0.13,0.08,0.08,0.12,0.11,0.08,0.11,0.13,0.09,0.12,0.08,0,9.26,2.29,3350,915,1475,2.35,3.25,1.86,3.08,4.11,3.08,10.2},1},
{{0.11,0.08,0.13,0.1,0.09,0.13,0.08,0.08,0.13,0.1,0.07,0.13,0.11,0.1,0.13,0.09,0.11,0.1,0.11,0.08,0.13,0.1,0.11,0.08,0.1,0.11,0.11,0.11,0.08,0.1,0,9.11,2.05,3725,2300,4250,2.42,3.03,1.93,3.15,3.81,3.15,10.05},1},
{{0.1,0.15,0.05,0.1,0.08,0.1,0.12,0.12,0.11,0.1,0.14,0.08,0.09,0.11,0.08,0.12,0.14,0.09,0.07,0.12,0.13,0.08,0.09,0.11,0.09,0.08,0.11,0.1,0.11,0.12,0,9.1,2.2,1475,1321.43,1783.33,2.41,3.26,2.17,3.15,4.13,3.15,10.14},1},
{{0.09,0.09,0.1,0.06,0.12,0.09,0.09,0.13,0.11,0.13,0.12,0.12,0.08,0.11,0.08,0.1,0.08,0.1,0.12,0.12,0.09,0.1,0.11,0.1,0.13,0.06,0.1,0.13,0.11,0.09,0,9.09,2.19,3000,1314.29,3425,2.46,3.45,1.95,3.29,4.24,3.29,10.15},1},
{{0.02,0.02,0.04,0.03,0.04,0.04,0.05,0.04,0.04,0.01,0.03,0.01,0.05,0.03,0.04,0.03,0.03,0.03,0.05,0.03,0.02,0.05,0.04,0.02,0.04,0.05,0.01,0.03,0.02,0.05,0,2.97,0.7,475,883.33,1200,0.56,2.06,0.65,2.46,7.65,2.46,3.22},1},
{{0.03,0.38,0.09,0.08,0,0.13,0.13,0,0.14,0.04,0.12,0.07,0.19,0,0,0.36,0,0.14,0,0.13,0,0.01,0,0,0.04,0,0.1,0.13,0.23,0.51,0,3.01,8.14,267.14,375,263.51,4.21,0.06,0.05,4.21,0.21,4.21,9.64},3},
{{0.27,0.52,0.05,0.02,0,0.04,0.03,0,0.02,0.05,0.06,0.01,0.2,0,0,0.48,0,0.07,0,0.18,0.08,0.01,0,0,0.04,0,0.06,0.12,0.17,0.51,0,3.06,8.09,250,234.62,266.67,4.16,0.15,0.16,4.21,0.48,4.21,9.63},3},
{{0.03,0.03,0.04,0.06,0,0.09,0.24,0,0.35,0.18,0.05,0.07,0.23,0,0,0.3,0,0.15,0,0.22,0.13,0.16,0,0,0.35,0,0.22,0.11,0.04,0.01,0,3.04,8.01,300,332.14,248.72,4.32,0.07,0.04,4.32,0.12,4.32,9.6},3},
{{0.01,0.01,0.02,0.08,0,0.13,0.3,0,0.4,0.08,0.02,0.02,0.11,0,0,0.41,0,0.31,0,0.13,0.07,0.16,0,0,0.41,0,0.32,0.05,0,0.01,0,3.04,8.01,272.06,309.68,293.94,4.31,0.04,0.03,4.31,0.05,4.31,9.59},3},
{{0.02,0.03,0.07,0.18,0,0.34,0.17,0,0.13,0.08,0.05,0.04,0.15,0,0,0.32,0,0.25,0,0.2,0.06,0.11,0,0,0.25,0,0.31,0.19,0.05,0.05,0,3.04,8.04,800,733.33,205.21,4.26,0.05,0.04,4.27,0.08,4.27,9.59},3},
{{0.01,0.02,0.02,0.03,0,0.1,0.18,0,0.43,0.24,0.06,0.04,0.12,0,0,0.18,0,0.28,0,0.33,0.19,0.24,0,0,0.31,0,0.15,0.07,0.04,0.02,0,3.06,8,321.67,2137.5,223.26,4.34,0.06,0.05,4.35,0.1,4.35,9.6},3},
{{0.02,0.02,0.04,0.25,0,0.28,0.15,0,0.14,0.12,0.06,0.06,0.08,0,0,0.14,0,0.33,0,0.35,0.07,0.11,0,0,0.28,0,0.28,0.2,0.03,0.04,0,3.05,8.03,293.94,310,193.14,4.28,0.06,0.05,4.28,0.09,4.28,9.6},3},
{{0.03,0.13,0.21,0.21,0,0.18,0.14,0,0.1,0.03,0.06,0.04,0.1,0,0,0.26,0,0.25,0,0.3,0.05,0.07,0,0,0.14,0,0.31,0.26,0.12,0.07,0,3.05,8.05,251.28,536.11,246.05,4.22,0.06,0.05,4.23,0.09,4.23,9.59},3},
{{0.01,0.01,0.04,0.04,0,0.06,0.09,0,0.05,0.04,0.03,0.01,0.04,0,0,0.13,0,0.06,0,0.06,0.03,0.02,0,0,0.07,0,0.1,0.07,0.01,0.02,0,0.97,2.57,350,213.64,305.56,1.37,0.66,1.75,4.28,2.06,4.28,3.07},3},
{{0.04,0.18,0.15,0.21,0.17,0.13,0.07,0.03,0.03,0.02,0.01,0.08,0.07,0.15,0,0.21,0.2,0.16,0.07,0.07,0.02,0.13,0.17,0.17,0.16,0.15,0.09,0.12,0.02,0,0,9.75,0.91,350,243.75,818.75,1.54,0.07,0.15,1.56,0.13,1.56,9.92},4},
{{0.14,0.13,0.16,0.15,0.28,0.07,0.05,0.02,0.03,0.01,0.08,0.1,0.11,0.13,0,0.17,0.1,0.14,0.04,0.16,0.04,0.1,0.11,0.19,0.15,0.16,0.12,0.1,0.05,0.01,0,9.74,0.93,350,262.16,1800,1.61,0.11,0.17,1.63,0.17,1.63,9.92},4},
{{0.17,0.22,0.17,0.15,0.18,0.06,0.03,0.02,0.01,0,0.03,0.17,0.14,0.15,0,0.17,0.14,0.09,0.05,0.07,0.01,0.09,0.1,0.12,0.14,0.11,0.18,0.18,0.07,0.01,0,9.72,0.99,350,252.63,500,1.66,0.1,0.17,1.68,0.23,1.68,9.91},4},
{{0.03,0.04,0.03,0.05,0.12,0.19,0.2,0.12,0.07,0.15,0.15,0.17,0.12,0.15,0,0.09,0.08,0.08,0.06,0.11,0.02,0.03,0.03,0.04,0.03,0.05,0.02,0.13,0.36,0.3,0,9.68,1.48,400,225,225,1.24,0.21,0.38,1.31,0.44,1.31,9.9},4},
{{0.12,0.07,0.03,0.06,0.12,0.15,0.13,0.12,0.14,0.09,0.18,0.24,0.1,0.08,0,0.09,0.1,0.06,0.03,0.15,0.06,0.03,0.02,0.01,0.02,0.06,0.07,0.16,0.19,0.39,0,9.67,1.42,400,254.05,225,1.34,0.18,0.48,1.41,0.28,1.41,9.9},4},
{{0.15,0.07,0.06,0.05,0.05,0.06,0.16,0.16,0.12,0.15,0.08,0.12,0.05,0.09,0,0.06,0.17,0.11,0.11,0.23,0.19,0.19,0.12,0.08,0.16,0.06,0.05,0.1,0.03,0.03,0,9.78,0.8,400,875,1625,1.32,0.15,0.27,1.42,0.25,1.42,9.92},4},
{{0.06,0.04,0.02,0,0.02,0.05,0.09,0.15,0.27,0.32,0.02,0.02,0.05,0.01,0,0.13,0.16,0.23,0.13,0.26,0.27,0.07,0.04,0.09,0.15,0.16,0.1,0.06,0.03,0.05,0,9.82,0.81,875,678.57,1350,1,0.11,0.35,1.19,0.36,1.19,9.93},4},
{{0.01,0,0.01,0.03,0.02,0.05,0.03,0.08,0.16,0.06,0.02,0.03,0.02,0.03,0,0.03,0.04,0.04,0.09,0.15,0.06,0.08,0.06,0.05,0.06,0.07,0.06,0.02,0.02,0,0,4.32,0.37,875,139.66,380,0.48,2.42,0.22,1.14,5.51,1.14,4.37},4},
{{0.08,0.05,0.08,0.12,0.14,0.1,0.17,0.1,0.09,0.1,0.08,0.14,0.14,0.12,0.1,0.06,0.11,0.07,0.08,0.11,0.15,0.07,0.07,0.08,0.09,0.13,0.11,0.13,0.11,0.08,0,10.12,-0.21,1550,1137.5,1510,3.3,4.1,4.38,4.15,4.94,4.15,12.3},2},
{{0.11,0.07,0.11,0.09,0.09,0.1,0.16,0.09,0.09,0.12,0.08,0.11,0.12,0.13,0.06,0.1,0.09,0.09,0.15,0.1,0.16,0.07,0.09,0.11,0.08,0.06,0.15,0.11,0.09,0.09,0,10.62,-0.49,2066.67,775,1050,3.75,4.11,4.35,4.67,4.87,4.67,12.89},2},
{{0.13,0.11,0.08,0.1,0.09,0.08,0.11,0.13,0.1,0.09,0.1,0.13,0.11,0.07,0.07,0.07,0.11,0.13,0.14,0.09,0.1,0.1,0.11,0.13,0.11,0.08,0.06,0.11,0.08,0.13,0,10.54,-0.15,2325,765,1733.33,3.91,4.4,4.55,4.64,5.14,4.64,12.94},2},
{{0.12,0.11,0.09,0.11,0.1,0.13,0.1,0.1,0.07,0.11,0.11,0.06,0.17,0.1,0.09,0.11,0.04,0.15,0.13,0.08,0.16,0.11,0.07,0.09,0.12,0.06,0.09,0.12,0.14,0.07,0,10.55,-0.4,2050,994.44,2312.5,3.94,4.03,4.53,4.78,4.8,4.78,12.87},2},
{{0.08,0.13,0.11,0.13,0.09,0.1,0.11,0.1,0.07,0.11,0.08,0.13,0.11,0.07,0.06,0.13,0.14,0.08,0.13,0.09,0.11,0.12,0.16,0.09,0.09,0.08,0.1,0.08,0.08,0.12,0,10.62,-0.4,2350,668.18,2100,3.77,4.05,4.44,4.46,4.8,4.46,12.89},2},
{{0.1,0.14,0.11,0.11,0.08,0.09,0.13,0.07,0.06,0.14,0.12,0.13,0.08,0.11,0.08,0.09,0.08,0.1,0.12,0.11,0.11,0.16,0.09,0.07,0.13,0.06,0.1,0.12,0.09,0.09,0,10.35,-0.58,2050,711.54,2050,4.17,4.32,4.3,5.05,5.11,5.05,12.88},2},
{{0.1,0.12,0.09,0.11,0.09,0.11,0.1,0.11,0.06,0.13,0.11,0.09,0.14,0.09,0.06,0.1,0.15,0.09,0.1,0.11,0.12,0.11,0.12,0.09,0.1,0.07,0.09,0.1,0.14,0.09,0,10.48,-0.17,3050,880,1208.33,4.08,4.25,4.55,5.05,5.04,5.05,13.01},2},
{{0.09,0.11,0.12,0.11,0.1,0.1,0.11,0.06,0.12,0.12,0.11,0.12,0.09,0.11,0.09,0.11,0.08,0.09,0.12,0.11,0.13,0.11,0.1,0.06,0.1,0.1,0.07,0.12,0.13,0.1,0,10.45,-0.18,2716.67,553.13,2366.67,4.1,4.3,4.58,5.06,5.12,5.06,13.03},2},
{{0.11,0.11,0.12,0.09,0.1,0.09,0.1,0.08,0.08,0.14,0.09,0.1,0.13,0.09,0.08,0.1,0.12,0.12,0.08,0.12,0.12,0.1,0.08,0.08,0.13,0.11,0.09,0.08,0.11,0.12,0,10.55,-0.04,2075,657.69,1733.33,4.36,4.19,4.57,5.31,5,5.31,13.15},2},
{{0.1,0.1,0.14,0.1,0.1,0.11,0.09,0.06,0.08,0.14,0.1,0.1,0.13,0.09,0.09,0.09,0.11,0.11,0.09,0.12,0.09,0.13,0.09,0.12,0.12,0.06,0.08,0.13,0.12,0.09,0,10.58,-0.15,1171.43,708.33,2733.33,4.39,4.19,4.36,5.39,5.01,5.39,13.06},2},
{{0.08,0.13,0.08,0.08,0.11,0.07,0.12,0.15,0.1,0.1,0.06,0.14,0.11,0.09,0.09,0.12,0.11,0.1,0.12,0.09,0.1,0.13,0.08,0.09,0.14,0.07,0.07,0.13,0.11,0.1,0,10.56,-0.19,2050,836.36,1321.43,3.94,4.01,4.5,4.87,4.8,4.87,12.94},2},
{{0.09,0.13,0.08,0.11,0.1,0.12,0.09,0.09,0.11,0.1,0.08,0.1,0.09,0.11,0.12,0.11,0.12,0.11,0.09,0.09,0.06,0.1,0.12,0.12,0.1,0.1,0.13,0.08,0.07,0.14,0,10.72,-0.02,2700,680.77,2125,3.9,3.7,4.21,4.67,4.59,4.67,12.92},2},
{{0.1,0.13,0.09,0.07,0.15,0.1,0.1,0.08,0.11,0.1,0.1,0.08,0.11,0.09,0.16,0.12,0.1,0.08,0.07,0.1,0.06,0.11,0.16,0.1,0.1,0.08,0.15,0.09,0.09,0.1,0,10.47,-0.18,3100,754.17,1550,3.98,3.8,4.08,4.88,4.74,4.88,12.73},2},
{{0.08,0.11,0.12,0.11,0.08,0.07,0.13,0.1,0.11,0.1,0.09,0.1,0.07,0.13,0.12,0.16,0.12,0.09,0.08,0.08,0.1,0.1,0.14,0.15,0.09,0.06,0.08,0.08,0.11,0.12,0,10.6,-0.17,1550,950,3675,3.86,3.61,4.66,4.62,4.57,4.62,13.01},2},
{{0.09,0.14,0.08,0.09,0.13,0.09,0.09,0.08,0.12,0.12,0.1,0.11,0.07,0.12,0.09,0.12,0.13,0.11,0.05,0.12,0.13,0.09,0.07,0.12,0.12,0.06,0.14,0.09,0.1,0.1,0,10.52,-0.22,2600,740,1366.67,4.17,3.95,4.37,5.11,4.82,5.11,12.97},2},
{{0.1,0.1,0.11,0.11,0.07,0.14,0.06,0.11,0.14,0.08,0.08,0.11,0.08,0.15,0.12,0.08,0.11,0.09,0.09,0.12,0.07,0.1,0.1,0.11,0.11,0.12,0.09,0.1,0.16,0.06,0,10.61,-0.14,2083.33,729.17,1825,4.04,3.88,4.11,4.94,4.8,4.94,12.81},2},
{{0.11,0.11,0.1,0.1,0.07,0.15,0.07,0.09,0.14,0.09,0.08,0.08,0.1,0.15,0.1,0.12,0.13,0.13,0.06,0.07,0.08,0.13,0.09,0.14,0.13,0.06,0.09,0.09,0.1,0.11,0,10.58,-0.24,4200,875,1680,3.95,3.57,4.35,4.78,4.45,4.78,12.83},2},
{{0.09,0.13,0.09,0.1,0.11,0.08,0.1,0.13,0.08,0.11,0.08,0.1,0.09,0.1,0.11,0.13,0.14,0.08,0.1,0.09,0.1,0.12,0.09,0.11,0.11,0.11,0.07,0.1,0.1,0.12,0,10.66,-0.16,1416.67,922.22,1812.5,4.03,3.74,4.41,4.91,4.66,4.91,13},2},
{{0.12,0.11,0.07,0.08,0.11,0.12,0.09,0.11,0.13,0.09,0.1,0.08,0.07,0.1,0.17,0.11,0.12,0.09,0.08,0.11,0.09,0.05,0.12,0.12,0.1,0.17,0.09,0.1,0.08,0.11,0,10.66,-0.14,1600,845.45,1562.5,3.95,3.72,4.08,4.85,4.74,4.85,12.96},2},
{{0.12,0.1,0.13,0.04,0.09,0.08,0.1,0.13,0.14,0.08,0.11,0.07,0.09,0.12,0.15,0.08,0.1,0.1,0.09,0.11,0.11,0.09,0.06,0.13,0.08,0.12,0.16,0.06,0.1,0.11,0,10.57,-0.04,2525,657.69,1787.5,4.1,3.96,4.25,5.03,4.93,5.03,13.02},2},
{{0.1,0.12,0.08,0.1,0.11,0.07,0.12,0.16,0.05,0.12,0.1,0.12,0.13,0.06,0.08,0.05,0.13,0.14,0.1,0.11,0.1,0.13,0.1,0.09,0.08,0.13,0.09,0.08,0.11,0.11,0,10.62,-0.16,3150,633.33,2100,3.95,4.38,4.44,4.83,5.12,4.83,13.04},2},
{{0.09,0.13,0.07,0.1,0.13,0.1,0.12,0.09,0.1,0.11,0.11,0.09,0.12,0.08,0.1,0.06,0.1,0.09,0.15,0.11,0.1,0.11,0.13,0.07,0.1,0.1,0.12,0.09,0.11,0.08,0,10.56,-0.37,1716.67,720.83,1716.67,3.97,4.36,4.07,4.96,5.13,4.96,12.91},2},
{{0.1,0.07,0.13,0.11,0.1,0.11,0.11,0.1,0.11,0.09,0.13,0.11,0.12,0.07,0.12,0.09,0.08,0.07,0.1,0.14,0.08,0.1,0.1,0.11,0.1,0.08,0.11,0.15,0.11,0.08,0,10.39,-0.16,2100,715.38,2125,4.02,4.47,4.16,5.07,5.33,5.07,12.76},2},
{{0.08,0.06,0.12,0.11,0.12,0.09,0.12,0.11,0.15,0.07,0.11,0.09,0.1,0.11,0.13,0.09,0.06,0.14,0.09,0.11,0.08,0.11,0.09,0.08,0.1,0.13,0.13,0.11,0.08,0.11,0,10.55,0.03,2125,930,3625,3.62,4.02,4.3,4.52,4.91,4.52,12.73},2},
{{0.12,0.1,0.1,0.1,0.12,0.11,0.07,0.06,0.14,0.11,0.12,0.11,0.05,0.1,0.1,0.13,0.06,0.13,0.09,0.13,0.1,0.12,0.07,0.1,0.1,0.11,0.12,0.12,0.07,0.11,0,10.7,-0.13,1487.5,669.23,1350,4.31,4.18,4.21,5.19,5.1,5.19,13.22},2},
{{0.09,0.11,0.06,0.15,0.06,0.1,0.13,0.12,0.09,0.11,0.1,0.08,0.1,0.09,0.1,0.14,0.1,0.1,0.12,0.1,0.11,0.13,0.09,0.09,0.11,0.09,0.11,0.12,0.09,0.09,0,10.7,-0.31,1040,875,1025,3.92,3.89,4.38,4.94,4.79,4.94,13.09},2},
{{0.12,0.09,0.1,0.12,0.1,0.08,0.05,0.14,0.1,0.14,0.1,0.11,0.09,0.11,0.08,0.11,0.14,0.09,0.1,0.1,0.08,0.12,0.12,0.09,0.12,0.1,0.08,0.12,0.07,0.13,0,10.39,-0.08,4200,859.09,1837.5,4.32,4.21,4.6,5.16,5.06,5.16,13.08},2},
{{0.11,0.05,0.14,0.11,0.12,0.12,0.09,0.11,0.1,0.09,0.12,0.08,0.12,0.09,0.1,0.09,0.05,0.16,0.12,0.1,0.1,0.13,0.09,0.07,0.08,0.11,0.11,0.09,0.12,0.12,0,10.52,0.04,3125,1562.5,2433.33,3.74,4.14,4.54,4.58,4.93,4.58,12.89},2},
{{0.09,0.09,0.08,0.1,0.1,0.16,0.09,0.11,0.14,0.06,0.13,0.1,0.11,0.08,0.11,0.08,0.09,0.1,0.14,0.09,0.09,0.07,0.11,0.06,0.1,0.17,0.13,0.08,0.12,0.09,0,10.32,0,3125,2150,3100,3.57,4.26,4.08,4.5,5.09,4.5,12.6},2},
{{0.12,0.1,0.09,0.1,0.09,0.15,0.08,0.1,0.12,0.07,0.12,0.09,0.1,0.08,0.13,0.07,0.13,0.09,0.12,0.09,0.06,0.08,0.12,0.12,0.11,0.11,0.11,0.1,0.11,0.11,0,10.43,0.16,2150,1106.25,2466.67,3.81,4.1,4.29,4.6,4.92,4.6,12.7},2},
{{0.1,0.08,0.12,0.15,0.09,0.08,0.09,0.09,0.12,0.1,0.1,0.09,0.09,0.12,0.11,0.11,0.12,0.09,0.1,0.09,0.08,0.1,0.12,0.11,0.08,0.13,0.06,0.09,0.11,0.13,0,10.46,0.11,2466.67,1057.14,3175,3.99,3.91,4.64,4.74,4.77,4.74,12.88},2},
{{0.13,0.07,0.11,0.09,0.11,0.09,0.11,0.14,0.09,0.1,0.13,0.12,0.08,0.1,0.07,0.13,0.08,0.08,0.07,0.14,0.05,0.08,0.12,0.15,0.05,0.14,0.12,0.13,0.09,0.1,0,10.19,0.01,1416.67,630,1783.33,3.87,4.65,4.01,4.76,5.61,4.76,12.55},2},
{{0.09,0.08,0.11,0.15,0.09,0.16,0.11,0.09,0.06,0.05,0.11,0.09,0.08,0.14,0.15,0.09,0.09,0.07,0.08,0.08,0.03,0.03,0.16,0.13,0.11,0.15,0.1,0.1,0.08,0.08,0,9.68,-0.1,1875,1487.5,3450,3.25,3.83,3.51,4.23,5.08,4.23,11.66},2},
{{0.15,0.11,0.07,0.06,0.09,0.15,0.1,0.12,0.11,0.06,0.09,0.16,0.12,0.06,0.11,0.08,0.11,0.09,0.11,0.02,0.12,0.1,0.08,0.09,0.12,0.11,0.1,0.12,0.07,0.12,0,7,-1.38,1066.67,422.73,1737.5,8.23,7.93,5.14,10.25,9.63,10.25,15.53},0},
{{0.12,0.14,0.06,0.1,0.11,0.11,0.11,0.12,0.1,0.05,0.1,0.12,0.14,0.11,0.08,0.09,0.09,0.1,0.07,0.01,0.1,0.13,0.08,0.1,0.08,0.1,0.13,0.13,0.07,0.09,0,6.88,-1.58,2350,316.67,2350,8.13,7.93,4.78,9.93,9.64,9.93,15.18},0},
{{0.15,0.13,0.07,0.08,0.09,0.11,0.09,0.1,0.13,0.08,0.09,0.1,0.15,0.14,0.08,0.11,0.08,0.09,0.12,0.01,0.08,0.1,0.12,0.11,0.09,0.06,0.18,0.12,0.07,0.1,0,7,-1.05,1800,330.36,1400,8.64,7.65,4.9,10.4,9.54,10.4,15.54},0},
{{0.17,0.12,0.06,0.05,0.14,0.09,0.1,0.1,0.12,0.07,0.09,0.12,0.13,0.09,0.11,0.1,0.09,0.09,0.13,0.02,0.07,0.11,0.16,0.08,0.08,0.05,0.15,0.13,0.08,0.11,0,7.24,-1.09,2750,311.29,1175,8.35,7.78,5.06,10.24,9.72,10.24,15.66},0},
{{0.14,0.14,0.04,0.08,0.14,0.13,0.1,0.11,0.08,0.08,0.12,0.1,0.09,0.12,0.1,0.11,0.12,0.07,0.09,0.01,0.06,0.11,0.09,0.15,0.07,0.12,0.14,0.1,0.06,0.12,0,6.98,-0.97,2600,447.62,2600,8.26,7.84,4.77,10.15,9.81,10.15,15.62},0},
{{0.12,0.12,0.11,0.09,0.09,0.12,0.09,0.09,0.11,0.08,0.11,0.09,0.11,0.11,0.12,0.1,0.1,0.09,0.1,0.02,0.04,0.12,0.13,0.1,0.11,0.06,0.16,0.12,0.1,0.09,0,7.09,-1.08,3550,391.67,2883.33,8.41,7.89,4.52,10.15,9.88,10.15,15.5},0},
{{0.16,0.11,0.09,0.08,0.08,0.11,0.12,0.08,0.13,0.07,0.11,0.08,0.12,0.11,0.08,0.15,0.1,0.11,0.09,0.01,0.05,0.13,0.13,0.11,0.1,0.06,0.13,0.13,0.08,0.1,0,7.19,-1.34,2916.67,434.09,3950,8.52,7.55,4.55,10.42,9.59,10.42,15.62},0},
{{0.16,0.1,0.1,0.07,0.12,0.14,0.09,0.08,0.09,0.08,0.12,0.07,0.08,0.1,0.15,0.12,0.08,0.13,0.09,0,0.08,0.13,0.08,0.09,0.09,0.11,0.14,0.14,0.07,0.09,0,7.43,-1.41,3900,426.09,1133.33,8.46,7.63,4.61,10.25,9.78,10.25,15.81},0},
{{0.12,0.09,0.11,0.1,0.11,0.15,0.06,0.09,0.11,0.09,0.11,0.08,0.09,0.11,0.12,0.09,0.16,0.07,0.08,0.02,0.08,0.13,0.12,0.13,0.05,0.12,0.08,0.05,0.12,0.13,0,7.42,-1.5,1550,359.62,3500,8.1,7.81,4.96,9.7,9.91,9.7,15.71},0},
{{0.15,0.09,0.1,0.09,0.1,0.15,0.08,0.06,0.12,0.08,0.1,0.1,0.08,0.12,0.13,0.13,0.12,0.07,0.09,0.02,0.1,0.12,0.1,0.08,0.1,0.1,0.11,0.1,0.09,0.13,0,7.01,-1.24,1766.67,378,2300,8.5,7.58,5.16,10.19,9.65,10.19,15.56},0},
{{0.14,0.1,0.1,0.09,0.11,0.11,0.11,0.07,0.09,0.1,0.11,0.1,0.08,0.14,0.12,0.11,0.08,0.1,0.09,0.02,0.08,0.1,0.1,0.09,0.1,0.15,0.12,0.14,0.1,0.05,0,6.84,-1.5,3125,331.03,3500,8.46,7.81,4.38,10.22,10.03,10.22,15.49},0},
{{0.1,0.16,0.07,0.09,0.15,0.07,0.11,0.11,0.08,0.09,0.11,0.07,0.08,0.09,0.12,0.14,0.11,0.11,0.1,0.01,0.09,0.09,0.15,0.1,0.09,0.06,0.11,0.08,0.13,0.13,0,7.76,-1.14,1510,341.07,2275,8.23,7.82,5.17,9.95,10.06,9.95,16.14},0},
{{0.1,0.15,0.08,0.08,0.15,0.09,0.09,0.12,0.06,0.09,0.1,0.1,0.08,0.09,0.13,0.14,0.08,0.11,0.1,0.01,0.05,0.11,0.12,0.11,0.11,0.11,0.09,0.07,0.08,0.16,0,7.26,-0.96,1235.71,361.11,1175,8.25,7.77,4.82,9.93,9.81,9.93,15.63},0},
{{0.12,0.12,0.08,0.17,0.1,0.08,0.04,0.16,0.07,0.07,0.11,0.09,0.08,0.12,0.09,0.1,0.08,0.11,0.11,0.02,0.05,0.09,0.11,0.11,0.1,0.09,0.15,0.11,0.1,0.11,0,7.74,-0.79,1033.33,300,1550,8.47,8.1,4.64,10.14,9.99,10.14,15.82},0},
{{0.14,0.11,0.12,0.07,0.11,0.1,0.12,0.11,0.08,0.07,0.11,0.08,0.12,0.11,0.1,0.11,0.11,0.08,0.08,0.02,0.08,0.09,0.13,0.08,0.09,0.11,0.1,0.13,0.13,0.08,0,7.29,-1.13,2033.33,339.29,2050,8.19,7.72,4.72,10.02,9.66,10.02,15.31},0},
{{0.1,0.13,0.15,0.11,0.06,0.09,0.13,0.06,0.09,0.1,0.11,0.11,0.09,0.12,0.1,0.14,0.08,0.1,0.07,0.02,0.1,0.1,0.1,0.06,0.11,0.12,0.11,0.14,0.09,0.1,0,6.85,-1.41,2266.67,332.76,2300,8.45,7.7,4.78,10.06,9.69,10.06,15.39},0},
{{0.12,0.13,0.11,0.09,0.11,0.1,0.11,0.07,0.07,0.12,0.1,0.13,0.08,0.11,0.11,0.11,0.11,0.1,0.09,0.01,0.14,0.09,0.09,0.1,0.11,0.12,0.07,0.13,0.14,0.04,0,6.75,-2.09,1750,376.92,3425,8.44,7.97,4.72,10.07,10.03,10.07,15.57},0},
{{0.11,0.11,0.11,0.08,0.11,0.13,0.12,0.04,0.11,0.1,0.1,0.09,0.08,0.1,0.12,0.1,0.13,0.1,0.09,0.01,0.13,0.08,0.07,0.08,0.08,0.17,0.15,0.09,0.13,0.06,0,7.75,-1.65,1850,348.15,3375,8.32,8.01,4.65,9.92,10.06,9.92,15.95},0},
{{0.1,0.11,0.11,0.11,0.13,0.12,0.09,0.06,0.11,0.09,0.11,0.09,0.09,0.11,0.11,0.09,0.11,0.1,0.11,0.01,0.14,0.1,0.06,0.06,0.12,0.15,0.11,0.09,0.13,0.07,0,7.6,-1.84,1220,335.71,3025,8.23,8.17,4.68,9.79,10.24,9.79,15.98},0},
{{0.09,0.1,0.12,0.09,0.08,0.13,0.1,0.1,0.11,0.1,0.11,0.1,0.1,0.09,0.14,0.1,0.1,0.11,0.06,0.01,0.07,0.1,0.14,0.1,0.11,0.08,0.12,0.13,0.11,0.07,0,6.99,-1.4,3150,335.71,3475,7.89,7.88,4.62,9.58,9.9,9.58,15.29},0},
{{0.1,0.09,0.11,0.11,0.11,0.11,0.16,0.04,0.08,0.12,0.1,0.09,0.07,0.14,0.09,0.1,0.1,0.12,0.1,0.02,0.13,0.11,0.08,0.14,0.12,0.06,0.06,0.09,0.16,0.08,0,7.69,-1.91,1950,327.59,1550,7.96,8.07,4.94,9.58,10.11,9.58,15.88},0},
{{0.09,0.1,0.12,0.09,0.08,0.11,0.18,0.03,0.08,0.14,0.1,0.09,0.08,0.09,0.15,0.1,0.09,0.12,0.1,0.01,0.09,0.1,0.09,0.12,0.14,0.1,0.06,0.11,0.13,0.08,0,7.72,-1.63,2250,313.79,1780,7.72,8.06,4.71,9.35,10.23,9.35,15.74},0},
{{0.09,0.08,0.12,0.11,0.1,0.1,0.17,0.04,0.08,0.13,0.1,0.1,0.08,0.09,0.12,0.1,0.12,0.09,0.11,0.02,0.14,0.09,0.09,0.11,0.12,0.06,0.08,0.11,0.09,0.12,0,7.52,-1.84,1337.5,337.04,2250,7.86,8.23,5.16,9.43,10.39,9.43,16.03},0},
{{0.07,0.06,0.1,0.12,0.14,0.15,0.11,0.09,0.07,0.13,0.11,0.1,0.09,0.1,0.1,0.11,0.09,0.11,0.12,0.01,0.18,0.06,0.07,0.16,0.1,0.09,0.04,0.07,0.12,0.13,0,7.62,-1.92,1233.33,327.59,2783.33,7.18,8.38,5.37,8.58,10.34,8.58,15.86},0},
{{0.02,0.07,0.15,0.12,0.06,0.07,0.08,0.17,0.13,0.15,0.09,0.1,0.15,0.1,0.07,0.06,0.11,0.12,0.07,0.03,0.13,0.14,0.07,0.08,0.12,0.1,0.07,0.09,0.11,0.11,0,7.85,-1.94,1137.5,325,3000,7.15,8.36,5.1,8.37,9.94,8.37,15.59},0},
{{0.01,0.06,0.16,0.12,0.06,0.05,0.05,0.2,0.13,0.17,0.09,0.14,0.13,0.07,0.05,0.07,0.11,0.12,0.1,0.01,0.15,0.1,0.09,0.12,0.12,0.08,0.05,0.08,0.12,0.12,0,8.01,-1.92,2783.33,350,2033.33,7.16,8.56,5.3,8.22,10.03,8.22,15.82},0},
{{0,0.06,0.11,0.19,0.08,0.03,0.1,0.15,0.15,0.15,0.09,0.12,0.13,0.08,0.06,0.08,0.07,0.14,0.1,0.01,0.19,0.09,0.1,0.07,0.1,0.12,0.07,0.04,0.09,0.16,0,8.24,-2.04,1550,332.76,2316.67,6.8,8.53,5.63,7.77,10.07,7.77,15.9},0},
{{0,0.07,0.12,0.16,0.08,0.07,0.07,0.13,0.17,0.16,0.09,0.14,0.09,0.1,0.06,0.06,0.11,0.08,0.11,0.02,0.15,0.12,0.07,0.11,0.11,0.11,0.07,0.06,0.09,0.13,0,8.25,-2.13,1366.67,370,1925,7.12,8.68,5.33,8.17,10.19,8.17,16.06},0},
{{0.01,0.05,0.11,0.13,0.14,0.04,0.06,0.19,0.15,0.15,0.09,0.12,0.13,0.07,0.06,0.1,0.07,0.12,0.14,0.01,0.08,0.09,0.14,0.12,0.11,0.15,0.06,0.03,0.11,0.14,0,8.5,-1.46,1912.5,359.26,1816.67,6.82,8.53,4.68,7.76,10.05,7.76,15.51},0},
{{0.01,0.01,0.01,0.03,0.01,0.02,0.07,0.07,0.03,0.03,0.01,0.03,0.02,0.03,0.02,0.02,0.08,0.04,0.03,0.01,0.01,0,0.02,0.05,0.02,0.07,0.04,0.03,0.02,0.03,0,2.6,-0.11,433.33,470,1150,1.31,2.44,1.07,6.58,10.45,6.58,3.72},0},
{{0.05,0.06,0.08,0.06,0.12,0.07,0.06,0.16,0.13,0.23,0.12,0.11,0.11,0.11,0.07,0.08,0.08,0.09,0.1,0.16,0.17,0.06,0.07,0.12,0.07,0.08,0.11,0.1,0.11,0.12,0,10.23,-0.21,1366.67,559.38,3575,4.44,4.61,4.59,5.58,5.55,5.58,13.17},2},
{{0.08,0.11,0.1,0.12,0.09,0.07,0.09,0.11,0.12,0.14,0.1,0.09,0.11,0.08,0.14,0.1,0.08,0.1,0.12,0.1,0.12,0.08,0.07,0.11,0.14,0.09,0.1,0.12,0.08,0.12,0,10.42,-0.03,1366.67,1021.43,2383.33,4.28,3.98,4.3,5.08,4.96,5.08,12.97},2},
{{0.1,0.12,0.09,0.08,0.11,0.09,0.05,0.15,0.11,0.13,0.13,0.07,0.12,0.1,0.08,0.1,0.07,0.1,0.13,0.13,0.12,0.08,0.1,0.09,0.12,0.13,0.1,0.07,0.09,0.12,0,10.16,-0.31,925,895,1525,4.38,4.46,4.22,5.26,5.46,5.26,12.96},2},
{{0.13,0.15,0.06,0.11,0.08,0.09,0.11,0.11,0.07,0.12,0.13,0.09,0.08,0.1,0.07,0.12,0.08,0.07,0.15,0.13,0.16,0.08,0.08,0.1,0.13,0.06,0.1,0.1,0.13,0.1,0,10.32,-0.1,1275,920,2716.67,4.48,4.53,4.46,5.29,5.51,5.29,13.16},2},
{{0.12,0.09,0.13,0.11,0.09,0.11,0.09,0.07,0.11,0.1,0.11,0.08,0.15,0.07,0.07,0.09,0.1,0.12,0.11,0.11,0.12,0.13,0.09,0.07,0.1,0.1,0.12,0.08,0.13,0.09,0,10.36,-0.09,1666.67,1038.89,2000,4.51,4.29,4.36,5.32,5.23,5.32,13.13},2},
{{0.15,0.1,0.09,0.11,0.09,0.13,0.06,0.07,0.13,0.1,0.13,0.1,0.1,0.09,0.06,0.12,0.09,0.09,0.12,0.12,0.16,0.07,0.08,0.13,0.11,0.06,0.1,0.09,0.11,0.11,0,10.15,-0.37,2825,740.91,2550,4.56,4.43,4.34,5.29,5.36,5.29,13},2},
{{0.14,0.11,0.13,0.05,0.1,0.09,0.1,0.09,0.12,0.11,0.11,0.06,0.14,0.06,0.09,0.1,0.12,0.12,0.1,0.11,0.17,0.1,0.1,0.05,0.1,0.05,0.14,0.07,0.13,0.11,0,10.41,-0.23,2037.5,653.57,2716.67,4.53,4.1,4.45,5.31,5.06,5.31,13.16},2},
{{0.14,0.12,0.07,0.1,0.12,0.1,0.08,0.08,0.13,0.1,0.14,0.08,0.08,0.08,0.09,0.13,0.1,0.1,0.1,0.12,0.16,0.06,0.13,0.12,0.1,0.06,0.07,0.12,0.08,0.13,0,10.2,-0.32,2012.5,695.83,3550,4.48,4.31,4.62,5.28,5.32,5.28,13.15},2},
{{0.1,0.14,0.11,0.08,0.1,0.07,0.13,0.06,0.14,0.09,0.12,0.09,0.12,0.07,0.1,0.13,0.08,0.09,0.12,0.1,0.12,0.14,0.08,0.11,0.07,0.08,0.1,0.11,0.09,0.11,0,10.05,-0.23,2475,816.67,1025,4.28,4.16,4.32,4.98,5.12,4.98,12.75},2},
{{0.07,0.12,0.1,0.08,0.11,0.1,0.14,0.12,0.09,0.09,0.08,0.1,0.12,0.08,0.14,0.09,0.1,0.11,0.09,0.11,0.14,0.08,0.1,0.1,0.11,0.07,0.08,0.13,0.1,0.09,0,10.26,-0.37,1075,1475,2700,3.98,3.92,4.16,4.85,4.88,4.85,12.7},2},
{{0.09,0.12,0.09,0.12,0.07,0.12,0.13,0.09,0.08,0.12,0.1,0.1,0.08,0.12,0.11,0.11,0.11,0.09,0.12,0.08,0.12,0.11,0.09,0.09,0.12,0.06,0.13,0.12,0.08,0.1,0,10.16,-0.28,3200,1057.14,3700,4.15,3.82,4.12,4.99,4.74,4.99,12.61},2},
{{0.08,0.07,0.1,0.11,0.12,0.12,0.12,0.1,0.1,0.1,0.09,0.09,0.1,0.1,0.15,0.09,0.11,0.11,0.08,0.1,0.09,0.1,0.07,0.13,0.11,0.11,0.13,0.11,0.09,0.07,0,10.32,-0.31,1575,915,2675,3.86,3.76,3.77,4.62,4.77,4.62,12.52},2},
{{0.11,0.1,0.1,0.11,0.13,0.1,0.08,0.12,0.09,0.09,0.12,0.1,0.09,0.11,0.13,0.11,0.09,0.1,0.1,0.08,0.09,0.1,0.12,0.11,0.09,0.11,0.12,0.11,0.06,0.11,0,9.92,-0.31,3075,922.22,1550,4.13,3.88,3.87,4.82,4.84,4.82,12.34},2},
{{0.1,0.13,0.12,0.1,0.12,0.08,0.13,0.07,0.08,0.11,0.11,0.1,0.09,0.13,0.09,0.1,0.11,0.1,0.08,0.11,0.12,0.11,0.09,0.12,0.1,0.08,0.11,0.09,0.11,0.1,0,10.11,-0.27,2100,1168.75,2075,4.47,4.07,4.22,5.23,5.05,5.23,12.78},2},
{{0.12,0.11,0.09,0.11,0.1,0.12,0.08,0.09,0.09,0.11,0.08,0.11,0.11,0.11,0.09,0.12,0.09,0.13,0.08,0.11,0.1,0.12,0.1,0.15,0.07,0.06,0.08,0.12,0.11,0.1,0,10.31,-0.13,1025,1091.67,2766.67,4.48,3.81,4.49,5.28,4.75,5.28,12.95},2},
{{0.1,0.09,0.13,0.09,0.08,0.13,0.11,0.09,0.11,0.08,0.1,0.12,0.09,0.1,0.13,0.06,0.1,0.11,0.12,0.09,0.13,0.1,0.09,0.08,0.08,0.12,0.1,0.1,0.13,0.09,0,10.07,-0.18,2083.33,735,1837.5,4.21,4.11,4.26,5.03,5.05,5.03,12.71},2},
{{0.09,0.11,0.09,0.12,0.08,0.13,0.08,0.12,0.12,0.09,0.09,0.09,0.09,0.13,0.1,0.13,0.12,0.1,0.08,0.09,0.05,0.17,0.08,0.1,0.11,0.1,0.1,0.1,0.08,0.13,0,10.29,-0.05,3175,1058.33,3175,4.02,3.62,4.23,4.78,4.56,4.78,12.65},2},
{{0.1,0.08,0.13,0.15,0.07,0.09,0.1,0.11,0.12,0.08,0.08,0.14,0.09,0.11,0.1,0.09,0.13,0.1,0.1,0.09,0.06,0.09,0.15,0.11,0.1,0.12,0.1,0.09,0.1,0.11,0,10.04,-0.07,2150,1710,1940,4.17,3.91,4.14,4.91,4.82,4.91,12.49},2},
{{0.11,0.07,0.15,0.1,0.1,0.09,0.11,0.09,0.12,0.1,0.1,0.1,0.09,0.06,0.11,0.16,0.12,0.09,0.08,0.1,0.08,0.12,0.11,0.12,0.09,0.12,0.08,0.1,0.09,0.12,0,10.27,-0.16,1575,870,3675,4.12,3.83,4.18,4.83,4.8,4.83,12.7},2},
{{0.11,0.08,0.13,0.1,0.11,0.11,0.09,0.11,0.08,0.1,0.12,0.1,0.1,0.1,0.1,0.1,0.08,0.07,0.13,0.12,0.13,0.11,0.09,0.06,0.1,0.11,0.1,0.1,0.1,0.12,0,10.11,-0.16,3625,850,2075,4.21,4.27,4.22,5.04,5.26,5.04,12.71},2},
{{0.1,0.1,0.09,0.13,0.11,0.11,0.12,0.11,0.09,0.09,0.11,0.09,0.1,0.1,0.08,0.11,0.13,0.1,0.08,0.12,0.12,0.11,0.12,0.08,0.07,0.07,0.13,0.12,0.12,0.09,0,10.32,-0.15,1050,918.75,1575,4.18,4.05,4.11,5.07,5.03,5.07,12.82},2},
{{0.11,0.12,0.1,0.1,0.11,0.13,0.09,0.08,0.09,0.09,0.11,0.11,0.09,0.15,0.11,0.09,0.07,0.12,0.08,0.09,0.06,0.08,0.15,0.14,0.09,0.09,0.09,0.13,0.11,0.08,0,9.91,-0.32,2450,1005.56,2125,4.34,3.95,3.79,5.17,4.94,5.17,12.34},2},
{{0.1,0.09,0.1,0.09,0.13,0.12,0.12,0.06,0.11,0.1,0.11,0.09,0.1,0.08,0.13,0.11,0.1,0.09,0.13,0.09,0.06,0.09,0.11,0.14,0.1,0.14,0.08,0.12,0.08,0.11,0,10.25,-0.21,2100,1235.71,2450,4.12,3.95,3.79,4.9,4.93,4.9,12.55},2},
{{0.12,0.08,0.1,0.13,0.13,0.09,0.1,0.07,0.1,0.11,0.1,0.11,0.09,0.1,0.1,0.08,0.13,0.11,0.08,0.13,0.05,0.09,0.13,0.14,0.08,0.14,0.12,0.07,0.09,0.11,0,10.26,0.01,3216.67,1608.33,1930,4.37,4.15,3.98,5.14,5.08,5.14,12.71},2},
{{0.1,0.1,0.1,0.1,0.1,0.14,0.09,0.09,0.11,0.09,0.08,0.1,0.12,0.14,0.08,0.11,0.11,0.08,0.1,0.1,0.08,0.09,0.12,0.06,0.13,0.14,0.1,0.09,0.09,0.12,0,10.25,-0.03,1575,1100,2466.67,4.13,3.79,4.04,4.89,4.73,4.89,12.57},2},
{{0.1,0.07,0.09,0.17,0.09,0.1,0.1,0.12,0.09,0.08,0.1,0.1,0.11,0.09,0.13,0.09,0.12,0.08,0.11,0.09,0.05,0.13,0.07,0.14,0.12,0.15,0.08,0.11,0.07,0.1,0,10.16,-0.22,1862.5,944.44,1766.67,4.1,3.83,3.79,4.92,4.76,4.92,12.41},2},
{{0.11,0.09,0.09,0.11,0.1,0.12,0.1,0.11,0.1,0.1,0.11,0.1,0.08,0.1,0.13,0.09,0.13,0.09,0.09,0.1,0.04,0.09,0.12,0.11,0.15,0.12,0.11,0.1,0.1,0.1,0,10.17,0,4275,1221.43,3200,4.08,4.04,3.78,4.92,5.09,4.92,12.49},2},
{{0.08,0.08,0.11,0.13,0.07,0.13,0.1,0.14,0.09,0.1,0.1,0.11,0.09,0.11,0.09,0.1,0.1,0.1,0.14,0.09,0.05,0.1,0.13,0.11,0.11,0.14,0.06,0.09,0.12,0.1,0,10.18,-0.09,3200,914.29,3200,3.96,4.01,4.01,4.77,4.92,4.77,12.48},2},
{{0.1,0.08,0.1,0.12,0.13,0.06,0.09,0.15,0.12,0.08,0.07,0.14,0.09,0.12,0.11,0.12,0.06,0.12,0.11,0.08,0.08,0.08,0.1,0.14,0.07,0.14,0.13,0.07,0.13,0.07,0,10.19,-0.28,3700,2025,2833.33,3.87,3.67,3.84,4.68,4.58,4.68,12.38},2},
{{0.1,0.06,0.11,0.11,0.12,0.07,0.14,0.12,0.09,0.1,0.05,0.13,0.15,0.1,0.1,0.08,0.14,0.1,0.1,0.08,0.1,0.1,0.08,0.09,0.08,0.13,0.11,0.13,0.12,0.08,0,10.3,-0.08,2116.67,1100,3175,3.95,3.64,4.01,4.88,4.5,4.88,12.51},2},
{{0.09,0.1,0.13,0.09,0.11,0.11,0.13,0.09,0.08,0.09,0.09,0.13,0.09,0.11,0.1,0.08,0.12,0.11,0.1,0.08,0.09,0.12,0.08,0.11,0.12,0.08,0.1,0.1,0.15,0.09,0,10.08,-0.07,1075,1075,1690,4.17,4.03,4.17,5.03,4.88,5.03,12.5},2},
{{0.04,0.03,0.06,0.04,0.07,0.03,0.04,0.1,0.04,0.04,0.05,0.04,0.05,0.06,0.05,0.07,0.04,0.07,0.04,0.03,0.04,0.03,0.07,0.05,0.04,0.06,0.06,0.06,0.05,0.04,0,4.86,-0.06,1100,1100,1625,1.85,3.01,1.78,4.83,7.11,4.83,5.84},2},
{{0.11,0.1,0.09,0.1,0.11,0.12,0.06,0.1,0.12,0.12,0.08,0.18,0.09,0.06,0.11,0.1,0.12,0.09,0.07,0,0.1,0.1,0.09,0.13,0.06,0.08,0.18,0.1,0.08,0.1,0,8.12,-1.6,2066.67,328.57,4300,7.11,8.33,5.5,8.28,9.55,8.28,15.49},0},
{{0.11,0.11,0.09,0.08,0.09,0.09,0.11,0.08,0.16,0.1,0.12,0.11,0.12,0.07,0.07,0.14,0.1,0.08,0.08,0,0.05,0.11,0.13,0.1,0.12,0.13,0.06,0.18,0.1,0.05,0,8.39,-1.74,1566.67,333.33,4250,7.17,8.51,4.85,8.16,9.87,8.16,15.61},0},
{{0.14,0.09,0.1,0.09,0.1,0.1,0.08,0.06,0.16,0.1,0.11,0.14,0.1,0.05,0.11,0.1,0.11,0.1,0.07,0,0.05,0.1,0.14,0.09,0.11,0.11,0.13,0.15,0.09,0.06,0,8.16,-1.73,750,317.24,2725,7.31,8.53,4.75,8.37,10.06,8.37,15.64},0},
{{0.13,0.09,0.07,0.14,0.08,0.08,0.07,0.09,0.14,0.12,0.1,0.12,0.11,0.07,0.11,0.09,0.13,0.09,0.06,0,0.05,0.08,0.11,0.1,0.13,0.18,0.08,0.14,0.1,0.05,0,8.44,-1.63,3750,333.93,2766.67,7.58,8.61,4.45,8.55,10.05,8.55,15.82},0},
{{0.12,0.1,0.11,0.08,0.11,0.07,0.09,0.12,0.12,0.11,0.09,0.13,0.09,0.09,0.1,0.12,0.1,0.11,0.05,0,0.06,0.05,0.1,0.13,0.12,0.13,0.12,0.12,0.13,0.06,0,8.34,-1.18,1825,335.19,2100,7.26,8.32,4.82,8.24,9.75,8.24,15.45},0},
{{0.13,0.08,0.13,0.07,0.12,0.08,0.1,0.11,0.13,0.08,0.11,0.1,0.12,0.06,0.12,0.14,0.09,0.08,0.06,0,0.07,0.1,0.13,0.09,0.13,0.09,0.09,0.14,0.09,0.09,0,8.16,-1.62,2333.33,323.33,3900,7.04,8.28,5.23,8.14,9.93,8.14,15.65},0},
{{0.11,0.11,0.1,0.11,0.08,0.08,0.11,0.1,0.14,0.09,0.1,0.11,0.14,0.07,0.13,0.1,0.09,0.1,0.07,0,0.08,0.15,0.1,0.12,0.1,0.1,0.08,0.12,0.1,0.08,0,7.91,-2.09,1500,306.45,1483.33,7.13,8.42,5.27,8.18,9.99,8.18,15.59},0},
{{0.09,0.15,0.07,0.12,0.1,0.1,0.11,0.09,0.11,0.09,0.11,0.08,0.12,0.14,0.06,0.14,0.11,0.08,0.08,0,0.12,0.14,0.14,0.1,0.08,0.06,0.08,0.13,0.09,0.09,0,8.08,-2.41,1783.33,337.93,3075,6.92,8.46,5.7,7.94,9.98,7.94,15.81},0},
{{0.09,0.1,0.11,0.09,0.11,0.11,0.11,0.09,0.12,0.09,0.09,0.11,0.09,0.11,0.13,0.08,0.12,0.1,0.08,0,0.15,0.14,0.09,0.07,0.08,0.09,0.09,0.12,0.08,0.11,0,8.44,-2.52,3400,311.67,2300,6.51,8.32,5.71,7.54,9.88,7.54,15.79},0},
{{0.11,0.12,0.08,0.11,0.08,0.09,0.09,0.12,0.15,0.07,0.1,0.09,0.09,0.12,0.13,0.11,0.1,0.1,0.07,0,0.15,0.1,0.1,0.1,0.12,0.06,0.05,0.1,0.14,0.1,0,8.17,-2.14,1380,344.64,1925,6.9,8.2,5.75,7.91,9.9,7.91,15.72},0},
{{0.1,0.11,0.09,0.11,0.11,0.09,0.1,0.1,0.09,0.13,0.1,0.09,0.1,0.11,0.15,0.07,0.08,0.1,0.07,0,0.09,0.14,0.07,0.12,0.13,0.1,0.08,0.1,0.12,0.09,0,8.32,-2.05,1112.5,303.23,3400,6.99,8.29,5.29,8.03,9.93,8.03,15.81},0},
{{0.11,0.07,0.14,0.1,0.1,0.1,0.08,0.11,0.12,0.1,0.11,0.1,0.12,0.09,0.08,0.11,0.11,0.12,0.05,0,0.11,0.14,0.11,0.1,0.11,0.07,0.1,0.07,0.11,0.12,0,8.16,-2.06,1125,341.07,3025,6.98,8.66,5.67,8.04,10.12,8.04,15.97},0},
{{0.08,0.1,0.13,0.11,0.08,0.1,0.15,0.08,0.1,0.1,0.1,0.08,0.12,0.11,0.11,0.1,0.08,0.12,0.07,0,0.08,0.11,0.08,0.11,0.11,0.15,0.08,0.1,0.09,0.12,0,8.51,-1.44,1540,316.13,1550,6.65,8.31,5.35,7.56,9.91,7.56,15.69},0},
{{0.11,0.09,0.1,0.09,0.08,0.12,0.15,0.08,0.09,0.1,0.1,0.13,0.07,0.09,0.15,0.07,0.1,0.08,0.1,0,0.08,0.11,0.08,0.14,0.06,0.1,0.15,0.12,0.09,0.1,0,8.22,-1.46,1350,326.67,1887.5,6.69,8.46,5.37,7.79,10.03,7.79,15.64},0},
{{0.1,0.09,0.09,0.13,0.09,0.12,0.15,0.08,0.11,0.07,0.1,0.1,0.11,0.09,0.09,0.11,0.1,0.11,0.07,0,0.08,0.06,0.16,0.12,0.08,0.13,0.09,0.09,0.12,0.09,0,8.61,-1.66,1710,314.52,1562.5,6.37,8.34,5.29,7.4,9.79,7.4,15.51},0},
{{0.11,0.1,0.09,0.1,0.12,0.11,0.12,0.11,0.07,0.1,0.11,0.1,0.09,0.11,0.09,0.11,0.09,0.12,0.03,0,0.08,0.1,0.09,0.1,0.09,0.11,0.14,0.09,0.13,0.09,0,8.47,-1.42,1233.33,390,1475,6.72,8.53,5.45,7.94,10.04,7.94,15.9},0},
{{0.12,0.09,0.11,0.1,0.11,0.1,0.1,0.13,0.08,0.09,0.09,0.14,0.08,0.12,0.12,0.1,0.07,0.1,0.09,0,0.07,0.09,0.1,0.11,0.11,0.12,0.11,0.12,0.11,0.09,0,8.03,-1.36,3850,301.56,2050,6.71,8.39,5.26,7.77,9.91,7.77,15.48},0},
{{0.11,0.09,0.14,0.09,0.08,0.07,0.1,0.12,0.09,0.12,0.12,0.09,0.1,0.13,0.08,0.13,0.05,0.1,0.07,0,0.13,0.07,0.08,0.07,0.13,0.08,0.17,0.06,0.11,0.12,0,8.07,-1.59,1000,348.21,1500,7.44,8.61,5.29,8.5,10.2,8.5,16.03},0},
{{0.13,0.1,0.11,0.07,0.09,0.08,0.1,0.1,0.1,0.13,0.13,0.08,0.11,0.12,0.07,0.11,0.1,0.09,0.05,0,0.09,0.09,0.08,0.13,0.09,0.08,0.11,0.11,0.14,0.1,0,8.1,-1.16,3375,346.43,1190,7.62,8.64,5.56,8.75,10.12,8.75,16.11},0},
{{0.08,0.09,0.14,0.09,0.11,0.09,0.15,0.09,0.08,0.1,0.08,0.11,0.11,0.1,0.13,0.06,0.1,0.11,0.09,0,0.1,0.09,0.1,0.09,0.08,0.14,0.14,0.08,0.09,0.11,0,8.67,-1.79,1383.33,317.74,2016.67,6.71,8.5,5.14,7.78,9.99,7.78,15.88},0},
{{0.07,0.13,0.08,0.12,0.13,0.11,0.09,0.12,0.08,0.1,0.11,0.07,0.11,0.12,0.09,0.09,0.15,0.1,0.06,0,0.14,0.12,0.09,0.09,0.09,0.12,0.07,0.09,0.09,0.13,0,8.36,-2.01,3775,313.33,1525,6.4,8.49,5.83,7.45,10.04,7.45,15.89},0},
{{0.08,0.12,0.11,0.14,0.09,0.09,0.1,0.11,0.09,0.1,0.1,0.1,0.13,0.11,0.1,0.06,0.13,0.11,0.08,0,0.11,0.12,0.08,0.13,0.11,0.12,0.09,0.06,0.1,0.11,0,8.3,-1.98,3025,298.48,1500,7.02,8.61,5.48,8.11,10.11,8.11,16.02},0},
{{0.1,0.11,0.12,0.07,0.07,0.11,0.14,0.1,0.09,0.12,0.1,0.08,0.13,0.08,0.11,0.08,0.12,0.12,0.03,0,0.11,0.1,0.1,0.11,0.1,0.09,0.09,0.09,0.1,0.13,0,8.73,-1.77,1025,323.33,2483.33,7.02,8.44,5.7,8.15,9.95,8.15,16.16},0},
{{0.11,0.12,0.07,0.11,0.13,0.1,0.11,0.1,0.05,0.12,0.1,0.08,0.1,0.11,0.12,0.1,0.08,0.09,0.07,0,0.1,0.12,0.09,0.12,0.11,0.1,0.08,0.1,0.08,0.13,0,8.49,-1.89,3000,393.48,2233.33,6.79,8.5,5.35,8,10.17,8,15.99},0},
{{0.11,0.14,0.1,0.07,0.08,0.08,0.11,0.13,0.1,0.11,0.1,0.09,0.11,0.11,0.08,0.12,0.1,0.1,0.05,0,0.14,0.08,0.13,0.11,0.1,0.08,0.08,0.1,0.1,0.11,0,8.4,-2.18,2750,336.21,2250,7.34,8.55,5.81,8.35,10.11,8.35,16.34},0},
{{0.1,0.09,0.14,0.08,0.07,0.08,0.12,0.13,0.09,0.11,0.12,0.1,0.09,0.11,0.08,0.11,0.12,0.1,0.04,0,0.1,0.13,0.09,0.07,0.11,0.12,0.1,0.08,0.1,0.13,0,8.35,-1.64,1292.86,323.21,2516.67,7.27,8.51,5.54,8.37,9.91,8.37,16.04},0},
{{0.1,0.11,0.09,0.09,0.08,0.14,0.14,0.1,0.07,0.09,0.11,0.09,0.07,0.12,0.1,0.12,0.08,0.1,0.05,0,0.17,0.08,0.07,0.07,0.12,0.09,0.12,0.08,0.09,0.14,0,8.65,-1.78,2250,359.62,2575,6.72,8.51,5.85,7.93,10.13,7.93,16.28},0},
{{0.06,0.12,0.09,0.1,0.17,0.14,0.07,0.11,0.07,0.09,0.1,0.05,0.08,0.17,0.12,0.06,0.11,0.15,0.04,0,0.16,0.08,0.11,0.14,0.05,0.09,0.06,0.09,0.07,0.17,0,8.72,-1.91,1850,292.42,1850,5.98,8.37,6.32,7.11,9.98,7.11,16.01},0},
{{0.04,0.13,0.09,0.17,0.13,0.16,0.06,0.05,0.07,0.12,0.1,0.11,0.09,0.17,0.05,0.08,0.12,0.14,0.03,0,0.13,0.09,0.07,0.09,0.11,0.08,0.12,0.09,0.14,0.12,0,7.89,-1.32,1687.5,287.88,1525,6.25,8.75,5.96,7.34,10.16,7.34,15.6},0},
{{0.1,0.08,0.09,0.12,0.15,0.13,0.07,0.13,0.08,0.09,0.11,0.08,0.09,0.08,0.11,0.11,0.12,0.09,0.09,0,0.1,0.1,0.09,0.1,0.13,0.1,0.14,0.06,0.09,0.1,0,8.82,-2.04,1850,331.03,2350,6.34,8.41,5.14,7.52,10.03,7.52,15.82},0},
{{0,0.01,0.01,0.01,0.02,0.01,0.01,0.01,0.01,0,0,0,0.01,0,0.01,0.03,0.02,0.01,0,0,0,0.01,0.01,0.01,0.01,0.02,0,0.01,0.02,0.01,0,0.88,0.04,1850,100,2350,0.31,0.81,0.38,5.04,12.35,5.04,1.05},0},
{{0.04,0.09,0.11,0.06,0.08,0.16,0.1,0.16,0.12,0.1,0.1,0.11,0.08,0.12,0.08,0.12,0.12,0.09,0.11,0.09,0.05,0.12,0.12,0.08,0.14,0.1,0.14,0.12,0.07,0.08,0,9.81,0.25,2037.5,1011.11,1600,2.64,3.44,2.11,3.33,4.25,3.33,10.68},5},
{{0.07,0.11,0.09,0.11,0.09,0.09,0.09,0.15,0.07,0.15,0.07,0.1,0.09,0.11,0.11,0.09,0.12,0.11,0.09,0.13,0.11,0.09,0.13,0.08,0.11,0.07,0.11,0.1,0.11,0.1,0,10.08,0.33,3575,937.5,3800,2.99,3.57,2.65,3.73,4.41,3.73,11.35},5},
{{0.09,0.09,0.15,0.13,0.1,0.08,0.13,0.07,0.1,0.08,0.11,0.09,0.11,0.1,0.12,0.08,0.05,0.11,0.12,0.14,0.08,0.11,0.08,0.1,0.13,0.09,0.1,0.1,0.12,0.11,0,9.99,0.49,1325,975,1950,3.3,3.89,2.56,4.01,4.66,4.01,11.24},5},
{{0.13,0.14,0.07,0.12,0.12,0.11,0.09,0.06,0.09,0.08,0.13,0.11,0.1,0.09,0.11,0.06,0.12,0.1,0.1,0.09,0.13,0.06,0.1,0.09,0.09,0.12,0.08,0.09,0.12,0.12,0,9.45,0.51,775,1012.5,1700,3.68,3.79,2.72,4.53,4.63,4.53,11.03},5},
{{0.17,0.1,0.09,0.1,0.11,0.09,0.08,0.07,0.12,0.09,0.11,0.11,0.12,0.08,0.1,0.13,0.1,0.09,0.08,0.1,0.11,0.09,0.09,0.15,0.07,0.13,0.08,0.08,0.11,0.09,0,9.55,0.39,3500,587.5,3375,3.61,3.55,2.67,4.48,4.38,4.48,11.09},5},
{{0.02,0.01,0.02,0.01,0.02,0.03,0.02,0.03,0.02,0.03,0.01,0.01,0.02,0.03,0.03,0.05,0.02,0.01,0.03,0,0.03,0.04,0.02,0.02,0,0.02,0.01,0.03,0.01,0.02,0,1.79,-0.12,300,350,350,0.51,1.46,0.6,3.78,8.34,3.78,2.07},5},
{{0.1,0.11,0.13,0.12,0.08,0.1,0.07,0.09,0.11,0.1,0.09,0.12,0.09,0.11,0.1,0.1,0.11,0.11,0.08,0.1,0.06,0.11,0.05,0.11,0.11,0.13,0.13,0.1,0.11,0.11,0,9.95,1.34,1666.67,754.55,2200,2.98,3.41,3.04,3.6,4.22,3.6,11.31},1},
{{0.11,0.1,0.06,0.11,0.09,0.07,0.16,0.13,0.13,0.05,0.07,0.1,0.1,0.11,0.12,0.09,0.11,0.08,0.13,0.1,0.11,0.08,0.13,0.07,0.09,0.12,0.09,0.1,0.14,0.08,0,10.12,1,2150,4175,2816.67,2.58,3.39,3.37,3.32,4.14,3.32,11.46},1},
{{0.07,0.1,0.12,0.08,0.11,0.15,0.08,0.12,0.08,0.09,0.13,0.08,0.09,0.09,0.09,0.09,0.12,0.13,0.09,0.1,0.1,0.13,0.11,0.1,0.08,0.07,0.11,0.12,0.06,0.13,0,9.94,1.01,3750,836.36,2200,2.75,3.65,3.55,3.47,4.46,3.47,11.4},1},
{{0.12,0.11,0.08,0.08,0.12,0.09,0.1,0.09,0.08,0.14,0.11,0.13,0.11,0.08,0.09,0.09,0.1,0.1,0.1,0.1,0.11,0.09,0.11,0.12,0.1,0.1,0.06,0.1,0.12,0.1,0,9.85,0.93,1050,576.67,875,3.24,3.77,3.54,4.15,4.6,4.15,11.56},1},
{{0.04,0.04,0.06,0.05,0.06,0.05,0.06,0.02,0.05,0.08,0.05,0.04,0.06,0.06,0.06,0.07,0.05,0.04,0.05,0.05,0.07,0.05,0.04,0.06,0.07,0.05,0.06,0.03,0.04,0.05,0,4.95,0.14,1216.67,430,1325,1.54,2.6,1.6,3.97,6.43,3.97,5.71},1},
{{0.12,0.1,0.09,0.08,0.12,0.12,0.09,0.13,0.09,0.07,0.1,0.11,0.13,0.09,0.08,0.06,0.11,0.14,0.1,0.09,0.1,0.08,0.08,0.1,0.13,0.13,0.11,0.09,0.12,0.09,0,9.86,0.58,2375,1093.75,3850,2.68,3.82,2.52,3.48,4.59,3.48,10.98},5},
{{0.1,0.08,0.15,0.14,0.07,0.09,0.1,0.12,0.08,0.09,0.11,0.1,0.1,0.1,0.08,0.13,0.11,0.09,0.09,0.11,0.1,0.08,0.1,0.08,0.11,0.1,0.12,0.1,0.1,0.12,0,9.96,0.9,3700,713.64,2616.67,2.82,3.76,2.97,3.57,4.72,3.57,11.27},5},
{{0.11,0.09,0.1,0.09,0.12,0.11,0.1,0.07,0.09,0.13,0.09,0.12,0.09,0.13,0.08,0.11,0.11,0.06,0.11,0.12,0.13,0.08,0.11,0.1,0.09,0.11,0.09,0.1,0.1,0.11,0,9.99,0.58,500,894.44,1275,2.82,3.72,2.77,3.68,4.67,3.68,11.25},5},
{{0.09,0.09,0.09,0.11,0.11,0.08,0.12,0.08,0.15,0.1,0.11,0.1,0.1,0.06,0.12,0.1,0.1,0.1,0.13,0.1,0.06,0.15,0.11,0.1,0.09,0.09,0.07,0.13,0.11,0.11,0,10.02,0.85,3125,1235.71,1900,2.54,3.84,2.79,3.3,4.76,3.3,11.21},5},
{{0.09,0.12,0.06,0.08,0.07,0.13,0.12,0.1,0.1,0.13,0.11,0.09,0.1,0.09,0.13,0.1,0.08,0.11,0.1,0.1,0.13,0.11,0.12,0.1,0.1,0.1,0.09,0.1,0.08,0.09,0,9.88,0.31,2416.67,891.67,2975,2.62,3.62,2.77,3.46,4.56,3.46,11.12},5},
{{0.01,0.04,0.02,0.03,0,0.02,0.01,0.02,0.01,0,0,0,0.02,0.04,0.05,0.03,0.01,0.01,0.01,0,0.01,0.01,0.01,0.02,0.01,0.02,0.03,0.02,0.02,0.01,0,1.39,0.1,450,275,300,0.48,1.19,0.32,3.87,8.38,3.87,1.55},5},
{{0.05,0.09,0.09,0.09,0.12,0.11,0.1,0.16,0.13,0,0.05,0.14,0.13,0.12,0.11,0.12,0.07,0.09,0.09,0,0.08,0.05,0.1,0.07,0.1,0.15,0.17,0.14,0.1,0,0,9.93,1.44,1937.5,1183.33,1625,2.53,2.9,2.58,3.18,3.54,3.18,11.04},1},
{{0.09,0.11,0.1,0.13,0.12,0.13,0.11,0.05,0.09,0,0.13,0.09,0.09,0.09,0.11,0.07,0.1,0.11,0.13,0,0.1,0.13,0.11,0.11,0.13,0.1,0.06,0.07,0.1,0,0,10.22,1.21,1591.67,720.83,3450,2.73,3.42,3.36,3.54,4.14,3.54,11.64},1},
{{0.09,0.12,0.1,0.11,0.09,0.09,0.09,0.12,0.09,0,0.14,0.08,0.08,0.07,0.1,0.11,0.14,0.09,0.1,0,0.11,0.1,0.1,0.11,0.11,0.09,0.09,0.12,0.07,0,0,10.22,1.19,1450,938.89,1450,2.94,3.23,3.38,3.69,3.97,3.69,11.69},1},
{{0.13,0.09,0.1,0.1,0.08,0.09,0.12,0.08,0.11,0,0.07,0.11,0.1,0.13,0.07,0.11,0.11,0.13,0.1,0,0.12,0.13,0.12,0.1,0.1,0.09,0.09,0.08,0.11,0,0,10.24,0.82,3250,915,2250,3.14,3.05,3.2,3.97,3.79,3.97,11.76},1},
{{0.09,0.06,0.06,0.06,0.06,0.05,0.03,0.06,0.05,0,0.08,0.04,0.08,0.04,0.07,0.05,0.06,0.04,0.06,0,0.06,0.04,0.06,0.05,0.03,0.06,0.05,0.07,0.08,0,0,5.44,0.85,725,525,650,1.83,2.68,1.84,4.21,6.1,4.21,6.47},1},
{{0.09,0.09,0.1,0.11,0.07,0.14,0.13,0.08,0.11,0.09,0.07,0.12,0.1,0.1,0.11,0.08,0.15,0.11,0.09,0.09,0.08,0.06,0.14,0.12,0.14,0.15,0.1,0.07,0.09,0.08,0,9.9,0.63,375,1000,4000,2.58,3.5,2.21,3.33,4.32,3.33,10.89},5},
{{0.08,0.09,0.1,0.09,0.12,0.13,0.11,0.12,0.1,0.09,0.09,0.12,0.13,0.11,0.09,0.1,0.09,0.1,0.07,0.11,0.08,0.05,0.11,0.13,0.1,0.09,0.14,0.1,0.11,0.11,0,9.79,1.02,3000,818.18,1233.33,2.54,3.69,2.53,3.28,4.57,3.28,10.81},5},
{{0.12,0.11,0.13,0.1,0.09,0.1,0.08,0.12,0.09,0.08,0.11,0.09,0.08,0.09,0.13,0.11,0.09,0.09,0.11,0.12,0.13,0.14,0.08,0.08,0.07,0.09,0.1,0.14,0.1,0.09,0,9.97,0.72,4025,738.46,3925,2.93,3.77,2.89,3.71,4.77,3.71,11.31},5},
{{0.12,0.11,0.1,0.09,0.09,0.09,0.11,0.1,0.11,0.09,0.14,0.08,0.09,0.1,0.1,0.09,0.06,0.16,0.12,0.08,0.11,0.09,0.11,0.1,0.09,0.07,0.1,0.1,0.14,0.1,0,9.75,0.93,1000,1038.89,2825,2.71,3.93,2.79,3.41,4.87,3.41,11},5},
{{0.1,0.08,0.12,0.09,0.11,0.06,0.1,0.1,0.11,0.16,0.11,0.1,0.12,0.09,0.09,0.1,0.09,0.06,0.13,0.12,0.08,0.17,0.08,0.08,0.09,0.11,0.08,0.11,0.1,0.12,0,9.82,1.07,1275,689.29,1600,2.76,4.09,2.92,3.45,5.15,3.45,11.2},5},
{{0.03,0.03,0.04,0.03,0.05,0.03,0.03,0.03,0.03,0.03,0.02,0.03,0.02,0.04,0.04,0.07,0.07,0.02,0.02,0.01,0.06,0.04,0.03,0.04,0.04,0.03,0.03,0.02,0.02,0.04,0,3.09,0.11,550,250,1125,1.01,2.18,0.9,4.17,7.32,4.17,3.58},5},
{{0.05,0.08,0.11,0.08,0.1,0.09,0.1,0.11,0.12,0,0.08,0.11,0.11,0.13,0.13,0.09,0.12,0.07,0.1,0,0.08,0.09,0.07,0.11,0.09,0.14,0.13,0.09,0.11,0,0,9.92,1.63,3133.33,1006.25,1775,2.77,3.21,3.28,3.44,4.03,3.44,11.31},1},
{{0.1,0.09,0.11,0.13,0.08,0.09,0.11,0.1,0.1,0,0.11,0.1,0.1,0.07,0.12,0.12,0.09,0.12,0.11,0,0.12,0.11,0.12,0.1,0.11,0.06,0.09,0.09,0.12,0,0,10.12,1.26,2475,682.14,2150,2.9,3.51,3.7,3.7,4.3,3.7,11.69},1},
{{0.12,0.12,0.11,0.1,0.1,0.1,0.11,0.1,0.1,0,0.12,0.1,0.09,0.1,0.12,0.11,0.1,0.08,0.11,0,0.1,0.09,0.1,0.11,0.11,0.11,0.09,0.11,0.11,0,0,9.89,1.41,1662.5,779.17,2516.67,2.85,3.51,3.42,3.71,4.38,3.71,11.4},1},
{{0.14,0.1,0.08,0.1,0.11,0.12,0.11,0.09,0.12,0,0.09,0.11,0.11,0.12,0.08,0.07,0.09,0.15,0.08,0,0.1,0.13,0.12,0.1,0.09,0.08,0.09,0.13,0.07,0,0,10.13,1.18,725,692.31,1760,2.81,3.65,3.56,3.77,4.42,3.77,11.62},1},
{{0.07,0.09,0.07,0.06,0.07,0.08,0.08,0.09,0.05,0,0.09,0.06,0.07,0.06,0.04,0.09,0.07,0.09,0.09,0,0.08,0.05,0.08,0.06,0.08,0.08,0.1,0.06,0.06,0,0,7.03,0.76,1150,650,2600,1.86,3.08,2.19,3.45,5.43,3.45,8},1},
{{0.06,0.12,0.13,0.1,0.12,0.12,0.13,0.09,0.1,0.05,0.09,0.12,0.1,0.09,0.13,0.09,0.1,0.14,0.09,0.07,0.1,0.08,0.09,0.14,0.11,0.12,0.08,0.1,0.12,0.07,0,9.86,0.88,725,1006.25,1437.5,1.84,3.39,2.6,2.42,4.2,2.42,10.73},5},
{{0.11,0.09,0.08,0.1,0.12,0.12,0.08,0.15,0.08,0.09,0.09,0.11,0.09,0.09,0.11,0.11,0.11,0.1,0.11,0.09,0.1,0.07,0.06,0.11,0.1,0.1,0.16,0.11,0.12,0.1,0,10.1,1.27,466.67,840.91,2183.33,2.08,3.57,2.72,2.74,4.47,2.74,11.06},5},
{{0.12,0.11,0.07,0.1,0.11,0.11,0.1,0.07,0.12,0.11,0.11,0.1,0.12,0.12,0.07,0.07,0.1,0.12,0.1,0.1,0.11,0.1,0.13,0.08,0.09,0.1,0.1,0.08,0.12,0.11,0,9.92,1.06,1883.33,870,4400,2.38,3.9,3.01,3.21,4.8,3.21,11.09},5},
{{0.09,0.1,0.09,0.11,0.11,0.1,0.11,0.11,0.11,0.1,0.1,0.12,0.09,0.09,0.11,0.09,0.12,0.08,0.1,0.12,0.09,0.12,0.09,0.12,0.09,0.11,0.1,0.11,0.07,0.11,0,9.95,1.04,2700,589.29,3325,2.2,3.9,3.01,2.99,4.97,2.99,11.2},5},
{{0.12,0.1,0.15,0.06,0.07,0.08,0.07,0.13,0.1,0.14,0.11,0.08,0.13,0.09,0.08,0.12,0.08,0.09,0.13,0.12,0.13,0.12,0.13,0.08,0.11,0.07,0.07,0.1,0.09,0.12,0,9.98,0.96,860,854.55,3900,2.61,4.01,3.27,3.32,5.06,3.32,11.43},5},
{{0.06,0.03,0.05,0.08,0.03,0.04,0.04,0.04,0.05,0.07,0.06,0.03,0.04,0.05,0.06,0.08,0.04,0.05,0.04,0.04,0.04,0.05,0.07,0.05,0.04,0.03,0.08,0.05,0.05,0.04,0,4.48,0.49,783.33,325,1200,1.2,2.83,1.33,3.37,6.97,3.37,5.09},5},
{{0.05,0.07,0.09,0.1,0.12,0.12,0.08,0.13,0.13,0.12,0.11,0.08,0.1,0.11,0.12,0.13,0.11,0.08,0.09,0.08,0.06,0.11,0.08,0.15,0.11,0.13,0.06,0.12,0.12,0.08,0,9.85,1.13,2775,885,3100,2.59,3.09,2.62,3.21,3.95,3.21,10.92},1},
{{0.1,0.09,0.13,0.08,0.09,0.1,0.1,0.1,0.12,0.11,0.11,0.12,0.09,0.11,0.11,0.05,0.09,0.09,0.13,0.12,0.11,0.1,0.09,0.11,0.1,0.09,0.12,0.09,0.1,0.11,0,10.17,1.05,4475,730.77,3375,2.84,3.73,2.92,3.62,4.49,3.62,11.45},1},
{{0.09,0.12,0.08,0.11,0.1,0.11,0.12,0.1,0.11,0.08,0.11,0.09,0.1,0.1,0.08,0.12,0.12,0.12,0.09,0.09,0.12,0.08,0.12,0.08,0.11,0.15,0.08,0.09,0.08,0.09,0,9.99,0.98,1333.33,768.18,2850,2.69,3.32,2.88,3.45,4.15,3.45,11.25},1},
{{0.12,0.09,0.12,0.12,0.1,0.08,0.1,0.1,0.08,0.11,0.11,0.12,0.11,0.08,0.07,0.13,0.09,0.1,0.1,0.11,0.12,0.09,0.08,0.11,0.1,0.08,0.13,0.11,0.09,0.12,0,9.96,0.98,2550,643.33,933.33,2.97,3.47,2.95,3.68,4.32,3.68,11.28},1},
{{0.13,0.1,0.07,0.09,0.07,0.1,0.09,0.07,0.06,0.07,0.06,0.09,0.08,0.1,0.12,0.06,0.08,0.09,0.09,0.08,0.08,0.12,0.07,0.08,0.07,0.05,0.11,0.09,0.09,0.09,0,8.47,1.01,966.67,583.33,2550,2.56,2.84,2.67,3.85,4.39,3.85,9.73},1},
{{0.12,0.08,0.08,0.12,0.16,0.08,0.08,0.07,0.16,0.08,0.01,0,0.01,0.03,0,0.05,0.06,0.29,0.27,0.3,0.13,0.07,0.36,0.43,0.01,0.01,0,0,0,0.01,0,9.95,-0.59,966.67,160.83,2616.67,0.97,0.08,0.25,1.01,0.18,1.01,10.03},4},
{{0.07,0.01,0.02,0.04,0.01,0.03,0.03,0.03,0.22,0.55,0.08,0,0.02,0.05,0,0.19,0.14,0.16,0.12,0.25,0.15,0.09,0.14,0.12,0.37,0.11,0.02,0.01,0.01,0.01,0,9.91,0.18,4350,863.64,2900,0.7,0.19,0.91,0.81,0.4,0.81,9.99},4},
{{0.11,0.26,0.41,0.16,0.06,0,0,0,0.01,0.01,0,0,0,0,0,0.04,0.09,0.53,0.29,0.06,0.14,0.57,0.29,0.01,0,0,0,0,0,0,0,9.92,-0.87,4350,194.9,2900,1.15,0.04,0.08,1.16,0.07,1.16,10.03},4},
{{0.23,0.08,0.14,0.12,0.15,0.08,0.04,0.05,0.07,0.06,0.16,0,0.19,0.26,0,0.26,0.05,0.04,0,0.05,0.01,0.01,0.01,0.07,0.12,0.19,0.29,0.11,0.07,0.13,0,9.75,1.19,4350,416.67,933.33,1.12,0.1,0.37,1.2,0.21,1.2,9.9},4},
{{0,0,0,0.01,0.22,0.23,0.21,0.18,0.17,0.01,0.03,0,0.29,0.51,0,0.18,0,0,0,0,0,0,0,0,0,0.01,0.17,0.25,0.33,0.26,0,9.72,1.49,4350,308.06,217.05,0.88,0.02,0.04,0.89,0.04,0.89,9.87},4},
{{0,0.01,0.03,0.08,0.13,0.11,0.14,0.16,0.31,0.05,0.1,0,0.32,0.35,0,0.22,0.01,0.01,0,0,0,0,0,0,0,0.03,0.23,0.26,0.26,0.24,0,9.72,1.48,4350,251.32,203.13,0.86,0.03,0.05,0.87,0.04,0.87,9.87},4},
{{0.11,0.03,0.06,0.15,0.1,0.11,0.11,0.11,0.13,0.1,0.07,0,0.18,0.21,0,0.14,0.06,0.18,0.08,0.09,0.26,0.03,0.06,0.13,0.03,0.03,0.08,0.12,0.14,0.14,0,9.82,0.37,4350,1900,2525,0.96,0.13,1.16,1,0.2,1,9.95},4},
{{0.11,0.04,0.06,0.09,0.13,0.05,0.03,0.05,0.03,0.05,0.09,0,0.06,0.06,0,0.27,0.06,0.03,0.01,0.07,0,0,0,0.01,0.2,0.33,0.03,0,0.01,0.04,0,5.96,0.72,4350,193.33,2925,0.66,2.32,0.3,1.15,3.82,1.15,6.05},4},
{{0.14,0.15,0.1,0.11,0.16,0.1,0.08,0.09,0.07,0.03,0.1,0.11,0.16,0.09,0.13,0.13,0.07,0.05,0.06,0.11,0.08,0.06,0.04,0.06,0.1,0.14,0.1,0.06,0.33,0.05,0,9.5,2.67,1216.67,988.89,1575,1.85,2.98,1.86,2.31,3.95,2.31,10.49},2},
{{0.11,0.08,0.08,0.13,0.12,0.07,0.18,0.09,0.12,0.05,0.09,0.1,0.09,0.05,0.14,0.12,0.11,0.13,0.09,0.1,0.09,0.12,0.1,0.09,0.15,0.15,0.1,0.05,0.07,0.11,0,9.87,2.18,2400,1162.5,2566.67,2.08,2.78,1.92,2.57,3.52,2.57,10.7},2},
{{0.08,0.1,0.12,0.07,0.13,0.12,0.14,0.07,0.1,0.09,0.07,0.13,0.12,0.09,0.12,0.07,0.11,0.09,0.14,0.09,0.07,0.08,0.09,0.14,0.18,0.14,0.11,0.06,0.05,0.1,0,9.73,2.1,2816.67,1200,1470,2.1,2.9,1.72,2.55,3.51,2.55,10.53},2},
{{0.09,0.08,0.12,0.09,0.11,0.16,0.11,0.13,0.06,0.07,0.08,0.12,0.06,0.09,0.15,0.1,0.09,0.14,0.14,0.05,0.08,0.08,0.09,0.13,0.16,0.15,0.1,0.06,0.08,0.1,0,9.66,2.14,2200,1241.67,2100,1.96,2.63,1.85,2.36,3.22,2.36,10.5},2},
{{0.07,0.12,0.09,0.09,0.18,0.13,0.08,0.1,0.08,0.08,0.07,0.11,0.09,0.08,0.18,0.1,0.1,0.11,0.13,0.05,0.08,0.07,0.1,0.12,0.12,0.16,0.12,0.07,0.08,0.11,0,9.62,2.19,1258.33,2725,1816.67,1.91,2.49,1.92,2.33,3.1,2.33,10.52},2},
{{0.09,0.13,0.11,0.06,0.18,0.11,0.11,0.09,0.08,0.06,0.05,0.14,0.07,0.11,0.14,0.15,0.08,0.13,0.09,0.06,0.07,0.07,0.07,0.15,0.19,0.11,0.1,0.06,0.09,0.11,0,9.78,2.2,2225,500,1375,1.9,2.48,1.81,2.28,3.14,2.28,10.6},2},
{{0.11,0.12,0.14,0.07,0.1,0.09,0.15,0.1,0.09,0.06,0.02,0.11,0.11,0.09,0.16,0.18,0.08,0.14,0.1,0.04,0.05,0.07,0.06,0.09,0.13,0.17,0.16,0.1,0.11,0.09,0,9.8,2.49,1737.5,2850,2216.67,2.02,2.16,1.66,2.42,2.71,2.42,10.62},2},
{{0.07,0.07,0.14,0.11,0.08,0.12,0.11,0.14,0.09,0.09,0.06,0.13,0.07,0.1,0.18,0.11,0.13,0.08,0.09,0.08,0.09,0.06,0.07,0.1,0.19,0.15,0.11,0.1,0.05,0.11,0,9.72,2.15,3133.33,781.25,1066.67,2.08,2.5,1.7,2.55,3.17,2.55,10.54},2},
{{0.09,0.08,0.13,0.11,0.08,0.14,0.13,0.07,0.09,0.1,0.1,0.12,0.08,0.12,0.11,0.1,0.09,0.1,0.13,0.09,0.08,0.08,0.13,0.14,0.09,0.12,0.12,0.08,0.07,0.11,0,9.66,2.22,1525,1143.75,1287.5,2.11,2.94,2.04,2.63,3.66,2.63,10.58},2},
{{0.09,0.12,0.15,0.07,0.07,0.08,0.15,0.09,0.07,0.13,0.1,0.09,0.1,0.1,0.12,0.06,0.15,0.11,0.09,0.1,0.05,0.11,0.15,0.09,0.09,0.1,0.18,0.08,0.08,0.11,0,9.77,2.39,2000,855,1590,2.16,2.91,1.94,2.63,3.61,2.63,10.69},2},
{{0.08,0.11,0.1,0.11,0.09,0.1,0.1,0.1,0.11,0.11,0.1,0.1,0.12,0.07,0.14,0.1,0.09,0.1,0.12,0.09,0.06,0.13,0.12,0.11,0.07,0.14,0.11,0.1,0.07,0.11,0,9.79,2.29,2025,1187.5,1005.56,2.21,2.95,1.98,2.73,3.62,2.73,10.71},2},
{{0.09,0.1,0.13,0.09,0.08,0.08,0.09,0.12,0.13,0.1,0.11,0.1,0.09,0.11,0.11,0.12,0.06,0.12,0.12,0.1,0.06,0.12,0.14,0.11,0.08,0.06,0.13,0.13,0.09,0.11,0,9.7,2.35,1810,905,2262.5,2.27,2.98,1.99,2.78,3.68,2.78,10.67},2},
{{0.14,0.07,0.09,0.13,0.08,0.13,0.09,0.07,0.11,0.12,0.11,0.12,0.09,0.1,0.08,0.1,0.1,0.07,0.15,0.11,0.09,0.15,0.12,0.1,0.08,0.1,0.11,0.08,0.09,0.11,0,9.86,2.16,2666.67,822.73,2025,2.27,3.23,2.12,2.84,3.93,2.84,10.81},2},
{{0.11,0.1,0.09,0.13,0.09,0.09,0.07,0.09,0.14,0.1,0.11,0.12,0.08,0.08,0.08,0.14,0.1,0.11,0.07,0.14,0.13,0.12,0.12,0.1,0.07,0.1,0.08,0.14,0.05,0.12,0,9.82,2.12,2525,854.55,1341.67,2.25,3.2,2.14,2.79,4,2.79,10.77},2},
{{0.1,0.12,0.06,0.12,0.12,0.09,0.1,0.09,0.11,0.12,0.11,0.09,0.11,0.09,0.08,0.13,0.12,0.08,0.1,0.12,0.1,0.13,0.17,0.06,0.08,0.07,0.09,0.12,0.08,0.12,0,9.9,2.18,2950,683.33,1780,2.2,3.11,2.21,2.71,3.92,2.71,10.84},2},
{{0.13,0.11,0.08,0.08,0.06,0.08,0.16,0.13,0.1,0.1,0.13,0.08,0.11,0.07,0.1,0.11,0.09,0.11,0.09,0.14,0.11,0.15,0.09,0.11,0.09,0.05,0.11,0.12,0.08,0.11,0,9.85,2.27,1725,1106.25,1500,2.4,3.28,2.2,2.83,4.07,2.83,10.83},2},
{{0.12,0.09,0.12,0.12,0.08,0.08,0.1,0.1,0.1,0.12,0.1,0.08,0.1,0.12,0.08,0.09,0.12,0.08,0.13,0.12,0.1,0.16,0.13,0.07,0.09,0.04,0.1,0.15,0.07,0.1,0,9.97,2.2,2450,915,1633.33,2.32,3.14,2.21,2.88,3.9,2.88,10.92},2},
{{0.13,0.09,0.14,0.1,0.07,0.08,0.11,0.1,0.09,0.12,0.13,0.08,0.13,0.06,0.09,0.08,0.12,0.12,0.09,0.13,0.11,0.15,0.1,0.08,0.09,0.08,0.07,0.14,0.09,0.1,0,9.85,2.22,2012.5,783.33,2666.67,2.34,3.23,2.19,2.92,3.99,2.92,10.83},2},
{{0.1,0.11,0.09,0.13,0.12,0.06,0.12,0.1,0.13,0.09,0.1,0.09,0.11,0.12,0.08,0.08,0.14,0.07,0.1,0.13,0.1,0.1,0.15,0.1,0.07,0.04,0.14,0.14,0.05,0.12,0,9.84,2.23,4400,737.5,1712.5,2.16,3.07,2.12,2.65,3.83,2.65,10.76},2},
{{0.1,0.09,0.12,0.14,0.11,0.11,0.06,0.08,0.09,0.13,0.12,0.06,0.13,0.11,0.11,0.07,0.11,0.11,0.1,0.11,0.07,0.13,0.12,0.1,0.08,0.07,0.11,0.14,0.1,0.1,0,9.74,2.31,1666.67,526.92,1000,2.15,3.09,2.03,2.75,3.85,2.75,10.64},2},
{{0.11,0.1,0.15,0.05,0.1,0.09,0.13,0.09,0.13,0.08,0.11,0.11,0.08,0.1,0.07,0.12,0.08,0.14,0.13,0.08,0.08,0.12,0.08,0.1,0.12,0.09,0.13,0.12,0.06,0.12,0,9.73,2.36,1475,1137.5,1341.67,2.2,2.96,2.02,2.67,3.63,2.67,10.68},2},
{{0.11,0.1,0.14,0.09,0.11,0.1,0.08,0.06,0.11,0.13,0.11,0.09,0.1,0.08,0.12,0.13,0.09,0.08,0.1,0.12,0.11,0.18,0.1,0.09,0.06,0.06,0.08,0.15,0.09,0.11,0,9.78,2.17,1307.14,975,1820,2.27,3.02,2.23,2.84,3.84,2.84,10.72},2},
{{0.09,0.1,0.14,0.12,0.1,0.1,0.08,0.08,0.1,0.12,0.12,0.07,0.09,0.1,0.11,0.12,0.11,0.1,0.08,0.13,0.16,0.17,0.1,0.07,0.06,0.06,0.06,0.13,0.1,0.12,0,9.83,2.06,1525,1214.29,1516.67,2.17,3.1,2.33,2.75,3.97,2.75,10.77},2},
{{0.13,0.13,0.08,0.1,0.08,0.1,0.08,0.1,0.14,0.1,0.14,0.08,0.11,0.07,0.09,0.12,0.07,0.09,0.13,0.13,0.09,0.11,0.12,0.12,0.09,0.07,0.08,0.15,0.1,0.1,0,9.8,2.24,3525,1600,2683.33,2.27,3.29,2.06,2.75,4.04,2.75,10.72},2},
{{0.14,0.08,0.07,0.12,0.08,0.13,0.12,0.07,0.08,0.13,0.13,0.08,0.13,0.08,0.1,0.09,0.13,0.06,0.1,0.13,0.09,0.15,0.11,0.09,0.09,0.06,0.09,0.11,0.16,0.08,0,9.75,2.18,2666.67,678.57,1500,2.38,3.21,1.99,2.95,3.99,2.95,10.69},2},
{{0.14,0.09,0.11,0.11,0.07,0.07,0.12,0.11,0.09,0.12,0.16,0.09,0.09,0.07,0.07,0.08,0.12,0.1,0.1,0.14,0.12,0.12,0.14,0.1,0.09,0.05,0.06,0.12,0.1,0.12,0,9.73,2.24,1000,825,1950,2.3,3.52,2.24,2.86,4.28,2.86,10.73},2},
{{0.09,0.12,0.11,0.09,0.09,0.07,0.14,0.12,0.1,0.09,0.12,0.08,0.09,0.13,0.09,0.08,0.12,0.1,0.11,0.11,0.07,0.12,0.16,0.08,0.09,0.07,0.1,0.08,0.15,0.1,0,9.74,2.29,2266.67,700,1242.86,2.2,3.12,2.07,2.69,3.92,2.69,10.66},2},
{{0.12,0.04,0.15,0.11,0.1,0.11,0.08,0.11,0.11,0.09,0.13,0.08,0.13,0.1,0.08,0.07,0.11,0.1,0.1,0.13,0.08,0.08,0.15,0.15,0.07,0.08,0.08,0.13,0.07,0.13,0,9.85,2.31,2350,667.86,1285.71,2.14,3.3,2.07,2.66,4.05,2.66,10.76},2},
{{0.14,0.11,0.1,0.08,0.1,0.13,0.11,0.07,0.08,0.11,0.12,0.12,0.08,0.09,0.1,0.07,0.11,0.12,0.12,0.11,0.05,0.11,0.11,0.13,0.09,0.12,0.1,0.08,0.13,0.1,0,9.73,2.42,1475,707.14,1590,2.2,3.14,1.96,2.69,3.76,2.69,10.64},2},
{{0.08,0.14,0.13,0.13,0.06,0.07,0.13,0.1,0.1,0.09,0.1,0.11,0.11,0.08,0.1,0.09,0.1,0.12,0.11,0.1,0.06,0.06,0.16,0.13,0.1,0.11,0.1,0.12,0.08,0.1,0,9.74,2.34,1010,3050,1508.33,2.04,3.03,1.94,2.52,3.67,2.52,10.59},2},
{{0.08,0.12,0.12,0.1,0.1,0.12,0.09,0.12,0.09,0.1,0.1,0.11,0.09,0.09,0.12,0.09,0.1,0.11,0.13,0.08,0.07,0.15,0.1,0.1,0.09,0.11,0.1,0.13,0.07,0.1,0,9.75,2.23,3075,1460,1185.71,2.09,2.85,1.96,2.61,3.47,2.61,10.61},2},
{{0.1,0.09,0.09,0.14,0.14,0.09,0.1,0.13,0.07,0.09,0.06,0.11,0.1,0.11,0.14,0.12,0.1,0.11,0.1,0.08,0.03,0.09,0.09,0.13,0.14,0.1,0.17,0.08,0.09,0.09,0,9.79,2.43,675,925,1812.5,2.03,2.57,1.74,2.48,3.23,2.48,10.61},2},
{{0.08,0.13,0.09,0.12,0.07,0.13,0.15,0.13,0.06,0.07,0.06,0.15,0.08,0.12,0.08,0.12,0.13,0.09,0.08,0.11,0.09,0.07,0.07,0.15,0.13,0.13,0.09,0.1,0.08,0.11,0,9.76,2.24,3075,980,2350,1.98,2.75,1.91,2.38,3.39,2.38,10.57},2},
{{0.08,0.09,0.1,0.09,0.12,0.12,0.16,0.12,0.08,0.08,0.06,0.14,0.07,0.11,0.13,0.15,0.1,0.08,0.1,0.09,0.06,0.07,0.11,0.14,0.17,0.08,0.12,0.09,0.09,0.1,0,9.76,2.2,2200,1092.86,1087.5,2.08,2.56,1.75,2.47,3.19,2.47,10.55},2},
{{0.06,0.11,0.1,0.1,0.09,0.14,0.16,0.13,0.09,0.05,0.01,0.13,0.08,0.04,0.2,0.15,0.16,0.14,0.09,0.01,0.04,0.06,0.11,0.13,0.14,0.13,0.11,0.12,0.12,0.06,0,9.72,2.26,2683.33,2875,2325,1.92,1.98,1.66,2.26,2.47,2.26,10.48},2},
{{0.06,0.09,0.06,0.11,0.09,0.22,0.12,0.09,0.1,0.08,0.06,0.1,0.08,0.08,0.17,0.15,0.12,0.12,0.09,0.04,0.08,0.08,0.09,0.13,0.12,0.12,0.12,0.07,0.13,0.08,0,9.66,2.2,1483.33,537.5,1600,2.04,2.28,1.82,2.42,2.92,2.42,10.49},2},
{{0.08,0.09,0.08,0.13,0.14,0.07,0.11,0.14,0.1,0.08,0.06,0.14,0.08,0.15,0.09,0.09,0.13,0.11,0.1,0.07,0.09,0.08,0.08,0.11,0.13,0.16,0.11,0.06,0.12,0.09,0,9.68,2.14,1312.5,1750,1575,2.07,2.68,1.86,2.53,3.27,2.53,10.52},2},
{{0.1,0.1,0.08,0.11,0.1,0.13,0.09,0.11,0.1,0.1,0.04,0.16,0.08,0.12,0.13,0.09,0.1,0.13,0.11,0.07,0.08,0.06,0.07,0.11,0.13,0.16,0.08,0.14,0.11,0.09,0,9.7,2.3,2783.33,1550,1550,2.19,2.62,1.82,2.63,3.18,2.63,10.58},2},
{{0.09,0.07,0.12,0.08,0.1,0.18,0.11,0.1,0.08,0.1,0.04,0.14,0.1,0.15,0.13,0.11,0.09,0.08,0.12,0.07,0.08,0.06,0.09,0.13,0.1,0.17,0.1,0.12,0.07,0.1,0,9.67,2.18,1383.33,1700,1733.33,2.1,2.56,1.75,2.54,3.16,2.54,10.49},2},
{{0.07,0.09,0.08,0.11,0.15,0.11,0.11,0.07,0.15,0.08,0.08,0.12,0.1,0.1,0.13,0.08,0.09,0.11,0.16,0.06,0.1,0.07,0.04,0.13,0.14,0.14,0.12,0.09,0.09,0.1,0,9.76,2.16,3150,1500,1175,2.11,2.85,1.93,2.59,3.47,2.59,10.67},2},
{{0.08,0.1,0.06,0.11,0.15,0.09,0.1,0.1,0.11,0.12,0.05,0.15,0.07,0.12,0.12,0.15,0.09,0.1,0.1,0.08,0.13,0.06,0.07,0.07,0.14,0.11,0.13,0.11,0.11,0.09,0,9.64,2.06,2833.33,2012.5,1700,2.2,2.61,1.96,2.67,3.29,2.67,10.57},2},
{{0.09,0.06,0.1,0.14,0.1,0.07,0.08,0.12,0.15,0.11,0.08,0.14,0.1,0.1,0.09,0.1,0.13,0.06,0.13,0.1,0.13,0.08,0.07,0.09,0.1,0.13,0.1,0.1,0.12,0.11,0,9.75,2.13,1050,1050,2275,2.31,2.96,2.11,2.85,3.62,2.85,10.75},2},
{{0.13,0.13,0.06,0.07,0.12,0.09,0.09,0.1,0.11,0.11,0.07,0.16,0.07,0.1,0.12,0.07,0.12,0.11,0.08,0.12,0.11,0.1,0.06,0.15,0.07,0.1,0.12,0.06,0.17,0.07,0,9.72,2.11,1820,831.82,2525,2.35,2.98,1.97,2.83,3.61,2.83,10.66},2},
{{0.11,0.11,0.07,0.1,0.11,0.05,0.11,0.1,0.14,0.12,0.12,0.08,0.14,0.07,0.09,0.12,0.1,0.11,0.08,0.11,0.12,0.09,0.1,0.06,0.1,0.1,0.13,0.14,0.09,0.1,0,9.7,2.09,2012.5,1260,1000,2.43,3.15,2.01,2.92,3.93,2.92,10.7},2},
{{0.09,0.09,0.12,0.08,0.11,0.11,0.09,0.11,0.11,0.11,0.13,0.1,0.08,0.1,0.1,0.12,0.11,0.09,0.09,0.12,0.11,0.11,0.08,0.07,0.1,0.16,0.09,0.09,0.11,0.1,0,9.72,2.12,2033.33,855,1525,2.2,3.13,2.02,2.7,3.9,2.7,10.64},2},
{{0.09,0.07,0.11,0.1,0.1,0.11,0.1,0.09,0.14,0.11,0.13,0.1,0.1,0.11,0.09,0.09,0.13,0.09,0.07,0.12,0.16,0.08,0.05,0.12,0.07,0.13,0.08,0.11,0.12,0.11,0,9.63,2.04,3525,865,2716.67,2.36,3.16,2.18,2.93,3.98,2.93,10.64},2},
{{0.09,0.06,0.11,0.12,0.1,0.07,0.09,0.1,0.14,0.13,0.12,0.08,0.12,0.12,0.07,0.12,0.08,0.07,0.12,0.12,0.14,0.07,0.07,0.08,0.14,0.13,0.08,0.13,0.09,0.1,0,9.75,2.16,2025,1106.25,1840,2.33,3.07,2.08,2.86,3.75,2.86,10.72},2},
{{0.11,0.09,0.06,0.11,0.1,0.11,0.11,0.08,0.13,0.13,0.11,0.12,0.1,0.1,0.08,0.14,0.09,0.09,0.09,0.1,0.12,0.1,0.06,0.07,0.08,0.14,0.14,0.09,0.12,0.09,0,9.63,2.09,1307.14,704.17,3025,2.39,2.97,2.03,2.86,3.72,2.86,10.62},2},
{{0.09,0.14,0.07,0.13,0.09,0.09,0.11,0.09,0.1,0.12,0.11,0.09,0.13,0.14,0.08,0.07,0.11,0.11,0.08,0.11,0.11,0.13,0.05,0.09,0.1,0.12,0.11,0.1,0.1,0.11,0,9.72,2.09,2025,1610,1525,2.22,3.1,2.07,2.75,3.83,2.75,10.66},2},
{{0.1,0.07,0.07,0.14,0.13,0.1,0.08,0.11,0.11,0.13,0.12,0.09,0.08,0.14,0.08,0.14,0.07,0.09,0.09,0.12,0.16,0.11,0.08,0.05,0.1,0.11,0.11,0.12,0.09,0.11,0,9.71,2,1762.5,1150,1750,2.26,3.11,2.19,2.78,3.96,2.78,10.7},2},
{{0.08,0.08,0.09,0.1,0.12,0.12,0.09,0.1,0.12,0.11,0.13,0.1,0.1,0.12,0.09,0.07,0.08,0.15,0.06,0.13,0.14,0.1,0.07,0.09,0.12,0.11,0.08,0.12,0.08,0.11,0,9.69,2.05,2575,945,1350,2.22,3.19,2.2,2.7,3.89,2.7,10.66},2},
{{0.11,0.08,0.11,0.08,0.1,0.09,0.11,0.11,0.12,0.11,0.12,0.11,0.12,0.08,0.08,0.08,0.13,0.07,0.11,0.12,0.15,0.1,0.1,0.07,0.08,0.1,0.09,0.11,0.13,0.1,0,9.7,2.07,2633.33,711.54,2225,2.31,3.27,2.28,2.84,4.03,2.84,10.71},2},
{{0.11,0.08,0.13,0.06,0.09,0.08,0.12,0.13,0.1,0.13,0.11,0.1,0.09,0.11,0.1,0.07,0.11,0.11,0.1,0.13,0.18,0.07,0.09,0.06,0.11,0.08,0.09,0.12,0.11,0.11,0,9.75,2.08,1933.33,667.86,1316.67,2.35,3.2,2.2,2.86,3.91,2.86,10.73},2},
{{0.12,0.12,0.09,0.08,0.1,0.06,0.11,0.11,0.1,0.13,0.12,0.09,0.11,0.09,0.1,0.13,0.08,0.09,0.11,0.12,0.14,0.15,0.09,0.11,0.06,0.08,0.07,0.11,0.11,0.1,0,9.8,2.02,2475,943.75,2250,2.45,3.13,2.1,3.02,3.91,3.02,10.76},2},
{{0.11,0.11,0.11,0.07,0.07,0.1,0.11,0.09,0.12,0.13,0.13,0.07,0.15,0.11,0.08,0.06,0.09,0.1,0.1,0.14,0.13,0.19,0.1,0.06,0.06,0.07,0.1,0.11,0.11,0.11,0,9.75,2.04,1450,808.33,1283.33,2.42,3.38,2.2,2.97,4.15,2.97,10.71},2},
{{0.12,0.15,0.07,0.08,0.06,0.1,0.11,0.09,0.14,0.12,0.15,0.07,0.12,0.08,0.09,0.09,0.11,0.1,0.12,0.11,0.16,0.12,0.15,0.07,0.07,0.03,0.08,0.11,0.12,0.13,0,9.59,2.17,1475,830,3350,2.41,3.35,2.33,2.91,4.16,2.91,10.61},2},
{{0.13,0.09,0.13,0.1,0.07,0.05,0.12,0.09,0.1,0.14,0.14,0.05,0.12,0.09,0.1,0.07,0.1,0.14,0.07,0.14,0.14,0.15,0.13,0.08,0.06,0.07,0.06,0.11,0.11,0.12,0,9.91,2.1,1412.5,690.91,1720,2.48,3.33,2.24,3.07,4.21,3.07,10.92},2},
{{0.15,0.1,0.1,0.07,0.07,0.08,0.04,0.13,0.14,0.14,0.12,0.1,0.1,0.1,0.08,0.07,0.09,0.14,0.11,0.11,0.19,0.15,0.11,0.05,0.04,0.03,0.06,0.14,0.13,0.12,0,9.74,2.06,1750,822.73,1737.5,2.51,3.36,2.39,3.01,4.11,3.01,10.79},2},
{{0.12,0.11,0.1,0.1,0.1,0.06,0.08,0.09,0.13,0.13,0.16,0.08,0.1,0.09,0.08,0.12,0.05,0.11,0.1,0.14,0.13,0.13,0.13,0.09,0.07,0.06,0.09,0.1,0.1,0.12,0,9.58,2.14,2950,977.78,1325,2.33,3.6,2.18,2.88,4.46,2.88,10.57},2},
{{0.19,0.08,0.09,0.07,0.11,0.07,0.07,0.1,0.08,0.15,0.17,0.09,0.09,0.06,0.08,0.1,0.05,0.12,0.08,0.19,0.2,0.15,0.08,0.06,0.08,0.06,0.06,0.09,0.11,0.13,0,9.83,2.04,1000,780,2300,2.77,3.99,2.4,3.47,4.89,3.47,11.01},2},
{{0.1,0.09,0.12,0.09,0.12,0.07,0.12,0.07,0.1,0.13,0.16,0.04,0.15,0.08,0.07,0.07,0.08,0.11,0.13,0.12,0.14,0.16,0.1,0.09,0.08,0.06,0.07,0.11,0.09,0.12,0,9.87,2.11,1925,1271.43,1166.67,2.25,3.51,2.24,2.82,4.3,2.82,10.8},2},
{{0.11,0.09,0.12,0.12,0.08,0.08,0.1,0.08,0.1,0.14,0.14,0.08,0.09,0.11,0.08,0.09,0.09,0.12,0.1,0.13,0.08,0.12,0.11,0.14,0.08,0.09,0.1,0.1,0.1,0.11,0,9.73,2.26,1950,1166.67,1142.86,2.28,3.27,2,2.84,4.02,2.84,10.64},2},
{{0.12,0.07,0.14,0.1,0.07,0.12,0.1,0.06,0.12,0.12,0.13,0.05,0.12,0.14,0.06,0.09,0.1,0.11,0.1,0.11,0.09,0.12,0.13,0.1,0.11,0.07,0.12,0.07,0.11,0.1,0,9.74,2.25,1262.5,910,3050,2.2,3.12,2.09,2.71,3.9,2.71,10.65},2},
{{0.11,0.12,0.08,0.09,0.11,0.1,0.08,0.07,0.15,0.12,0.13,0.1,0.08,0.12,0.08,0.05,0.12,0.08,0.13,0.13,0.15,0.08,0.08,0.11,0.13,0.07,0.12,0.11,0.06,0.11,0,9.75,2.03,2275,669.23,3575,2.26,3.33,2.11,2.72,4.01,2.72,10.71},2},
{{0.1,0.1,0.08,0.12,0.12,0.09,0.07,0.17,0.08,0.09,0.12,0.07,0.11,0.11,0.08,0.08,0.13,0.12,0.09,0.12,0.13,0.06,0.06,0.13,0.08,0.13,0.12,0.09,0.12,0.1,0,9.84,2.21,1787.5,664.29,1800,2.16,3.07,2.13,2.66,3.79,2.66,10.79},2},
{{0.06,0.12,0.06,0.13,0.14,0.11,0.1,0.13,0.07,0.1,0.07,0.13,0.09,0.12,0.13,0.09,0.14,0.09,0.1,0.07,0.08,0.05,0.1,0.11,0.15,0.13,0.1,0.1,0.13,0.07,0,9.65,2.23,2000,1458.33,1775,2.01,2.67,1.79,2.44,3.28,2.44,10.45},2},
{{0.09,0.09,0.1,0.11,0.12,0.12,0.11,0.09,0.11,0.1,0.06,0.15,0.1,0.11,0.09,0.1,0.11,0.09,0.11,0.1,0.1,0.05,0.11,0.11,0.1,0.16,0.09,0.07,0.14,0.09,0,9.76,2.28,2075,1812.5,1562.5,2.14,2.84,1.91,2.62,3.45,2.62,10.64},2},
{{0.1,0.09,0.06,0.09,0.09,0.11,0.17,0.09,0.12,0.1,0.07,0.15,0.08,0.12,0.11,0.09,0.12,0.09,0.11,0.09,0.09,0.08,0.05,0.13,0.13,0.12,0.13,0.1,0.08,0.11,0,9.73,2.22,3650,1037.5,1037.5,2.34,2.88,1.88,2.78,3.55,2.78,10.65},2},
{{0.07,0.09,0.1,0.08,0.16,0.15,0.09,0.13,0.06,0.09,0.08,0.13,0.09,0.11,0.14,0.11,0.08,0.09,0.12,0.08,0.07,0.07,0.08,0.12,0.15,0.12,0.09,0.12,0.14,0.07,0,9.58,2.29,1887.5,905.56,3225,2.1,2.73,1.83,2.59,3.38,2.59,10.52},2},
{{0.04,0.1,0.09,0.14,0.11,0.13,0.1,0.04,0.04,0.02,0.02,0.07,0.15,0.06,0.14,0.18,0.05,0.06,0.05,0.02,0.01,0.03,0.08,0.09,0.12,0.07,0.08,0.11,0.17,0.05,0,7.39,2.38,3050,2325,2325,1.2,1.95,1.42,1.87,3.03,1.87,8.19},2},
{{0.09,0.1,0.11,0.09,0.13,0.07,0.14,0.07,0.13,0.09,0.1,0.11,0.13,0.09,0.11,0.09,0.07,0.12,0.1,0.1,0.02,0.08,0.1,0.16,0.1,0.12,0.1,0.12,0.1,0.11,0,9.03,3.57,3550,1150,4725,1.12,2.17,1.95,1.54,2.77,1.54,10.25},5},
{{0.11,0.09,0.1,0.12,0.1,0.09,0.12,0.1,0.11,0.07,0.11,0.12,0.1,0.1,0.07,0.1,0.05,0.13,0.09,0.15,0.08,0.1,0.07,0.07,0.17,0.09,0.13,0.12,0.1,0.09,0,9.25,3.34,750,1833.33,2516.67,1.08,2.38,1.82,1.45,2.95,1.45,10.32},5},
{{0.15,0.13,0.07,0.07,0.07,0.13,0.08,0.09,0.09,0.14,0.11,0.15,0.07,0.08,0.08,0.11,0.08,0.07,0.14,0.12,0.09,0.08,0.11,0.14,0.07,0.14,0.09,0.11,0.1,0.09,0,9.16,3.22,416.67,3350,1125,1.3,2.38,1.84,1.73,2.99,1.73,10.24},5},
{{0.06,0.11,0.18,0.08,0.07,0.14,0.08,0.12,0.11,0.08,0.05,0.05,0.05,0.1,0.21,0.15,0.18,0.15,0.05,0.02,0.29,0.13,0.06,0.05,0.05,0.08,0.09,0.06,0.1,0.11,0,9.18,2.79,150,1100,2666.67,1.01,1.24,2.17,1.34,1.81,1.34,10.13},5},
{{0.03,0.06,0.1,0.11,0.11,0.1,0.08,0.14,0.12,0.18,0.05,0.1,0.09,0.1,0.13,0.12,0.15,0.12,0.08,0.07,0.06,0.13,0.12,0.11,0.11,0.08,0.1,0.12,0.09,0.1,0,9.2,3.18,4700,1330,2633.33,0.94,1.64,1.84,1.2,2.18,1.2,10.16},5},
{{0.07,0.11,0.11,0.08,0.13,0.11,0.12,0.1,0.12,0.06,0.13,0.11,0.07,0.15,0.07,0.08,0.09,0.09,0.14,0.09,0.05,0.08,0.09,0.14,0.09,0.08,0.12,0.1,0.13,0.13,0,9,3.7,775,1278.57,3725,0.98,2.18,2.07,1.34,2.73,1.34,10.28},5},
{{0.13,0.08,0.09,0.1,0.11,0.09,0.08,0.11,0.1,0.13,0.12,0.13,0.13,0.11,0.08,0.06,0.06,0.06,0.11,0.15,0.11,0.1,0.1,0.1,0.07,0.15,0.07,0.11,0.12,0.1,0,9.19,3.32,2450,1100,1112.5,1.16,2.61,2.06,1.53,3.22,1.53,10.32},5},
{{0.15,0.14,0.08,0.09,0.12,0.1,0.09,0.08,0.08,0.09,0.15,0.05,0.15,0.12,0.08,0.09,0.07,0.07,0.13,0.12,0.08,0.09,0.09,0.09,0.12,0.12,0.15,0.09,0.08,0.11,0,9.12,3.29,1925,1816.67,2133.33,1.24,2.39,1.82,1.65,3.01,1.65,10.21},5},
{{0.01,0.01,0,0.01,0.01,0.03,0.03,0.03,0,0.02,0,0.01,0.01,0,0.01,0.02,0.07,0.01,0,0.01,0.01,0.05,0.03,0.01,0.01,0.01,0,0.01,0.01,0,0,1.27,0.24,200,150,150,0.1,1.11,0.22,1.26,8.7,1.26,1.32},5},
{{0.06,0.11,0.08,0.11,0.16,0.14,0.14,0.08,0.09,0.05,0.04,0.1,0.1,0.15,0.12,0.1,0.15,0.07,0.14,0.05,0.1,0.09,0.1,0.12,0.09,0.12,0.11,0.15,0.1,0.04,0,9.45,3.14,3675,3900,1783.33,1.26,2.07,1.45,1.59,2.6,1.59,10.22},1},
{{0.12,0.07,0.1,0.13,0.09,0.09,0.1,0.11,0.12,0.09,0.07,0.06,0.13,0.09,0.11,0.15,0.12,0.13,0.09,0.07,0.16,0.13,0.08,0.1,0.08,0.09,0.07,0.09,0.09,0.12,0,9.45,3.04,3675,972.22,1700,1.58,2.15,1.91,1.91,2.79,1.91,10.36},1},
{{0.07,0.13,0.13,0.09,0.07,0.08,0.12,0.11,0.11,0.13,0.1,0.08,0.08,0.11,0.12,0.11,0.12,0.11,0.1,0.1,0.12,0.1,0.13,0.1,0.1,0.08,0.1,0.09,0.11,0.1,0,9.45,3.18,883.33,3125,2616.67,1.64,2.52,1.8,1.97,3.26,1.97,10.37},1},
{{0.11,0.06,0.16,0.09,0.12,0.1,0.08,0.1,0.08,0.11,0.14,0.14,0.09,0.08,0.1,0.08,0.07,0.1,0.12,0.11,0.08,0.06,0.14,0.1,0.09,0.1,0.09,0.13,0.1,0.13,0,9.27,3.47,1725,2650,1200,1.57,3,1.68,1.99,3.74,1.99,10.27},1},
{{0.12,0.11,0.09,0.07,0.09,0.1,0.08,0.09,0.15,0.13,0.13,0.12,0.11,0.1,0.08,0.07,0.08,0.1,0.08,0.15,0.06,0.09,0.07,0.11,0.14,0.11,0.12,0.1,0.13,0.1,0,9.31,3.58,1133.33,1300,1880,1.79,3.12,1.55,2.13,3.85,2.13,10.37},1},
{{0.09,0.1,0.06,0.09,0.07,0.08,0.05,0.09,0.07,0.09,0.12,0.09,0.1,0.06,0.07,0.07,0.06,0.07,0.06,0.11,0.07,0.09,0.06,0.08,0.1,0.08,0.07,0.09,0.06,0.1,0,7.28,2.77,1716.67,1125,2075,1.39,2.61,1.49,2.18,4.29,2.18,8.14},1},
{{0.12,0.1,0.08,0.1,0.07,0.08,0.1,0.1,0.12,0.15,0.1,0.09,0.15,0.1,0.13,0.05,0.07,0.11,0.06,0.14,0.08,0.16,0.11,0.07,0.08,0.14,0.09,0.11,0.06,0.1,0,9.02,3.47,1775,2775,2162.5,1.92,3.01,2.01,2.35,3.74,2.35,10.46},5},
{{0.11,0.1,0.12,0.08,0.13,0.1,0.11,0.1,0.07,0.1,0.05,0.13,0.11,0.14,0.1,0.09,0.07,0.1,0.1,0.13,0.1,0.08,0.09,0.12,0.08,0.14,0.1,0.12,0.12,0.07,0,9.05,3.64,925,1178.57,4150,1.68,2.73,1.87,2.18,3.34,2.18,10.41},5},
{{0.07,0.1,0.1,0.08,0.16,0.13,0.1,0.07,0.12,0.09,0.08,0.11,0.09,0.09,0.1,0.09,0.1,0.13,0.12,0.1,0.11,0.12,0.1,0.11,0.11,0.09,0.12,0.09,0.09,0.09,0,9.16,3.37,850,2383.33,1566.67,1.5,2.72,1.77,1.93,3.37,1.93,10.33},5},
{{0.08,0.08,0.09,0.12,0.08,0.13,0.1,0.11,0.11,0.13,0.08,0.1,0.09,0.1,0.1,0.09,0.1,0.09,0.15,0.1,0.14,0.1,0.09,0.11,0.11,0.09,0.11,0.1,0.1,0.07,0,9.21,3.26,3825,3175,1083.33,1.65,2.73,1.82,2.06,3.34,2.06,10.4},5},
{{0.14,0.1,0.09,0.08,0.1,0.1,0.1,0.11,0.11,0.09,0.11,0.09,0.08,0.12,0.12,0.09,0.11,0.08,0.12,0.11,0.11,0.07,0.11,0.14,0.1,0.07,0.12,0.1,0.13,0.08,0,9.01,3.47,1733.33,993.75,1837.5,1.78,2.67,1.9,2.22,3.35,2.22,10.35},5},
{{0.08,0.13,0.12,0.13,0.09,0.09,0.08,0.1,0.1,0.07,0.18,0.08,0.08,0.07,0.07,0.16,0.18,0.1,0.05,0.04,0.07,0.07,0.1,0.09,0.11,0.08,0.08,0.1,0.1,0.22,0,7.46,4.48,125,1433.33,2716.67,1.66,3.35,2.49,2.07,4.33,2.07,10.18},5},
{{0.06,0.06,0.13,0.06,0.09,0.1,0.13,0.13,0.11,0.15,0.09,0.12,0.08,0.07,0.1,0.14,0.09,0.1,0.11,0.11,0.1,0.13,0.09,0.12,0.1,0.11,0.1,0.09,0.1,0.1,0,9.24,3.69,1925,1562.5,1550,1.93,3.09,1.65,2.41,3.86,2.41,10.42},1},
{{0.02,0.07,0.08,0.09,0.13,0.09,0.12,0.1,0.16,0.16,0.06,0.09,0.12,0.14,0.11,0.12,0.1,0.09,0.12,0.08,0.05,0.09,0.11,0.14,0.12,0.11,0.1,0.13,0.12,0.06,0,9.17,3.82,1025,931.25,2975,1.78,2.67,1.42,2.22,3.24,2.22,10.31},1},
{{0.02,0.1,0.08,0.1,0.1,0.09,0.09,0.1,0.19,0.15,0.04,0.1,0.09,0.15,0.14,0.14,0.11,0.12,0.1,0.05,0.1,0.07,0.11,0.09,0.09,0.16,0.16,0.09,0.1,0.06,0,9.13,3.63,2025,1358.33,1637.5,1.9,2.36,1.44,2.32,2.94,2.32,10.27},1},
{{0.03,0.08,0.11,0.1,0.11,0.08,0.08,0.11,0.12,0.19,0.12,0.13,0.08,0.1,0.1,0.09,0.08,0.07,0.09,0.16,0.1,0.13,0.08,0.11,0.11,0.09,0.14,0.08,0.09,0.11,0,9.28,3.72,2450,1241.67,1580,1.97,3.53,1.68,2.51,4.32,2.51,10.48},1},
{{0.11,0.1,0.09,0.11,0.09,0.13,0.08,0.12,0.1,0.1,0.11,0.14,0.13,0.07,0.09,0.1,0.08,0.09,0.08,0.11,0.11,0.11,0.08,0.11,0.1,0.09,0.09,0.12,0.07,0.14,0,8.83,3.83,2016.67,822.22,1487.5,1.88,3.3,1.82,2.4,4.14,2.4,10.19},1},
{{0.17,0.12,0.11,0.09,0.11,0.08,0.13,0.1,0.05,0.04,0.14,0.09,0.08,0.11,0.08,0.07,0.13,0.12,0.11,0.1,0.13,0.12,0.11,0.09,0.08,0.07,0.1,0.07,0.12,0.13,0,9.06,3.74,1850,1166.67,2125,1.91,3.24,2.07,2.52,4.01,2.52,10.46},1},
{{0.15,0.15,0.09,0.11,0.11,0.16,0.09,0.1,0.04,0.02,0.08,0.11,0.09,0.1,0.14,0.09,0.11,0.1,0.11,0.1,0.09,0.06,0.15,0.08,0.11,0.11,0.1,0.12,0.08,0.11,0,9.1,3.77,2150,1316.67,2225,1.63,2.95,1.62,2.13,3.7,2.13,10.32},1},
{{0.21,0.08,0.09,0.09,0.12,0.12,0.07,0.07,0.09,0.08,0.13,0.08,0.13,0.09,0.08,0.07,0.11,0.12,0.09,0.12,0.14,0.1,0.08,0.09,0.09,0.08,0.11,0.13,0.12,0.08,0,8.99,3.61,2325,1008.33,2550,2.11,3.37,1.95,2.74,4.2,2.74,10.53},1},
{{0.13,0.14,0.13,0.1,0.08,0.08,0.07,0.09,0.06,0.05,0.11,0.08,0.11,0.08,0.06,0.07,0.1,0.12,0.11,0.08,0.09,0.09,0.09,0.06,0.1,0.05,0.09,0.09,0.11,0.12,0,8.1,3.58,2925,1887.5,1033.33,1.65,2.94,1.7,2.31,4.07,2.31,9.33},1},
{{0.01,0.02,0.04,0.03,0.02,0.07,0.17,0.14,0.35,0.17,0,0.05,0.07,0.16,0,0.29,0,0.21,0.13,0.1,0.13,0.13,0.16,0.12,0.27,0.06,0.08,0.07,0,0,0,9.87,0.98,580,159.02,350,1.75,0.05,0.13,1.76,0.16,1.76,10.07},4},
{{0,0.02,0.03,0.04,0.04,0.07,0.22,0.17,0.16,0.25,0,0.01,0.04,0.15,0,0.32,0,0.31,0.14,0.04,0.11,0.07,0.08,0.07,0.29,0.18,0.2,0.02,0,0,0,9.87,1.02,125,179.25,580,1.78,0.04,0.11,1.79,0.06,1.79,10.08},4},
{{0.36,0.09,0.09,0.06,0.06,0.05,0.05,0.02,0.06,0.16,0.06,0.4,0.07,0.07,0,0.1,0,0.08,0.08,0.15,0.06,0.08,0.05,0.03,0.03,0.01,0.01,0.09,0.57,0.07,0,9.74,2,2025,211.96,433.33,1.43,0.18,0.85,1.53,0.25,1.53,10.11},4},
{{0.14,0.19,0.19,0.08,0.08,0.08,0.08,0.06,0.07,0.05,0,0.04,0.04,0.11,0,0.11,0,0.21,0.25,0.25,0.19,0.11,0.15,0.09,0.19,0.07,0.11,0.11,0.01,0,0,9.9,0.98,2400,171.3,1062.5,1.55,0.06,0.16,1.56,0.09,1.56,10.07},4},
{{0.05,0.09,0.19,0.12,0.14,0.12,0.11,0.06,0.09,0.05,0,0.02,0.07,0.1,0,0.28,0,0.2,0.21,0.12,0.08,0.06,0.12,0.08,0.11,0.1,0.22,0.25,0,0,0,9.88,1.07,983.33,178.18,490.63,1.61,0.05,0.14,1.62,0.08,1.62,10.07},4},
{{0.03,0.06,0.11,0.11,0.12,0.1,0.11,0.15,0.16,0.08,0.37,0.03,0.03,0.1,0,0.15,0,0.14,0.13,0.07,0,0.03,0.08,0.04,0.13,0.05,0.14,0.12,0.04,0.36,0,9.65,2.11,866.67,183.33,412.5,1.66,0.27,1.19,1.66,0.29,1.66,10.1},4},
{{0,0,0.02,0.01,0.01,0.06,0.07,0.02,0.02,0,0.15,0.05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.19,0,1.82,0.7,340,375,183.33,0.32,1.47,0.57,1.68,7.53,1.68,1.98},4},
{{0.2,0.42,0.12,0.1,0,0.05,0,0.03,0.01,0.05,0.05,0.07,0,0.08,0,0,0.29,0,0,0.47,0.09,0.12,0.25,0,0,0.25,0,0.15,0,0.16,0,9.36,2.82,300,260.81,285.29,2.39,0.05,0.05,2.4,0.2,2.4,10.07},4},
{{0,0.01,0.02,0.07,0,0.18,0,0.2,0.18,0.35,0.05,0.12,0,0.23,0,0,0.31,0,0,0.29,0.1,0.11,0.23,0,0,0.29,0,0.15,0,0.14,0,9.33,2.82,406.25,328.57,258.33,2.56,0.04,0.05,2.57,0.06,2.57,10.08},4},
{{0,0.03,0.01,0.05,0,0.17,0,0.21,0.22,0.34,0.08,0.13,0,0.38,0,0,0.33,0,0,0.09,0,0,0.04,0,0,0.08,0,0.25,0,0.58,0,9.31,2.92,320,303.45,240,2.56,0.03,0.06,2.56,0.05,2.56,10.09},4},
{{0.03,0.02,0.06,0.15,0,0.24,0,0.24,0.15,0.13,0,0.06,0,0.28,0,0,0.4,0,0,0.26,0.02,0.04,0.12,0,0,0.24,0,0.4,0,0.18,0,9.34,2.85,298.33,376.92,365.38,2.51,0.03,0.04,2.51,0.04,2.51,10.08},4},
{{0.02,0.21,0.17,0.25,0,0.19,0,0.15,0.03,0,0,0,0,0.09,0,0,0.44,0,0,0.46,0.01,0.05,0.19,0,0,0.3,0,0.34,0,0.13,0,9.36,2.84,395.65,316.67,268.06,2.44,0.03,0.04,2.45,0.04,2.45,10.09},4},
{{0,0.04,0.02,0.09,0,0.11,0,0.05,0.03,0.01,0,0.01,0,0.05,0,0,0.08,0,0,0.2,0.01,0.03,0.06,0,0,0.15,0,0.1,0,0.01,0,3.23,0.98,290.91,265,338.89,0.85,2.12,0.64,2.48,6.14,2.48,3.48},4},
{{0.06,0.62,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25,0.76,0.14,0.22,0.31,0.19,0.09,0.05,0.01,0,0,0,0,7.06,5.56,335.71,262.16,266.67,4.71,0.03,0.04,4.71,0.18,4.71,10.15},3},
{{0.38,0.2,0.4,0.02,0,0.01,0,0.01,0.01,0,0.02,0.02,0.04,0.02,0.05,0,0.11,0.18,0.2,0.34,0.29,0.11,0.08,0.03,0.02,0.01,0.01,0.02,0.12,0.31,0,6.92,5.72,468.42,222.62,306.67,4.69,0.16,0.25,4.69,0.19,4.69,10.13},3},
{{0.03,0.07,0.25,0.2,0.15,0.16,0.12,0.03,0.01,0.01,0.09,0.06,0.12,0.14,0.23,0,0.15,0.17,0.05,0.01,0.01,0,0.01,0.01,0.02,0.11,0.23,0.19,0.3,0.13,0,6.68,5.79,566.67,218.18,591.67,4.99,0.1,0.1,5,0.15,5,10.15},3},
{{0,0,0.05,0.36,0.39,0.13,0.06,0.01,0.02,0,0,0,0.02,0.02,0.11,0,0.37,0.48,0.02,0,0,0.01,0,0.05,0.26,0.25,0.23,0.16,0.06,0,0,6.76,5.68,384.78,270,316.13,5.04,0.03,0.05,5.04,0.05,5.04,10.17},3},
{{0,0,0,0.02,0.16,0.23,0.51,0.08,0.01,0,0,0,0.01,0.07,0.23,0,0.46,0.25,0,0,0,0.04,0.08,0.08,0.19,0.19,0.27,0.13,0.04,0,0,6.74,5.67,248.72,374,270,5.12,0.03,0.05,5.13,0.04,5.13,10.19},3},
{{0,0,0.01,0.04,0.03,0.11,0.27,0.28,0.16,0.13,0.01,0.07,0.16,0.19,0.21,0,0.12,0.23,0.02,0,0.1,0.13,0.12,0.09,0.1,0.14,0.15,0.14,0.05,0,0,6.7,5.63,275.71,222.09,234.15,5.21,0.07,0.08,5.22,0.1,5.22,10.19},3},
{{0,0,0.01,0,0.02,0.04,0.12,0.23,0.24,0.35,0.54,0.25,0.14,0.03,0.02,0,0.03,0.01,0,0,0.01,0.01,0.01,0.02,0.03,0.04,0.06,0.11,0.38,0.34,0,6.44,5.87,239.02,175,208.89,5.31,0.13,0.12,5.32,0.16,5.32,10.2},3},
{{0,0,0,0.01,0.01,0.01,0.03,0.03,0.38,0.5,0.04,0.4,0.36,0.1,0.07,0,0.02,0.02,0.01,0,0.05,0.07,0.08,0.11,0.14,0.22,0.22,0.09,0.03,0.01,0,6.56,5.62,341.07,237.18,303.33,5.34,0.06,0.07,5.37,0.09,5.37,10.16},3},
{{0.15,0.07,0.1,0,0,0.21,0,0.16,0,0.33,0.03,0,0,0.01,0,0,0.03,0,0.2,0.73,0.27,0.17,0,0.2,0,0,0.16,0,0.08,0.14,0,1.9,8.34,242.5,1275,200,5.58,0.07,0.07,5.59,0.1,5.59,10.22},3},
{{0.39,0.04,0.07,0,0,0.08,0,0.06,0,0.36,0.38,0,0,0.09,0,0,0.09,0,0.16,0.28,0.16,0.09,0,0.13,0,0,0.11,0,0.1,0.41,0,1.73,8.45,383.33,900,228.85,5.48,0.17,0.14,5.49,0.22,5.49,10.23},3},
{{0.04,0.09,0.21,0,0,0.23,0,0.19,0,0.25,0.1,0,0,0.41,0,0,0.32,0,0.17,0.02,0.01,0.07,0,0.14,0,0,0.21,0,0.28,0.31,0,1.75,8.42,237.5,285.29,226.74,5.57,0.03,0.05,5.57,0.05,5.57,10.25},3},
{{0.04,0.06,0.19,0,0,0.31,0,0.26,0,0.14,0.05,0,0,0.4,0,0,0.4,0,0.16,0,0.01,0.05,0,0.15,0,0,0.38,0,0.29,0.14,0,1.75,8.4,304.84,301.61,265.71,5.57,0.02,0.04,5.57,0.03,5.57,10.23},3},
{{0,0,0.01,0,0,0.22,0,0.57,0,0.21,0,0,0,0.05,0,0,0.57,0,0.38,0,0,0.05,0,0.34,0,0,0.39,0,0.21,0.03,0,1.77,8.38,269.35,289.39,262.86,5.6,0.02,0.03,5.6,0.03,5.6,10.23},3},
{{0.01,0.06,0.15,0,0,0.44,0,0.3,0,0.06,0.07,0,0,0.43,0,0,0.44,0,0.07,0,0.01,0.06,0,0.28,0,0,0.4,0,0.19,0.08,0,1.75,8.39,327.78,393.75,246.15,5.56,0.02,0.03,5.57,0.03,5.57,10.22},3},
{{0,0,0.03,0,0,0.4,0,0.45,0,0.12,0.01,0,0,0.15,0,0,0.6,0,0.25,0,0.01,0.02,0,0.26,0,0,0.4,0,0.26,0.07,0,1.77,8.39,263.89,336.21,257.89,5.59,0.02,0.03,5.59,0.03,5.59,10.24},3},
{{0.05,0.01,0.02,0,0,0.06,0,0.13,0,0.06,0.06,0,0,0.06,0,0,0.16,0,0.04,0.02,0.01,0,0,0.05,0,0,0.13,0,0.08,0.06,0,0.55,2.7,328.57,357.14,200,1.78,0.38,1.83,5.57,1.18,5.57,3.28},3},
{{0.02,0.04,0.04,0.04,0.03,0.14,0.26,0.14,0.22,0.09,0.06,0.06,0,0.04,0,0,0.15,0,0.38,0.33,0.46,0.33,0.14,0.04,0.02,0.01,0.01,0.01,0,0,0,9.97,0.49,1475,204.26,2100,0.26,0.07,0.13,0.34,0.13,0.34,9.99},4},
{{0.08,0.04,0.02,0.02,0.02,0.07,0.13,0.09,0.29,0.26,0.09,0.03,0,0.05,0,0,0.19,0,0.41,0.23,0.13,0.22,0.22,0.13,0.12,0.06,0.05,0.03,0.02,0.05,0,9.96,0.72,275,278.79,250,0.28,0.07,0.18,0.39,0.12,0.39,9.99},4},
{{0.04,0.1,0.04,0.02,0.02,0.04,0.09,0.07,0.35,0.26,0.06,0.06,0,0.18,0,0,0.37,0,0.29,0.05,0,0,0.01,0.07,0.11,0.05,0.22,0.19,0.26,0.11,0,9.92,1,400,283.33,307.14,0.23,0.04,0.12,0.31,0.06,0.31,9.98},4},
{{0.11,0.19,0.14,0.15,0.08,0.15,0.1,0.04,0.06,0.02,0.07,0.1,0,0.2,0,0,0.24,0,0.25,0.16,0.03,0.16,0.17,0.25,0.18,0.05,0.06,0.04,0.03,0.05,0,9.93,0.77,400,245.95,133.33,0.44,0.06,0.13,0.48,0.08,0.48,9.97},4},
{{0.21,0.11,0.12,0.1,0.05,0.14,0.1,0.04,0.08,0.08,0.13,0.15,0,0.17,0,0,0.21,0,0.21,0.15,0.07,0.08,0.07,0.07,0.06,0.01,0.04,0.05,0.14,0.43,0,9.92,1.03,1216.67,186.73,1430,0.46,0.08,0.3,0.53,0.13,0.53,9.99},4},
{{0.13,0.15,0.17,0.21,0.07,0.14,0.08,0.04,0.02,0.02,0.05,0.07,0,0.29,0,0,0.35,0,0.2,0.06,0,0.07,0.06,0.09,0.1,0.08,0.19,0.23,0.18,0.02,0,9.92,0.91,1216.67,231.71,1070,0.47,0.04,0.13,0.51,0.06,0.51,9.97},4},
{{0.11,0.1,0.11,0.18,0.09,0.12,0.11,0.04,0.11,0.04,0.06,0.1,0,0.24,0,0,0.4,0,0.13,0.07,0.03,0.02,0.02,0.05,0.05,0.03,0.13,0.22,0.24,0.23,0,9.91,1.03,450,272.86,225,0.43,0.06,0.16,0.49,0.14,0.49,9.98},4},
{{0.07,0.06,0.04,0.14,0.1,0.23,0.16,0.08,0.09,0.05,0.03,0.05,0,0.17,0,0,0.46,0,0.25,0.06,0.01,0.03,0.04,0.14,0.3,0.15,0.26,0.05,0.02,0.02,0,9.93,0.86,900,357.69,625,0.36,0.03,0.09,0.41,0.06,0.41,9.97},4},
{{0.02,0.01,0.01,0.06,0.03,0.04,0.04,0.01,0.03,0.04,0.06,0.01,0,0.05,0,0,0.1,0,0.04,0.01,0,0,0.01,0,0.05,0.04,0.06,0.04,0.01,0.05,0,2.57,0.31,900,222.22,125,0.09,1.9,0.23,0.42,7.31,0.42,2.59},4},
{{0.09,0.08,0.29,0,0.3,0,0.11,0.08,0.07,0.01,0.01,0,0,0,0.2,0,0,0,0.53,0.25,0.1,0.04,0.05,0.11,0,0.1,0,0.2,0.23,0.19,0,9.89,1.44,4650,262.5,600,0.08,0.02,0.08,0.1,0.19,0.1,10},4},
{{0.22,0.15,0.15,0,0.19,0,0.18,0.06,0.05,0.02,0.03,0,0,0,0.15,0,0,0,0.5,0.29,0.32,0.14,0.17,0.15,0,0.05,0,0.03,0.04,0.11,0,9.89,1.35,1033.33,322.41,600,0.1,0.02,0.09,0.13,0.04,0.13,9.99},4},
{{0.03,0.11,0.24,0,0.24,0,0.23,0.1,0.05,0.02,0.05,0,0,0,0.3,0,0,0,0.47,0.18,0.16,0.12,0.12,0.18,0,0.13,0,0.1,0.04,0.17,0,9.88,1.4,3450,429.55,308.33,0.07,0.02,0.08,0.08,0.03,0.08,9.98},4},
{{0.15,0.18,0.11,0,0.16,0,0.19,0.11,0.05,0.07,0.06,0,0,0,0.34,0,0,0,0.52,0.08,0.02,0.05,0.16,0.25,0,0.23,0,0.17,0.09,0.05,0,9.87,1.41,400,350,393.48,0.09,0.03,0.05,0.11,0.03,0.11,9.97},4},
{{0.03,0.05,0.09,0,0.12,0,0.14,0.26,0.19,0.14,0.06,0,0,0,0.45,0,0,0,0.44,0.06,0.01,0.03,0.09,0.22,0,0.23,0,0.24,0.15,0.06,0,9.87,1.43,262.5,317.86,326.79,0.09,0.02,0.05,0.1,0.03,0.1,9.97},4},
{{0,0,0.03,0,0.09,0,0.26,0.21,0.13,0.28,0.18,0,0,0,0.36,0,0,0,0.4,0.05,0.01,0.01,0.04,0.17,0,0.23,0,0.25,0.14,0.17,0,9.86,1.45,3850,262.5,576.67,0.1,0.03,0.05,0.12,0.04,0.12,9.97},4},
{{0.01,0,0.02,0,0.01,0,0.15,0.15,0.16,0.28,0.19,0,0,0,0.39,0,0,0,0.18,0,0,0,0.01,0.03,0,0.08,0,0.15,0.08,0.42,0,7.53,1.17,1133.33,357.89,470,0.09,1.77,0.27,0.14,2.31,0.14,7.62},4},
{{0.63,0,0.09,0.19,0.05,0.04,0,0,0,0.02,0,0,0,0,0.01,0.01,0.02,0.07,0.14,0.73,0.03,0.02,0,0.06,0,0,0,0.17,0,0.69,0,2.86,7.9,259.46,2483.33,250,5.5,0.07,0.08,5.5,0.15,5.5,10.04},3},
{{0.3,0,0.4,0.3,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.21,0.78,0,0,0,0.1,0,0,0,0.3,0,0.61,0,2.83,7.85,336.21,425,295.45,5.6,0.02,0.03,5.6,0.04,5.6,10.04},3},
{{0.08,0,0.44,0.47,0.02,0,0,0,0,0,0,0,0,0,0,0.01,0.03,0.04,0.28,0.65,0.01,0.01,0,0.11,0,0,0,0.31,0,0.57,0,2.82,7.84,494.74,338.46,350,5.61,0.03,0.03,5.62,0.06,5.62,10.05},3},
{{0.22,0,0.49,0.29,0,0,0,0,0,0.01,0,0,0,0,0,0.01,0,0.07,0.47,0.46,0.01,0,0,0.09,0,0,0,0.34,0,0.57,0,2.81,7.84,322.41,430.95,247.3,5.6,0.03,0.03,5.6,0.04,5.6,10.04},3},
{{0.18,0,0.44,0.35,0.03,0.01,0,0,0,0,0,0,0,0,0.01,0.02,0.12,0.39,0.32,0.15,0.01,0.04,0,0.08,0,0,0,0.27,0,0.61,0,2.76,7.84,324.14,314.52,311.29,5.61,0.05,0.03,5.61,0.07,5.61,10.03},3},
{{0.05,0,0.17,0.5,0.1,0.13,0,0.02,0,0.04,0,0,0,0,0.01,0.04,0.34,0.52,0.06,0.04,0.03,0.04,0,0.12,0,0,0,0.28,0,0.54,0,2.71,7.84,290.91,397.73,220,5.67,0.04,0.04,5.67,0.06,5.67,10.05},3},
{{0.03,0,0.01,0.14,0.31,0.42,0,0.06,0,0.03,0,0,0,0,0.11,0.22,0.62,0.04,0.01,0.01,0.05,0.13,0,0.27,0,0,0,0.39,0,0.17,0,2.64,7.8,1133.33,1166.67,295.16,5.73,0.04,0.04,5.74,0.06,5.74,10.03},3},
{{0,0,0,0.02,0.32,0.65,0,0.01,0,0.01,0,0,0,0,0.25,0.54,0.21,0.01,0,0,0,0.03,0,0.36,0,0,0,0.4,0,0.22,0,2.6,7.81,386,411.36,229.27,5.74,0.02,0.03,5.75,0.04,5.75,10.04},3},
{{0.01,0,0.01,0.05,0.17,0.5,0,0.14,0,0.13,0.01,0,0,0,0.49,0.29,0.18,0.02,0.02,0.01,0.04,0.2,0,0.29,0,0,0,0.28,0,0.18,0,2.59,7.8,324.14,507.89,273.53,5.77,0.04,0.04,5.78,0.06,5.78,10.04},3},
{{0,0,0,0.02,0.04,0.32,0,0.36,0,0.28,0.02,0.12,0,0.34,0.44,0.05,0.04,0.01,0,0,0.06,0.23,0,0.39,0,0,0,0.25,0,0.08,0,2.49,7.78,375,308,309.68,5.82,0.05,0.03,5.83,0.07,5.83,10.03},3},
{{0,0,0,0,0,0.13,0,0.58,0,0.3,0.02,0.23,0,0.48,0.28,0,0,0,0,0,0.01,0.12,0,0.44,0,0,0,0.37,0,0.07,0,2.45,7.79,365.38,393.75,329.31,5.83,0.02,0.03,5.84,0.04,5.84,10.04},3},
{{0,0,0,0,0,0.03,0,0.4,0,0.58,0.05,0.5,0,0.42,0.04,0,0,0,0,0,0.03,0.14,0,0.51,0,0,0,0.28,0,0.06,0,2.43,7.79,370,303.13,298.44,5.85,0.02,0.03,5.85,0.03,5.85,10.04},3},
{{0,0,0,0,0,0.05,0,0.28,0,0.68,0.02,0.3,0,0.62,0.07,0,0,0,0,0,0.01,0.14,0,0.39,0,0,0,0.4,0,0.07,0,2.44,7.79,382.61,533.33,263.51,5.85,0.02,0.03,5.86,0.03,5.86,10.05},3},
{{0,0,0,0,0,0.03,0,0.21,0,0.77,0.05,0.27,0,0.55,0.14,0,0,0,0,0,0.01,0.13,0,0.39,0,0,0,0.34,0,0.14,0,2.44,7.8,465,374,262.16,5.86,0.03,0.03,5.87,0.04,5.87,10.06},3},
{{0,0,0,0,0,0.01,0,0.29,0,0.71,0.05,0.51,0,0.42,0.03,0,0,0,0,0,0.05,0.17,0,0.43,0,0,0,0.31,0,0.06,0,2.43,7.79,368,309.68,204.44,5.86,0.02,0.03,5.86,0.03,5.86,10.04},3},
{{0,0,0,0,0,0.01,0,0.22,0,0.77,0.06,0.53,0,0.4,0.02,0,0,0,0,0,0.03,0.13,0,0.45,0,0,0,0.35,0,0.06,0,2.43,7.79,368,370.83,275.76,5.86,0.02,0.03,5.86,0.03,5.86,10.05},3},
{{0,0,0,0,0.01,0.01,0,0.04,0,0.15,0.06,0.11,0,0.06,0.03,0,0,0,0,0,0.03,0.12,0,0.07,0,0,0,0.02,0,0.01,0,0.58,1.86,180,387.5,238.89,1.42,0.44,1.41,5.91,1.83,5.91,2.41},3},
{{0.11,0,0.23,0,0,0.38,0,0.23,0,0.06,0.17,0.36,0,0,0.39,0,0,0,0.08,0.01,0.06,0,0.24,0,0,0,0.41,0,0.25,0.04,0,2.5,8.24,406.82,276.47,289.06,5.44,0.03,0.03,5.44,0.1,5.44,10.18},3},
{{0.3,0,0.21,0,0,0.2,0,0.18,0,0.12,0.04,0.26,0,0,0.48,0,0,0,0.22,0.02,0.01,0,0.12,0,0,0,0.31,0,0.3,0.26,0,2.52,8.27,282.26,285.94,270.83,5.42,0.02,0.04,5.43,0.04,5.43,10.21},3},
{{0.06,0,0.26,0,0,0.38,0,0.27,0,0.04,0.01,0.16,0,0,0.46,0,0,0,0.36,0.03,0.02,0,0.2,0,0,0,0.4,0,0.24,0.15,0,2.54,8.25,320.69,332.14,272.22,5.44,0.02,0.03,5.44,0.03,5.44,10.2},3},
{{0.21,0,0.37,0,0,0.28,0,0.14,0,0.02,0,0.18,0,0,0.49,0,0,0,0.32,0.02,0.05,0,0.24,0,0,0,0.47,0,0.24,0.02,0,2.53,8.24,257.35,410.42,315,5.42,0.02,0.02,5.42,0.03,5.42,10.18},3},
{{0.14,0,0.24,0,0,0.38,0,0.18,0,0.07,0.02,0.09,0,0,0.45,0,0,0,0.38,0.08,0.07,0,0.26,0,0,0,0.39,0,0.25,0.05,0,2.54,8.24,452.5,350,300,5.43,0.02,0.03,5.43,0.03,5.43,10.19},3},
{{0.17,0,0.29,0,0,0.27,0,0.15,0,0.14,0,0.05,0,0,0.35,0,0,0,0.5,0.1,0.02,0,0.12,0,0,0,0.32,0,0.37,0.18,0,2.55,8.26,301.56,328.85,277.14,5.43,0.02,0.03,5.44,0.03,5.44,10.21},3},
{{0.06,0,0.3,0,0,0.4,0,0.19,0,0.05,0.01,0.03,0,0,0.32,0,0,0,0.52,0.13,0.02,0,0.12,0,0,0,0.34,0,0.4,0.13,0,2.55,8.26,351.79,353.7,336.21,5.43,0.02,0.03,5.44,0.03,5.44,10.21},3},
{{0.05,0,0.2,0,0,0.34,0,0.29,0,0.13,0.01,0.01,0,0,0.18,0,0,0,0.47,0.32,0.02,0,0.14,0,0,0,0.42,0,0.34,0.08,0,2.57,8.25,371.15,388,388,5.45,0.03,0.03,5.45,0.04,5.45,10.22},3},
{{0,0,0.03,0,0,0.2,0,0.4,0,0.38,0,0,0,0,0.04,0,0,0,0.58,0.39,0.04,0,0.24,0,0,0,0.52,0,0.18,0.03,0,2.58,8.24,357.41,390,308.33,5.49,0.02,0.02,5.49,0.03,5.49,10.23},3},
{{0.01,0,0.11,0,0,0.41,0,0.38,0,0.1,0,0.01,0,0,0.09,0,0,0,0.54,0.37,0.02,0,0.17,0,0,0,0.4,0,0.31,0.11,0,2.57,8.25,390,322.41,256.58,5.46,0.02,0.03,5.46,0.03,5.46,10.22},3},
{{0.02,0,0.04,0,0,0.2,0,0.29,0,0.47,0,0.04,0,0,0.23,0,0,0,0.52,0.22,0.1,0,0.27,0,0,0,0.36,0,0.23,0.05,0,2.56,8.23,389.58,336.21,265.28,5.49,0.02,0.03,5.5,0.03,5.5,10.22},3},
{{0.01,0,0.03,0,0,0.11,0,0.31,0,0.55,0,0.01,0,0,0.19,0,0,0,0.48,0.33,0.05,0,0.2,0,0,0,0.47,0,0.26,0.03,0,2.57,8.24,359.62,465,438.64,5.51,0.02,0.02,5.51,0.03,5.51,10.24},3},
{{0.05,0,0.19,0,0,0.2,0,0.18,0,0.37,0.02,0.08,0,0,0.25,0,0,0,0.36,0.28,0.05,0,0.15,0,0,0,0.24,0,0.27,0.29,0,2.56,8.26,408.7,267.14,317.24,5.49,0.03,0.04,5.49,0.05,5.49,10.25},3},
{{0.07,0,0.09,0,0,0.11,0,0.19,0,0.54,0.08,0.4,0,0,0.34,0,0,0,0.13,0.06,0.03,0,0.15,0,0,0,0.28,0,0.33,0.22,0,2.52,8.26,359.26,317.74,321.67,5.49,0.03,0.04,5.5,0.04,5.5,10.24},3},
{{0,0,0.01,0,0,0.03,0,0.17,0,0.72,0.11,0.43,0,0,0.31,0,0,0,0.05,0.03,0.06,0,0.31,0,0,0,0.38,0,0.14,0.03,0,2.31,7.57,373.81,400,463.16,5.08,0.18,0.61,5.53,0.2,5.53,9.41},3},
{{0.18,0.17,0.07,0.07,0.09,0.11,0.17,0.06,0.03,0.06,0.02,0.06,0.07,0.05,0.07,0.13,0.15,0.14,0.17,0.14,0.16,0.13,0.14,0.09,0.06,0.13,0.1,0.09,0.06,0.05,0,8.36,-2.09,1300,895,3375,6.76,3.22,2.1,8.2,4.09,8.2,12.1},2},
{{0.13,0.19,0.13,0.07,0.06,0.12,0.17,0.08,0.03,0.02,0.02,0.06,0.04,0.06,0.07,0.13,0.15,0.17,0.17,0.14,0.16,0.16,0.13,0.09,0.08,0.06,0.12,0.09,0.06,0.09,0,8.44,-1.81,1106.25,1400,2225,6.7,3.08,2.46,8.06,4.01,8.06,12.03},2},
{{0.11,0.17,0.16,0.1,0.1,0.1,0.15,0.04,0.03,0.04,0.02,0.02,0.02,0.09,0.1,0.12,0.16,0.18,0.19,0.13,0.13,0.13,0.08,0.11,0.06,0.14,0.11,0.11,0.08,0.07,0,8.46,-1.71,1300,1141.67,3125,6.57,2.78,2.19,7.97,3.64,7.97,11.9},2},
{{0.15,0.15,0.1,0.13,0.07,0.1,0.11,0.1,0.03,0.06,0.06,0.05,0.04,0.04,0.07,0.14,0.14,0.17,0.18,0.12,0.15,0.15,0.11,0.08,0.1,0.1,0.07,0.1,0.07,0.09,0,8.05,-1.83,1158.33,1390,3475,6.95,3.03,2.32,8.42,4,8.42,12.02},2},
{{0.13,0.14,0.12,0.11,0.07,0.09,0.1,0.11,0.07,0.06,0.06,0.05,0.05,0.05,0.08,0.12,0.15,0.15,0.17,0.14,0.13,0.17,0.09,0.08,0.08,0.14,0.08,0.12,0.06,0.08,0,8.06,-1.73,1118.75,1112.5,2616.67,7.28,3.19,2.48,8.67,4.16,8.67,12.28},2},
{{0.14,0.15,0.1,0.14,0.11,0.07,0.12,0.08,0.03,0.07,0.03,0.09,0.04,0.09,0.12,0.1,0.1,0.16,0.17,0.13,0.13,0.14,0.08,0.08,0.08,0.11,0.11,0.08,0.09,0.12,0,8.02,-1.42,1250,1750,3025,6.93,3.25,2.57,8.38,4.14,8.38,11.95},2},
{{0.12,0.13,0.08,0.13,0.1,0.07,0.13,0.09,0.1,0.07,0.08,0.08,0.08,0.07,0.14,0.13,0.1,0.12,0.11,0.12,0.08,0.08,0.14,0.12,0.11,0.11,0.09,0.1,0.12,0.08,0,7.14,-1.33,1275,1283.33,2775,7.63,3.2,2.26,8.92,4.24,8.92,11.73},2},
{{0.1,0.09,0.08,0.13,0.15,0.09,0.08,0.11,0.12,0.06,0.09,0.09,0.09,0.1,0.12,0.15,0.1,0.11,0.05,0.12,0.1,0.1,0.13,0.12,0.07,0.11,0.12,0.06,0.1,0.12,0,6.63,-1.38,1292.86,2262.5,2800,7.94,3.04,2.43,9.17,4.14,9.17,11.69},2},
{{0.09,0.09,0.09,0.12,0.13,0.08,0.12,0.17,0.06,0.04,0.09,0.08,0.08,0.11,0.14,0.14,0.13,0.08,0.08,0.1,0.08,0.07,0.12,0.15,0.09,0.13,0.09,0.11,0.09,0.09,0,6.46,-1.39,1166.67,1550,875,7.99,2.97,2.19,9.12,4.09,9.12,11.59},2},
{{0.08,0.1,0.07,0.12,0.15,0.09,0.1,0.12,0.09,0.09,0.1,0.09,0.12,0.1,0.12,0.09,0.14,0.1,0.06,0.12,0.09,0.09,0.14,0.09,0.13,0.12,0.09,0.08,0.1,0.1,0,6.47,-1.3,1350,1508.33,1883.33,8.17,3.19,2.34,9.34,4.29,9.34,11.79},2},
{{0.1,0.08,0.1,0.09,0.11,0.12,0.08,0.12,0.13,0.07,0.1,0.14,0.1,0.12,0.11,0.08,0.11,0.09,0.08,0.1,0.08,0.14,0.12,0.07,0.08,0.07,0.12,0.1,0.13,0.1,0,6.23,-1.22,1292.86,1900,2850,8.28,3.05,2.44,9.48,4.05,9.48,11.67},2},
{{0.1,0.07,0.12,0.12,0.08,0.11,0.1,0.13,0.1,0.06,0.09,0.09,0.14,0.08,0.15,0.11,0.12,0.05,0.07,0.12,0.1,0.11,0.11,0.12,0.1,0.11,0.07,0.08,0.11,0.11,0,6.39,-1.39,1131.25,1125,2066.67,8.24,3.08,2.5,9.43,4.16,9.43,11.79},2},
{{0.1,0.07,0.12,0.07,0.14,0.09,0.06,0.13,0.13,0.1,0.11,0.09,0.11,0.16,0.11,0.1,0.06,0.08,0.12,0.08,0.1,0.1,0.11,0.09,0.07,0.14,0.1,0.11,0.12,0.08,0,6.25,-1.14,1292.86,1425,4525,8.29,3.1,2.48,9.58,4.14,9.58,11.76},2},
{{0.09,0.08,0.13,0.11,0.07,0.08,0.09,0.16,0.11,0.1,0.11,0.15,0.13,0.11,0.1,0.08,0.06,0.07,0.12,0.09,0.12,0.06,0.11,0.09,0.09,0.15,0.12,0.07,0.08,0.12,0,6.18,-1.17,1491.67,1675,3350,8.36,3.27,2.43,9.57,4.23,9.57,11.74},2},
{{0.08,0.09,0.12,0.08,0.07,0.12,0.12,0.17,0.1,0.05,0.1,0.13,0.11,0.12,0.11,0.11,0.1,0.08,0.08,0.09,0.08,0.07,0.1,0.1,0.13,0.08,0.1,0.13,0.14,0.09,0,6.18,-1.16,1157.14,1175,1725,8.29,3.05,2.33,9.46,4.1,9.46,11.63},2},
{{0.08,0.08,0.09,0.14,0.1,0.09,0.14,0.13,0.08,0.09,0.12,0.06,0.14,0.12,0.11,0.13,0.07,0.1,0.09,0.09,0.1,0.1,0.1,0.08,0.1,0.12,0.08,0.12,0.1,0.13,0,6.21,-0.98,1830,1412.5,2825,8.32,2.95,2.59,9.46,3.94,9.46,11.73},2},
{{0.09,0.09,0.1,0.11,0.12,0.09,0.08,0.11,0.12,0.09,0.12,0.08,0.17,0.09,0.11,0.11,0.08,0.09,0.08,0.09,0.07,0.06,0.13,0.13,0.13,0.09,0.1,0.09,0.11,0.11,0,6.18,-1.11,1285.71,1285.71,1125,8.39,3.11,2.46,9.62,4.14,9.62,11.76},2},
{{0.09,0.1,0.12,0.11,0.05,0.13,0.11,0.1,0.13,0.09,0.12,0.11,0.06,0.14,0.1,0.1,0.09,0.11,0.13,0.05,0.09,0.13,0.08,0.07,0.06,0.11,0.11,0.14,0.15,0.08,0,6.27,-1.03,1257.14,1264.29,2175,8.23,3,2.42,9.47,3.96,9.47,11.61},2},
{{0.1,0.09,0.11,0.12,0.06,0.13,0.09,0.08,0.13,0.11,0.13,0.12,0.09,0.13,0.1,0.07,0.08,0.12,0.09,0.09,0.06,0.1,0.07,0.11,0.1,0.12,0.19,0.09,0.1,0.09,0,6.17,-1.13,1131.25,1516.67,1700,8.35,3.17,2.13,9.61,4.14,9.61,11.6},2},
{{0.08,0.1,0.08,0.1,0.08,0.12,0.14,0.07,0.12,0.1,0.12,0.11,0.13,0.1,0.12,0.06,0.09,0.12,0.09,0.08,0.07,0.14,0.09,0.07,0.09,0.13,0.1,0.11,0.13,0.09,0,6.17,-1.07,1093.75,1540,2200,8.58,3.15,2.39,9.78,4.08,9.78,11.83},2},
{{0.09,0.08,0.12,0.07,0.11,0.11,0.09,0.1,0.15,0.1,0.11,0.13,0.13,0.1,0.09,0.09,0.07,0.11,0.09,0.09,0.08,0.17,0.07,0.08,0.07,0.08,0.15,0.14,0.12,0.08,0,6.24,-1.26,1483.33,1950,1675,8.57,3.14,2.28,9.78,4.09,9.78,11.8},2},
{{0.09,0.08,0.11,0.07,0.16,0.08,0.04,0.11,0.13,0.13,0.11,0.15,0.12,0.13,0.13,0.09,0.05,0.07,0.07,0.11,0.12,0.17,0.08,0.09,0.08,0.09,0.08,0.13,0.09,0.1,0,6.03,-1.39,1271.43,1387.5,1850,8.65,3.16,2.54,9.9,4.23,9.9,11.93},2},
{{0.09,0.09,0.13,0.1,0.1,0.08,0.05,0.08,0.13,0.17,0.18,0.1,0.13,0.09,0.07,0.08,0.1,0.07,0.08,0.11,0.17,0.1,0.11,0.07,0.12,0.04,0.12,0.07,0.11,0.12,0,6.03,-1.35,1087.5,1250,2175,8.7,3.53,2.84,10.04,4.64,10.04,12.18},2},
{{0.08,0.1,0.1,0.11,0.12,0.08,0.07,0.09,0.16,0.1,0.13,0.1,0.14,0.13,0.12,0.09,0.1,0.07,0.07,0.09,0.15,0.06,0.12,0.09,0.13,0.1,0.07,0.09,0.09,0.13,0,5.99,-1.21,1264.29,1475,4425,8.52,3.16,2.75,9.82,4.34,9.82,11.91},2},
{{0.1,0.09,0.08,0.12,0.12,0.06,0.06,0.12,0.15,0.12,0.16,0.09,0.14,0.13,0.05,0.11,0.09,0.07,0.09,0.09,0.07,0.07,0.09,0.18,0.13,0.1,0.09,0.1,0.08,0.12,0,5.87,-1.19,1264.29,1264.29,1675,8.66,3.32,2.32,9.95,4.45,9.95,11.91},2},
{{0.1,0.09,0.07,0.08,0.15,0.1,0.08,0.09,0.11,0.13,0.12,0.13,0.13,0.11,0.08,0.09,0.12,0.06,0.08,0.1,0.09,0.05,0.06,0.15,0.14,0.09,0.09,0.14,0.09,0.13,0,6.12,-1.02,1441.67,3750,3225,8.46,3.28,2.4,9.71,4.32,9.71,11.82},2},
{{0.09,0.07,0.08,0.11,0.07,0.14,0.11,0.09,0.13,0.08,0.12,0.14,0.09,0.12,0.12,0.09,0.1,0.08,0.09,0.08,0.07,0.07,0.07,0.12,0.13,0.11,0.11,0.1,0.12,0.13,0,5.91,-0.86,1560,1340,3900,8.62,2.98,2.45,9.82,4.05,9.82,11.74},2},
{{0.09,0.07,0.11,0.1,0.09,0.14,0.11,0.07,0.11,0.13,0.13,0.14,0.12,0.1,0.11,0.09,0.06,0.1,0.07,0.09,0.07,0.07,0.12,0.1,0.1,0.12,0.09,0.1,0.14,0.12,0,5.85,-0.91,1278.57,1340,2800,8.58,3.19,2.43,9.78,4.25,9.78,11.68},2},
{{0.11,0.09,0.1,0.06,0.11,0.14,0.09,0.06,0.11,0.14,0.12,0.11,0.14,0.12,0.11,0.09,0.06,0.09,0.09,0.09,0.1,0.07,0.05,0.13,0.12,0.11,0.09,0.12,0.11,0.12,0,6.07,-0.99,1525,1590,2225,8.32,3.14,2.51,9.62,4.18,9.62,11.72},2},
{{0.1,0.07,0.1,0.06,0.14,0.12,0.06,0.14,0.14,0.08,0.14,0.14,0.1,0.13,0.1,0.09,0.07,0.09,0.07,0.1,0.09,0.06,0.06,0.13,0.13,0.09,0.11,0.11,0.12,0.13,0,5.84,-0.89,1516.67,1590,2633.33,8.56,3.23,2.56,9.78,4.33,9.78,11.83},2},
{{0.09,0.09,0.1,0.06,0.11,0.12,0.1,0.11,0.12,0.12,0.12,0.15,0.11,0.1,0.07,0.08,0.13,0.09,0.07,0.11,0.08,0.04,0.09,0.09,0.12,0.13,0.11,0.13,0.12,0.11,0,6.12,-0.84,1131.25,1508.33,3950,8.6,3.32,2.35,9.83,4.34,9.83,11.92},2},
{{0.08,0.08,0.09,0.11,0.11,0.12,0.1,0.11,0.1,0.04,0.09,0.11,0.1,0.1,0.09,0.09,0.11,0.09,0.11,0.07,0.07,0.04,0.06,0.12,0.11,0.1,0.09,0.12,0.11,0.12,0,5.79,-0.68,1166.67,1737.5,2625,7.37,2.77,2.28,9.16,4.05,9.16,10.66},2},
{{0,0.11,0.08,0.1,0.07,0.08,0.16,0.13,0.1,0.19,0.08,0.07,0.04,0.04,0.12,0.12,0.11,0.03,0.04,0.31,0.1,0.11,0.17,0.11,0.12,0.07,0.06,0.07,0.15,0.07,0,7.86,-1.55,1716.67,363.46,2400,8.68,7.15,5.73,10.34,8.12,10.34,15.41},0},
{{0,0.22,0.13,0.07,0.08,0.09,0.12,0.1,0.06,0.16,0.06,0.07,0.05,0.05,0.12,0.14,0.12,0.11,0.05,0.23,0.13,0.09,0.15,0.11,0.09,0.11,0.05,0.08,0.13,0.09,0,6.41,-1.27,1650,666.67,4925,10.75,5.88,5.88,12.44,7,12.44,15.97},0},
{{0,0.21,0.11,0.11,0.07,0.09,0.13,0.09,0.09,0.13,0.07,0.1,0.08,0.09,0.13,0.12,0.08,0.1,0.11,0.13,0.11,0.1,0.07,0.08,0.12,0.13,0.12,0.12,0.07,0.1,0,4.24,-0.61,1266.67,2037.5,2025,10.52,5.42,5.41,12.2,6.49,12.2,14.97},0},
{{0,0.21,0.07,0.13,0.09,0.09,0.14,0.08,0.12,0.09,0.09,0.1,0.1,0.12,0.06,0.11,0.14,0.12,0.06,0.12,0.13,0.06,0.13,0.12,0.1,0.1,0.1,0.11,0.08,0.1,0,3.66,-1.01,1625,955.56,1308.33,10.32,5.34,5.44,12.01,6.45,12.01,14.79},0},
{{0,0.21,0.09,0.12,0.1,0.1,0.1,0.1,0.11,0.09,0.1,0.12,0.12,0.09,0.09,0.09,0.11,0.1,0.13,0.08,0.1,0.08,0.1,0.1,0.09,0.11,0.11,0.11,0.09,0.12,0,3.64,-0.34,1975,1061.11,1150,10.54,5.56,5.59,12.2,6.55,12.2,15.02},0},
{{0,0.2,0.1,0.11,0.1,0.11,0.09,0.09,0.11,0.1,0.08,0.12,0.11,0.1,0.12,0.14,0.06,0.12,0.12,0.06,0.11,0.11,0.11,0.11,0.12,0.09,0.1,0.1,0.08,0.11,0,3.18,-0.87,1650,1285.71,4025,10.68,5.13,5.63,12.3,6.27,12.3,14.95},0},
{{0,0.2,0.11,0.1,0.1,0.11,0.12,0.09,0.09,0.11,0.09,0.14,0.12,0.09,0.08,0.1,0.06,0.1,0.12,0.12,0.11,0.07,0.12,0.11,0.09,0.13,0.08,0.11,0.08,0.12,0,3.68,-0.52,1616.67,1364.29,800,10.41,5.62,5.72,12.12,6.53,12.12,14.99},0},
{{0,0.21,0.11,0.1,0.11,0.1,0.09,0.11,0.08,0.11,0.1,0.13,0.15,0.08,0.08,0.06,0.11,0.11,0.09,0.12,0.09,0.14,0.07,0.14,0.09,0.08,0.13,0.1,0.07,0.12,0,3.49,-0.57,1900,2100,1290,10.72,5.73,5.72,12.41,6.73,12.41,15.16},0},
{{0,0.23,0.15,0.06,0.08,0.11,0.12,0.07,0.13,0.08,0.1,0.09,0.13,0.1,0.13,0.08,0.05,0.1,0.15,0.09,0.09,0.08,0.12,0.08,0.09,0.12,0.12,0.13,0.12,0.08,0,3.74,-0.23,3175,813.64,3550,10.88,5.55,5.36,12.58,6.47,12.58,15.19},0},
{{0,0.24,0.1,0.08,0.11,0.1,0.1,0.09,0.11,0.1,0.1,0.13,0.13,0.09,0.06,0.1,0.11,0.07,0.14,0.1,0.14,0.1,0.09,0.1,0.1,0.08,0.06,0.14,0.09,0.13,0,3.48,-0.58,1612.5,1975,2212.5,10.92,5.54,6.49,12.6,6.47,12.6,15.71},0},
{{0,0.21,0.1,0.11,0.1,0.1,0.11,0.1,0.11,0.09,0.1,0.1,0.09,0.11,0.09,0.1,0.12,0.11,0.1,0.11,0.12,0.1,0.09,0.1,0.11,0.1,0.09,0.11,0.09,0.1,0,3.75,-0.93,2750,1235.71,3950,10.52,5.54,5.72,12.21,6.66,12.21,15.16},0},
{{0,0.21,0.13,0.1,0.06,0.11,0.09,0.11,0.09,0.13,0.12,0.09,0.11,0.09,0.1,0.13,0.09,0.07,0.12,0.11,0.09,0.12,0.07,0.1,0.11,0.1,0.14,0.11,0.08,0.1,0,3.48,-0.45,3166.67,800,1575,10.73,5.55,5.36,12.31,6.74,12.31,15.01},0},
{{0,0.21,0.11,0.14,0.07,0.08,0.1,0.09,0.09,0.12,0.11,0.08,0.12,0.13,0.07,0.1,0.08,0.15,0.07,0.11,0.07,0.12,0.08,0.11,0.12,0.1,0.11,0.13,0.11,0.07,0,3.49,-0.57,2025,635.71,2450,10.95,5.38,5.01,12.55,6.38,12.55,14.89},0},
{{0,0.21,0.09,0.13,0.11,0.11,0.08,0.11,0.1,0.08,0.11,0.08,0.08,0.13,0.1,0.1,0.16,0.1,0.09,0.08,0.08,0.13,0.09,0.09,0.15,0.14,0.1,0.08,0.06,0.11,0,3.43,-0.65,3600,1580,1591.67,10.69,5.26,5.47,12.24,6.45,12.24,14.96},0},
{{0,0.18,0.1,0.1,0.15,0.1,0.1,0.1,0.11,0.08,0.1,0.09,0.11,0.11,0.09,0.12,0.15,0.09,0.1,0.05,0.1,0.12,0.1,0.1,0.1,0.09,0.08,0.1,0.13,0.11,0,3.14,-0.31,1975,865,3975,10.38,5.1,5.89,12.07,6.14,12.07,14.76},0},
{{0,0.17,0.13,0.11,0.12,0.08,0.1,0.1,0.12,0.09,0.12,0.07,0.09,0.1,0.11,0.12,0.11,0.12,0.11,0.06,0.08,0.09,0.13,0.12,0.11,0.1,0.12,0.08,0.1,0.1,0,3.11,-0.29,2800,883.33,1100,10.48,5.36,5.52,12.06,6.73,12.06,14.86},0},
{{0,0.18,0.09,0.1,0.11,0.11,0.11,0.11,0.11,0.09,0.11,0.09,0.12,0.13,0.09,0.11,0.08,0.13,0.09,0.08,0.08,0.11,0.09,0.13,0.1,0.09,0.08,0.11,0.15,0.09,0,3.05,-0.3,2162.5,935,2350,10.17,5.46,5.61,11.83,6.7,11.83,14.7},0},
{{0,0.2,0.09,0.08,0.13,0.13,0.1,0.09,0.12,0.09,0.14,0.1,0.09,0.1,0.08,0.09,0.13,0.11,0.1,0.08,0.08,0.09,0.1,0.14,0.11,0.09,0.12,0.09,0.1,0.11,0,3.32,-0.39,1050,1316.67,2725,10.33,5.64,5.44,11.95,6.75,11.95,14.69},0},
{{0,0.19,0.12,0.1,0.11,0.12,0.08,0.12,0.09,0.1,0.09,0.12,0.09,0.11,0.11,0.09,0.13,0.1,0.1,0.08,0.08,0.12,0.12,0.12,0.1,0.08,0.1,0.1,0.13,0.07,0,3.4,-0.73,3900,1425,1575,10.57,5.37,5.65,12.22,6.48,12.22,14.98},0},
{{0,0.23,0.11,0.09,0.11,0.11,0.07,0.12,0.1,0.07,0.09,0.11,0.14,0.1,0.15,0.05,0.09,0.1,0.1,0.09,0.11,0.09,0.1,0.08,0.09,0.07,0.11,0.15,0.09,0.13,0,3.1,-0.03,1387.5,2262.5,2383.33,10.96,5.27,6.13,12.61,6.31,12.61,15.4},0},
{{0,0.2,0.12,0.1,0.09,0.1,0.1,0.09,0.13,0.09,0.1,0.17,0.1,0.06,0.11,0.08,0.06,0.12,0.13,0.1,0.12,0.12,0.1,0.1,0.07,0.09,0.1,0.08,0.15,0.1,0,3.54,-0.59,2475,970,2683.33,10.62,5.82,5.97,12.33,6.72,12.33,15.3},0},
{{0,0.19,0.12,0.08,0.13,0.12,0.08,0.1,0.09,0.12,0.1,0.12,0.1,0.12,0.11,0.08,0.1,0.09,0.09,0.11,0.1,0.13,0.09,0.09,0.1,0.09,0.08,0.12,0.12,0.11,0,3.24,-0.54,1800,790,2000,10.73,5.62,6.02,12.27,6.83,12.27,15.3},0},
{{0,0.21,0.1,0.12,0.11,0.09,0.09,0.12,0.09,0.09,0.11,0.1,0.09,0.11,0.13,0.08,0.09,0.08,0.13,0.1,0.12,0.07,0.11,0.09,0.1,0.1,0.12,0.1,0.1,0.12,0,3.58,-0.28,2000,800,766.67,10.75,5.4,5.87,12.38,6.3,12.38,15.23},0},
{{0,0.22,0.07,0.1,0.11,0.11,0.12,0.11,0.11,0.08,0.11,0.15,0.12,0.08,0.1,0.11,0.05,0.12,0.1,0.07,0.13,0.13,0.05,0.09,0.09,0.09,0.11,0.08,0.14,0.11,0,2.84,-0.47,1191.67,2483.33,1110,10.34,5.43,6.18,12.1,6.52,12.1,15.05},0},
{{0,0.2,0.06,0.11,0.13,0.13,0.08,0.11,0.1,0.11,0.12,0.07,0.12,0.12,0.11,0.11,0.08,0.08,0.11,0.1,0.09,0.12,0.06,0.09,0.12,0.12,0.1,0.12,0.09,0.11,0,3.21,-0.34,1750,1041.67,1710,10.31,5.54,5.38,11.91,6.86,11.91,14.81},0},
{{0,0.21,0.09,0.08,0.12,0.11,0.08,0.15,0.09,0.1,0.11,0.07,0.09,0.13,0.07,0.13,0.13,0.1,0.13,0.06,0.11,0.09,0.09,0.12,0.09,0.12,0.1,0.09,0.11,0.09,0,3.53,-0.64,1135.71,2025,3950,10.44,5.15,5.55,12.16,6.17,12.16,14.69},0},
{{0,0.2,0.1,0.11,0.07,0.13,0.1,0.11,0.09,0.1,0.11,0.05,0.11,0.18,0.1,0.08,0.11,0.11,0.1,0.07,0.09,0.09,0.1,0.08,0.08,0.17,0.1,0.13,0.1,0.08,0,3.21,-0.36,2800,1212.5,1580,10.51,5.1,5.17,12.17,6.2,12.17,14.54},0},
{{0,0.19,0.09,0.13,0.08,0.08,0.15,0.09,0.12,0.09,0.08,0.08,0.11,0.09,0.19,0.07,0.12,0.1,0.11,0.07,0.09,0.13,0.12,0.06,0.1,0.1,0.12,0.11,0.07,0.13,0,3.64,-0.38,766.67,2100,1975,10.14,4.97,5.68,11.9,5.97,11.9,14.48},0},
{{0,0.09,0.05,0.07,0.07,0.05,0.04,0.06,0.04,0.03,0.07,0.04,0.03,0.06,0.06,0.08,0.07,0.05,0.04,0.03,0.05,0.03,0.08,0.06,0.04,0.05,0.07,0.06,0.03,0.04,0,1.52,-0.39,825,762.5,1075,5.06,2.48,2.45,11.86,6.29,11.86,6.98},0},
{{0.11,0.1,0.11,0.1,0.09,0.06,0.13,0.11,0.08,0.12,0.09,0.09,0.13,0.07,0.09,0.13,0.1,0.13,0.09,0.1,0.11,0.11,0.11,0.08,0.05,0.13,0.11,0.08,0.11,0.12,0,10.29,-1.36,1285.71,590,2250,4.53,3.32,2.79,6.17,4.35,6.17,12.39},2},
{{0.11,0.09,0.11,0.12,0.1,0.13,0.05,0.12,0.07,0.12,0.12,0.1,0.1,0.1,0.05,0.15,0.1,0.09,0.1,0.11,0.1,0.09,0.09,0.08,0.1,0.11,0.12,0.14,0.11,0.08,0,10.07,-1.28,1333.33,630,1562.5,4.2,3.49,2.63,5.86,4.51,5.86,12.02},2},
{{0.12,0.08,0.08,0.12,0.13,0.1,0.08,0.09,0.11,0.11,0.11,0.11,0.07,0.11,0.09,0.1,0.09,0.12,0.1,0.09,0.12,0.09,0.08,0.09,0.09,0.12,0.11,0.13,0.06,0.14,0,10.21,-1.18,1314.29,596.88,1840,4.37,3.58,3.02,6.06,4.57,6.06,12.33},2},
{{0.1,0.07,0.08,0.13,0.14,0.11,0.1,0.08,0.1,0.11,0.14,0.07,0.11,0.11,0.05,0.12,0.12,0.08,0.14,0.06,0.1,0.11,0.1,0.09,0.08,0.15,0.12,0.09,0.08,0.1,0,10.05,-1.27,1278.57,745.83,3375,4.17,3.45,2.79,5.85,4.4,5.85,12.03},2},
{{0.1,0.12,0.11,0.1,0.09,0.09,0.11,0.08,0.12,0.09,0.11,0.1,0.09,0.1,0.09,0.12,0.11,0.09,0.11,0.11,0.12,0.1,0.07,0.13,0.06,0.11,0.13,0.11,0.1,0.09,0,10.17,-1.41,1316.67,692.31,1666.67,4.22,3.47,2.66,5.66,4.46,5.66,12.08},2},
{{0.1,0.11,0.1,0.08,0.1,0.1,0.1,0.13,0.09,0.11,0.09,0.11,0.09,0.08,0.11,0.11,0.11,0.09,0.12,0.1,0.09,0.11,0.09,0.11,0.09,0.08,0.16,0.09,0.14,0.07,0,10.29,-1.3,1937.5,753.85,3300,4.47,3.39,2.53,5.99,4.32,5.99,12.18},2},
{{0.11,0.08,0.14,0.09,0.11,0.07,0.12,0.12,0.07,0.11,0.12,0.08,0.09,0.12,0.09,0.11,0.11,0.11,0.09,0.09,0.11,0.09,0.1,0.13,0.12,0.07,0.11,0.11,0.1,0.09,0,10.08,-1.39,1508.33,621.43,3016.67,4.34,3.44,2.69,5.96,4.47,5.96,12.09},2},
{{0.11,0.1,0.08,0.16,0.1,0.07,0.11,0.11,0.12,0.06,0.1,0.09,0.12,0.11,0.12,0.06,0.09,0.13,0.1,0.08,0.13,0.12,0.08,0.09,0.11,0.09,0.1,0.09,0.11,0.12,0,10.13,-1.42,1525,653.57,3400,4.11,3.44,2.88,5.7,4.36,5.7,12.07},2},
{{0.1,0.1,0.08,0.13,0.11,0.08,0.13,0.07,0.12,0.1,0.1,0.1,0.09,0.1,0.12,0.1,0.11,0.09,0.13,0.05,0.09,0.15,0.1,0.1,0.12,0.07,0.1,0.1,0.08,0.11,0,10.12,-1.29,1712.5,950,2300,4.34,3.34,2.76,5.93,4.27,5.93,12.1},2},
{{0.1,0.09,0.1,0.1,0.14,0.12,0.07,0.1,0.1,0.1,0.09,0.11,0.11,0.13,0.1,0.1,0.1,0.1,0.08,0.1,0.12,0.15,0.07,0.1,0.11,0.12,0.05,0.11,0.08,0.12,0,10.12,-1.51,1140,711.54,2700,4.19,3.29,2.81,5.78,4.25,5.78,12.06},2},
{{0.08,0.13,0.09,0.07,0.11,0.12,0.11,0.11,0.11,0.07,0.08,0.12,0.12,0.1,0.09,0.11,0.11,0.1,0.12,0.06,0.12,0.11,0.12,0.09,0.08,0.12,0.1,0.09,0.08,0.12,0,10.11,-1.32,1156.25,770.83,2500,4.23,3.24,2.84,5.83,4.16,5.83,12.07},2},
{{0.09,0.08,0.13,0.11,0.1,0.11,0.09,0.08,0.13,0.09,0.09,0.13,0.1,0.13,0.08,0.06,0.1,0.13,0.1,0.09,0.12,0.11,0.11,0.1,0.08,0.08,0.12,0.1,0.12,0.09,0,10.21,-1.42,1158.33,620,1725,4.31,3.48,2.79,5.94,4.35,5.94,12.19},2},
{{0.14,0.09,0.12,0.06,0.1,0.1,0.13,0.06,0.1,0.12,0.1,0.1,0.1,0.11,0.1,0.12,0.1,0.09,0.07,0.12,0.14,0.07,0.11,0.1,0.1,0.09,0.08,0.14,0.11,0.09,0,10.22,-1.52,1975,620,3375,4.55,3.51,2.71,6.13,4.51,6.13,12.27},2},
{{0.11,0.12,0.11,0.11,0.09,0.07,0.08,0.11,0.11,0.11,0.09,0.13,0.11,0.07,0.13,0.08,0.07,0.11,0.13,0.1,0.13,0.13,0.08,0.09,0.12,0.09,0.07,0.1,0.11,0.1,0,10.25,-1.36,1333.33,508.33,2866.67,4.23,3.53,2.96,5.72,4.42,5.72,12.23},2},
{{0.1,0.09,0.13,0.12,0.1,0.1,0.09,0.1,0.1,0.09,0.13,0.09,0.07,0.12,0.12,0.1,0.09,0.1,0.1,0.08,0.11,0.11,0.14,0.09,0.13,0.06,0.09,0.05,0.12,0.12,0,10.02,-1.3,2025,675,2900,4.14,3.37,2.87,5.8,4.33,5.8,11.94},2},
{{0.1,0.12,0.11,0.09,0.1,0.1,0.11,0.12,0.08,0.09,0.09,0.12,0.09,0.09,0.1,0.1,0.08,0.13,0.11,0.09,0.09,0.15,0.1,0.1,0.09,0.13,0.04,0.1,0.1,0.13,0,10.28,-1.12,1135.71,587.5,1250,4.16,3.48,3.08,5.74,4.42,5.74,12.16},2},
{{0.11,0.1,0.09,0.09,0.11,0.12,0.07,0.11,0.13,0.1,0.09,0.1,0.11,0.13,0.08,0.11,0.09,0.08,0.12,0.1,0.13,0.11,0.09,0.11,0.1,0.12,0.08,0.09,0.1,0.11,0,10.24,-1.31,1366.67,623.33,1085.71,4.31,3.42,2.97,5.79,4.36,5.79,12.2},2},
{{0.11,0.09,0.11,0.1,0.12,0.12,0.05,0.08,0.12,0.11,0.13,0.1,0.07,0.12,0.09,0.12,0.11,0.07,0.09,0.11,0.14,0.11,0.08,0.11,0.13,0.08,0.07,0.08,0.1,0.12,0,10.04,-1.44,1100,555.88,1925,4.38,3.58,3.04,6.06,4.61,6.06,12.21},2},
{{0.1,0.11,0.08,0.09,0.12,0.13,0.08,0.09,0.11,0.11,0.1,0.08,0.12,0.13,0.07,0.16,0.07,0.06,0.12,0.1,0.11,0.08,0.09,0.07,0.12,0.1,0.07,0.16,0.15,0.08,0,10.19,-1.2,1425,606.67,3450,4.38,3.28,2.68,5.97,4.3,5.97,12.1},2},
{{0.1,0.11,0.13,0.1,0.11,0.12,0.05,0.09,0.11,0.11,0.12,0.08,0.1,0.12,0.08,0.11,0.09,0.14,0.08,0.08,0.09,0.13,0.11,0.09,0.13,0.07,0.09,0.1,0.1,0.11,0,10.09,-1.24,1110,885,1408.33,4.22,3.32,2.9,5.83,4.26,5.83,12.02},2},
{{0.11,0.12,0.08,0.12,0.12,0.1,0.07,0.11,0.1,0.12,0.09,0.1,0.14,0.09,0.09,0.1,0.11,0.09,0.1,0.12,0.11,0.14,0.08,0.12,0.07,0.11,0.1,0.1,0.11,0.1,0,10.25,-1.36,1316.67,667.86,2125,4.32,3.4,2.88,5.93,4.29,5.93,12.28},2},
{{0.09,0.14,0.11,0.08,0.12,0.07,0.08,0.12,0.14,0.08,0.1,0.11,0.1,0.09,0.11,0.09,0.12,0.07,0.12,0.1,0.09,0.12,0.09,0.11,0.1,0.11,0.1,0.08,0.08,0.14,0,10.15,-1.19,1610,600,1712.5,4.19,3.44,2.84,5.65,4.4,5.65,12.02},2},
{{0.13,0.12,0.08,0.12,0.08,0.09,0.09,0.09,0.11,0.1,0.12,0.09,0.11,0.08,0.07,0.1,0.1,0.11,0.1,0.1,0.09,0.12,0.1,0.13,0.07,0.12,0.09,0.1,0.11,0.1,0,10.18,-1.32,1780,667.86,1425,4.39,3.68,2.62,5.92,4.67,5.92,12.11},2},
{{0.13,0.12,0.09,0.1,0.09,0.1,0.11,0.05,0.12,0.12,0.13,0.08,0.1,0.12,0.09,0.07,0.11,0.11,0.11,0.08,0.11,0.11,0.11,0.09,0.11,0.1,0.08,0.06,0.15,0.1,0,10.11,-1.33,1271.43,593.33,3625,4.55,3.61,2.86,6.09,4.58,6.09,12.2},2},
{{0.12,0.08,0.1,0.13,0.07,0.08,0.12,0.12,0.1,0.1,0.12,0.1,0.09,0.1,0.11,0.06,0.13,0.11,0.13,0.05,0.09,0.07,0.15,0.1,0.09,0.11,0.13,0.09,0.08,0.11,0,10.09,-1.22,1508.33,800,1700,4.29,3.41,2.58,5.84,4.34,5.84,11.93},2},
{{0.1,0.09,0.11,0.11,0.11,0.11,0.13,0.1,0.1,0.07,0.08,0.11,0.11,0.08,0.1,0.13,0.12,0.14,0.07,0.07,0.08,0.07,0.14,0.14,0.09,0.1,0.12,0.09,0.07,0.13,0,10.02,-1.05,1900,915,3450,3.93,3.1,2.69,5.27,4.06,5.27,11.75},2},
{{0.08,0.09,0.1,0.1,0.09,0.14,0.13,0.12,0.08,0.08,0.08,0.12,0.08,0.12,0.14,0.1,0.08,0.13,0.07,0.09,0.07,0.1,0.15,0.1,0.11,0.11,0.06,0.12,0.11,0.09,0,10.14,-1.25,1150,560,4600,4.18,3.19,2.6,5.81,4.13,5.81,11.94},2},
{{0.08,0.1,0.11,0.09,0.1,0.11,0.13,0.09,0.12,0.1,0.07,0.12,0.09,0.13,0.12,0.11,0.08,0.1,0.1,0.09,0.06,0.12,0.09,0.11,0.08,0.12,0.13,0.1,0.12,0.08,0,10.19,-1.21,1370,825,1700,4.33,3.26,2.37,5.93,4.21,5.93,12.01},2},
{{0.06,0.12,0.09,0.07,0.09,0.11,0.17,0.1,0.11,0.09,0.11,0.1,0.1,0.11,0.11,0.09,0.09,0.12,0.06,0.12,0.09,0.08,0.08,0.09,0.15,0.13,0.09,0.09,0.1,0.12,0,9.99,-1.14,1307.14,678.57,1250,4.49,3.44,2.62,6.13,4.43,6.13,11.99},2},
{{0.1,0.09,0.1,0.1,0.08,0.11,0.15,0.09,0.07,0.13,0.11,0.09,0.09,0.09,0.14,0.13,0.08,0.11,0.09,0.09,0.07,0.07,0.11,0.1,0.1,0.12,0.1,0.13,0.12,0.1,0,10.14,-1.05,2300,758.33,3175,4.46,3.33,2.46,6.06,4.3,6.06,11.99},2},
{{0.1,0.11,0.09,0.08,0.07,0.1,0.14,0.12,0.11,0.11,0.12,0.08,0.12,0.08,0.1,0.12,0.12,0.1,0.08,0.1,0.09,0.07,0.13,0.09,0.09,0.14,0.15,0.08,0.08,0.1,0,10.07,-1.26,1500,634.62,3375,4.51,3.35,2.48,6.04,4.32,6.04,12.02},2},
{{0.07,0.1,0.12,0.11,0.1,0.09,0.14,0.12,0.1,0.07,0.09,0.14,0.11,0.09,0.08,0.12,0.13,0.08,0.12,0.08,0.04,0.07,0.08,0.11,0.11,0.11,0.18,0.15,0.12,0.05,0,10.02,-1.1,1860,845.45,783.33,4.17,3.28,2.07,5.85,4.2,5.85,11.7},2},
{{0.08,0.1,0.09,0.08,0.09,0.12,0.12,0.19,0.08,0.07,0.07,0.11,0.12,0.11,0.09,0.11,0.14,0.12,0.09,0.07,0.06,0.04,0.1,0.1,0.08,0.16,0.15,0.15,0.09,0.09,0,10.17,-0.94,1400,729.17,1725,4.22,2.94,2.23,5.71,3.84,5.71,11.83},2},
{{0.01,0.02,0.01,0.01,0.02,0.01,0.02,0.03,0,0.01,0.01,0.02,0.02,0,0.02,0.01,0.01,0.01,0.03,0.01,0.01,0.02,0.02,0.01,0,0.02,0.02,0.01,0.01,0.02,0,1.25,-0.14,175,300,216.67,0.5,1.1,0.37,5.63,10.01,5.63,1.45},2},
{{0,0,0.02,0.06,0.06,0.15,0.17,0.09,0.17,0.29,0.09,0.13,0.04,0.06,0.09,0.07,0.07,0.08,0.11,0.18,0.07,0.09,0.17,0.12,0.15,0.08,0.08,0.08,0.07,0.11,0,7.55,-0.64,1200,323.33,2225,6.83,7.82,5.43,7.99,8.81,7.99,14.3},0},
{{0,0.01,0.06,0.07,0.08,0.17,0.13,0.16,0.19,0.14,0.05,0.12,0.05,0.06,0.07,0.11,0.11,0.06,0.05,0.21,0.1,0.1,0.14,0.12,0.1,0.09,0.08,0.1,0.09,0.1,0,8.24,-0.86,2825,278.57,3000,6.46,7.49,5.75,7.58,8.53,7.58,14.44},0},
{{0,0.05,0.12,0.08,0.13,0.12,0.14,0.1,0.1,0.17,0.05,0.04,0.06,0.11,0.11,0.12,0.08,0.1,0.04,0.22,0.07,0.12,0.17,0.14,0.09,0.1,0.08,0.1,0.06,0.1,0,8.52,-0.95,3275,348.21,1625,8.2,6.95,5.32,9.63,7.88,9.63,15},0},
{{0,0.05,0.12,0.08,0.09,0.15,0.11,0.13,0.14,0.14,0.05,0.06,0.07,0.1,0.08,0.15,0.09,0.05,0.07,0.22,0.08,0.07,0.21,0.12,0.1,0.1,0.07,0.09,0.09,0.1,0,8.17,-0.79,4450,303.23,1483.33,7.98,7.13,5.35,9.41,8.04,9.41,14.8},0},
{{0,0.01,0.07,0.12,0.13,0.14,0.14,0.14,0.11,0.16,0.08,0.04,0.1,0.07,0.1,0.09,0.08,0.07,0.06,0.23,0.08,0.11,0.16,0.12,0.08,0.09,0.08,0.09,0.1,0.11,0,8.16,-0.61,1366.67,329.31,1650,7.22,7.58,5.6,8.4,8.55,8.4,14.76},0},
{{0,0.01,0.03,0.06,0.12,0.19,0.16,0.12,0.14,0.19,0.06,0.09,0.07,0.1,0.05,0.07,0.12,0.06,0.09,0.2,0.07,0.12,0.18,0.11,0.09,0.09,0.12,0.08,0.05,0.12,0,8.01,-0.82,2000,306.45,1025,6.35,7.37,5.56,7.4,8.43,7.4,14.21},0},
{{0.02,0.1,0.12,0.08,0.09,0.12,0.13,0.11,0.1,0.16,0.09,0.05,0.05,0.06,0.13,0.11,0.1,0.07,0.05,0.23,0.13,0.1,0.13,0.12,0.09,0.1,0.08,0.09,0.1,0.09,0,7.73,-1.16,1016.67,359.26,1612.5,8.69,7.41,5.81,10.3,8.6,10.3,15.66},0},
{{0.07,0.16,0.1,0.11,0.08,0.09,0.08,0.09,0.1,0.15,0.09,0.05,0.05,0.05,0.09,0.17,0.11,0.05,0.08,0.25,0.13,0.11,0.14,0.1,0.09,0.08,0.1,0.07,0.12,0.09,0,7.69,-1.15,2550,420.45,1637.5,10.61,6.84,6.25,12.2,8.02,12.2,16.86},0},
{{0.14,0.14,0.09,0.13,0.09,0.09,0.08,0.1,0.07,0.1,0.09,0.12,0.06,0.09,0.08,0.16,0.11,0.12,0.11,0.09,0.13,0.11,0.1,0.14,0.14,0.06,0.05,0.08,0.1,0.12,0,4.63,-1.03,2425,1083.33,4050,11.07,5.73,6.05,12.69,6.98,12.69,15.99},0},
{{0.14,0.14,0.11,0.07,0.1,0.1,0.11,0.06,0.1,0.08,0.1,0.12,0.1,0.11,0.13,0.12,0.06,0.13,0.14,0.01,0.13,0.09,0.06,0.1,0.08,0.11,0.11,0.12,0.12,0.11,0,3.55,-0.21,3225,1028.57,1620,10.93,5.28,6.02,12.65,6.45,12.65,15.44},0},
{{0.13,0.12,0.1,0.15,0.08,0.11,0.06,0.11,0.1,0.06,0.13,0.13,0.12,0.08,0.06,0.16,0.09,0.13,0.11,0.03,0.1,0.11,0.07,0.12,0.13,0.08,0.08,0.12,0.09,0.13,0,3.4,-0.2,2012.5,2800,1125,10.86,5.5,6,12.51,6.65,12.51,15.57},0},
{{0.13,0.11,0.12,0.12,0.09,0.1,0.09,0.07,0.11,0.09,0.1,0.12,0.11,0.13,0.1,0.09,0.12,0.12,0.13,0.01,0.09,0.12,0.04,0.11,0.11,0.17,0.08,0.1,0.08,0.11,0,3.31,-0.11,2000,696.15,2012.5,10.79,5.45,5.37,12.47,6.66,12.47,15.07},0},
{{0.12,0.16,0.09,0.11,0.08,0.11,0.09,0.07,0.11,0.07,0.1,0.08,0.14,0.14,0.12,0.08,0.14,0.09,0.1,0.04,0.1,0.08,0.12,0.1,0.07,0.09,0.12,0.13,0.13,0.09,0,3.62,-0.25,2900,816.67,1625,10.82,5.21,5.6,12.58,6.29,12.58,15.09},0},
{{0.14,0.12,0.11,0.09,0.13,0.06,0.11,0.1,0.08,0.08,0.09,0.12,0.11,0.12,0.13,0.09,0.12,0.15,0.09,0.02,0.1,0.11,0.08,0.07,0.16,0.09,0.11,0.09,0.11,0.1,0,3.53,-0.35,1412.5,1810,2000,10.82,5.27,5.51,12.6,6.43,12.6,15.18},0},
{{0.13,0.15,0.1,0.11,0.12,0.05,0.09,0.1,0.08,0.09,0.14,0.08,0.13,0.08,0.11,0.1,0.1,0.16,0.1,0.02,0.11,0.09,0.06,0.11,0.08,0.11,0.13,0.11,0.1,0.12,0,3.38,-0.06,1278.57,880,4875,11.18,5.66,5.99,12.84,6.97,12.84,15.83},0},
{{0.14,0.13,0.09,0.11,0.11,0.09,0.09,0.11,0.09,0.06,0.11,0.13,0.11,0.14,0.1,0.1,0.08,0.1,0.13,0.03,0.1,0.13,0.06,0.1,0.1,0.11,0.08,0.1,0.15,0.1,0,3.22,-0.33,1187.5,1081.25,3200,10.81,5.52,5.92,12.61,6.69,12.61,15.32},0},
{{0.14,0.1,0.12,0.1,0.11,0.08,0.09,0.08,0.11,0.09,0.11,0.09,0.14,0.09,0.13,0.11,0.1,0.1,0.12,0.03,0.07,0.1,0.09,0.08,0.13,0.1,0.15,0.12,0.08,0.1,0,3.47,0.23,2775,2050,2325,10.62,5.53,5.28,12.32,6.82,12.32,14.96},0},
{{0.12,0.12,0.12,0.11,0.1,0.12,0.09,0.08,0.1,0.06,0.13,0.11,0.11,0.11,0.11,0.09,0.09,0.15,0.12,0.02,0.1,0.1,0.12,0.1,0.07,0.07,0.12,0.14,0.12,0.08,0,3.26,-0.27,1583.33,1357.14,1675,10.59,5.61,5.64,12.38,6.87,12.38,15.15},0},
{{0.13,0.12,0.12,0.12,0.08,0.1,0.1,0.1,0.07,0.08,0.1,0.14,0.11,0.1,0.13,0.09,0.1,0.12,0.11,0.02,0.13,0.08,0.09,0.1,0.09,0.12,0.1,0.1,0.14,0.08,0,3.22,-0.53,1610,2400,3200,10.9,5.42,5.82,12.71,6.65,12.71,15.5},0},
{{0.13,0.13,0.1,0.1,0.14,0.08,0.08,0.07,0.12,0.08,0.12,0.1,0.13,0.08,0.12,0.12,0.13,0.1,0.11,0.03,0.11,0.1,0.08,0.07,0.09,0.13,0.15,0.11,0.08,0.1,0,3.41,-0.27,3225,3183.33,1610,10.75,5.53,5.73,12.36,6.92,12.36,15.38},0},
{{0.14,0.11,0.1,0.09,0.14,0.09,0.09,0.12,0.07,0.07,0.12,0.11,0.11,0.09,0.13,0.13,0.14,0.1,0.07,0.02,0.09,0.15,0.06,0.11,0.1,0.13,0.08,0.09,0.11,0.11,0,3.05,-0.37,3183.33,1575,2400,10.61,4.98,5.73,12.42,6.25,12.42,14.92},0},
{{0.13,0.08,0.13,0.1,0.13,0.08,0.08,0.11,0.11,0.08,0.14,0.11,0.1,0.08,0.11,0.1,0.11,0.11,0.14,0.01,0.12,0.11,0.09,0.07,0.09,0.11,0.09,0.1,0.13,0.11,0,3.19,-0.16,3575,1583.33,2162.5,10.39,5.79,6.2,12.07,7.12,12.07,15.34},0},
{{0.12,0.12,0.12,0.1,0.12,0.1,0.09,0.08,0.11,0.06,0.12,0.1,0.11,0.15,0.09,0.11,0.13,0.06,0.14,0.01,0.11,0.08,0.08,0.09,0.09,0.12,0.15,0.08,0.1,0.11,0,3.19,-0.06,1633.33,3225,1625,10.56,5.36,5.68,12.25,6.69,12.25,15.07},0},
{{0.12,0.14,0.09,0.12,0.06,0.12,0.11,0.08,0.11,0.08,0.13,0.1,0.13,0.14,0.09,0.08,0.1,0.15,0.1,0.02,0.08,0.11,0.11,0.09,0.11,0.08,0.1,0.13,0.12,0.1,0,3.13,-0.19,1583.33,1630,3150,10.43,5.72,5.57,12.3,6.97,12.3,15},0},
{{0.13,0.13,0.15,0.1,0.08,0.09,0.09,0.1,0.09,0.06,0.12,0.12,0.14,0.14,0.09,0.07,0.07,0.12,0.12,0.04,0.1,0.13,0.04,0.1,0.12,0.08,0.07,0.13,0.14,0.1,0,3.22,-0.04,1225,1278.57,1412.5,10.83,5.75,5.89,12.53,6.95,12.53,15.45},0},
{{0.12,0.13,0.1,0.13,0.09,0.06,0.14,0.12,0.07,0.07,0.1,0.12,0.14,0.12,0.1,0.06,0.08,0.14,0.13,0.03,0.1,0.09,0.09,0.09,0.08,0.16,0.09,0.1,0.14,0.09,0,3.58,-0.11,888.89,4100,3600,10.42,5.85,5.52,12.33,6.95,12.33,15.19},0},
{{0.14,0.09,0.13,0.1,0.11,0.11,0.06,0.13,0.07,0.08,0.09,0.15,0.12,0.12,0.11,0.06,0.12,0.12,0.1,0.04,0.11,0.11,0.07,0.09,0.13,0.06,0.12,0.12,0.14,0.07,0,3.29,-0.3,1316.67,1430,4375,10.63,5.6,5.66,12.32,6.81,12.32,15.09},0},
{{0.13,0.12,0.08,0.14,0.13,0.06,0.09,0.13,0.08,0.07,0.14,0.06,0.14,0.1,0.12,0.1,0.11,0.08,0.14,0.03,0.12,0.05,0.09,0.06,0.11,0.13,0.14,0.14,0.06,0.11,0,3.26,-0.03,1883.33,880,2950,10.55,5.77,5.55,12.24,7.16,12.24,15.27},0},
{{0.15,0.13,0.1,0.14,0.09,0.07,0.09,0.1,0.09,0.07,0.11,0.13,0.12,0.11,0.11,0.12,0.07,0.12,0.11,0.03,0.1,0.11,0.08,0.09,0.12,0.12,0.11,0.12,0.07,0.12,0,3.21,-0.37,800,933.33,1550,10.95,5.37,5.61,12.66,6.58,12.66,15.26},0},
{{0.11,0.14,0.12,0.11,0.12,0.06,0.07,0.12,0.07,0.08,0.12,0.16,0.1,0.08,0.13,0.09,0.1,0.09,0.1,0.06,0.08,0.11,0.07,0.12,0.1,0.12,0.13,0.08,0.1,0.11,0,3.13,-0.13,2483.33,1320,1650,10.81,5.55,5.44,12.56,6.87,12.56,15.14},0},
{{0.08,0.13,0.1,0.08,0.1,0.09,0.08,0.11,0.14,0.11,0.11,0.1,0.08,0.11,0.12,0.1,0.09,0.1,0.13,0.1,0.06,0.14,0.08,0.12,0.08,0.09,0.08,0.12,0.12,0.13,0,9.98,-1.82,1383.33,875,4150,3.74,3.53,2.3,4.61,4.5,4.61,11.73},5},
{{0.12,0.08,0.1,0.12,0.07,0.11,0.11,0.09,0.11,0.11,0.11,0.1,0.11,0.1,0.09,0.11,0.11,0.07,0.12,0.11,0.11,0.09,0.11,0.13,0.1,0.08,0.12,0.1,0.07,0.11,0,10.07,-2.23,2550,888.89,2400,3.82,3.45,2.4,4.97,4.41,4.97,11.95},5},
{{0.09,0.09,0.11,0.1,0.13,0.11,0.11,0.11,0.08,0.09,0.1,0.11,0.12,0.07,0.11,0.11,0.12,0.08,0.09,0.1,0.1,0.13,0.1,0.08,0.15,0.12,0.09,0.1,0.06,0.09,0,9.97,-2.29,725,720.83,1975,3.6,3.4,2.28,4.94,4.41,4.94,11.84},5},
{{0.08,0.09,0.11,0.11,0.11,0.11,0.11,0.09,0.09,0.12,0.09,0.12,0.1,0.12,0.09,0.1,0.08,0.15,0.08,0.09,0.12,0.07,0.08,0.13,0.1,0.14,0.12,0.11,0.09,0.07,0,9.84,-2.29,2900,1005.56,2550,3.61,3.37,2.27,4.86,4.35,4.86,11.73},5},
{{0.1,0.07,0.05,0.04,0.05,0.04,0.06,0.07,0.05,0.03,0.04,0.05,0.05,0.06,0.07,0.05,0.07,0.07,0.05,0.03,0.07,0.03,0.05,0.02,0.04,0.02,0.06,0.05,0.13,0.07,0,5.26,-0.7,1125,1116.67,475,1.94,2.71,1.49,4.67,6.22,4.67,6.12},5},
{{0.06,0.09,0.1,0.11,0.1,0.11,0.15,0.14,0.11,0.04,0.1,0.14,0.08,0.09,0.1,0.06,0.11,0.13,0.11,0.11,0.09,0.06,0.09,0.1,0.12,0.13,0.12,0.14,0.1,0.08,0,10.3,-1.17,3250,646.43,1000,2.8,3.28,1.54,3.54,4.03,3.54,11.17},1},
{{0.12,0.13,0.07,0.06,0.11,0.1,0.08,0.14,0.11,0.09,0.1,0.12,0.12,0.11,0.09,0.09,0.09,0.09,0.11,0.1,0.1,0.1,0.09,0.13,0.12,0.08,0.08,0.11,0.11,0.09,0,10.17,-1.32,3025,763.64,2875,3.42,3.3,1.86,4.14,4.11,4.14,11.37},1},
{{0.1,0.1,0.11,0.09,0.12,0.11,0.07,0.08,0.12,0.12,0.11,0.06,0.12,0.1,0.09,0.11,0.14,0.1,0.09,0.11,0.14,0.1,0.13,0.06,0.12,0.09,0.06,0.09,0.1,0.14,0,10.31,-1.41,3200,662.5,2166.67,3.28,3.05,2.02,4.18,3.93,4.18,11.56},1},
{{0.1,0.08,0.1,0.13,0.09,0.07,0.11,0.11,0.11,0.13,0.11,0.11,0.05,0.09,0.13,0.12,0.1,0.12,0.1,0.09,0.09,0.12,0.12,0.11,0.08,0.11,0.1,0.1,0.12,0.08,0,10.15,-1.36,1625,726.92,3225,3.25,3.14,1.7,4.02,4.1,4.02,11.3},1},
{{0.1,0.09,0.1,0.11,0.07,0.11,0.05,0.06,0.05,0.1,0.07,0.07,0.1,0.09,0.12,0.08,0.07,0.07,0.08,0.08,0.07,0.09,0.08,0.07,0.07,0.1,0.12,0.07,0.07,0.11,0,8.34,-0.85,2150,737.5,1183.33,2.56,2.48,1.59,4.07,4.23,4.07,9.24},1},
{{0.1,0.1,0.13,0.09,0.07,0.09,0.12,0.09,0.13,0.11,0.12,0.09,0.06,0.08,0.11,0.08,0.12,0.09,0.15,0.1,0.12,0.12,0.09,0.13,0.07,0.07,0.06,0.1,0.12,0.14,0,10.42,-2.04,2866.67,1740,625,3.75,3.8,2.9,4.64,4.66,4.64,12.29},5},
{{0.11,0.11,0.08,0.13,0.08,0.1,0.09,0.11,0.1,0.09,0.1,0.08,0.11,0.1,0.09,0.11,0.12,0.1,0.11,0.1,0.09,0.08,0.12,0.08,0.11,0.13,0.12,0.09,0.11,0.1,0,10.28,-2.12,1800,945,1716.67,3.69,3.43,2.24,4.7,4.26,4.7,11.96},5},
{{0.09,0.1,0.1,0.07,0.14,0.09,0.09,0.11,0.1,0.12,0.08,0.11,0.13,0.11,0.1,0.1,0.1,0.1,0.05,0.12,0.1,0.12,0.09,0.1,0.12,0.12,0.1,0.12,0.08,0.06,0,10.1,-2.44,4425,800,2150,3.89,3.51,2.23,5.06,4.39,5.06,12.01},5},
{{0.1,0.09,0.08,0.12,0.11,0.13,0.09,0.11,0.09,0.09,0.1,0.1,0.1,0.11,0.08,0.12,0.09,0.11,0.1,0.08,0.1,0.09,0.11,0.09,0.13,0.1,0.12,0.12,0.08,0.08,0,10.16,-2.41,2216.67,1566.67,4550,3.75,3.46,2.31,5,4.29,5,11.97},5},
{{0.02,0.01,0.04,0.02,0.02,0.01,0.02,0.01,0,0.01,0.02,0.03,0.03,0.01,0.02,0.01,0.01,0.02,0.01,0.01,0.01,0,0.02,0.01,0.01,0.01,0,0.02,0.03,0.05,0,1.08,0.01,250,300,175,0.39,0.95,0.42,3.98,8.06,3.98,1.33},5},
{{0.11,0.07,0.09,0.12,0.08,0.11,0.1,0.1,0.1,0.14,0.1,0.09,0.08,0.12,0.11,0.11,0.09,0.11,0.12,0.1,0.08,0.11,0.1,0.13,0.1,0.11,0.1,0.09,0.08,0.1,0,10.51,-0.79,3025,850,325,3.52,2.9,1.87,4.41,3.68,4.41,11.68},1},
{{0.1,0.09,0.12,0.12,0.09,0.1,0.13,0.11,0.08,0.09,0.08,0.1,0.11,0.09,0.13,0.09,0.13,0.09,0.11,0.11,0.07,0.11,0.13,0.06,0.13,0.1,0.16,0.07,0.1,0.09,0,10.38,-0.94,2100,810,1350,3.33,2.92,1.59,4.07,3.74,4.07,11.43},1},
{{0.11,0.09,0.1,0.11,0.12,0.1,0.08,0.08,0.13,0.1,0.11,0.14,0.12,0.08,0.08,0.07,0.1,0.12,0.09,0.11,0.14,0.09,0.11,0.14,0.05,0.11,0.09,0.09,0.11,0.09,0,10.12,-1.06,2725,850,1462.5,3.36,3.35,1.95,4.1,4.29,4.1,11.36},1},
{{0.11,0.12,0.07,0.09,0.12,0.09,0.11,0.12,0.11,0.1,0.11,0.09,0.11,0.1,0.09,0.1,0.11,0.1,0.1,0.1,0.14,0.07,0.1,0.09,0.11,0.1,0.08,0.11,0.12,0.1,0,10.34,-1.02,950,657.69,2650,3.4,3.22,2.03,4.2,4.2,4.2,11.6},1},
{{0.05,0.1,0.08,0.05,0.07,0.09,0.06,0.06,0.06,0.05,0.07,0.04,0.08,0.1,0.06,0.1,0.04,0.09,0.06,0.04,0.05,0.05,0.06,0.07,0.06,0.07,0.06,0.09,0.07,0.1,0,6.6,-0.23,1200,500,1412.5,2.14,2.6,1.35,4.08,4.91,4.08,7.33},1},
{{0.11,0.11,0.08,0.12,0.1,0.14,0.1,0.09,0.09,0.1,0.1,0.12,0.09,0.05,0.09,0.11,0.12,0.1,0.13,0.12,0.13,0.1,0.12,0.14,0.08,0.07,0.06,0.11,0.14,0.06,0,7.59,-1.84,2475,1278.57,2600,7.03,4.02,2.12,7.94,5.17,7.94,11.81},5},
{{0.09,0.12,0.1,0.09,0.12,0.1,0.09,0.12,0.09,0.11,0.1,0.1,0.11,0.13,0.09,0.08,0.11,0.1,0.1,0.1,0.1,0.13,0.08,0.08,0.12,0.12,0.11,0.09,0.09,0.1,0,7.19,-1.59,1375,1316.67,1016.67,7.32,3.96,2.01,8.38,5.05,8.38,11.73},5},
{{0.09,0.09,0.1,0.08,0.12,0.08,0.14,0.1,0.12,0.1,0.1,0.1,0.11,0.11,0.13,0.1,0.08,0.11,0.07,0.11,0.08,0.1,0.12,0.14,0.1,0.13,0.08,0.09,0.07,0.11,0,7.21,-1.63,2683.33,1266.67,875,7.56,3.83,2.05,8.53,5.07,8.53,11.97},5},
{{0.11,0.06,0.13,0.1,0.06,0.1,0.11,0.11,0.12,0.13,0.12,0.12,0.1,0.12,0.09,0.11,0.08,0.07,0.11,0.1,0.11,0.1,0.1,0.07,0.1,0.11,0.14,0.1,0.09,0.11,0,6.96,-1.52,1400,1383.33,2500,7.75,4.12,2.07,8.81,5.32,8.81,11.91},5},
{{0.05,0.08,0.06,0.06,0.06,0.04,0.03,0.04,0.04,0.02,0.04,0.02,0.03,0.04,0.08,0.05,0.07,0.08,0.06,0.02,0.03,0.02,0.04,0.03,0.04,0.03,0.06,0.07,0.08,0.07,0,3.52,-0.17,516.67,600,1250,2.92,2.24,1.07,7.34,5.68,7.34,5.15},5},
{{0.08,0.12,0.1,0.11,0.08,0.1,0.11,0.11,0.09,0.12,0.11,0.09,0.11,0.09,0.11,0.1,0.1,0.08,0.1,0.12,0.06,0.09,0.12,0.1,0.11,0.09,0.1,0.09,0.16,0.11,0,10.32,-0.61,2500,565.63,1775,3.42,3.37,1.87,4.3,4.19,4.3,11.44},1},
{{0.08,0.1,0.1,0.15,0.12,0.09,0.1,0.11,0.09,0.07,0.09,0.12,0.1,0.1,0.1,0.08,0.1,0.1,0.12,0.11,0.13,0.12,0.09,0.08,0.08,0.11,0.14,0.05,0.1,0.11,0,10.34,-0.88,3850,579.17,3250,2.87,3.23,2.02,3.67,4,3.67,11.34},1},
{{0.11,0.1,0.11,0.08,0.08,0.11,0.1,0.11,0.11,0.11,0.11,0.09,0.08,0.14,0.1,0.11,0.1,0.08,0.13,0.09,0.08,0.06,0.12,0.12,0.15,0.09,0.1,0.13,0.08,0.09,0,10.33,-0.87,4100,672.73,3166.67,3.4,3.24,1.68,4.24,4.08,4.24,11.47},1},
{{0.11,0.09,0.08,0.12,0.11,0.09,0.11,0.09,0.1,0.12,0.11,0.11,0.1,0.09,0.1,0.1,0.12,0.09,0.09,0.11,0.12,0.12,0.09,0.1,0.1,0.1,0.08,0.11,0.1,0.1,0,10.27,-0.97,2850,736.36,3175,3.28,3.32,2.05,4.07,4.16,4.07,11.49},1},
{{0.09,0.09,0.07,0.05,0.09,0.1,0.07,0.08,0.09,0.07,0.07,0.06,0.11,0.06,0.08,0.08,0.08,0.12,0.07,0.06,0.09,0.09,0.07,0.07,0.07,0.07,0.08,0.09,0.08,0.08,0,8.04,-0.74,1625,741.67,625,2.58,2.63,1.6,4.12,4.39,4.12,8.96},1},
{{0.03,0.07,0.07,0.07,0.07,0.12,0.12,0.14,0.17,0.14,0.13,0.11,0.08,0.12,0.1,0.09,0.11,0.1,0.11,0.08,0.08,0.12,0.09,0.1,0.11,0.12,0.12,0.11,0.1,0.07,0,9.5,-2,1316.67,935.71,1000,4.07,3.53,2.13,5.14,4.61,5.14,11.63},5},
{{0.11,0.11,0.11,0.12,0.1,0.11,0.08,0.1,0.09,0.09,0.08,0.1,0.09,0.06,0.12,0.12,0.12,0.11,0.11,0.09,0.1,0.11,0.13,0.09,0.09,0.09,0.09,0.13,0.07,0.13,0,10.16,-1.8,3750,1300,2675,3.71,3.37,2.41,4.81,4.4,4.81,11.88},5},
{{0.14,0.11,0.11,0.12,0.09,0.08,0.09,0.07,0.11,0.09,0.1,0.12,0.1,0.11,0.08,0.1,0.1,0.1,0.09,0.1,0.11,0.13,0.09,0.08,0.08,0.12,0.11,0.09,0.11,0.1,0,10.08,-1.94,2200,905,2783.33,4.09,3.55,2.58,5.27,4.49,5.27,12.04},5},
{{0.1,0.11,0.12,0.13,0.1,0.09,0.1,0.1,0.06,0.1,0.09,0.09,0.13,0.1,0.1,0.06,0.08,0.11,0.11,0.13,0.13,0.07,0.09,0.13,0.1,0.13,0.11,0.08,0.09,0.08,0,10.15,-2,2850,994.44,450,4.01,3.72,2.45,5.37,4.68,5.37,12.17},5},
{{0.09,0.07,0.04,0.04,0.09,0.08,0.07,0.06,0.03,0.05,0.06,0.05,0.07,0.07,0.07,0.09,0.07,0.04,0.04,0.04,0.05,0.04,0.05,0.05,0.05,0.07,0.04,0.06,0.1,0.09,0,5.56,-0.78,1625,1133.33,1675,2.21,2.72,1.5,5,5.65,5,6.67},5},
{{0.07,0.08,0.1,0.1,0.09,0.11,0.11,0.14,0.1,0.12,0.09,0.09,0.12,0.11,0.09,0.11,0.11,0.1,0.14,0.08,0.11,0.11,0.08,0.11,0.12,0.05,0.08,0.11,0.11,0.14,0,10.3,-0.78,1625,790,375,3.43,3.13,2.2,4.18,3.93,4.18,11.51},1},
{{0.11,0.08,0.09,0.1,0.11,0.11,0.11,0.1,0.1,0.1,0.09,0.1,0.09,0.13,0.11,0.11,0.1,0.09,0.09,0.12,0.08,0.08,0.1,0.14,0.1,0.13,0.11,0.11,0.1,0.08,0,10.37,-0.77,2800,695.83,1450,3.65,3.19,1.77,4.47,4.01,4.47,11.57},1},
{{0.11,0.13,0.09,0.1,0.11,0.11,0.07,0.11,0.09,0.1,0.09,0.11,0.1,0.11,0.11,0.09,0.11,0.1,0.09,0.11,0.11,0.13,0.09,0.08,0.1,0.07,0.11,0.11,0.09,0.12,0,10.42,-0.95,3400,653.57,3300,3.74,3.34,2.42,4.55,4.22,4.55,11.85},1},
{{0.12,0.12,0.11,0.1,0.1,0.08,0.11,0.07,0.12,0.1,0.15,0.1,0.09,0.08,0.08,0.11,0.09,0.11,0.1,0.1,0.12,0.11,0.11,0.08,0.1,0.07,0.15,0.1,0.11,0.07,0,10.05,-0.99,1500,685.71,950,3.77,3.53,2.07,4.54,4.44,4.54,11.49},1},
{{0.06,0.06,0.06,0.08,0.04,0.07,0.06,0.04,0.06,0.05,0.05,0.07,0.07,0.05,0.07,0.04,0.07,0.07,0.05,0.06,0.05,0.04,0.08,0.07,0.05,0.1,0.05,0.05,0.06,0.06,0,5.92,-0.54,1725,685.71,2350,2.12,2.67,1.11,4.56,5.89,4.56,6.62},1},
{{0.01,0.02,0.03,0,0.06,0,0,0.07,0.04,0,0.02,0.03,0,0,0,0.09,0,0,0.1,0,0.03,0,0.04,0,0,0.08,0,0,0.08,0,0,0.62,1.73,240,350,213.64,2.02,0.45,1.26,7.5,1.66,7.5,2.73},3},
{{0.82,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.4,0.6,0,0,0,0,0,0,0,0,0.12,0.83,0,-1.96,4.59,251.28,350,226.25,7.72,0.03,0.04,7.72,0.1,7.72,9.19},3},
{{0.53,0.47,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.21,0.79,0,0,0,0,0,0,0,0,0.14,0.86,0,-1.95,4.58,281.82,350,253.95,7.76,0.02,0.03,7.76,0.04,7.76,9.22},3},
{{0.15,0.44,0.19,0,0,0.07,0,0.06,0,0.07,0.25,0,0.17,0,0,0,0.11,0.04,0.24,0.15,0.44,0.17,0.04,0.03,0,0.03,0,0.01,0.08,0.19,0,-2.3,4.11,352.38,350,316.67,7.99,0.21,0.27,8,0.27,8,9.29},3},
{{0,0.05,0.36,0,0,0.2,0,0.25,0,0.15,0.01,0,0.13,0,0,0,0.26,0.36,0.24,0,0.85,0.15,0,0,0,0,0,0,0,0,0,-2.35,3.92,298.48,350,251.47,8.16,0.03,0.04,8.16,0.06,8.16,9.35},3},
{{0,0.04,0.36,0,0,0.37,0,0.16,0,0.08,0.05,0,0.1,0,0,0,0.34,0.25,0.26,0,0.15,0.61,0.16,0.07,0,0.02,0,0.01,0,0,0,-2.35,4.01,324.14,350,300,8.15,0.05,0.04,8.15,0.07,8.15,9.38},3},
{{0,0,0.19,0,0,0.49,0,0.29,0,0.04,0.02,0,0.19,0,0,0,0.48,0.3,0.02,0,0.01,0.36,0.35,0.27,0,0.03,0,0.01,0,0,0,-2.37,4.06,236.25,350,286.76,8.17,0.02,0.03,8.17,0.03,8.17,9.42},3},
{{0,0,0.1,0,0,0.45,0,0.39,0,0.08,0,0,0.14,0,0,0,0.65,0.21,0.01,0,0,0.05,0.35,0.47,0,0.13,0,0.01,0,0,0,-2.37,4.09,289.39,350,308.06,8.18,0.01,0.03,8.18,0.02,8.18,9.44},3},
{{0,0.07,0.08,0,0,0.12,0,0.37,0,0.36,0.15,0,0.08,0,0,0,0.37,0.34,0.08,0,0,0.1,0.3,0.37,0,0.1,0,0.07,0.08,0,0,-2.4,4.1,277.27,350,383.33,8.19,0.08,0.04,8.19,0.13,8.19,9.47},3},
{{0,0.05,0.22,0,0,0.44,0,0.23,0,0.07,0.13,0,0.35,0,0,0,0.43,0.09,0.02,0,0,0,0,0.05,0,0.27,0,0.47,0.22,0,0,-2.41,4.17,311.67,350,295.45,8.16,0.05,0.02,8.16,0.09,8.16,9.47},3},
{{0,0,0.11,0,0,0.28,0,0.36,0,0.26,0.01,0,0.22,0,0,0,0.6,0.17,0.01,0,0,0,0.03,0.14,0,0.35,0,0.35,0.14,0,0,-2.37,4.16,351.85,350,284.85,8.19,0.02,0.03,8.2,0.03,8.2,9.49},3},
{{0,0,0.01,0,0,0.08,0,0.3,0,0.62,0.01,0,0.22,0,0,0,0.58,0.2,0,0,0,0,0.03,0.19,0,0.43,0,0.3,0.07,0,0,-2.37,4.15,221.59,350,236.25,8.23,0.02,0.03,8.23,0.03,8.23,9.52},3},
{{0,0,0.03,0,0,0.42,0,0.47,0,0.09,0.05,0,0.49,0,0,0,0.45,0.03,0,0,0,0,0,0,0,0.18,0,0.43,0.39,0,0,-2.39,4.18,304.69,350,250,8.18,0.02,0.02,8.19,0.03,8.19,9.5},3},
{{0,0,0,0,0,0.1,0,0.23,0,0.68,0.03,0,0.25,0,0,0,0.6,0.13,0,0,0,0,0,0.05,0,0.23,0,0.46,0.27,0,0,-2.38,4.18,282.35,350,328.33,8.24,0.02,0.02,8.24,0.03,8.24,9.54},3},
{{0,0.01,0.04,0,0,0.32,0,0.43,0,0.22,0.06,0,0.57,0,0,0,0.37,0.01,0,0,0,0,0,0,0,0.07,0,0.31,0.63,0,0,-2.4,4.2,313.33,350,285.29,8.19,0.02,0.02,8.19,0.03,8.19,9.51},3},
{{0,0.01,0.01,0,0,0.06,0,0.22,0,0.71,0.08,0,0.33,0,0,0,0.34,0.16,0.11,0,0,0,0,0.04,0,0.23,0,0.41,0.33,0,0,-2.38,4.18,250,350,278.57,8.24,0.03,0.03,8.25,0.05,8.25,9.54},3},
{{0,0.01,0.01,0,0,0,0,0.03,0,0.26,0.03,0,0,0,0,0,0.06,0.16,0.06,0,0.01,0.01,0,0.02,0,0.04,0,0.11,0.12,0,0,-0.7,1.23,342.86,350,211.54,2.44,0.49,0.87,8.28,1.67,8.28,2.82},3},
{{0.31,0.19,0.07,0,0.07,0.05,0.05,0.07,0.07,0.14,0.14,0.13,0,0,0,0.17,0,0,0.29,0.28,0.43,0.19,0.01,0.01,0.03,0.04,0.03,0.05,0.06,0.18,0,9.79,0.55,342.86,336.21,416.67,1.53,0.06,0.28,1.57,0.12,1.57,9.93},4},
{{0.01,0.06,0.05,0,0.07,0.03,0.09,0.09,0.1,0.49,0.22,0.17,0,0,0,0.21,0,0,0.2,0.22,0.01,0.25,0.06,0.04,0.04,0.04,0.02,0.03,0.04,0.49,0,9.77,0.9,342.86,224.36,962.5,1.22,0.06,0.31,1.24,0.09,1.24,9.9},4},
{{0,0.05,0.08,0,0.17,0.15,0.24,0.18,0.1,0.05,0.04,0.11,0,0,0,0.36,0,0,0.37,0.13,0,0.02,0.09,0.1,0.09,0.2,0.17,0.2,0.13,0.02,0,9.79,0.74,342.86,219.77,655.56,1.4,0.04,0.09,1.41,0.05,1.41,9.92},4},
{{0.06,0.08,0.04,0,0.07,0.13,0.25,0.26,0.11,0.02,0.01,0.11,0,0,0,0.38,0,0,0.33,0.17,0.09,0.07,0.01,0.03,0.04,0.19,0.15,0.25,0.15,0.05,0,9.79,0.72,342.86,243.59,365.38,1.42,0.03,0.13,1.43,0.05,1.43,9.92},4},
{{0.03,0.07,0.12,0,0.11,0.1,0.24,0.16,0.1,0.08,0.05,0.08,0,0,0,0.36,0,0,0.34,0.19,0.01,0.1,0.12,0.1,0.15,0.21,0.06,0.13,0.09,0.06,0,9.79,0.71,342.86,222.09,362.5,1.4,0.04,0.11,1.41,0.05,1.41,9.92},4},
{{0.02,0.14,0.2,0,0.28,0.23,0.11,0.02,0.02,0.01,0.03,0.12,0,0,0,0.42,0,0,0.35,0.08,0.02,0.08,0.04,0.11,0.19,0.38,0.13,0.06,0.02,0,0,9.78,0.68,342.86,255.88,2066.67,1.49,0.03,0.07,1.5,0.05,1.5,9.92},4},
{{0.16,0.19,0.17,0,0.14,0.09,0.06,0.07,0.06,0.08,0.03,0.08,0,0,0,0.41,0,0,0.31,0.17,0.1,0.16,0.09,0.15,0.12,0.14,0.03,0.12,0.07,0.06,0,9.79,0.65,342.86,230.95,433.33,1.49,0.04,0.14,1.51,0.05,1.51,9.93},4},
{{0.09,0.16,0.07,0,0.11,0.04,0.21,0.13,0.16,0.05,0.08,0.11,0,0,0,0.3,0,0,0.36,0.15,0.01,0.12,0.07,0.1,0.12,0.16,0.07,0.12,0.12,0.11,0,9.79,0.73,342.86,273.53,1900,1.43,0.05,0.14,1.44,0.07,1.44,9.92},4},
{{0.04,0.04,0.01,0,0.02,0.04,0.04,0.06,0.03,0.05,0.08,0.01,0,0,0,0.08,0,0,0.05,0.1,0.01,0.05,0.01,0.02,0.02,0.04,0.03,0.04,0.02,0.09,0,3.03,0.24,342.86,193.33,700,0.43,2.09,0.17,1.42,6.75,1.42,3.07},4},
{{0.05,0,0.16,0,0.21,0,0.36,0,0.18,0.06,0,0,0.01,0,0.1,0,0,0.39,0.37,0.14,0.05,0.23,0,0.46,0,0,0.23,0,0,0.05,0,2.51,6.47,244.74,450,300,6.42,0.03,0.03,6.42,0.19,6.42,9.46},3},
{{0.1,0,0.2,0,0.25,0,0.26,0,0.16,0.03,0,0,0.01,0,0.14,0,0,0.51,0.33,0.03,0.02,0.11,0,0.37,0,0,0.37,0,0,0.14,0,2.5,6.49,284.85,331.48,248.61,6.41,0.02,0.03,6.41,0.04,6.41,9.46},3},
{{0.11,0,0.36,0,0.27,0,0.11,0,0.08,0.09,0,0,0.03,0,0.35,0,0,0.38,0.16,0.09,0.04,0.07,0,0.12,0,0,0.27,0,0,0.5,0,2.49,6.52,293.55,385.42,317.74,6.4,0.03,0.04,6.4,0.05,6.4,9.47},3},
{{0.15,0,0.38,0,0.33,0,0.14,0,0.02,0.01,0,0.01,0.04,0,0.44,0,0,0.45,0.06,0.01,0,0.01,0,0.09,0,0,0.29,0,0,0.6,0,2.47,6.54,289.39,318.33,275.71,6.38,0.03,0.03,6.38,0.03,6.38,9.46},3},
{{0.2,0,0.23,0,0.18,0,0.13,0,0.15,0.12,0.03,0.04,0.03,0,0.03,0,0,0.06,0.25,0.58,0.03,0.08,0,0.15,0,0,0.27,0,0,0.46,0,2.54,6.52,277.94,408.7,251.32,6.4,0.05,0.04,6.41,0.07,6.41,9.49},3},
{{0.03,0,0.03,0,0.11,0,0.28,0,0.36,0.2,0.01,0.03,0.05,0,0.19,0,0,0.48,0.23,0.03,0.02,0.1,0,0.42,0,0,0.33,0,0,0.14,0,2.49,6.49,312.5,300,355.56,6.46,0.03,0.03,6.46,0.04,6.46,9.49},3},
{{0.01,0,0.04,0,0.18,0,0.26,0,0.34,0.18,0.16,0.08,0.31,0,0.32,0,0,0.07,0.06,0.02,0.02,0.04,0,0.29,0,0,0.39,0,0,0.26,0,2.42,6.51,290.91,393.48,277.94,6.46,0.05,0.03,6.46,0.06,6.46,9.48},3},
{{0.01,0,0.02,0,0.06,0,0.31,0,0.46,0.15,0.12,0.49,0.35,0,0.04,0,0,0.01,0.01,0,0.01,0.06,0,0.29,0,0,0.45,0,0,0.2,0,2.38,6.5,400,421.74,251.28,6.46,0.03,0.03,6.47,0.04,6.47,9.47},3},
{{0.05,0,0.03,0,0.09,0,0.07,0,0.02,0.09,0.06,0.09,0.04,0,0.02,0,0,0.01,0.01,0.14,0.18,0.02,0,0.03,0,0,0,0,0,0.17,0,1.09,2.52,188.89,216.67,231.25,2.56,0.66,1.52,6.49,1.74,6.49,3.76},3},
{{0.04,0.04,0.08,0.27,0.16,0.16,0.18,0.03,0.01,0.05,0.06,0.02,0.11,0.16,0.08,0.02,0.01,0.04,0.1,0.42,0.2,0.3,0.07,0.02,0.02,0.01,0.06,0.1,0.19,0.05,0,9.74,0.78,1600,325,1350,0.73,0.29,1.47,0.89,0.37,0.89,9.93},4},
{{0,0,0,0,0.06,0.09,0.13,0.19,0.3,0.25,0.16,0.22,0.25,0.12,0.15,0.05,0.04,0.03,0.01,0,0,0,0,0,0.04,0.13,0.2,0.17,0.22,0.25,0,9.4,2.47,2400,262.86,490,1.36,0.12,0.17,1.42,0.16,1.42,9.83},4},
{{0.17,0.2,0.2,0.08,0.05,0.04,0.07,0.11,0.07,0.04,0.06,0.03,0.07,0.08,0.08,0.08,0.28,0.21,0.02,0.1,0.06,0.02,0.16,0.26,0.18,0.08,0.13,0.03,0.04,0.05,0,9.65,1.7,400,440,250,0.95,0.19,0.56,1.09,0.29,1.09,9.9},4},
{{0.12,0.08,0.05,0.05,0.07,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.07,0.09,0.06,0.04,0.07,0.05,0.05,0.1,0.07,0.1,0,0,0,0,0,0,3.47,0.31,150,192.86,231.25,0.37,2.24,0.39,1.42,6.31,1.42,3.54},4},
{{0.18,0.13,0.11,0.08,0.06,0.09,0.08,0.11,0.08,0.1,0.11,0.11,0.09,0.06,0.1,0.09,0.14,0.1,0.11,0.12,0.1,0.1,0.09,0.1,0.1,0.11,0.09,0.14,0.11,0.09,0,10.16,-1.38,1675,750,3750,3.84,3.37,2.83,5.07,4.29,5.07,11.93},2},
{{0.1,0.12,0.13,0.09,0.1,0.08,0.1,0.13,0.12,0.05,0.11,0.09,0.1,0.09,0.1,0.12,0.1,0.12,0.1,0.1,0.09,0.11,0.12,0.09,0.11,0.07,0.09,0.13,0.13,0.08,0,9.86,-1.6,4525,888.89,2262.5,3.7,3.04,2.76,4.75,3.91,4.75,11.52},2},
{{0.12,0.13,0.11,0.12,0.09,0.08,0.06,0.13,0.12,0.07,0.11,0.1,0.09,0.11,0.08,0.09,0.11,0.14,0.12,0.1,0.09,0.1,0.14,0.11,0.07,0.08,0.12,0.13,0.1,0.09,0,9.96,-1.52,1375,1837.5,1650,3.71,3.14,2.78,4.84,3.94,4.84,11.67},2},
{{0.1,0.1,0.08,0.09,0.09,0.14,0.15,0.09,0.11,0.08,0.09,0.08,0.1,0.15,0.1,0.08,0.15,0.12,0.09,0.07,0.07,0.09,0.09,0.12,0.13,0.13,0.12,0.07,0.07,0.13,0,9.76,-1.28,3900,1278.57,3900,3.88,2.76,2.67,4.87,3.54,4.87,11.44},2},
{{0.1,0.09,0.1,0.1,0.09,0.11,0.13,0.11,0.13,0.06,0.09,0.08,0.11,0.11,0.14,0.1,0.1,0.12,0.1,0.08,0.08,0.1,0.12,0.09,0.07,0.11,0.15,0.12,0.09,0.09,0,9.77,-1.46,2775,1516.67,3925,4.01,2.89,2.61,5.14,3.78,5.14,11.53},2},
{{0.17,0.11,0.09,0.1,0.08,0.1,0.06,0.09,0.12,0.1,0.12,0.1,0.1,0.1,0.07,0.09,0.12,0.11,0.08,0.13,0.11,0.08,0.09,0.14,0.17,0.09,0.09,0.07,0.06,0.12,0,10,-1.66,2700,742.31,2700,3.97,3.56,2.9,5.19,4.53,5.19,11.95},2},
{{0.14,0.1,0.15,0.11,0.08,0.05,0.07,0.12,0.1,0.11,0.11,0.11,0.1,0.06,0.06,0.08,0.13,0.14,0.11,0.11,0.12,0.08,0.09,0.11,0.15,0.09,0.1,0.08,0.1,0.1,0,10.04,-1.52,1290,865,1280,3.84,3.54,3.11,5.14,4.51,5.14,12.02},2},
{{0.11,0.1,0.11,0.13,0.06,0.09,0.09,0.11,0.12,0.1,0.1,0.09,0.09,0.08,0.07,0.12,0.11,0.15,0.11,0.09,0.09,0.09,0.08,0.12,0.13,0.13,0.12,0.07,0.08,0.12,0,10.03,-1.47,1625,1057.14,2675,3.95,3.14,2.87,5.07,4.02,5.07,11.91},2},
{{0.09,0.13,0.11,0.11,0.11,0.09,0.12,0.07,0.11,0.09,0.1,0.11,0.13,0.08,0.08,0.06,0.12,0.13,0.07,0.15,0.1,0.1,0.1,0.11,0.12,0.09,0.13,0.07,0.13,0.08,0,10.01,-1.48,2200,621.43,2200,3.78,3.54,2.89,5.05,4.47,5.05,11.82},2},
{{0.09,0.13,0.1,0.11,0.07,0.11,0.11,0.11,0.13,0.06,0.11,0.07,0.12,0.11,0.08,0.1,0.09,0.13,0.12,0.1,0.09,0.09,0.08,0.14,0.13,0.09,0.09,0.07,0.15,0.09,0,9.91,-1.41,1700,642.31,1700,3.82,3.25,2.87,4.93,4.12,4.93,11.69},2},
{{0.11,0.11,0.07,0.09,0.11,0.1,0.13,0.13,0.07,0.1,0.11,0.09,0.1,0.11,0.13,0.12,0.07,0.12,0.08,0.1,0.09,0.07,0.1,0.11,0.13,0.11,0.09,0.11,0.12,0.1,0,9.67,-1.17,2850,2300,2850,3.96,3.06,2.95,5,3.98,5,11.52},2},
{{0.08,0.1,0.13,0.14,0.11,0.09,0.07,0.11,0.08,0.11,0.09,0.13,0.06,0.08,0.09,0.11,0.12,0.12,0.12,0.11,0.1,0.12,0.09,0.06,0.12,0.09,0.1,0.15,0.08,0.11,0,10.15,-1.51,2650,813.64,2650,3.81,3.16,3.05,4.99,4.02,4.99,12},2},
{{0.09,0.1,0.13,0.11,0.12,0.07,0.07,0.12,0.09,0.12,0.1,0.1,0.09,0.09,0.09,0.13,0.13,0.1,0.1,0.1,0.11,0.1,0.11,0.1,0.07,0.07,0.16,0.11,0.12,0.09,0,9.99,-1.47,1900,763.64,3800,3.96,3.15,3.03,5.34,4.09,5.34,11.95},2},
{{0.09,0.1,0.13,0.12,0.07,0.11,0.07,0.12,0.12,0.09,0.1,0.11,0.12,0.05,0.11,0.11,0.1,0.11,0.1,0.11,0.09,0.13,0.1,0.08,0.1,0.08,0.1,0.14,0.11,0.1,0,10,-1.41,2533.33,775,2533.33,3.87,3.13,3.07,5.04,3.99,5.04,11.85},2},
{{0.13,0.12,0.09,0.14,0.08,0.08,0.1,0.08,0.1,0.11,0.1,0.12,0.08,0.08,0.11,0.08,0.13,0.1,0.09,0.13,0.14,0.11,0.11,0.08,0.05,0.12,0.06,0.13,0.13,0.09,0,10.12,-1.65,2125,584.38,3600,3.94,3.42,3.18,5.3,4.34,5.3,12.13},2},
{{0.1,0.12,0.11,0.09,0.1,0.09,0.15,0.08,0.11,0.09,0.09,0.13,0.06,0.13,0.1,0.1,0.12,0.09,0.09,0.12,0.14,0.09,0.12,0.08,0.08,0.1,0.05,0.14,0.12,0.1,0,9.97,-1.5,2850,657.69,2483.33,3.93,3.13,3.1,5.12,4.03,5.12,11.85},2},
{{0.09,0.09,0.11,0.11,0.09,0.11,0.14,0.1,0.1,0.08,0.08,0.13,0.08,0.12,0.12,0.09,0.06,0.14,0.1,0.09,0.08,0.16,0.11,0.07,0.05,0.16,0.08,0.1,0.11,0.09,0,9.85,-1.34,1150,660,2600,3.95,3.1,2.99,5.14,3.92,5.14,11.77},2},
{{0.06,0.09,0.11,0.14,0.14,0.11,0.12,0.09,0.07,0.1,0.1,0.07,0.12,0.12,0.12,0.11,0.08,0.09,0.12,0.09,0.1,0.08,0.1,0.1,0.11,0.1,0.12,0.12,0.07,0.13,0,9.8,-1.34,2225,661.11,2225,3.82,3.04,2.91,4.98,3.94,4.98,11.58},2},
{{0.12,0.09,0.11,0.06,0.11,0.13,0.14,0.07,0.1,0.1,0.12,0.1,0.08,0.11,0.07,0.12,0.14,0.06,0.09,0.13,0.13,0.1,0.09,0.11,0.09,0.09,0.1,0.12,0.08,0.12,0,9.87,-1.52,1625,665.38,1625,4.04,3.34,3.06,5.17,4.32,5.17,11.84},2},
{{0.12,0.13,0.08,0.1,0.08,0.13,0.13,0.05,0.1,0.11,0.09,0.08,0.13,0.09,0.09,0.13,0.13,0.08,0.07,0.13,0.14,0.09,0.1,0.09,0.12,0.09,0.09,0.08,0.13,0.08,0,10.05,-1.72,2500,646.43,3225,4.03,3.1,3.01,5.38,4.06,5.38,12},2},
{{0.13,0.11,0.11,0.07,0.08,0.17,0.08,0.08,0.08,0.12,0.09,0.13,0.09,0.1,0.08,0.12,0.09,0.11,0.1,0.11,0.12,0.11,0.08,0.07,0.13,0.1,0.09,0.1,0.11,0.11,0,9.86,-1.55,1100,564.29,1100,3.94,3.29,2.91,5.15,4.18,5.15,11.75},2},
{{0.12,0.1,0.09,0.08,0.13,0.08,0.12,0.09,0.1,0.11,0.1,0.13,0.08,0.08,0.09,0.1,0.13,0.08,0.13,0.11,0.1,0.12,0.1,0.11,0.12,0.09,0.09,0.08,0.1,0.11,0,9.99,-1.55,1650,1093.75,2200,4.06,3.24,3.03,5.29,4.13,5.29,12.01},2},
{{0.11,0.11,0.1,0.1,0.13,0.12,0.09,0.09,0.06,0.12,0.1,0.12,0.1,0.11,0.09,0.14,0.09,0.06,0.1,0.11,0.13,0.11,0.09,0.15,0.12,0.06,0.07,0.1,0.11,0.08,0,9.82,-1.92,1100,696.15,2175,3.98,3.13,2.87,5.28,4.06,5.28,11.81},2},
{{0.13,0.09,0.1,0.1,0.12,0.07,0.09,0.07,0.08,0.17,0.11,0.12,0.08,0.09,0.11,0.11,0.09,0.09,0.08,0.15,0.15,0.07,0.1,0.1,0.12,0.13,0.08,0.07,0.08,0.12,0,10.03,-1.7,2150,696.15,1625,4.33,3.45,3.04,5.71,4.47,5.71,12.23},2},
{{0.11,0.1,0.1,0.08,0.12,0.1,0.09,0.09,0.12,0.12,0.12,0.12,0.08,0.09,0.09,0.11,0.1,0.1,0.11,0.11,0.12,0.09,0.14,0.1,0.09,0.08,0.07,0.12,0.09,0.13,0,9.9,-1.53,2150,685.71,3225,4.14,3.39,3.3,5.4,4.35,5.4,12.02},2},
{{0.08,0.1,0.09,0.12,0.09,0.11,0.13,0.1,0.1,0.1,0.11,0.08,0.11,0.1,0.14,0.09,0.08,0.09,0.13,0.09,0.07,0.1,0.11,0.13,0.09,0.12,0.11,0.09,0.12,0.09,0,9.79,-1.53,2175,821.43,1050,4.01,3.08,2.79,5.07,3.97,5.07,11.64},2},
{{0.09,0.07,0.08,0.13,0.09,0.11,0.14,0.09,0.09,0.14,0.12,0.07,0.14,0.11,0.13,0.1,0.09,0.08,0.09,0.11,0.1,0.1,0.1,0.09,0.12,0.12,0.11,0.09,0.09,0.1,0,9.67,-1.49,2675,877.78,2150,4.3,3.07,2.91,5.46,4,5.46,11.75},2},
{{0.11,0.06,0.08,0.09,0.13,0.14,0.06,0.12,0.12,0.12,0.11,0.08,0.12,0.11,0.09,0.12,0.09,0.09,0.13,0.09,0.09,0.09,0.12,0.11,0.09,0.11,0.1,0.12,0.08,0.11,0,9.81,-1.42,3375,850,1675,4.37,3.1,2.94,5.49,3.99,5.49,11.88},2},
{{0.07,0.09,0.08,0.12,0.14,0.08,0.09,0.1,0.14,0.11,0.12,0.09,0.09,0.13,0.09,0.13,0.11,0.06,0.12,0.09,0.08,0.09,0.1,0.12,0.08,0.11,0.1,0.09,0.13,0.11,0,9.63,-1.17,2300,1050,2300,4.22,3.14,3.14,5.4,4.06,5.4,11.74},2},
{{0.07,0.09,0.08,0.12,0.12,0.1,0.12,0.09,0.14,0.1,0.11,0.1,0.08,0.15,0.12,0.11,0.07,0.07,0.12,0.09,0.08,0.1,0.11,0.12,0.07,0.16,0.11,0.1,0.09,0.09,0,9.61,-1.52,2233.33,833.33,2225,4.15,3.05,2.78,5.32,3.97,5.32,11.58},2},
{{0.07,0.08,0.09,0.09,0.08,0.09,0.14,0.12,0.11,0.15,0.11,0.07,0.09,0.12,0.15,0.11,0.1,0.09,0.13,0.07,0.09,0.09,0.13,0.12,0.06,0.1,0.12,0.12,0.09,0.1,0,9.76,-1.6,3850,366.67,3850,4.48,2.84,2.91,5.56,3.7,5.56,11.84},2},
{{0.09,0.1,0.11,0.07,0.15,0.08,0.1,0.11,0.1,0.11,0.1,0.1,0.13,0.11,0.09,0.08,0.13,0.08,0.08,0.12,0.08,0.09,0.1,0.15,0.07,0.12,0.13,0.09,0.12,0.08,0,9.75,-1.53,1912.5,795.45,2916.67,4.16,3.21,2.77,5.5,4.13,5.5,11.69},2},
{{0.08,0.1,0.09,0.09,0.1,0.13,0.1,0.13,0.1,0.12,0.1,0.1,0.12,0.09,0.14,0.09,0.1,0.1,0.1,0.09,0.11,0.1,0.1,0.13,0.07,0.12,0.14,0.1,0.07,0.1,0,9.71,-1.72,2250,1143.75,3900,4.27,3.04,2.71,5.44,3.9,5.44,11.72},2},
{{0.07,0.11,0.06,0.12,0.09,0.11,0.11,0.14,0.13,0.09,0.12,0.07,0.11,0.13,0.1,0.09,0.1,0.11,0.11,0.09,0.07,0.12,0.13,0.07,0.1,0.12,0.1,0.12,0.1,0.09,0,9.73,-1.48,2200,713.64,2212.5,4.26,3.11,2.85,5.41,4.01,5.41,11.75},2},
{{0.08,0.08,0.12,0.09,0.14,0.12,0.09,0.09,0.1,0.1,0.05,0.13,0.12,0.11,0.11,0.12,0.09,0.11,0.11,0.07,0.1,0.08,0.09,0.09,0.11,0.13,0.1,0.13,0.1,0.09,0,9.7,-1.39,2666.67,1200,2225,4.15,2.71,2.65,5.54,3.47,5.54,11.59},2},
{{0,0.01,0.05,0.03,0.03,0.01,0.01,0.02,0.01,0,0,0.1,0.01,0.02,0.02,0.02,0,0,0,0,0,0,0,0,0,0,0,0.02,0.04,0.1,0,1.07,0.75,600,316.67,200,0.39,0.91,0.65,3.25,6.1,3.25,1.48},2},
{{0.06,0.15,0.15,0.07,0.07,0.1,0.09,0.08,0.12,0.11,0.15,0.09,0.12,0.09,0.09,0.04,0.08,0.15,0.09,0.05,0.19,0.12,0.08,0.07,0.06,0.08,0.11,0.09,0.13,0.09,0,7.61,-1.59,552.94,380,1400,8.75,8.11,5.95,10.63,9.11,10.63,15.83},0},
{{0.08,0.11,0.11,0.11,0.11,0.1,0.1,0.12,0.1,0.09,0.14,0.11,0.08,0.1,0.11,0.07,0.11,0.13,0.1,0.04,0.16,0.1,0.14,0.06,0.1,0.07,0.08,0.14,0.12,0.07,0,7.79,-1.23,660.71,385.42,1962.5,8.8,7.51,5.38,10.4,8.65,10.4,15.63},0},
{{0.03,0.14,0.14,0.11,0.06,0.11,0.09,0.12,0.13,0.08,0.14,0.08,0.12,0.09,0.06,0.07,0.11,0.15,0.11,0.04,0.13,0.09,0.15,0.12,0.07,0.08,0.12,0.09,0.1,0.08,0,7.94,-1.29,750,415.22,2200,8.86,7.61,4.98,10.49,8.61,10.49,15.64},0},
{{0.07,0.15,0.19,0.07,0.07,0.11,0.1,0.1,0.08,0.06,0.09,0.12,0.1,0.12,0.08,0.07,0.11,0.14,0.09,0.04,0.12,0.12,0.09,0.1,0.07,0.13,0.07,0.09,0.12,0.11,0,8.04,-0.63,805,378,1890,7.76,7.37,5.37,9.49,8.45,9.49,14.98},0},
{{0.06,0.18,0.14,0.13,0.06,0.11,0.12,0.04,0.1,0.06,0.11,0.1,0.15,0.08,0.11,0.06,0.09,0.13,0.13,0.04,0.13,0.11,0.07,0.12,0.07,0.11,0.08,0.12,0.11,0.1,0,7.67,-0.99,720.83,391.67,3975,7.7,7.3,5.06,9.45,8.41,9.45,14.59},0},
{{0.08,0.15,0.14,0.11,0.1,0.08,0.1,0.07,0.11,0.06,0.13,0.11,0.1,0.09,0.07,0.1,0.1,0.1,0.13,0.02,0.08,0.14,0.15,0.11,0.09,0.06,0.06,0.1,0.1,0.12,0,7.92,-0.71,711.54,344.44,2350,8.28,7.63,5.36,9.92,8.64,9.92,15.31},0},
{{0.12,0.14,0.11,0.08,0.07,0.09,0.11,0.11,0.06,0.09,0.13,0.09,0.11,0.11,0.08,0.07,0.08,0.14,0.09,0.03,0.1,0.09,0.12,0.09,0.08,0.08,0.11,0.1,0.09,0.16,0,8.1,0.16,578.13,369.23,1800,8.97,7.71,5.66,10.59,8.78,10.59,15.93},0},
{{0.1,0.11,0.09,0.09,0.12,0.11,0.09,0.07,0.13,0.08,0.13,0.1,0.12,0.11,0.06,0.08,0.1,0.13,0.11,0.02,0.07,0.08,0.08,0.15,0.09,0.13,0.1,0.1,0.12,0.1,0,7.82,-0.14,573.33,389.58,1650,9.29,7.63,4.86,10.78,8.66,10.78,15.74},0},
{{0.1,0.12,0.09,0.1,0.13,0.08,0.11,0.12,0.09,0.07,0.11,0.11,0.12,0.13,0.08,0.09,0.08,0.1,0.11,0.03,0.09,0.08,0.06,0.13,0.13,0.12,0.11,0.11,0.08,0.12,0,7.64,-0.27,779.17,374,1750,9.01,7.25,4.93,10.41,8.31,10.41,15.19},0},
{{0.12,0.1,0.1,0.13,0.08,0.09,0.08,0.09,0.11,0.09,0.12,0.09,0.11,0.09,0.1,0.09,0.08,0.14,0.07,0.04,0.09,0.09,0.1,0.13,0.09,0.1,0.11,0.1,0.1,0.1,0,7.93,-0.32,675,378,1700,9.36,7.37,5.08,10.86,8.51,10.86,15.78},0},
{{0.09,0.12,0.12,0.09,0.08,0.11,0.12,0.12,0.07,0.07,0.12,0.08,0.14,0.1,0.12,0.06,0.08,0.11,0.11,0.04,0.07,0.09,0.12,0.08,0.1,0.13,0.13,0.1,0.12,0.08,0,7.66,-0.31,707.69,384,1750,8.93,7.4,4.73,10.42,8.59,10.42,15.23},0},
{{0.09,0.11,0.14,0.08,0.11,0.12,0.06,0.12,0.08,0.1,0.1,0.12,0.13,0.09,0.1,0.07,0.07,0.14,0.11,0.02,0.08,0.13,0.1,0.11,0.1,0.09,0.1,0.11,0.13,0.09,0,7.92,-0.44,657.69,413.04,4300,9,7.44,4.95,10.6,8.51,10.6,15.43},0},
{{0.09,0.13,0.12,0.09,0.08,0.09,0.08,0.11,0.14,0.06,0.13,0.11,0.07,0.1,0.1,0.09,0.14,0.1,0.09,0.03,0.08,0.12,0.12,0.09,0.1,0.08,0.1,0.16,0.08,0.11,0,7.96,-0.36,657.69,370,1207.14,9.22,7.21,5.11,10.76,8.37,10.76,15.6},0},
{{0.1,0.1,0.12,0.06,0.11,0.08,0.12,0.09,0.14,0.08,0.11,0.1,0.14,0.09,0.08,0.1,0.1,0.11,0.08,0.04,0.09,0.1,0.12,0.06,0.14,0.1,0.16,0.1,0.05,0.11,0,7.83,-0.77,667.86,357.41,2150,9.41,7.23,4.68,10.89,8.25,10.89,15.42},0},
{{0.11,0.11,0.11,0.05,0.11,0.12,0.11,0.11,0.1,0.09,0.08,0.14,0.09,0.11,0.09,0.08,0.13,0.09,0.11,0.03,0.08,0.1,0.1,0.09,0.14,0.11,0.09,0.09,0.11,0.1,0,8.22,-0.57,603.13,438.64,2716.67,9.31,7.26,4.98,10.78,8.31,10.78,15.76},0},
{{0.11,0.13,0.06,0.08,0.1,0.09,0.08,0.08,0.15,0.11,0.14,0.1,0.08,0.08,0.11,0.05,0.12,0.11,0.09,0.04,0.09,0.1,0.08,0.1,0.11,0.11,0.09,0.16,0.09,0.09,0,8.13,-0.16,562.5,415.91,1650,9.83,7.65,5.07,11.42,8.77,11.42,16.36},0},
{{0.1,0.07,0.06,0.12,0.1,0.1,0.14,0.12,0.1,0.07,0.11,0.11,0.09,0.08,0.11,0.09,0.14,0.07,0.12,0.03,0.09,0.08,0.1,0.1,0.1,0.13,0.13,0.08,0.09,0.13,0,8.27,-0.27,685.71,459.52,1225,9.83,7.12,5.24,11.06,8.25,11.06,16.2},0},
{{0.11,0.06,0.05,0.11,0.15,0.11,0.09,0.11,0.11,0.11,0.11,0.11,0.06,0.09,0.09,0.12,0.18,0.06,0.11,0.03,0.1,0.11,0.04,0.12,0.09,0.11,0.16,0.12,0.06,0.11,0,8.34,-0.32,733.33,397.83,2387.5,9.94,6.83,4.98,11.13,8.09,11.13,16.23},0},
{{0.13,0.06,0.12,0.1,0.08,0.15,0.07,0.07,0.14,0.08,0.09,0.1,0.11,0.08,0.1,0.12,0.12,0.09,0.08,0.03,0.1,0.11,0.08,0.11,0.08,0.12,0.11,0.12,0.09,0.11,0,8.35,-0.49,692.31,417.39,1057.14,9.35,6.94,5.21,10.84,8.08,10.84,15.9},0},
{{0.07,0.11,0.08,0.13,0.11,0.09,0.1,0.16,0.09,0.08,0.09,0.1,0.11,0.11,0.15,0.13,0.04,0.1,0.08,0.03,0.09,0.07,0.09,0.14,0.08,0.16,0.08,0.14,0.07,0.1,0,7.98,-0.68,754.17,391.67,1960,9.09,6.62,4.7,10.5,7.94,10.5,15.29},0},
{{0.11,0.1,0.07,0.09,0.14,0.1,0.1,0.12,0.08,0.09,0.07,0.13,0.13,0.13,0.09,0.08,0.08,0.15,0.1,0,0.09,0.08,0.09,0.07,0.15,0.09,0.12,0.11,0.13,0.09,0,7.96,-0.45,730.77,434.09,2200,9.12,6.9,4.88,10.51,7.87,10.51,15.2},0},
{{0.1,0.09,0.07,0.11,0.12,0.1,0.14,0.12,0.08,0.06,0.08,0.09,0.13,0.11,0.1,0.11,0.13,0.09,0.08,0.02,0.08,0.12,0.12,0.09,0.15,0.1,0.09,0.07,0.13,0.08,0,8.13,-0.86,665.38,377.27,1516.67,9.48,6.6,4.79,10.75,7.75,10.75,15.56},0},
{{0.13,0.06,0.05,0.11,0.1,0.12,0.15,0.11,0.07,0.09,0.08,0.1,0.08,0.13,0.12,0.16,0.09,0.07,0.12,0.02,0.11,0.1,0.09,0.11,0.12,0.07,0.12,0.09,0.1,0.11,0,8.26,-0.77,646.67,440.91,1675,9.94,6.38,5.04,11.11,7.7,11.11,16.04},0},
{{0.11,0.05,0.1,0.1,0.1,0.14,0.15,0.08,0.08,0.1,0.07,0.12,0.09,0.11,0.17,0.14,0.08,0.05,0.12,0.02,0.11,0.09,0.14,0.13,0.1,0.1,0.07,0.11,0.08,0.1,0,8.15,-1.16,632.14,475,3166.67,9.57,6.33,4.94,10.81,7.61,10.81,15.71},0},
{{0.12,0.08,0.07,0.11,0.1,0.07,0.12,0.13,0.1,0.1,0.11,0.08,0.09,0.12,0.09,0.16,0.07,0.13,0.11,0.02,0.11,0.11,0.1,0.13,0.1,0.1,0.1,0.08,0.1,0.11,0,8.43,-0.94,680.77,419.57,2037.5,9.85,6.65,5.01,11.14,7.82,11.14,16.22},0},
{{0.12,0.06,0.07,0.11,0.1,0.12,0.1,0.11,0.11,0.11,0.09,0.11,0.07,0.09,0.15,0.11,0.1,0.07,0.11,0.05,0.11,0.11,0.12,0.09,0.08,0.09,0.13,0.08,0.1,0.12,0,8.5,-0.6,630,393.75,1462.5,10.26,6.74,5.37,11.53,8.04,11.53,16.62},0},
{{0.13,0.07,0.08,0.12,0.09,0.12,0.08,0.11,0.1,0.1,0.07,0.12,0.09,0.1,0.13,0.15,0.07,0.06,0.11,0.03,0.12,0.09,0.11,0.1,0.14,0.1,0.09,0.08,0.11,0.09,0,8.52,-1.02,535.29,406.52,2625,9.77,6.52,4.8,11.13,7.87,11.13,16.03},0},
{{0.12,0.05,0.11,0.12,0.16,0.1,0.09,0.08,0.09,0.09,0.03,0.12,0.13,0.08,0.12,0.15,0.11,0.07,0.12,0.02,0.12,0.12,0.09,0.09,0.1,0.11,0.09,0.08,0.1,0.12,0,8.65,-1,596.67,385.42,2266.67,9.07,6.28,5.13,10.49,7.43,10.49,15.65},0},
{{0.15,0.09,0.09,0.13,0.07,0.08,0.07,0.09,0.15,0.09,0.12,0.08,0.08,0.15,0.08,0.07,0.12,0.11,0.11,0.02,0.11,0.12,0.11,0.14,0.08,0.08,0.05,0.13,0.1,0.1,0,8.34,-0.84,738.46,371.15,2550,9.22,7.13,5.49,10.7,8.26,10.7,16.12},0},
{{0.14,0.08,0.14,0.08,0.11,0.06,0.09,0.13,0.11,0.08,0.07,0.14,0.06,0.1,0.11,0.08,0.15,0.09,0.12,0.03,0.1,0.12,0.08,0.1,0.12,0.11,0.09,0.08,0.12,0.1,0,8.85,-0.53,678.57,395.83,1600,8.96,6.82,5.51,10.55,7.98,10.55,16.3},0},
{{0.12,0.07,0.12,0.11,0.14,0.08,0.13,0.12,0.05,0.07,0.08,0.08,0.12,0.11,0.1,0.14,0.13,0.06,0.12,0.03,0.1,0.1,0.09,0.12,0.08,0.12,0.12,0.1,0.09,0.1,0,8.67,-0.77,669.23,361.54,1683.33,8.94,6.48,4.99,10.23,7.65,10.23,15.55},0},
{{0.1,0.1,0.08,0.09,0.12,0.15,0.1,0.08,0.12,0.05,0.09,0.08,0.08,0.11,0.13,0.15,0.08,0.09,0.09,0.04,0.12,0.08,0.12,0.09,0.12,0.11,0.1,0.06,0.12,0.11,0,8.68,-0.89,745.83,386,1862.5,9.14,6.5,5.21,10.48,7.85,10.48,15.91},0},
{{0.1,0.09,0.05,0.13,0.15,0.12,0.09,0.11,0.09,0.05,0.09,0.1,0.09,0.08,0.12,0.16,0.13,0.04,0.08,0.05,0.1,0.11,0.12,0.08,0.1,0.12,0.1,0.1,0.1,0.1,0,8.53,-0.79,730.77,363.46,1170,9.17,6.47,5.1,10.46,7.85,10.46,15.7},0},
{{0.04,0.11,0.09,0.07,0.07,0.04,0.05,0.05,0.04,0.04,0.04,0.04,0.06,0.08,0.08,0.1,0.08,0.05,0.06,0,0.04,0.05,0.07,0.02,0.08,0.07,0.11,0.07,0.07,0.03,0,4.94,-0.23,825,494.44,1100,4.37,3.8,2.43,9.26,7.63,9.26,8.23},0},
{{0.11,0.11,0.11,0.06,0.11,0.09,0.08,0.07,0.13,0.15,0.09,0.14,0.06,0.12,0.11,0.07,0.09,0.1,0.13,0.11,0.1,0.1,0.14,0.1,0.1,0.08,0.1,0.12,0.08,0.11,0,10.13,-1.58,1425,727.27,1925,3.34,3.29,2.82,4.14,4.08,4.14,11.76},2},
{{0.09,0.16,0.05,0.13,0.1,0.08,0.09,0.1,0.14,0.08,0.09,0.11,0.08,0.13,0.07,0.13,0.11,0.12,0.13,0.07,0.07,0.13,0.16,0.07,0.11,0.09,0.1,0.08,0.12,0.09,0,10.03,-1.6,3850,2175,2175,3.32,2.99,2.78,4.33,3.78,4.33,11.65},2},
{{0.12,0.08,0.1,0.08,0.1,0.13,0.1,0.11,0.1,0.1,0.09,0.05,0.16,0.13,0.08,0.09,0.09,0.12,0.15,0.06,0.07,0.13,0.13,0.12,0.14,0.1,0.06,0.06,0.12,0.09,0,10.15,-1.76,1516.67,1516.67,1150,3.29,2.92,2.62,4.4,3.68,4.4,11.7},2},
{{0.08,0.11,0.11,0.09,0.13,0.08,0.13,0.11,0.09,0.08,0.09,0.07,0.19,0.1,0.09,0.1,0.09,0.12,0.13,0.05,0.11,0.12,0.07,0.15,0.13,0.1,0.08,0.07,0.1,0.1,0,9.96,-1.66,2875,2037.5,2900,3.21,2.97,2.88,4.34,3.76,4.34,11.62},2},
{{0.09,0.12,0.09,0.1,0.12,0.11,0.09,0.09,0.1,0.11,0.07,0.11,0.09,0.13,0.14,0.1,0.08,0.1,0.14,0.07,0.12,0.08,0.09,0.07,0.14,0.08,0.11,0.15,0.09,0.1,0,10.09,-1.47,1200,960,1175,3.15,2.83,2.87,4,3.64,4,11.66},2},
{{0.12,0.07,0.12,0.08,0.12,0.07,0.1,0.1,0.1,0.13,0.09,0.15,0.09,0.1,0.09,0.07,0.1,0.13,0.08,0.12,0.11,0.12,0.07,0.1,0.12,0.06,0.1,0.13,0.13,0.09,0,10.02,-1.49,2683.33,962.5,2250,3.52,3.42,2.92,4.63,4.35,4.63,11.8},2},
{{0.13,0.11,0.09,0.11,0.08,0.1,0.08,0.12,0.1,0.11,0.11,0.13,0.07,0.12,0.11,0.08,0.1,0.07,0.11,0.13,0.11,0.13,0.12,0.12,0.1,0.08,0.07,0.09,0.09,0.11,0,10.05,-1.72,1125,1005.56,2825,3.5,3.47,3.13,4.67,4.44,4.67,11.98},2},
{{0.12,0.08,0.09,0.11,0.13,0.07,0.12,0.13,0.11,0.08,0.1,0.15,0.1,0.09,0.09,0.07,0.12,0.1,0.09,0.12,0.1,0.13,0.12,0.11,0.09,0.1,0.06,0.12,0.09,0.11,0,9.99,-1.67,2300,772.22,1883.33,3.18,3.39,2.89,4.27,4.18,4.27,11.65},2},
{{0.11,0.1,0.08,0.12,0.09,0.08,0.09,0.12,0.14,0.09,0.1,0.11,0.09,0.1,0.09,0.12,0.13,0.07,0.12,0.1,0.09,0.13,0.11,0.08,0.08,0.09,0.11,0.12,0.12,0.1,0,10.08,-1.55,1750,1387.5,2700,3.23,3.1,2.93,4.27,3.96,4.27,11.68},2},
{{0.12,0.12,0.09,0.11,0.1,0.08,0.07,0.1,0.14,0.08,0.11,0.09,0.08,0.1,0.07,0.14,0.12,0.09,0.11,0.11,0.12,0.08,0.13,0.11,0.13,0.07,0.1,0.1,0.09,0.1,0,10.24,-1.7,1675,1625,1150,3.66,3.25,2.82,4.91,4.27,4.91,12.05},2},
{{0.1,0.11,0.1,0.08,0.12,0.09,0.08,0.08,0.13,0.12,0.11,0.12,0.05,0.07,0.12,0.09,0.17,0.09,0.11,0.09,0.11,0.13,0.12,0.12,0.06,0.05,0.13,0.12,0.1,0.1,0,10.07,-1.64,1150,1430,2983.33,3.5,3.3,3.04,4.62,4.3,4.62,11.91},2},
{{0.11,0.13,0.1,0.13,0.07,0.09,0.07,0.08,0.12,0.13,0.11,0.1,0.1,0.11,0.08,0.11,0.11,0.11,0.08,0.12,0.1,0.13,0.16,0.08,0.1,0.1,0.05,0.11,0.12,0.09,0,10.08,-1.71,2616.67,1570,1050,3.67,3.25,3.07,4.77,4.13,4.77,11.98},2},
{{0.12,0.07,0.08,0.14,0.09,0.11,0.1,0.09,0.09,0.13,0.1,0.1,0.12,0.12,0.1,0.1,0.09,0.08,0.12,0.1,0.1,0.1,0.12,0.08,0.13,0.09,0.06,0.1,0.12,0.12,0,9.95,-1.47,2237.5,1962.5,1466.67,3.41,3.19,2.98,4.53,4.08,4.53,11.68},2},
{{0.11,0.08,0.13,0.1,0.08,0.08,0.07,0.1,0.13,0.13,0.13,0.09,0.11,0.09,0.09,0.07,0.1,0.1,0.13,0.12,0.12,0.12,0.12,0.09,0.11,0.08,0.1,0.08,0.1,0.11,0,10.03,-1.58,2300,1141.67,2300,3.41,3.56,3.06,4.41,4.44,4.41,11.82},2},
{{0.09,0.11,0.09,0.1,0.11,0.11,0.13,0.1,0.1,0.09,0.13,0.07,0.12,0.09,0.13,0.08,0.09,0.12,0.11,0.1,0.11,0.11,0.08,0.13,0.09,0.12,0.09,0.06,0.11,0.12,0,10,-1.55,3066.67,3066.67,2300,3.15,3.31,2.97,4.19,4.18,4.19,11.66},2},
{{0.11,0.09,0.09,0.09,0.06,0.17,0.12,0.08,0.13,0.09,0.11,0.06,0.11,0.12,0.11,0.1,0.09,0.1,0.12,0.1,0.13,0.07,0.11,0.08,0.11,0.13,0.12,0.07,0.11,0.1,0,10.13,-1.53,4025,2875,1516.67,3.17,2.99,2.97,4.14,3.8,4.14,11.73},2},
{{0.07,0.1,0.15,0.08,0.12,0.11,0.11,0.12,0.07,0.09,0.08,0.09,0.11,0.12,0.12,0.13,0.1,0.11,0.06,0.11,0.1,0.08,0.09,0.09,0.11,0.12,0.16,0.09,0.11,0.07,0,10.19,-1.43,1150,1150,1675,3.15,2.91,2.59,4.13,3.82,4.13,11.64},2},
{{0.09,0.08,0.08,0.11,0.15,0.14,0.13,0.07,0.08,0.1,0.08,0.09,0.13,0.17,0.07,0.12,0.07,0.11,0.08,0.1,0.11,0.08,0.09,0.08,0.11,0.14,0.1,0.13,0.09,0.1,0,10.07,-1.41,4125,1558.33,2750,3.08,2.95,2.71,3.99,3.77,3.99,11.45},2},
{{0.07,0.08,0.1,0.12,0.14,0.1,0.13,0.14,0.07,0.07,0.07,0.1,0.13,0.12,0.15,0.13,0.07,0.09,0.09,0.07,0.09,0.08,0.08,0.12,0.11,0.14,0.12,0.11,0.08,0.09,0,9.98,-1.45,3550,1366.67,1750,2.94,2.71,2.48,4.02,3.6,4.02,11.3},2},
{{0.04,0.13,0.12,0.11,0.1,0.11,0.12,0.14,0.1,0.07,0.07,0.1,0.12,0.08,0.18,0.12,0.08,0.11,0.09,0.08,0.11,0.07,0.07,0.11,0.12,0.12,0.13,0.1,0.11,0.08,0,10.14,-1.41,3025,1210,2400,2.9,2.65,2.65,3.92,3.55,3.92,11.49},2},
{{0.07,0.06,0.13,0.11,0.11,0.12,0.14,0.12,0.09,0.08,0.08,0.12,0.1,0.11,0.1,0.11,0.11,0.11,0.1,0.09,0.11,0.07,0.09,0.09,0.11,0.13,0.13,0.1,0.08,0.12,0,10.09,-1.31,1600,2750,4700,2.92,2.97,2.87,3.92,3.73,3.92,11.53},2},
{{0.07,0.12,0.1,0.08,0.11,0.1,0.11,0.14,0.08,0.11,0.08,0.1,0.12,0.1,0.09,0.12,0.09,0.13,0.08,0.11,0.09,0.1,0.08,0.09,0.1,0.12,0.16,0.06,0.11,0.11,0,10.23,-1.34,1750,1187.5,1966.67,3.06,3.04,2.78,4.03,3.9,4.03,11.69},2},
{{0.08,0.1,0.09,0.13,0.12,0.11,0.13,0.08,0.1,0.1,0.07,0.14,0.1,0.13,0.11,0.09,0.12,0.12,0.07,0.07,0.07,0.09,0.1,0.11,0.08,0.14,0.12,0.11,0.09,0.11,0,9.88,-1.3,2350,1680,3500,3.07,2.91,2.61,3.92,3.71,3.92,11.24},2},
{{0.09,0.08,0.07,0.08,0.11,0.18,0.14,0.1,0.07,0.11,0.08,0.12,0.13,0.07,0.1,0.13,0.09,0.09,0.1,0.09,0.09,0.08,0.12,0.09,0.13,0.13,0.12,0.07,0.08,0.1,0,10.04,-1.47,1775,1712.5,2925,3.07,3.09,2.68,4.1,3.86,4.1,11.46},2},
{{0.09,0.13,0.09,0.09,0.12,0.12,0.11,0.1,0.07,0.12,0.1,0.09,0.11,0.1,0.11,0.15,0.08,0.08,0.09,0.11,0.11,0.1,0.1,0.07,0.08,0.14,0.12,0.12,0.08,0.1,0,10.01,-1.4,3116.67,2250,4675,3.35,3.13,2.87,4.34,4.06,4.34,11.67},2},
{{0.12,0.1,0.12,0.1,0.1,0.08,0.11,0.09,0.07,0.13,0.12,0.09,0.11,0.05,0.1,0.14,0.09,0.07,0.13,0.12,0.12,0.09,0.09,0.1,0.09,0.09,0.13,0.11,0.1,0.11,0,10.13,-1.41,1625,1260,1625,3.51,3.44,2.97,4.38,4.35,4.38,11.85},2},
{{0.09,0.11,0.1,0.14,0.07,0.1,0.12,0.13,0.08,0.08,0.11,0.1,0.1,0.1,0.09,0.1,0.12,0.11,0.08,0.11,0.09,0.15,0.11,0.09,0.08,0.1,0.11,0.1,0.09,0.1,0,10.16,-1.42,1883.33,1033.33,1125,3.17,3.25,3,4.13,4.13,4.13,11.78},2},
{{0.12,0.07,0.08,0.12,0.13,0.12,0.09,0.1,0.12,0.09,0.12,0.1,0.08,0.09,0.09,0.13,0.09,0.1,0.08,0.14,0.11,0.1,0.08,0.1,0.12,0.06,0.12,0.12,0.12,0.11,0,10.1,-1.34,2275,875,2275,3.2,3.49,2.97,4.25,4.41,4.25,11.72},2},
{{0.11,0.09,0.1,0.1,0.14,0.07,0.08,0.11,0.12,0.12,0.13,0.11,0.07,0.07,0.09,0.12,0.12,0.08,0.11,0.12,0.09,0.08,0.1,0.12,0.06,0.09,0.14,0.12,0.1,0.12,0,10.08,-1.2,2225,1350,2225,3.18,3.47,2.85,4.02,4.36,4.02,11.61},2},
{{0.12,0.13,0.09,0.09,0.09,0.09,0.12,0.06,0.14,0.1,0.13,0.07,0.11,0.04,0.1,0.13,0.11,0.11,0.1,0.12,0.09,0.1,0.08,0.12,0.1,0.1,0.07,0.18,0.08,0.1,0,10.22,-1.55,2875,800,3450,3.37,3.49,2.75,4.32,4.52,4.32,11.9},2},
{{0.13,0.11,0.11,0.06,0.11,0.09,0.07,0.08,0.11,0.14,0.16,0.11,0.06,0.08,0.06,0.11,0.11,0.11,0.1,0.13,0.1,0.08,0.13,0.11,0.1,0.07,0.09,0.14,0.1,0.11,0,9.93,-1.4,3225,865,2150,3.57,3.88,3,4.54,4.83,4.54,11.78},2},
{{0.14,0.07,0.11,0.1,0.08,0.1,0.08,0.08,0.14,0.12,0.14,0.1,0.06,0.08,0.07,0.09,0.1,0.13,0.11,0.14,0.1,0.08,0.09,0.13,0.13,0.11,0.05,0.12,0.09,0.12,0,10.25,-1.3,4375,795.45,1466.67,3.51,3.77,3.07,4.55,4.66,4.55,11.97},2},
{{0.08,0.18,0.09,0.06,0.08,0.07,0.04,0.06,0.06,0.07,0.11,0.06,0.11,0.08,0.07,0.04,0.07,0.09,0.08,0.1,0.07,0.07,0.06,0.06,0.09,0.04,0.04,0.13,0.15,0.08,0,7.68,-0.8,1075,1080,1625,2.82,3.19,2.48,4.39,4.95,4.39,9.09},2},
{{0,0.03,0.05,0.09,0.1,0.12,0.11,0.16,0.15,0.19,0.14,0.11,0.1,0.08,0.07,0.06,0.08,0.14,0.12,0.04,0.11,0.12,0.08,0.08,0.11,0.11,0.08,0.1,0.11,0.12,0,8.02,-0.5,700,457.5,1866.67,8.03,7.78,5.64,9.83,8.66,9.83,15.48},0},
{{0,0.01,0.06,0.07,0.09,0.11,0.13,0.14,0.23,0.17,0.06,0.14,0.12,0.09,0.09,0.14,0.09,0.09,0.09,0.06,0.08,0.08,0.09,0.12,0.1,0.13,0.12,0.1,0.11,0.09,0,8.35,-0.54,738.46,384,1100,8.03,6.56,4.74,9.7,7.64,9.7,14.62},0},
{{0,0.02,0.05,0.07,0.08,0.09,0.17,0.17,0.19,0.17,0.08,0.13,0.11,0.1,0.1,0.1,0.11,0.1,0.1,0.05,0.1,0.12,0.08,0.15,0.12,0.1,0.06,0.08,0.13,0.09,0,8.29,-1.04,519.44,375,1730,8.04,6.71,5.03,9.74,7.7,9.74,14.75},0},
{{0.01,0.04,0.06,0.08,0.11,0.11,0.08,0.09,0.25,0.18,0.11,0.13,0.1,0.09,0.06,0.09,0.1,0.12,0.11,0.05,0.09,0.1,0.11,0.07,0.11,0.16,0.09,0.06,0.11,0.12,0,8.2,-0.4,538.24,400,1183.33,8.55,7.39,5.33,10.32,8.29,10.32,15.64},0},
{{0,0.04,0.03,0.09,0.05,0.11,0.15,0.17,0.19,0.18,0.09,0.14,0.12,0.07,0.08,0.1,0.12,0.09,0.11,0.03,0.11,0.09,0.11,0.08,0.15,0.1,0.09,0.07,0.11,0.13,0,8.18,-0.55,626.67,362.96,2416.67,8.52,7.03,5.56,10.19,7.97,10.19,15.32},0},
{{0,0.03,0.05,0.07,0.08,0.12,0.12,0.13,0.2,0.2,0.15,0.12,0.09,0.07,0.07,0.07,0.1,0.14,0.07,0.05,0.07,0.08,0.14,0.12,0.1,0.07,0.1,0.11,0.1,0.13,0,7.95,-0.13,590.63,410.87,4725,8.54,7.55,5.57,10.29,8.45,10.29,15.49},0},
{{0.01,0.04,0.04,0.07,0.09,0.13,0.13,0.1,0.14,0.25,0.15,0.11,0.1,0.09,0.07,0.06,0.12,0.09,0.11,0.05,0.09,0.11,0.1,0.12,0.09,0.1,0.08,0.08,0.08,0.16,0,8.01,-0.26,550,350,1800,8.69,7.74,5.86,10.59,8.66,10.59,15.78},0},
{{0,0.05,0.04,0.08,0.12,0.12,0.11,0.07,0.19,0.24,0.12,0.13,0.09,0.07,0.08,0.07,0.12,0.09,0.1,0.06,0.09,0.11,0.15,0.08,0.11,0.09,0.08,0.06,0.12,0.14,0,8.41,-0.37,613.33,367.31,1416.67,8.69,7.63,5.94,10.59,8.57,10.59,16.12},0},
{{0,0.03,0.04,0.09,0.12,0.13,0.08,0.14,0.21,0.16,0.09,0.11,0.12,0.08,0.1,0.13,0.08,0.1,0.1,0.03,0.13,0.04,0.08,0.09,0.12,0.14,0.13,0.08,0.12,0.1,0,8.23,-0.62,783.33,404.17,1625,8,6.73,4.93,9.79,7.74,9.79,14.82},0},
{{0,0.04,0.05,0.08,0.16,0.12,0.07,0.13,0.19,0.17,0.04,0.18,0.12,0.06,0.08,0.11,0.14,0.1,0.1,0.03,0.13,0.04,0.09,0.1,0.15,0.11,0.11,0.09,0.11,0.1,0,8.42,-0.9,669.23,429.55,1812.5,7.91,6.66,5.03,9.79,7.54,9.79,14.9},0},
{{0.01,0.05,0.04,0.08,0.08,0.14,0.13,0.14,0.17,0.17,0.05,0.14,0.11,0.07,0.09,0.13,0.15,0.06,0.08,0.05,0.09,0.1,0.1,0.14,0.14,0.08,0.11,0.06,0.08,0.13,0,8.85,-1.01,678.57,419.05,1100,8.12,6.4,5.23,9.94,7.45,9.94,15.42},0},
{{0,0.04,0.03,0.11,0.1,0.13,0.11,0.14,0.16,0.19,0.09,0.12,0.07,0.09,0.08,0.12,0.19,0.05,0.07,0.05,0.09,0.13,0.12,0.11,0.08,0.14,0.06,0.07,0.1,0.12,0,8.83,-0.95,580,447.62,1262.5,7.9,6.48,5.34,9.75,7.6,9.75,15.56},0},
{{0,0.03,0.05,0.08,0.09,0.14,0.13,0.16,0.17,0.16,0.05,0.11,0.1,0.08,0.11,0.15,0.11,0.08,0.09,0.05,0.12,0.1,0.13,0.1,0.11,0.08,0.09,0.11,0.09,0.1,0,9.21,-1.24,783.33,373.08,4025,7.77,6.23,5.18,9.5,7.41,9.5,15.31},0},
{{0,0.04,0.04,0.1,0.13,0.12,0.11,0.13,0.15,0.19,0.07,0.11,0.11,0.09,0.1,0.06,0.11,0.14,0.07,0.07,0.07,0.11,0.09,0.13,0.13,0.09,0.08,0.09,0.12,0.1,0,9.12,-0.55,746.15,429.55,1750,7.73,6.97,5.21,9.66,7.96,9.66,15.41},0},
{{0,0.07,0.06,0.11,0.15,0.12,0.08,0.14,0.15,0.15,0.05,0.13,0.13,0.05,0.1,0.08,0.1,0.14,0.09,0.05,0.12,0.1,0.11,0.12,0.09,0.12,0.07,0.06,0.11,0.12,0,9.24,-0.92,1235.71,465,1437.5,7.38,6.97,5.74,9.19,7.87,9.19,15.5},0},
{{0.01,0.06,0.07,0.15,0.14,0.08,0.1,0.14,0.17,0.1,0.04,0.12,0.12,0.05,0.11,0.09,0.05,0.18,0.1,0.06,0.12,0.12,0.13,0.11,0.06,0.08,0.1,0.08,0.1,0.12,0,9.75,-1.05,2200,386,2183.33,7.11,6.82,5.74,8.58,7.75,8.58,15.64},0},
{{0.01,0.1,0.14,0.14,0.14,0.08,0.11,0.18,0.06,0.06,0.04,0.1,0.08,0.09,0.09,0.09,0.13,0.16,0.12,0.03,0.1,0.11,0.1,0.08,0.1,0.11,0.13,0.11,0.1,0.09,0,10.17,-1.08,1116.67,573.53,2025,6.46,6.21,5.18,7.79,7.25,7.79,15.04},0},
{{0.1,0.1,0.08,0.14,0.14,0.08,0.13,0.13,0.06,0.06,0.07,0.06,0.08,0.1,0.05,0.09,0.12,0.14,0.16,0.06,0.12,0.14,0.1,0.08,0.06,0.08,0.12,0.13,0.1,0.08,0,10.7,-1.27,1500,386,3000,7.14,6.58,5.58,8.85,7.72,8.85,16.14},0},
{{0.14,0.08,0.09,0.15,0.11,0.13,0.17,0.06,0.03,0.06,0.08,0.06,0.11,0.08,0.07,0.07,0.11,0.17,0.12,0.04,0.1,0.11,0.09,0.08,0.09,0.11,0.14,0.1,0.1,0.1,0,9.95,-0.99,2975,482.5,2025,7.13,6.93,5.26,9.02,7.94,9.02,15.6},0},
{{0.12,0.08,0.1,0.18,0.13,0.15,0.11,0.09,0.03,0.03,0.07,0.1,0.06,0.08,0.09,0.12,0.1,0.12,0.15,0.02,0.11,0.11,0.1,0.1,0.06,0.1,0.13,0.13,0.09,0.09,0,10.13,-1.32,3000,434.09,1500,6.58,6.54,5.13,8.38,7.71,8.38,15.32},0},
{{0.13,0.11,0.16,0.22,0.11,0.08,0.1,0.07,0.05,0.01,0.05,0.13,0.06,0.06,0.15,0.14,0.09,0.1,0.15,0.04,0.11,0.08,0.09,0.08,0.12,0.14,0.09,0.14,0.09,0.08,0,9.31,-1.11,1490,386,2483.33,7.22,6.11,4.78,8.76,7.29,8.76,14.59},0},
{{0.27,0.17,0.23,0.07,0.08,0.06,0.06,0.08,0.02,0,0.12,0.08,0.06,0.16,0.13,0.14,0.08,0.07,0.12,0.03,0.12,0.11,0.12,0.08,0.07,0.12,0.11,0.12,0.08,0.1,0,7.53,-1.26,3625,490,1208.33,9.78,6.3,5.32,11.37,7.75,11.37,15.59},0},
{{0.25,0.16,0.22,0.07,0.09,0.04,0.12,0.05,0.02,0,0.15,0.07,0.11,0.12,0.13,0.11,0.1,0.08,0.09,0.05,0.08,0.12,0.07,0.13,0.08,0.11,0.14,0.11,0.1,0.08,0,6.73,-0.87,2925,520.59,2183.33,9.43,6.64,4.88,11.11,7.99,11.11,14.93},0},
{{0.26,0.19,0.21,0.05,0.11,0.07,0.04,0.07,0.03,0,0.18,0.09,0.06,0.14,0.12,0.1,0.09,0.12,0.09,0.04,0.1,0.12,0.09,0.1,0.09,0.08,0.12,0.16,0.07,0.11,0,6.48,-0.62,1100,632.14,1091.67,9.67,6.91,5.39,11.43,8.2,11.43,15.34},0},
{{0.26,0.19,0.2,0.11,0.07,0.05,0.07,0.07,0.01,0,0.12,0.08,0.07,0.2,0.13,0.1,0.09,0.1,0.1,0.03,0.1,0.12,0.08,0.09,0.08,0.11,0.16,0.1,0.09,0.1,0,6.9,-0.92,1200,636.67,1590,9.88,6.23,5.13,11.53,7.61,11.53,15.33},0},
{{0.29,0.19,0.11,0.11,0.09,0.05,0.1,0.07,0.02,0,0.12,0.11,0.11,0.14,0.09,0.1,0.1,0.11,0.11,0.02,0.09,0.1,0.08,0.1,0.09,0.11,0.09,0.16,0.11,0.09,0,6.69,-0.63,1125,463.16,1700,9.91,6.88,5.07,11.69,8.19,11.69,15.45},0},
{{0.29,0.21,0.12,0.08,0.06,0.08,0.09,0.09,0,0,0.18,0.06,0.13,0.09,0.14,0.08,0.11,0.07,0.12,0.04,0.09,0.12,0.16,0.06,0.09,0.08,0.1,0.09,0.14,0.1,0,6.46,-0.68,1712.5,513.89,1541.67,9.97,7.14,5.66,11.74,8.48,11.74,15.95},0},
{{0.26,0.22,0.18,0.1,0.07,0.08,0.08,0.04,0.01,0,0.17,0.04,0.11,0.16,0.12,0.14,0.09,0.07,0.09,0.03,0.12,0.09,0.1,0.06,0.1,0.11,0.09,0.17,0.09,0.09,0,6.11,-0.86,2225,740.91,2225,9.64,6.44,5.19,11.38,7.82,11.38,15.2},0},
{{0.22,0.25,0.17,0.09,0.1,0.09,0.08,0.02,0,0,0.17,0.04,0.16,0.13,0.14,0.1,0.08,0.07,0.1,0.04,0.13,0.08,0.11,0.12,0.1,0.1,0.09,0.13,0.1,0.07,0,6.01,-1.35,1800,633.33,2166.67,9.22,6.5,4.97,10.98,7.78,10.98,14.74},0},
{{0.24,0.21,0.16,0.12,0.08,0.09,0.07,0.04,0,0,0.16,0.07,0.13,0.16,0.12,0.1,0.08,0.08,0.08,0.04,0.12,0.09,0.09,0.12,0.12,0.1,0.07,0.13,0.11,0.07,0,6.05,-1.41,3400,522.22,3950,9.28,6.41,4.86,11.09,7.78,11.09,14.59},0},
{{0.23,0.25,0.15,0.08,0.06,0.11,0.08,0.05,0,0,0.15,0.07,0.12,0.17,0.13,0.12,0.05,0.07,0.1,0.04,0.1,0.11,0.1,0.14,0.1,0.08,0.07,0.11,0.1,0.1,0,6.16,-1.1,3600,525,1462.5,9.36,6.37,5.28,11.09,7.82,11.09,14.98},0},
{{0.11,0.12,0.16,0.1,0.14,0.09,0.02,0.01,0,0,0.05,0.05,0.13,0.14,0.15,0.1,0.05,0.04,0.04,0.01,0.06,0.05,0.04,0.06,0.08,0.12,0.14,0.08,0.08,0.05,0,4.64,-0.39,2175,533.33,775,5.28,3.55,3.01,9.25,6.14,9.25,9.05},0},
{{0.01,0.04,0.15,0,0.39,0,0.24,0,0.16,0.02,0,0,0.04,0.06,0.18,0,0.33,0,0,0.4,0.04,0.12,0,0.27,0,0.36,0,0.16,0.05,0.02,0,2.27,6.43,258.11,1275,233.33,7.48,0.04,0.04,7.49,0.18,7.49,10.12},3},
{{0.06,0.17,0.28,0,0.37,0,0.1,0,0.03,0,0,0,0,0.02,0.1,0,0.34,0,0,0.55,0.01,0.03,0,0.31,0,0.26,0,0.32,0.07,0.02,0,2.28,6.44,293.55,259.46,195.92,7.44,0.03,0.03,7.45,0.05,7.45,10.11},3},
{{0.09,0.13,0.21,0,0.24,0,0.16,0,0.14,0.05,0,0,0.09,0.11,0.2,0,0.28,0,0,0.33,0.04,0.08,0,0.3,0,0.33,0,0.16,0.05,0.05,0,2.25,6.43,248.72,348.08,272.86,7.47,0.05,0.04,7.47,0.07,7.47,10.11},3},
{{0.35,0.35,0.15,0,0.08,0,0.05,0,0.03,0.01,0,0,0.17,0.34,0.34,0,0.12,0,0,0.04,0.01,0,0,0,0,0.02,0,0.06,0.13,0.79,0,2.2,6.57,250,425,247.44,7.4,0.04,0.04,7.4,0.06,7.4,10.13},3},
{{0.02,0.02,0.17,0,0.32,0,0.36,0,0.11,0.02,0,0,0.03,0.04,0.13,0,0.31,0,0,0.5,0.01,0.02,0,0.02,0,0.09,0,0.31,0.36,0.2,0,2.28,6.5,284.38,250,228.05,7.48,0.04,0.04,7.48,0.06,7.48,10.17},3},
{{0.02,0.03,0.2,0,0.41,0,0.26,0,0.08,0.01,0,0,0.02,0.02,0.07,0,0.3,0,0,0.6,0.01,0.01,0,0.02,0,0.15,0,0.31,0.34,0.18,0,2.29,6.49,236.59,383.33,233.33,7.47,0.03,0.03,7.47,0.05,7.47,10.16},3},
{{0.02,0.03,0.07,0,0.28,0,0.32,0,0.27,0.04,0,0,0.04,0.14,0.22,0,0.28,0,0,0.34,0.01,0.03,0,0.11,0,0.31,0,0.35,0.18,0.03,0,2.25,6.46,239.02,306.25,281.82,7.5,0.04,0.03,7.5,0.05,7.5,10.15},3},
{{0.01,0,0.06,0,0.14,0,0.46,0,0.34,0.01,0,0,0.01,0.02,0.13,0,0.45,0,0,0.4,0.05,0.18,0,0.39,0,0.27,0,0.12,0.01,0,0,2.27,6.41,292.42,258.33,268.75,7.51,0.03,0.03,7.51,0.04,7.51,10.13},3},
{{0.18,0.02,0.08,0,0.15,0,0.17,0,0.17,0.21,0.32,0.04,0.08,0.05,0.09,0,0.18,0,0,0.26,0.25,0.11,0,0.13,0,0.15,0,0.05,0.02,0.28,0,2.01,6.45,266.67,191.18,164.29,7.51,0.32,0.2,7.52,0.36,7.52,10.12},3},
{{0.01,0.01,0.04,0,0.1,0,0.2,0,0.55,0.12,0.39,0.59,0.03,0,0,0,0,0,0,0,0.02,0.03,0,0.08,0,0.19,0,0.31,0.17,0.22,0,1.78,6.48,258.11,216.67,232.93,7.55,0.06,0.05,7.55,0.09,7.55,10.11},3},
{{0.04,0.02,0.04,0,0.06,0,0.04,0,0.3,0.52,0.27,0.46,0.27,0,0,0,0,0,0,0,0.17,0.22,0,0.22,0,0.15,0,0.05,0.07,0.14,0,1.83,6.42,194.9,306.25,229.76,7.6,0.08,0.07,7.6,0.11,7.6,10.11},3},
{{0,0,0,0,0,0,0.01,0,0.15,0.17,0,0.11,0.22,0,0,0,0,0,0,0,0.1,0.15,0,0.06,0,0.02,0,0,0,0,0,0.63,2.07,261.11,371.43,400,2.47,0.42,1.39,7.62,1.3,7.62,3.28},3},
{{0.12,0.02,0,0.04,0,0.09,0.09,0.23,0.29,0.13,0.09,0.03,0,0,0.12,0,0,0,0.35,0.41,0.08,0.04,0.04,0.04,0.08,0.06,0.08,0.09,0.23,0.27,0,9.66,-0.98,261.11,404.35,400,1.92,0.05,0.15,1.95,0.11,1.95,9.9},4},
{{0.02,0.03,0,0.07,0,0.19,0.24,0.22,0.21,0.05,0.01,0.05,0,0,0.28,0,0,0,0.43,0.24,0,0.04,0.05,0.1,0.14,0.16,0.15,0.11,0.19,0.08,0,9.65,-1,261.11,284.38,400,1.94,0.03,0.08,1.94,0.04,1.94,9.9},4},
{{0.03,0.13,0,0.3,0,0.28,0.14,0.08,0.05,0,0,0.08,0,0,0.42,0,0,0,0.45,0.06,0,0,0.01,0.07,0.14,0.24,0.29,0.14,0.11,0.02,0,9.64,-1.01,261.11,364,400,2,0.03,0.05,2,0.03,2,9.9},4},
{{0.05,0.19,0,0.25,0,0.32,0.11,0.07,0.03,0,0,0.1,0,0,0.37,0,0,0,0.39,0.15,0,0.01,0.02,0.07,0.11,0.14,0.26,0.13,0.15,0.13,0,9.64,-0.98,261.11,285.29,400,2.01,0.03,0.07,2.01,0.04,2.01,9.9},4},
{{0.08,0.2,0,0.19,0,0.21,0.19,0.07,0.07,0,0.02,0.13,0,0,0.33,0,0,0,0.38,0.15,0,0.11,0.08,0.11,0.08,0.1,0.1,0.13,0.18,0.14,0,9.64,-1,261.11,404.17,400,2,0.03,0.11,2.01,0.04,2.01,9.9},4},
{{0.07,0.15,0,0.28,0,0.27,0.12,0.07,0.04,0.01,0.05,0.21,0,0,0.42,0,0,0,0.29,0.05,0.02,0.22,0.08,0.1,0.14,0.1,0.12,0.1,0.1,0.05,0,9.62,-1.07,261.11,289.39,400,2.01,0.03,0.1,2.01,0.04,2.01,9.89},4},
{{0.05,0.02,0,0.08,0,0.17,0.18,0.07,0.14,0.3,0.06,0.15,0,0,0.28,0,0,0,0.25,0.27,0.08,0.27,0.1,0.1,0.1,0.12,0.1,0.06,0.05,0.05,0,9.65,-1.11,261.11,245.45,400,1.87,0.05,0.13,1.88,0.07,1.88,9.89},4},
{{0.24,0.06,0,0.08,0,0.07,0.07,0.05,0.08,0.37,0.47,0.12,0,0,0.08,0,0,0,0.08,0.24,0.57,0.16,0.03,0.03,0.03,0.01,0.03,0.02,0.03,0.09,0,9.58,-1.37,261.11,213.33,400,1.89,0.11,0.31,1.91,0.14,1.91,9.88},4},
{{0.01,0,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0.01,0,0.01,0,0,0,0,0,0,0,0,0.01,0,0.14,-0.01,261.11,213.33,400,0.03,0.14,0.01,1.97,9.34,1.97,0.15},4},
{{0.01,0,0.01,0.15,0.41,0.27,0.04,0.03,0.04,0.06,0,0,0,0.04,0.07,0.05,0.12,0.38,0.19,0.16,0.02,0.05,0.06,0.07,0.17,0.5,0.14,0,0,0,0,5.42,6.44,345.65,337.5,262.86,5.57,0.07,0.08,5.58,0.25,5.58,10.1},3},
{{0.01,0,0,0.01,0.01,0.06,0.15,0.09,0.3,0.36,0.02,0,0,0.04,0.18,0.13,0.15,0.14,0.19,0.15,0.19,0.3,0.27,0.11,0.11,0.03,0.01,0,0,0,0,5.4,6.22,1014.29,2616.67,206.38,5.9,0.12,0.11,5.91,0.21,5.91,10.14},3},
{{0,0,0.01,0,0.01,0.12,0.17,0.24,0.35,0.11,0.02,0,0,0.03,0.14,0.21,0.09,0.08,0.3,0.15,0.05,0.31,0.21,0.25,0.11,0.05,0.02,0.01,0,0,0,5.39,6.28,400,316.07,244.64,5.83,0.1,0.1,5.83,0.14,5.83,10.13},3},
{{0.08,0,0.13,0.26,0.15,0.17,0.1,0.02,0.03,0.07,0.07,0,0.06,0.32,0.18,0.08,0.08,0.06,0.04,0.11,0.03,0.06,0.07,0.1,0.05,0.04,0.37,0.21,0.06,0.04,0,5.23,6.65,211.54,426.92,256.06,5.52,0.19,0.25,5.53,0.24,5.53,10.11},3},
{{0.21,0,0.76,0.04,0,0,0,0,0,0,0.09,0,0.5,0.41,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.31,0.5,0,4.99,7.11,408.33,311.29,293.94,5.24,0.02,0.04,5.25,0.06,5.25,10.15},3},
{{0.14,0,0.36,0.07,0.05,0.07,0.05,0.03,0.01,0.12,0.21,0,0.25,0.25,0.05,0.01,0.03,0.01,0.03,0.07,0.12,0.05,0.01,0.01,0.03,0.03,0.12,0.07,0.06,0.38,0,4.56,6.09,258.33,171.43,278.85,4.92,0.48,0.67,5.51,0.59,5.51,9.08},3},
{{0.29,0.05,0.02,0.04,0.02,0,0.15,0.17,0.12,0.16,0.25,0.06,0,0.05,0.01,0,0.1,0.13,0.2,0.21,0.07,0.02,0.02,0.02,0.02,0.04,0.13,0.06,0.22,0.42,0,8.45,0.24,258.33,537.5,1300,4.96,0.28,0.44,4.99,0.42,4.99,9.83},4},
{{0.04,0.02,0.01,0.01,0.01,0,0.02,0.16,0.27,0.49,0.04,0.02,0,0.03,0.04,0,0.05,0.17,0.35,0.33,0.25,0.3,0.21,0.06,0.04,0.04,0.05,0.03,0.02,0.03,0,8.6,-0.34,258.33,311.29,175,4.64,0.11,0.14,4.65,0.16,4.65,9.79},4},
{{0.09,0.16,0.05,0.09,0.06,0,0.1,0.27,0.12,0.08,0.06,0.06,0,0.1,0.13,0,0.14,0.38,0.1,0.05,0.22,0.15,0.13,0.02,0.02,0.03,0.08,0.05,0.25,0.07,0,8.49,-0.2,258.33,322.41,1300,4.88,0.1,0.25,4.89,0.19,4.89,9.8},4},
{{0.03,0.12,0.03,0.06,0.14,0,0.3,0.16,0.09,0.1,0.06,0.05,0,0.11,0.12,0,0.19,0.27,0.12,0.1,0.03,0.03,0.06,0.07,0.1,0.06,0.21,0.14,0.28,0.05,0,8.49,-0.1,258.33,228.57,900,4.88,0.11,0.14,4.88,0.17,4.88,9.8},4},
{{0.06,0.27,0.19,0.14,0.19,0,0.12,0.03,0.02,0.01,0.08,0.27,0,0.23,0.25,0,0.12,0.04,0.02,0.01,0.01,0.01,0.07,0.11,0.18,0.15,0.34,0.08,0.08,0,0,8.39,-0.17,258.33,286.76,3125,5,0.06,0.08,5,0.09,5,9.77},4},
{{0.01,0.08,0.2,0.34,0.25,0,0.14,0.01,0,0,0.02,0.16,0,0.34,0.35,0,0.09,0.05,0.01,0,0.01,0.02,0.07,0.14,0.17,0.19,0.31,0.08,0.04,0,0,8.41,-0.19,258.33,328.33,3125,4.97,0.04,0.06,4.98,0.06,4.98,9.77},4},
{{0.12,0.07,0.03,0.06,0.23,0,0.34,0.14,0.03,0.01,0.12,0.03,0,0.14,0.27,0,0.23,0.11,0.11,0.01,0.01,0.03,0.17,0.16,0.1,0.13,0.15,0.05,0.07,0.15,0,8.43,-0.04,258.33,242.5,116.67,4.96,0.08,0.31,4.97,0.14,4.97,9.79},4},
{{0.15,0.07,0.05,0.05,0.14,0,0.22,0.13,0.08,0.11,0.16,0.07,0,0.08,0.22,0,0.1,0.14,0.1,0.1,0.09,0.05,0.1,0.14,0.13,0.07,0.11,0.05,0.12,0.11,0,8.39,-0.05,258.33,1566.67,200,4.84,0.2,0.35,4.91,0.35,4.91,9.71},4},
{{0.07,0.1,0.1,0.08,0.08,0.12,0.1,0.14,0.07,0.16,0.1,0.12,0.12,0.08,0.08,0.07,0.08,0.1,0.11,0.13,0.06,0.06,0.1,0.1,0.09,0.09,0.1,0.11,0.12,0.2,0,8.49,-1.31,2175,346.15,1300,3.82,6.86,2.34,4.88,7.56,4.88,11.11},0},
{{0.24,0.11,0.06,0.08,0.11,0.13,0.09,0.08,0.06,0.07,0.03,0.1,0.16,0.16,0.12,0.12,0.05,0.1,0.1,0.08,0.07,0.05,0.06,0.07,0.07,0.11,0.08,0.05,0.17,0.3,0,7.75,-0.28,1200,520,1175,5.28,5.58,2.86,6.9,6.34,6.9,10.78},0},
{{0.29,0.1,0.05,0.14,0.11,0.11,0.06,0.03,0.07,0.07,0.13,0.11,0.13,0.17,0.13,0.07,0.1,0.1,0.07,0.02,0.2,0.12,0.09,0.09,0.07,0.06,0.09,0.05,0.04,0.2,0,6,-2.74,2825,1500,3375,6.57,5.16,3.98,8.52,6.07,8.52,11.33},0},
{{0.35,0.07,0.06,0.1,0.14,0.06,0.05,0.05,0.05,0.09,0.17,0.08,0.12,0.19,0.15,0.1,0.08,0.05,0.04,0.04,0.32,0.09,0.12,0.12,0.07,0.04,0.05,0.04,0.05,0.12,0,5.02,-4.29,2300,1056.25,1600,6.97,4.65,4.09,8.8,5.87,8.8,11.7},0},
{{0.14,0.08,0.07,0.1,0.11,0.11,0.08,0.08,0.1,0.16,0.11,0.12,0.09,0.14,0.1,0.11,0.08,0.07,0.09,0.1,0.15,0.07,0.08,0.08,0.07,0.08,0.06,0.11,0.09,0.24,0,7.57,-1.92,550,560.71,3100,4.62,6.17,3.51,6.22,7.05,6.22,11.38},0},
{{0.04,0.02,0.04,0.09,0.09,0.07,0.1,0.14,0.14,0.29,0.18,0.05,0.04,0.11,0.11,0.1,0.05,0.12,0.14,0.13,0,0,0.04,0.04,0.06,0.09,0.08,0.09,0.15,0.46,0,8.26,1.04,3200,372,2866.67,3.62,6.89,1.97,4.8,7.81,4.8,11.07},0},
{{0.05,0.05,0.08,0.12,0.1,0.07,0.07,0.14,0.14,0.19,0.1,0.1,0.05,0.14,0.11,0.07,0.1,0.11,0.15,0.09,0.03,0.03,0.02,0.06,0.05,0.11,0.06,0.06,0.14,0.46,0,8.51,0.7,1075,445,1087.5,3.74,6.42,2.5,4.74,7.23,4.74,11.03},0},
{{0.2,0.14,0.11,0.07,0.08,0.04,0.05,0.06,0.11,0.17,0.14,0.08,0.07,0.1,0.15,0.1,0.07,0.12,0.11,0.07,0,0.02,0.04,0.04,0.1,0.07,0.05,0.11,0.11,0.48,0,7.85,1.05,3575,571.88,1475,5.46,6.12,2.29,6.62,6.97,6.62,11.14},0},
{{0.16,0.13,0.13,0.07,0.05,0.07,0.05,0.08,0.14,0.15,0.11,0.1,0.08,0.09,0.11,0.09,0.09,0.15,0.09,0.09,0.03,0.03,0.06,0.07,0.06,0.06,0.1,0.11,0.08,0.42,0,8.4,0.46,2075,527.78,3875,4.77,6.34,2.64,5.8,7.08,5.8,11.36},0},
{{0.3,0.16,0.04,0.06,0.05,0.05,0.1,0.09,0.05,0.13,0.1,0.1,0.13,0.11,0.1,0.16,0.08,0.06,0.11,0.07,0.06,0.08,0.07,0.06,0.05,0.08,0.06,0.12,0.15,0.3,0,7.63,-0.56,1050,513.89,1925,5.88,5.85,2.9,7.23,6.73,7.23,11.45},0},
{{0.13,0.05,0.06,0.09,0.1,0.11,0.08,0.14,0.14,0.11,0.11,0.13,0.09,0.11,0.12,0.08,0.06,0.12,0.13,0.09,0.12,0.08,0.08,0.08,0.08,0.1,0.08,0.1,0.11,0.2,0,7.9,-1.44,3425,578.13,525,4.05,6.44,3.34,5.83,7.22,5.83,11.2},0},
{{0.16,0.12,0.06,0.12,0.08,0.09,0.1,0.06,0.11,0.11,0.11,0.07,0.12,0.11,0.13,0.1,0.11,0.07,0.1,0.09,0.1,0.07,0.08,0.08,0.14,0.12,0.14,0.1,0.08,0.1,0,7.93,-2.13,1075,419.57,4075,4.5,6.08,2.37,5.71,6.9,5.71,10.83},0},
{{0.29,0.12,0.06,0.1,0.08,0.09,0.08,0.04,0.07,0.1,0.07,0.09,0.13,0.15,0.12,0.11,0.09,0.07,0.14,0.04,0.09,0.05,0.08,0.1,0.1,0.07,0.04,0.1,0.13,0.27,0,7.53,-0.81,1725,775,1650,6.19,5.64,3.17,7.74,6.46,7.74,11.36},0},
{{0.21,0.11,0.08,0.12,0.08,0.09,0.08,0.08,0.09,0.08,0.08,0.12,0.07,0.13,0.13,0.13,0.08,0.09,0.13,0.05,0.09,0.11,0.12,0.11,0.11,0.09,0.13,0.08,0.09,0.09,0,7.84,-2.14,1825,650,375,5.1,5.69,2.49,6.55,6.51,6.55,11.01},0},
{{0.23,0.15,0.08,0.05,0.09,0.09,0.07,0.09,0.11,0.07,0.09,0.11,0.15,0.09,0.13,0.1,0.08,0.1,0.1,0.06,0.08,0.09,0.09,0.07,0.11,0.12,0.12,0.12,0.13,0.09,0,7.44,-2.04,2150,635.71,2325,5.35,5.79,2.35,6.74,6.64,6.74,10.72},0},
{{0.33,0.11,0.05,0.06,0.12,0.09,0.1,0.05,0.07,0.06,0.04,0.13,0.12,0.13,0.16,0.14,0.06,0.08,0.08,0.06,0.08,0.05,0.06,0.08,0.07,0.1,0.09,0.1,0.13,0.27,0,7.3,-0.53,875,730.77,375,6.07,5.21,2.95,7.75,6.14,7.75,11.09},0},
{{0.05,0.03,0.08,0.1,0.11,0.14,0.14,0.16,0.09,0.11,0.05,0.11,0.14,0.07,0.1,0.1,0.12,0.11,0.11,0.11,0.09,0.13,0.15,0.16,0.1,0.09,0.11,0.09,0.08,0.03,0,8.88,-2.78,1050,477.5,1850,2.96,6.05,2.13,4.02,6.73,4.02,10.75},0},
{{0.06,0.04,0.13,0.13,0.12,0.11,0.08,0.12,0.12,0.12,0.08,0.11,0.11,0.09,0.08,0.1,0.1,0.12,0.11,0.11,0.06,0.11,0.12,0.1,0.1,0.13,0.11,0.08,0.15,0.06,0,8.61,-2.07,2175,441.67,1150,3.51,6.31,2.17,4.45,7.06,4.45,10.85},0},
{{0.11,0.07,0.11,0.11,0.08,0.13,0.1,0.14,0.11,0.06,0.07,0.13,0.07,0.12,0.1,0.11,0.1,0.12,0.12,0.09,0.1,0.1,0.13,0.1,0.07,0.17,0.12,0.12,0.09,0.02,0,8.5,-2.51,4650,489.47,4500,3.84,6.13,2.23,5.1,6.89,5.1,10.84},0},
{{0.11,0.17,0.1,0.09,0.05,0.07,0.1,0.12,0.11,0.1,0.08,0.11,0.11,0.08,0.12,0.09,0.13,0.09,0.11,0.09,0.07,0.09,0.11,0.13,0.11,0.1,0.14,0.1,0.12,0.05,0,8.37,-2.16,750,492.5,925,4.39,6.03,2.09,5.52,6.76,5.52,10.82},0},
{{0.13,0.18,0.11,0.09,0.07,0.06,0.08,0.13,0.08,0.1,0.1,0.11,0.12,0.08,0.11,0.1,0.11,0.09,0.07,0.12,0.09,0.08,0.12,0.11,0.09,0.1,0.11,0.14,0.11,0.06,0,7.97,-2.27,2883.33,400,1450,4.69,6.14,2.33,5.82,6.94,5.82,10.88},0},
{{0.04,0.04,0.05,0.1,0.13,0.11,0.16,0.13,0.15,0.12,0.08,0.11,0.08,0.12,0.08,0.07,0.11,0.13,0.13,0.12,0.08,0.1,0.05,0.11,0.12,0.11,0.13,0.12,0.12,0.09,0,9.02,-1.93,1825,391.3,1250,2.82,6.4,2.22,3.84,7.09,3.84,11.02},0},
{{0.03,0.01,0.05,0.13,0.16,0.16,0.13,0.12,0.13,0.11,0.09,0.09,0.13,0.08,0.1,0.09,0.11,0.11,0.11,0.1,0.1,0.14,0.08,0.14,0.11,0.12,0.13,0.13,0.06,0.02,0,8.53,-2.75,3200,393.75,2583.33,2.71,6.31,2.28,3.48,7.06,3.48,10.65},0},
{{0.02,0.01,0.05,0.12,0.14,0.15,0.16,0.13,0.13,0.11,0.11,0.1,0.1,0.12,0.05,0.08,0.1,0.12,0.12,0.09,0.11,0.15,0.13,0.13,0.15,0.11,0.08,0.11,0.04,0.01,0,8.36,-3.13,1450,457.14,2616.67,2.48,6.58,2.29,3.18,7.27,3.18,10.64},0},
{{0.06,0.08,0.1,0.12,0.12,0.11,0.12,0.08,0.13,0.11,0.07,0.1,0.13,0.1,0.1,0.09,0.09,0.13,0.1,0.11,0.12,0.13,0.08,0.16,0.09,0.11,0.15,0.08,0.07,0.03,0,8.35,-2.86,3575,386,1600,3.66,6.27,2.35,4.64,7.08,4.64,10.91},0},
{{0.05,0.08,0.14,0.12,0.13,0.1,0.11,0.05,0.14,0.1,0.13,0.05,0.13,0.1,0.11,0.11,0.15,0.07,0.05,0.09,0.15,0.11,0.07,0.13,0.11,0.12,0.1,0.1,0.1,0.02,0,7.72,-2.89,3350,423.81,2700,3.76,6.15,2.56,4.7,7.03,4.7,10.5},0},
{{0.05,0.06,0.11,0.12,0.15,0.09,0.07,0.14,0.13,0.09,0.11,0.11,0.12,0.07,0.09,0.1,0.13,0.11,0.09,0.08,0.17,0.12,0.09,0.1,0.14,0.11,0.12,0.1,0.06,0.02,0,7.87,-3.22,2400,440.91,1925,3.46,6.31,2.69,4.31,7.1,4.31,10.63},0},
{{0.04,0.04,0.11,0.15,0.11,0.11,0.11,0.14,0.13,0.1,0.14,0.09,0.1,0.08,0.09,0.11,0.12,0.08,0.1,0.11,0.17,0.14,0.12,0.14,0.14,0.1,0.08,0.06,0.05,0.03,0,8.07,-3.52,2500,429.55,1950,3.21,6.45,2.61,4.07,7.28,4.07,10.85},0},
{{0.03,0.03,0.09,0.18,0.16,0.09,0.08,0.1,0.14,0.12,0.15,0.1,0.07,0.09,0.09,0.1,0.11,0.12,0.04,0.12,0.17,0.14,0.15,0.08,0.15,0.1,0.1,0.04,0.07,0.02,0,7.95,-3.45,2333.33,351.85,2425,3.22,6.53,2.53,3.89,7.39,3.89,10.83},0},
{{0.03,0.03,0.1,0.12,0.13,0.14,0.08,0.12,0.13,0.14,0.17,0.09,0.08,0.06,0.12,0.12,0.09,0.11,0.06,0.11,0.23,0.1,0.1,0.17,0.1,0.11,0.06,0.04,0.05,0.06,0,7.67,-3.71,1425,445.24,3450,3.12,6.33,2.95,3.91,7.25,3.91,10.63},0},
{{0.02,0.01,0.07,0.14,0.12,0.19,0.09,0.12,0.14,0.12,0.11,0.12,0.12,0.05,0.12,0.08,0.13,0.13,0.09,0.08,0.24,0.08,0.14,0.14,0.09,0.12,0.07,0.08,0.05,0.02,0,7.95,-3.85,2875,486.11,4400,2.97,6.37,2.88,3.75,7.14,3.75,10.77},0},
{{0.04,0.06,0.04,0.1,0.11,0.16,0.12,0.15,0.11,0.13,0.1,0.11,0.09,0.11,0.12,0.07,0.15,0.1,0.09,0.07,0.19,0.07,0.15,0.13,0.1,0.08,0.08,0.09,0.08,0.05,0,7.93,-3.44,4325,540.63,4700,3.09,6.02,3.03,4.17,6.81,4.17,10.59},0},
{{0.1,0.11,0.13,0.1,0.06,0.13,0.06,0.11,0.1,0.14,0.13,0.1,0.09,0.09,0.08,0.1,0.13,0.1,0.08,0.11,0.12,0.1,0.12,0.12,0.16,0.09,0.09,0.07,0.12,0.04,0,7.97,-2.75,2166.67,377.08,1533.33,4.32,6.42,2.46,5.37,7.26,5.37,11.09},0},
{{0.08,0.1,0.16,0.08,0.1,0.07,0.1,0.09,0.11,0.13,0.11,0.1,0.08,0.13,0.07,0.12,0.11,0.09,0.11,0.1,0.09,0.13,0.12,0.12,0.14,0.15,0.1,0.04,0.1,0.04,0,8.18,-2.69,1716.67,406.25,1983.33,4.17,6.2,2.25,5.19,7.01,5.19,10.87},0},
{{0.03,0.14,0.12,0.08,0.14,0.06,0.11,0.13,0.09,0.12,0.16,0.08,0.12,0.05,0.09,0.11,0.1,0.11,0.12,0.09,0.12,0.08,0.17,0.13,0.09,0.11,0.09,0.11,0.09,0.04,0,7.87,-2.76,700,454.76,4025,3.62,6.49,2.34,4.54,7.28,4.54,10.66},0},
{{0.06,0.1,0.12,0.14,0.11,0.07,0.12,0.15,0.09,0.07,0.08,0.12,0.09,0.13,0.1,0.08,0.12,0.09,0.09,0.12,0.09,0.13,0.11,0.11,0.12,0.1,0.13,0.14,0.07,0.03,0,8.26,-2.64,725,400,1625,3.8,6.27,2.3,4.92,7.02,4.92,10.74},0},
{{0.06,0.11,0.12,0.13,0.12,0.1,0.13,0.1,0.1,0.06,0.08,0.1,0.12,0.13,0.08,0.09,0.07,0.12,0.12,0.12,0.06,0.13,0.11,0.12,0.07,0.15,0.11,0.13,0.11,0.02,0,8.48,-2.41,3300,400,1100,3.68,6.37,2.25,4.68,7.05,4.68,10.79},0},
{{0.06,0.12,0.14,0.1,0.08,0.1,0.16,0.11,0.06,0.09,0.07,0.15,0.11,0.07,0.08,0.14,0.1,0.11,0.12,0.08,0.11,0.13,0.09,0.13,0.07,0.12,0.13,0.11,0.09,0.04,0,8.29,-2.77,2275,508.33,1050,3.77,6.04,2.55,4.85,6.81,4.85,10.77},0},
{{0.05,0.1,0.16,0.13,0.09,0.07,0.14,0.13,0.09,0.06,0.07,0.11,0.11,0.12,0.08,0.09,0.11,0.12,0.1,0.11,0.06,0.12,0.11,0.13,0.08,0.13,0.1,0.12,0.15,0.02,0,8.4,-2.22,2550,368,3375,3.67,6.1,2.07,4.68,6.79,4.68,10.4},0},
{{0.07,0.12,0.13,0.1,0.1,0.1,0.09,0.11,0.11,0.1,0.09,0.11,0.09,0.1,0.11,0.08,0.13,0.12,0.09,0.09,0.07,0.13,0.11,0.13,0.09,0.13,0.07,0.13,0.1,0.08,0,8.27,-2.37,1850,442.86,2150,4.07,6.14,2.33,5.17,6.85,5.17,10.8},0},
{{0.07,0.11,0.12,0.12,0.06,0.13,0.11,0.11,0.1,0.09,0.09,0.12,0.12,0.06,0.09,0.11,0.11,0.13,0.09,0.1,0.08,0.14,0.07,0.08,0.12,0.12,0.12,0.09,0.15,0.05,0,8.28,-2.27,3275,452.38,4250,3.89,6.13,2.35,5.01,6.83,5.01,10.63},0},
{{0.07,0.1,0.12,0.14,0.1,0.09,0.11,0.11,0.09,0.1,0.09,0.13,0.1,0.1,0.08,0.1,0.12,0.12,0.09,0.09,0.07,0.14,0.09,0.1,0.09,0.12,0.12,0.13,0.09,0.06,0,8.13,-2.34,1450,469.44,1825,4.01,6.24,2.36,5.17,6.94,5.17,10.66},0},
{{0.05,0.14,0.14,0.1,0.07,0.08,0.13,0.1,0.11,0.1,0.13,0.09,0.1,0.09,0.09,0.09,0.09,0.13,0.11,0.1,0.09,0.12,0.1,0.09,0.07,0.12,0.11,0.15,0.12,0.05,0,8.15,-2.37,3300,445.45,983.33,3.84,6.52,2.49,4.85,7.26,4.85,10.93},0},
{{0.1,0.09,0.12,0.1,0.08,0.15,0.12,0.09,0.08,0.09,0.1,0.08,0.11,0.1,0.11,0.13,0.12,0.1,0.07,0.1,0.08,0.11,0.14,0.08,0.08,0.12,0.12,0.1,0.14,0.06,0,8.16,-2.19,1500,459.52,1612.5,3.99,5.91,2.31,5.23,6.68,5.23,10.55},0},
{{0.07,0.12,0.08,0.13,0.1,0.09,0.12,0.1,0.13,0.09,0.11,0.12,0.1,0.09,0.09,0.1,0.11,0.13,0.13,0.05,0.13,0.09,0.09,0.06,0.12,0.14,0.09,0.1,0.14,0.07,0,7.94,-2.49,2700,863.64,2500,3.98,6.2,2.71,5.16,6.89,5.16,10.71},0},
{{0.05,0.13,0.14,0.11,0.09,0.14,0.1,0.1,0.08,0.07,0.06,0.13,0.11,0.1,0.08,0.07,0.16,0.11,0.14,0.07,0.08,0.1,0.1,0.07,0.08,0.14,0.14,0.16,0.13,0.04,0,8.48,-2.09,1400,661.54,2333.33,3.75,6.04,2.28,4.79,6.65,4.79,10.64},0},
{{0.07,0.12,0.14,0.11,0.11,0.07,0.14,0.11,0.09,0.07,0.06,0.11,0.14,0.08,0.08,0.11,0.08,0.13,0.13,0.1,0.08,0.08,0.14,0.08,0.1,0.09,0.14,0.16,0.11,0.06,0,8.56,-2.19,2525,365.91,2650,3.82,6.23,2.32,4.89,6.92,4.89,10.87},0},
{{0.08,0.13,0.12,0.09,0.12,0.1,0.14,0.07,0.09,0.08,0.1,0.08,0.1,0.1,0.1,0.1,0.06,0.11,0.15,0.11,0.07,0.11,0.09,0.1,0.13,0.11,0.1,0.16,0.11,0.05,0,8.52,-2.16,1716.67,460.53,2433.33,4.02,6.41,2.23,5.13,7.17,5.13,11.13},0},
{{0.12,0.11,0.08,0.11,0.1,0.09,0.1,0.12,0.11,0.09,0.11,0.13,0.08,0.08,0.08,0.12,0.12,0.11,0.09,0.1,0.07,0.14,0.1,0.09,0.07,0.13,0.12,0.13,0.1,0.08,0,8.09,-2.26,2500,445.24,1666.67,4.1,6.3,2.43,5.29,7.07,5.29,10.8},0},
{{0.1,0.1,0.13,0.1,0.13,0.09,0.09,0.08,0.11,0.1,0.1,0.13,0.07,0.07,0.12,0.1,0.17,0.09,0.04,0.12,0.09,0.14,0.1,0.09,0.11,0.1,0.09,0.11,0.14,0.05,0,8.04,-2.38,1875,381.25,1000,4.28,6.03,2.39,5.43,6.88,5.43,10.69},0},
{{0.09,0.14,0.13,0.07,0.13,0.1,0.11,0.08,0.08,0.1,0.07,0.11,0.12,0.1,0.11,0.1,0.11,0.11,0.07,0.12,0.1,0.06,0.13,0.08,0.11,0.11,0.14,0.12,0.14,0.04,0,8.31,-2.23,2200,365.38,1716.67,4.24,6.01,2.33,5.39,6.79,5.39,10.8},0},
{{0.05,0.13,0.11,0.14,0.1,0.12,0.1,0.1,0.08,0.08,0.1,0.1,0.09,0.1,0.12,0.09,0.1,0.11,0.09,0.12,0.09,0.13,0.11,0.07,0.11,0.13,0.13,0.13,0.08,0.04,0,8.33,-2.58,1125,372.92,1966.67,3.8,6.25,2.42,4.7,7.01,4.7,10.83},0},
{{0.05,0.15,0.13,0.14,0.09,0.09,0.12,0.1,0.09,0.06,0.08,0.11,0.09,0.11,0.08,0.15,0.08,0.09,0.14,0.09,0.07,0.13,0.15,0.1,0.08,0.12,0.12,0.1,0.11,0.04,0,8.52,-2.44,1475,478.95,3050,3.98,6.17,2.25,4.98,6.98,4.98,10.92},0},
{{0.04,0.15,0.14,0.12,0.13,0.07,0.11,0.13,0.09,0.05,0.09,0.13,0.1,0.08,0.1,0.07,0.1,0.12,0.13,0.1,0.08,0.11,0.11,0.09,0.11,0.09,0.15,0.14,0.11,0.04,0,8.45,-2.33,1425,382.61,2600,3.69,6.36,2.33,4.54,6.99,4.54,10.72},0},
{{0.06,0.15,0.12,0.13,0.14,0.08,0.11,0.14,0.03,0.07,0.07,0.08,0.11,0.14,0.11,0.07,0.09,0.08,0.13,0.13,0.06,0.11,0.12,0.1,0.15,0.08,0.12,0.17,0.1,0.02,0,8.69,-2.27,4425,402.08,2075,3.8,6.2,2.06,4.8,6.92,4.8,10.85},0},
{{0.05,0.14,0.08,0.06,0.17,0.07,0.13,0.08,0.12,0.13,0.09,0.08,0.09,0.1,0.16,0.14,0.1,0.09,0.1,0.06,0.14,0.16,0.12,0.13,0.1,0.11,0.11,0.05,0.1,0.01,0,7.85,-3.22,1800,590.63,1775,3.79,5.54,2.47,4.79,6.48,4.79,10.6},0},
{{0.14,0.16,0.06,0.08,0.05,0.08,0.13,0.1,0.13,0.1,0.14,0.11,0.08,0.09,0.07,0.1,0.08,0.13,0.09,0.13,0.09,0.14,0.15,0.1,0.1,0.1,0.09,0.07,0.11,0.08,0,8.27,-2.5,1050,438.64,2250,4.39,6.77,2.42,5.68,7.54,5.68,11.33},0},
{{0.08,0.19,0.09,0.06,0.09,0.08,0.11,0.07,0.13,0.11,0.14,0.09,0.13,0.08,0.08,0.1,0.08,0.1,0.11,0.11,0.08,0.13,0.08,0.14,0.12,0.1,0.1,0.11,0.12,0.04,0,8.01,-2.44,1775,348.08,2283.33,4.18,6.62,2.29,5.23,7.36,5.23,10.92},0},
{{0.09,0.19,0.09,0.1,0.11,0.1,0.1,0.08,0.09,0.08,0.12,0.09,0.09,0.13,0.07,0.06,0.12,0.09,0.13,0.09,0.07,0.14,0.1,0.13,0.13,0.09,0.12,0.09,0.13,0.02,0,8.24,-2.51,2250,421.74,4100,4.28,6.69,2.18,5.36,7.4,5.36,11},0},
{{0.11,0.14,0.15,0.07,0.05,0.12,0.07,0.07,0.11,0.14,0.16,0.06,0.09,0.09,0.1,0.11,0.14,0.11,0.04,0.09,0.11,0.14,0.13,0.09,0.1,0.1,0.06,0.1,0.08,0.12,0,7.79,-2.49,750,406.82,1410,4.95,6.31,2.59,6.17,7.22,6.17,11.18},0},
{{0.05,0.15,0.12,0.08,0.13,0.16,0.12,0.05,0.08,0.07,0.11,0.07,0.06,0.09,0.13,0.19,0.11,0.08,0.08,0.09,0.1,0.12,0.08,0.14,0.1,0.08,0.12,0.1,0.09,0.09,0,8.16,-2.49,2950,380,2950,3.81,5.5,2.48,4.88,6.51,4.88,10.75},0},
{{0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0.04,-0.03,2950,380,2950,0,0.04,0.03,2.41,8.62,2.41,0.05},0},
{{0.11,0.18,0.14,0.14,0.11,0.08,0.05,0.08,0.07,0.06,0.11,0.06,0.08,0.08,0.08,0.07,0.12,0.15,0.14,0.11,0.11,0.12,0.08,0.1,0.12,0.09,0.09,0.09,0.11,0.13,0,9.72,-0.31,1290,620,2366.67,5.55,4.07,4.47,7.08,5.04,7.08,13.2},1},
{{0.15,0.08,0.11,0.1,0.1,0.1,0.09,0.1,0.08,0.1,0.13,0.09,0.08,0.11,0.08,0.08,0.08,0.08,0.15,0.14,0.16,0.11,0.09,0.08,0.05,0.11,0.09,0.11,0.11,0.11,0,9.49,-0.95,1566.67,540.63,1390,7.2,4.51,5.3,8.69,5.46,8.69,14.31},1},
{{0.14,0.07,0.11,0.07,0.08,0.09,0.09,0.14,0.11,0.12,0.11,0.12,0.07,0.11,0.06,0.11,0.13,0.11,0.09,0.12,0.11,0.1,0.09,0.07,0.07,0.08,0.17,0.12,0.11,0.1,0,9.01,-0.19,1591.67,960,1400,7.64,3.94,4.46,9.13,4.92,9.13,13.77},1},
{{0.11,0.09,0.1,0.08,0.08,0.15,0.11,0.09,0.1,0.11,0.09,0.12,0.1,0.08,0.1,0.11,0.13,0.09,0.09,0.09,0.12,0.09,0.1,0.08,0.15,0.06,0.11,0.1,0.1,0.11,0,8.89,-0.49,1633.33,609.09,2283.33,7.43,3.74,4.51,8.83,4.7,8.83,13.51},1},
{{0.11,0.07,0.12,0.09,0.11,0.1,0.08,0.1,0.13,0.11,0.07,0.12,0.1,0.12,0.13,0.12,0.03,0.14,0.11,0.08,0.11,0.1,0.09,0.11,0.11,0.1,0.1,0.1,0.12,0.09,0,8.73,-0.68,1541.67,1470,3250,7.48,3.57,4.46,9.02,4.49,9.02,13.5},1},
{{0.1,0.07,0.04,0.16,0.09,0.11,0.13,0.1,0.11,0.12,0.11,0.07,0.13,0.14,0.11,0.07,0.12,0.09,0.12,0.08,0.09,0.1,0.13,0.09,0.09,0.1,0.09,0.13,0.1,0.1,0,8.65,-0.2,1862.5,1292.86,2075,7.67,3.67,4.35,9,4.62,9,13.36},1},
{{0.1,0.12,0.09,0.04,0.13,0.09,0.11,0.1,0.11,0.12,0.09,0.09,0.13,0.1,0.12,0.09,0.11,0.12,0.08,0.11,0.08,0.13,0.11,0.11,0.09,0.11,0.07,0.12,0.08,0.12,0,8.98,-0.4,1300,890,2350,7.37,3.6,4.32,8.87,4.49,8.87,13.48},1},
{{0.08,0.09,0.09,0.14,0.08,0.12,0.14,0.09,0.09,0.1,0.13,0.12,0.13,0.06,0.1,0.1,0.08,0.09,0.08,0.11,0.08,0.11,0.07,0.12,0.13,0.15,0.09,0.08,0.09,0.09,0,8.6,-0.33,1300,740.91,2150,7.29,4.13,3.87,8.68,5.1,8.68,13},1},
{{0.05,0.12,0.11,0.09,0.1,0.1,0.11,0.13,0.12,0.09,0.08,0.1,0.1,0.13,0.13,0.1,0.15,0.09,0.07,0.08,0.08,0.07,0.12,0.16,0.09,0.11,0.11,0.08,0.12,0.08,0,8.63,-0.38,1328.57,890.91,3950,7.29,3.27,3.82,8.73,4.23,8.73,12.89},1},
{{0.01,0.07,0.05,0.06,0.08,0.06,0.07,0.05,0.05,0.04,0.05,0.08,0.06,0.04,0.07,0.07,0.05,0.03,0.05,0.04,0.03,0.05,0.08,0.08,0.07,0.04,0.06,0.04,0.06,0.04,0,4.35,-0.29,825,1725,1125,3.74,2.38,1.82,8.51,5.79,8.51,6.49},1},
{{0.22,0.08,0.08,0.12,0.07,0.07,0.1,0.09,0.1,0.09,0.12,0.09,0.05,0.05,0.09,0.06,0.09,0.1,0.14,0.23,0.14,0.1,0.1,0.07,0.1,0.11,0.06,0.09,0.1,0.13,0,8.05,-0.45,2925,2087.5,2400,6.83,3.13,2.11,7.71,3.92,7.71,11.37},5},
{{0.19,0.1,0.08,0.12,0.08,0.11,0.09,0.1,0.08,0.08,0.08,0.09,0.09,0.08,0.07,0.11,0.09,0.07,0.12,0.22,0.06,0.11,0.08,0.1,0.07,0.12,0.11,0.14,0.11,0.13,0,7.81,-0.07,1662.5,2900,3325,6.83,2.78,1.79,7.68,3.54,7.68,11.09},5},
{{0.19,0.11,0.1,0.1,0.07,0.13,0.05,0.06,0.1,0.11,0.04,0.12,0.1,0.07,0.09,0.07,0.09,0.12,0.12,0.19,0.09,0.08,0.11,0.08,0.11,0.13,0.14,0.07,0.1,0.1,0,7.87,-0.45,1700,2425,3025,6.87,2.64,1.63,7.74,3.32,7.74,11.12},5},
{{0.16,0.1,0.1,0.11,0.13,0.09,0.1,0.09,0.08,0.07,0.08,0.07,0.09,0.07,0.11,0.1,0.09,0.14,0.09,0.18,0.07,0.06,0.13,0.1,0.1,0.14,0.14,0.09,0.11,0.08,0,7.52,-0.42,2683.33,2262.5,4800,6.93,2.5,1.57,7.7,3.24,7.7,10.87},5},
{{0.15,0.08,0.09,0.11,0.1,0.12,0.12,0.08,0.09,0.09,0.11,0.07,0.06,0.1,0.13,0.08,0.12,0.07,0.11,0.16,0.08,0.05,0.1,0.08,0.12,0.08,0.14,0.13,0.11,0.13,0,7.36,-0.25,1950,725,2883.33,7.13,2.61,1.7,7.86,3.39,7.86,10.88},5},
{{0.18,0.09,0.16,0.1,0.09,0.07,0.07,0.08,0.08,0.08,0.09,0.08,0.06,0.11,0.09,0.11,0.07,0.1,0.13,0.19,0.09,0.09,0.1,0.09,0.14,0.09,0.08,0.15,0.07,0.12,0,7.68,-0.35,3475,2725,2100,6.85,2.59,1.85,7.73,3.26,7.73,10.96},5},
{{0.1,0.16,0.11,0.13,0.11,0.15,0.08,0.06,0.08,0.06,0.08,0.09,0.06,0.07,0.11,0.09,0.15,0.13,0.12,0.13,0.04,0.04,0.1,0.11,0.14,0.12,0.15,0.13,0.09,0.09,0,7.42,-0.19,3300,1730,800,6.9,2.29,1.55,7.48,3,7.48,10.73},5},
{{0.09,0.11,0.19,0.17,0.1,0.08,0.06,0.1,0.08,0.04,0.08,0.04,0.11,0.07,0.1,0.1,0.18,0.11,0.13,0.11,0.07,0.08,0.11,0.09,0.12,0.07,0.16,0.09,0.11,0.12,0,7.47,-0.37,3400,3033.33,2800,6.87,2,1.61,7.35,2.65,7.35,10.59},5},
{{0.11,0.15,0.13,0.12,0.16,0.08,0.05,0.09,0.05,0.08,0.12,0.05,0.06,0.07,0.05,0.16,0.18,0.11,0.09,0.13,0.07,0.08,0.07,0.11,0.08,0.12,0.14,0.12,0.12,0.11,0,7.44,-0.23,1875,1750,2200,6.85,2.37,1.65,7.51,3.28,7.51,10.71},5},
{{0.06,0.14,0.2,0.11,0.11,0.09,0.08,0.08,0.06,0.1,0.04,0.12,0.08,0.09,0.08,0.1,0.12,0.19,0.09,0.12,0.06,0.09,0.07,0.09,0.12,0.13,0.11,0.14,0.13,0.08,0,7.44,-0.36,3125,1710,2425,7.15,2.05,1.59,7.62,2.57,7.62,10.81},5},
{{0.03,0.11,0.15,0.17,0.15,0.08,0.09,0.12,0.05,0.08,0.1,0.09,0.05,0.07,0.12,0.17,0.14,0.1,0.13,0.05,0.08,0.07,0.11,0.14,0.1,0.11,0.1,0.14,0.1,0.08,0,6.89,-0.54,2333.33,1183.33,1800,7.35,2.02,1.47,7.75,2.75,7.75,10.56},5},
{{0.11,0.13,0.15,0.17,0.13,0.1,0.05,0.07,0.05,0.06,0.09,0.04,0.08,0.08,0.11,0.09,0.14,0.08,0.15,0.16,0.07,0.12,0.11,0.12,0.11,0.1,0.06,0.12,0.11,0.11,0,7.6,-0.42,3825,2225,2816.67,6.79,2.31,1.72,7.36,2.99,7.36,10.76},5},
{{0.05,0.11,0.18,0.15,0.11,0.11,0.06,0.1,0.06,0.08,0.07,0.09,0.06,0.1,0.1,0.12,0.11,0.13,0.12,0.1,0.06,0.08,0.07,0.1,0.12,0.13,0.08,0.12,0.18,0.1,0,7.26,-0.2,2400,2650,2400,7.22,2.12,1.61,7.69,2.75,7.69,10.79},5},
{{0.1,0.15,0.13,0.13,0.14,0.08,0.1,0.06,0.04,0.1,0.08,0.09,0.07,0.06,0.13,0.14,0.1,0.08,0.12,0.15,0.1,0.06,0.09,0.1,0.1,0.12,0.19,0.13,0.06,0.09,0,7.49,-0.45,1916.67,1683.33,2175,7.05,2.35,1.52,7.67,3,7.67,10.79},5},
{{0.13,0.13,0.11,0.13,0.12,0.08,0.1,0.06,0.09,0.08,0.04,0.08,0.09,0.06,0.11,0.12,0.14,0.11,0.17,0.12,0.04,0.07,0.12,0.1,0.13,0.1,0.11,0.12,0.1,0.15,0,7.58,-0.11,1400,1475,2375,6.88,2.05,1.77,7.56,2.6,7.56,10.79},5},
{{0.16,0.18,0.13,0.16,0.09,0.07,0.05,0.08,0.04,0.06,0.04,0.03,0.07,0.08,0.1,0.12,0.13,0.16,0.18,0.13,0.02,0.06,0.11,0.08,0.12,0.15,0.16,0.14,0.11,0.07,0,8.04,-0.31,2325,1700,3500,6.33,1.88,1.31,6.89,2.44,6.89,10.69},5},
{{0.19,0.25,0.21,0.12,0.08,0.04,0.04,0.03,0.02,0.05,0.03,0.08,0.03,0.08,0.06,0.1,0.13,0.18,0.16,0.19,0.13,0.13,0.12,0.07,0.13,0.11,0.1,0.1,0.07,0.06,0,8.36,-1.01,3475,3475,3425,5.77,2.09,1.43,6.33,2.71,6.33,10.6},5},
{{0.16,0.14,0.09,0.11,0.1,0.08,0.08,0.09,0.09,0.09,0.07,0.07,0.08,0.1,0.09,0.09,0.12,0.14,0.13,0.13,0.18,0.15,0.12,0.07,0.15,0.04,0.04,0.11,0.11,0.07,0,7.53,-1.04,4550,2883.33,883.33,6.81,2.34,1.83,7.55,3.07,7.55,10.92},5},
{{0.14,0.05,0.03,0.06,0.06,0.05,0.13,0.15,0.19,0.14,0.13,0.15,0.19,0.06,0.09,0.08,0.06,0.09,0.11,0.06,0.15,0.11,0.1,0.13,0.1,0.07,0.07,0.07,0.13,0.1,0,6.33,-0.59,2062.5,1650,1675,8.18,2.38,1.95,8.98,3.02,8.98,10.97},5},
{{0.11,0.05,0.06,0.04,0.08,0.11,0.14,0.08,0.15,0.19,0.14,0.13,0.15,0.11,0.08,0.11,0.09,0.08,0.07,0.08,0.12,0.13,0.12,0.08,0.08,0.08,0.09,0.11,0.08,0.14,0,6.3,-0.34,1450,816.67,2500,8.29,2.38,2.09,9.08,3.2,9.08,11.17},5},
{{0.1,0.08,0.03,0.05,0.1,0.1,0.12,0.13,0.16,0.16,0.09,0.19,0.15,0.13,0.1,0.05,0.07,0.1,0.08,0.06,0.09,0.1,0.09,0.11,0.12,0.12,0.09,0.12,0.07,0.11,0,6.18,-0.57,2100,2137.5,3525,8.21,2.21,1.69,8.84,2.85,8.84,10.87},5},
{{0.12,0.06,0.03,0.04,0.08,0.11,0.12,0.13,0.15,0.16,0.17,0.11,0.17,0.11,0.08,0.09,0.08,0.07,0.07,0.07,0.12,0.1,0.08,0.07,0.15,0.09,0.1,0.12,0.09,0.11,0,6,-0.5,1700,2716.67,675,8.16,2.29,1.72,8.9,2.9,8.9,10.78},5},
{{0.07,0.07,0.05,0.09,0.12,0.08,0.13,0.14,0.12,0.14,0.1,0.1,0.12,0.12,0.15,0.14,0.07,0.07,0.08,0.08,0.12,0.14,0.13,0.12,0.11,0.1,0.07,0.05,0.06,0.11,0,6.48,-0.72,1950,1150,1450,8.08,2.05,1.93,8.7,2.79,8.7,11.13},5},
{{0.02,0.07,0.07,0.12,0.13,0.1,0.15,0.12,0.14,0.1,0.12,0.09,0.14,0.13,0.11,0.14,0.1,0.08,0.07,0.05,0.17,0.1,0.09,0.1,0.08,0.09,0.07,0.13,0.09,0.1,0,6.24,-0.73,4225,2825,2625,8.12,1.95,1.87,8.52,2.52,8.52,10.8},5},
{{0.05,0.05,0.1,0.1,0.08,0.17,0.14,0.11,0.09,0.13,0.11,0.15,0.09,0.16,0.11,0.1,0.09,0.1,0.09,0.03,0.08,0.1,0.15,0.11,0.09,0.1,0.04,0.11,0.14,0.1,0,6.22,-0.51,1612.5,3033.33,2875,8.05,2.01,1.77,8.57,2.58,8.57,10.76},5},
{{0.06,0.08,0.09,0.06,0.1,0.1,0.14,0.14,0.13,0.12,0.14,0.14,0.14,0.13,0.09,0.11,0.08,0.06,0.07,0.06,0.15,0.12,0.09,0.06,0.11,0.11,0.06,0.13,0.1,0.1,0,5.97,-0.55,3150,1466.67,3000,8.16,2.12,1.94,8.69,2.74,8.69,10.8},5},
{{0.03,0.08,0.11,0.09,0.09,0.12,0.12,0.14,0.15,0.09,0.15,0.11,0.08,0.11,0.16,0.13,0.09,0.07,0.05,0.06,0.12,0.16,0.1,0.11,0.1,0.07,0.14,0.08,0.11,0.04,0,6.15,-0.88,3950,1525,2400,8.02,2.03,1.64,8.46,2.68,8.46,10.66},5},
{{0.05,0.07,0.05,0.09,0.12,0.12,0.15,0.15,0.12,0.11,0.1,0.14,0.13,0.14,0.11,0.11,0.05,0.12,0.08,0.04,0.12,0.12,0.11,0.08,0.08,0.11,0.11,0.07,0.12,0.11,0,6.2,-0.58,2100,2083.33,4625,8.11,1.96,1.77,8.57,2.51,8.57,10.74},5},
{{0.04,0.09,0.1,0.08,0.09,0.12,0.11,0.16,0.13,0.09,0.07,0.14,0.15,0.1,0.17,0.11,0.11,0.09,0.06,0.03,0.1,0.13,0.08,0.12,0.12,0.12,0.07,0.11,0.11,0.07,0,6.31,-0.76,3250,1100,2325,7.95,1.72,1.53,8.42,2.19,8.42,10.58},5},
{{0.09,0.04,0.06,0.06,0.1,0.12,0.11,0.14,0.17,0.14,0.16,0.11,0.12,0.17,0.11,0.08,0.09,0.08,0.06,0.06,0.14,0.15,0.1,0.09,0.11,0.05,0.06,0.1,0.09,0.13,0,5.89,-0.56,1850,1812.5,2416.67,8.32,2.24,2.16,8.87,3.05,8.87,10.96},5},
{{0.07,0.06,0.08,0.08,0.09,0.11,0.1,0.16,0.15,0.13,0.12,0.13,0.12,0.14,0.14,0.06,0.08,0.06,0.11,0.06,0.09,0.13,0.07,0.07,0.14,0.09,0.12,0.09,0.12,0.11,0,6.22,-0.42,2400,1700,3450,8.12,2.15,1.73,8.67,2.84,8.67,10.8},5},
{{0.05,0.05,0.09,0.09,0.11,0.11,0.12,0.15,0.15,0.11,0.11,0.13,0.15,0.1,0.13,0.1,0.07,0.12,0.08,0.04,0.14,0.1,0.15,0.06,0.11,0.08,0.1,0.09,0.12,0.08,0,6.28,-0.86,2250,4575,4250,8.1,2.02,1.72,8.55,2.58,8.55,10.79},5},
{{0.04,0.07,0.08,0.07,0.08,0.11,0.15,0.12,0.17,0.12,0.12,0.13,0.09,0.15,0.11,0.12,0.1,0.09,0.06,0.06,0.15,0.12,0.14,0.1,0.12,0.1,0.07,0.05,0.1,0.09,0,6.25,-0.98,1925,4125,2233.33,8.28,2.05,1.72,8.8,2.68,8.8,10.96},5},
{{0.06,0.08,0.06,0.09,0.1,0.1,0.13,0.14,0.14,0.13,0.12,0.15,0.14,0.09,0.14,0.13,0.08,0.05,0.06,0.07,0.11,0.12,0.12,0.1,0.09,0.11,0.1,0.07,0.09,0.12,0,6.21,-0.6,2733.33,1625,1116.67,8.17,2.1,1.86,8.77,2.87,8.77,10.93},5},
{{0.06,0.12,0.06,0.07,0.09,0.08,0.12,0.05,0.09,0.09,0.18,0.08,0.09,0.09,0.09,0.07,0.06,0.06,0.06,0.04,0.1,0.09,0.11,0.08,0.07,0.03,0.06,0.04,0.08,0.16,0,3.73,-0.14,1650,1550,1633.33,6.01,3.16,1.95,8.17,5.1,8.17,8.52},5},
{{0.15,0.1,0.08,0.12,0.06,0.1,0.1,0.12,0.08,0.12,0.11,0.1,0.14,0.06,0.1,0.06,0.12,0.1,0.11,0.12,0.11,0.11,0.09,0.11,0.09,0.13,0.08,0.14,0.06,0.09,0,10.72,-0.31,3500,855,2775,3.06,3.48,3.35,3.88,4.15,3.88,12.23},1},
{{0.07,0.09,0.11,0.1,0.09,0.12,0.1,0.13,0.1,0.1,0.1,0.11,0.1,0.09,0.12,0.13,0.06,0.08,0.11,0.12,0.1,0.09,0.1,0.09,0.11,0.08,0.11,0.1,0.13,0.1,0,10.58,-0.08,3000,592.31,2575,2.75,3.38,3.45,3.74,4.13,3.74,11.99},1},
{{0.11,0.09,0.12,0.1,0.11,0.12,0.09,0.08,0.11,0.09,0.09,0.08,0.09,0.09,0.08,0.16,0.14,0.13,0.1,0.06,0.11,0.11,0.09,0.13,0.12,0.09,0.09,0.08,0.09,0.11,0,10.52,-0.38,1862.5,1271.43,2850,2.74,2.8,3.48,3.53,3.58,3.53,11.97},1},
{{0.09,0.12,0.14,0.09,0.1,0.05,0.12,0.1,0.1,0.1,0.11,0.13,0.06,0.14,0.08,0.09,0.08,0.11,0.12,0.11,0.1,0.1,0.11,0.1,0.06,0.12,0.11,0.1,0.09,0.13,0,10.46,0.22,4800,692.31,3000,2.87,3.5,3.5,3.56,4.26,3.56,11.93},1},
{{0.04,0.06,0.02,0.05,0.09,0.06,0.06,0.04,0.07,0.06,0.05,0.05,0.06,0.09,0.05,0.06,0.07,0.03,0.03,0.03,0.04,0.06,0.06,0.04,0.06,0.05,0.07,0.05,0.08,0.04,0,5.19,0.08,1525,800,1350,1.43,2.62,1.65,3.73,6.13,3.73,5.93},1},
{{0.27,0.18,0.08,0.11,0.06,0.04,0.06,0.07,0.05,0,0.08,0.07,0.08,0.03,0.08,0.08,0.12,0.09,0.14,0,0.1,0.1,0.11,0.06,0.06,0.05,0.09,0.12,0.19,0,0,9.3,0.14,1150,3100,4250,5.28,3.01,2.4,6.54,3.7,6.54,11.65},5},
{{0.06,0.08,0.08,0.1,0.11,0.14,0.12,0.11,0.1,0,0.12,0.11,0.1,0.09,0.12,0.13,0.09,0.1,0.09,0,0.12,0.13,0.11,0.12,0.11,0.11,0.1,0.07,0.06,0,0,7.47,-0.65,2062.5,1250,2650,7.3,2.34,2.08,8.09,3.06,8.09,11.3},5},
{{0.03,0.06,0.08,0.14,0.11,0.08,0.13,0.13,0.17,0,0.09,0.13,0.12,0.14,0.14,0.08,0.1,0.11,0.06,0,0.12,0.08,0.1,0.11,0.11,0.13,0.16,0.09,0.07,0,0,7.29,-0.76,2237.5,1900,4475,7.48,2.14,1.65,8.11,2.88,8.11,11.06},5},
{{0.04,0.04,0.1,0.11,0.12,0.13,0.1,0.16,0.12,0,0.15,0.08,0.12,0.11,0.12,0.13,0.1,0.07,0.09,0,0.08,0.1,0.09,0.12,0.11,0.15,0.11,0.1,0.08,0,0,7.26,-0.45,1450,2025,1700,7.38,2.27,1.81,8.06,3.06,8.06,11.06},5},
{{0.08,0.07,0.13,0.05,0.11,0.14,0.1,0.12,0.1,0,0.1,0.14,0.13,0.11,0.1,0.09,0.09,0.09,0.1,0,0.08,0.13,0.1,0.15,0.1,0.12,0.08,0.12,0.06,0,0,7.56,-0.66,1850,675,900,7.06,2.43,1.75,7.88,3.1,7.88,11.04},5},
{{0.06,0.12,0.07,0.04,0.02,0,0.01,0,0,0,0,0,0.01,0.03,0.02,0.03,0.05,0.08,0.07,0,0.01,0.02,0,0.01,0.02,0,0.03,0.05,0.08,0,0,2.82,0.6,616.67,550,275,1.05,1.97,0.74,3.86,6.83,3.86,3.2},5},
{{0.01,0.02,0.07,0,0,0.11,0,0.26,0,0.54,0.02,0.38,0,0,0,0,0,0.53,0,0.08,0.67,0.25,0,0.05,0,0.03,0,0,0.02,0,0,9.91,0.19,298.39,321.67,125,1.06,0.02,0.04,1.07,0.19,1.07,9.97},4},
{{0.15,0.08,0.2,0,0,0.23,0,0.17,0,0.18,0.03,0.18,0,0,0,0,0,0.61,0,0.19,0.13,0.13,0,0.25,0,0.29,0,0,0.17,0.04,0,9.92,0.28,900,359.62,1470,0.99,0.02,0.05,0.99,0.04,0.99,9.97},4},
{{0.02,0.04,0.2,0,0,0.38,0,0.3,0,0.08,0,0.12,0,0,0,0,0,0.72,0,0.17,0.01,0.05,0,0.27,0,0.44,0,0,0.21,0.03,0,9.92,0.3,350,371.15,850,1,0.01,0.03,1,0.02,1,9.98},4},
{{0,0.05,0.28,0,0,0.42,0,0.21,0,0.05,0.01,0.08,0,0,0,0,0,0.67,0,0.25,0,0.03,0,0.24,0,0.35,0,0,0.31,0.08,0,9.93,0.31,338.89,342.31,1000,0.99,0.02,0.03,0.99,0.02,0.99,9.98},4},
{{0.03,0.15,0.32,0,0,0.35,0,0.14,0,0.03,0.01,0.18,0,0,0,0,0,0.65,0,0.17,0.01,0.06,0,0.21,0,0.41,0,0,0.26,0.08,0,9.92,0.31,298.39,581.25,1106.25,0.97,0.01,0.03,0.98,0.02,0.98,9.97},4},
{{0.01,0.03,0.06,0,0,0.21,0,0.32,0,0.38,0,0.24,0,0,0,0,0,0.56,0,0.2,0.01,0.02,0,0.17,0,0.32,0,0,0.33,0.17,0,9.92,0.32,313.46,287.88,515.63,1.04,0.02,0.03,1.05,0.03,1.05,9.98},4},
{{0.01,0.02,0.03,0,0,0.13,0,0.43,0,0.4,0,0.05,0,0,0,0,0,0.67,0,0.29,0,0.02,0,0.11,0,0.33,0,0,0.36,0.19,0,9.93,0.33,252.78,450,413.04,1.05,0.02,0.03,1.05,0.02,1.05,9.99},4},
{{0.03,0.09,0.15,0,0,0.3,0,0.28,0,0.17,0.01,0.09,0,0,0,0,0,0.56,0,0.35,0,0.02,0,0.24,0,0.39,0,0,0.24,0.12,0,9.93,0.31,384.38,452.38,664.29,1.01,0.02,0.03,1.01,0.03,1.01,9.99},4},
{{0.18,0.11,0.23,0,0,0.14,0,0.22,0,0.13,0.01,0.12,0,0,0,0,0,0.55,0,0.34,0,0.01,0,0.03,0,0.16,0,0,0.31,0.5,0,9.93,0.36,521.88,327.78,520.59,0.98,0.02,0.03,0.98,0.03,0.98,9.98},4},
{{0.1,0.13,0.15,0,0,0.18,0,0.12,0,0.14,0.01,0.23,0,0,0,0,0,0.38,0,0.2,0,0.01,0,0.02,0,0.1,0,0,0.24,0.44,0,7.99,0.3,1133.33,279.63,1216.67,0.8,1.56,0.06,0.99,1.93,0.99,8.03},4},
{{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0.01,0.5,0.49,0.16,0.08,0.09,0.2,0.47,0.01,0,0.01,0,0,0,5.12,8.54,210,865,321.67,0.8,0.34,0.25,0.92,0.42,0.92,10.01},3},
{{0,0,0,0,0,0.01,0.01,0.2,0.62,0.18,0.03,0.02,0.04,0.11,0.04,0.16,0.26,0.09,0.27,0.02,0,0,0,0.01,0.21,0.13,0.24,0.22,0.09,0.12,0,4.05,9.2,1516.67,325,208.7,0.28,0.4,0.19,0.35,0.5,0.35,10.07},3},
{{0,0,0,0,0.02,0.01,0,0.12,0.07,0.8,0,0,0,0,0,0.02,0.03,0.04,0.45,0.47,0.01,0.07,0.28,0.21,0.29,0.11,0.02,0.01,0.01,0.03,0,4.97,8.64,1300,666.67,663.64,0.64,0.36,0.25,0.76,0.45,0.76,10.01},3},
{{0,0,0,0,0,0,0,0,0.03,0.98,0,0,0,0,0,0,0,0,0.4,0.6,0.05,0.06,0.14,0.4,0.37,0,0,0,0,0,0,5.1,8.57,433.33,380,248.72,0.33,0.23,0.16,0.47,0.28,0.47,9.99},3},
{{0,0,0,0,0.01,0.01,0.01,0.03,0.56,0.39,0,0,0.01,0.03,0.01,0.01,0.31,0.24,0.07,0.35,0.06,0.19,0.07,0.04,0.03,0.07,0.32,0.18,0.01,0.05,0,4.59,8.89,1316.67,275,311.9,0.46,0.68,0.47,0.61,0.74,0.61,10.06},3},
{{0,0,0,0,0,0,0,0.04,0.46,0.51,0,0,0,0,0,0.17,0.2,0.38,0.13,0.13,0,0,0,0.2,0.05,0.2,0.2,0.15,0.15,0.06,0,4.24,9.11,350,250,308.06,0.35,0.35,0.23,0.48,0.43,0.48,10.08},3},
{{0,0,0,0,0,0,0,0.28,0.26,0.47,0,0,0.02,0.24,0.1,0.07,0.1,0.02,0.46,0.01,0,0,0,0.05,0.41,0.02,0.05,0.08,0.05,0.35,0,4.19,9.12,200,329.17,353.85,0.4,0.52,0.32,0.43,0.55,0.43,10.07},3},
{{0,0,0,0,0,0,0,0.01,0.02,0.97,0,0,0,0,0,0.01,0.02,0.02,0.51,0.46,0,0.01,0.02,0.27,0.61,0.08,0.01,0.01,0.01,0.01,0,4.89,8.74,275,422.22,254.05,0.44,0.16,0.11,0.49,0.25,0.49,10.04},3},
{{0,0,0,0,0,0,0,0,0.24,0.77,0,0,0,0,0,0,0,0.41,0.59,0,0,0,0,0,0.04,0.84,0.13,0,0,0,0,4.36,9.08,427.78,323.08,276.56,0.09,0.07,0.06,0.11,0.1,0.11,10.07},3},
{{0,0,0,0,0,0,0,0.01,0.91,0.08,0,0,0,0,0,0,0.01,0.85,0.15,0,0,0,0,0,0,0.58,0.34,0.08,0.01,0,0,4.28,9.17,4625,332.14,265.71,0.09,0.06,0.06,0.12,0.08,0.12,10.12},3},
{{0,0,0,0,0,0,0,0.03,0.91,0.07,0,0,0,0,0,0,0.01,0.87,0.13,0,0,0,0,0,0,0.24,0.69,0.08,0,0,0,4.24,9.21,550,340.38,278.33,0.14,0.06,0.06,0.16,0.08,0.16,10.14},3},
{{0,0,0,0,0,0,0.01,0.08,0.88,0.04,0,0.02,0.01,0.03,0.01,0.02,0.05,0.87,0.01,0,0,0,0,0,0.01,0.19,0.62,0.08,0.01,0.1,0,4.16,9.25,3725,390.91,251.32,0.14,0.11,0.07,0.21,0.2,0.21,10.14},3},
{{0,0,0,0.01,0.15,0.67,0.02,0.08,0.07,0.02,0.02,0.01,0.1,0.71,0.03,0.07,0.05,0.02,0.01,0,0,0,0,0,0.01,0.01,0.02,0.03,0.06,0.89,0,3.56,9.46,3725,437.5,287.5,1.19,0.11,0.05,1.25,0.2,1.25,10.18},3},
{{0.01,0.01,0.04,0.15,0.12,0.23,0.02,0.03,0.05,0.36,0.03,0.02,0.02,0.17,0.02,0,0.01,0.01,0.01,0.73,0.71,0.01,0,0.01,0,0.03,0,0.01,0.01,0.24,0,7.74,4.4,2250,422.22,230,1.47,2.42,3.19,1.77,2.8,1.77,10.16},3},
{{0.01,0,0.01,0.06,0.21,0.23,0.15,0.18,0.06,0.11,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,9.81,1.27,275,200,2300,1.16,0.27,0.74,1.43,0.72,1.43,10.04},3},
{{0.02,0.01,0.02,0.25,0.24,0.13,0.06,0.13,0.06,0.1,0,0.01,0,0,0,0,0,0,0,0.99,1,0.01,0,0,0,0,0,0,0,0,0,9.68,1.54,2400,3125,3800,1.68,0.86,1.32,2.01,1.42,2.01,10.14},3},
{{0,0.01,0.04,0.02,0.02,0.02,0.01,0.06,0.43,0.41,0.02,0.01,0.02,0.14,0.05,0.1,0.18,0.12,0.22,0.16,0.14,0.01,0,0,0.2,0.14,0.06,0.1,0.07,0.3,0,4.77,8.29,350,250,650,0.7,1.3,1.64,1.19,2,1.19,10.11},3},
{{0,0,0,0,0,0,0,0.04,0.63,0.34,0,0,0,0.12,0.1,0.12,0.29,0.19,0.2,0,0,0,0,0.02,0.16,0.14,0.24,0.15,0.11,0.2,0,4.05,9.2,400,443.75,210.87,0.27,0.28,0.19,0.38,0.37,0.38,10.07},3},
{{0,0,0,0.01,0.03,0.25,0.44,0.1,0.1,0.09,0.05,0.02,0.02,0.08,0.13,0.53,0.15,0.04,0.01,0,0,0,0,0.02,0.02,0.01,0.09,0.42,0.19,0.26,0,3.71,9.39,350,1660,1750,0.87,0.2,0.13,0.93,0.43,0.93,10.15},3},
{{0,0,0,0,0,0.41,0.59,0,0,0,0,0,0,0.02,0.16,0.38,0.44,0.01,0,0,0,0,0,0,0,0,0.1,0.57,0.15,0.18,0,3.82,9.35,350,428.95,284.85,0.96,0.06,0.05,0.96,0.09,0.96,10.14},3},
{{0,0,0,0,0,0.27,0.73,0.01,0,0,0,0,0,0.06,0.44,0.5,0.01,0,0,0,0,0,0,0,0,0,0.01,0.45,0.41,0.14,0,3.74,9.37,350,290.91,316.13,0.94,0.04,0.03,0.95,0.06,0.95,10.13},3},
{{0,0,0,0,0,0.36,0.63,0.01,0,0,0,0,0.01,0.02,0.26,0.69,0.04,0,0,0,0,0,0,0,0,0.01,0.08,0.51,0.32,0.1,0,3.76,9.35,350,300,284.85,0.96,0.03,0.04,0.96,0.05,0.96,10.12},3},
{{0,0,0,0,0,0.04,0.51,0.46,0,0,0,0,0,0.07,0.55,0.38,0.01,0,0,0,0,0,0,0,0,0,0,0.23,0.4,0.38,0,3.73,9.39,350,337.93,388,0.84,0.03,0.04,0.84,0.05,0.84,10.14},3},
{{0,0,0,0,0,0.15,0.59,0.26,0,0,0,0,0.01,0.19,0.39,0.32,0.1,0,0,0,0,0,0,0,0,0,0.01,0.12,0.29,0.59,0,3.73,9.42,350,327.59,316.13,0.88,0.07,0.05,0.88,0.09,0.88,10.17},3},
{{0,0,0,0,0,0.2,0.75,0.06,0,0,0,0,0.01,0.11,0.55,0.31,0.04,0,0,0,0,0,0,0,0,0,0.02,0.21,0.29,0.49,0,3.72,9.4,350,326.79,296.97,0.93,0.05,0.05,0.93,0.07,0.93,10.16},3},
{{0,0,0,0,0,0.05,0.69,0.26,0.01,0,0,0.01,0.01,0.06,0.13,0.75,0.04,0.01,0.01,0,0,0,0,0.01,0,0.01,0,0.24,0.35,0.41,0,3.76,9.39,350,542.86,257.89,0.85,0.05,0.05,0.86,0.11,0.86,10.16},3},
{{0,0,0,0,0,0.07,0.41,0.53,0,0,0,0,0,0.02,0.26,0.7,0.03,0,0,0,0,0,0,0,0,0,0,0.11,0.31,0.58,0,3.76,9.41,350,275.71,290.91,0.82,0.03,0.04,0.83,0.05,0.83,10.17},3},
{{0,0,0,0,0,0.03,0.66,0.32,0,0,0,0,0,0,0.12,0.87,0.01,0,0,0,0,0,0,0,0,0,0.01,0.19,0.45,0.36,0,3.77,9.39,350,335.71,290.32,0.86,0.02,0.03,0.86,0.04,0.86,10.16},3},
{{0,0,0,0,0,0,0.88,0.12,0,0,0,0,0,0,0.24,0.76,0,0,0,0,0,0,0,0,0,0,0,0.16,0.5,0.35,0,3.76,9.39,350,270,296.97,0.85,0.02,0.03,0.85,0.03,0.85,10.15},3},
{{0,0,0,0,0,0.02,0.25,0.73,0,0,0,0,0,0.01,0.14,0.85,0.02,0,0,0,0,0,0,0,0,0,0,0.11,0.34,0.56,0,3.77,9.41,350,334.48,254.05,0.8,0.02,0.03,0.8,0.04,0.8,10.17},3},
{{0,0,0,0,0.02,0.11,0.15,0.72,0.01,0,0.01,0,0.01,0.02,0.08,0.36,0.48,0.06,0,0,0,0,0,0,0,0.03,0.11,0.33,0.28,0.27,0,3.85,9.36,350,341.18,270.59,0.81,0.1,0.06,0.83,0.13,0.83,10.16},3},
{{0,0,0.02,0.18,0.35,0.24,0.06,0.08,0.02,0.08,0.12,0.08,0.13,0.08,0.05,0.05,0.13,0.12,0.17,0.1,0.05,0.01,0.04,0.04,0.1,0.13,0.12,0.11,0.06,0.38,0,3.95,9.22,3725,2725,1062.5,1.56,0.63,0.39,1.71,0.84,1.71,10.21},3},
{{0,0,0,0.02,0.24,0.29,0.08,0.28,0.08,0.02,0,0,0,0,0,0,0.01,0.07,0.64,0.29,0,0,0.01,0.07,0.49,0.43,0,0,0,0,0,4.74,8.9,3725,420.83,293.94,1.06,0.28,0.12,1.18,0.33,1.18,10.16},3},
{{0,0,0,0.01,0.36,0.34,0.17,0.11,0.02,0,0,0,0,0,0,0,0.01,0.05,0.69,0.26,0,0,0,0.04,0.82,0.14,0.01,0,0,0,0,4.78,8.85,3725,430.95,255.26,1.23,0.2,0.08,1.3,0.24,1.3,10.14},3},
{{0,0,0,0,0.98,0.03,0,0,0,0,0,0,0,0,0,0,0,0,0.89,0.12,0,0,0.01,0.06,0.94,0,0,0,0,0,0,4.85,8.77,3725,397.73,259.72,1.61,0.08,0.05,1.62,0.12,1.62,10.15},3},
{{0,0,0,0,0.36,0.15,0.06,0.17,0.25,0.02,0.02,0,0.05,0.01,0.01,0.03,0.1,0.09,0.35,0.36,0,0,0.18,0.12,0.38,0.13,0.06,0.03,0.03,0.09,0,4.74,8.85,3725,359.09,292.86,0.96,0.56,0.29,1.14,0.7,1.14,10.13},3},
{{0,0,0,0,0.01,0.29,0.08,0.21,0.38,0.04,0,0,0,0,0,0,0,0,0.22,0.79,0,0.02,0.36,0.24,0.38,0,0,0,0,0,0,5.31,8.59,4100,640,256.76,0.57,0.28,0.17,0.71,0.32,0.71,10.13},3},
{{0,0,0.02,0.39,0.07,0.01,0.02,0.2,0.26,0.06,0.36,0.09,0.04,0.02,0.02,0.01,0.01,0.03,0.04,0.4,0.01,0,0.08,0.22,0.17,0.25,0.11,0.03,0.02,0.15,0,3.99,9,4100,243.33,292.86,1.51,1.15,0.35,1.94,1.26,1.94,10.12},3},
{{0,0,0.01,0.72,0.11,0.17,0,0,0,0,0.26,0.39,0.05,0.04,0.02,0.01,0.06,0.19,0,0,0,0,0,0,0.01,0.46,0.38,0.09,0.02,0.06,0,3.38,9.19,4100,204.55,184.62,2.35,0.41,0.09,2.43,0.48,2.43,10.1},3},
{{0,0,0,1,0,0,0,0,0,0,0.46,0.51,0.03,0.01,0.01,0,0,0,0,0,0,0,0,0,0.03,0.41,0.53,0.04,0,0,0,3.09,9.16,4100,2775,196,2.78,0.08,0.07,2.79,0.13,2.79,10.07},3},
{{0,0,0,0.63,0.36,0.02,0,0,0,0,0,0,0.02,0.42,0.13,0.04,0.16,0.23,0.01,0,0,0,0,0,0.01,0.91,0.09,0,0,0,0,3.82,9.11,4100,508.33,222.73,2.1,0.23,0.04,2.13,0.27,2.13,10.1},3},
{{0,0,0,0.96,0.05,0,0,0,0,0,0.05,0.02,0.41,0.4,0.08,0.04,0.02,0,0,0,0,0,0,0,0,0.29,0.67,0.03,0.01,0.01,0,3.49,9.2,4100,761.11,246.25,2.32,0.11,0.05,2.33,0.17,2.33,10.11},3},
{{0,0,0,0.59,0.22,0.18,0.02,0,0,0,0.05,0.38,0.16,0.03,0.01,0.07,0.09,0.22,0.01,0,0,0,0,0,0,0.21,0.6,0.18,0.02,0.01,0,3.57,9.23,4100,257.14,232.93,2.03,0.4,0.06,2.09,0.44,2.09,10.12},3},
{{0,0.02,0.06,0.35,0.44,0.1,0,0.05,0.01,0,0.26,0.11,0.1,0.07,0.05,0.08,0.09,0.19,0.03,0.05,0,0,0.02,0.01,0.07,0.42,0.21,0.05,0.04,0.2,0,3.59,9.2,4100,835.71,246.05,2.07,0.6,0.18,2.2,0.8,2.2,10.15},3},
{{0,0,0,0,0.96,0.05,0,0,0,0,0.8,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3.01,9.52,4100,298.44,316.67,1.73,0.07,0.02,1.74,0.11,1.74,10.14},3},
{{0,0,0,0.07,0.81,0.05,0.03,0.05,0,0,0.82,0.03,0.02,0.02,0.02,0.03,0.05,0.03,0,0,0,0,0,0,0.01,0.03,0.02,0.02,0.02,0.91,0,3.06,9.49,4100,1700,252.63,1.79,0.25,0.07,1.83,0.36,1.83,10.14},3},
{{0,0,0,0.03,0.08,0.32,0.1,0.47,0.02,0.01,0.1,0.02,0.03,0.16,0.08,0.13,0.09,0.41,0,0,0,0,0,0,0.01,0.01,0.44,0.19,0.09,0.28,0,3.75,9.36,4100,382.5,263.89,0.93,0.35,0.13,1.01,0.53,1.01,10.15},3},
{{0,0,0,0,0,0.36,0.15,0.5,0,0,0,0,0,0.01,0.17,0.31,0.16,0.36,0,0,0,0,0,0,0,0.01,0.3,0.4,0.22,0.09,0,3.92,9.33,4100,243.48,228.57,0.84,0.15,0.05,0.87,0.18,0.87,10.15},3},
{{0,0,0,0,0,0.19,0.4,0.42,0.01,0,0,0,0,0,0.06,0.21,0.68,0.06,0,0,0,0,0,0,0,0,0.3,0.52,0.15,0.03,0,3.91,9.31,4100,523.53,243.75,0.85,0.08,0.04,0.87,0.1,0.87,10.14},3},
{{0,0,0,0.01,0.16,0.16,0.11,0.56,0.02,0,0.03,0.05,0.11,0.05,0.02,0.05,0.26,0.45,0,0,0,0,0,0,0.01,0.03,0.4,0.34,0.06,0.18,0,3.87,9.32,4100,430.56,231.71,0.92,0.28,0.08,1,0.36,1,10.14},3},
{{0,0,0,0.15,0.78,0.08,0,0,0,0,0.11,0.2,0.3,0.28,0.06,0.06,0.01,0,0,0,0,0,0,0,0.01,0.02,0.21,0.31,0.14,0.32,0,3.4,9.36,4100,557.69,197.92,1.76,0.19,0.08,1.79,0.23,1.79,10.11},3},
{{0,0.01,0.08,0.62,0.28,0.01,0,0,0.01,0,0.3,0.3,0.24,0.04,0.01,0.02,0.01,0.04,0.02,0.03,0.01,0.02,0.03,0.04,0.07,0.12,0.2,0.33,0.11,0.09,0,3.3,9.17,4100,125,190.63,2.45,0.32,0.23,2.52,0.51,2.52,10.09},3},
{{0,0.13,0.85,0.02,0,0,0,0,0,0,0.22,0.19,0.15,0.09,0.07,0.1,0.17,0.03,0,0,0,0,0.07,0.82,0.12,0,0,0,0,0,0,3.44,8.58,4100,863.64,266.22,3.76,0.33,0.07,3.77,0.37,3.77,9.99},3},
{{0,0.3,0.64,0.07,0,0,0,0,0,0,0.1,0.26,0.49,0.12,0.02,0.02,0.01,0,0,0,0,0,0.33,0.56,0.1,0.02,0,0,0,0,0,3.31,8.55,4100,1321.43,242.5,3.91,0.14,0.09,3.93,0.22,3.93,9.98},3},
{{0,0.5,0.5,0,0,0,0,0,0,0,0.01,0.12,0.75,0.08,0.01,0.02,0.02,0,0,0,0,0,0.79,0.22,0,0,0,0,0,0,0,3.4,8.45,4100,564.71,212.22,4.06,0.08,0.05,4.07,0.14,4.07,9.97},3},
{{0,0.02,0.8,0.19,0,0,0,0,0,0,0.07,0.16,0.26,0.11,0.04,0.03,0.15,0.21,0,0,0,0,0.14,0.69,0.17,0.01,0,0,0,0,0,3.6,8.58,4100,770.83,200,3.63,0.34,0.07,3.64,0.39,3.64,10},3},
{{0,0.04,0.95,0.02,0,0,0,0,0,0,0.1,0.29,0.29,0.06,0.03,0.09,0.11,0.05,0,0,0,0,0.11,0.82,0.08,0,0,0,0,0,0,3.43,8.56,4100,400,222.5,3.83,0.27,0.06,3.84,0.33,3.84,9.99},3},
{{0,0.12,0.89,0,0,0,0,0,0,0,0.01,0.35,0.65,0.01,0,0,0,0,0,0,0,0,0.1,0.9,0.01,0,0,0,0,0,0,3.29,8.54,4100,295.31,298.44,4.02,0.05,0.03,4.02,0.08,4.02,10},3},
{{0,0.11,0.85,0.05,0,0,0,0,0,0,0.02,0.29,0.39,0.08,0.04,0.02,0.09,0.08,0,0,0,0.01,0.16,0.83,0.01,0,0,0,0,0,0,3.46,8.53,4100,316.67,226.19,3.87,0.24,0.04,3.88,0.3,3.88,9.99},3},
{{0,0.18,0.69,0.13,0,0,0,0,0,0,0.27,0.12,0.15,0.03,0.02,0.02,0.2,0.19,0.02,0,0,0,0.3,0.58,0.13,0,0,0,0,0,0,3.52,8.55,4100,320,228.57,3.75,0.46,0.08,3.77,0.51,3.77,9.99},3},
{{0.26,0.4,0.26,0.08,0.01,0,0,0,0,0,0.3,0.17,0.18,0.09,0.02,0.04,0.15,0.05,0.02,0.01,0.04,0.21,0.39,0.33,0.03,0.01,0,0.01,0,0,0,3.35,8.4,4100,807.14,248.28,4.18,0.4,0.16,4.23,0.51,4.23,9.99},3},
{{0.15,0.77,0.09,0,0,0,0,0,0,0,0.01,0.12,0.43,0.36,0.03,0.02,0.02,0.02,0,0,0.01,0.36,0.63,0.01,0,0,0,0,0,0,0,3.46,8.27,4100,2600,206.38,4.37,0.13,0.05,4.38,0.19,4.38,9.98},3},
{{0.18,0.81,0.02,0,0,0,0,0,0,0,0.01,0.43,0.48,0.09,0,0,0,0,0,0,0,0.34,0.67,0,0,0,0,0,0,0,0,3.31,8.28,4100,384,245.71,4.47,0.09,0.04,4.48,0.12,4.48,9.97},3},
{{0.27,0.7,0.04,0,0,0,0,0,0,0,0,0.3,0.49,0.19,0.03,0,0,0,0,0,0,0.53,0.47,0,0,0,0,0,0,0,0,3.37,8.26,4100,411.76,225,4.48,0.11,0.04,4.49,0.14,4.49,9.98},3},
{{0.02,0.8,0.19,0,0,0,0,0,0,0,0.01,0.05,0.11,0.04,0.1,0.23,0.47,0.02,0,0,0.02,0.78,0.21,0,0,0,0,0,0,0,0,3.76,8.22,4100,382.5,234.62,4.19,0.18,0.04,4.2,0.24,4.2,9.97},3},
{{0.59,0.4,0.02,0,0,0,0,0,0,0,0.31,0.31,0.12,0.15,0.06,0.03,0.03,0.01,0,0,0.04,0.54,0.43,0,0,0,0,0,0,0,0,3.27,8.24,4100,575,225,4.58,0.24,0.05,4.59,0.28,4.59,9.99},3},
{{0.81,0.16,0.04,0,0,0,0,0,0,0,0.55,0.26,0.02,0.06,0.03,0.07,0.02,0.01,0,0,0.01,0.39,0.61,0,0,0,0,0,0,0,0,3.17,8.27,4100,350,241.03,4.62,0.21,0.03,4.62,0.28,4.62,9.99},3},
{{0.72,0.18,0.11,0,0,0,0,0,0,0,0.28,0.42,0.14,0.04,0.01,0.01,0.02,0.11,0,0,0.01,0.63,0.37,0,0,0,0,0,0,0,0,3.29,8.24,4100,210,233.78,4.55,0.26,0.04,4.56,0.35,4.56,9.98},3},
{{0.4,0.45,0.15,0,0,0,0,0,0,0,0.01,0.03,0.13,0.43,0.05,0.12,0.12,0.12,0,0,0.28,0.69,0.04,0,0,0,0,0,0,0,0,3.67,8.14,4100,700,245.95,4.46,0.2,0.06,4.47,0.25,4.47,9.98},3},
{{0.88,0.12,0,0,0,0,0,0,0,0,0.03,0.02,0.22,0.63,0.05,0.05,0.02,0,0,0,0.57,0.41,0.02,0.01,0,0,0,0,0,0,0,3.52,8.1,4100,389.58,241.25,4.64,0.1,0.05,4.64,0.16,4.64,9.97},3},
{{0.5,0.51,0,0,0,0,0,0,0,0,0.05,0.06,0.33,0.27,0.03,0.08,0.21,0,0,0,0.29,0.64,0.06,0.01,0.01,0,0,0,0,0,0,3.56,8.14,4100,593.33,225,4.54,0.22,0.06,4.55,0.29,4.55,9.98},3},
{{0.76,0.25,0,0,0,0,0,0,0,0,0.03,0.31,0.32,0.34,0.01,0,0,0,0,0,0.31,0.69,0.01,0,0,0,0,0,0,0,0,3.37,8.13,4100,364.71,225,4.68,0.14,0.04,4.68,0.16,4.68,9.96},3},
{{1,0,0,0,0,0,0,0,0,0,0.09,0.91,0.01,0,0,0,0,0,0,0,0.14,0.86,0,0,0,0,0,0,0,0,0,3.16,8.14,4100,402.17,335.71,4.78,0.04,0.03,4.79,0.06,4.79,9.96},3},
{{0.51,0.43,0.07,0,0,0,0,0,0,0,0.05,0.19,0.23,0.15,0.01,0.05,0.08,0.26,0,0,0.54,0.42,0.04,0.01,0,0,0,0,0,0,0,3.61,8.1,4100,309.09,262.86,4.5,0.34,0.06,4.51,0.39,4.51,9.96},3},
{{0.02,0.11,0.67,0.12,0.08,0.01,0,0,0,0,0.06,0.1,0.11,0.09,0.04,0.04,0.27,0.2,0.09,0.03,0.01,0.02,0.73,0.15,0.07,0.02,0.01,0,0,0.01,0,3.83,8.46,4100,1487.5,316.67,3.45,0.4,0.12,3.51,0.52,3.51,9.95},3},
{{0,0,0.06,0.64,0.27,0.01,0,0.01,0.01,0.02,0.25,0.06,0.07,0.12,0.03,0.09,0.02,0.01,0.36,0.02,0.01,0,0.23,0.14,0.34,0.1,0.04,0.03,0.04,0.09,0,3.84,8.9,4100,730.77,550,2.36,0.76,0.34,2.43,0.87,2.43,10.04},3},
{{0.03,0.02,0.02,0.06,0.03,0.01,0,0.03,0.02,0.15,0.01,0,0,0.01,0,0.01,0,0.01,0,0.33,0.35,0,0,0.01,0.01,0,0.01,0,0,0,0,3.4,0.68,600,575,625,0.75,2.21,0.77,2.79,6.94,2.79,3.76},3},
{{0.01,0.01,0.07,0.08,0.06,0.11,0.11,0.15,0.23,0.21,0.03,0.05,0.04,0.15,0.11,0.14,0.09,0.16,0.15,0.1,0,0,0.03,0.18,0.31,0.25,0.09,0.05,0.08,0.03,0,9.61,2.65,600,230.49,362.5,1.13,0.12,0.18,1.17,0.24,1.17,10.04},4},
{{0.01,0.06,0.1,0.08,0.06,0.1,0.14,0.11,0.19,0.17,0.09,0.09,0.09,0.16,0.11,0.1,0.11,0.15,0.08,0.03,0,0,0.03,0.1,0.14,0.21,0.13,0.1,0.12,0.19,0,9.54,2.84,600,209.57,300,1.2,0.12,0.27,1.24,0.15,1.24,10.04},4},
{{0.01,0.02,0.03,0.11,0.09,0.16,0.13,0.18,0.19,0.1,0.03,0.14,0.18,0.26,0.14,0.07,0.09,0.09,0.02,0.01,0,0,0,0.02,0.03,0.11,0.22,0.29,0.29,0.06,0,9.5,2.93,600,279.03,272.06,1.21,0.08,0.13,1.23,0.11,1.23,10.02},4},
{{0.03,0.08,0.08,0.08,0.11,0.14,0.11,0.12,0.16,0.12,0.13,0.15,0.08,0.21,0.11,0.13,0.08,0.11,0.01,0.02,0,0,0.01,0.02,0.02,0.15,0.23,0.19,0.19,0.2,0,9.49,2.94,600,252.56,741.67,1.26,0.11,0.18,1.3,0.14,1.3,10.03},4},
{{0.07,0.14,0.14,0.12,0.12,0.07,0.08,0.08,0.11,0.11,0.28,0.15,0.1,0.2,0.08,0.06,0.06,0.04,0.03,0.02,0,0,0,0.01,0.04,0.1,0.14,0.21,0.29,0.23,0,9.43,3.01,600,230,402.38,1.38,0.13,0.17,1.43,0.16,1.43,10},4},
{{0,0.03,0.05,0.15,0.13,0.16,0.12,0.1,0.17,0.12,0.18,0.26,0.12,0.23,0.07,0.06,0.05,0.02,0.02,0.01,0,0,0,0,0.02,0.04,0.1,0.16,0.29,0.41,0,9.43,3.13,600,278.57,588.89,1.23,0.11,0.18,1.25,0.15,1.25,10.02},4},
{{0,0.03,0.09,0.1,0.14,0.11,0.08,0.12,0.17,0.17,0.2,0.25,0.14,0.27,0.07,0.05,0.03,0.02,0,0,0,0,0,0.01,0.01,0.03,0.07,0.12,0.22,0.55,0,9.42,3.16,600,262.5,494.44,1.2,0.09,0.17,1.23,0.11,1.23,10.01},4},
{{0.04,0.06,0.07,0.06,0.07,0.06,0.08,0.1,0.13,0.35,0.15,0.11,0.07,0.18,0.05,0.09,0.07,0.16,0.11,0.05,0,0,0.02,0.04,0.09,0.21,0.15,0.2,0.17,0.14,0,9.52,2.88,600,255.26,916.67,1.12,0.16,0.21,1.19,0.23,1.19,10.02},4},
{{0.44,0.31,0.12,0.08,0.01,0.02,0.01,0,0.01,0.02,0.09,0.01,0.01,0.02,0.01,0.03,0.03,0.16,0.37,0.29,0.52,0.31,0.08,0.01,0.01,0.01,0.01,0,0,0.07,0,9.69,1.41,600,425,975,1.92,0.2,0.48,1.98,0.5,1.98,10.02},4},
{{0.45,0.24,0.1,0.09,0.04,0.03,0.02,0.02,0.02,0.02,0.08,0.03,0.02,0.06,0.03,0.04,0.06,0.21,0.22,0.27,0.25,0.37,0.25,0.07,0.03,0.03,0.01,0,0,0.01,0,9.66,1.65,600,258.11,2150,1.89,0.16,0.51,1.95,0.26,1.95,10.01},4},
{{0.45,0.23,0.12,0.07,0.05,0.03,0.01,0.01,0.03,0.03,0.05,0.01,0.01,0.08,0.05,0.06,0.06,0.21,0.22,0.27,0.28,0.58,0.09,0.01,0.01,0,0.02,0.01,0.01,0.01,0,9.69,1.47,600,194,4825,1.89,0.13,0.36,1.96,0.18,1.96,10.01},4},
{{0.05,0.08,0.12,0.18,0.19,0.14,0.09,0.06,0.05,0.07,0.1,0.11,0.12,0.29,0.09,0.11,0.06,0.06,0.03,0.04,0.03,0.03,0.01,0.03,0.05,0.11,0.23,0.32,0.12,0.1,0,9.5,2.84,600,360,700,1.4,0.16,0.27,1.47,0.34,1.47,10.04},4},
{{0.06,0.05,0.09,0.15,0.14,0.12,0.11,0.06,0.12,0.12,0.14,0.18,0.11,0.22,0.1,0.07,0.08,0.06,0.03,0.05,0.01,0.04,0.04,0.03,0.03,0.1,0.13,0.2,0.2,0.24,0,9.48,2.91,600,341.07,1220,1.33,0.16,0.32,1.4,0.25,1.4,10.02},4},
{{0.05,0.11,0.19,0.11,0.11,0.17,0.07,0.09,0.1,0.04,0.01,0.02,0.03,0.07,0.09,0.09,0.12,0.24,0.18,0.18,0.11,0.26,0.17,0.11,0.11,0.14,0.07,0.02,0.01,0.01,0,9.68,2.07,600,227.91,2325,1.4,0.11,0.55,1.44,0.15,1.44,10.02},4},
{{0,0.01,0.11,0.21,0.23,0.18,0.18,0.06,0.04,0,0,0.01,0.04,0.18,0.1,0.23,0.17,0.23,0.05,0.01,0,0,0.06,0.22,0.32,0.29,0.1,0.02,0.01,0,0,9.59,2.58,600,228.05,265.91,1.34,0.07,0.14,1.35,0.08,1.35,10.02},4},
{{0.01,0.08,0.14,0.2,0.16,0.14,0.12,0.06,0.05,0.06,0.06,0.04,0.04,0.21,0.09,0.13,0.12,0.18,0.12,0.04,0,0.01,0.11,0.19,0.22,0.14,0.1,0.15,0.06,0.04,0,9.57,2.63,600,231.71,1660,1.36,0.11,0.26,1.38,0.16,1.38,10.03},4},
{{0.01,0.03,0.08,0.1,0.14,0.24,0.15,0.13,0.11,0.04,0.04,0.07,0.07,0.24,0.2,0.15,0.1,0.09,0.04,0.02,0,0,0.03,0.09,0.09,0.14,0.21,0.24,0.17,0.05,0,9.54,2.82,600,207.45,645.45,1.28,0.08,0.19,1.3,0.12,1.3,10.03},4},
{{0,0.01,0.09,0.23,0.2,0.18,0.14,0.07,0.07,0.03,0.01,0.04,0.05,0.28,0.15,0.14,0.11,0.18,0.06,0.01,0,0,0.07,0.08,0.11,0.43,0.23,0.08,0.02,0,0,9.56,2.68,600,226.83,538.24,1.32,0.08,0.15,1.33,0.1,1.33,10.02},4},
{{0.04,0.02,0.04,0.07,0.08,0.12,0.15,0.13,0.24,0.13,0.01,0.03,0.08,0.16,0.1,0.11,0.1,0.18,0.12,0.13,0.06,0.05,0.24,0.13,0.09,0.12,0.11,0.14,0.07,0.02,0,9.62,2.43,600,251.28,475,1.2,0.12,0.43,1.25,0.16,1.25,10.02},4},
{{0.01,0.1,0.11,0.17,0.13,0.09,0.12,0.08,0.16,0.06,0.02,0.04,0.04,0.14,0.13,0.09,0.1,0.2,0.16,0.11,0,0.01,0.18,0.43,0.26,0.09,0.04,0,0.01,0,0,9.62,2.42,600,205.32,1264.29,1.32,0.11,0.15,1.34,0.14,1.34,10.01},4},
{{0.01,0.06,0.07,0.14,0.08,0.09,0.13,0.12,0.19,0.13,0.03,0.07,0.07,0.18,0.13,0.08,0.1,0.17,0.13,0.05,0.01,0.01,0.03,0.16,0.3,0.32,0.1,0.04,0.05,0.01,0,9.58,2.61,600,220.45,508.33,1.23,0.11,0.17,1.26,0.14,1.26,10.01},4},
{{0.18,0.09,0.12,0.11,0.09,0.12,0.11,0.08,0.08,0.05,0.05,0.05,0.07,0.19,0.09,0.11,0.04,0.14,0.14,0.13,0.03,0.11,0.38,0.08,0.04,0.07,0.11,0.12,0.05,0.03,0,9.6,2.33,600,223.26,666.67,1.52,0.13,0.45,1.6,0.17,1.6,10.02},4},
{{0.13,0.24,0.16,0.14,0.08,0.06,0.05,0.04,0.1,0.02,0.04,0.07,0.05,0.12,0.1,0.08,0.08,0.19,0.13,0.16,0,0.05,0.51,0.23,0.08,0.08,0.03,0.01,0.01,0.02,0,9.62,2.28,600,253.95,525,1.55,0.13,0.23,1.59,0.16,1.59,10.01},4},
{{0.32,0.13,0.07,0.06,0.04,0.05,0.06,0.04,0.08,0.16,0.17,0.02,0.02,0.13,0.07,0.05,0.05,0.13,0.15,0.23,0.12,0.32,0.21,0.09,0.04,0.04,0.02,0.04,0.02,0.1,0,9.6,2.08,600,2933.33,3750,1.63,0.27,0.7,1.79,0.47,1.79,10.03},4},
{{0.05,0.08,0.08,0.08,0.04,0.06,0.1,0.07,0.13,0.34,0.08,0.07,0.04,0.07,0.03,0.04,0.03,0.13,0.13,0.4,0.04,0.52,0.11,0.01,0.01,0.03,0.03,0.03,0.06,0.18,0,9.68,2.11,600,241.43,575,1.16,0.2,0.75,1.26,0.28,1.26,10.02},4},
{{0.12,0.05,0.05,0.04,0.15,0.04,0.1,0.07,0.14,0.26,0.11,0.04,0.03,0.07,0.07,0.06,0.05,0.09,0.04,0.46,0.5,0.08,0.02,0.01,0.02,0.01,0.04,0.1,0.12,0.13,0,9.7,1.69,600,2100,1266.67,1.27,0.28,1.18,1.4,0.45,1.4,10.03},4},
{{0.1,0.07,0.08,0.06,0.07,0.09,0.03,0.05,0.06,0.13,0.04,0.02,0,0.01,0.03,0.02,0.03,0.05,0.07,0.48,0.55,0.11,0.01,0,0,0.01,0.01,0,0,0.04,0,7.13,0.66,600,742.86,1600,1.02,1.96,0.41,1.54,2.73,1.54,7.27},4},
{{0.14,0.1,0.12,0.06,0.11,0.08,0.12,0.1,0.07,0.11,0.1,0.1,0.12,0.11,0.1,0.06,0.09,0.1,0.11,0.12,0.14,0.07,0.13,0.08,0.1,0.11,0.06,0.11,0.09,0.13,0,6.97,-1.02,1966.67,1150,2050,6.41,2.81,2,7.75,3.92,7.75,10.59},2},
{{0.1,0.11,0.09,0.09,0.08,0.13,0.11,0.1,0.11,0.1,0.09,0.12,0.1,0.1,0.11,0.12,0.11,0.1,0.07,0.1,0.09,0.08,0.09,0.13,0.1,0.12,0.12,0.09,0.1,0.11,0,6.59,-0.9,1480,1850,3225,6.7,2.24,1.64,7.9,3.35,7.9,10.31},2},
{{0.06,0.08,0.08,0.14,0.1,0.08,0.06,0.1,0.11,0.08,0.1,0.08,0.06,0.08,0.08,0.1,0.1,0.1,0.12,0.07,0.06,0.13,0.08,0.09,0.08,0.09,0.1,0.1,0.11,0.06,0,5.74,-0.76,1237.5,1862.5,1650,5.84,1.91,1.44,7.85,3.17,7.85,8.94},2},
{{0.04,0.07,0.11,0.06,0.09,0.13,0.16,0.14,0.14,0.07,0,0.01,0.04,0.06,0.11,0.05,0.12,0.14,0.08,0.26,0.11,0.15,0.21,0.1,0.04,0.07,0.07,0.06,0.1,0.11,0,8.01,0.19,2775,383.33,1175,6.7,9.11,4.13,8.08,10.22,8.08,15.28},0},
{{0.15,0.15,0.15,0.08,0.1,0.13,0.13,0.05,0.06,0.04,0,0.03,0.04,0.03,0.04,0.11,0.12,0.18,0.17,0.29,0.09,0.11,0.13,0.08,0.04,0.08,0.11,0.1,0.12,0.15,0,7.2,1.32,1033.33,414.71,2350,8.12,7.61,4.2,9.95,9.27,9.95,15.42},0},
{{0.34,0.18,0.12,0.08,0.05,0.07,0.06,0.04,0.06,0.04,0.07,0.07,0.12,0.11,0.14,0.1,0.14,0.1,0.11,0.06,0.09,0.13,0.1,0.08,0.06,0.08,0.08,0.13,0.14,0.13,0,-2.57,1.32,2100,1583.33,1975,11.35,8.15,4.15,12.95,9.88,12.95,16.36},0},
{{0.05,0.17,0.2,0.16,0.09,0.08,0.09,0.05,0.06,0.07,0.24,0.14,0.15,0.09,0.12,0.11,0.03,0.09,0.05,0,0.05,0.12,0.07,0.12,0.1,0.13,0.13,0.09,0.09,0.12,0,-9.17,1.39,800,1200,1475,7.97,8.05,3.45,9.26,9.34,9.26,15.89},0},
{{0.03,0.09,0.16,0.2,0.15,0.08,0.07,0.11,0.07,0.05,0.28,0.17,0.05,0.05,0.16,0.12,0.05,0.05,0.08,0.01,0.06,0.05,0.16,0.1,0.14,0.1,0.09,0.11,0.09,0.12,0,-8.92,1.35,2400,4000,2400,6.52,8.83,3.52,7.64,9.97,7.64,15.33},0},
{{0.03,0.13,0.16,0.17,0.11,0.09,0.1,0.1,0.08,0.06,0.25,0.17,0.09,0.07,0.16,0.08,0.07,0.06,0.06,0.01,0.1,0.12,0.06,0.12,0.1,0.09,0.09,0.12,0.12,0.1,0,-9.09,1.13,2375,4275,1425,6.9,8.61,3.87,8.12,9.79,8.12,15.67},0},
{{0.06,0.06,0.1,0.14,0.22,0.17,0.07,0.09,0.09,0.03,0.26,0.17,0.07,0.13,0.11,0.08,0.08,0.06,0.04,0.02,0.08,0.09,0.06,0.11,0.11,0.12,0.16,0.07,0.11,0.11,0,-9.27,1.32,1833.33,2600,1175,5.72,8.43,3.5,7.27,9.77,7.27,15.47},0},
{{0.03,0.05,0.05,0.08,0.13,0.1,0.16,0.11,0.12,0.18,0.18,0.19,0.17,0.13,0.08,0.06,0.07,0.05,0.05,0.04,0.09,0.11,0.07,0.07,0.08,0.14,0.14,0.1,0.12,0.11,0,-8.76,1.41,715,1775,2100,7.67,8,3.7,9.56,9.84,9.56,15.99},0},
{{0.01,0.05,0.07,0.05,0.07,0.08,0.03,0.06,0.19,0.3,0.02,0.1,0.14,0.12,0.11,0.11,0.12,0.16,0.11,0.03,0.09,0.15,0.09,0.1,0.1,0.11,0.11,0.12,0.08,0.07,0,-2.28,0.43,368,725,1550,11.1,7.83,3.46,12.77,9.23,12.77,15.64},0},
{{0,0.06,0.08,0.1,0.09,0.15,0.18,0.13,0.13,0.09,0,0.01,0.06,0.06,0.03,0.08,0.12,0.16,0.11,0.3,0.09,0.11,0.11,0.11,0.12,0.1,0.1,0.1,0.11,0.08,0,7.9,0.51,1500,410.87,1740,6.23,8.45,3.37,7.61,9.85,7.61,14.51},0},
{{0.35,0.12,0.13,0.1,0.1,0.04,0.07,0.07,0.04,0.01,0,0.01,0.02,0.13,0.11,0.12,0.16,0.14,0.23,0.1,0.11,0.07,0.08,0.08,0.08,0.14,0.1,0.12,0.08,0.16,0,3.41,1.21,2100,540,1135.71,10.77,6.82,3.95,12.6,8.06,12.6,15.35},0},
{{0.12,0.16,0.17,0.1,0.11,0.07,0.11,0.08,0.05,0.05,0.17,0.17,0.13,0.12,0.07,0.09,0.1,0.1,0.06,0.02,0.11,0.06,0.1,0.14,0.1,0.11,0.07,0.12,0.12,0.09,0,-7.26,0.81,550,2716.67,1925,8.12,8.68,3.56,9.59,10.1,9.59,15.4},0},
{{0.01,0.06,0.06,0.07,0.09,0.04,0.07,0.11,0.15,0.29,0.04,0.07,0.2,0.15,0.13,0.13,0.12,0.09,0.07,0.01,0.14,0.13,0.12,0.14,0.09,0.09,0.07,0.11,0.1,0.03,0,-4.77,-0.41,390,425,3850,10.44,6.88,3.48,12.11,8.24,12.11,15.08},0},
{{0,0.03,0.1,0.07,0.11,0.15,0.14,0.12,0.15,0.15,0,0.03,0.04,0.04,0.09,0.1,0.11,0.14,0.14,0.26,0.1,0.12,0.11,0.06,0.09,0.1,0.1,0.14,0.12,0.09,0,6.56,0.84,640,380,1600,6.9,8.54,3.8,8.45,10.07,8.45,14.51},0},
{{0.14,0.15,0.14,0.11,0.1,0.11,0.09,0.06,0.08,0.04,0,0.01,0.04,0.04,0.05,0.08,0.1,0.14,0.26,0.24,0.11,0.09,0.09,0.1,0.11,0.09,0.14,0.09,0.09,0.12,0,7.8,0.88,800,457.5,1850,8.2,7.52,3.76,10.01,9.1,10.01,15.33},0},
{{0.29,0.19,0.11,0.12,0.09,0.05,0.04,0.07,0.06,0.02,0.08,0.13,0.1,0.11,0.07,0.14,0.1,0.12,0.15,0.03,0.13,0.14,0.05,0.08,0.1,0.14,0.08,0.12,0.08,0.11,0,-3.17,0.46,1975,1175,1583.33,10.62,8.96,4.14,12.2,10.42,12.2,16.21},0},
{{0.05,0.09,0.11,0.16,0.16,0.14,0.09,0.1,0.11,0,0.24,0.16,0.14,0.1,0.08,0.1,0.08,0.05,0.05,0.03,0.08,0.08,0.09,0.15,0.11,0.11,0.1,0.12,0.11,0.08,0,-8.85,1.05,1512.5,3050,2625,6.13,8.54,3.31,7.46,10.13,7.46,15.34},0},
{{0.05,0.05,0.05,0.1,0.13,0.18,0.14,0.17,0.13,0.02,0.2,0.18,0.1,0.17,0.13,0.08,0.07,0.03,0.05,0.02,0.14,0.09,0.11,0.12,0.09,0.11,0.11,0.04,0.08,0.12,0,-9.2,0.2,2750,4650,1575,5.73,7.52,3.98,7.25,9.02,7.25,14.93},0},
{{0.04,0.06,0.09,0.08,0.12,0.1,0.19,0.2,0.11,0.05,0.17,0.2,0.14,0.11,0.13,0.11,0.06,0.05,0.03,0.03,0.11,0.09,0.12,0.15,0.11,0.1,0.08,0.09,0.1,0.06,0,-8.89,0.14,2000,783.33,4325,6.26,7.72,3.41,7.49,9.24,7.49,14.77},0},
{{0.04,0.05,0.05,0.11,0.12,0.17,0.16,0.21,0.12,0.01,0.15,0.24,0.11,0.11,0.14,0.1,0.08,0.05,0.03,0.02,0.1,0.09,0.09,0.17,0.17,0.11,0.07,0.09,0.05,0.09,0,-8.77,0.41,4250,1150,1750,5.38,7.7,3.02,6.61,9.17,6.61,14.11},0},
{{0.02,0.05,0.06,0.09,0.1,0.1,0.09,0.14,0.12,0.18,0.1,0.13,0.22,0.15,0.11,0.12,0.09,0.06,0.04,0,0.12,0.08,0.1,0.09,0.11,0.09,0.1,0.1,0.13,0.11,0,-7.68,0.9,481.82,2300,1500,8.72,6.73,3.9,10.59,8.13,10.59,15.35},0},
{{0.01,0.04,0.05,0.04,0.04,0.09,0.08,0.11,0.26,0.25,0,0.03,0.06,0.11,0.08,0.14,0.07,0.14,0.18,0.16,0.09,0.12,0.09,0.07,0.07,0.07,0.1,0.19,0.12,0.11,0,4.03,1.28,526.47,570,800,10.06,8.62,3.96,11.68,10.02,11.68,15.68},0},
{{0.15,0.14,0.15,0.13,0.1,0.07,0.11,0.09,0.07,0.03,0,0.01,0.04,0.02,0.05,0.08,0.15,0.16,0.25,0.23,0.14,0.12,0.09,0.11,0.12,0.11,0.1,0.09,0.08,0.06,0,7.51,-0.12,1350,468.42,2250,8.4,6.85,3.69,9.99,8.37,9.99,14.82},0},
{{0.37,0.18,0.09,0.09,0.06,0.06,0.06,0.05,0.05,0.02,0,0.04,0.07,0.16,0.12,0.13,0.16,0.14,0.15,0.04,0.12,0.09,0.08,0.07,0.1,0.08,0.12,0.11,0.13,0.13,0,-0.19,1.2,1975,2337.5,2366.67,11.6,6.92,4.12,13.25,8.29,13.25,15.74},0},
{{0.1,0.16,0.11,0.09,0.15,0.14,0.05,0.08,0.11,0.03,0.19,0.16,0.1,0.11,0.1,0.08,0.09,0.08,0.08,0.03,0.13,0.09,0.08,0.06,0.13,0.09,0.1,0.11,0.1,0.14,0,-7.23,1.06,400,1016.67,2366.67,7.61,8.97,4.05,9.33,10.38,9.33,15.63},0},
{{0.01,0.06,0.05,0.07,0.04,0.1,0.11,0.1,0.14,0.23,0.01,0.07,0.16,0.1,0.14,0.12,0.08,0.17,0.05,0.08,0.1,0.08,0.12,0.1,0.08,0.13,0.11,0.09,0.11,0.09,0,-0.98,0.84,512.5,500,2200,10.14,8.37,3.72,12,10.07,12,15.47},0},
{{0.2,0.07,0.13,0.1,0.08,0.13,0.14,0.11,0.06,0.01,0,0.01,0.04,0.06,0.07,0.05,0.14,0.16,0.24,0.2,0.1,0.11,0.13,0.1,0.09,0.06,0.07,0.1,0.14,0.12,0,6.99,0.94,1433.33,507.69,1575,8.16,7.27,4.07,10.25,8.84,10.25,15.16},0},
{{0.34,0.22,0.1,0.11,0.06,0.07,0.03,0.02,0.05,0.03,0.01,0.01,0.08,0.18,0.13,0.15,0.19,0.13,0.12,0.03,0.07,0.14,0.11,0.1,0.08,0.09,0.13,0.12,0.1,0.09,0,-0.58,0.87,1625,1625,3375,11.48,6.22,3.39,13.09,7.48,13.09,14.88},0},
{{0.07,0.18,0.13,0.15,0.13,0.13,0.09,0.07,0.06,0.01,0.21,0.16,0.11,0.1,0.11,0.09,0.1,0.07,0.07,0.01,0.1,0.11,0.1,0.09,0.1,0.13,0.12,0.09,0.08,0.1,0,-8.05,0.66,2400,2500,3150,6.99,8.57,3.65,8.53,9.86,8.53,15.24},0},
{{0.04,0.06,0.03,0.11,0.1,0.11,0.15,0.23,0.12,0.07,0.21,0.2,0.11,0.13,0.07,0.1,0.09,0.04,0.04,0.03,0.1,0.09,0.09,0.15,0.11,0.13,0.08,0.09,0.08,0.11,0,-8.99,0.66,1525,3475,533.33,6.36,8.38,3.33,7.71,10.05,7.71,15.31},0},
{{0.02,0.05,0.07,0.05,0.07,0.07,0.13,0.11,0.15,0.25,0.08,0.1,0.24,0.12,0.12,0.14,0.12,0.05,0.04,0.02,0.08,0.06,0.13,0.13,0.12,0.17,0.11,0.06,0.08,0.09,0,-6.6,0.76,553.57,1150,2800,9.44,6.85,3.01,11.13,8.33,11.13,14.92},0},
{{0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,-0.03,0,553.57,1150,2800,0.13,0.03,0,9.04,2.75,9.04,0.14},0},
{{0.09,0.11,0.08,0.08,0.08,0.14,0.1,0.11,0.11,0.12,0.11,0.13,0.1,0.09,0.08,0.11,0.09,0.11,0.1,0.07,0.09,0.11,0.08,0.09,0.08,0.12,0.12,0.15,0.11,0.07,0,8.7,-0.58,2825,822.73,4525,5.74,4.53,2.56,6.76,5.45,6.76,11.93},2},
{{0.13,0.06,0.07,0.11,0.1,0.12,0.08,0.1,0.16,0.09,0.1,0.11,0.08,0.11,0.1,0.09,0.15,0.08,0.1,0.1,0.09,0.1,0.1,0.1,0.09,0.1,0.1,0.14,0.12,0.09,0,8.98,-0.43,3875,657.14,3925,5.84,4.48,2.71,6.99,5.49,6.99,12.27},2},
{{0.06,0.08,0.11,0.08,0.12,0.1,0.09,0.08,0.17,0.12,0.06,0.1,0.11,0.1,0.1,0.14,0.07,0.12,0.12,0.08,0.13,0.04,0.09,0.11,0.14,0.09,0.09,0.13,0.15,0.06,0,9.29,-0.51,1700,790.91,1150,5.52,4.09,2.5,6.46,5.01,6.46,12.01},2},
{{0.12,0.07,0.06,0.1,0.13,0.11,0.06,0.11,0.11,0.16,0.12,0.07,0.09,0.11,0.1,0.11,0.08,0.12,0.09,0.1,0.08,0.06,0.09,0.13,0.12,0.1,0.16,0.12,0.1,0.07,0,9.11,-0.4,1950,606.67,1587.5,5.94,4.61,2.28,7.02,5.64,7.02,12.22},2},
{{0.08,0.1,0.11,0.1,0.11,0.11,0.06,0.1,0.13,0.13,0.1,0.07,0.11,0.12,0.13,0.13,0.11,0.06,0.09,0.09,0.07,0.12,0.14,0.1,0.11,0.09,0.13,0.07,0.11,0.09,0,8.83,-0.5,2200,646.43,2175,5.92,4.04,2.49,7.02,5.16,7.02,12.03},2},
{{0.14,0.06,0.08,0.08,0.1,0.11,0.09,0.08,0.18,0.1,0.11,0.08,0.1,0.12,0.09,0.11,0.09,0.11,0.1,0.1,0.09,0.09,0.09,0.08,0.1,0.11,0.16,0.1,0.11,0.1,0,9.08,-0.24,1320,550,3275,5.93,4.58,2.55,7.16,5.62,7.16,12.41},2},
{{0.08,0.12,0.08,0.12,0.1,0.09,0.06,0.16,0.12,0.1,0.12,0.06,0.13,0.08,0.11,0.1,0.07,0.11,0.11,0.12,0.09,0.07,0.07,0.11,0.11,0.12,0.12,0.13,0.12,0.1,0,9.2,-0.09,3275,568.75,4350,5.96,4.67,2.61,7.01,5.73,7.01,12.48},2},
{{0.09,0.11,0.13,0.1,0.11,0.08,0.08,0.12,0.13,0.08,0.1,0.1,0.12,0.09,0.12,0.08,0.09,0.13,0.1,0.09,0.09,0.09,0.06,0.07,0.06,0.12,0.15,0.14,0.13,0.11,0,8.98,0.11,1033.33,712.5,1766.67,6.01,4.46,2.8,7.04,5.42,7.04,12.36},2},
{{0.14,0.07,0.09,0.09,0.09,0.11,0.08,0.09,0.15,0.11,0.12,0.09,0.07,0.11,0.1,0.12,0.08,0.11,0.09,0.11,0.1,0.1,0.07,0.1,0.1,0.14,0.11,0.13,0.07,0.11,0,9.23,-0.4,3900,603.13,3350,6.08,4.61,2.65,7.27,5.69,7.27,12.58},2},
{{0.1,0.1,0.11,0.09,0.1,0.1,0.09,0.11,0.09,0.12,0.11,0.07,0.11,0.1,0.1,0.09,0.1,0.12,0.12,0.08,0.12,0.1,0.1,0.09,0.07,0.09,0.1,0.14,0.11,0.1,0,9.17,-0.44,1800,734.62,2700,6.17,4.55,2.88,7.17,5.58,7.17,12.51},2},
{{0.08,0.13,0.1,0.07,0.12,0.12,0.09,0.06,0.14,0.1,0.11,0.09,0.12,0.1,0.1,0.08,0.1,0.1,0.12,0.1,0.08,0.13,0.11,0.11,0.13,0.1,0.08,0.08,0.11,0.09,0,8.95,-0.6,1675,669.23,2825,6.01,4.63,2.41,7.02,5.59,7.02,12.17},2},
{{0.1,0.1,0.12,0.11,0.1,0.08,0.11,0.06,0.11,0.13,0.12,0.1,0.07,0.11,0.09,0.11,0.1,0.11,0.1,0.09,0.09,0.1,0.13,0.09,0.12,0.11,0.07,0.14,0.09,0.09,0,9.09,-0.54,3250,603.13,2650,6.22,4.64,2.5,7.23,5.69,7.23,12.46},2},
{{0.09,0.1,0.11,0.1,0.13,0.11,0.08,0.09,0.12,0.1,0.11,0.08,0.12,0.07,0.13,0.08,0.1,0.11,0.11,0.08,0.11,0.08,0.12,0.13,0.11,0.08,0.07,0.1,0.12,0.11,0,8.99,-0.59,3350,623.33,2550,6.13,4.49,2.66,7.15,5.54,7.15,12.34},2},
{{0.06,0.08,0.15,0.12,0.09,0.15,0.12,0.08,0.08,0.1,0.08,0.1,0.13,0.11,0.07,0.13,0.14,0.12,0.07,0.08,0.14,0.1,0.12,0.11,0.09,0.07,0.09,0.1,0.09,0.12,0,8.94,-0.63,2825,800,3400,5.92,4,3.01,6.66,4.96,6.66,12.17},2},
{{0.08,0.11,0.1,0.12,0.12,0.1,0.12,0.11,0.07,0.09,0.07,0.14,0.11,0.1,0.1,0.12,0.08,0.1,0.1,0.1,0.14,0.13,0.1,0.08,0.08,0.13,0.09,0.1,0.07,0.12,0,9,-0.72,2800,600,3400,6.26,4.29,2.78,7.11,5.29,7.11,12.31},2},
{{0.05,0.1,0.13,0.13,0.13,0.11,0.17,0.05,0.07,0.09,0.06,0.11,0.12,0.1,0.14,0.09,0.12,0.07,0.12,0.08,0.14,0.07,0.1,0.09,0.08,0.07,0.16,0.11,0.11,0.1,0,8.95,-0.56,3425,836.36,3975,5.93,4.01,2.76,6.55,4.99,6.55,11.92},2},
{{0.09,0.1,0.11,0.1,0.09,0.17,0.14,0.08,0.06,0.08,0.09,0.13,0.11,0.11,0.08,0.08,0.16,0.08,0.09,0.08,0.11,0.1,0.11,0.09,0.07,0.12,0.14,0.09,0.09,0.1,0,8.56,-0.56,3925,1171.43,2800,6.04,4.31,2.61,6.83,5.26,6.83,11.78},2},
{{0.11,0.13,0.07,0.07,0.07,0.13,0.15,0.13,0.06,0.1,0.1,0.13,0.06,0.1,0.12,0.08,0.09,0.13,0.12,0.09,0.13,0.1,0.08,0.14,0.15,0.11,0.1,0.06,0.1,0.05,0,9.1,-1.03,1580,658.33,3650,6.01,4.51,2.17,6.88,5.48,6.88,12.19},2},
{{0.1,0.11,0.09,0.12,0.11,0.08,0.13,0.11,0.07,0.11,0.09,0.1,0.08,0.08,0.12,0.15,0.11,0.08,0.13,0.08,0.04,0.13,0.12,0.11,0.1,0.11,0.09,0.1,0.12,0.11,0,9.08,-0.29,4150,790.91,1375,6.17,4.1,2.57,7.01,5.13,7.01,12.18},2},
{{0.08,0.12,0.09,0.14,0.09,0.11,0.12,0.13,0.05,0.09,0.12,0.09,0.1,0.14,0.08,0.08,0.11,0.11,0.09,0.09,0.07,0.13,0.11,0.08,0.09,0.11,0.11,0.1,0.07,0.15,0,8.69,-0.15,2800,977.78,2800,6.3,4.48,2.95,7.1,5.41,7.1,12.2},2},
{{0.14,0.09,0.11,0.1,0.08,0.08,0.09,0.13,0.07,0.12,0.15,0.09,0.08,0.11,0.08,0.08,0.09,0.12,0.09,0.13,0.11,0.09,0.11,0.13,0.13,0.11,0.09,0.06,0.1,0.09,0,8.94,-0.63,3375,642.86,3400,6.58,4.98,2.54,7.68,5.99,7.68,12.76},2},
{{0.13,0.09,0.1,0.1,0.1,0.11,0.11,0.07,0.11,0.1,0.12,0.11,0.07,0.1,0.09,0.11,0.09,0.1,0.11,0.11,0.1,0.09,0.11,0.11,0.14,0.09,0.08,0.08,0.09,0.13,0,9.07,-0.43,1962.5,715.38,2250,6.5,4.65,2.69,7.6,5.71,7.6,12.7},2},
{{0.13,0.12,0.09,0.09,0.12,0.06,0.11,0.11,0.11,0.08,0.13,0.11,0.11,0.1,0.1,0.07,0.07,0.11,0.12,0.1,0.11,0.08,0.11,0.14,0.09,0.12,0.1,0.06,0.1,0.11,0,8.85,-0.54,1675,628.57,1650,6.59,4.87,2.66,7.6,5.79,7.6,12.63},2},
{{0.1,0.09,0.14,0.09,0.13,0.06,0.13,0.1,0.1,0.08,0.06,0.15,0.11,0.11,0.11,0.09,0.1,0.08,0.12,0.09,0.11,0.07,0.16,0.12,0.1,0.09,0.06,0.08,0.1,0.13,0,8.87,-0.47,2850,783.33,3425,6.34,4.36,2.92,7.31,5.28,7.31,12.42},2},
{{0.1,0.12,0.09,0.14,0.11,0.07,0.09,0.15,0.07,0.08,0.11,0.08,0.11,0.12,0.11,0.09,0.09,0.1,0.11,0.08,0.1,0.13,0.11,0.09,0.09,0.09,0.09,0.11,0.09,0.12,0,8.79,-0.43,1700,770.83,1125,6.19,4.33,2.77,7.08,5.29,7.08,12.18},2},
{{0.15,0.12,0.1,0.1,0.07,0.1,0.09,0.1,0.1,0.09,0.08,0.18,0.08,0.07,0.09,0.1,0.1,0.11,0.08,0.11,0.11,0.14,0.11,0.07,0.11,0.1,0.09,0.12,0.08,0.09,0,8.85,-0.79,2550,642.86,1125,6.43,4.72,2.67,7.51,5.66,7.51,12.57},2},
{{0.16,0.08,0.09,0.11,0.07,0.09,0.11,0.14,0.07,0.1,0.12,0.1,0.11,0.08,0.11,0.09,0.1,0.1,0.1,0.1,0.11,0.13,0.11,0.07,0.05,0.13,0.12,0.09,0.11,0.11,0,8.64,-0.39,1125,925,1675,6.65,4.59,2.94,7.7,5.61,7.7,12.56},2},
{{0.06,0.1,0.11,0.11,0.06,0.11,0.08,0.07,0.08,0.06,0.06,0.08,0.12,0.07,0.09,0.11,0.11,0.06,0.07,0.05,0.09,0.12,0.05,0.08,0.04,0.09,0.08,0.07,0.09,0.12,0,6.94,-0.04,1437.5,1825,2300,4.93,3.38,2.59,6.8,5.06,6.8,9.77},2},
{{0.29,0.13,0.1,0.07,0.06,0.07,0.07,0.07,0.14,0.04,0,0.01,0.02,0.04,0.03,0.06,0.05,0.08,0.22,0.49,0.03,0.14,0.25,0.12,0.11,0.11,0.1,0.05,0.07,0.05,0,5.5,0.09,4175,650,1525,10.4,7.97,3.56,12.3,9.92,12.3,16.26},0},
{{0.33,0.18,0.08,0.04,0.04,0.05,0.06,0.08,0.1,0.05,0,0.02,0.01,0.03,0.12,0.1,0.12,0.18,0.19,0.25,0.04,0.12,0.21,0.17,0.11,0.08,0.1,0.04,0.08,0.07,0,-0.07,0.15,1575,1300,1633.33,11.34,7.55,3.77,13.2,9.22,13.2,15.97},0},
{{0.44,0.14,0.07,0.04,0.03,0.04,0.03,0.05,0.06,0.12,0,0.04,0.09,0.14,0.17,0.09,0.1,0.12,0.08,0.18,0.03,0.09,0.17,0.12,0.1,0.12,0.09,0.12,0.09,0.09,0,-5.06,1.36,1450,1740,2750,13.62,9.56,4.01,14.97,11.36,14.97,19.29},0},
{{0.27,0.24,0.1,0.06,0.05,0.05,0.03,0.04,0.05,0.11,0,0.23,0.09,0.09,0.1,0.07,0.11,0.11,0.07,0.15,0.05,0.06,0.13,0.1,0.09,0.1,0.11,0.11,0.12,0.16,0,-8.23,2.59,800,1250,1766.67,12.29,9.32,4.49,13.67,10.77,13.67,19.32},0},
{{0.11,0.07,0.1,0.09,0.1,0.1,0.09,0.08,0.1,0.16,0,0.29,0.1,0.06,0.09,0.06,0.1,0.13,0.11,0.08,0.14,0.08,0.09,0.04,0.06,0.05,0.08,0.12,0.14,0.22,0,-9.35,2.3,907.14,1683.33,1775,8.61,8.95,6.61,10.55,10.02,10.55,18.3},0},
{{0.12,0.08,0.1,0.13,0.07,0.07,0.09,0.13,0.08,0.15,0,0.25,0.08,0.12,0.09,0.13,0.09,0.09,0.09,0.08,0.13,0.1,0.07,0.05,0.06,0.08,0.12,0.15,0.12,0.16,0,-9.85,1.54,1175,1012.5,2133.33,8.56,8.13,5.9,10.61,9.46,10.61,18.03},0},
{{0.1,0.08,0.09,0.09,0.09,0.17,0.08,0.13,0.07,0.12,0,0.23,0.12,0.06,0.11,0.12,0.12,0.09,0.1,0.08,0.1,0.12,0.09,0.04,0.07,0.07,0.08,0.09,0.13,0.22,0,-9.49,2.15,1175,2175,1575,7.72,8.02,5.94,9.83,9.36,9.83,17.13},0},
{{0.1,0.09,0.08,0.08,0.11,0.13,0.07,0.12,0.09,0.14,0,0.26,0.09,0.08,0.08,0.09,0.13,0.09,0.14,0.06,0.14,0.08,0.07,0.08,0.07,0.06,0.06,0.11,0.16,0.19,0,-9.24,2.13,1000,975,1050,8.2,8.38,6.03,10.27,9.57,10.27,17.45},0},
{{0.12,0.13,0.14,0.12,0.12,0.04,0.08,0.08,0.06,0.14,0,0.28,0.08,0.09,0.09,0.09,0.1,0.07,0.14,0.08,0.1,0.11,0.11,0.1,0.11,0.09,0.1,0.1,0.09,0.11,0,-9.58,0.65,1433.33,1550,4600,9.08,8.62,4.99,10.85,9.87,10.85,17.67},0},
{{0.07,0.12,0.09,0.11,0.12,0.09,0.09,0.11,0.08,0.15,0,0.23,0.1,0.09,0.1,0.1,0.1,0.13,0.09,0.08,0.09,0.08,0.08,0.08,0.1,0.14,0.12,0.11,0.08,0.14,0,-9.17,1.56,1120,2800,3900,8,8.38,4.68,9.84,9.78,9.84,16.74},0},
{{0.08,0.09,0.07,0.13,0.12,0.09,0.09,0.11,0.11,0.12,0,0.28,0.09,0.07,0.09,0.13,0.1,0.1,0.1,0.07,0.1,0.16,0.1,0.13,0.11,0.07,0.08,0.07,0.07,0.13,0,-9.9,0.68,1371.43,1575,775,7.69,8.12,5.4,9.57,9.53,9.57,17.29},0},
{{0.04,0.1,0.07,0.08,0.11,0.14,0.14,0.12,0.12,0.1,0,0.26,0.12,0.11,0.08,0.07,0.09,0.09,0.12,0.08,0.11,0.16,0.09,0.1,0.13,0.06,0.05,0.07,0.07,0.16,0,-9.63,0.93,2850,2050,800,6.51,8.99,5.85,8.39,10.32,8.39,17.37},0},
{{0.08,0.09,0.14,0.12,0.09,0.11,0.08,0.09,0.14,0.08,0,0.22,0.12,0.1,0.11,0.08,0.14,0.1,0.07,0.08,0.11,0.06,0.1,0.04,0.12,0.1,0.14,0.1,0.14,0.12,0,-9.6,1.32,1250,2350,2333.33,7.52,8.27,5.1,9.19,9.59,9.19,16.88},0},
{{0.06,0.1,0.11,0.08,0.14,0.13,0.11,0.09,0.1,0.11,0,0.2,0.15,0.08,0.09,0.12,0.09,0.12,0.11,0.07,0.13,0.07,0.06,0.07,0.12,0.13,0.14,0.16,0.08,0.08,0,-9.32,0.73,1430,1200,950,7.38,8.31,4.79,9.23,9.64,9.23,16.63},0},
{{0.04,0.09,0.1,0.07,0.14,0.09,0.15,0.12,0.11,0.11,0,0.21,0.1,0.15,0.09,0.08,0.1,0.11,0.13,0.05,0.15,0.08,0.08,0.08,0.08,0.11,0.14,0.15,0.08,0.08,0,-9.71,0.41,1187.5,2400,1783.33,6.6,8.1,5.04,8.47,9.19,8.47,16.22},0},
{{0.08,0.09,0.18,0.12,0.08,0.07,0.1,0.12,0.07,0.13,0,0.24,0.09,0.11,0.08,0.09,0.11,0.12,0.11,0.07,0.09,0.13,0.11,0.06,0.09,0.1,0.13,0.1,0.15,0.06,0,-9.2,0.8,2350,1375,4250,7.96,8.43,4.65,9.71,9.7,9.71,16.5},0},
{{0.06,0.09,0.12,0.1,0.11,0.11,0.13,0.11,0.07,0.11,0,0.18,0.12,0.12,0.12,0.12,0.09,0.14,0.08,0.06,0.12,0.07,0.13,0.09,0.09,0.1,0.14,0.12,0.11,0.05,0,-9.49,0.54,1200,1425,1900,7.01,7.69,4.54,8.94,9.02,8.94,15.88},0},
{{0.06,0.16,0.1,0.14,0.1,0.07,0.11,0.08,0.09,0.12,0,0.22,0.1,0.12,0.09,0.06,0.13,0.15,0.06,0.1,0.13,0.05,0.09,0.16,0.11,0.14,0.12,0.11,0.08,0.04,0,-9.08,-0.02,1200,1587.5,2933.33,7.93,8.55,4.5,9.56,9.77,9.56,16.71},0},
{{0.05,0.13,0.14,0.13,0.16,0.11,0.08,0.08,0.05,0.1,0,0.2,0.11,0.09,0.13,0.13,0.07,0.1,0.1,0.08,0.12,0.1,0.05,0.03,0.11,0.1,0.13,0.16,0.14,0.08,0,-9.26,1.22,1308.33,3950,250,7.53,8.16,5.11,9.15,9.63,9.15,16.69},0},
{{0.06,0.09,0.13,0.1,0.14,0.12,0.07,0.12,0.13,0.07,0,0.17,0.12,0.14,0.12,0.11,0.08,0.1,0.12,0.06,0.13,0.08,0.05,0.1,0.08,0.19,0.13,0.14,0.09,0.03,0,-9.27,0.25,1587.5,3200,4125,7.01,8.11,4.37,8.68,9.59,8.68,16.1},0},
{{0.06,0.14,0.12,0.15,0.15,0.09,0.09,0.03,0.11,0.08,0,0.21,0.14,0.07,0.11,0.07,0.11,0.1,0.1,0.1,0.13,0.06,0.12,0.08,0.13,0.09,0.06,0.09,0.18,0.09,0,-9.17,0.76,2150,1833.33,3450,7.87,8.72,5.27,9.43,10,9.43,17.01},0},
{{0.04,0.12,0.12,0.11,0.07,0.13,0.11,0.11,0.12,0.1,0,0.19,0.11,0.15,0.11,0.08,0.1,0.1,0.09,0.08,0.1,0.09,0.09,0.1,0.13,0.13,0.1,0.11,0.1,0.07,0,-9.66,0.57,2162.5,800,1450,6.96,8.15,4.53,8.67,9.43,8.67,16.31},0},
{{0.07,0.09,0.1,0.17,0.1,0.08,0.11,0.09,0.14,0.08,0,0.18,0.14,0.11,0.13,0.13,0.08,0.11,0.08,0.07,0.12,0.08,0.07,0.11,0.09,0.09,0.1,0.14,0.12,0.11,0,-9.82,0.86,1450,3600,1433.33,7.34,7.91,5.19,9.01,9.36,9.01,16.93},0},
{{0.07,0.05,0.11,0.12,0.1,0.15,0.15,0.1,0.12,0.06,0,0.18,0.12,0.15,0.07,0.13,0.13,0.07,0.08,0.09,0.13,0.07,0.09,0.12,0.1,0.12,0.11,0.13,0.1,0.06,0,-9.27,0.27,1300,4325,2575,6.52,8.25,4.86,8.35,9.88,8.35,16.39},0},
{{0.03,0.05,0.05,0.11,0.08,0.13,0.2,0.15,0.14,0.08,0,0.24,0.13,0.11,0.14,0.1,0.06,0.08,0.08,0.07,0.09,0.22,0.14,0.15,0.11,0.02,0.03,0.04,0.06,0.15,0,-10.58,0.27,3175,4375,775,5.27,7.82,5.48,7.08,9.42,7.08,16.73},0},
{{0.04,0.04,0.07,0.07,0.12,0.09,0.2,0.15,0.18,0.06,0,0.23,0.13,0.11,0.12,0.1,0.11,0.08,0.1,0.05,0.07,0.25,0.13,0.14,0.09,0.02,0.04,0.04,0.07,0.16,0,-10.52,0.49,2400,3200,1140,5.25,7.74,5.75,7,9.15,7,16.58},0},
{{0.05,0.09,0.09,0.1,0.13,0.09,0.11,0.17,0.12,0.08,0,0.23,0.1,0.11,0.1,0.13,0.09,0.07,0.08,0.09,0.1,0.1,0.08,0.15,0.14,0.12,0.16,0.09,0.07,0.02,0,-9.54,-0.08,1575,1175,2100,6.53,8.45,3.87,8.3,10.18,8.3,16.19},0},
{{0.02,0.09,0.12,0.14,0.11,0.09,0.12,0.11,0.12,0.1,0,0.19,0.16,0.12,0.09,0.08,0.13,0.09,0.07,0.09,0.11,0.09,0.08,0.1,0.12,0.17,0.11,0.09,0.1,0.05,0,-9.77,0.54,2700,2000,1083.33,6.76,8.45,4.2,8.35,10,8.35,16.54},0},
{{0.04,0.03,0.09,0.11,0.13,0.18,0.09,0.13,0.13,0.09,0,0.17,0.11,0.14,0.08,0.13,0.1,0.11,0.07,0.11,0.08,0.09,0.06,0.12,0.16,0.14,0.1,0.12,0.09,0.08,0,-8.82,0.83,2166.67,2025,2000,5.95,8.43,4.26,7.67,9.94,7.67,15.65},0},
{{0,0,0.01,0.03,0.04,0.11,0.06,0.04,0.01,0.01,0,0.02,0.01,0.02,0.06,0.14,0.04,0.01,0,0,0.01,0.01,0.02,0.1,0.05,0.04,0.03,0.03,0.02,0,0,-2.9,0.2,675,2025,333.33,0.97,2.09,0.68,4.28,8.32,4.28,3.31},0},
{{0.16,0.13,0.09,0.09,0.1,0.09,0.1,0.12,0.07,0,0.09,0.11,0.06,0.11,0.13,0.09,0.08,0.09,0.12,0,0.1,0.09,0.08,0.09,0.11,0.11,0.11,0.1,0.12,0,0,7.8,-1.26,3800,2516.67,1400,4.83,2.51,1.64,5.69,3.2,5.69,9.82},5},
{{0.09,0.09,0.13,0.08,0.09,0.12,0.1,0.09,0.13,0,0.09,0.1,0.12,0.11,0.07,0.11,0.11,0.13,0.1,0,0.09,0.12,0.09,0.09,0.12,0.1,0.09,0.13,0.11,0,0,7.48,-1.45,3325,1850,2633.33,5.71,2.28,1.51,6.63,3.02,6.63,10.01},5},
{{0.04,0.07,0.06,0.11,0.11,0.08,0.08,0.08,0.09,0,0.11,0.07,0.1,0.08,0.09,0.09,0.08,0.08,0.07,0,0.1,0.07,0.11,0.08,0.08,0.09,0.08,0.07,0.06,0,0,5.53,-1.36,1566.67,1625,3650,4.91,1.87,1.39,7.08,3.08,7.08,7.98},5},
{{0.16,0.12,0.13,0.13,0.07,0.08,0.08,0.09,0.09,0.07,0.05,0.07,0.09,0.06,0.08,0.11,0.12,0.12,0.13,0.19,0.09,0.09,0.1,0.11,0.08,0.08,0.1,0.06,0.16,0.14,0,6.56,-0.07,966.67,713.64,1800,7.06,4.59,2.55,8.71,5.67,8.71,11.14},1},
{{0.07,0.12,0.1,0.13,0.06,0.08,0.14,0.12,0.09,0.12,0.07,0.1,0.08,0.09,0.06,0.11,0.11,0.13,0.11,0.16,0.09,0.11,0.13,0.12,0.09,0.11,0.08,0.14,0.07,0.07,0,5.46,-0.71,719.23,778.57,4400,8.62,4.48,2.21,10.25,5.51,10.25,11.69},1},
{{0.1,0.09,0.1,0.08,0.13,0.12,0.09,0.11,0.11,0.08,0.11,0.11,0.11,0.12,0.13,0.09,0.13,0.08,0.1,0.04,0.11,0.09,0.08,0.08,0.11,0.13,0.1,0.1,0.1,0.12,0,3.44,-0.41,1056.25,700,4550,8.33,3.51,2.49,9.83,4.49,9.83,10.53},1},
{{0.07,0.07,0.07,0.05,0.14,0.12,0.08,0.07,0.12,0.12,0.17,0.12,0.12,0.11,0.14,0.08,0.05,0.06,0.06,0.01,0.1,0.1,0.1,0.07,0.11,0.1,0.1,0.1,0.07,0.07,0,1.64,-0.71,670.83,1450,2166.67,8.51,2.79,1.96,10.9,4.07,10.9,9.87},1},
{{0.1,0.08,0.07,0.07,0.07,0.08,0.13,0.11,0.12,0.17,0.01,0.02,0.04,0.07,0.09,0.08,0.16,0.18,0.18,0.18,0.1,0.12,0.13,0.11,0.14,0.11,0.08,0.04,0.09,0.1,0,6.13,-3.24,1816.67,1800,3125,7.97,3.44,2.73,9.73,4.54,9.73,12},5},
{{0.14,0.1,0.09,0.08,0.07,0.09,0.11,0.12,0.11,0.1,0.03,0.09,0.08,0.14,0.13,0.13,0.14,0.09,0.09,0.09,0.14,0.11,0.09,0.09,0.09,0.09,0.11,0.11,0.08,0.11,0,3.51,-3.03,3050,3175,4500,9.33,3.16,3.05,10.92,4.3,10.92,11.9},5},
{{0.1,0.11,0.11,0.12,0.1,0.13,0.09,0.09,0.12,0.06,0.1,0.11,0.11,0.13,0.12,0.14,0.07,0.08,0.09,0.06,0.09,0.09,0.1,0.1,0.12,0.1,0.1,0.09,0.11,0.1,0,2.5,-2.54,2475,3050,1866.67,9.6,3.35,2.78,10.86,4.6,10.86,11.62},5},
{{0.05,0.09,0.12,0.11,0.14,0.08,0.06,0.05,0.04,0.06,0.24,0.17,0.14,0.06,0.04,0.04,0.02,0.03,0.03,0.05,0.06,0.07,0.06,0.07,0.04,0.09,0.09,0.14,0.12,0.08,0,-0.28,-1.63,1425,1500,1300,7.78,2.87,1.96,10.8,5.02,10.8,9.14},5},
{{0.05,0.06,0.04,0.06,0.05,0.08,0.11,0.1,0.22,0.25,0.08,0.19,0.12,0.13,0.11,0.06,0.08,0.11,0.11,0.03,0.08,0.07,0.07,0.05,0.09,0.09,0.12,0.13,0.21,0.11,0,6.62,0.81,1730,1350,1016.67,6.08,4.97,2.73,7.52,5.99,7.52,10.87},1},
{{0.13,0.13,0.16,0.13,0.16,0.11,0.08,0.07,0.04,0.03,0.11,0.06,0.07,0.08,0.11,0.12,0.12,0.11,0.13,0.1,0.11,0.08,0.12,0.11,0.11,0.13,0.13,0.09,0.06,0.07,0,8.95,0.1,1962.5,486.84,3475,2.67,5.28,2.4,3.88,6.48,3.88,10.86},1},
{{0.15,0.12,0.11,0.14,0.09,0.13,0.1,0.11,0.03,0.05,0.14,0.07,0.11,0.09,0.08,0.12,0.09,0.07,0.1,0.11,0.11,0.18,0.12,0.12,0.1,0.1,0.08,0.08,0.05,0.09,0,8.18,-0.38,325,445.24,4325,2.99,5.9,2.5,3.85,7.15,3.85,10.61},1},
{{0.06,0.06,0.06,0.06,0.07,0.07,0.09,0.11,0.09,0.06,0.05,0.06,0.1,0.08,0.07,0.07,0.1,0.08,0.05,0.06,0.07,0.05,0.08,0.1,0.07,0.06,0.05,0.07,0.07,0.11,0,5.8,0.52,3150,560,2750,2.77,3.74,2.03,5.11,6.5,5.11,7.46},1},
{{0.1,0.1,0.15,0.1,0.12,0.09,0.13,0.06,0.1,0.09,0.09,0.13,0.13,0.11,0.07,0.09,0.08,0.1,0.1,0.11,0.32,0.21,0.21,0.14,0.05,0.03,0.03,0.01,0.01,0.02,0,8.33,-4.04,2550,766.67,3025,4.37,4.72,3.89,5.7,6.11,5.7,12.05},5},
{{0.04,0.05,0.03,0.02,0.04,0.07,0.08,0.15,0.25,0.26,0.08,0.13,0.15,0.11,0.1,0.08,0.11,0.08,0.1,0.08,0.03,0.04,0.09,0.09,0.15,0.13,0.14,0.11,0.13,0.1,0,8.17,1.95,1300,804.55,4800,5.2,4.26,2.44,6.68,5.48,6.68,11.11},5},
{{0.16,0.13,0.12,0.15,0.11,0.13,0.08,0.07,0.04,0.03,0.14,0.07,0.05,0.1,0.09,0.11,0.1,0.1,0.11,0.12,0.03,0.03,0.04,0.09,0.08,0.14,0.13,0.15,0.13,0.16,0,8.92,3,4375,536.11,2550,4.81,5.02,2.94,6.39,6.44,6.39,12.47},5},
{{0.1,0.1,0.09,0.14,0.12,0.11,0.12,0.09,0.02,0.02,0.08,0.07,0.07,0.07,0.13,0.11,0.11,0.11,0.08,0.08,0.01,0.12,0.06,0.06,0.12,0.09,0.1,0.12,0.12,0.12,0,7.87,1.93,2475,928.57,2750,3.65,3.81,2.66,5.65,5.75,5.65,10.5},5},
{{0,0,0.01,0.02,0.01,0.04,0.17,0.18,0.22,0.36,0.02,0.02,0.05,0.04,0.02,0.05,0.1,0.16,0.25,0.29,0.14,0.13,0.12,0.09,0.08,0.08,0.1,0.08,0.11,0.1,0,8.12,1.08,1737.5,444.44,450,3.67,5.32,3,4.77,6.5,4.77,10.88},1},
{{0.14,0.15,0.1,0.09,0.11,0.14,0.12,0.05,0.08,0.03,0.12,0.05,0.08,0.12,0.09,0.11,0.12,0.16,0.1,0.07,0.12,0.09,0.11,0.1,0.13,0.1,0.09,0.08,0.09,0.11,0,1.75,1.4,1766.67,275,2325,9.8,4.44,2.98,11.46,5.99,11.46,12.46},1},
{{0.13,0.16,0.17,0.14,0.11,0.13,0.04,0.08,0.06,0.01,0.16,0.13,0.13,0.15,0.15,0.12,0.11,0.04,0.03,0.01,0.09,0.09,0.09,0.15,0.08,0.11,0.11,0.14,0.08,0.1,0,-1.13,1.63,2500,2250,2675,10.45,3.15,2.63,11.84,4.42,11.84,12.12},1},
{{0.12,0.09,0.11,0.15,0.16,0.09,0.05,0.09,0.03,0,0.09,0.2,0.12,0.09,0.15,0.12,0.06,0.03,0.01,0.02,0.05,0.06,0.06,0.09,0.12,0.1,0.1,0.1,0.11,0.1,0,-0.65,1.88,2500,400,2066.67,8.77,2.27,2.03,11.54,3.69,11.54,9.93},1},
{{0.21,0.11,0.11,0.05,0.08,0.1,0.07,0.08,0.07,0.11,0.13,0.11,0.07,0.14,0.07,0.09,0.1,0.1,0.09,0.09,0.22,0.09,0.15,0.08,0.07,0.06,0.08,0.07,0.1,0.1,0,8.09,-2.99,1683.33,686.36,3200,4.47,4.41,3.23,6.04,5.73,6.04,11.47},5},
{{0.14,0.1,0.14,0.12,0.06,0.07,0.07,0.1,0.11,0.11,0.12,0.08,0.1,0.06,0.08,0.12,0.09,0.09,0.15,0.12,0.16,0.17,0.11,0.08,0.1,0.09,0.08,0.07,0.07,0.07,0,8.82,-2.67,800,557.69,3550,4.26,4.57,3.05,5.79,5.88,5.79,11.94},5},
{{0.04,0.13,0.08,0.1,0.12,0.1,0.12,0.11,0.11,0.12,0.11,0.11,0.06,0.11,0.1,0.08,0.1,0.11,0.11,0.11,0.05,0.09,0.08,0.14,0.1,0.13,0.1,0.15,0.1,0.08,0,8.56,-1.71,4175,780,1350,4,4.36,2,5.24,5.69,5.24,10.94},5},
{{0.04,0.07,0.09,0.12,0.1,0.14,0.1,0.13,0.14,0.1,0.08,0.13,0.14,0.08,0.1,0.11,0.1,0.1,0.09,0.08,0.02,0.08,0.08,0.12,0.13,0.08,0.16,0.11,0.16,0.09,0,8.22,-1.34,1750,1187.5,2733.33,3.95,3.8,1.74,5.05,5.03,5.05,10.2},5},
{{0.02,0.04,0.04,0.06,0.08,0.04,0.07,0.06,0.03,0.01,0.01,0.03,0.07,0.07,0.09,0.06,0.07,0.04,0.01,0,0.01,0.01,0.04,0.03,0.06,0.07,0.06,0.04,0.03,0.12,0,3.41,-0.01,1825,1216.67,250,1.41,1.99,1.05,4.25,5.02,4.25,4.05},5},
{{0.1,0.15,0.1,0.12,0.1,0.08,0.08,0.11,0.1,0.09,0.1,0.09,0.11,0.1,0.12,0.1,0.09,0.11,0.11,0.09,0.14,0.14,0.09,0.1,0.1,0.1,0.07,0.07,0.1,0.11,0,8.65,0.38,3300,542.86,1266.67,4.17,4.86,2.64,5.23,6.02,5.23,11.14},1},
{{0.16,0.14,0.14,0.12,0.12,0.1,0.07,0.06,0.06,0.05,0.12,0.12,0.11,0.11,0.06,0.12,0.1,0.09,0.1,0.09,0.08,0.09,0.13,0.11,0.08,0.06,0.11,0.11,0.1,0.12,0,8.1,1,4350,678.57,2625,4.88,5.29,2.76,5.98,6.42,5.98,11.27},1},
{{0.02,0.02,0.05,0.05,0.07,0.12,0.14,0.11,0.15,0.15,0.08,0.08,0.08,0.08,0.11,0.09,0.11,0.09,0.09,0.08,0.07,0.06,0.08,0.08,0.11,0.13,0.1,0.12,0.1,0.06,0,7.91,0.61,1725,530,1150,2.38,4.38,1.7,3.56,6.19,3.56,9.32},1},
{{0.25,0.22,0.21,0.15,0.09,0.06,0.03,0.01,0.01,0,0.01,0,0.01,0.04,0.07,0.11,0.17,0.16,0.29,0.16,0.25,0.26,0.19,0.14,0.07,0.04,0.02,0.02,0.01,0.02,0,8.73,-0.68,1825,225,350,2.08,0.21,0.66,2.26,0.32,2.26,9.08},4},
{{0.01,0.01,0.09,0.1,0.14,0.18,0.16,0.16,0.07,0.08,0.14,0.06,0.07,0.2,0.15,0.11,0.09,0.05,0.02,0.11,0.01,0.01,0.07,0.07,0.11,0.17,0.08,0.2,0.09,0.18,0,8.33,0.47,2100,675,1937.5,3.5,0.56,0.32,3.57,1.14,3.57,9.1},4},
{{0,0,0,0.01,0.03,0.02,0.06,0.14,0.15,0.22,0.1,0.17,0.14,0.13,0.05,0.03,0.01,0,0.01,0.01,0,0,0,0.01,0.1,0.09,0.1,0.12,0.17,0.06,0,5.02,0.31,2275,392.31,600,2.52,1.88,0.14,4.06,3.03,4.06,5.64},4},
{{0.3,0.19,0.08,0,0.03,0,0.02,0.03,0.07,0.26,0.16,0.07,0.03,0.01,0,0.04,0.05,0.08,0.19,0.36,0.13,0.08,0.01,0.02,0.04,0.01,0.05,0.1,0.21,0.34,0,-3.33,2.72,475,392.31,920,8.08,0.7,1.17,8.13,0.98,8.13,9.29},3},
{{0,0.02,0.06,0,0.19,0,0.38,0.24,0.11,0.02,0.02,0.08,0.07,0.1,0,0.3,0.25,0.17,0.04,0,0.02,0.12,0.09,0.19,0.18,0.13,0.14,0.15,0,0,0,-3.75,1.57,209.3,392.31,363.46,8.17,0.06,0.08,8.17,0.11,8.17,9.12},3},
{{0.02,0.07,0.08,0,0.2,0,0.31,0.19,0.13,0.03,0.04,0.06,0.09,0.1,0,0.33,0.16,0.1,0.14,0,0.05,0.04,0.05,0.06,0.17,0.21,0.15,0.18,0.11,0,0,-3.74,1.65,211.96,392.31,566.67,8.16,0.08,0.14,8.16,0.12,8.16,9.12},3},
{{0.03,0.05,0.09,0,0.08,0,0.06,0.05,0.03,0.07,0.13,0.14,0.05,0.02,0,0.02,0.03,0.06,0.01,0,0.14,0.08,0.03,0.03,0.05,0.02,0.02,0.06,0.04,0,0,-1.69,0.66,197.5,392.31,833.33,3.54,0.96,0.37,8.14,2.21,8.14,3.98},3},
{{0,0,0,0,0,0,0,0.03,0.08,0.89,0,0,0,0.01,0.04,0.03,0.07,0.2,0.37,0.3,0.02,0.05,0.08,0.11,0.13,0.18,0.16,0.16,0.08,0.06,0,8.32,1.33,1925,950,1600,3.56,2.74,2.6,4.25,3.52,4.25,10},2},
{{0,0,0,0,0,0,0,0.03,0.13,0.84,0,0,0,0.01,0.04,0.05,0.06,0.15,0.28,0.42,0.01,0.09,0.12,0.17,0.15,0.15,0.11,0.09,0.03,0.11,0,9.11,0.91,2500,1068.75,3775,2.65,3.39,3.07,3.36,4.09,3.36,10.54},2},
{{0.01,0,0.01,0.02,0.01,0.05,0.06,0.18,0.23,0.46,0,0,0,0.01,0.03,0.08,0.08,0.19,0.21,0.42,0.06,0.06,0.11,0.2,0.16,0.08,0.08,0.09,0.06,0.12,0,8.73,0.95,1025,757.14,1050,3.44,3.61,3.54,4.5,4.21,4.5,10.7},2},
{{0.01,0.03,0.07,0.1,0.09,0.07,0.11,0.21,0.26,0.08,0,0,0.01,0.03,0.05,0.09,0.13,0.22,0.21,0.28,0.08,0.1,0.07,0.09,0.15,0.12,0.13,0.08,0.13,0.08,0,7.14,0.99,1025,1000,3125,6.19,3.24,3.42,7.17,3.92,7.17,10.92},2},
{{0.02,0.07,0.09,0.08,0.07,0.07,0.12,0.24,0.18,0.09,0,0,0,0.04,0.05,0.12,0.12,0.18,0.25,0.25,0.09,0.11,0.09,0.08,0.1,0.12,0.14,0.14,0.06,0.1,0,6.89,0.92,3750,2150,1433.33,6.77,3.06,3.5,7.84,3.72,7.84,11.15},2},
{{0.03,0.07,0.05,0.11,0.08,0.07,0.16,0.2,0.19,0.05,0,0,0.01,0.03,0.07,0.12,0.16,0.18,0.25,0.21,0.07,0.11,0.1,0.07,0.09,0.15,0.14,0.11,0.09,0.09,0,6.37,1.01,3750,1062.5,1325,7.11,2.87,3.43,8.15,3.53,8.15,11.09},2},
{{0.07,0.1,0.05,0.09,0.05,0.08,0.16,0.2,0.17,0.06,0,0,0.01,0.03,0.06,0.12,0.23,0.16,0.17,0.23,0.06,0.15,0.09,0.08,0.12,0.12,0.12,0.1,0.09,0.1,0,6.4,0.96,3750,1025,1850,7.72,3.18,3.69,8.97,3.77,8.97,11.6},2},
{{0.04,0.12,0.12,0.07,0.03,0.07,0.2,0.17,0.16,0.05,0,0,0,0.07,0.11,0.12,0.16,0.16,0.23,0.17,0.1,0.09,0.09,0.09,0.11,0.11,0.11,0.13,0.08,0.12,0,5.85,1.01,3750,1600,1062.5,7.87,3.05,3.73,9.04,3.71,9.04,11.49},2},
{{0.03,0.11,0.09,0.11,0.06,0.1,0.15,0.19,0.17,0.02,0,0,0.02,0.05,0.09,0.12,0.2,0.17,0.2,0.18,0.07,0.12,0.12,0.12,0.09,0.09,0.09,0.14,0.08,0.1,0,5.77,0.84,3750,1207.14,3175,7.99,2.91,3.68,8.97,3.5,8.97,11.39},2},
{{0.11,0.08,0.08,0.06,0.07,0.12,0.18,0.14,0.13,0.06,0,0,0.01,0.05,0.18,0.17,0.14,0.15,0.14,0.18,0.12,0.09,0.11,0.07,0.05,0.12,0.16,0.1,0.09,0.1,0,5.16,0.7,3750,1700,1575,8.39,3.11,3.74,9.63,3.72,9.63,11.55},2},
{{0.13,0.1,0.1,0.06,0.08,0.14,0.13,0.18,0.09,0.02,0,0.04,0.05,0.12,0.14,0.17,0.12,0.14,0.14,0.12,0.18,0.09,0.09,0.08,0.08,0.1,0.09,0.09,0.1,0.13,0,4.11,0.6,3750,1075,1587.5,9.29,3.1,4.3,10.36,3.79,10.36,11.99},2},
{{0.17,0.11,0.08,0.11,0.16,0.11,0.09,0.09,0.08,0.02,0.1,0.11,0.12,0.13,0.14,0.13,0.09,0.1,0.09,0.03,0.13,0.13,0.11,0.11,0.08,0.1,0.08,0.09,0.11,0.1,0,1.3,0.57,3750,2600,2350,10.21,3.48,4.12,11.21,4.52,11.21,12.18},2},
{{0.14,0.13,0.15,0.12,0.14,0.12,0.1,0.05,0.05,0.03,0.24,0.12,0.07,0.1,0.16,0.15,0.08,0.08,0.02,0,0.18,0.07,0.11,0.11,0.08,0.09,0.07,0.08,0.12,0.11,0,-0.68,0.58,3750,2125,2075,10.62,3.78,4.28,11.44,4.57,11.44,12.58},2},
{{0.15,0.13,0.14,0.1,0.12,0.14,0.13,0.04,0.05,0.03,0.23,0.16,0.12,0.11,0.14,0.1,0.08,0.05,0.02,0,0.11,0.1,0.14,0.08,0.1,0.09,0.07,0.04,0.16,0.13,0,-1.13,1.21,3750,860,2133.33,10.59,3.53,4.49,11.44,4.4,11.44,12.58},2},
{{0.12,0.13,0.13,0.1,0.17,0.12,0.11,0.06,0.07,0.01,0.23,0.12,0.13,0.12,0.15,0.12,0.1,0.05,0.01,0,0.12,0.12,0.08,0.13,0.11,0.1,0.07,0.09,0.1,0.1,0,-0.86,0.55,3750,2516.67,1450,10.29,3.36,3.99,11.13,4.17,11.13,12.02},2},
{{0.13,0.15,0.14,0.13,0.13,0.13,0.08,0.07,0.05,0.01,0.17,0.15,0.19,0.15,0.12,0.11,0.07,0.03,0.03,0,0.12,0.13,0.09,0.11,0.1,0.06,0.07,0.09,0.12,0.12,0,-0.93,0.78,3750,1050,2150,10.7,3.12,4.32,11.51,4.02,11.51,12.49},2},
{{0.12,0.16,0.14,0.12,0.12,0.12,0.11,0.05,0.07,0.02,0.18,0.19,0.12,0.16,0.16,0.07,0.04,0.06,0.04,0,0.19,0.08,0.08,0.14,0.05,0.03,0.11,0.09,0.1,0.15,0,-0.93,0.82,3750,3200,3175,10.48,3.33,4.85,11.36,4.27,11.36,12.61},2},
{{0.18,0.08,0.15,0.15,0.13,0.12,0.1,0.05,0.06,0.01,0.16,0.18,0.16,0.15,0.12,0.1,0.11,0.02,0.03,0,0.13,0.13,0.07,0.09,0.08,0.1,0.1,0.09,0.12,0.11,0,-0.77,0.7,3750,2750,2150,10.76,3.19,4.25,11.58,4.21,11.58,12.57},2},
{{0.14,0.12,0.15,0.15,0.13,0.12,0.06,0.06,0.09,0.01,0.21,0.1,0.18,0.17,0.09,0.1,0.06,0.08,0.03,0,0.12,0.1,0.1,0.09,0.11,0.08,0.07,0.14,0.12,0.1,0,-0.84,0.9,3750,2112.5,2150,10.54,3.39,4.03,11.38,4.33,11.38,12.32},2},
{{0.12,0.14,0.12,0.15,0.17,0.09,0.09,0.07,0.06,0.01,0.18,0.17,0.16,0.14,0.12,0.09,0.1,0.05,0.01,0,0.14,0.12,0.1,0.08,0.09,0.1,0.09,0.08,0.14,0.09,0,-0.77,0.65,3750,700,2150,10.48,3.04,4.05,11.27,3.76,11.27,12.13},2},
{{0.15,0.11,0.14,0.15,0.16,0.1,0.09,0.06,0.07,0.01,0.18,0.14,0.19,0.16,0.12,0.08,0.06,0.05,0.03,0,0.12,0.12,0.08,0.08,0.12,0.09,0.07,0.12,0.14,0.07,0,-0.84,0.89,3750,2200,1125,10.5,3.13,4.02,11.28,4.11,11.28,12.21},2},
{{0.16,0.13,0.15,0.11,0.1,0.14,0.11,0.05,0.07,0.01,0.16,0.21,0.11,0.15,0.15,0.07,0.09,0.06,0.01,0,0.12,0.11,0.09,0.08,0.1,0.06,0.11,0.11,0.12,0.12,0,-1.03,1.24,3750,1262.5,1591.67,10.69,3.37,4.31,11.54,4.32,11.54,12.57},2},
{{0.16,0.14,0.11,0.11,0.17,0.11,0.12,0.06,0.04,0,0.15,0.18,0.16,0.19,0.11,0.09,0.07,0.07,0.01,0,0.09,0.11,0.12,0.1,0.12,0.07,0.11,0.1,0.11,0.1,0,-0.79,0.9,3750,3350,4450,10.74,3.09,3.91,11.51,4.07,11.51,12.36},2},
{{0.14,0.17,0.13,0.11,0.1,0.16,0.05,0.08,0.07,0.01,0.13,0.19,0.19,0.13,0.13,0.09,0.1,0.04,0.02,0,0.08,0.13,0.1,0.09,0.1,0.1,0.13,0.1,0.1,0.09,0,-0.72,0.98,3750,1787.5,2850,10.59,3.09,3.69,11.41,4.12,11.41,12.14},2},
{{0.15,0.14,0.13,0.08,0.17,0.11,0.09,0.06,0.09,0,0.13,0.21,0.2,0.13,0.1,0.08,0.07,0.07,0.02,0,0.07,0.07,0.14,0.12,0.11,0.13,0.1,0.11,0.1,0.08,0,-0.68,0.82,3750,1000,3875,10.52,3.06,3.43,11.36,4.03,11.36,11.98},2},
{{0.15,0.13,0.12,0.15,0.1,0.12,0.09,0.06,0.09,0.01,0.13,0.2,0.21,0.12,0.1,0.09,0.08,0.07,0.03,0,0.06,0.11,0.15,0.13,0.1,0.1,0.12,0.07,0.1,0.09,0,-0.75,0.82,3750,1750,2600,10.51,3.19,3.62,11.39,4.13,11.39,12.05},2},
{{0.12,0.13,0.15,0.16,0.17,0.1,0.06,0.06,0.07,0,0.14,0.18,0.2,0.14,0.12,0.08,0.09,0.06,0,0,0.07,0.11,0.1,0.1,0.13,0.09,0.1,0.11,0.1,0.1,0,-0.78,1.15,3750,1800,2225,10.61,2.94,3.88,11.3,3.87,11.3,12.18},2},
{{0.05,0.06,0.07,0.1,0.06,0.09,0.06,0.03,0.01,0,0.06,0.11,0.15,0.11,0.02,0.03,0.04,0.01,0,0,0.03,0.05,0.05,0.06,0.06,0.05,0.05,0.09,0.07,0.05,0,-0.64,0.74,3750,1175,1150,5.33,1.24,1.79,10.9,3.31,10.9,6.04},2},
{{0.05,0.11,0.11,0.11,0.13,0.13,0.13,0.11,0.12,0.04,0.05,0.16,0.13,0.09,0.1,0.11,0.13,0.09,0.1,0.02,0.1,0.06,0.05,0.11,0.11,0.18,0.19,0.09,0.07,0.06,0,8.61,1.63,2316.67,391.3,2250,2.75,7.52,3.79,3.39,8.38,3.39,11.84},0},
{{0.07,0.07,0.16,0.15,0.13,0.09,0.08,0.13,0.09,0.05,0.08,0.13,0.09,0.1,0.1,0.1,0.11,0.11,0.1,0.03,0.11,0.07,0.05,0.06,0.13,0.19,0.21,0.1,0.05,0.04,0,8.83,1.4,1375,454.76,1110,2.96,7.76,3.66,3.59,8.71,3.59,12.44},0},
{{0.05,0.06,0.15,0.11,0.11,0.15,0.09,0.19,0.08,0.02,0.08,0.11,0.11,0.13,0.06,0.1,0.13,0.08,0.13,0.03,0.1,0.05,0.04,0.1,0.1,0.17,0.14,0.15,0.07,0.1,0,9.16,2.34,1000,513.16,1225,2.6,7.82,4.22,3.23,8.72,3.23,12.79},0},
{{0.08,0.09,0.11,0.12,0.12,0.13,0.1,0.12,0.09,0.08,0.08,0.09,0.11,0.12,0.12,0.11,0.07,0.09,0.13,0.01,0.08,0.04,0.1,0.11,0.13,0.15,0.12,0.13,0.08,0.1,0,9.24,2.03,4125,423.81,1562.5,2.95,7.58,4.12,3.63,8.63,3.63,12.81},0},
{{0.06,0.1,0.15,0.13,0.12,0.11,0.08,0.09,0.13,0.06,0.11,0.07,0.1,0.14,0.1,0.1,0.1,0.09,0.11,0.01,0.1,0.06,0.08,0.1,0.11,0.18,0.12,0.1,0.08,0.09,0,8.95,1.9,2233.33,452.38,1587.5,3.17,7.59,4.24,3.78,8.62,3.78,12.8},0},
{{0.1,0.1,0.12,0.11,0.11,0.07,0.13,0.08,0.12,0.09,0.11,0.11,0.11,0.14,0.05,0.12,0.12,0.09,0.1,0.01,0.09,0.07,0.08,0.12,0.1,0.16,0.14,0.1,0.09,0.08,0,8.32,1.89,1562.5,397.83,1550,3.31,7.86,4.16,4.08,8.72,4.08,12.38},0},
{{0.09,0.09,0.05,0.13,0.11,0.13,0.13,0.12,0.11,0.07,0.1,0.09,0.12,0.12,0.07,0.09,0.14,0.11,0.09,0.03,0.08,0.09,0.09,0.1,0.11,0.16,0.11,0.1,0.09,0.08,0,8.87,1.64,1466.67,384.78,3200,2.95,7.7,4.12,3.82,8.62,3.82,12.62},0},
{{0.12,0.11,0.09,0.09,0.08,0.1,0.1,0.15,0.07,0.1,0.08,0.12,0.12,0.12,0.07,0.1,0.11,0.09,0.11,0.02,0.12,0.06,0.07,0.08,0.11,0.12,0.15,0.12,0.13,0.07,0,8.89,1.92,1375,395.45,1850,3.49,8,4.49,4.47,8.86,4.47,13.15},0},
{{0.1,0.09,0.1,0.06,0.1,0.11,0.1,0.14,0.11,0.11,0.11,0.09,0.1,0.17,0.08,0.12,0.07,0.09,0.09,0.02,0.09,0.08,0.13,0.08,0.13,0.13,0.1,0.07,0.13,0.09,0,8.54,1.82,3275,447.5,2833.33,3.34,7.69,4.62,4.25,8.7,4.25,12.79},0},
{{0.14,0.14,0.09,0.11,0.09,0.05,0.1,0.12,0.09,0.1,0.14,0.08,0.12,0.11,0.07,0.08,0.07,0.12,0.09,0.01,0.12,0.11,0.08,0.05,0.13,0.13,0.12,0.06,0.13,0.08,0,8.62,1.61,1900,488.89,800,3.88,8.53,4.73,4.78,9.4,4.78,13.63},0},
{{0.12,0.08,0.11,0.08,0.07,0.17,0.13,0.09,0.04,0.14,0.1,0.1,0.1,0.08,0.09,0.14,0.1,0.08,0.13,0.02,0.12,0.09,0.08,0.13,0.11,0.1,0.09,0.12,0.09,0.09,0,9.35,1.5,500,387.5,1737.5,3.63,7.9,4.75,4.79,8.95,4.79,13.7},0},
{{0.12,0.05,0.09,0.08,0.15,0.08,0.12,0.09,0.11,0.13,0.09,0.1,0.1,0.11,0.08,0.11,0.1,0.14,0.1,0.01,0.08,0.13,0.15,0.11,0.1,0.06,0.07,0.1,0.12,0.11,0,9.15,1.77,1575,391.67,1762.5,3.58,7.74,5.06,4.65,8.76,4.65,13.48},0},
{{0.09,0.12,0.11,0.08,0.08,0.1,0.15,0.11,0.09,0.1,0.11,0.1,0.1,0.1,0.13,0.09,0.08,0.11,0.13,0.01,0.05,0.09,0.12,0.15,0.1,0.09,0.06,0.12,0.12,0.13,0,8.45,2.43,2375,393.48,2650,3.27,7.91,4.9,4.16,9.12,4.16,13.23},0},
{{0.09,0.09,0.13,0.09,0.12,0.12,0.12,0.09,0.11,0.07,0.14,0.09,0.07,0.09,0.13,0.08,0.1,0.09,0.1,0.03,0.11,0.11,0.16,0.13,0.11,0.04,0.07,0.08,0.09,0.13,0,8.78,1.44,900,475,1430,3.18,8.17,5.21,4,9.36,4,13.53},0},
{{0.13,0.1,0.12,0.11,0.11,0.11,0.09,0.09,0.06,0.1,0.14,0.11,0.14,0.07,0.07,0.05,0.12,0.1,0.12,0.03,0.09,0.13,0.13,0.1,0.08,0.09,0.06,0.13,0.12,0.09,0,8.32,1.56,4325,337.5,2300,3.79,8.83,4.91,4.76,9.65,4.76,13.42},0},
{{0.1,0.11,0.07,0.1,0.14,0.09,0.07,0.1,0.07,0.18,0.1,0.1,0.12,0.08,0.06,0.11,0.1,0.12,0.11,0.01,0.14,0.09,0.13,0.09,0.09,0.06,0.07,0.11,0.11,0.13,0,9.43,1.8,800,445.24,2325,4,8.19,5.37,5,9.2,5,14.1},0},
{{0.08,0.14,0.08,0.12,0.07,0.12,0.09,0.1,0.08,0.14,0.1,0.13,0.08,0.07,0.12,0.07,0.11,0.12,0.13,0.02,0.1,0.12,0.11,0.1,0.08,0.09,0.08,0.11,0.1,0.14,0,9.22,1.92,2850,361.11,425,3.8,8.13,5.17,4.87,9.15,4.87,13.95},0},
{{0.1,0.09,0.12,0.09,0.09,0.09,0.08,0.1,0.15,0.11,0.12,0.07,0.09,0.12,0.09,0.13,0.1,0.13,0.08,0,0.09,0.14,0.09,0.1,0.09,0.1,0.06,0.13,0.09,0.13,0,8.94,1.95,1462.5,480,3525,3.77,7.63,4.92,4.85,8.76,4.85,13.61},0},
{{0.09,0.08,0.1,0.11,0.12,0.1,0.12,0.07,0.1,0.13,0.12,0.06,0.09,0.08,0.15,0.14,0.09,0.08,0.1,0.03,0.09,0.12,0.13,0.1,0.12,0.09,0.07,0.09,0.08,0.13,0,9.4,1.83,3175,452.38,993.75,3.54,7.28,4.94,4.56,8.67,4.56,13.76},0},
{{0.11,0.08,0.11,0.07,0.11,0.12,0.1,0.09,0.13,0.11,0.13,0.05,0.1,0.09,0.14,0.11,0.06,0.1,0.09,0.03,0.11,0.14,0.12,0.09,0.08,0.09,0.09,0.08,0.08,0.16,0,9.13,1.91,2575,445.24,1342.86,3.55,7.75,5.31,4.54,9.05,4.54,13.81},0},
{{0.14,0.1,0.07,0.12,0.1,0.05,0.1,0.12,0.11,0.12,0.12,0.14,0.1,0.09,0.09,0.06,0.13,0.11,0.09,0.03,0.13,0.1,0.09,0.1,0.11,0.07,0.1,0.12,0.09,0.12,0,8.3,1.65,3925,391.67,766.67,4.04,8.33,4.99,5.36,9.19,5.36,13.5},0},
{{0.14,0.13,0.07,0.07,0.08,0.11,0.08,0.09,0.14,0.11,0.09,0.1,0.12,0.07,0.1,0.11,0.14,0.11,0.09,0.03,0.14,0.11,0.11,0.09,0.1,0.05,0.09,0.08,0.11,0.13,0,9.16,1.67,2600,440.91,2175,4.27,7.67,5.45,5.44,8.67,5.44,14.05},0},
{{0.13,0.15,0.1,0.11,0.09,0.06,0.06,0.11,0.1,0.13,0.09,0.11,0.1,0.08,0.12,0.08,0.1,0.11,0.11,0.02,0.16,0.12,0.1,0.13,0.06,0.06,0.08,0.09,0.13,0.1,0,9.41,1.2,1360,469.05,3550,4.23,7.91,5.18,5.37,9.01,5.37,14.24},0},
{{0.1,0.09,0.07,0.12,0.12,0.12,0.09,0.12,0.08,0.11,0.1,0.12,0.06,0.1,0.13,0.12,0.08,0.1,0.11,0.01,0.11,0.13,0.1,0.11,0.1,0.08,0.07,0.1,0.08,0.14,0,9.16,1.7,725,465,1390,3.44,7.64,5.08,4.46,8.82,4.46,13.59},0},
{{0.13,0.15,0.08,0.08,0.08,0.09,0.09,0.07,0.13,0.11,0.1,0.09,0.09,0.09,0.17,0.08,0.11,0.11,0.1,0.02,0.1,0.13,0.12,0.08,0.13,0.1,0.06,0.09,0.15,0.07,0,9.28,1.38,1316.67,490,1341.67,3.9,7.39,4.54,4.81,8.59,4.81,13.55},0},
{{0.11,0.1,0.12,0.16,0.08,0.07,0.09,0.08,0.12,0.1,0.14,0.12,0.06,0.13,0.08,0.12,0.08,0.1,0.1,0.03,0.11,0.1,0.08,0.1,0.11,0.05,0.12,0.1,0.1,0.14,0,8.23,2.1,4025,421.43,2850,3.86,8.31,5.14,4.81,9.36,4.81,13.62},0},
{{0.11,0.08,0.07,0.12,0.11,0.09,0.1,0.1,0.15,0.09,0.09,0.12,0.11,0.08,0.11,0.1,0.14,0.1,0.12,0.01,0.09,0.08,0.11,0.07,0.09,0.11,0.16,0.13,0.11,0.09,0,8.84,2.05,1833.33,342.86,1762.5,3.38,7.77,4.45,4.3,8.71,4.3,13.05},0},
{{0.12,0.07,0.12,0.12,0.12,0.05,0.12,0.08,0.08,0.14,0.11,0.08,0.15,0.04,0.09,0.12,0.11,0.13,0.1,0.03,0.1,0.1,0.12,0.09,0.13,0.11,0.08,0.09,0.11,0.11,0,9.03,1.83,3600,440.91,1975,3.66,8,4.76,4.58,8.99,4.58,13.55},0},
{{0.08,0.11,0.11,0.11,0.1,0.09,0.1,0.1,0.11,0.11,0.07,0.1,0.09,0.13,0.1,0.12,0.13,0.08,0.08,0.03,0.05,0.13,0.12,0.13,0.1,0.07,0.09,0.13,0.1,0.11,0,9.19,1.97,1850,382,1590,3.5,7.29,4.64,4.47,8.45,4.47,13.25},0},
{{0.09,0.14,0.1,0.1,0.12,0.09,0.09,0.1,0.06,0.15,0.09,0.13,0.08,0.1,0.13,0.07,0.08,0.12,0.1,0.03,0.09,0.13,0.1,0.14,0.09,0.1,0.07,0.1,0.11,0.09,0,8.95,1.44,4575,402.27,1540,3.78,7.96,4.59,4.73,9.03,4.73,13.38},0},
{{0.1,0.13,0.09,0.07,0.09,0.07,0.1,0.16,0.11,0.09,0.09,0.14,0.12,0.12,0.06,0.12,0.09,0.1,0.06,0.03,0.12,0.13,0.15,0.16,0.05,0.04,0.06,0.09,0.13,0.08,0,8.24,1.1,2375,480,1341.67,3.5,8.14,4.94,4.56,9.02,4.56,12.87},0},
{{0.01,0.01,0.02,0.04,0.04,0.02,0.04,0.03,0.05,0.02,0,0,0.01,0.05,0.16,0.04,0.02,0.01,0,0,0.01,0.03,0.02,0.03,0.02,0.04,0.06,0.03,0.04,0.01,0,2.37,0.57,1250,500,725,0.72,1.76,1.01,3.45,7.1,3.45,2.85},0},
{{0.08,0.11,0.17,0.08,0.1,0.12,0.11,0.09,0.13,0.04,0.08,0.04,0.14,0.11,0.15,0.13,0.08,0.12,0.12,0.06,0.09,0.06,0.08,0.14,0.11,0.1,0.15,0.11,0.09,0.09,0,9.18,0.27,2362.5,1730,2700,3.26,3.21,3.4,4.3,3.98,4.3,10.94},2},
{{0.09,0.13,0.13,0.12,0.1,0.12,0.07,0.09,0.13,0.04,0.08,0.08,0.1,0.11,0.16,0.11,0.1,0.11,0.13,0.04,0.08,0.03,0.12,0.1,0.11,0.13,0.15,0.11,0.08,0.12,0,8.98,0.62,2033.33,1187.5,1433.33,3.38,3.17,3.4,4.44,3.85,4.44,10.8},2},
{{0.09,0.11,0.13,0.11,0.08,0.13,0.1,0.1,0.09,0.08,0.08,0.08,0.09,0.1,0.09,0.17,0.12,0.1,0.12,0.07,0.09,0.06,0.1,0.08,0.14,0.13,0.14,0.12,0.08,0.09,0,9.33,0.34,1225,914.29,3200,3.55,3.4,3.39,5,4.2,5,11.22},2},
{{0.09,0.15,0.09,0.09,0.08,0.09,0.12,0.18,0.07,0.07,0.11,0.08,0.12,0.11,0.09,0.13,0.06,0.12,0.1,0.09,0.09,0.11,0.11,0.1,0.1,0.09,0.06,0.13,0.09,0.13,0,9.19,0.31,2187.5,845,4750,3.63,3.82,3.98,5.04,4.67,5.04,11.34},2},
{{0.1,0.11,0.12,0.09,0.1,0.07,0.15,0.09,0.1,0.1,0.13,0.09,0.08,0.1,0.11,0.1,0.07,0.13,0.09,0.12,0.12,0.08,0.13,0.1,0.1,0.09,0.09,0.1,0.12,0.1,0,9.2,0.11,2183.33,1043.75,3100,3.64,3.95,3.77,5,4.83,5,11.26},2},
{{0.09,0.11,0.1,0.1,0.09,0.12,0.11,0.06,0.13,0.12,0.1,0.1,0.11,0.1,0.1,0.09,0.11,0.12,0.08,0.11,0.14,0.09,0.11,0.11,0.07,0.1,0.08,0.12,0.09,0.11,0,9.13,0.05,1887.5,868.18,1880,3.81,3.96,3.87,5.33,4.86,5.33,11.32},2},
{{0.11,0.08,0.12,0.08,0.12,0.08,0.1,0.11,0.08,0.15,0.11,0.11,0.12,0.09,0.11,0.1,0.13,0.09,0.06,0.11,0.13,0.09,0.1,0.12,0.09,0.1,0.11,0.07,0.1,0.11,0,8.82,-0.05,3116.67,1005.56,4500,3.79,3.8,3.74,5.05,4.71,5.05,11.02},2},
{{0.12,0.09,0.12,0.08,0.1,0.09,0.09,0.09,0.11,0.15,0.1,0.11,0.1,0.08,0.1,0.11,0.08,0.1,0.11,0.14,0.12,0.11,0.13,0.07,0.08,0.09,0.13,0.11,0.1,0.09,0,9.48,-0.03,2050,770.83,2716.67,3.98,4.08,3.82,5.32,4.95,5.32,11.68},2},
{{0.11,0.13,0.07,0.12,0.11,0.08,0.09,0.09,0.09,0.13,0.13,0.09,0.1,0.09,0.1,0.17,0.06,0.09,0.11,0.1,0.16,0.1,0.08,0.1,0.06,0.1,0.09,0.1,0.12,0.11,0,8.95,0.04,2600,809.09,1550,4.02,3.78,4.1,5.41,4.73,5.41,11.42},2},
{{0.13,0.1,0.12,0.07,0.1,0.12,0.1,0.08,0.09,0.12,0.13,0.08,0.13,0.08,0.1,0.09,0.14,0.06,0.1,0.11,0.12,0.11,0.1,0.08,0.1,0.11,0.06,0.12,0.11,0.11,0,9.16,0.11,3675,763.64,2125,3.91,3.97,3.86,5.45,4.89,5.45,11.45},2},
{{0.08,0.06,0.12,0.1,0.11,0.11,0.09,0.12,0.12,0.11,0.12,0.1,0.07,0.11,0.1,0.11,0.1,0.13,0.07,0.11,0.08,0.15,0.09,0.1,0.11,0.1,0.1,0.11,0.09,0.1,0,9.19,0.04,1350,1027.78,1700,3.39,3.91,3.65,4.82,4.85,4.82,11.18},2},
{{0.1,0.12,0.08,0.09,0.12,0.08,0.1,0.11,0.14,0.1,0.1,0.12,0.1,0.14,0.08,0.08,0.1,0.09,0.09,0.12,0.09,0.12,0.11,0.11,0.1,0.11,0.09,0.09,0.1,0.12,0,9.02,0.13,1416.67,800,3725,3.74,3.98,3.76,5.22,4.78,5.22,11.14},2},
{{0.09,0.09,0.09,0.12,0.1,0.11,0.12,0.13,0.08,0.09,0.1,0.1,0.06,0.14,0.09,0.13,0.11,0.11,0.07,0.1,0.09,0.11,0.07,0.09,0.11,0.12,0.11,0.1,0.13,0.08,0,9.11,0.25,1575,735,1575,3.44,3.6,3.56,4.85,4.5,4.85,11.03},2},
{{0.09,0.12,0.08,0.11,0.11,0.1,0.06,0.14,0.11,0.11,0.09,0.17,0.08,0.08,0.13,0.08,0.07,0.11,0.11,0.11,0.09,0.1,0.12,0.08,0.15,0.09,0.13,0.08,0.1,0.09,0,9.15,0,2433.33,900,1550,3.71,4.02,3.5,5.11,4.84,5.11,11.18},2},
{{0.09,0.1,0.08,0.12,0.09,0.12,0.08,0.12,0.09,0.13,0.1,0.1,0.11,0.1,0.11,0.12,0.12,0.04,0.08,0.15,0.1,0.12,0.11,0.1,0.1,0.11,0.08,0.1,0.08,0.12,0,9.21,0.27,2100,988.89,2083.33,3.62,3.95,3.98,4.96,4.86,4.96,11.31},2},
{{0.14,0.04,0.09,0.12,0.1,0.08,0.12,0.14,0.08,0.11,0.09,0.11,0.1,0.13,0.07,0.09,0.08,0.11,0.15,0.1,0.13,0.12,0.1,0.12,0.08,0.08,0.06,0.1,0.15,0.09,0,9.55,-0.03,1575,905.56,1733.33,3.85,4.06,4.05,5.42,4.85,5.42,11.75},2},
{{0.12,0.12,0.1,0.06,0.08,0.11,0.1,0.12,0.07,0.13,0.15,0.05,0.1,0.1,0.08,0.11,0.1,0.12,0.09,0.13,0.15,0.07,0.05,0.14,0.11,0.1,0.1,0.09,0.09,0.13,0,9.32,0.03,2600,716.67,1050,4.2,4.05,3.89,5.79,4.94,5.79,11.67},2},
{{0.11,0.11,0.1,0.1,0.09,0.09,0.12,0.06,0.09,0.14,0.09,0.15,0.09,0.09,0.06,0.1,0.12,0.12,0.12,0.09,0.1,0.11,0.09,0.09,0.11,0.15,0.08,0.09,0.09,0.11,0,9.28,0.05,983.33,922.22,1750,4.09,4.11,3.65,5.6,4.91,5.6,11.53},2},
{{0.1,0.1,0.1,0.12,0.08,0.11,0.1,0.09,0.13,0.1,0.1,0.1,0.08,0.13,0.14,0.07,0.08,0.1,0.11,0.11,0.14,0.11,0.07,0.08,0.09,0.13,0.08,0.12,0.1,0.12,0,9.24,0.14,1700,850,1587.5,3.59,3.88,3.9,4.9,4.7,4.9,11.36},2},
{{0.13,0.09,0.12,0.08,0.12,0.05,0.13,0.1,0.09,0.11,0.11,0.1,0.11,0.09,0.08,0.13,0.12,0.1,0.1,0.09,0.09,0.11,0.12,0.11,0.05,0.12,0.09,0.13,0.11,0.1,0,9.1,0.25,1675,940,3150,3.91,3.83,3.71,5.27,4.72,5.27,11.33},2},
{{0.11,0.11,0.07,0.14,0.08,0.1,0.1,0.08,0.1,0.13,0.1,0.12,0.09,0.07,0.11,0.07,0.13,0.11,0.11,0.12,0.06,0.15,0.11,0.09,0.13,0.09,0.1,0.09,0.09,0.11,0,9.47,0.3,1837.5,763.64,2100,3.89,4,3.81,5.35,4.78,5.35,11.65},2},
{{0.12,0.09,0.15,0.09,0.1,0.09,0.1,0.09,0.13,0.07,0.08,0.13,0.13,0.08,0.11,0.1,0.05,0.1,0.12,0.13,0.06,0.13,0.13,0.16,0.05,0.11,0.11,0.06,0.12,0.09,0,9.43,0.08,1550,791.67,4150,3.77,4.04,3.72,5.24,4.78,5.24,11.5},2},
{{0.09,0.1,0.09,0.12,0.12,0.06,0.16,0.08,0.12,0.08,0.1,0.12,0.11,0.08,0.1,0.09,0.12,0.11,0.1,0.1,0.08,0.09,0.13,0.09,0.12,0.08,0.11,0.14,0.11,0.08,0,9.23,0.3,1533.33,960,2650,3.44,3.9,3.65,4.79,4.73,4.79,11.16},2},
{{0.1,0.11,0.09,0.1,0.11,0.12,0.11,0.09,0.1,0.1,0.09,0.1,0.11,0.13,0.08,0.1,0.07,0.14,0.11,0.09,0.08,0.08,0.13,0.11,0.1,0.09,0.12,0.09,0.13,0.1,0,9.21,0.41,2816.67,880,1600,3.58,3.79,3.68,5.06,4.55,5.06,11.2},2},
{{0.09,0.1,0.06,0.12,0.1,0.16,0.08,0.12,0.09,0.1,0.09,0.08,0.11,0.12,0.11,0.08,0.15,0.1,0.1,0.08,0.04,0.13,0.12,0.11,0.11,0.09,0.14,0.1,0.09,0.1,0,9.08,0.37,2366.67,677.27,2650,3.36,3.61,3.51,4.74,4.47,4.74,10.96},2},
{{0.06,0.02,0.03,0.09,0.1,0.06,0.07,0.09,0.06,0.03,0.05,0.09,0.05,0.05,0.03,0.07,0.08,0.09,0.06,0.05,0.06,0.05,0.04,0.05,0.09,0.08,0.07,0.06,0.05,0.05,0,5.52,0.24,2450,866.67,2150,1.75,2.79,2.03,4.33,5.8,4.33,6.47},2},
{{0.03,0.1,0.13,0.16,0.18,0.16,0.07,0.07,0.06,0.07,0.11,0.07,0.08,0.1,0.14,0.13,0.06,0.09,0.15,0,0.04,0.04,0.08,0.16,0.14,0.16,0.13,0.13,0.1,0.05,0,8.8,2.02,4150,391.67,2725,2.84,8.11,3.59,3.68,9.08,3.68,12.58},0},
{{0.11,0.09,0.11,0.19,0.11,0.14,0.09,0.08,0.08,0.03,0.09,0.13,0.08,0.07,0.17,0.08,0.11,0.12,0.12,0,0.07,0.1,0.07,0.12,0.11,0.14,0.15,0.14,0.08,0.05,0,8.19,1.59,2375,351.85,783.33,3.49,8.1,3.95,4.82,9.02,4.82,12.69},0},
{{0.06,0.08,0.15,0.13,0.09,0.12,0.14,0.13,0.08,0.04,0.11,0.09,0.06,0.12,0.13,0.16,0.07,0.12,0.12,0,0.08,0.08,0.08,0.1,0.14,0.14,0.08,0.13,0.09,0.1,0,8.35,2.19,1575,333.93,1570,3.23,7.78,4.49,4.12,8.81,4.12,12.79},0},
{{0.11,0.11,0.12,0.09,0.12,0.09,0.11,0.09,0.11,0.07,0.1,0.08,0.07,0.13,0.13,0.11,0.12,0.11,0.07,0,0.08,0.08,0.1,0.1,0.11,0.12,0.09,0.09,0.13,0.12,0,8.46,2.36,1950,357.69,1350,3.75,7.84,4.85,4.69,8.76,4.69,13.13},0},
{{0.09,0.11,0.11,0.1,0.12,0.09,0.15,0.06,0.08,0.11,0.1,0.11,0.06,0.11,0.12,0.1,0.13,0.1,0.07,0,0.1,0.11,0.11,0.06,0.11,0.11,0.09,0.1,0.13,0.1,0,8.48,2,1133.33,481.58,1712.5,3.97,8.26,4.78,5.26,9.11,5.26,13.51},0},
{{0.07,0.14,0.09,0.1,0.13,0.12,0.09,0.09,0.09,0.1,0.08,0.12,0.07,0.12,0.12,0.13,0.08,0.11,0.12,0,0.08,0.15,0.08,0.08,0.09,0.11,0.12,0.13,0.1,0.09,0,8.53,1.79,2133.33,397.73,3800,3.7,7.93,4.57,4.81,8.91,4.81,13.05},0},
{{0.05,0.09,0.1,0.1,0.13,0.12,0.09,0.11,0.1,0.12,0.1,0.09,0.05,0.16,0.1,0.08,0.14,0.1,0.08,0,0.14,0.13,0.06,0.08,0.1,0.12,0.16,0.05,0.08,0.11,0,8.76,1.41,2950,438.64,1525,3.62,8.36,5.04,4.66,9.14,4.66,13.47},0},
{{0.06,0.13,0.1,0.14,0.09,0.07,0.13,0.15,0.09,0.07,0.14,0.08,0.09,0.11,0.06,0.14,0.09,0.1,0.1,0,0.1,0.16,0.09,0.08,0.07,0.08,0.09,0.12,0.14,0.08,0,8.3,1.76,1350,438.64,1925,3.66,8.73,5.14,4.62,9.51,4.62,13.5},0},
{{0.07,0.1,0.11,0.16,0.1,0.08,0.1,0.09,0.13,0.07,0.14,0.09,0.07,0.13,0.1,0.11,0.08,0.12,0.07,0,0.1,0.13,0.1,0.1,0.07,0.1,0.12,0.11,0.08,0.11,0,7.89,1.78,1687.5,541.18,1150,3.84,8.59,4.87,4.98,9.43,4.98,13.2},0},
{{0.07,0.16,0.12,0.09,0.09,0.11,0.06,0.1,0.09,0.12,0.11,0.08,0.09,0.1,0.11,0.12,0.11,0.11,0.09,0,0.09,0.1,0.1,0.11,0.09,0.06,0.1,0.1,0.14,0.13,0,8.66,2.5,2666.67,457.5,1900,4.17,8.19,5.39,5.3,8.98,5.3,13.81},0},
{{0.09,0.06,0.1,0.14,0.11,0.14,0.12,0.11,0.06,0.09,0.09,0.12,0.09,0.13,0.08,0.13,0.12,0.06,0.1,0,0.05,0.13,0.09,0.12,0.09,0.14,0.09,0.08,0.12,0.12,0,8.03,2.37,3500,369.23,1175,3.5,8.15,4.76,4.66,8.96,4.66,12.87},0},
{{0.06,0.03,0.06,0.09,0.07,0.16,0.1,0.13,0.12,0.2,0.12,0.07,0.09,0.12,0.12,0.12,0.13,0.08,0.09,0,0.06,0.08,0.12,0.13,0.13,0.11,0.12,0.08,0.08,0.11,0,8.31,1.84,1150,492.5,2866.67,3.92,8.01,4.4,5.15,8.96,5.15,13.02},0},
{{0.05,0.09,0.06,0.12,0.13,0.14,0.11,0.09,0.11,0.11,0.09,0.06,0.13,0.07,0.16,0.12,0.1,0.12,0.08,0,0.05,0.08,0.08,0.18,0.13,0.11,0.09,0.1,0.11,0.09,0,8.62,1.99,2325,333.93,1175,3.49,7.62,4.36,4.61,8.65,4.61,12.8},0},
{{0.04,0.09,0.08,0.1,0.12,0.13,0.12,0.11,0.13,0.11,0.1,0.06,0.11,0.12,0.13,0.11,0.11,0.08,0.1,0,0.12,0.07,0.11,0.15,0.08,0.11,0.1,0.08,0.1,0.11,0,8.46,1.64,350,450,1325,3.42,7.87,4.75,4.35,8.84,4.35,13.07},0},
{{0.12,0.06,0.14,0.1,0.1,0.12,0.1,0.06,0.09,0.14,0.11,0.13,0.09,0.09,0.06,0.09,0.11,0.15,0.12,0,0.1,0.1,0.08,0.08,0.09,0.12,0.14,0.1,0.11,0.09,0,8.62,1.94,988.89,342.59,3825,4.31,8.86,4.58,5.55,9.55,5.55,13.93},0},
{{0.12,0.08,0.12,0.14,0.09,0.09,0.1,0.08,0.12,0.08,0.1,0.15,0.1,0.11,0.06,0.1,0.15,0.09,0.09,0,0.09,0.08,0.11,0.08,0.12,0.11,0.09,0.13,0.09,0.12,0,7.8,2.28,1550,372.92,3100,4.09,8.73,4.89,5.23,9.33,5.23,13.4},0},
{{0.11,0.12,0.1,0.11,0.09,0.08,0.09,0.13,0.11,0.09,0.11,0.11,0.11,0.09,0.07,0.11,0.1,0.1,0.11,0,0.09,0.11,0.11,0.08,0.12,0.13,0.1,0.09,0.1,0.08,0,8.35,1.55,1150,340.74,1125,4.11,8.62,4.45,5.1,9.4,5.1,13.4},0},
{{0.14,0.07,0.11,0.08,0.1,0.1,0.09,0.08,0.1,0.15,0.11,0.11,0.11,0.07,0.09,0.09,0.1,0.12,0.1,0,0.16,0.07,0.11,0.11,0.06,0.12,0.1,0.08,0.1,0.11,0,8.34,1.58,2062.5,376,2233.33,4.54,8.77,5.15,5.73,9.47,5.73,13.94},0},
{{0.13,0.08,0.09,0.12,0.08,0.08,0.11,0.11,0.09,0.13,0.09,0.11,0.11,0.1,0.11,0.07,0.11,0.13,0.08,0,0.1,0.12,0.11,0.12,0.06,0.07,0.09,0.12,0.09,0.13,0,8.5,1.88,2000,485,2275,4.36,8.51,5.27,5.5,9.22,5.5,13.79},0},
{{0.14,0.13,0.08,0.08,0.1,0.07,0.09,0.12,0.09,0.12,0.08,0.16,0.12,0.08,0.09,0.07,0.08,0.1,0.13,0,0.11,0.1,0.11,0.09,0.12,0.09,0.06,0.14,0.13,0.08,0,8.29,1.61,1875,377.27,4175,4.5,8.84,4.68,5.57,9.44,5.57,13.51},0},
{{0.16,0.09,0.11,0.07,0.1,0.09,0.07,0.11,0.12,0.1,0.09,0.13,0.11,0.08,0.1,0.07,0.1,0.08,0.11,0,0.11,0.11,0.11,0.07,0.12,0.08,0.08,0.1,0.13,0.11,0,8.42,1.87,3775,460,3725,4.71,8.78,5.17,5.96,9.49,5.96,14.07},0},
{{0.16,0.11,0.08,0.09,0.08,0.07,0.09,0.08,0.12,0.14,0.1,0.08,0.15,0.12,0.07,0.09,0.05,0.09,0.15,0,0.16,0.11,0.11,0.1,0.12,0.08,0.09,0.08,0.09,0.1,0,8.62,0.89,1675,415.91,1912.5,4.82,8.89,4.98,5.87,9.51,5.87,14.05},0},
{{0.12,0.11,0.09,0.09,0.1,0.08,0.12,0.09,0.12,0.11,0.12,0.12,0.1,0.07,0.1,0.09,0.1,0.08,0.1,0,0.15,0.09,0.08,0.09,0.13,0.07,0.13,0.06,0.09,0.13,0,8.24,1.58,1100,494.44,1466.67,4.37,8.77,5.29,5.49,9.55,5.49,14.03},0},
{{0.14,0.14,0.11,0.05,0.06,0.12,0.08,0.12,0.11,0.1,0.06,0.11,0.15,0.13,0.09,0.08,0.09,0.1,0.1,0,0.12,0.12,0.11,0.09,0.05,0.12,0.07,0.11,0.12,0.11,0,8.24,1.7,4475,511.11,3975,4.48,8.37,5.29,5.6,9.09,5.6,13.81},0},
{{0.14,0.12,0.07,0.05,0.1,0.08,0.1,0.14,0.13,0.1,0.09,0.12,0.14,0.09,0.07,0.03,0.14,0.13,0.09,0,0.11,0.09,0.14,0.11,0.09,0.07,0.1,0.12,0.07,0.11,0,8.38,1.7,2100,475,2366.67,4.37,8.91,4.94,5.54,9.52,5.54,13.75},0},
{{0.13,0.13,0.06,0.07,0.13,0.08,0.15,0.06,0.12,0.1,0.11,0.09,0.11,0.13,0.06,0.1,0.08,0.11,0.09,0,0.14,0.13,0.08,0.12,0.08,0.09,0.13,0.08,0.07,0.11,0,8.46,1.29,550,430.95,1300,4.07,8.78,5.04,5.17,9.45,5.17,13.65},0},
{{0.13,0.1,0.13,0.08,0.07,0.08,0.1,0.11,0.11,0.11,0.09,0.13,0.13,0.08,0.07,0.09,0.11,0.1,0.08,0,0.11,0.11,0.13,0.09,0.11,0.06,0.1,0.1,0.1,0.11,0,8.4,1.66,2675,508.33,1925,4.35,8.83,5.05,5.35,9.46,5.35,13.75},0},
{{0.15,0.13,0.07,0.08,0.08,0.07,0.08,0.12,0.09,0.14,0.11,0.09,0.13,0.09,0.1,0.1,0.07,0.1,0.1,0,0.12,0.11,0.11,0.1,0.09,0.08,0.09,0.14,0.1,0.09,0,8.18,1.49,475,445.45,1790,4.89,8.58,5.03,6.01,9.34,6.01,13.84},0},
{{0.13,0.13,0.1,0.1,0.08,0.07,0.07,0.12,0.12,0.1,0.08,0.15,0.16,0.06,0.07,0.11,0.1,0.09,0.11,0,0.08,0.12,0.13,0.14,0.09,0.07,0.09,0.09,0.08,0.13,0,8.03,1.77,1125,344.44,3725,4.47,8.79,5.04,5.48,9.42,5.48,13.55},0},
{{0.02,0.02,0.05,0.04,0.02,0.06,0.05,0.04,0.05,0.01,0.01,0.02,0.02,0.06,0.1,0.07,0.04,0.02,0.02,0,0.01,0.03,0.05,0.03,0.06,0.04,0.02,0.06,0.06,0.01,0,2.93,0.76,600,437.5,1225,1.02,2.4,1.31,3.97,8.41,3.97,3.91},0},
{{0.07,0,0.24,0.27,0.19,0.11,0,0,0.08,0.05,0.14,0.25,0,0.35,0,0.22,0.02,0.01,0,0.01,0.01,0,0,0.01,0.08,0.12,0.27,0,0.18,0.29,0,-2.19,4.13,303.13,437.5,368,8.1,0.04,0.09,8.1,0.21,8.1,9.36},3},
{{0.01,0,0.29,0.54,0.16,0,0,0,0.01,0,0.02,0.25,0,0.56,0,0.18,0,0,0,0,0,0,0,0,0,0.01,0.12,0,0.47,0.4,0,-2.18,4.19,472.22,437.5,275.71,8.08,0.02,0.02,8.08,0.04,8.08,9.36},3},
{{0.09,0,0.56,0.31,0.05,0,0,0,0,0,0.07,0.33,0,0.5,0,0.11,0,0,0,0,0,0,0,0,0,0,0.13,0,0.24,0.59,0,-2.19,4.21,350,437.5,289.06,8.06,0.03,0.03,8.06,0.03,8.06,9.35},3},
{{0.08,0,0.53,0.38,0.02,0,0,0,0,0,0.16,0.47,0,0.36,0,0.02,0,0,0,0,0,0,0,0,0,0,0.15,0,0.49,0.36,0,-2.21,4.19,259.46,437.5,237.8,8.06,0.02,0.02,8.06,0.03,8.06,9.35},3},
{{0.03,0,0.36,0.35,0.14,0.09,0,0,0.04,0.02,0.07,0.19,0,0.35,0,0.37,0.02,0.02,0,0,0,0,0,0,0.04,0.11,0.38,0,0.32,0.17,0,-2.17,4.13,296.3,437.5,329.31,8.09,0.04,0.06,8.09,0.05,8.09,9.34},3},
{{0.01,0,0.01,0.03,0.13,0.44,0,0,0.37,0.03,0.01,0.05,0,0.12,0,0.65,0.15,0.03,0,0.01,0,0,0,0.02,0.3,0.54,0.14,0,0.01,0,0,-2.13,3.98,431.82,437.5,287.88,8.17,0.03,0.03,8.17,0.05,8.17,9.33},3},
{{0.02,0,0.01,0.02,0.07,0.4,0,0,0.38,0.13,0.01,0.01,0,0.05,0,0.68,0.16,0.06,0,0.03,0,0.01,0.01,0.19,0.59,0.18,0.03,0,0,0,0,-2.11,3.93,312.9,437.5,244.59,8.18,0.03,0.04,8.18,0.05,8.18,9.32},3},
{{0,0,0,0.02,0.04,0.05,0,0,0.38,0.52,0.01,0.01,0,0.03,0,0.08,0.23,0.53,0,0.12,0.02,0.04,0.2,0.42,0.23,0.07,0.04,0,0,0.01,0,-2.05,3.88,322.41,437.5,285.94,8.21,0.03,0.05,8.22,0.05,8.22,9.31},3},
{{0,0,0,0,0,0.05,0,0,0.58,0.38,0,0,0,0,0,0,0.08,0.56,0,0.36,0.02,0.24,0.5,0.23,0.01,0,0,0,0,0,0,-2.02,3.83,392.86,437.5,304.84,8.21,0.02,0.02,8.22,0.03,8.22,9.28},3},
{{0,0,0,0,0,0.09,0,0,0.53,0.39,0,0,0,0,0,0.01,0.08,0.39,0,0.53,0.2,0.31,0.36,0.12,0.01,0.01,0,0,0,0,0,-2,3.81,429.55,437.5,337.5,8.21,0.03,0.03,8.21,0.04,8.21,9.27},3},
{{0,0,0,0,0.01,0.23,0,0,0.56,0.21,0,0,0,0,0,0,0,0.03,0,0.97,0.62,0.31,0.07,0,0,0,0,0,0,0,0,-1.96,3.77,350,437.5,402.08,8.2,0.02,0.02,8.2,0.03,8.2,9.23},3},
{{0.03,0,0,0,0.01,0.08,0,0,0.2,0.08,0.01,0,0,0,0,0.02,0.01,0.03,0,0.34,0.25,0.14,0.06,0,0,0,0,0,0,0,0,-0.86,1.63,325,437.5,433.33,3.61,0.48,0.91,8.2,1.11,8.2,4.05},3},
{{0.11,0.1,0.07,0.11,0.1,0.09,0.09,0.11,0.09,0.15,0.06,0.13,0.08,0.09,0.11,0.11,0.11,0.1,0.11,0.12,0.07,0.09,0.11,0.1,0.13,0.11,0.09,0.13,0.11,0.09,0,8.16,2.73,2816.67,1750,1033.33,4.04,4.3,2.6,5.22,5.34,5.22,11.09},5},
{{0.11,0.09,0.12,0.08,0.12,0.11,0.08,0.1,0.13,0.09,0.1,0.1,0.1,0.1,0.12,0.09,0.13,0.09,0.07,0.11,0.13,0.12,0.11,0.09,0.09,0.09,0.09,0.1,0.09,0.12,0,7.76,2.65,3425,1157.14,3725,3.89,4.43,3.11,5.09,5.59,5.09,11.03},5},
{{0.08,0.1,0.14,0.12,0.08,0.09,0.09,0.09,0.1,0.13,0.14,0.07,0.11,0.12,0.12,0.07,0.09,0.11,0.11,0.08,0.12,0.08,0.08,0.12,0.1,0.09,0.11,0.08,0.11,0.1,0,7.35,2.89,2150,2337.5,3500,3.89,4.58,3.11,4.79,5.72,4.79,10.88},5},
{{0.09,0.09,0.07,0.1,0.08,0.11,0.13,0.09,0.08,0.04,0.09,0.09,0.1,0.07,0.06,0.13,0.08,0.09,0.11,0.08,0.08,0.1,0.07,0.07,0.09,0.1,0.12,0.08,0.09,0.08,0,6.76,2.33,1425,1166.67,2400,3.11,4,2.39,4.9,5.54,4.9,9.46},5},
{{0.07,0.15,0.12,0.11,0.09,0.08,0.1,0.08,0.11,0.09,0.11,0.13,0.12,0.09,0.09,0.08,0.09,0.1,0.09,0.12,0.09,0.08,0.12,0.05,0.09,0.08,0.14,0.1,0.15,0.13,0,7.97,3.06,2075,786.36,1416.67,3.22,5.07,4.06,4.23,5.94,4.23,10.96},1},
{{0.13,0.05,0.09,0.09,0.09,0.1,0.13,0.1,0.12,0.12,0.13,0.08,0.09,0.13,0.11,0.09,0.09,0.1,0.09,0.11,0.1,0.09,0.1,0.11,0.11,0.12,0.1,0.1,0.12,0.08,0,8.02,2.33,2500,657.69,2200,3.07,4.96,3.83,4.23,6.08,4.23,10.86},1},
{{0.12,0.13,0.1,0.09,0.09,0.11,0.06,0.12,0.09,0.11,0.09,0.11,0.11,0.08,0.09,0.11,0.08,0.11,0.14,0.11,0.12,0.13,0.09,0.14,0.09,0.09,0.05,0.12,0.07,0.12,0,8.58,1.98,3375,1121.43,4000,3.22,4.92,4.15,4.17,5.83,4.17,11.28},1},
{{0.01,0.01,0.02,0.04,0.06,0.04,0.04,0.03,0.02,0.02,0,0.01,0.02,0.04,0.04,0.06,0.08,0.03,0.01,0.01,0.02,0.03,0.03,0.02,0.05,0.07,0.04,0.03,0,0.01,0,2.39,0.32,525,425,1000,0.55,1.74,0.61,2.75,6.88,2.75,2.64},1},
{{0.11,0.09,0.16,0.14,0.13,0.08,0.11,0.09,0.05,0.06,0.09,0.11,0.08,0.15,0.11,0.12,0.09,0.09,0.06,0.11,0.08,0.07,0.1,0.13,0.11,0.12,0.13,0.08,0.08,0.12,0,8.22,2.7,1783.33,405.88,1933.33,3.3,5.21,3.34,4.17,6.67,4.17,11.46},5},
{{0.12,0.09,0.11,0.09,0.12,0.09,0.1,0.09,0.1,0.09,0.13,0.11,0.12,0.07,0.03,0.08,0.1,0.11,0.17,0.08,0.15,0.13,0.07,0.06,0.04,0.12,0.05,0.11,0.19,0.11,0,8.31,2.56,1975,687.5,1875,3.63,6.51,4.17,4.83,7.81,4.83,12.48},5},
{{0.12,0.13,0.08,0.08,0.1,0.1,0.08,0.13,0.09,0.11,0.11,0.11,0.1,0.08,0.05,0.03,0.14,0.14,0.11,0.14,0.11,0.13,0.14,0.04,0.11,0.07,0.09,0.14,0.06,0.1,0,9.08,2.45,3875,920,2112.5,3.45,6.22,3.87,4.46,7.43,4.46,12.51},5},
{{0,0.02,0.01,0.02,0.03,0.07,0.06,0.05,0.1,0.09,0.02,0.01,0.04,0.05,0.16,0.12,0.03,0.01,0.01,0.01,0.01,0.01,0.04,0.13,0.07,0.05,0.08,0.03,0.03,0.01,0,3.46,1.07,600,275,325,1,2.24,0.92,2.93,5.75,2.93,4.15},5},
{{0.14,0.16,0.14,0.14,0.1,0.09,0.08,0.05,0.07,0.06,0.11,0.08,0.11,0.1,0.13,0.11,0.12,0.1,0.09,0.06,0.09,0.08,0.09,0.08,0.13,0.14,0.13,0.1,0.09,0.1,0,8.48,2.24,1975,970,2150,3.65,3.77,3.21,4.59,4.79,4.59,11},1},
{{0.09,0.11,0.1,0.07,0.11,0.16,0.11,0.12,0.04,0.12,0.1,0.11,0.09,0.15,0.07,0.07,0.11,0.14,0.07,0.11,0.1,0.11,0.13,0.08,0.12,0.08,0.08,0.09,0.11,0.12,0,8.67,2.27,1730,810,1750,2.95,4.19,3.79,3.96,5.1,3.96,11.06},1},
{{0.08,0.06,0.1,0.1,0.09,0.08,0.1,0.09,0.19,0.12,0.09,0.09,0.14,0.06,0.11,0.1,0.09,0.06,0.09,0.18,0.11,0.08,0.13,0.09,0.06,0.12,0.1,0.17,0.07,0.09,0,9.19,2.23,2850,864.29,2783.33,2.8,4.34,3.52,3.61,5.24,3.61,11.36},1},
{{0.06,0.02,0.03,0.06,0.05,0.03,0.07,0.11,0.05,0.08,0.06,0.07,0.03,0.05,0.05,0.08,0.03,0.07,0.04,0.08,0.05,0.05,0.05,0.1,0.05,0.04,0.04,0.02,0.09,0.05,0,4.77,1.31,1166.67,633.33,775,1.49,3,1.95,3.94,6.68,3.94,5.99},1},
{{0.07,0.09,0.07,0.09,0.11,0.1,0.11,0.13,0.09,0.12,0.1,0.12,0.11,0.09,0.09,0.1,0.08,0.11,0.07,0.13,0.11,0.09,0.08,0.11,0.12,0.1,0.08,0.12,0.09,0.11,0,8.68,2.26,1200,464.71,1725,3.27,6.02,4.44,4.22,7.4,4.22,12.44},5},
{{0.1,0.13,0.11,0.1,0.08,0.1,0.08,0.12,0.11,0.09,0.12,0.1,0.11,0.12,0.08,0.06,0.11,0.09,0.12,0.1,0.1,0.11,0.12,0.08,0.08,0.08,0.09,0.08,0.16,0.11,0,8.35,2.22,3400,734.62,3125,3.43,6.14,4.45,4.34,7.45,4.34,12.25},5},
{{0.15,0.07,0.13,0.12,0.11,0.11,0.09,0.06,0.11,0.08,0.1,0.11,0.1,0.08,0.07,0.11,0.12,0.11,0.14,0.09,0.1,0.11,0.11,0.09,0.09,0.1,0.12,0.11,0.08,0.1,0,8.84,1.93,2975,766.67,3425,3.26,5.81,4.11,4.06,7.1,4.06,12.4},5},
{{0.01,0.02,0.01,0.01,0.03,0.02,0.04,0.02,0.02,0.03,0,0,0,0.03,0.08,0.05,0.02,0.01,0,0,0.01,0.01,0.01,0.04,0.04,0.05,0.03,0.01,0,0,0,1.72,0.2,750,525,575,0.52,1.4,0.35,3.6,7.8,3.6,1.91},5},
{{0.07,0.09,0.14,0.16,0.13,0.12,0.08,0.07,0.07,0.09,0.09,0.1,0.1,0.12,0.11,0.12,0.16,0.06,0.08,0.07,0.06,0.06,0.11,0.06,0.13,0.11,0.11,0.14,0.15,0.09,0,7.88,2.64,1975,1466.67,1150,3.19,3.83,3.07,3.92,4.9,3.92,10.21},1},
{{0.16,0.1,0.07,0.1,0.09,0.07,0.1,0.13,0.1,0.1,0.14,0.11,0.09,0.07,0.1,0.05,0.09,0.13,0.12,0.12,0.15,0.11,0.09,0.11,0.1,0.06,0.1,0.11,0.08,0.11,0,8.27,1.98,1425,1321.43,1500,3.59,5.19,3.79,4.7,6.15,4.7,11.36},1},
{{0.1,0.13,0.1,0.07,0.09,0.08,0.12,0.08,0.12,0.13,0.09,0.1,0.12,0.11,0.11,0.1,0.06,0.09,0.11,0.12,0.07,0.14,0.12,0.12,0.09,0.11,0.09,0.07,0.08,0.13,0,8.54,2.17,2500,863.64,3325,3.5,4.6,3.57,4.52,5.63,4.52,11.03},1},
{{0.05,0.06,0.06,0.05,0.08,0.11,0.09,0.1,0.09,0.06,0.05,0.08,0.07,0.07,0.07,0.1,0.08,0.09,0.06,0.06,0.09,0.08,0.06,0.08,0.07,0.09,0.07,0.07,0.08,0.05,0,6.01,1.1,975,725,650,1.86,3.19,2.17,3.52,5.52,3.52,7.36},1},
{{0.21,0.13,0.1,0.14,0.1,0.13,0.07,0.05,0.07,0.03,0.14,0.1,0.11,0,0.19,0.16,0,0.17,0.07,0,0.15,0.23,0.21,0.14,0.09,0.05,0.06,0.06,0.03,0.01,0,8.43,-1.22,975,175.45,650,3.33,0.07,0.11,3.33,0.19,3.33,9.15},4},
{{0.11,0.11,0.11,0.13,0.14,0.1,0.1,0.09,0.09,0.06,0.09,0.09,0.15,0,0.19,0.13,0,0.12,0.11,0,0.06,0.11,0.1,0.1,0.06,0.12,0.13,0.11,0.1,0.13,0,8.46,-1.09,975,166.96,650,3.29,0.08,0.15,3.3,0.1,3.3,9.14},4},
{{0.11,0.05,0.1,0.15,0.09,0.14,0.13,0.1,0.09,0.08,0.06,0.07,0.15,0,0.15,0.17,0,0.19,0.14,0,0.01,0.09,0.12,0.1,0.12,0.09,0.25,0.13,0.06,0.04,0,8.46,-1.1,975,183.96,650,3.28,0.06,0.1,3.28,0.08,3.28,9.15},4},
{{0.04,0.05,0.06,0.09,0.09,0.1,0.15,0.14,0.16,0.15,0.1,0.05,0.12,0,0.15,0.17,0,0.22,0.08,0,0.17,0.14,0.15,0.1,0.08,0.12,0.13,0.1,0.03,0.02,0,8.47,-1.19,975,206.38,650,3.21,0.07,0.13,3.21,0.1,3.21,9.13},4},
{{0.1,0.05,0.09,0.12,0.08,0.1,0.14,0.14,0.1,0.11,0.12,0.08,0.11,0,0.17,0.17,0,0.11,0.1,0,0.06,0.12,0.2,0.08,0.08,0.1,0.17,0.08,0.08,0.04,0,8.46,-1.14,975,156.45,650,3.25,0.08,0.12,3.26,0.1,3.26,9.14},4},
{{0.04,0.06,0.07,0.12,0.13,0.13,0.13,0.11,0.15,0.09,0.03,0.06,0.14,0,0.19,0.22,0,0.19,0.11,0,0.04,0.1,0.2,0.09,0.15,0.08,0.19,0.12,0.02,0.05,0,8.46,-1.14,975,176.92,650,3.24,0.06,0.11,3.25,0.08,3.25,9.14},4},
{{0.13,0.03,0.05,0.08,0.04,0.1,0.1,0.13,0.16,0.21,0.04,0.08,0.1,0,0.15,0.12,0,0.18,0.15,0,0.05,0.05,0.16,0.08,0.1,0.09,0.13,0.15,0.09,0.13,0,8.49,-1.06,975,175,650,3.21,0.08,0.16,3.22,0.12,3.22,9.14},4},
{{0.02,0.03,0.04,0.05,0.05,0.06,0.08,0.15,0.22,0.33,0.02,0.03,0.05,0,0.07,0.13,0,0.12,0.15,0,0,0,0.01,0,0.01,0.02,0.05,0.19,0.21,0.53,0,8.54,-0.81,975,159.84,650,3.13,0.08,0.15,3.14,0.1,3.14,9.14},4},
{{0.03,0.01,0.02,0.03,0.02,0.03,0.08,0.06,0.07,0.05,0.02,0.02,0.03,0,0.05,0.07,0,0.06,0.04,0,0,0,0.01,0,0.01,0.01,0.08,0.09,0.05,0.1,0,2.97,-0.31,975,213.33,650,1.13,1.93,0.21,3.24,5.52,3.24,3.2},4},
{{0.11,0.1,0.05,0.14,0.13,0.11,0.09,0.1,0.09,0.08,0.09,0.12,0.1,0.09,0.1,0.11,0.07,0.11,0.1,0.08,0.08,0.1,0.09,0.08,0.1,0.14,0.13,0.1,0.06,0.13,0,8.56,3.02,1300,372.73,2225,3.17,6.46,4.24,4.13,7.71,4.13,12.45},5},
{{0.07,0.09,0.17,0.07,0.07,0.12,0.13,0.11,0.08,0.11,0.12,0.1,0.1,0.1,0.09,0.14,0.1,0.07,0.09,0.09,0.15,0.09,0.12,0.08,0.08,0.1,0.06,0.1,0.16,0.09,0,8.11,2.38,4525,494.44,1550,3.07,6.27,5.02,3.98,7.73,3.98,12.34},5},
{{0.08,0.07,0.03,0.07,0.06,0.03,0.05,0.05,0.1,0.07,0.05,0.04,0.06,0.08,0.05,0.03,0.1,0.08,0.07,0.05,0.03,0.06,0.06,0.1,0.09,0.03,0.08,0.07,0.04,0.05,0,5.3,1.42,2425,614.29,2375,1.95,4.03,2.24,4.27,8.31,4.27,7.33},5},
{{0.1,0.06,0.07,0.14,0.12,0.12,0.11,0.11,0.09,0,0.09,0.1,0.1,0.07,0.14,0.11,0.14,0.11,0.09,0,0.15,0.07,0.1,0.11,0.09,0.11,0.13,0.09,0.1,0,0,8.57,1.97,1933.33,940,2550,2.81,4.11,3.32,3.91,5.21,3.91,10.68},1},
{{0.11,0.1,0.11,0.07,0.1,0.1,0.13,0.07,0.16,0,0.11,0.1,0.1,0.09,0.13,0.09,0.09,0.1,0.08,0,0.08,0.13,0.12,0.1,0.08,0.08,0.12,0.12,0.09,0,0,8.64,2.32,3725,675,4275,2.82,4.7,3.48,3.61,5.75,3.61,10.86},1},
{{0.11,0.12,0.11,0.1,0.1,0.09,0.11,0.1,0.06,0,0.11,0.11,0.1,0.15,0.08,0.08,0.08,0.08,0.13,0,0.08,0.08,0.08,0.11,0.11,0.14,0.08,0.11,0.11,0,0,8.42,2.66,2525,685.71,525,2.98,4.88,3.43,3.84,5.91,3.84,10.82},1},
{{0.05,0.08,0.09,0.06,0.05,0.04,0.05,0.07,0.07,0,0.06,0.06,0.06,0.06,0.03,0.09,0.06,0.08,0.08,0,0.06,0.06,0.06,0.08,0.09,0.05,0.04,0.05,0.05,0,0,5.36,1.26,1700,741.67,750,1.73,3.24,1.96,3.5,6.47,3.5,6.59},1},
{{0.12,0.16,0.16,0.11,0.09,0.06,0.06,0.09,0.08,0.09,0.09,0.12,0.12,0.1,0.09,0.09,0.13,0.09,0.09,0.12,0.13,0.1,0.08,0.1,0.13,0.1,0.07,0.13,0.07,0.11,0,10.28,-1.65,1483.33,703.85,2050,3.22,4.64,4.49,4.1,5.65,4.1,12.96},2},
{{0.11,0.14,0.13,0.1,0.11,0.07,0.07,0.08,0.11,0.1,0.11,0.1,0.09,0.14,0.08,0.1,0.1,0.11,0.08,0.11,0.09,0.13,0.11,0.06,0.09,0.12,0.11,0.14,0.08,0.1,0,10.08,-1.3,2066.67,632.14,2666.67,3.05,4.68,4.4,3.98,5.81,3.98,12.74},2},
{{0.09,0.13,0.14,0.12,0.07,0.1,0.09,0.08,0.11,0.1,0.09,0.1,0.13,0.11,0.1,0.12,0.09,0.12,0.07,0.1,0.1,0.1,0.12,0.11,0.12,0.11,0.1,0.1,0.09,0.08,0,10.18,-1.65,1500,560,1460,2.98,4.4,4.29,3.88,5.51,3.88,12.74},2},
{{0.11,0.09,0.13,0.08,0.11,0.11,0.1,0.11,0.09,0.09,0.11,0.08,0.13,0.09,0.1,0.09,0.1,0.13,0.08,0.11,0.11,0.1,0.11,0.1,0.08,0.1,0.09,0.12,0.11,0.1,0,10.19,-1.54,3016.67,715.38,4525,2.92,4.71,4.42,3.87,5.8,3.87,12.8},2},
{{0.11,0.09,0.12,0.14,0.09,0.09,0.12,0.08,0.1,0.09,0.09,0.11,0.09,0.11,0.12,0.1,0.11,0.1,0.11,0.08,0.08,0.11,0.12,0.12,0.1,0.11,0.1,0.09,0.12,0.08,0,10.17,-1.43,3175,800,1800,2.83,4.47,4.41,3.69,5.53,3.69,12.72},2},
{{0.11,0.08,0.17,0.09,0.06,0.13,0.12,0.1,0.09,0.09,0.08,0.14,0.09,0.12,0.06,0.12,0.12,0.09,0.12,0.09,0.12,0.1,0.06,0.13,0.12,0.09,0.08,0.1,0.12,0.09,0,10.16,-1.48,2725,745.83,1050,2.82,4.67,4.63,3.61,5.75,3.61,12.85},2},
{{0.1,0.09,0.11,0.11,0.1,0.08,0.17,0.06,0.09,0.1,0.09,0.1,0.1,0.1,0.12,0.1,0.12,0.12,0.1,0.07,0.11,0.11,0.13,0.1,0.12,0.08,0.09,0.09,0.11,0.09,0,10.18,-1.84,2675,757.69,2675,2.81,4.58,4.51,3.78,5.7,3.78,12.87},2},
{{0.07,0.12,0.12,0.14,0.06,0.08,0.13,0.12,0.09,0.1,0.11,0.1,0.11,0.08,0.09,0.12,0.13,0.12,0.06,0.09,0.07,0.08,0.14,0.12,0.1,0.11,0.11,0.09,0.11,0.09,0,10.06,-1.36,3625,689.29,1483.33,2.8,4.52,4.1,3.48,5.59,3.48,12.4},2},
{{0.08,0.09,0.08,0.09,0.14,0.12,0.1,0.1,0.12,0.1,0.11,0.12,0.08,0.07,0.13,0.09,0.11,0.1,0.08,0.11,0.07,0.09,0.15,0.08,0.11,0.1,0.12,0.12,0.1,0.08,0,10.35,-1.28,2875,900,1337.5,2.76,4.6,4.28,3.66,5.68,3.66,12.75},2},
{{0.09,0.11,0.08,0.1,0.13,0.09,0.12,0.08,0.1,0.11,0.11,0.1,0.08,0.09,0.14,0.13,0.09,0.11,0.06,0.11,0.12,0.07,0.11,0.08,0.11,0.12,0.09,0.08,0.12,0.12,0,10.08,-1.09,2200,576.67,3450,2.93,4.62,4.64,3.97,5.83,3.97,12.81},2},
{{0.11,0.08,0.1,0.11,0.1,0.08,0.1,0.14,0.1,0.1,0.12,0.08,0.11,0.1,0.11,0.09,0.09,0.08,0.11,0.12,0.14,0.12,0.07,0.1,0.09,0.13,0.07,0.11,0.08,0.11,0,10.14,-1.54,1775,603.33,2050,3.1,4.95,4.62,4.09,6.14,4.09,13.09},2},
{{0.09,0.09,0.06,0.1,0.15,0.1,0.15,0.09,0.1,0.11,0.12,0.1,0.11,0.08,0.08,0.09,0.13,0.07,0.14,0.11,0.09,0.14,0.1,0.1,0.07,0.13,0.1,0.07,0.12,0.11,0,10.24,-1.24,1850,612.5,2225,2.73,4.87,4.59,3.62,5.98,3.62,12.9},2},
{{0.1,0.14,0.07,0.1,0.08,0.13,0.12,0.1,0.1,0.08,0.1,0.09,0.11,0.12,0.12,0.09,0.09,0.07,0.11,0.12,0.1,0.13,0.1,0.1,0.12,0.07,0.12,0.08,0.11,0.1,0,10.18,-1.47,1987.5,606.67,1410,2.76,4.58,4.62,3.58,5.74,3.58,12.84},2},
{{0.13,0.07,0.1,0.07,0.11,0.09,0.09,0.13,0.1,0.14,0.13,0.09,0.09,0.09,0.11,0.09,0.08,0.11,0.12,0.11,0.11,0.14,0.07,0.11,0.11,0.06,0.17,0.07,0.1,0.09,0,10.23,-1.59,2633.33,609.38,2933.33,3.19,4.89,4.37,4.13,6.02,4.13,13.03},2},
{{0.09,0.12,0.08,0.08,0.09,0.11,0.13,0.12,0.08,0.12,0.11,0.08,0.12,0.09,0.12,0.1,0.1,0.11,0.12,0.09,0.11,0.11,0.1,0.08,0.1,0.1,0.11,0.1,0.09,0.13,0,10.32,-1.36,1483.33,812.5,2675,3,4.69,4.67,3.96,5.88,3.96,13.12},2},
{{0.09,0.1,0.07,0.1,0.14,0.1,0.12,0.1,0.12,0.09,0.1,0.11,0.09,0.1,0.1,0.11,0.1,0.08,0.13,0.09,0.08,0.12,0.11,0.1,0.11,0.11,0.11,0.08,0.09,0.12,0,10.24,-1.29,3125,646.43,3125,2.74,4.69,4.45,3.62,5.84,3.62,12.82},2},
{{0.1,0.1,0.07,0.09,0.1,0.12,0.09,0.13,0.13,0.1,0.13,0.09,0.1,0.09,0.11,0.1,0.08,0.09,0.11,0.12,0.11,0.11,0.12,0.09,0.11,0.07,0.09,0.1,0.12,0.11,0,10.2,-1.41,3025,633.33,1416.67,3.01,5.02,4.62,3.98,6.18,3.98,13.05},2},
{{0.1,0.08,0.13,0.11,0.07,0.09,0.1,0.12,0.12,0.1,0.11,0.11,0.09,0.08,0.1,0.13,0.08,0.12,0.11,0.09,0.11,0.12,0.1,0.07,0.12,0.13,0.08,0.11,0.06,0.12,0,10.22,-1.47,1325,662.5,2225,2.98,4.76,4.46,3.78,5.87,3.78,12.93},2},
{{0.11,0.14,0.06,0.08,0.1,0.11,0.09,0.11,0.11,0.11,0.14,0.07,0.1,0.09,0.11,0.07,0.11,0.1,0.13,0.11,0.11,0.11,0.12,0.09,0.08,0.11,0.11,0.08,0.11,0.1,0,10.26,-1.44,3975,565.63,2225,3.17,4.98,4.52,4.13,6.12,4.13,13.11},2},
{{0.11,0.1,0.1,0.1,0.09,0.1,0.11,0.07,0.12,0.12,0.11,0.1,0.09,0.15,0.09,0.08,0.07,0.1,0.11,0.13,0.11,0.1,0.07,0.15,0.08,0.07,0.12,0.11,0.11,0.11,0,10.27,-1.13,3050,528.13,1725,3.15,4.75,4.71,4.14,5.85,4.14,13.02},2},
{{0.1,0.13,0.08,0.11,0.09,0.12,0.06,0.11,0.06,0.16,0.09,0.11,0.12,0.1,0.08,0.1,0.09,0.13,0.11,0.1,0.13,0.08,0.06,0.12,0.09,0.07,0.12,0.16,0.07,0.12,0,10.4,-1.06,2650,571.43,2200,3.24,4.75,4.62,4.19,5.8,4.19,13.1},2},
{{0.11,0.11,0.07,0.12,0.07,0.13,0.08,0.11,0.11,0.11,0.09,0.11,0.08,0.11,0.06,0.12,0.1,0.09,0.12,0.13,0.11,0.12,0.09,0.05,0.12,0.09,0.09,0.12,0.11,0.12,0,10.5,-1.15,1300,573.53,2175,3.05,4.89,4.82,4.02,6.03,4.02,13.39},2},
{{0.11,0.11,0.11,0.06,0.12,0.1,0.1,0.08,0.12,0.11,0.09,0.08,0.08,0.13,0.09,0.1,0.13,0.13,0.09,0.1,0.08,0.09,0.15,0.11,0.07,0.09,0.12,0.11,0.09,0.11,0,10.55,-1.17,4300,860,1325,2.99,4.37,4.47,3.84,5.5,3.84,13.07},2},
{{0.13,0.11,0.1,0.1,0.05,0.1,0.11,0.1,0.08,0.14,0.09,0.11,0.09,0.12,0.13,0.1,0.05,0.08,0.13,0.11,0.13,0.09,0.07,0.12,0.1,0.07,0.15,0.09,0.1,0.1,0,10.18,-1.33,3450,600,2162.5,3.28,4.74,4.57,4.26,5.95,4.26,13.08},2},
{{0.11,0.14,0.1,0.08,0.07,0.09,0.09,0.11,0.13,0.11,0.1,0.1,0.11,0.1,0.08,0.1,0.11,0.09,0.14,0.1,0.08,0.13,0.09,0.1,0.08,0.11,0.11,0.12,0.1,0.1,0,10.54,-1.17,2200,723.08,1466.67,3.12,4.7,4.48,3.93,5.76,3.93,13.13},2},
{{0.08,0.1,0.11,0.13,0.08,0.13,0.1,0.07,0.14,0.09,0.11,0.1,0.1,0.13,0.09,0.06,0.12,0.14,0.08,0.1,0.09,0.08,0.13,0.12,0.08,0.14,0.12,0.07,0.11,0.09,0,10.14,-1.2,1275,804.17,3216.67,2.8,4.7,4.38,3.62,5.69,3.62,12.68},2},
{{0.09,0.07,0.09,0.14,0.09,0.13,0.11,0.12,0.11,0.08,0.1,0.1,0.11,0.1,0.12,0.07,0.16,0.09,0.08,0.09,0.08,0.08,0.16,0.09,0.15,0.07,0.09,0.11,0.11,0.09,0,10.16,-1.26,2066.67,822.73,2000,2.67,4.49,4.38,3.54,5.56,3.54,12.6},2},
{{0.1,0.08,0.17,0.09,0.07,0.12,0.08,0.1,0.12,0.09,0.11,0.11,0.07,0.1,0.1,0.14,0.09,0.1,0.1,0.1,0.09,0.08,0.12,0.11,0.09,0.12,0.1,0.11,0.09,0.12,0,10.31,-1.02,2225,632.14,1483.33,2.82,4.5,4.41,3.6,5.59,3.6,12.77},2},
{{0.09,0.11,0.11,0.08,0.1,0.12,0.12,0.07,0.13,0.09,0.08,0.13,0.07,0.11,0.12,0.11,0.09,0.12,0.11,0.08,0.07,0.07,0.11,0.13,0.12,0.1,0.08,0.14,0.1,0.09,0,10.36,-0.93,1150,660.71,4500,2.84,4.38,4.28,3.75,5.38,3.75,12.67},2},
{{0.09,0.09,0.09,0.11,0.14,0.09,0.06,0.11,0.12,0.13,0.09,0.1,0.13,0.1,0.08,0.12,0.12,0.07,0.12,0.09,0.11,0.06,0.11,0.12,0.08,0.09,0.12,0.12,0.11,0.1,0,10.26,-1.09,2000,711.54,1733.33,2.9,4.63,4.48,3.73,5.68,3.73,12.78},2},
{{0.14,0.07,0.07,0.08,0.09,0.06,0.12,0.16,0.07,0.16,0.11,0.06,0.12,0.09,0.09,0.11,0.1,0.07,0.12,0.15,0.16,0.1,0.04,0.07,0.13,0.12,0.07,0.09,0.15,0.1,0,10.69,-1.36,1725,581.25,3000,3.37,4.72,4.69,4.26,5.93,4.26,13.46},2},
{{0.11,0.07,0.1,0.1,0.17,0.08,0.17,0.07,0.06,0.08,0.08,0.12,0.12,0.07,0.15,0.12,0.1,0.12,0.06,0.08,0.09,0.07,0.14,0.06,0.1,0.14,0.14,0.1,0.1,0.1,0,10.08,-1.18,1800,790.91,2275,2.58,4.26,4.15,3.55,5.25,3.55,12.35},2},
{{0.03,0.02,0.04,0.08,0.06,0.04,0.03,0.02,0.01,0.01,0,0.07,0.07,0.03,0.09,0.02,0.02,0.03,0,0.01,0,0.01,0.02,0.05,0.11,0.04,0.03,0.02,0.02,0.05,0,2.87,-0.17,725,1000,1300,0.63,2.01,1.14,2.91,7.08,2.91,3.4},2},
{{0.06,0.06,0.02,0.07,0.04,0.09,0.11,0.06,0.13,0.33,0.09,0.15,0.07,0.11,0.12,0.12,0.12,0.07,0.08,0,0.13,0.07,0.12,0.14,0.06,0.06,0.09,0.11,0.21,0.05,0,7.85,-1.91,568.75,269.44,1210,8.4,8.26,8.08,10.39,10.14,10.39,18.05},0},
{{0.06,0.08,0.07,0.05,0.08,0.11,0.09,0.16,0.14,0.18,0.14,0.13,0.09,0.09,0.11,0.06,0.09,0.14,0.06,0,0.14,0.09,0.12,0.06,0.1,0.09,0.1,0.11,0.11,0.11,0,7.31,-1.97,2062.5,312.9,1012.5,5.82,9.19,8.18,7.33,11.07,7.33,17.35},0},
{{0.08,0.11,0.07,0.07,0.12,0.1,0.12,0.14,0.13,0.09,0.15,0.1,0.1,0.1,0.08,0.08,0.09,0.11,0.08,0,0.18,0.09,0.08,0.04,0.05,0.15,0.08,0.13,0.08,0.13,0,7.69,-1.51,1783.33,276.47,1030,5.15,9.19,8.28,6.57,10.96,6.57,17.35},0},
{{0.11,0.08,0.07,0.11,0.1,0.1,0.13,0.12,0.12,0.09,0.12,0.14,0.12,0.08,0.08,0.09,0.07,0.12,0.08,0,0.16,0.09,0.08,0.08,0.06,0.12,0.14,0.09,0.07,0.13,0,7.77,-1.87,1700,324.14,2916.67,5.27,9.2,8.04,6.85,10.9,6.85,17.27},0},
{{0.08,0.15,0.07,0.1,0.09,0.13,0.08,0.07,0.13,0.12,0.11,0.12,0.13,0.1,0.1,0.07,0.07,0.08,0.1,0,0.12,0.12,0.09,0.08,0.07,0.1,0.11,0.12,0.08,0.14,0,8.05,-1.42,1950,320,1135.71,5.57,8.76,8.17,6.89,10.51,6.89,17.12},0},
{{0.09,0.06,0.08,0.13,0.07,0.15,0.08,0.11,0.15,0.09,0.13,0.13,0.1,0.07,0.12,0.09,0.04,0.12,0.06,0,0.13,0.11,0.11,0.09,0.07,0.11,0.09,0.1,0.09,0.13,0,7.6,-1.84,2066.67,331.03,2400,5.07,9.03,8.11,6.58,10.76,6.58,17},0},
{{0.11,0.09,0.06,0.13,0.12,0.11,0.09,0.07,0.13,0.11,0.11,0.13,0.1,0.09,0.09,0.08,0.1,0.13,0.07,0,0.07,0.1,0.14,0.09,0.09,0.11,0.11,0.1,0.09,0.12,0,8.45,-1.5,2733.33,324.14,950,5.44,8.57,7.5,7.06,10.21,7.06,16.85},0},
{{0.08,0.15,0.11,0.09,0.09,0.08,0.08,0.14,0.1,0.11,0.12,0.09,0.09,0.1,0.11,0.12,0.13,0.08,0.04,0,0.08,0.11,0.08,0.12,0.1,0.15,0.11,0.07,0.1,0.11,0,8.57,-1.58,916.67,337.93,1375,5.78,8.26,7.01,7.02,10.1,7.02,16.75},0},
{{0.09,0.1,0.11,0.12,0.09,0.12,0.06,0.11,0.13,0.09,0.09,0.1,0.14,0.1,0.13,0.07,0.08,0.1,0.06,0,0.07,0.09,0.12,0.13,0.12,0.1,0.08,0.11,0.08,0.13,0,8.5,-1.42,700,320.69,2400,5.43,8.07,7.7,6.79,9.94,6.79,16.71},0},
{{0.09,0.09,0.14,0.11,0.09,0.07,0.11,0.1,0.14,0.09,0.09,0.09,0.11,0.13,0.1,0.12,0.08,0.1,0.08,0,0.08,0.07,0.09,0.15,0.1,0.08,0.13,0.12,0.1,0.11,0,9.05,-1.26,2033.33,320,3050,5.42,7.65,7.32,6.73,9.5,6.73,16.47},0},
{{0.06,0.13,0.12,0.11,0.09,0.07,0.07,0.14,0.14,0.09,0.09,0.11,0.13,0.14,0.11,0.04,0.09,0.1,0.07,0,0.08,0.09,0.13,0.11,0.09,0.11,0.07,0.13,0.11,0.09,0,8.14,-1.94,525,282.35,1810,5.53,8.21,7.58,6.68,10.16,6.68,16.51},0},
{{0.09,0.13,0.09,0.1,0.12,0.1,0.07,0.13,0.13,0.08,0.11,0.14,0.09,0.1,0.11,0.11,0.07,0.07,0.05,0,0.11,0.1,0.09,0.07,0.06,0.16,0.12,0.1,0.08,0.14,0,7.98,-1.34,1050,320.69,2750,5.51,8.43,7.77,6.86,10.14,6.86,16.79},0},
{{0.1,0.11,0.06,0.1,0.12,0.13,0.08,0.09,0.14,0.09,0.1,0.11,0.12,0.09,0.1,0.08,0.12,0.08,0.05,0,0.09,0.1,0.09,0.11,0.12,0.06,0.13,0.14,0.09,0.1,0,8.61,-1.5,1516.67,361.11,1700,5.43,8.25,7.37,6.93,9.91,6.93,16.6},0},
{{0.08,0.11,0.14,0.11,0.12,0.07,0.09,0.13,0.11,0.07,0.08,0.15,0.11,0.09,0.1,0.06,0.11,0.13,0.1,0,0.08,0.09,0.13,0.11,0.07,0.11,0.12,0.1,0.08,0.13,0,9.04,-1.43,3525,260.81,1550,5.26,8.27,7.64,6.63,9.74,6.63,16.55},0},
{{0.11,0.07,0.13,0.12,0.09,0.11,0.07,0.1,0.13,0.1,0.12,0.11,0.11,0.1,0.07,0.09,0.11,0.07,0.08,0,0.1,0.11,0.11,0.06,0.12,0.1,0.09,0.14,0.08,0.11,0,8.23,-1.56,4500,321.67,795.45,5.66,8.83,7.78,7.3,10.54,7.3,17.12},0},
{{0.07,0.15,0.11,0.09,0.09,0.13,0.1,0.07,0.13,0.1,0.11,0.08,0.12,0.12,0.09,0.11,0.12,0.07,0.06,0,0.07,0.11,0.1,0.11,0.09,0.1,0.11,0.11,0.11,0.11,0,8.66,-1.07,1262.5,357.41,1085.71,5.43,8.07,7.65,6.86,9.9,6.86,16.74},0},
{{0.11,0.12,0.07,0.08,0.08,0.1,0.16,0.12,0.09,0.09,0.1,0.11,0.11,0.08,0.1,0.09,0.12,0.08,0.08,0,0.06,0.07,0.08,0.16,0.12,0.09,0.13,0.13,0.13,0.05,0,8.83,-1.41,3575,390,4075,5.46,8.52,6.74,7.1,10.17,7.1,16.4},0},
{{0.1,0.09,0.09,0.11,0.11,0.12,0.11,0.11,0.11,0.08,0.1,0.09,0.11,0.1,0.08,0.11,0.11,0.08,0.08,0,0.04,0.1,0.18,0.13,0.09,0.09,0.06,0.13,0.1,0.12,0,9.01,-1.35,3800,370.83,1266.67,5.3,8.24,7.87,6.9,9.98,6.9,17.05},0},
{{0.1,0.08,0.08,0.12,0.12,0.1,0.11,0.13,0.11,0.07,0.11,0.09,0.11,0.08,0.14,0.09,0.11,0.12,0.06,0,0.06,0.13,0.09,0.1,0.11,0.09,0.11,0.12,0.11,0.11,0,8.82,-1.15,375,292.42,1112.5,5.17,8.01,7.56,6.76,9.88,6.76,16.56},0},
{{0.12,0.07,0.08,0.11,0.15,0.05,0.15,0.09,0.15,0.06,0.13,0.1,0.1,0.1,0.07,0.11,0.1,0.08,0.08,0,0.08,0.11,0.13,0.07,0.09,0.14,0.13,0.08,0.07,0.12,0,8.38,-1.73,3825,310,950,5.4,8.93,7.42,7.03,10.62,7.03,17.1},0},
{{0.13,0.09,0.1,0.06,0.14,0.08,0.11,0.09,0.15,0.09,0.12,0.07,0.12,0.09,0.13,0.1,0.09,0.08,0.08,0,0.08,0.14,0.1,0.06,0.12,0.09,0.09,0.13,0.08,0.12,0,8.8,-1.44,1750,314.52,1257.14,5.88,8.28,7.81,7.49,10.23,7.49,17.39},0},
{{0.11,0.08,0.08,0.11,0.09,0.13,0.11,0.09,0.13,0.09,0.1,0.13,0.11,0.08,0.1,0.13,0.08,0.09,0.06,0,0.09,0.13,0.11,0.11,0.08,0.09,0.1,0.11,0.09,0.13,0,8.39,-1.53,1725,386,1150,5.5,8.52,8.21,7.22,10.25,7.22,17.21},0},
{{0.11,0.12,0.09,0.09,0.12,0.1,0.09,0.12,0.09,0.09,0.12,0.07,0.11,0.09,0.12,0.12,0.1,0.08,0.08,0,0.13,0.08,0.1,0.09,0.09,0.14,0.07,0.13,0.1,0.11,0,8.59,-1.77,2233.33,340.74,1208.33,5.65,8.23,7.84,7.3,10.21,7.3,17.12},0},
{{0.13,0.09,0.09,0.1,0.07,0.1,0.11,0.14,0.08,0.1,0.11,0.11,0.1,0.12,0.07,0.06,0.12,0.11,0.07,0,0.12,0.14,0.09,0.06,0.12,0.05,0.14,0.11,0.08,0.12,0,8.57,-2.04,3050,359.26,1760,5.85,8.71,8.03,7.5,10.42,7.5,17.46},0},
{{0.13,0.07,0.1,0.1,0.13,0.09,0.13,0.06,0.12,0.1,0.12,0.12,0.08,0.1,0.09,0.09,0.09,0.1,0.06,0,0.13,0.14,0.08,0.07,0.08,0.1,0.11,0.1,0.09,0.13,0,8.5,-1.72,2650,321.67,900,5.62,8.89,8.41,7.42,10.6,7.42,17.64},0},
{{0.11,0.08,0.11,0.12,0.11,0.09,0.11,0.12,0.09,0.08,0.12,0.11,0.11,0.08,0.08,0.11,0.08,0.12,0.05,0,0.17,0.1,0.05,0.07,0.07,0.11,0.13,0.1,0.08,0.13,0,8.26,-1.45,3975,346.43,658.33,5.58,8.93,8.44,7.21,10.7,7.21,17.63},0},
{{0.11,0.06,0.09,0.14,0.12,0.14,0.09,0.08,0.13,0.07,0.11,0.1,0.07,0.09,0.09,0.13,0.13,0.09,0.06,0,0.15,0.13,0.04,0.09,0.03,0.15,0.1,0.11,0.06,0.16,0,8.87,-1.51,2750,323.33,881.82,5.23,8.45,8.35,7.01,10.41,7.01,17.73},0},
{{0.12,0.07,0.13,0.12,0.08,0.14,0.09,0.07,0.13,0.09,0.12,0.11,0.07,0.09,0.15,0.09,0.09,0.09,0.06,0,0.18,0.12,0.06,0.07,0.07,0.13,0.12,0.04,0.08,0.15,0,8.37,-2.01,3100,346.3,1050,5.46,8.53,8.62,7.05,10.63,7.05,17.91},0},
{{0.11,0.06,0.08,0.14,0.08,0.12,0.15,0.11,0.11,0.08,0.11,0.1,0.05,0.14,0.1,0.09,0.13,0.08,0.07,0,0.15,0.14,0.06,0.05,0.1,0.09,0.11,0.09,0.08,0.15,0,8.78,-1.58,1375,295.31,1350,5.32,8.38,8.49,7.19,10.31,7.19,17.65},0},
{{0.09,0.07,0.1,0.13,0.1,0.14,0.15,0.09,0.07,0.09,0.1,0.1,0.11,0.08,0.1,0.12,0.12,0.09,0.07,0,0.13,0.08,0.09,0.08,0.12,0.1,0.14,0.11,0.07,0.11,0,8.67,-1.73,3925,348.08,1100,4.92,8.31,7.57,6.6,10.14,6.6,16.74},0},
{{0.02,0.07,0.12,0.15,0.19,0.1,0.12,0.08,0.06,0.11,0.04,0.07,0.12,0.13,0.19,0.16,0.17,0.04,0.07,0,0.02,0.04,0.04,0.08,0.12,0.15,0.27,0.17,0.08,0.04,0,9.15,-0.27,1375,640,1375,4.38,5.69,4.63,5.78,7.52,5.78,13.54},0},
{{0.07,0.08,0.07,0.06,0.09,0.1,0.09,0.11,0.13,0.21,0.11,0.11,0.09,0.15,0.08,0.08,0.11,0.08,0.09,0,0.07,0.09,0.12,0.14,0.11,0.09,0.12,0.1,0.12,0.06,0,7.85,-1.98,1225,309.68,1416.67,6.14,8.57,7.17,7.74,10.56,7.74,16.76},0},
{{0.12,0.12,0.06,0.11,0.09,0.08,0.06,0.08,0.09,0.2,0.13,0.06,0.14,0.11,0.09,0.1,0.11,0.09,0.09,0,0.07,0.08,0.1,0.15,0.14,0.1,0.08,0.13,0.1,0.07,0,8.22,-1.98,1100,295.31,1670,6.66,8.29,6.92,8.14,10.17,8.14,16.87},0},
{{0.12,0.09,0.13,0.07,0.16,0.06,0.08,0.09,0.1,0.12,0.11,0.07,0.13,0.11,0.07,0.13,0.11,0.14,0.05,0,0.07,0.08,0.1,0.13,0.15,0.08,0.07,0.15,0.14,0.05,0,8.47,-1.61,3125,378,3125,5.85,8.21,7.05,7.31,10.17,7.31,16.54},0},
{{0.11,0.14,0.11,0.11,0.08,0.1,0.06,0.11,0.09,0.13,0.09,0.06,0.15,0.12,0.09,0.09,0.1,0.11,0.09,0,0.07,0.05,0.1,0.18,0.14,0.09,0.08,0.12,0.14,0.06,0,9.29,-1.74,2333.33,342.86,2583.33,5.97,7.93,6.98,7.34,9.76,7.34,16.8},0},
{{0.09,0.11,0.12,0.1,0.14,0.14,0.06,0.07,0.04,0.15,0.11,0.09,0.11,0.16,0.08,0.08,0.06,0.15,0.09,0,0.07,0.03,0.13,0.18,0.14,0.09,0.09,0.12,0.09,0.09,0,8.43,-1.82,945,263.51,1612.5,5.64,8.32,7.13,7.28,10.2,7.28,16.52},0},
{{0.12,0.12,0.11,0.12,0.1,0.08,0.1,0.09,0.12,0.07,0.08,0.09,0.14,0.1,0.09,0.11,0.13,0.1,0.09,0,0.06,0.08,0.17,0.12,0.1,0.08,0.08,0.13,0.12,0.08,0,9.01,-1.6,3025,333.33,2425,5.81,7.93,7.52,7.43,9.76,7.43,16.84},0},
{{0.12,0.09,0.1,0.16,0.1,0.07,0.07,0.08,0.13,0.09,0.09,0.09,0.12,0.07,0.12,0.12,0.11,0.09,0.1,0,0.05,0.09,0.16,0.12,0.11,0.1,0.07,0.1,0.17,0.05,0,9.3,-1.77,1666.67,314.52,2083.33,5.85,7.88,7.34,7.41,9.68,7.41,16.98},0},
{{0.09,0.11,0.12,0.12,0.12,0.14,0.06,0.07,0.07,0.13,0.07,0.1,0.1,0.11,0.09,0.09,0.1,0.14,0.08,0,0.03,0.03,0.18,0.2,0.13,0.06,0.1,0.11,0.12,0.06,0,9.66,-1.63,1400,316.13,2733.33,5.46,7.93,7.01,7.01,9.63,7.01,16.79},0},
{{0.1,0.1,0.1,0.14,0.13,0.11,0.08,0.06,0.09,0.11,0.1,0.09,0.13,0.08,0.08,0.1,0.1,0.13,0.12,0,0.04,0.09,0.2,0.09,0.13,0.08,0.09,0.09,0.14,0.07,0,9.14,-1.94,4250,320,1587.5,5.52,8.4,7.2,7.25,10.14,7.25,16.97},0},
{{0.11,0.09,0.16,0.1,0.1,0.08,0.08,0.1,0.1,0.11,0.09,0.07,0.13,0.14,0.11,0.07,0.11,0.1,0.09,0,0.03,0.08,0.15,0.15,0.13,0.05,0.1,0.11,0.11,0.1,0,8.95,-1.2,2450,308.06,2483.33,5.85,7.91,7.34,7.31,9.74,7.31,16.7},0},
{{0.09,0.15,0.1,0.09,0.1,0.11,0.08,0.11,0.11,0.09,0.1,0.07,0.13,0.11,0.12,0.08,0.07,0.12,0.1,0,0.07,0.12,0.14,0.1,0.15,0.07,0.1,0.08,0.12,0.08,0,9.15,-2.23,1690,332.76,1285.71,5.76,7.99,7.43,7.34,9.92,7.34,17.13},0},
{{0.11,0.13,0.07,0.11,0.09,0.09,0.13,0.11,0.1,0.09,0.1,0.1,0.09,0.11,0.1,0.08,0.13,0.11,0.07,0,0.03,0.09,0.16,0.16,0.11,0.08,0.08,0.11,0.11,0.09,0,9.09,-1.95,1800,382,2075,5.81,8.15,6.97,7.46,9.91,7.46,16.81},0},
{{0.1,0.11,0.11,0.1,0.1,0.1,0.1,0.15,0.09,0.07,0.08,0.11,0.05,0.14,0.12,0.1,0.14,0.12,0.07,0,0.04,0.08,0.16,0.13,0.12,0.11,0.09,0.09,0.12,0.09,0,9.21,-1.66,2450,332.76,1700,5.56,7.68,7.03,7.16,9.47,7.16,16.5},0},
{{0.11,0.12,0.09,0.07,0.08,0.1,0.14,0.16,0.09,0.06,0.1,0.09,0.07,0.13,0.1,0.11,0.11,0.1,0.07,0,0.03,0.13,0.15,0.12,0.11,0.11,0.1,0.06,0.15,0.07,0,9.08,-2.09,4675,454.76,833.33,5.52,8.06,7.06,7.17,9.95,7.17,16.83},0},
{{0.13,0.11,0.13,0.05,0.1,0.07,0.11,0.12,0.1,0.11,0.1,0.1,0.06,0.13,0.11,0.09,0.12,0.11,0.07,0,0.09,0.09,0.13,0.15,0.09,0.08,0.11,0.08,0.12,0.09,0,9.13,-2.05,550,350,900,6.23,8.09,7.47,7.88,9.99,7.88,17.35},0},
{{0.12,0.08,0.11,0.14,0.09,0.13,0.09,0.09,0.09,0.09,0.1,0.1,0.12,0.09,0.05,0.12,0.09,0.12,0.09,0,0.13,0.15,0.06,0.08,0.11,0.11,0.11,0.05,0.1,0.12,0,8.93,-2.43,3375,353.7,2050,5.63,8.83,7.85,7.32,10.57,7.32,17.8},0},
{{0.11,0.08,0.12,0.12,0.16,0.1,0.1,0.12,0.04,0.09,0.1,0.14,0.11,0.05,0.09,0.09,0.13,0.12,0.09,0,0.09,0.16,0.13,0.05,0.14,0.09,0.08,0.11,0.1,0.08,0,8.63,-2.73,2450,357.41,1000,5.31,8.74,7.49,7.1,10.32,7.1,17.12},0},
{{0.11,0.13,0.08,0.11,0.07,0.11,0.14,0.08,0.08,0.11,0.1,0.1,0.08,0.11,0.08,0.14,0.1,0.09,0.06,0,0.13,0.12,0.09,0.12,0.09,0.09,0.09,0.07,0.11,0.1,0,8.9,-2.59,1675,438.64,1900,5.7,8.31,7.75,7.37,10.25,7.37,17.51},0},
{{0.11,0.11,0.12,0.08,0.08,0.11,0.11,0.13,0.09,0.09,0.11,0.13,0.08,0.1,0.1,0.1,0.08,0.1,0.07,0,0.22,0.1,0.06,0.05,0.1,0.11,0.09,0.08,0.1,0.12,0,8.26,-2.57,4125,361.54,816.67,5.76,8.84,8.37,7.53,10.56,7.53,17.71},0},
{{0.11,0.14,0.09,0.1,0.1,0.09,0.12,0.1,0.07,0.1,0.1,0.09,0.09,0.1,0.11,0.14,0.1,0.08,0.08,0,0.15,0.13,0.09,0.08,0.12,0.11,0.08,0.06,0.09,0.13,0,8.71,-2.37,1700,368.75,3250,5.69,8.35,8.05,7.3,10.47,7.3,17.67},0},
{{0.12,0.13,0.09,0.09,0.07,0.12,0.16,0.1,0.05,0.1,0.08,0.09,0.07,0.11,0.14,0.14,0.08,0.1,0.06,0,0.14,0.15,0.08,0.08,0.1,0.1,0.08,0.09,0.12,0.09,0,9.16,-2.58,2016.67,404.17,1570,5.63,7.82,7.74,7.29,9.86,7.29,17.43},0},
{{0.12,0.1,0.13,0.12,0.07,0.09,0.12,0.12,0.06,0.1,0.1,0.11,0.07,0.08,0.14,0.1,0.1,0.11,0.08,0,0.12,0.15,0.08,0.12,0.1,0.09,0.1,0.05,0.11,0.11,0,8.81,-2.59,1350,350,855,5.78,8.29,7.79,7.32,10.36,7.32,17.62},0},
{{0.1,0.14,0.1,0.12,0.08,0.09,0.07,0.15,0.09,0.07,0.09,0.09,0.09,0.11,0.1,0.12,0.1,0.12,0.07,0,0.11,0.14,0.09,0.09,0.11,0.11,0.09,0.1,0.12,0.08,0,9.34,-2.35,2250,351.85,955.56,5.76,7.87,7.4,7.32,9.67,7.32,17.12},0},
{{0.11,0.15,0.14,0.05,0.07,0.09,0.16,0.08,0.09,0.08,0.08,0.13,0.07,0.09,0.12,0.11,0.1,0.13,0.06,0,0.1,0.14,0.11,0.1,0.1,0.12,0.08,0.07,0.13,0.07,0,9.5,-2.68,2575,362.96,4775,5.97,7.87,7.27,7.7,9.64,7.7,17.34},0},
{{0.15,0.12,0.09,0.09,0.11,0.08,0.11,0.12,0.07,0.09,0.08,0.11,0.1,0.09,0.14,0.11,0.09,0.07,0.09,0,0.19,0.08,0.06,0.12,0.08,0.14,0.09,0.06,0.09,0.14,0,8.81,-2.23,650,322.22,837.5,6.05,8.25,8.28,7.78,10.29,7.78,18.01},0},
{{0.12,0.09,0.14,0.12,0.07,0.13,0.1,0.1,0.06,0.09,0.09,0.1,0.1,0.09,0.09,0.11,0.08,0.16,0.08,0,0.11,0.14,0.11,0.09,0.08,0.11,0.1,0.08,0.1,0.11,0,9.53,-2.21,2350,342.86,2137.5,5.74,8.21,7.78,7.51,10.11,7.51,17.75},0},
{{0.13,0.14,0.09,0.07,0.08,0.08,0.13,0.11,0.09,0.1,0.11,0.12,0.07,0.1,0.08,0.11,0.08,0.13,0.1,0,0.18,0.1,0.05,0.09,0.07,0.11,0.1,0.09,0.09,0.13,0,8.74,-2.02,3050,329.31,2016.67,6.22,8.76,8.37,7.96,10.64,7.96,18.2},0},
{{0.11,0.1,0.14,0.11,0.11,0.11,0.07,0.1,0.07,0.11,0.11,0.09,0.1,0.07,0.07,0.12,0.11,0.12,0.08,0,0.18,0.1,0.04,0.06,0.13,0.14,0.08,0.1,0.1,0.1,0,9.02,-2.34,1875,357.69,983.33,5.8,8.72,7.61,7.53,10.5,7.53,17.83},0},
{{0.11,0.11,0.13,0.09,0.14,0.09,0.12,0.09,0.07,0.08,0.1,0.09,0.11,0.09,0.07,0.15,0.13,0.08,0.09,0,0.16,0.11,0.09,0.07,0.1,0.12,0.07,0.09,0.08,0.13,0,8.97,-1.99,3400,397.92,1228.57,5.58,8.18,8.32,7.38,10,7.38,17.69},0},
{{0.01,0.08,0.1,0.07,0.09,0.07,0.06,0.04,0.02,0.02,0.01,0.04,0.08,0.09,0.13,0.09,0.07,0.03,0.01,0,0.01,0.01,0.01,0.06,0.09,0.09,0.12,0.08,0.07,0.01,0,4.61,-0.13,1325,883.33,1583.33,2.31,3.18,2.56,5.41,7.22,5.41,6.71},0},
{{0.1,0.06,0.06,0.06,0.05,0.11,0.11,0.13,0.15,0.16,0.12,0.12,0.08,0.04,0.05,0.11,0.11,0.14,0.11,0.13,0.09,0.08,0.11,0.1,0.06,0.09,0.08,0.12,0.13,0.16,0,10.01,0.22,575,600,1200,2.95,4.38,2.26,3.84,5.66,3.84,11.63},5},
{{0.08,0.07,0.1,0.11,0.1,0.08,0.1,0.11,0.12,0.15,0.12,0.09,0.07,0.14,0.1,0.1,0.11,0.1,0.09,0.12,0.09,0.1,0.14,0.12,0.08,0.1,0.14,0.07,0.08,0.09,0,10,-0.36,4125,1750,4125,2.46,3.58,1.93,3.27,4.76,3.27,11.06},5},
{{0.08,0.13,0.08,0.12,0.08,0.12,0.1,0.08,0.12,0.1,0.12,0.09,0.11,0.09,0.08,0.1,0.12,0.09,0.1,0.12,0.14,0.11,0.07,0.12,0.12,0.11,0.09,0.06,0.1,0.08,0,10.1,-0.49,3500,1412.5,3500,2.25,3.83,2,3.2,5.04,3.2,11.18},5},
{{0.1,0.13,0.1,0.1,0.13,0.09,0.09,0.11,0.09,0.08,0.11,0.08,0.08,0.11,0.12,0.1,0.1,0.09,0.11,0.12,0.09,0.11,0.07,0.11,0.09,0.12,0.13,0.1,0.1,0.1,0,10.19,-0.2,575,1600,1100,1.96,3.56,1.88,2.54,4.73,2.54,11},5},
{{0.11,0.11,0.09,0.15,0.11,0.12,0.1,0.1,0.06,0.09,0.08,0.13,0.08,0.13,0.16,0.08,0.07,0.1,0.12,0.07,0.1,0.11,0.1,0.07,0.11,0.09,0.09,0.16,0.09,0.1,0,9.98,-0.22,800,1833.33,2275,1.93,3.21,1.99,2.64,4.22,2.64,10.76},5},
{{0.1,0.11,0.09,0.1,0.12,0.08,0.11,0.07,0.06,0.03,0.04,0.09,0.17,0.07,0.11,0.1,0.08,0.07,0.06,0.07,0.07,0.08,0.1,0.1,0.08,0.1,0.07,0.1,0.1,0.06,0,8.44,-0.27,1950,1925,1725,1.43,2.8,1.45,2.25,4.09,2.25,8.9},5},
{{0.24,0.14,0.11,0.08,0.11,0.08,0.08,0.06,0.06,0.06,0.07,0.12,0.1,0.09,0.1,0.1,0.08,0.13,0.13,0.1,0.07,0.1,0.07,0.07,0.1,0.12,0.13,0.12,0.13,0.11,0,10.33,0.55,2550,738.89,1133.33,2.85,3.24,2.68,3.48,3.92,3.48,11.46},1},
{{0.11,0.11,0.13,0.13,0.12,0.08,0.1,0.13,0.06,0.06,0.12,0.07,0.1,0.09,0.1,0.15,0.11,0.06,0.1,0.12,0.08,0.09,0.1,0.08,0.13,0.1,0.08,0.11,0.13,0.12,0,10.04,0.48,3125,1357.14,2350,2.6,3.34,2.74,3.21,4.31,3.21,11.24},1},
{{0.06,0.09,0.09,0.1,0.11,0.09,0.14,0.11,0.1,0.11,0.1,0.11,0.09,0.12,0.11,0.07,0.12,0.11,0.08,0.1,0.1,0.1,0.11,0.11,0.09,0.13,0.1,0.1,0.08,0.1,0,9.95,-0.02,2266.67,1206.25,1300,3.19,3.21,2.66,3.83,4.01,3.83,11.32},1},
{{0.03,0.08,0.1,0.13,0.09,0.15,0.11,0.09,0.12,0.11,0.12,0.1,0.09,0.11,0.08,0.1,0.12,0.09,0.11,0.09,0.1,0.11,0.09,0.14,0.09,0.08,0.1,0.11,0.11,0.1,0,10.05,0.07,1475,1031.25,4325,3.09,3.42,2.77,3.81,4.28,3.81,11.46},1},
{{0.05,0.07,0.08,0.06,0.05,0.1,0.05,0.1,0.16,0.17,0.08,0.1,0.1,0.09,0.1,0.09,0.07,0.09,0.09,0.09,0.14,0.1,0.12,0.09,0.07,0.1,0.07,0.07,0.06,0.07,0,8.58,-0.71,3350,742.86,1950,3.41,2.9,2.66,4.65,4.19,4.65,10.21},1},
{{0.13,0.1,0.08,0.06,0.1,0.07,0.07,0.17,0.08,0.14,0.13,0.09,0.07,0.09,0.09,0.08,0.1,0.13,0.1,0.14,0.12,0.07,0.08,0.08,0.08,0.11,0.1,0.11,0.11,0.16,0,9.94,0.68,525,1720,525,2.33,4.06,2.05,3.04,5.47,3.04,11.29},5},
{{0.06,0.09,0.09,0.09,0.07,0.13,0.1,0.11,0.12,0.16,0.13,0.07,0.11,0.07,0.08,0.1,0.09,0.11,0.12,0.15,0.09,0.11,0.12,0.1,0.11,0.12,0.06,0.06,0.1,0.14,0,10.32,0.45,1125,1400,1175,2.09,3.63,1.88,2.68,4.78,2.68,11.14},5},
{{0.06,0.09,0.07,0.07,0.11,0.12,0.11,0.15,0.08,0.16,0.12,0.12,0.1,0.1,0.07,0.1,0.07,0.09,0.09,0.16,0.14,0.15,0.11,0.13,0.07,0.11,0.06,0.07,0.06,0.12,0,10,0.21,2816.67,1391.67,3625,2.05,3.91,2.03,2.69,5.04,2.69,10.89},5},
{{0.03,0.1,0.09,0.12,0.09,0.15,0.11,0.12,0.08,0.13,0.12,0.07,0.11,0.1,0.1,0.11,0.11,0.08,0.13,0.1,0.17,0.08,0.09,0.14,0.1,0.09,0.1,0.06,0.08,0.11,0,10.15,-0.09,4850,2275,4475,1.84,3.27,1.94,2.46,4.37,2.46,10.93},5},
{{0.05,0.09,0.11,0.1,0.16,0.13,0.11,0.08,0.1,0.09,0.12,0.08,0.09,0.07,0.14,0.09,0.11,0.11,0.11,0.11,0.12,0.12,0.12,0.08,0.11,0.09,0.09,0.07,0.09,0.12,0,10.15,0.33,800,2150,3925,1.67,3.27,1.95,2.32,4.42,2.32,10.94},5},
{{0.05,0.06,0.1,0.09,0.1,0.11,0.17,0.11,0.12,0.11,0.11,0.09,0.11,0.12,0.11,0.11,0.09,0.1,0.1,0.09,0.11,0.1,0.11,0.09,0.11,0.1,0.11,0.09,0.1,0.1,0,9.92,0.39,625,3000,1325,1.79,3.14,1.78,2.29,4.19,2.29,10.57},5},
{{0.3,0.15,0.08,0.09,0.06,0.05,0.1,0.08,0.06,0.04,0.09,0.15,0.12,0.09,0.12,0.08,0.1,0.09,0.07,0.11,0.17,0.12,0.05,0.06,0.09,0.06,0.11,0.13,0.13,0.1,0,9.79,0.17,2725,933.33,4275,2.67,3.35,1.86,3.45,4.47,3.45,10.89},5},
{{0.25,0.18,0.14,0.16,0.09,0.06,0.02,0.03,0.04,0.05,0.09,0.12,0.08,0.12,0.09,0.1,0.11,0.11,0.1,0.09,0.08,0.1,0.07,0.09,0.1,0.08,0.16,0.11,0.14,0.1,0,10.15,0.61,583.33,1710,1650,2.28,3.13,1.58,3.03,4.12,3.03,10.85},5},
{{0.13,0.14,0.14,0.15,0.12,0.09,0.08,0.05,0.08,0.04,0.08,0.12,0.09,0.11,0.12,0.13,0.11,0.1,0.09,0.08,0.06,0.08,0.09,0.09,0.12,0.15,0.11,0.13,0.13,0.07,0,9.97,0.51,600,2725,400,1.82,2.85,1.38,2.52,3.81,2.52,10.46},5},
{{0.09,0.09,0.12,0.11,0.12,0.1,0.1,0.1,0.11,0.09,0.1,0.1,0.08,0.15,0.08,0.07,0.12,0.13,0.1,0.09,0.07,0.09,0.09,0.15,0.1,0.1,0.15,0.1,0.1,0.08,0,10.17,0.31,575,2187.5,2050,1.85,3.11,1.41,2.42,4.07,2.42,10.68},5},
{{0.06,0.05,0.09,0.08,0.09,0.15,0.16,0.1,0.12,0.12,0.09,0.1,0.13,0.08,0.08,0.11,0.11,0.11,0.14,0.07,0.05,0.08,0.12,0.17,0.1,0.1,0.15,0.1,0.09,0.06,0,10.17,0.28,625,2583.33,2275,1.89,3.05,1.32,2.56,3.94,2.56,10.68},5},
{{0.03,0.06,0.09,0.12,0.12,0.07,0.11,0.12,0.15,0.15,0.08,0.1,0.13,0.12,0.09,0.13,0.11,0.09,0.1,0.08,0.05,0.12,0.11,0.1,0.1,0.11,0.1,0.12,0.13,0.09,0,10.01,0.53,3825,1380,4450,1.99,2.91,1.55,2.65,3.98,2.65,10.68},5},
{{0.01,0.03,0.04,0.06,0.05,0.09,0.03,0.07,0.1,0.03,0.02,0.06,0.04,0.08,0.06,0.08,0.04,0.04,0.07,0.01,0.02,0.03,0.06,0.05,0.06,0.04,0.07,0.08,0.07,0.03,0,4.92,0.28,2225,456.25,2050,0.81,2.65,0.64,2.22,6.06,2.22,5.12},5},
{{0.21,0.14,0.1,0.08,0.1,0.12,0.07,0.09,0.06,0.06,0.11,0.12,0.13,0.1,0.1,0.07,0.08,0.1,0.1,0.11,0.04,0.07,0.09,0.11,0.13,0.15,0.12,0.13,0.11,0.08,0,9.93,0.82,2283.33,1437.5,3675,2.47,3.3,2.61,2.96,3.98,2.96,10.93},1},
{{0.11,0.14,0.12,0.09,0.09,0.09,0.06,0.1,0.1,0.13,0.12,0.07,0.14,0.07,0.09,0.11,0.09,0.12,0.11,0.12,0.13,0.12,0.11,0.08,0.06,0.06,0.11,0.08,0.16,0.12,0,10.36,0.23,1237.5,1840,2725,2.66,3.35,3.78,3.23,4.09,3.23,11.86},1},
{{0.06,0.08,0.09,0.1,0.13,0.09,0.14,0.09,0.13,0.11,0.08,0.11,0.09,0.11,0.09,0.13,0.11,0.11,0.1,0.08,0.11,0.13,0.14,0.1,0.11,0.06,0.1,0.11,0.05,0.11,0,10.15,-0.24,1525,971.43,4275,2.58,3.02,3.27,3.27,3.81,3.27,11.48},1},
{{0.07,0.07,0.08,0.1,0.11,0.13,0.11,0.1,0.15,0.1,0.11,0.08,0.08,0.12,0.07,0.13,0.1,0.11,0.13,0.09,0.1,0.09,0.06,0.11,0.1,0.12,0.11,0.1,0.11,0.11,0,10.34,0.38,1900,1335.71,2850,2.45,3.22,3.23,3.01,4.03,3.01,11.6},1},
{{0.03,0.04,0.09,0.08,0.07,0.05,0.09,0.08,0.08,0.08,0.05,0.09,0.05,0.07,0.07,0.09,0.07,0.07,0.04,0.08,0.1,0.08,0.06,0.09,0.07,0.08,0.04,0.06,0.06,0.06,0,6.78,-0.29,2625,650,1200,1.58,2.74,2.12,2.99,5.08,2.99,7.6},1},
{{0.38,0.21,0.08,0.07,0.04,0.04,0.04,0.04,0.05,0.06,0.14,0.08,0.08,0.06,0.07,0.1,0.09,0.13,0.1,0.14,0.08,0.06,0.07,0.04,0.05,0.07,0.13,0.18,0.14,0.18,0,9.9,1.29,300,688.46,2625,2.71,4.51,2.13,3.52,5.95,3.52,11.59},5},
{{0.09,0.1,0.08,0.1,0.12,0.1,0.08,0.11,0.11,0.13,0.11,0.1,0.1,0.09,0.09,0.11,0.08,0.1,0.13,0.12,0.11,0.13,0.08,0.05,0.1,0.13,0.12,0.1,0.1,0.1,0,9.76,0.37,2975,972.22,2350,3,4.02,1.85,3.85,5.28,3.85,11.17},5},
{{0.01,0.04,0.1,0.1,0.13,0.12,0.1,0.14,0.12,0.16,0.1,0.11,0.08,0.13,0.11,0.1,0.1,0.1,0.1,0.09,0.06,0.09,0.14,0.13,0.12,0.13,0.08,0.09,0.11,0.08,0,9.69,0.41,600,3275,1150,3.01,3.38,1.68,3.7,4.42,3.7,10.68},5},
{{0.02,0.05,0.12,0.1,0.11,0.13,0.12,0.11,0.14,0.11,0.1,0.09,0.12,0.1,0.12,0.1,0.08,0.11,0.11,0.08,0.09,0.13,0.11,0.13,0.15,0.07,0.08,0.08,0.08,0.09,0,9.68,0.26,3700,430,3750,2.9,3.39,1.84,3.68,4.44,3.68,10.8},5},
{{0.03,0.08,0.12,0.14,0.12,0.09,0.12,0.14,0.09,0.08,0.08,0.11,0.09,0.13,0.12,0.1,0.14,0.08,0.09,0.08,0.09,0.1,0.12,0.17,0.11,0.12,0.09,0.07,0.08,0.07,0,9.76,0.19,2525,1241.67,3975,2.46,3.06,1.65,3.09,4.05,3.09,10.56},5},
{{0.01,0.04,0.04,0.04,0.03,0.05,0.06,0.02,0.02,0.01,0.01,0.04,0.05,0.05,0.03,0.03,0.04,0.02,0.02,0.03,0.1,0.02,0.02,0.03,0.02,0.03,0.03,0.03,0.02,0.01,0,2.81,-0.27,200,600,566.67,0.54,2.03,0.65,2.27,7.83,2.27,3.02},5},
{{0.09,0.06,0.11,0.14,0.15,0.11,0.11,0.1,0.12,0.03,0.07,0.18,0.12,0.09,0.1,0.12,0.06,0.06,0.13,0.09,0.09,0.06,0.1,0.06,0.09,0.1,0.09,0.15,0.22,0.07,0,9.91,-0.44,2725,1310,1675,3.57,3.08,3.03,4.36,3.96,4.36,11.48},2},
{{0.1,0.08,0.1,0.12,0.1,0.09,0.09,0.11,0.13,0.11,0.09,0.12,0.08,0.11,0.16,0.14,0.07,0.08,0.08,0.09,0.06,0.1,0.09,0.15,0.12,0.09,0.08,0.13,0.1,0.09,0,9.81,-0.83,1316.67,783.33,2925,4.39,2.99,2.92,5.3,4.14,5.3,11.89},2},
{{0.1,0.09,0.08,0.09,0.16,0.1,0.11,0.09,0.11,0.09,0.1,0.1,0.09,0.12,0.1,0.11,0.09,0.12,0.1,0.08,0.09,0.11,0.1,0.11,0.1,0.11,0.12,0.09,0.1,0.09,0,9.98,-1.09,1770,1162.5,1130,4.24,3.07,2.92,5.12,3.98,5.12,12.02},2},
{{0.08,0.11,0.09,0.12,0.08,0.12,0.11,0.09,0.12,0.1,0.09,0.13,0.1,0.1,0.11,0.09,0.08,0.13,0.08,0.11,0.08,0.14,0.14,0.05,0.12,0.11,0.08,0.11,0.07,0.12,0,10.06,-1.07,1450,1300,2666.67,4.38,3.18,3.16,5.38,4.02,5.38,12.26},2},
{{0.09,0.1,0.11,0.1,0.1,0.12,0.11,0.1,0.09,0.11,0.09,0.1,0.11,0.1,0.11,0.07,0.15,0.11,0.1,0.08,0.09,0.21,0.07,0.05,0.09,0.11,0.12,0.08,0.11,0.1,0,10.07,-1.09,1250,1092.86,1816.67,4.07,3,3.18,4.94,3.83,4.94,12.1},2},
{{0.12,0.09,0.1,0.1,0.08,0.1,0.12,0.09,0.11,0.11,0.12,0.11,0.08,0.08,0.12,0.07,0.09,0.12,0.13,0.09,0.08,0.18,0.11,0.07,0.06,0.1,0.11,0.11,0.1,0.1,0,10.19,-1.02,1085.71,961.11,1235.71,4.45,3.37,3.22,5.45,4.22,5.45,12.46},2},
{{0.12,0.1,0.1,0.11,0.08,0.06,0.08,0.12,0.15,0.11,0.12,0.07,0.12,0.08,0.08,0.11,0.12,0.1,0.13,0.09,0.14,0.12,0.09,0.09,0.11,0.08,0.09,0.08,0.11,0.11,0,10.25,-1.01,1050,1062.5,2650,4.55,3.33,3.54,5.47,4.24,5.47,12.66},2},
{{0.11,0.11,0.1,0.1,0.06,0.1,0.08,0.09,0.14,0.13,0.12,0.1,0.1,0.04,0.11,0.09,0.16,0.09,0.09,0.12,0.15,0.08,0.13,0.12,0.04,0.07,0.12,0.12,0.08,0.12,0,10.23,-0.99,2200,711.54,2933.33,4.53,3.34,3.38,5.45,4.26,5.45,12.54},2},
{{0.12,0.11,0.08,0.1,0.06,0.09,0.11,0.13,0.13,0.1,0.12,0.08,0.12,0.09,0.09,0.06,0.14,0.1,0.09,0.12,0.12,0.13,0.07,0.1,0.05,0.15,0.09,0.13,0.07,0.12,0,10.17,-0.91,1466.67,915,1740,4.48,3.4,3.35,5.33,4.28,5.33,12.49},2},
{{0.14,0.1,0.1,0.08,0.1,0.08,0.1,0.11,0.09,0.12,0.12,0.09,0.13,0.06,0.08,0.09,0.09,0.11,0.13,0.12,0.13,0.11,0.11,0.09,0.09,0.09,0.08,0.13,0.08,0.11,0,10.2,-1.04,1012.5,870,2900,4.59,3.47,3.41,5.58,4.31,5.58,12.63},2},
{{0.15,0.12,0.11,0.07,0.07,0.07,0.11,0.13,0.09,0.11,0.12,0.11,0.11,0.09,0.04,0.1,0.11,0.13,0.11,0.1,0.13,0.13,0.11,0.08,0.1,0.1,0.11,0.08,0.08,0.12,0,10.14,-1.23,2475,1221.43,3750,4.56,3.45,3.27,5.43,4.29,5.43,12.49},2},
{{0.15,0.1,0.1,0.08,0.07,0.08,0.12,0.12,0.07,0.13,0.14,0.09,0.11,0.08,0.07,0.1,0.11,0.07,0.11,0.15,0.16,0.14,0.09,0.07,0.06,0.1,0.1,0.1,0.09,0.11,0,10.26,-1.06,1360,684.62,2483.33,4.74,3.72,3.68,5.77,4.71,5.77,12.9},2},
{{0.14,0.07,0.1,0.08,0.09,0.09,0.08,0.16,0.1,0.12,0.12,0.08,0.13,0.06,0.1,0.1,0.13,0.05,0.12,0.14,0.16,0.11,0.1,0.06,0.06,0.1,0.1,0.13,0.1,0.11,0,10.29,-1.1,2183.33,720.83,1625,4.69,3.54,3.52,5.6,4.51,5.6,12.81},2},
{{0.08,0.12,0.14,0.09,0.1,0.11,0.15,0.07,0.08,0.09,0.06,0.13,0.08,0.1,0.1,0.16,0.09,0.12,0.1,0.08,0.09,0.09,0.12,0.11,0.13,0.11,0.08,0.09,0.13,0.08,0,10.22,-0.99,1380,1185.71,1125,3.93,2.81,3.04,4.81,3.7,4.81,12.05},2},
{{0.08,0.16,0.09,0.09,0.09,0.11,0.1,0.09,0.12,0.1,0.1,0.11,0.1,0.12,0.08,0.12,0.1,0.12,0.09,0.11,0.1,0.08,0.09,0.12,0.13,0.1,0.07,0.15,0.07,0.11,0,10.18,-0.88,2187.5,703.85,2266.67,4.25,3.17,3.09,5.12,4.03,5.12,12.22},2},
{{0.13,0.09,0.1,0.08,0.1,0.09,0.1,0.09,0.11,0.13,0.13,0.08,0.12,0.1,0.08,0.1,0.12,0.09,0.07,0.14,0.13,0.09,0.09,0.1,0.11,0.1,0.1,0.1,0.08,0.12,0,10.12,-1,1264.29,770,1340,4.6,3.4,3.37,5.45,4.4,5.45,12.55},2},
{{0.12,0.09,0.09,0.12,0.07,0.12,0.11,0.09,0.12,0.1,0.12,0.08,0.12,0.11,0.08,0.09,0.08,0.13,0.09,0.13,0.12,0.09,0.1,0.09,0.15,0.11,0.1,0.07,0.1,0.1,0,10.21,-1.08,1650,715,4425,4.52,3.5,3.1,5.51,4.47,5.51,12.52},2},
{{0.11,0.15,0.1,0.07,0.09,0.11,0.08,0.09,0.09,0.13,0.1,0.1,0.1,0.09,0.1,0.11,0.09,0.11,0.13,0.09,0.14,0.08,0.1,0.1,0.06,0.1,0.13,0.11,0.1,0.09,0,10.24,-1.04,1750,966.67,3250,4.35,3.24,3.18,5.16,4.09,5.16,12.36},2},
{{0.11,0.12,0.12,0.08,0.09,0.09,0.09,0.1,0.11,0.12,0.13,0.08,0.12,0.11,0.07,0.11,0.09,0.09,0.11,0.11,0.1,0.11,0.1,0.07,0.11,0.1,0.13,0.11,0.1,0.1,0,10.09,-0.8,1720,791.67,1675,4.54,3.37,3.16,5.47,4.38,5.47,12.35},2},
{{0.12,0.14,0.06,0.07,0.08,0.1,0.12,0.1,0.12,0.11,0.12,0.08,0.16,0.08,0.06,0.1,0.13,0.09,0.08,0.13,0.14,0.08,0.11,0.1,0.12,0.09,0.08,0.11,0.09,0.11,0,10.19,-1.12,1937.5,930,2950,4.6,3.36,3.31,5.39,4.28,5.39,12.46},2},
{{0.1,0.09,0.14,0.1,0.1,0.1,0.09,0.09,0.11,0.1,0.09,0.09,0.08,0.14,0.07,0.13,0.1,0.14,0.1,0.09,0.08,0.12,0.11,0.1,0.13,0.07,0.07,0.13,0.12,0.1,0,10.26,-0.91,1366.67,810,2583.33,4.16,3.01,3.15,5.04,3.86,5.04,12.2},2},
{{0.09,0.09,0.13,0.07,0.12,0.07,0.11,0.12,0.13,0.08,0.1,0.12,0.09,0.1,0.11,0.11,0.06,0.12,0.12,0.09,0.1,0.11,0.13,0.1,0.06,0.09,0.15,0.09,0.11,0.09,0,10.15,-0.96,1441.67,758.33,2250,4.3,3.25,3.07,5.17,4.14,5.17,12.2},2},
{{0.09,0.1,0.15,0.1,0.09,0.08,0.13,0.09,0.1,0.11,0.08,0.09,0.11,0.1,0.12,0.12,0.1,0.1,0.1,0.1,0.08,0.12,0.08,0.1,0.11,0.14,0.08,0.11,0.11,0.1,0,10.29,-0.85,1666.67,1143.75,2316.67,4.06,3.01,3.19,5.03,3.94,5.03,12.28},2},
{{0.08,0.11,0.08,0.12,0.16,0.13,0.08,0.11,0.08,0.09,0.11,0.09,0.06,0.12,0.11,0.09,0.12,0.1,0.12,0.11,0.09,0.11,0.11,0.13,0.11,0.07,0.04,0.17,0.09,0.11,0,10.32,-0.93,950,868.18,1112.5,4.01,3.21,3.24,4.92,4.13,4.92,12.3},2},
{{0.08,0.08,0.1,0.14,0.14,0.14,0.1,0.06,0.08,0.1,0.05,0.16,0.07,0.08,0.15,0.12,0.12,0.11,0.09,0.08,0.06,0.06,0.12,0.12,0.12,0.12,0.12,0.11,0.1,0.09,0,10.12,-0.79,1350,845.45,1860,3.84,2.74,2.83,4.72,3.6,4.72,11.84},2},
{{0.06,0.11,0.12,0.13,0.13,0.12,0.11,0.07,0.09,0.08,0.06,0.14,0.1,0.09,0.17,0.12,0.06,0.1,0.12,0.07,0.06,0.05,0.12,0.11,0.15,0.14,0.1,0.07,0.14,0.07,0,10.14,-0.7,1600,1292.86,2175,3.83,2.76,2.73,4.73,3.55,4.73,11.76},2},
{{0.09,0.1,0.1,0.12,0.12,0.13,0.12,0.08,0.05,0.11,0.09,0.11,0.07,0.14,0.1,0.11,0.11,0.09,0.12,0.09,0.05,0.09,0.12,0.12,0.11,0.1,0.11,0.1,0.13,0.09,0,10.26,-0.72,1700,1118.75,2825,3.93,3.04,2.97,4.81,3.89,4.81,12.04},2},
{{0.06,0.08,0.12,0.1,0.16,0.09,0.13,0.08,0.1,0.1,0.07,0.12,0.09,0.14,0.15,0.11,0.08,0.13,0.06,0.09,0.09,0.06,0.08,0.15,0.12,0.13,0.11,0.1,0.08,0.1,0,9.92,-0.95,1316.67,720.83,3375,3.99,2.83,2.76,4.97,3.8,4.97,11.81},2},
{{0.06,0.11,0.1,0.11,0.13,0.15,0.1,0.08,0.1,0.08,0.12,0.07,0.08,0.14,0.14,0.12,0.08,0.09,0.09,0.1,0.06,0.05,0.12,0.13,0.12,0.11,0.15,0.06,0.09,0.13,0,9.97,-0.51,1712.5,815,2062.5,3.96,3.01,3.01,4.85,4.09,4.85,11.89},2},
{{0.04,0.08,0.07,0.13,0.08,0.12,0.07,0.11,0.05,0.08,0.08,0.08,0.05,0.08,0.12,0.08,0.09,0.08,0.08,0.08,0.06,0.04,0.07,0.09,0.11,0.1,0.12,0.07,0.08,0.09,0,8.25,-0.5,1083.33,943.75,1133.33,3.16,2.77,2.28,4.83,4.34,4.83,9.66},2},
{{0.04,0.12,0.14,0.09,0.15,0.12,0.12,0.12,0.07,0.03,0.03,0.09,0.12,0.12,0.08,0.12,0.13,0.13,0.09,0.03,0.09,0.09,0.14,0.12,0.11,0.1,0.09,0.11,0.11,0.06,0,6.77,-2.59,567.65,402.08,3066.67,6.79,7.22,3.81,9.09,8.26,9.09,12.48},0},
{{0.1,0.12,0.07,0.13,0.11,0.1,0.07,0.1,0.13,0.02,0.09,0.12,0.13,0.1,0.11,0.08,0.11,0.08,0.1,0.02,0.08,0.1,0.09,0.12,0.1,0.12,0.12,0.09,0.11,0.09,0,5.12,-1.96,477.5,459.52,3825,8.02,7.8,4.01,10.4,9,10.4,13.19},0},
{{0.12,0.08,0.1,0.12,0.11,0.1,0.11,0.06,0.12,0.03,0.08,0.13,0.1,0.09,0.13,0.1,0.06,0.11,0.13,0.02,0.15,0.1,0.11,0.08,0.11,0.06,0.1,0.11,0.09,0.11,0,5.87,-2.88,421.74,421.74,1900,7.93,8.15,5.11,10.27,9.28,10.27,14},0},
{{0.13,0.1,0.1,0.07,0.06,0.09,0.1,0.11,0.1,0.05,0.17,0.09,0.09,0.1,0.07,0.12,0.1,0.09,0.08,0.03,0.08,0.12,0.06,0.09,0.1,0.12,0.13,0.09,0.1,0.12,0,4.58,-1.47,393.75,497.37,3016.67,9.15,8.11,4.37,11.37,9.51,11.37,14.58},0},
{{0.06,0.04,0.05,0.03,0.02,0.05,0.05,0.06,0.04,0.01,0.09,0.02,0.01,0.02,0.07,0.04,0.05,0.04,0.05,0.03,0.05,0.04,0.04,0.05,0.03,0.03,0.02,0.05,0.05,0.07,0,2.5,-0.54,360,406.25,983.33,3.88,3.76,2.21,11.07,10.55,11.07,6.66},0},
{{0.08,0.11,0.13,0.1,0.11,0.1,0.1,0.1,0.13,0.07,0.1,0.09,0.11,0.09,0.09,0.08,0.12,0.12,0.11,0.1,0.07,0.13,0.13,0.12,0.12,0.14,0.07,0.11,0.08,0.06,0,9.41,-2.18,925,1075,2600,4.05,2.83,2.2,4.96,3.56,4.96,11.14},1},
{{0.11,0.1,0.11,0.1,0.14,0.08,0.11,0.11,0.1,0.07,0.11,0.09,0.08,0.11,0.09,0.14,0.12,0.07,0.08,0.12,0.12,0.05,0.11,0.15,0.1,0.09,0.09,0.13,0.12,0.06,0,9.22,-1.89,2525,3125,3150,4.29,2.92,2.57,5.31,3.91,5.31,11.27},1},
{{0.14,0.1,0.11,0.13,0.1,0.12,0.09,0.07,0.09,0.08,0.12,0.09,0.12,0.1,0.09,0.12,0.08,0.07,0.1,0.12,0.12,0.11,0.08,0.08,0.08,0.1,0.13,0.13,0.14,0.05,0,9.19,-1.96,3150,2087.5,2966.67,4.69,3.09,2.58,5.65,4.08,5.65,11.44},1},
{{0.11,0.11,0.09,0.1,0.08,0.09,0.11,0.13,0.07,0.11,0.09,0.16,0.08,0.07,0.11,0.1,0.09,0.11,0.11,0.08,0.1,0.08,0.08,0.09,0.08,0.09,0.15,0.07,0.09,0.17,0,9.2,-0.97,1070,1400,1225,4.4,3,3.17,5.45,3.89,5.45,11.54},1},
{{0.02,0.04,0.03,0.04,0.04,0.05,0.05,0.07,0.08,0.14,0.04,0.02,0.08,0.09,0.07,0.04,0.05,0.08,0.07,0.04,0.06,0.09,0.05,0.05,0.07,0.04,0.04,0.02,0.03,0.12,0,5.15,-0.77,633.33,933.33,200,1.67,2.52,1.93,3.92,5.39,3.92,6.04},1},
{{0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.06,0.05,0.05,0.05,0.06,0.05,0.06,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.06,0,5.01,-0.92,1900,1350,2050,2.17,2.75,1.18,4.93,5.7,4.93,5.9},5},
{{0.07,0.12,0.13,0.13,0.11,0.1,0.1,0.08,0.11,0.08,0.1,0.11,0.09,0.12,0.1,0.1,0.07,0.12,0.1,0.12,0.09,0.13,0.09,0.12,0.12,0.09,0.08,0.09,0.11,0.11,0,9.85,-1.98,3675,1143.75,2250,3.07,2.88,2.96,3.81,3.89,3.81,11.43},1},
{{0.1,0.07,0.1,0.09,0.13,0.1,0.11,0.11,0.12,0.1,0.08,0.1,0.1,0.09,0.09,0.13,0.11,0.13,0.12,0.08,0.1,0.09,0.12,0.05,0.08,0.13,0.11,0.14,0.1,0.1,0,9.99,-1.54,3475,1193.75,850,3.08,2.65,3.07,4.03,3.69,4.03,11.68},1},
{{0.13,0.1,0.06,0.09,0.08,0.11,0.13,0.11,0.11,0.09,0.11,0.13,0.09,0.09,0.08,0.12,0.14,0.08,0.09,0.09,0.11,0.07,0.12,0.12,0.11,0.08,0.11,0.09,0.12,0.09,0,9.76,-1.89,2975,733.33,2700,3.49,2.86,3.08,4.67,3.85,4.67,11.68},1},
{{0.11,0.13,0.12,0.11,0.09,0.07,0.08,0.09,0.08,0.14,0.13,0.07,0.13,0.09,0.1,0.09,0.1,0.09,0.09,0.13,0.11,0.12,0.08,0.13,0.09,0.12,0.08,0.08,0.08,0.13,0,9.88,-2,2900,981.25,3150,3.88,3.16,3.44,4.85,4.26,4.85,12.1},1},
{{0,0,0,0,0.01,0.01,0.01,0.02,0.02,0,0,0,0.01,0.02,0.02,0.01,0.02,0,0.01,0,0,0,0,0,0.01,0.01,0.02,0.01,0.02,0.01,0,0.65,0.04,175,200,250,0.09,0.61,0.07,1.74,9.44,1.74,0.67},1},
{{0.03,0.08,0.05,0.08,0.04,0.09,0.13,0.12,0.17,0.22,0.09,0.07,0.07,0.1,0.1,0.12,0.12,0.13,0.09,0.14,0.1,0.1,0.09,0.09,0.13,0.08,0.12,0.11,0.14,0.06,0,9.89,-1.48,700,880,3250,2.01,2.53,1.82,2.65,3.58,2.65,10.67},5},
{{0.06,0.07,0.07,0.08,0.11,0.12,0.12,0.12,0.13,0.13,0.09,0.07,0.08,0.1,0.1,0.11,0.1,0.14,0.09,0.14,0.13,0.13,0.06,0.13,0.11,0.09,0.11,0.12,0.11,0.04,0,9.88,-1.87,2350,1257.14,3000,2.06,2.51,2,2.64,3.55,2.64,10.77},5},
{{0.11,0.13,0.1,0.08,0.11,0.07,0.14,0.08,0.11,0.09,0.07,0.08,0.11,0.13,0.1,0.07,0.12,0.1,0.14,0.11,0.12,0.12,0.11,0.09,0.12,0.11,0.09,0.13,0.12,0.02,0,9.74,-1.91,1212.5,1214.29,4225,2.57,2.35,1.97,3.18,3.29,3.18,10.76},5},
{{0.1,0.07,0.12,0.1,0.15,0.12,0.09,0.1,0.08,0.1,0.06,0.09,0.11,0.08,0.13,0.1,0.1,0.13,0.13,0.09,0.1,0.1,0.12,0.1,0.08,0.12,0.12,0.14,0.11,0.04,0,9.8,-1.64,1583.33,2033.33,1875,2.49,2.26,1.87,3.04,3.2,3.04,10.71},5},
{{0.12,0.09,0.12,0.1,0.12,0.13,0.09,0.11,0.09,0.06,0.06,0.1,0.13,0.11,0.09,0.13,0.14,0.07,0.09,0.1,0.09,0.12,0.11,0.13,0.11,0.15,0.09,0.09,0.06,0.07,0,9.64,-1.74,2775,838.89,2600,2.61,2.11,1.79,3.33,3,3.33,10.64},5},
{{0.21,0.17,0.12,0.09,0.1,0.07,0.07,0.08,0.09,0.03,0.12,0.18,0.13,0.12,0.07,0.09,0.08,0.07,0.1,0.05,0.08,0.06,0.13,0.09,0.07,0.07,0.09,0.1,0.09,0.24,0,8.55,-0.04,2450,2533.33,450,3.39,2.69,2.85,4.16,3.57,4.16,10.49},5},
{{0,0.02,0.04,0.07,0.03,0,0.01,0,0,0.01,0.13,0.04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.16,0,0.32,1.39,2450,600,233.33,0.49,0.31,1.16,3.14,2.24,3.14,1.54},5},
{{0.01,0.01,0.01,0.03,0.1,0.32,0.37,0.17,0,0,0,0.03,0.23,0.38,0.17,0,0.07,0.12,0.01,0,0,0,0.17,0.45,0.32,0.03,0,0.03,0.02,0,0,-0.73,-6.87,2450,600,233.33,7.13,0.07,0.08,7.13,0.14,7.13,9.92},3},
{{0.11,0.04,0.03,0.07,0.15,0.2,0.21,0.22,0,0,0,0.37,0.34,0.07,0.01,0,0.01,0.2,0.01,0,0,0,0.16,0.13,0.15,0.11,0.11,0.11,0.25,0,0,-0.85,-6.75,2450,600,233.33,7.18,0.15,0.13,7.18,0.19,7.18,9.9},3},
{{0.12,0.08,0.07,0.14,0.32,0.21,0.06,0.02,0,0,0,0.01,0.01,0.09,0.14,0,0.29,0.45,0.02,0,0,0,0.03,0.03,0.16,0.16,0.17,0.22,0.25,0,0,-0.64,-6.69,2450,600,233.33,7.29,0.05,0.08,7.29,0.08,7.29,9.91},3},
{{0.04,0.03,0.3,0.33,0.26,0.01,0.03,0.01,0,0,0,0.01,0.02,0.04,0.17,0,0.55,0.23,0,0,0,0,0,0.02,0.03,0.01,0.1,0.35,0.5,0,0,-0.65,-6.65,2450,600,233.33,7.31,0.03,0.04,7.31,0.05,7.31,9.9},3},
{{0.03,0.01,0.01,0.01,0.01,0.01,0.02,0.12,0.24,0.58,0,0.01,0.03,0.03,0.04,0,0.03,0.11,0.47,0.28,0.56,0.27,0.11,0.02,0.01,0,0.01,0.01,0.03,0,0,-0.32,-7.86,2450,2366.67,233.33,6.22,0.16,0.32,6.24,0.22,6.24,10.05},3},
{{0.24,0.11,0.03,0.01,0.03,0.02,0.02,0.09,0.42,0.06,0.38,0.12,0.01,0.01,0,0,0,0.01,0.09,0.36,0.04,0.38,0.09,0,0.01,0.01,0.01,0.01,0.11,0.38,0,-1.96,-6.43,2450,2366.67,233.33,6.87,1.88,1.31,6.95,1.95,6.95,9.95},3},
{{0.06,0.12,0.05,0.01,0.01,0,0.01,0,0,0,0.25,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25,0,-0.98,-1.29,2450,2366.67,233.33,1.85,0.74,0.97,7.41,2.95,7.41,2.46},3},
{{0.2,0.07,0.07,0.12,0.08,0.1,0.13,0.05,0.12,0.07,0.03,0.09,0.07,0.06,0.03,0.07,0.19,0.26,0.07,0.14,0.11,0.16,0.12,0.1,0.11,0.09,0.08,0.11,0.08,0.07,0,3.12,-6.36,860,675,575,8.81,5.16,3.7,10.53,6.43,10.53,13.94},2},
{{0.04,0.1,0.1,0.15,0.12,0.06,0.18,0.1,0.07,0.08,0.07,0.13,0.13,0.1,0.09,0.08,0.18,0.1,0.1,0.05,0.12,0.08,0.09,0.14,0.11,0.13,0.1,0.11,0.07,0.07,0,0.07,-5.96,1150,2400,2766.67,9.81,5.21,3.53,11.17,6.39,11.17,14.04},2},
{{0.02,0.11,0.13,0.14,0.12,0.1,0.13,0.13,0.05,0.09,0.07,0.15,0.08,0.12,0.1,0.12,0.09,0.15,0.13,0.02,0.09,0.09,0.11,0.13,0.1,0.14,0.16,0.08,0.09,0.03,0,0.1,-6.04,1566.67,2200,2000,9.5,5.08,3.06,10.89,6.32,10.89,13.64},2},
{{0.07,0.13,0.11,0.09,0.13,0.12,0.11,0.09,0.08,0.1,0.1,0.14,0.08,0.11,0.09,0.12,0.1,0.1,0.12,0.06,0.12,0.08,0.13,0.12,0.09,0.11,0.11,0.1,0.08,0.09,0,-0.1,-5.88,1150,2600,3375,9.28,5.58,3.74,10.83,6.94,10.83,13.86},2},
{{0.09,0.1,0.14,0.11,0.06,0.08,0.13,0.11,0.1,0.1,0.08,0.11,0.12,0.09,0.14,0.06,0.1,0.08,0.11,0.13,0.15,0.05,0.05,0.07,0.15,0.12,0.14,0.08,0.08,0.14,0,0.73,-5.2,754.17,1575,2875,9.25,5.94,4.15,10.93,7.3,10.93,14.1},2},
{{0.07,0.09,0.16,0.12,0.08,0.09,0.14,0.11,0.1,0.06,0.1,0.08,0.09,0.05,0.07,0.14,0.19,0.1,0.12,0.08,0.09,0.12,0.11,0.16,0.12,0.08,0.11,0.11,0.08,0.06,0,0.75,-6.1,1870,3066.67,3200,9.24,5.37,3.17,10.72,6.83,10.72,13.76},2},
{{0.07,0.11,0.14,0.09,0.12,0.11,0.11,0.1,0.12,0.06,0.09,0.09,0.12,0.07,0.09,0.12,0.14,0.1,0.1,0.11,0.1,0.1,0.16,0.11,0.12,0.13,0.1,0.07,0.07,0.05,0,0.61,-6.17,1200,3050,2225,9.25,5.65,3.26,10.75,7.06,10.75,14.01},2},
{{0.07,0.1,0.15,0.09,0.13,0.1,0.11,0.1,0.1,0.07,0.1,0.14,0.08,0.09,0.09,0.11,0.1,0.06,0.11,0.13,0.09,0.12,0.09,0.14,0.07,0.13,0.09,0.1,0.07,0.13,0,0.36,-5.24,685.71,4275,1500,9.33,5.92,3.92,10.95,7.27,10.95,14.08},2},
{{0.09,0.05,0.15,0.14,0.11,0.1,0.11,0.08,0.09,0.08,0.1,0.13,0.12,0.12,0.1,0.06,0.11,0.07,0.09,0.12,0.1,0.06,0.13,0.08,0.09,0.1,0.1,0.17,0.08,0.11,0,-0.14,-5.07,713.64,1666.67,2275,9.5,5.83,3.93,11.02,7.23,11.02,14.05},2},
{{0.09,0.09,0.1,0.08,0.12,0.09,0.13,0.12,0.1,0.1,0.15,0.08,0.1,0.13,0.1,0.09,0.08,0.09,0.11,0.11,0.1,0.07,0.11,0.11,0.12,0.07,0.11,0.11,0.11,0.11,0,-0.04,-4.93,1391.67,1016.67,3475,9.89,5.94,4.17,11.37,7.39,11.37,14.45},2},
{{0.09,0.12,0.1,0.09,0.08,0.09,0.11,0.09,0.16,0.08,0.13,0.1,0.12,0.1,0.09,0.08,0.08,0.12,0.13,0.08,0.1,0.14,0.07,0.09,0.07,0.13,0.12,0.11,0.08,0.11,0,-0.02,-5.35,1566.67,1500,1025,9.88,6.01,4.03,11.49,7.38,11.49,14.58},2},
{{0.1,0.09,0.13,0.06,0.1,0.09,0.11,0.09,0.13,0.11,0.1,0.13,0.09,0.13,0.09,0.09,0.08,0.07,0.11,0.13,0.13,0.08,0.09,0.09,0.11,0.08,0.1,0.08,0.13,0.13,0,0.26,-5.04,922.22,2666.67,1225,9.93,6.09,4.29,11.64,7.49,11.64,14.59},2},
{{0.12,0.08,0.12,0.09,0.05,0.12,0.16,0.07,0.11,0.09,0.1,0.09,0.09,0.08,0.18,0.09,0.08,0.11,0.1,0.1,0.11,0.1,0.12,0.07,0.09,0.08,0.12,0.11,0.12,0.11,0,0.3,-5.33,1307.14,2237.5,3200,9.4,5.57,4.14,11.05,7.09,11.05,14},2},
{{0.09,0.11,0.07,0.15,0.06,0.13,0.09,0.07,0.09,0.15,0.11,0.11,0.12,0.1,0.11,0.1,0.07,0.07,0.08,0.15,0.1,0.11,0.06,0.1,0.09,0.05,0.16,0.14,0.1,0.11,0,0.21,-4.96,654.17,1925,1475,9.9,6.02,4.16,11.45,7.52,11.45,14.53},2},
{{0.1,0.12,0.07,0.15,0.1,0.1,0.05,0.08,0.11,0.15,0.12,0.11,0.11,0.06,0.14,0.11,0.08,0.05,0.09,0.15,0.11,0.1,0.08,0.1,0.05,0.13,0.13,0.13,0.06,0.12,0,0.13,-5.08,715.38,1883.33,4550,9.67,6.05,4.22,11.35,7.58,11.35,14.55},2},
{{0.11,0.1,0.11,0.09,0.09,0.08,0.09,0.1,0.1,0.15,0.1,0.12,0.14,0.08,0.15,0.05,0.1,0.07,0.09,0.14,0.11,0.09,0.1,0.1,0.07,0.12,0.1,0.13,0.09,0.1,0,0.18,-5.17,555.88,2450,2950,9.91,6.03,4.27,11.67,7.46,11.67,14.81},2},
{{0.1,0.07,0.12,0.12,0.08,0.12,0.08,0.1,0.09,0.14,0.07,0.15,0.1,0.07,0.13,0.09,0.08,0.11,0.12,0.1,0.12,0.08,0.09,0.12,0.09,0.08,0.12,0.12,0.09,0.12,0,0.53,-5.31,1038.89,975,3425,9.77,5.85,4.18,11.41,7.21,11.41,14.33},2},
{{0.09,0.13,0.1,0.05,0.05,0.12,0.14,0.09,0.1,0.1,0.16,0.06,0.11,0.13,0.1,0.07,0.08,0.06,0.13,0.13,0.11,0.07,0.09,0.08,0.09,0.1,0.11,0.12,0.11,0.15,0,0.02,-4.71,1005.56,1475,1025,10,6.17,4.27,11.7,7.65,11.7,14.65},2},
{{0.08,0.13,0.1,0.08,0.1,0.07,0.11,0.12,0.13,0.1,0.13,0.1,0.14,0.09,0.1,0.12,0.05,0.08,0.1,0.12,0.13,0.09,0.04,0.08,0.09,0.08,0.13,0.1,0.14,0.15,0,-0.09,-4.41,795.45,3475,2316.67,9.96,5.72,4.55,11.61,7.12,11.61,14.29},2},
{{0.08,0.12,0.09,0.1,0.07,0.12,0.1,0.15,0.03,0.15,0.09,0.11,0.13,0.12,0.08,0.1,0.1,0.06,0.09,0.13,0.13,0.07,0.05,0.09,0.11,0.09,0.1,0.14,0.12,0.13,0,0.32,-4.7,730.77,3100,2575,9.94,5.82,4.56,11.55,7.2,11.55,14.61},2},
{{0.16,0.06,0.07,0.1,0.09,0.08,0.12,0.11,0.08,0.12,0.13,0.07,0.15,0.08,0.08,0.13,0.06,0.08,0.09,0.15,0.08,0.1,0.07,0.11,0.1,0.1,0.08,0.08,0.17,0.14,0,0.5,-4.4,685.71,1200,1025,9.87,6.13,4.34,11.6,7.56,11.6,14.43},2},
{{0.12,0.07,0.06,0.16,0.1,0.07,0.07,0.1,0.14,0.12,0.09,0.13,0.11,0.05,0.12,0.15,0.09,0.08,0.06,0.15,0.11,0.09,0.11,0.06,0.11,0.07,0.11,0.14,0.12,0.09,0,0.26,-5.05,850,1525,3000,10.01,5.82,4.3,11.65,7.41,11.65,14.78},2},
{{0.13,0.08,0.07,0.12,0.11,0.1,0.08,0.09,0.12,0.13,0.1,0.1,0.13,0.07,0.13,0.12,0.08,0.07,0.08,0.14,0.11,0.08,0.05,0.11,0.1,0.11,0.12,0.09,0.12,0.13,0,0.33,-4.64,800,1525,3575,9.84,5.87,4.26,11.46,7.47,11.46,14.48},2},
{{0.12,0.12,0.1,0.1,0.09,0.11,0.1,0.09,0.07,0.12,0.1,0.1,0.08,0.1,0.11,0.11,0.12,0.07,0.1,0.14,0.09,0.11,0.06,0.1,0.12,0.08,0.1,0.16,0.08,0.12,0,0.75,-5.05,940,2550,2025,9.17,5.72,3.92,10.91,7.16,10.91,13.84},2},
{{0.1,0.1,0.11,0.07,0.12,0.11,0.1,0.1,0.1,0.11,0.09,0.15,0.11,0.08,0.1,0.11,0.1,0.08,0.06,0.14,0.08,0.11,0.17,0.09,0.08,0.06,0.12,0.09,0.11,0.12,0,0.12,-5.12,1083.33,2025,1033.33,9.63,5.76,4.04,11.29,7.17,11.29,14.2},2},
{{0.11,0.07,0.12,0.11,0.15,0.09,0.1,0.11,0.08,0.09,0.13,0.09,0.09,0.09,0.12,0.11,0.1,0.07,0.14,0.1,0.05,0.14,0.09,0.14,0.09,0.11,0.13,0.11,0.06,0.11,0,0.3,-5.26,1156.25,1525,3300,9.21,5.81,3.51,10.74,7.25,10.74,13.85},2},
{{0.09,0.11,0.07,0.13,0.07,0.1,0.11,0.12,0.13,0.09,0.08,0.11,0.12,0.09,0.09,0.11,0.13,0.11,0.08,0.11,0.13,0.11,0.08,0.14,0.1,0.06,0.12,0.1,0.08,0.1,0,0.46,-5.71,850,1762.5,1550,9.85,5.57,3.99,11.41,6.99,11.41,14.56},2},
{{0.1,0.1,0.09,0.13,0.13,0.09,0.11,0.11,0.11,0.06,0.11,0.08,0.12,0.12,0.11,0.08,0.07,0.11,0.1,0.12,0.09,0.1,0.13,0.09,0.14,0.1,0.12,0.06,0.07,0.12,0,0.3,-5.29,875,2050,1300,9.22,5.81,3.78,10.68,7.31,10.68,14.01},2},
{{0.1,0.08,0.09,0.11,0.1,0.11,0.1,0.05,0.16,0.11,0.09,0.13,0.11,0.08,0.09,0.13,0.09,0.07,0.12,0.11,0.09,0.1,0.1,0.1,0.09,0.16,0.08,0.1,0.09,0.1,0,0.19,-5.14,781.82,2316.67,1975,9.99,5.84,3.9,11.57,7.27,11.57,14.59},2},
{{0.1,0.09,0.11,0.13,0.11,0.1,0.08,0.09,0.08,0.14,0.12,0.08,0.11,0.1,0.14,0.07,0.1,0.07,0.1,0.14,0.11,0.11,0.06,0.1,0.1,0.09,0.13,0.11,0.06,0.16,0,0.39,-5.04,650,4575,3050,9.42,5.88,4.31,11.07,7.33,11.07,14.24},2},
{{0.1,0.12,0.1,0.09,0.1,0.1,0.1,0.14,0.09,0.09,0.11,0.13,0.1,0.07,0.08,0.12,0.12,0.07,0.08,0.13,0.08,0.11,0.1,0.09,0.1,0.12,0.08,0.09,0.12,0.13,0,0.09,-5,1341.67,1025,2000,9.37,6.01,4,11,7.5,11,14.15},2},
{{0.09,0.09,0.1,0.1,0.09,0.14,0.09,0.07,0.13,0.1,0.11,0.13,0.08,0.08,0.11,0.09,0.14,0.06,0.12,0.09,0.06,0.16,0.1,0.1,0.08,0.13,0.06,0.12,0.08,0.13,0,0.04,-5.15,894.44,1750,983.33,9.91,5.71,4.03,11.51,7.12,11.51,14.49},2},
{{0.1,0.11,0.11,0.1,0.13,0.09,0.1,0.07,0.11,0.1,0.09,0.1,0.1,0.13,0.13,0.08,0.09,0.1,0.1,0.11,0.11,0.12,0.11,0.08,0.09,0.1,0.1,0.09,0.11,0.11,0,0.33,-5.47,1037.5,2450,2975,9.21,5.63,4.12,10.89,7.06,10.89,13.93},2},
{{0.11,0.09,0.1,0.11,0.11,0.11,0.08,0.07,0.12,0.13,0.13,0.09,0.09,0.17,0.07,0.1,0.07,0.1,0.09,0.11,0.13,0.08,0.1,0.14,0.08,0.11,0.09,0.12,0.07,0.11,0,-0.2,-5.53,1137.5,1012.5,4550,9.55,5.87,4.04,11.22,7.31,11.22,14.48},2},
{{0.09,0.13,0.1,0.09,0.11,0.12,0.1,0.09,0.09,0.11,0.12,0.08,0.07,0.13,0.12,0.09,0.1,0.1,0.13,0.09,0.09,0.07,0.08,0.15,0.1,0.1,0.1,0.09,0.11,0.13,0,0.45,-4.96,1200,1125,3475,9.34,5.78,3.98,11.03,7.25,11.03,14.06},2},
{{0.08,0.12,0.1,0.13,0.12,0.07,0.1,0.13,0.11,0.07,0.09,0.08,0.08,0.12,0.07,0.12,0.15,0.06,0.12,0.12,0.09,0.08,0.16,0.14,0.1,0.15,0.08,0.1,0.07,0.06,0,0.94,-5.96,1100,1156.25,3425,9.25,5.51,3.17,10.81,6.89,10.81,13.87},2},
{{0.1,0.08,0.12,0.1,0.11,0.1,0.15,0.13,0.1,0.04,0.09,0.1,0.08,0.09,0.08,0.12,0.13,0.15,0.08,0.11,0.08,0.11,0.14,0.12,0.15,0.1,0.1,0.07,0.08,0.08,0,0.69,-5.81,1333.33,910,4525,9.31,5.56,3.39,10.75,6.91,10.75,13.95},2},
{{0.12,0.09,0.1,0.13,0.1,0.13,0.11,0.11,0.08,0.06,0.11,0.08,0.11,0.1,0.07,0.14,0.08,0.14,0.08,0.1,0.07,0.16,0.17,0.09,0.09,0.11,0.08,0.09,0.07,0.08,0,0.37,-6,1107.14,1933.33,1900,9.01,5.67,3.67,10.48,7.15,10.48,13.79},2},
{{0.11,0.1,0.12,0.1,0.1,0.08,0.13,0.1,0.09,0.09,0.09,0.11,0.09,0.09,0.08,0.1,0.16,0.1,0.06,0.14,0.06,0.12,0.13,0.12,0.1,0.12,0.1,0.06,0.11,0.1,0,0.46,-5.46,915,2066.67,2025,9.14,5.77,3.54,10.78,7.19,10.78,13.84},2},
{{0.11,0.11,0.11,0.09,0.11,0.12,0.07,0.09,0.12,0.08,0.1,0.13,0.1,0.07,0.09,0.13,0.1,0.1,0.12,0.08,0.05,0.12,0.11,0.15,0.13,0.1,0.15,0.06,0.1,0.06,0,0.16,-5.66,857.14,950,4000,9.25,5.78,3.08,10.94,7.22,10.94,13.74},2},
{{0.09,0.11,0.11,0.08,0.13,0.12,0.08,0.11,0.09,0.1,0.09,0.12,0.11,0.09,0.07,0.12,0.11,0.12,0.12,0.08,0.13,0.07,0.1,0.11,0.1,0.15,0.1,0.05,0.1,0.11,0,0.38,-5.36,970,2383.33,1900,9.47,5.76,3.94,11.14,7.01,11.14,14.15},2},
{{0.11,0.1,0.08,0.08,0.15,0.12,0.07,0.08,0.12,0.11,0.12,0.1,0.11,0.1,0.1,0.12,0.07,0.09,0.13,0.08,0.12,0.11,0.09,0.09,0.12,0.1,0.11,0.1,0.06,0.11,0,0.14,-5.7,827.27,3050,2333.33,9.77,5.7,4.01,11.4,7.08,11.4,14.53},2},
{{0.09,0.14,0.09,0.07,0.09,0.11,0.14,0.09,0.11,0.08,0.08,0.11,0.11,0.1,0.12,0.08,0.13,0.07,0.13,0.08,0.12,0.08,0.09,0.14,0.1,0.11,0.07,0.09,0.14,0.09,0,0.5,-5.51,779.17,1475,1475,9.37,5.58,4.02,11.04,6.97,11.04,13.98},2},
{{0.12,0.14,0.07,0.06,0.08,0.14,0.12,0.13,0.1,0.05,0.1,0.08,0.09,0.12,0.12,0.14,0.06,0.1,0.14,0.06,0.12,0.08,0.13,0.09,0.1,0.12,0.1,0.04,0.16,0.08,0,0.41,-5.6,1241.67,3075,1775,9.23,5.5,3.88,10.87,7.02,10.87,13.85},2},
{{0.11,0.09,0.15,0.06,0.07,0.1,0.11,0.14,0.1,0.09,0.11,0.09,0.1,0.12,0.13,0.08,0.09,0.12,0.11,0.07,0.1,0.14,0.1,0.1,0.09,0.12,0.07,0.11,0.12,0.07,0,0.3,-5.84,1007.14,2016.67,4050,9.5,5.64,3.93,11.16,7.1,11.16,14.09},2},
{{0.13,0.13,0.08,0.09,0.09,0.11,0.08,0.09,0.11,0.12,0.14,0.06,0.1,0.11,0.13,0.08,0.1,0.14,0.07,0.11,0.08,0.13,0.1,0.12,0.08,0.1,0.1,0.11,0.12,0.09,0,0.38,-5.41,795,2475,2316.67,9.41,5.84,3.84,11.12,7.37,11.12,14.01},2},
{{0.1,0.12,0.12,0.11,0.08,0.09,0.1,0.1,0.1,0.11,0.1,0.09,0.12,0.06,0.1,0.13,0.1,0.14,0.12,0.07,0.07,0.12,0.15,0.09,0.08,0.12,0.08,0.1,0.15,0.06,0,0.56,-5.57,1291.67,1350,3050,9.32,5.56,3.71,11.06,6.92,11.06,13.78},2},
{{0.13,0.12,0.09,0.1,0.09,0.09,0.12,0.09,0.08,0.11,0.12,0.09,0.09,0.13,0.09,0.11,0.09,0.09,0.11,0.1,0.1,0.11,0.08,0.11,0.09,0.08,0.13,0.13,0.07,0.12,0,0.33,-5.28,850,1550,2500,9.2,5.89,4.06,10.92,7.38,10.92,14},2},
{{0.17,0.12,0.07,0.06,0.05,0.09,0.09,0.11,0.17,0.1,0.1,0.12,0.09,0.1,0.09,0.09,0.08,0.13,0.11,0.1,0.1,0.1,0.1,0.1,0.08,0.13,0.07,0.11,0.15,0.09,0,0.71,-5.26,1193.75,2475,2950,9.69,6.15,3.97,11.53,7.48,11.53,14.35},2},
{{0.13,0.1,0.08,0.11,0.06,0.08,0.13,0.1,0.13,0.11,0.12,0.06,0.13,0.11,0.12,0.06,0.11,0.12,0.1,0.11,0.12,0.08,0.16,0.08,0.08,0.1,0.1,0.03,0.14,0.14,0,0.58,-5.27,878.57,3975,2700,9.76,5.81,4.39,11.43,7.2,11.43,14.42},2},
{{0.11,0.14,0.08,0.07,0.1,0.09,0.09,0.12,0.11,0.09,0.11,0.1,0.11,0.08,0.13,0.12,0.07,0.08,0.1,0.12,0.1,0.14,0.06,0.07,0.12,0.09,0.09,0.11,0.16,0.08,0,0.28,-5.37,961.11,2500,1716.67,9.63,5.86,4.02,11.31,7.49,11.31,14.14},2},
{{0.1,0.13,0.08,0.07,0.12,0.12,0.06,0.13,0.14,0.07,0.1,0.1,0.13,0.08,0.17,0.09,0.08,0.07,0.09,0.12,0.09,0.04,0.07,0.1,0.08,0.15,0.08,0.15,0.15,0.11,0,0.21,-4.41,1525,2766.67,3050,9.63,5.56,3.81,11.24,7.14,11.24,13.87},2},
{{0.12,0.1,0.11,0.07,0.12,0.12,0.08,0.11,0.09,0.11,0.07,0.09,0.11,0.11,0.1,0.13,0.1,0.11,0.1,0.11,0.15,0.07,0.06,0.1,0.09,0.11,0.1,0.13,0.1,0.12,0,0.84,-5.2,783.33,2275,4550,9.41,5.52,4.27,11.03,7.07,11.03,14.04},2},
{{0.13,0.07,0.12,0.06,0.1,0.12,0.1,0.14,0.09,0.08,0.09,0.13,0.08,0.13,0.08,0.14,0.05,0.13,0.14,0.05,0.12,0.08,0.12,0.08,0.1,0.08,0.09,0.09,0.14,0.13,0,0.13,-5.02,1837.5,1000,4175,9.53,5.61,4.27,11.08,7.06,11.08,14.07},2},
{{0.12,0.12,0.07,0.08,0.1,0.11,0.11,0.12,0.1,0.07,0.13,0.1,0.06,0.1,0.14,0.08,0.09,0.09,0.14,0.08,0.13,0.08,0.11,0.08,0.12,0.14,0.09,0.08,0.09,0.11,0,0.32,-5.57,700,1716.67,2550,9.6,5.92,3.72,11.21,7.36,11.21,14.28},2},
{{0.12,0.12,0.09,0.1,0.1,0.12,0.08,0.09,0.1,0.08,0.07,0.11,0.1,0.15,0.1,0.09,0.1,0.11,0.12,0.07,0.12,0.1,0.06,0.09,0.13,0.1,0.12,0.11,0.09,0.1,0,0.51,-5.36,733.33,3100,2525,9,5.37,3.86,10.66,6.69,10.66,13.55},2},
{{0.09,0.12,0.08,0.11,0.12,0.11,0.1,0.07,0.12,0.11,0.12,0.09,0.09,0.09,0.09,0.13,0.09,0.16,0.09,0.08,0.06,0.13,0.1,0.15,0.05,0.09,0.12,0.12,0.08,0.13,0,0.22,-4.94,1037.5,1400,3650,9.68,5.71,3.97,11.24,7.19,11.24,14.18},2},
{{0.14,0.08,0.09,0.12,0.1,0.1,0.08,0.07,0.09,0.15,0.12,0.07,0.1,0.12,0.07,0.1,0.1,0.14,0.08,0.13,0.1,0.09,0.06,0.1,0.13,0.09,0.09,0.11,0.17,0.09,0,0.86,-4.91,780,2066.67,1850,9.4,6.22,3.99,11.15,7.66,11.15,14.18},2},
{{0.12,0.06,0.1,0.1,0.11,0.11,0.13,0.12,0.09,0.09,0.09,0.08,0.09,0.11,0.09,0.09,0.12,0.17,0.11,0.07,0.1,0.11,0.16,0.1,0.11,0.07,0.1,0.1,0.11,0.07,0,0.88,-5.84,1278.57,1875,2850,9.43,5.69,3.66,10.94,7.09,10.94,14.11},2},
{{0.08,0.11,0.09,0.1,0.15,0.12,0.06,0.1,0.11,0.1,0.11,0.12,0.08,0.09,0.06,0.14,0.11,0.13,0.11,0.08,0.09,0.11,0.14,0.1,0.1,0.09,0.11,0.1,0.1,0.08,0,0.23,-5.47,1208.33,3550,2575,9.46,5.82,3.7,11.06,7.25,11.06,14.07},2},
{{0.04,0.13,0.13,0.15,0.09,0.05,0.13,0.15,0.11,0.05,0.07,0.09,0.1,0.15,0.08,0.1,0.23,0.1,0.05,0.05,0.09,0.16,0.14,0.1,0.07,0.11,0.09,0.09,0.09,0.09,0,0.11,-5.85,1050,1800,1566.67,9.23,4.51,3.73,10.71,5.81,10.71,13.33},2},
{{0,0.02,0.07,0.12,0.13,0.05,0.04,0.03,0.03,0.02,0.01,0.05,0.05,0.09,0.05,0.08,0.1,0.08,0.01,0,0.02,0.03,0.06,0.05,0.12,0.06,0.04,0.06,0.05,0.03,0,0.07,-2.64,800,1200,1566.67,4.43,1.73,1.92,9.82,4.56,9.82,5.91},2},
{{0.05,0.06,0.09,0.15,0.08,0.14,0.14,0.16,0.09,0.06,0.01,0.05,0.06,0.1,0.08,0.08,0.08,0.12,0.18,0.25,0.03,0.06,0.07,0.11,0.09,0.14,0.07,0.18,0.15,0.12,0,4.67,0.12,800,2150,3850,8.73,3.4,3.03,9.7,4.46,9.7,11.42},5},
{{0.09,0.02,0.04,0.07,0.38,0.17,0.08,0.06,0.03,0.07,0.06,0.08,0.04,0.09,0.2,0.2,0.14,0.05,0.06,0.1,0.05,0.05,0.05,0.05,0.08,0.11,0.25,0.16,0.13,0.1,0,2.44,0.22,1866.67,1125,2266.67,9.48,2.63,2.76,10.28,3.97,10.28,11.28},5},
{{0.09,0.15,0.11,0.11,0.06,0.07,0.1,0.1,0.13,0.1,0.15,0.1,0.13,0.07,0.11,0.09,0.13,0.08,0.11,0.05,0.13,0.1,0.1,0.15,0.1,0.07,0.09,0.07,0.11,0.1,0,1.22,-1.59,2275,2350,2175,9.4,3.37,4.04,10.78,4.23,10.78,11.79},5},
{{0.12,0.12,0.12,0.09,0.08,0.1,0.1,0.1,0.1,0.1,0.1,0.11,0.13,0.11,0.09,0.1,0.11,0.11,0.12,0.05,0.1,0.12,0.1,0.12,0.1,0.09,0.1,0.11,0.07,0.12,0,1.6,-1.48,2275,2600,3525,9.65,3.15,3.69,10.97,3.96,10.97,11.77},5},
{{0.13,0.13,0.1,0.1,0.05,0.08,0.08,0.08,0.11,0.17,0.09,0.13,0.1,0.12,0.09,0.07,0.11,0.13,0.09,0.08,0.13,0.11,0.12,0.11,0.1,0.12,0.11,0.09,0.05,0.09,0,1.66,-1.87,2075,3166.67,3775,9.34,3.27,3.71,11.01,4.15,11.01,11.76},5},
{{0.11,0.11,0.14,0.1,0.03,0.09,0.1,0.11,0.14,0.09,0.11,0.11,0.14,0.1,0.08,0.1,0.11,0.11,0.06,0.1,0.12,0.11,0.13,0.1,0.16,0.1,0.05,0.06,0.1,0.09,0,1.68,-1.97,2075,1750,2533.33,9.57,3.24,3.67,10.91,4.11,10.91,11.82},5},
{{0.12,0.13,0.12,0.08,0.03,0.07,0.11,0.12,0.11,0.14,0.12,0.14,0.13,0.09,0.08,0.07,0.07,0.12,0.11,0.09,0.15,0.13,0.12,0.12,0.1,0.09,0.05,0.06,0.11,0.1,0,1.69,-2.01,2300,3400,2416.67,9.19,3.79,4.19,10.75,4.81,10.75,11.98},5},
{{0,0.01,0.01,0.03,0.02,0.02,0.02,0,0.02,0.01,0.06,0,0.02,0.02,0.02,0,0.01,0,0.01,0,0.02,0.04,0.01,0.01,0.01,0.01,0.02,0.01,0.01,0.01,0,-0.33,-0.4,2300,200,250,1.03,0.48,0.56,9.64,5.3,9.64,1.4},5},
{{0.01,0.01,0.01,0.03,0.02,0.03,0.14,0.19,0.31,0,0,0.01,0.02,0.05,0.13,0.15,0.12,0.16,0.19,0,0.03,0.05,0.08,0.1,0.09,0.13,0.1,0.15,0.13,0,0,8.77,-2.64,3375,727.78,875,5.07,3.72,3.02,6.31,4.56,6.31,11.63},1},
{{0.01,0.02,0.02,0.02,0.05,0.04,0.1,0.25,0.23,0,0.01,0.01,0.03,0.03,0.06,0.13,0.17,0.18,0.18,0,0.02,0.04,0.13,0.13,0.11,0.12,0.1,0.11,0.15,0,0,9.31,-3.21,1450,950,700,5.18,3.73,2.81,6.61,4.66,6.61,12.25},1},
{{0.16,0.1,0.1,0.14,0.16,0.1,0.07,0.09,0.05,0,0.09,0.14,0.14,0.11,0.1,0.09,0.07,0.08,0.09,0,0.09,0.06,0.07,0.07,0.07,0.08,0.15,0.1,0.13,0,0,4.35,-2.84,650,600,625,7.83,5.24,3.85,9.07,6.34,9.07,12.05},1},
{{0.13,0.16,0.19,0.15,0.14,0.12,0.09,0.03,0.01,0,0.19,0.15,0.13,0.15,0.08,0.09,0.08,0.08,0.06,0,0.17,0.15,0.11,0.11,0.11,0.09,0.06,0.06,0.11,0,0,1.8,-6.17,1375,1175,2400,8.08,4.59,3.91,8.93,5.62,8.93,12.34},1},
{{0.13,0.14,0.14,0.15,0.13,0.2,0.1,0.02,0.01,0,0.16,0.17,0.14,0.13,0.13,0.07,0.07,0.07,0.07,0,0.15,0.15,0.11,0.1,0.14,0.13,0.07,0.08,0.05,0,0,2.07,-6.03,1375,850,3600,7.93,4.35,3.51,8.86,5.34,8.86,11.81},1},
{{0.18,0.18,0.14,0.12,0.12,0.14,0.11,0.03,0.02,0,0.17,0.14,0.15,0.15,0.11,0.08,0.1,0.05,0.03,0,0.15,0.18,0.1,0.11,0.1,0.07,0.13,0.11,0.05,0,0,1.87,-5.85,2875,1166.67,725,8.28,4.29,3.6,9.21,5.41,9.21,12.13},1},
{{0,0.01,0.02,0.02,0.01,0,0.01,0,0,0,0,0,0,0.01,0.02,0,0.01,0.02,0,0,0,0,0,0,0.01,0.01,0.02,0.01,0.01,0,0,0.3,-0.14,2875,1166.67,725,0.39,0.28,0.13,7.97,6.39,7.97,0.54},1},
{{0.3,0.17,0.13,0.11,0.09,0.09,0.05,0.06,0.01,0.01,0,0.02,0.01,0.06,0.09,0.1,0.13,0.12,0.19,0.3,0.04,0.05,0.06,0.1,0.1,0.12,0.12,0.16,0.12,0.16,0,9.45,-3.4,1800,854.55,1600,4.44,4.54,2.94,5.64,5.24,5.64,12.17},5},
{{0.16,0.17,0.09,0.09,0.16,0.1,0.1,0.07,0.08,0,0,0,0,0.02,0.13,0.15,0.14,0.18,0.22,0.19,0.03,0.07,0.05,0.14,0.15,0.14,0.15,0.1,0.11,0.08,0,8.87,-4.19,1430,718.75,2275,5.19,3.78,2.4,6.43,4.47,6.43,12.04},5},
{{0.12,0.16,0.1,0.1,0.08,0.09,0.09,0.08,0.09,0.1,0.02,0.01,0.04,0.11,0.12,0.14,0.1,0.18,0.15,0.14,0.07,0.11,0.14,0.08,0.13,0.09,0.12,0.08,0.11,0.1,0,6.98,-4.9,575,1360,3216.67,6.57,4.25,3.27,8.34,5.32,8.34,12.6},5},
{{0.01,0.04,0.11,0.1,0.09,0.11,0.13,0.13,0.16,0.15,0.17,0.17,0.2,0.16,0.07,0.09,0.1,0.05,0.01,0,0.14,0.13,0.14,0.14,0.06,0.05,0.07,0.1,0.08,0.11,0,-0.04,-5.97,1100,2600,3025,8.91,4.08,4.07,10.28,4.85,10.28,12.9},5},
{{0.02,0.03,0.09,0.11,0.1,0.13,0.11,0.12,0.13,0.19,0.2,0.21,0.18,0.13,0.1,0.08,0.06,0.05,0.02,0,0.14,0.14,0.13,0.09,0.1,0.11,0.07,0.05,0.08,0.11,0,-0.65,-5.86,810,1016.67,1000,9.1,4.21,4.07,10.47,4.99,10.47,13.01},5},
{{0.02,0.05,0.12,0.12,0.09,0.12,0.08,0.11,0.13,0.17,0.23,0.19,0.14,0.1,0.12,0.06,0.11,0.04,0.03,0.01,0.2,0.14,0.1,0.1,0.07,0.08,0.06,0.13,0.1,0.05,0,-0.53,-6.5,836.36,1250,1850,8.65,4.71,4.39,10.24,5.59,10.24,13.19},5},
{{0,0,0,0,0.01,0,0.07,0.06,0.03,0,0.01,0.02,0.07,0.05,0,0.01,0,0,0,0,0,0,0,0,0.01,0.03,0.02,0.06,0.04,0.02,0,-0.13,-0.25,466.67,350,1850,1.57,0.32,0.33,10.26,2.6,10.26,1.68},5},
{{0.01,0.03,0.07,0.05,0.12,0.12,0.15,0.18,0.17,0.12,0.03,0.04,0.09,0.1,0.14,0.17,0.13,0.14,0.1,0.09,0.06,0.07,0.09,0.12,0.12,0.13,0.15,0.1,0.1,0.1,0,8.88,-3.31,1291.67,1075,3550,4.58,2.6,2.37,5.73,3.4,5.73,11.29},1},
{{0,0.04,0.08,0.12,0.14,0.12,0.1,0.11,0.12,0.18,0.01,0.1,0.09,0.13,0.09,0.13,0.07,0.13,0.13,0.12,0.08,0.07,0.11,0.09,0.14,0.06,0.11,0.1,0.11,0.15,0,9.03,-3.27,2450,710,3125,4.96,3.15,2.75,6.49,3.87,6.49,11.73},1},
{{0,0.03,0.13,0.14,0.12,0.12,0.1,0.09,0.15,0.13,0.01,0.07,0.11,0.13,0.11,0.09,0.13,0.12,0.13,0.13,0.05,0.1,0.14,0.14,0.07,0.14,0.08,0.11,0.1,0.08,0,9.07,-3.54,3275,1640,2475,4.4,2.97,2.53,5.58,3.65,5.58,11.4},1},
{{0.03,0.09,0.11,0.11,0.11,0.12,0.09,0.1,0.12,0.14,0.03,0.1,0.13,0.11,0.08,0.04,0.12,0.13,0.15,0.11,0.12,0.12,0.12,0.06,0.11,0.11,0.1,0.1,0.13,0.06,0,8.97,-4.08,3800,1987.5,2550,4.96,3.36,2.82,6.28,4.07,6.28,11.98},1},
{{0.04,0.07,0.11,0.14,0.09,0.15,0.18,0.09,0.09,0.06,0.01,0.1,0.1,0.11,0.11,0.15,0.1,0.09,0.09,0.14,0.15,0.12,0.11,0.11,0.09,0.09,0.11,0.08,0.07,0.09,0,8.95,-4.38,1700,894.44,600,3.94,3.2,3.2,5.16,4.06,5.16,11.68},1},
{{0.36,0.23,0.14,0.08,0.04,0.02,0.05,0.06,0.02,0.02,0.33,0.14,0.1,0.04,0.09,0.09,0.08,0.05,0.05,0.06,0.13,0.09,0.08,0.09,0.08,0.07,0.08,0.13,0.11,0.14,0,4.56,-3.36,775,860,2300,7.3,4.68,3.72,8.44,5.81,8.44,11.87},1},
{{0.21,0.16,0.03,0.01,0,0,0,0,0,0,0.22,0.1,0.02,0.04,0.02,0,0.01,0,0,0,0.06,0.05,0.02,0.06,0.04,0.04,0.04,0.05,0.02,0.04,0,0.66,-1.74,775,1025,675,3.56,1.05,1.45,9.6,3.28,9.6,4.4},1},
{{0.45,0.13,0.13,0.09,0.05,0.02,0.04,0.03,0.05,0.03,0,0,0,0,0.01,0.04,0.12,0.13,0.19,0.49,0,0.01,0.04,0.03,0.04,0.08,0.1,0.15,0.27,0.3,0,9.38,0.35,2575,804.55,225,4.8,4.61,3.2,6.28,5.25,6.28,11.89},5},
{{0.12,0.08,0.1,0.1,0.09,0.07,0.04,0.1,0.13,0.17,0.07,0.06,0.13,0.09,0.08,0.13,0.08,0.09,0.15,0.14,0.08,0.1,0.03,0.09,0.07,0.12,0.1,0.12,0.14,0.15,0,2.12,-2.56,968.75,1225,2400,9.26,4.68,4.39,10.81,5.89,10.81,12.78},5},
{{0,0.09,0.11,0.12,0.14,0.14,0.1,0.15,0.1,0.09,0.09,0.08,0.11,0.17,0.17,0.17,0.1,0.09,0.03,0.02,0.07,0.12,0.17,0.13,0.1,0.08,0.13,0.08,0.08,0.05,0,-0.44,-4.69,575,4000,2550,9.19,2.73,3.01,10.09,3.61,10.09,11.68},5},
{{0.01,0.05,0.07,0.1,0.2,0.2,0.15,0.09,0.08,0.07,0.07,0.11,0.13,0.16,0.16,0.16,0.06,0.13,0.03,0.01,0.11,0.08,0.08,0.14,0.18,0.17,0.1,0.1,0.04,0.02,0,-0.58,-4.86,4050,3700,4375,9.07,2.78,2.65,9.71,3.67,9.71,11.58},5},
{{0.01,0.08,0.08,0.11,0.1,0.16,0.15,0.12,0.11,0.1,0.1,0.13,0.14,0.14,0.13,0.11,0.11,0.09,0.07,0.01,0.07,0.11,0.12,0.1,0.16,0.12,0.08,0.12,0.08,0.05,0,-0.69,-4.33,1600,3575,4175,9.47,3.33,3.16,10.27,4.27,10.27,12.03},5},
{{0.02,0.11,0.14,0.13,0.09,0.05,0.14,0.11,0.1,0.13,0.14,0.17,0.13,0.07,0.06,0.06,0.15,0.11,0.11,0.03,0.14,0.14,0.16,0.13,0.08,0.07,0.09,0.09,0.06,0.07,0,-0.38,-5.45,1005.56,2925,2666.67,9.11,4.08,3.67,10.35,4.77,10.35,12.67},5},
{{0.08,0.17,0.1,0.07,0.04,0.08,0.06,0.1,0.14,0.17,0.21,0.14,0.08,0.06,0.08,0.05,0.08,0.12,0.13,0.07,0.22,0.13,0.1,0.1,0.07,0.09,0.1,0.09,0.06,0.08,0,-0.45,-5.94,737.5,1200,1875,8.96,4.95,4.62,10.66,5.92,10.66,13.56},5},
{{0.06,0.06,0.03,0.03,0.05,0.02,0.1,0.06,0.03,0.02,0.07,0.06,0.05,0.06,0.05,0.04,0.05,0.02,0.05,0,0.06,0.07,0.05,0.04,0.05,0.03,0.06,0.03,0.03,0.05,0,-0.53,-2.02,537.5,100,900,3.47,1.63,2.1,9.25,4.63,9.25,5.22},5},
{{0.12,0.22,0.23,0.15,0.09,0.05,0.04,0.06,0.05,0.02,0,0,0,0.02,0.08,0.15,0.19,0.21,0.18,0.18,0.07,0.03,0.08,0.07,0.1,0.13,0.12,0.16,0.1,0.15,0,9,-2.74,2150,2716.67,1750,3.79,2.69,2.65,5.13,3.41,5.13,11.01},1},
{{0.17,0.2,0.19,0.12,0.1,0.05,0.07,0.09,0.02,0.01,0,0,0,0.01,0.07,0.18,0.18,0.21,0.2,0.17,0.08,0.08,0.08,0.1,0.14,0.18,0.1,0.11,0.06,0.08,0,9.05,-3.87,2775,1590,2950,4.02,2.66,2.36,5.11,3.39,5.11,11.27},1},
{{0.26,0.19,0.11,0.07,0.12,0.04,0.05,0.05,0.08,0.05,0,0,0,0.05,0.08,0.14,0.14,0.17,0.2,0.23,0.06,0.09,0.11,0.12,0.09,0.08,0.11,0.1,0.13,0.14,0,9.46,-3.19,1375,830,2866.67,5.29,3.4,2.91,6.75,4.2,6.75,12.32},1},
{{0.1,0.05,0.06,0.09,0.1,0.08,0.07,0.09,0.17,0.18,0.15,0.13,0.14,0.1,0.12,0.08,0.08,0.04,0.08,0.08,0.06,0.07,0.04,0.08,0.1,0.1,0.13,0.09,0.17,0.15,0,2.66,-2.24,1166.67,533.33,2175,8.49,5.29,3.14,9.85,6.57,9.85,12.13},1},
{{0.01,0.01,0.02,0.1,0.1,0.11,0.14,0.18,0.14,0.2,0.2,0.25,0.18,0.18,0.1,0.04,0.04,0.02,0.01,0,0.1,0.05,0.09,0.12,0.1,0.1,0.13,0.12,0.13,0.1,0,-0.72,-3.57,888.89,1550,1700,9.54,3.45,2.9,10.43,4.53,10.43,11.63},1},
{{0,0,0.04,0.09,0.1,0.21,0.15,0.13,0.12,0.18,0.24,0.17,0.18,0.18,0.12,0.05,0.05,0.03,0,0,0.15,0.22,0.16,0.12,0.09,0.05,0.06,0.07,0.08,0.04,0,-0.71,-5.59,1062.5,2012.5,2200,8.92,4.05,2.8,9.77,5.03,9.77,11.94},1},
{{0.01,0,0,0.04,0.08,0.1,0.14,0.1,0.09,0.05,0.07,0.11,0.16,0.13,0.09,0.01,0.01,0,0,0.01,0.14,0.15,0.11,0.05,0.06,0.04,0.02,0.01,0.02,0.02,0,-0.13,-3.99,1366.67,2600,1875,5.04,1.75,2.08,9.1,4.11,9.1,7.05},1},
{{0.17,0.02,0.11,0.14,0.19,0.27,0.01,0.02,0.04,0.04,0,0,0,0,0,0,0.02,0.23,0,0.74,0,0,0,0,0,0.02,0.01,0.05,0.19,0.71,0,7.74,-5.21,1680,212.5,1875,4.22,0.19,0.36,4.27,0.34,4.27,10.28},3},
{{0,0.14,0.45,0.25,0.15,0.01,0.01,0,0,0.01,0,0,0,0,0,0,0,0.48,0,0.52,0,0,0,0,0,0.02,0.01,0.46,0.44,0.08,0,7.62,-5.53,336.21,277.27,1875,4.2,0.03,0.06,4.2,0.06,4.2,10.31},3},
{{0.41,0.28,0.06,0.01,0.01,0.01,0,0.09,0.1,0.04,0.21,0.09,0.02,0.03,0,0.06,0.22,0.07,0,0.3,0.33,0.01,0.01,0.05,0.03,0.02,0.18,0.17,0.13,0.09,0,7.21,-6.03,275,459.38,1875,4.06,0.42,0.68,4.09,0.55,4.09,10.3},3},
{{0,0.01,0.01,0.01,0,0.03,0.15,0.35,0.45,0.01,0,0.01,0.01,0.01,0.01,0.19,0.78,0,0,0,0,0.01,0,0.03,0.01,0.41,0.51,0.02,0,0.02,0,7.2,-5.78,1250,258.11,1875,4.56,0.05,0.09,4.56,0.11,4.56,10.3},3},
{{0,0.02,0.05,0.04,0.02,0.37,0.45,0.06,0,0,0.03,0.03,0.01,0.19,0.47,0.28,0,0,0,0,0.05,0.08,0.12,0.74,0,0.01,0,0,0,0.01,0,6.88,-6.42,371.15,356,1875,4.38,0.04,0.09,4.38,0.08,4.38,10.38},3},
{{0.1,0.25,0.01,0.05,0.14,0.38,0.08,0,0.01,0.01,0.38,0.6,0,0.01,0,0.02,0,0,0,0.01,0.36,0.56,0.06,0.01,0.01,0.01,0,0.01,0,0.01,0,6.56,-6.75,125,125,1875,4.2,0.17,0.27,4.21,0.21,4.21,10.32},3},
{{0.03,0.02,0.15,0.09,0.11,0.12,0.07,0.01,0.03,0.37,0.08,0.11,0.07,0.55,0.07,0.07,0.04,0.01,0,0.01,0.04,0.1,0.2,0.25,0.06,0.27,0.02,0.01,0.02,0.06,0,6.85,-6.19,150,2975,1875,4.53,0.11,0.35,4.54,0.23,4.54,10.3},3},
{{0,0,0,0,0,0.01,0.03,0.06,0.13,0.56,0,0,0.13,0.52,0.05,0.09,0.01,0,0,0.01,0.01,0.01,0.02,0.07,0.45,0.22,0.01,0,0.01,0.02,0,5.41,-4.82,238.71,296,1875,3.73,1.14,1.01,4.73,1.44,4.73,8.15},3},
{{0.39,0.22,0.12,0.08,0.06,0.04,0.04,0.02,0.03,0.02,0.24,0.09,0.04,0.07,0.07,0.1,0.06,0.07,0.06,0.21,0.26,0.04,0.02,0.02,0.06,0.03,0.04,0.04,0.12,0.4,0,9.66,0.48,2250,1566.67,2200,1.29,0.42,1.56,1.64,0.59,1.64,10},4},
{{0.06,0.07,0.04,0.05,0.06,0.13,0.17,0.14,0.15,0.15,0.12,0.15,0.1,0.08,0.11,0.09,0.07,0.1,0.09,0.12,0.08,0.16,0.08,0.12,0.1,0.09,0.13,0.05,0.06,0.15,0,9.62,0.63,1525,205.32,1025,1.95,0.29,0.67,2.2,0.41,2.2,9.93},4},
{{0.01,0.13,0.18,0.05,0.02,0.05,0.07,0.11,0.26,0.14,0.07,0.08,0.2,0.16,0.1,0.08,0.06,0.02,0.14,0.1,0.07,0.17,0.06,0.03,0.1,0.15,0.23,0.1,0.06,0.05,0,9.67,0.53,1087.5,326.67,575,1.71,0.23,0.49,2.03,0.29,2.03,9.92},4},
{{0,0.29,0.46,0.21,0.03,0.02,0,0.01,0,0,0,0,0,0.01,0.02,0.07,0.17,0.26,0.38,0.11,0.06,0.23,0.32,0.24,0.11,0.03,0.01,0,0.01,0,0,9.91,0.13,1200,200,983.33,0.38,0.09,0.24,0.54,0.13,0.54,9.93},4},
{{0,0.02,0.03,0.17,0.15,0.12,0.09,0.14,0.11,0.2,0.11,0.13,0.16,0.14,0.14,0.1,0.04,0.04,0.06,0.12,0.1,0.06,0.03,0.06,0.09,0.08,0.13,0.19,0.15,0.14,0,9.62,0.79,1887.5,471.88,1837.5,1.97,0.27,0.56,2.16,0.5,2.16,9.92},4},
{{0,0,0.02,0.09,0.13,0.11,0.19,0.15,0.18,0.15,0.1,0.18,0.19,0.15,0.11,0.07,0.06,0.07,0.05,0.05,0.02,0.02,0.01,0.07,0.1,0.13,0.12,0.19,0.26,0.1,0,9.57,0.95,2033.33,207.45,425,2.08,0.19,0.38,2.21,0.25,2.21,9.88},4},
{{0,0,0.01,0.04,0.1,0.14,0.14,0.13,0.2,0.26,0.1,0.18,0.13,0.13,0.18,0.12,0.08,0.06,0.01,0.04,0.01,0.05,0.03,0.12,0.1,0.11,0.16,0.18,0.16,0.09,0,9.56,0.81,2750,232.14,116.67,2.32,0.18,0.38,2.43,0.25,2.43,9.91},4},
{{0,0.01,0,0.06,0.1,0.08,0.14,0.21,0.21,0.22,0.11,0.18,0.22,0.2,0.08,0.02,0.07,0.03,0.06,0.05,0.03,0.02,0.03,0.06,0.07,0.12,0.14,0.14,0.26,0.16,0,9.55,0.96,3575,365.91,1350,2.24,0.19,0.39,2.34,0.27,2.34,9.9},4},
{{0,0,0.05,0.12,0.16,0.17,0.21,0.1,0.1,0.11,0.05,0.16,0.2,0.15,0.13,0.07,0.08,0.05,0.07,0.06,0.03,0.02,0.03,0.06,0.09,0.1,0.12,0.26,0.2,0.11,0,9.62,0.92,2725,216.67,4000,1.84,0.19,0.36,1.97,0.25,1.97,9.88},4},
{{0.11,0.06,0.12,0.19,0.12,0.1,0.08,0.08,0.06,0.11,0.08,0.05,0.07,0.09,0.07,0.07,0.18,0.13,0.16,0.12,0.08,0.11,0.07,0.11,0.13,0.12,0.11,0.08,0.15,0.07,0,9.76,0.57,900,720,700,1.47,0.25,0.51,1.76,0.36,1.76,9.96},4},
{{0.29,0.22,0.27,0.16,0.05,0.02,0,0.01,0,0.01,0.01,0.01,0.01,0.03,0.04,0.04,0.19,0.22,0.29,0.18,0.16,0.17,0.14,0.15,0.1,0.09,0.07,0.06,0.06,0.03,0,9.9,0.22,2800,157.38,3775,0.7,0.13,0.52,0.89,0.18,0.89,9.97},4},
{{0.35,0.33,0.22,0.09,0.01,0.01,0.01,0.01,0,0,0.02,0.01,0.01,0.01,0.02,0.06,0.14,0.16,0.39,0.2,0.25,0.26,0.18,0.08,0.14,0.05,0.03,0.01,0.01,0.01,0,9.93,-0.04,2025,1083.33,4750,0.56,0.14,0.44,0.69,0.23,0.69,9.97},4},
{{0.01,0.01,0.02,0.06,0.08,0.14,0.17,0.23,0.12,0.18,0.07,0.08,0.11,0.1,0.11,0.19,0.09,0.09,0.1,0.08,0.18,0.13,0.17,0.14,0.13,0.08,0.05,0.06,0.05,0.03,0,9.68,0.2,3600,206.52,4850,2.17,0.22,0.55,2.3,0.32,2.3,9.98},4},
{{0,0,0,0.01,0.3,0.38,0.19,0.07,0.06,0,0,0.02,0.06,0.12,0.18,0.27,0.21,0.1,0.06,0.01,0.02,0.11,0.1,0.19,0.22,0.14,0.13,0.05,0.03,0.02,0,9.71,0.48,750,230.49,925,1.74,0.09,0.31,1.77,0.13,1.77,9.89},4},
{{0.2,0.09,0.06,0.06,0.07,0.04,0.04,0.02,0.03,0.04,0.17,0.05,0.04,0.03,0.04,0.06,0.05,0.04,0.05,0.1,0.05,0.03,0.04,0.05,0.05,0.05,0.04,0.04,0.07,0.2,0,5.93,0.7,1400,350,300,1.09,2.41,0.58,2.22,4.25,2.22,6.19},4},
{{0.05,0.11,0.12,0.09,0.09,0.22,0.09,0.1,0.11,0.05,0.1,0.06,0.1,0.15,0.15,0.1,0.06,0.09,0.12,0.06,0.07,0.09,0.1,0.1,0.13,0.13,0.12,0.1,0.11,0.09,0,10.28,-0.6,450,650,475,3.88,4.18,3.07,4.88,5.31,4.88,12.16},2},
{{0.12,0.1,0.1,0.13,0.07,0.1,0.12,0.11,0.06,0.11,0.1,0.08,0.11,0.14,0.07,0.09,0.08,0.12,0.16,0.05,0.11,0.06,0.12,0.14,0.12,0.1,0.08,0.08,0.13,0.09,0,10.24,-0.82,2933.33,682.14,1683.33,4.98,4.59,3.18,6.11,5.69,6.11,12.73},2},
{{0.12,0.09,0.08,0.13,0.1,0.1,0.06,0.13,0.09,0.12,0.1,0.06,0.12,0.13,0.11,0.09,0.08,0.13,0.11,0.09,0.09,0.07,0.13,0.11,0.11,0.09,0.13,0.07,0.12,0.1,0,10.37,-0.74,1525,547.06,3475,5.19,4.41,3.08,6.42,5.53,6.42,12.87},2},
{{0.13,0.1,0.12,0.11,0.08,0.09,0.1,0.11,0.08,0.11,0.09,0.07,0.11,0.12,0.06,0.09,0.17,0.09,0.11,0.09,0.1,0.07,0.1,0.15,0.17,0.11,0.05,0.07,0.1,0.1,0,10.37,-0.97,2325,519.44,3225,5.36,4.57,3.2,6.63,5.74,6.63,13.16},2},
{{0.13,0.09,0.12,0.13,0.07,0.08,0.11,0.11,0.07,0.12,0.09,0.09,0.09,0.13,0.1,0.07,0.11,0.14,0.13,0.05,0.1,0.09,0.08,0.18,0.11,0.11,0.07,0.1,0.07,0.12,0,10.25,-0.74,1966.67,603.33,1183.33,5.17,4.49,3.26,6.4,5.68,6.4,12.96},2},
{{0.11,0.09,0.12,0.12,0.1,0.08,0.11,0.11,0.08,0.1,0.1,0.07,0.12,0.1,0.09,0.1,0.14,0.11,0.09,0.07,0.1,0.11,0.12,0.15,0.08,0.06,0.11,0.06,0.1,0.13,0,10.19,-0.84,2500,505.88,2316.67,4.97,4.52,3.53,6.2,5.75,6.2,12.94},2},
{{0.14,0.07,0.13,0.12,0.1,0.07,0.08,0.11,0.11,0.09,0.09,0.12,0.09,0.12,0.05,0.12,0.11,0.1,0.12,0.07,0.11,0.09,0.1,0.1,0.1,0.1,0.12,0.11,0.11,0.09,0,10.17,-0.75,2533.33,564.71,2012.5,5.21,4.62,3.2,6.46,5.77,6.46,12.88},2},
{{0.12,0.11,0.09,0.12,0.1,0.1,0.11,0.07,0.11,0.1,0.12,0.13,0.07,0.11,0.1,0.07,0.09,0.14,0.09,0.07,0.11,0.1,0.12,0.08,0.14,0.11,0.09,0.11,0.08,0.1,0,9.97,-0.98,1360,538.89,1233.33,5.1,4.79,3.22,6.33,5.95,6.33,12.74},2},
{{0.13,0.11,0.1,0.12,0.09,0.07,0.1,0.09,0.11,0.09,0.1,0.15,0.07,0.1,0.07,0.11,0.12,0.11,0.09,0.09,0.11,0.12,0.06,0.1,0.12,0.11,0.08,0.13,0.09,0.11,0,9.99,-0.7,2283.33,567.65,2750,5.15,4.73,3.32,6.3,5.82,6.3,12.76},2},
{{0.12,0.11,0.08,0.13,0.11,0.11,0.1,0.1,0.06,0.11,0.1,0.11,0.07,0.12,0.09,0.1,0.13,0.1,0.08,0.09,0.11,0.09,0.08,0.11,0.12,0.12,0.11,0.09,0.08,0.11,0,10.05,-0.8,1250,472.22,2575,4.95,4.63,3.19,6.27,5.83,6.27,12.69},2},
{{0.13,0.11,0.1,0.1,0.11,0.07,0.09,0.1,0.14,0.08,0.11,0.12,0.07,0.09,0.1,0.11,0.1,0.13,0.1,0.08,0.14,0.11,0.06,0.07,0.11,0.14,0.1,0.1,0.07,0.12,0,10.06,-0.72,3925,636.67,1470,5.06,4.7,3.4,6.25,5.95,6.25,12.93},2},
{{0.13,0.11,0.1,0.08,0.12,0.1,0.1,0.07,0.12,0.09,0.12,0.14,0.02,0.1,0.09,0.09,0.11,0.12,0.11,0.1,0.1,0.1,0.11,0.07,0.13,0.12,0.1,0.11,0.07,0.11,0,10.2,-0.86,1950,477.5,2783.33,5.11,4.88,3.16,6.34,6.04,6.34,12.94},2},
{{0.1,0.11,0.09,0.11,0.08,0.1,0.12,0.12,0.11,0.09,0.1,0.11,0.1,0.1,0.13,0.05,0.1,0.1,0.13,0.06,0.12,0.11,0.1,0.09,0.08,0.09,0.11,0.11,0.1,0.11,0,9.99,-0.72,1875,711.54,2966.67,4.99,4.61,3.34,6.18,5.72,6.18,12.64},2},
{{0.14,0.08,0.1,0.13,0.07,0.08,0.09,0.11,0.12,0.09,0.09,0.13,0.07,0.09,0.09,0.09,0.14,0.12,0.07,0.09,0.13,0.12,0.07,0.13,0.09,0.09,0.08,0.1,0.09,0.12,0,10.23,-0.83,1625,486.84,1625,5.26,4.52,3.49,6.44,5.64,6.44,13.04},2},
{{0.1,0.12,0.11,0.08,0.14,0.07,0.11,0.08,0.12,0.09,0.1,0.12,0.06,0.13,0.1,0.07,0.11,0.12,0.11,0.07,0.16,0.15,0.05,0.05,0.08,0.08,0.11,0.15,0.1,0.1,0,10.18,-0.96,2775,529.41,2775,4.83,4.7,3.46,6.04,5.83,6.04,12.81},2},
{{0.11,0.11,0.09,0.14,0.08,0.09,0.13,0.1,0.07,0.11,0.13,0.09,0.13,0.08,0.07,0.12,0.1,0.08,0.11,0.09,0.11,0.09,0.12,0.11,0.1,0.13,0.08,0.07,0.12,0.09,0,10.05,-0.87,1840,457.14,1800,5.13,4.79,3.28,6.41,5.93,6.41,12.83},2},
{{0.11,0.09,0.11,0.08,0.15,0.12,0.09,0.07,0.11,0.1,0.12,0.08,0.13,0.1,0.09,0.09,0.07,0.12,0.12,0.09,0.09,0.07,0.14,0.08,0.08,0.15,0.11,0.11,0.09,0.1,0,10.01,-0.83,2175,533.33,2316.67,4.74,4.85,3.09,6.01,5.98,6.01,12.59},2},
{{0.12,0.1,0.1,0.08,0.11,0.12,0.11,0.07,0.11,0.11,0.1,0.11,0.13,0.07,0.1,0.12,0.06,0.11,0.11,0.08,0.13,0.12,0.08,0.09,0.07,0.11,0.12,0.1,0.12,0.08,0,9.92,-0.97,2333.33,620,3725,5.07,4.74,3.33,6.42,5.9,6.42,12.73},2},
{{0.08,0.13,0.12,0.07,0.09,0.16,0.06,0.12,0.1,0.1,0.11,0.11,0.12,0.08,0.09,0.09,0.1,0.12,0.12,0.06,0.08,0.08,0.13,0.11,0.1,0.1,0.12,0.12,0.12,0.08,0,9.96,-0.64,1380,616.67,1660,4.65,4.68,3.07,5.69,5.74,5.69,12.38},2},
{{0.1,0.12,0.08,0.1,0.13,0.09,0.08,0.1,0.14,0.08,0.12,0.07,0.12,0.12,0.06,0.13,0.11,0.09,0.1,0.11,0.11,0.12,0.11,0.05,0.11,0.09,0.11,0.13,0.11,0.09,0,9.99,-0.76,3225,606.25,2166.67,4.89,4.65,3.36,6.1,5.8,6.1,12.71},2},
{{0.1,0.1,0.1,0.13,0.1,0.1,0.08,0.1,0.1,0.12,0.11,0.11,0.11,0.08,0.09,0.1,0.1,0.13,0.09,0.08,0.12,0.09,0.11,0.08,0.09,0.07,0.16,0.1,0.1,0.11,0,9.99,-0.65,1650,565.63,1890,4.88,4.55,3.26,6.05,5.61,6.05,12.55},2},
{{0.09,0.09,0.09,0.12,0.14,0.08,0.13,0.09,0.11,0.1,0.11,0.09,0.12,0.12,0.11,0.08,0.07,0.1,0.11,0.08,0.1,0.13,0.1,0.06,0.08,0.1,0.15,0.11,0.12,0.09,0,9.95,-0.79,937.5,522.22,2633.33,4.66,4.55,3.18,5.8,5.65,5.8,12.31},2},
{{0.09,0.07,0.12,0.11,0.09,0.08,0.12,0.13,0.08,0.14,0.11,0.1,0.13,0.07,0.1,0.11,0.09,0.12,0.1,0.08,0.08,0.08,0.11,0.13,0.09,0.09,0.11,0.13,0.09,0.11,0,10.03,-0.58,1650,590,1875,5.12,4.6,3.21,6.35,5.7,6.35,12.67},2},
{{0.09,0.09,0.11,0.09,0.1,0.09,0.13,0.1,0.12,0.1,0.12,0.11,0.1,0.11,0.12,0.08,0.09,0.1,0.09,0.08,0.08,0.11,0.11,0.1,0.1,0.09,0.11,0.11,0.11,0.1,0,9.87,-0.7,3325,553.13,750,4.83,4.57,3.24,5.96,5.72,5.96,12.45},2},
{{0.08,0.11,0.1,0.08,0.11,0.1,0.12,0.08,0.14,0.1,0.11,0.09,0.13,0.1,0.12,0.08,0.07,0.13,0.09,0.09,0.12,0.09,0.08,0.1,0.13,0.09,0.11,0.1,0.12,0.08,0,9.82,-0.8,933.33,547.06,2825,5.04,4.56,3.19,6.28,5.66,6.28,12.5},2},
{{0.08,0.12,0.11,0.07,0.11,0.09,0.06,0.16,0.13,0.09,0.08,0.1,0.11,0.12,0.08,0.15,0.12,0.07,0.08,0.1,0.1,0.08,0.11,0.17,0.11,0.05,0.09,0.1,0.09,0.13,0,10.16,-0.63,1316.67,653.85,1800,4.98,4.18,3.47,6.1,5.23,6.1,12.67},2},
{{0.06,0.16,0.06,0.1,0.12,0.09,0.09,0.11,0.12,0.12,0.09,0.11,0.12,0.07,0.13,0.08,0.15,0.1,0.08,0.08,0.1,0.08,0.08,0.12,0.13,0.07,0.12,0.1,0.1,0.14,0,10.05,-0.36,2400,603.33,2250,5.05,4.24,3.38,6.17,5.28,6.17,12.65},2},
{{0.06,0.13,0.12,0.08,0.1,0.11,0.08,0.11,0.13,0.1,0.11,0.11,0.12,0.07,0.13,0.11,0.13,0.07,0.07,0.1,0.06,0.1,0.14,0.09,0.12,0.08,0.13,0.1,0.09,0.11,0,9.96,-0.59,1375,541.18,1200,4.82,4.4,3.17,5.92,5.54,5.92,12.41},2},
{{0.08,0.09,0.13,0.08,0.09,0.12,0.11,0.09,0.1,0.13,0.1,0.11,0.12,0.08,0.13,0.11,0.12,0.06,0.08,0.1,0.09,0.13,0.15,0.07,0.06,0.1,0.09,0.12,0.1,0.12,0,10.11,-0.56,1687.5,507.89,2900,4.94,4.34,3.5,6.14,5.48,6.14,12.65},2},
{{0.08,0.07,0.11,0.1,0.12,0.12,0.13,0.1,0.07,0.12,0.07,0.11,0.08,0.09,0.14,0.16,0.13,0.09,0.07,0.05,0.08,0.09,0.11,0.09,0.12,0.13,0.07,0.13,0.12,0.09,0,10.35,-0.67,2650,730.77,3000,4.76,3.73,2.98,6.16,4.8,6.16,12.5},2},
{{0.09,0.09,0.12,0.07,0.1,0.09,0.09,0.13,0.12,0.12,0.08,0.12,0.1,0.11,0.1,0.13,0.11,0.08,0.09,0.06,0.09,0.12,0.13,0.1,0.09,0.14,0.04,0.09,0.12,0.11,0,10.13,-0.71,2216.67,494.44,1625,5.22,4.25,3.34,6.45,5.36,6.45,12.79},2},
{{0.09,0.1,0.11,0.08,0.09,0.13,0.12,0.12,0.07,0.12,0.09,0.1,0.11,0.1,0.16,0.11,0.07,0.06,0.11,0.08,0.11,0.16,0.1,0.07,0.06,0.1,0.09,0.09,0.15,0.1,0,10.25,-0.74,1325,457.5,1750,4.95,4.41,3.37,6.26,5.62,6.26,12.73},2},
{{0.11,0.08,0.12,0.09,0.07,0.12,0.14,0.09,0.09,0.12,0.12,0.1,0.09,0.09,0.1,0.15,0.07,0.09,0.07,0.11,0.09,0.14,0.08,0.09,0.13,0.11,0.09,0.09,0.1,0.11,0,10.19,-0.73,2875,423.91,4475,5.15,4.73,3.18,6.47,5.92,6.47,12.77},2},
{{0.02,0.03,0.03,0.04,0.09,0.08,0.05,0.04,0.04,0.02,0.02,0.04,0.03,0.06,0.08,0.05,0.05,0.04,0.03,0.03,0.01,0.03,0.05,0.05,0.04,0.08,0.06,0.07,0.01,0.03,0,4.19,-0.24,1000,500,975,1.45,2.68,0.97,4.8,7.49,4.8,4.79},2},
{{0.23,0.06,0.13,0.11,0.13,0.1,0.07,0.1,0.06,0,0.09,0.1,0.13,0.06,0.07,0.18,0.05,0.1,0.1,0,0.11,0.14,0.09,0.07,0.09,0.1,0.1,0.11,0.12,0,0,9.4,-0.62,1500,378.85,2275,7.1,7.59,3.87,8.14,9.03,8.14,15.14},0},
{{0.13,0.08,0.09,0.13,0.09,0.1,0.14,0.07,0.08,0,0.08,0.14,0.11,0.08,0.13,0.08,0.1,0.1,0.1,0,0.1,0.1,0.11,0.11,0.09,0.12,0.1,0.06,0.14,0,0,8.9,-0.57,1016.67,325.86,1750,7.4,7.56,3.75,8.48,8.99,8.48,14.99},0},
{{0.11,0.1,0.12,0.09,0.08,0.16,0.11,0.09,0.08,0,0.09,0.12,0.12,0.08,0.12,0.1,0.12,0.09,0.07,0,0.12,0.11,0.08,0.1,0.11,0.08,0.09,0.13,0.12,0,0,8.77,-0.62,1216.67,342.86,4075,7.43,7.49,3.69,8.38,8.91,8.38,14.79},0},
{{0.11,0.13,0.08,0.08,0.12,0.09,0.1,0.08,0.13,0,0.09,0.11,0.13,0.08,0.11,0.09,0.12,0.1,0.08,0,0.1,0.11,0.12,0.1,0.06,0.11,0.11,0.1,0.11,0,0,9.03,-0.59,1450,325.93,1487.5,7.82,7.68,3.55,8.8,9.06,8.8,15.25},0},
{{0.1,0.11,0.12,0.13,0.09,0.11,0.07,0.11,0.08,0,0.11,0.1,0.12,0.09,0.12,0.11,0.09,0.09,0.09,0,0.11,0.11,0.07,0.12,0.11,0.07,0.09,0.14,0.14,0,0,8.77,-0.72,983.33,384,2975,7.18,7.57,3.58,8.3,9,8.3,14.7},0},
{{0.1,0.12,0.1,0.11,0.09,0.09,0.12,0.13,0.11,0,0.13,0.09,0.09,0.11,0.12,0.08,0.1,0.09,0.11,0,0.11,0.1,0.11,0.1,0.07,0.06,0.13,0.11,0.14,0,0,8.62,-0.67,1325,348.15,3400,7.24,7.81,3.58,8.16,9.27,8.16,14.82},0},
{{0.08,0.09,0.11,0.08,0.12,0.13,0.07,0.12,0.12,0,0.09,0.11,0.08,0.11,0.1,0.12,0.11,0.11,0.1,0,0.1,0.09,0.08,0.13,0.12,0.09,0.1,0.11,0.11,0,0,9.03,-0.48,1483.33,325.86,1483.33,7.55,7.5,3.57,8.53,8.95,8.53,15.12},0},
{{0.08,0.13,0.09,0.13,0.09,0.11,0.09,0.11,0.11,0,0.12,0.1,0.09,0.11,0.1,0.08,0.09,0.11,0.14,0,0.1,0.09,0.12,0.13,0.09,0.08,0.08,0.13,0.1,0,0,8.97,-0.75,1475,331.03,1425,7.18,7.93,3.46,8.19,9.35,8.19,14.98},0},
{{0.07,0.12,0.1,0.13,0.08,0.12,0.08,0.12,0.1,0,0.09,0.11,0.1,0.08,0.11,0.09,0.13,0.09,0.1,0,0.1,0.11,0.12,0.11,0.06,0.12,0.07,0.11,0.11,0,0,9.16,-0.65,2583.33,338.89,2450,7.32,7.57,3.62,8.39,9,8.39,15.11},0},
{{0.08,0.13,0.08,0.1,0.14,0.09,0.07,0.11,0.09,0,0.09,0.11,0.11,0.1,0.1,0.09,0.1,0.12,0.1,0,0.1,0.13,0.12,0.08,0.09,0.09,0.1,0.11,0.1,0,0,9.13,-0.59,2633.33,329.63,2200,7.49,7.58,3.67,8.5,9.02,8.5,15.11},0},
{{0.06,0.11,0.14,0.11,0.08,0.11,0.1,0.11,0.11,0,0.11,0.1,0.09,0.11,0.1,0.1,0.09,0.14,0.09,0,0.1,0.12,0.09,0.11,0.11,0.12,0.08,0.1,0.1,0,0,9.12,-0.69,1018.75,344.64,2716.67,7.2,7.4,3.37,8.26,8.84,8.26,14.83},0},
{{0.06,0.12,0.12,0.11,0.1,0.11,0.13,0.06,0.12,0,0.09,0.12,0.07,0.11,0.08,0.16,0.11,0.09,0.08,0,0.07,0.07,0.15,0.13,0.1,0.14,0.12,0.12,0.06,0,0,9.21,-0.58,1283.33,357.69,2225,7.31,7.26,3.08,8.4,8.62,8.4,14.75},0},
{{0.07,0.13,0.11,0.11,0.08,0.09,0.13,0.07,0.1,0,0.1,0.12,0.08,0.13,0.07,0.16,0.07,0.09,0.12,0,0.09,0.07,0.11,0.12,0.11,0.1,0.11,0.1,0.11,0,0,8.9,-0.38,1541.67,359.62,3775,7.46,7.53,3.56,8.53,8.93,8.53,14.83},0},
{{0.08,0.1,0.13,0.09,0.15,0.08,0.06,0.1,0.12,0,0.11,0.1,0.11,0.11,0.08,0.08,0.11,0.11,0.13,0,0.09,0.1,0.11,0.07,0.14,0.07,0.16,0.07,0.1,0,0,8.96,-0.46,668.18,327.78,2200,7.42,7.85,3.49,8.49,9.13,8.49,14.94},0},
{{0.07,0.13,0.11,0.09,0.13,0.1,0.08,0.13,0.09,0,0.09,0.13,0.07,0.12,0.1,0.1,0.12,0.09,0.07,0,0.09,0.11,0.08,0.12,0.09,0.1,0.12,0.09,0.11,0,0,9.02,-0.36,1087.5,350,1425,7.35,7.52,3.59,8.31,9.03,8.31,15.02},0},
{{0.13,0.08,0.1,0.09,0.09,0.11,0.07,0.12,0.11,0,0.09,0.12,0.09,0.1,0.12,0.1,0.08,0.13,0.08,0,0.12,0.1,0.07,0.08,0.12,0.13,0.1,0.09,0.12,0,0,9.05,-0.49,2700,357.41,2950,7.94,7.54,3.74,9,8.9,9,15.27},0},
{{0.14,0.12,0.06,0.09,0.13,0.12,0.06,0.1,0.1,0,0.1,0.12,0.11,0.09,0.11,0.1,0.11,0.09,0.07,0,0.1,0.15,0.09,0.06,0.11,0.07,0.12,0.09,0.13,0,0,8.83,-0.39,1164.29,342.59,1125,7.73,7.74,3.89,8.74,9.19,8.74,15.32},0},
{{0.12,0.08,0.1,0.09,0.11,0.13,0.09,0.08,0.13,0,0.13,0.09,0.1,0.12,0.11,0.08,0.06,0.09,0.15,0,0.14,0.07,0.08,0.11,0.11,0.07,0.08,0.1,0.19,0,0,8.84,-0.74,1171.43,292.42,1850,7.47,7.87,4.01,8.51,9.3,8.51,15.16},0},
{{0.07,0.14,0.12,0.11,0.07,0.11,0.1,0.14,0.09,0,0.08,0.12,0.12,0.09,0.11,0.08,0.13,0.09,0.11,0,0.1,0.09,0.11,0.08,0.11,0.08,0.1,0.13,0.12,0,0,8.93,-0.51,1900,318.33,1150,7.26,7.61,3.53,8.21,9.03,8.21,14.87},0},
{{0.08,0.12,0.1,0.08,0.13,0.11,0.06,0.08,0.13,0,0.08,0.12,0.08,0.13,0.11,0.07,0.11,0.13,0.05,0,0.09,0.07,0.13,0.13,0.1,0.13,0.12,0.07,0.06,0,0,9.22,-0.45,1262.5,361.54,2016.67,7.79,7.45,3.52,8.87,8.95,8.87,15.37},0},
{{0.09,0.13,0.08,0.12,0.1,0.05,0.14,0.09,0.1,0,0.11,0.08,0.11,0.09,0.09,0.13,0.1,0.12,0.07,0,0.1,0.13,0.09,0.07,0.07,0.13,0.14,0.1,0.09,0,0,9.18,-0.5,1264.29,325,2062.5,7.61,7.46,3.61,8.62,8.96,8.62,15.27},0},
{{0.11,0.09,0.11,0.09,0.06,0.11,0.12,0.12,0.12,0,0.12,0.11,0.12,0.07,0.12,0.07,0.1,0.1,0.1,0,0.11,0.12,0.1,0.08,0.12,0.07,0.1,0.1,0.1,0,0,8.72,-0.41,1150,331.03,1700,7.8,7.95,3.9,8.74,9.32,8.74,15.29},0},
{{0.08,0.13,0.11,0.06,0.1,0.08,0.13,0.15,0.09,0,0.12,0.08,0.08,0.14,0.1,0.08,0.09,0.13,0.11,0,0.09,0.11,0.11,0.12,0.07,0.11,0.11,0.1,0.11,0,0,8.97,-0.5,1880,351.85,3050,7.58,7.68,3.46,8.47,9.14,8.47,15.08},0},
{{0.1,0.1,0.13,0.09,0.05,0.1,0.11,0.1,0.09,0,0.1,0.1,0.09,0.11,0.11,0.1,0.12,0.07,0.1,0,0.09,0.12,0.08,0.13,0.1,0.09,0.12,0.08,0.08,0,0,9.23,-0.46,892.86,364.81,3025,7.93,7.39,3.67,9.03,8.73,9.03,15.31},0},
{{0.12,0.08,0.08,0.12,0.09,0.07,0.13,0.12,0.11,0,0.12,0.08,0.14,0.07,0.09,0.08,0.12,0.11,0.09,0,0.13,0.08,0.14,0.07,0.1,0.12,0.07,0.11,0.1,0,0,9.11,-0.63,3116.67,386,2750,7.79,7.87,3.63,8.85,9.05,8.85,15.3},0},
{{0.15,0.08,0.07,0.09,0.12,0.08,0.09,0.12,0.09,0,0.13,0.07,0.11,0.12,0.09,0.08,0.14,0.07,0.09,0,0.12,0.1,0.11,0.09,0.13,0.11,0.09,0.07,0.08,0,0,8.9,-0.64,885,359.62,1500,8.14,7.83,3.74,9.2,9.17,9.2,15.59},0},
{{0.09,0.11,0.08,0.1,0.09,0.09,0.09,0.1,0.13,0,0.11,0.09,0.1,0.1,0.11,0.09,0.12,0.08,0.09,0,0.11,0.1,0.06,0.14,0.09,0.12,0.1,0.09,0.06,0,0,9.08,-0.43,3025,350,1125,7.96,7.57,3.71,9.05,8.97,9.05,15.44},0},
{{0.1,0.08,0.07,0.11,0.12,0.1,0.13,0.1,0.11,0,0.1,0.09,0.1,0.1,0.1,0.12,0.11,0.09,0.12,0,0.06,0.13,0.11,0.12,0.09,0.13,0.12,0.09,0.07,0,0,9.37,-0.68,1168.75,344.64,3050,7.48,7.28,3.15,8.5,8.65,8.5,14.96},0},
{{0.14,0.05,0.1,0.11,0.09,0.13,0.12,0.09,0.11,0,0.11,0.08,0.1,0.11,0.09,0.09,0.1,0.12,0.11,0,0.12,0.09,0.09,0.11,0.11,0.13,0.12,0.08,0.05,0,0,9.4,-0.68,3050,363.46,1550,7.62,7.67,3.46,8.62,9.03,8.62,15.41},0},
{{0.1,0.09,0.12,0.08,0.06,0.11,0.16,0.09,0.1,0,0.13,0.08,0.1,0.11,0.09,0.09,0.1,0.1,0.11,0,0.11,0.08,0.07,0.12,0.09,0.14,0.1,0.14,0.05,0,0,8.94,-0.59,1320,339.29,3400,7.73,7.82,3.31,8.71,9.13,8.71,15.05},0},
{{0.07,0.04,0.09,0.14,0.15,0.09,0.07,0.13,0.05,0,0.05,0.06,0.09,0.1,0.14,0.14,0.08,0.08,0.07,0,0.08,0.06,0.11,0.07,0.09,0.09,0.11,0.09,0.11,0,0,8.28,-0.58,1650,425,766.67,5.49,5.26,2.62,7.55,7.57,7.55,11.92},0},
{{0.1,0.09,0.08,0.11,0.1,0.14,0.13,0.11,0.11,0.06,0.07,0.12,0.1,0.1,0.15,0.07,0.16,0.07,0.08,0.1,0.08,0.1,0.07,0.08,0.14,0.15,0.07,0.09,0.12,0.12,0,9.74,-0.47,2375,600,1250,3.94,4.44,3.63,4.98,5.39,4.98,12.01},2},
{{0.11,0.11,0.11,0.1,0.13,0.09,0.12,0.06,0.13,0.06,0.1,0.07,0.12,0.13,0.11,0.13,0.07,0.13,0.08,0.07,0.11,0.1,0.09,0.09,0.11,0.08,0.09,0.11,0.12,0.12,0,9.7,-0.54,4150,707.69,1833.33,4.32,4.44,4.08,5.32,5.47,5.32,12.35},2},
{{0.09,0.12,0.11,0.09,0.1,0.11,0.07,0.13,0.09,0.1,0.1,0.1,0.12,0.11,0.09,0.11,0.09,0.1,0.12,0.09,0.12,0.09,0.08,0.08,0.1,0.09,0.09,0.14,0.12,0.1,0,9.72,-0.53,3775,870,4300,4.28,4.68,3.94,5.22,5.64,5.22,12.35},2},
{{0.12,0.08,0.08,0.13,0.09,0.13,0.11,0.08,0.08,0.12,0.12,0.09,0.1,0.11,0.09,0.13,0.07,0.12,0.1,0.09,0.12,0.1,0.07,0.11,0.11,0.1,0.08,0.15,0.08,0.1,0,9.58,-0.83,2466.67,675,2300,4.42,4.94,3.88,5.57,6.04,5.57,12.57},2},
{{0.13,0.09,0.08,0.12,0.1,0.13,0.09,0.09,0.08,0.11,0.11,0.09,0.1,0.1,0.11,0.1,0.09,0.12,0.1,0.11,0.12,0.1,0.09,0.12,0.07,0.08,0.12,0.08,0.14,0.08,0,9.77,-0.81,2433.33,741.67,1825,4.52,4.82,4.07,5.65,5.91,5.65,12.71},2},
{{0.1,0.11,0.09,0.08,0.1,0.13,0.1,0.1,0.09,0.13,0.12,0.08,0.1,0.09,0.1,0.11,0.11,0.08,0.13,0.1,0.11,0.15,0.11,0.09,0.07,0.08,0.12,0.13,0.07,0.09,0,9.69,-1.09,2300,613.33,1600,4.41,5.04,3.96,5.54,6.17,5.54,12.74},2},
{{0.09,0.11,0.11,0.11,0.05,0.09,0.13,0.11,0.11,0.11,0.13,0.08,0.11,0.07,0.1,0.12,0.09,0.08,0.13,0.09,0.14,0.06,0.13,0.12,0.08,0.08,0.09,0.12,0.12,0.09,0,9.61,-1.01,2075,730.77,2087.5,4.26,5.06,3.85,5.29,6.15,5.29,12.5},2},
{{0.11,0.1,0.08,0.12,0.11,0.11,0.09,0.09,0.08,0.12,0.1,0.1,0.1,0.09,0.12,0.08,0.11,0.13,0.1,0.08,0.1,0.12,0.14,0.09,0.06,0.1,0.14,0.09,0.08,0.1,0,9.77,-1.02,1033.33,822.73,4175,4.37,4.76,3.83,5.44,5.8,5.44,12.54},2},
{{0.15,0.08,0.09,0.09,0.13,0.06,0.08,0.12,0.08,0.14,0.13,0.08,0.13,0.08,0.1,0.09,0.11,0.11,0.11,0.09,0.16,0.07,0.09,0.13,0.07,0.09,0.12,0.11,0.08,0.09,0,9.63,-1.11,2700,808.33,2262.5,4.72,4.93,3.84,5.79,5.9,5.79,12.57},2},
{{0.13,0.12,0.1,0.08,0.08,0.08,0.08,0.1,0.12,0.13,0.12,0.09,0.1,0.11,0.07,0.1,0.12,0.1,0.12,0.1,0.13,0.09,0.13,0.08,0.09,0.11,0.1,0.11,0.09,0.09,0,9.65,-1.18,2037.5,696.15,1800,4.91,5,3.79,5.92,6.02,5.92,12.71},2},
{{0.08,0.14,0.09,0.09,0.09,0.11,0.12,0.08,0.11,0.11,0.13,0.07,0.08,0.11,0.11,0.08,0.09,0.1,0.12,0.12,0.08,0.14,0.11,0.09,0.09,0.16,0.12,0.05,0.08,0.1,0,9.88,-0.97,1633.33,575,2300,4.37,5.16,3.69,5.37,6.24,5.37,12.79},2},
{{0.1,0.11,0.11,0.08,0.09,0.1,0.1,0.1,0.09,0.13,0.13,0.11,0.05,0.09,0.1,0.08,0.12,0.1,0.12,0.11,0.11,0.12,0.14,0.1,0.09,0.08,0.12,0.09,0.06,0.12,0,9.9,-1.1,1450,704.17,1216.67,4.67,5.21,3.84,5.78,6.25,5.78,12.91},2},
{{0.13,0.09,0.07,0.13,0.1,0.11,0.09,0.11,0.07,0.13,0.11,0.11,0.09,0.11,0.09,0.08,0.09,0.1,0.13,0.11,0.11,0.09,0.17,0.1,0.09,0.12,0.09,0.05,0.09,0.12,0,9.79,-1.1,1056.25,758.33,2025,4.61,5.02,3.79,5.78,6.02,5.78,12.78},2},
{{0.11,0.09,0.13,0.1,0.06,0.08,0.12,0.13,0.08,0.12,0.13,0.09,0.07,0.12,0.1,0.1,0.09,0.14,0.09,0.1,0.09,0.09,0.13,0.12,0.09,0.13,0.09,0.07,0.09,0.12,0,9.8,-0.77,1433.33,566.67,2325,4.44,4.89,3.82,5.42,5.91,5.42,12.59},2},
{{0.11,0.1,0.09,0.1,0.09,0.09,0.12,0.11,0.1,0.11,0.1,0.11,0.13,0.1,0.07,0.08,0.11,0.11,0.1,0.12,0.1,0.13,0.09,0.11,0.11,0.1,0.12,0.08,0.09,0.1,0,9.79,-1.02,1566.67,777.27,1450,4.38,5,3.69,5.43,5.91,5.43,12.51},2},
{{0.09,0.12,0.1,0.07,0.11,0.1,0.08,0.08,0.14,0.11,0.12,0.09,0.08,0.09,0.09,0.11,0.07,0.11,0.14,0.12,0.08,0.11,0.11,0.12,0.11,0.1,0.11,0.11,0.08,0.09,0,10.01,-0.88,2325,521.88,1900,4.43,4.97,3.55,5.38,6,5.38,12.63},2},
{{0.12,0.13,0.09,0.06,0.1,0.06,0.1,0.12,0.12,0.14,0.12,0.13,0.06,0.11,0.08,0.05,0.11,0.12,0.12,0.12,0.09,0.1,0.11,0.09,0.1,0.13,0.13,0.07,0.1,0.11,0,9.91,-0.8,3575,567.65,3000,4.73,5.19,3.72,5.65,6.09,5.65,12.72},2},
{{0.05,0.17,0.1,0.08,0.12,0.1,0.08,0.1,0.09,0.12,0.09,0.1,0.07,0.14,0.09,0.07,0.15,0.11,0.09,0.1,0.1,0.08,0.11,0.12,0.11,0.11,0.11,0.1,0.08,0.11,0,10,-0.81,1716.67,680.77,2050,4.41,4.72,3.74,5.36,5.66,5.36,12.62},2},
{{0.1,0.08,0.17,0.11,0.08,0.11,0.07,0.1,0.08,0.14,0.1,0.13,0.09,0.08,0.1,0.08,0.13,0.12,0.08,0.1,0.09,0.11,0.1,0.11,0.11,0.09,0.08,0.12,0.12,0.1,0,9.72,-0.71,2062.5,722.73,2416.67,4.66,4.84,3.87,5.61,5.81,5.61,12.54},2},
{{0.09,0.11,0.12,0.07,0.12,0.12,0.06,0.1,0.11,0.13,0.11,0.13,0.11,0.06,0.09,0.07,0.12,0.11,0.11,0.11,0.13,0.09,0.11,0.08,0.11,0.1,0.13,0.07,0.09,0.12,0,9.73,-0.82,2000,809.09,1780,4.46,5.16,3.93,5.44,6.06,5.44,12.63},2},
{{0.11,0.08,0.14,0.07,0.06,0.12,0.09,0.11,0.17,0.07,0.12,0.11,0.09,0.06,0.1,0.13,0.1,0.08,0.13,0.12,0.11,0.1,0.11,0.1,0.08,0.09,0.11,0.14,0.08,0.11,0,9.79,-0.79,4100,571.88,2062.5,4.33,5.02,3.78,5.36,6.08,5.36,12.53},2},
{{0.09,0.11,0.1,0.09,0.12,0.11,0.1,0.08,0.14,0.09,0.11,0.1,0.09,0.1,0.11,0.09,0.12,0.11,0.07,0.11,0.09,0.12,0.08,0.1,0.08,0.13,0.12,0.1,0.09,0.11,0,9.82,-0.71,2433.33,766.67,1387.5,4.2,4.77,3.74,5.17,5.77,5.17,12.44},2},
{{0.11,0.08,0.12,0.1,0.15,0.06,0.09,0.08,0.14,0.1,0.1,0.13,0.12,0.12,0.08,0.09,0.07,0.1,0.12,0.11,0.12,0.1,0.07,0.1,0.14,0.1,0.04,0.11,0.13,0.11,0,9.72,-0.74,1800,676.92,1375,4.3,4.96,3.94,5.23,5.82,5.23,12.3},2},
{{0.09,0.11,0.09,0.09,0.13,0.1,0.1,0.11,0.1,0.1,0.1,0.12,0.11,0.11,0.11,0.07,0.1,0.08,0.11,0.1,0.09,0.1,0.09,0.1,0.14,0.08,0.1,0.11,0.12,0.08,0,9.54,-0.85,1875,755,1650,4.17,4.82,3.59,5.17,5.75,5.17,12.01},2},
{{0.12,0.08,0.1,0.09,0.1,0.1,0.11,0.15,0.09,0.09,0.1,0.13,0.09,0.1,0.1,0.08,0.11,0.08,0.12,0.12,0.08,0.09,0.1,0.12,0.08,0.11,0.13,0.12,0.12,0.07,0,9.83,-0.74,1575,513.89,1670,4.27,4.98,3.5,5.31,5.88,5.31,12.26},2},
{{0.1,0.09,0.08,0.14,0.09,0.1,0.15,0.11,0.09,0.08,0.08,0.13,0.1,0.08,0.14,0.11,0.09,0.08,0.13,0.08,0.09,0.12,0.09,0.11,0.09,0.1,0.09,0.13,0.12,0.08,0,9.77,-0.99,2175,1000,2700,3.99,4.54,3.57,5,5.52,5,12.1},2},
{{0.1,0.08,0.12,0.1,0.15,0.11,0.11,0.09,0.08,0.09,0.06,0.11,0.14,0.1,0.1,0.18,0.09,0.08,0.06,0.1,0.09,0.12,0.07,0.09,0.16,0.08,0.11,0.13,0.09,0.09,0,9.72,-0.83,925,646.15,1550,3.98,4.18,3.59,4.92,5.15,4.92,11.96},2},
{{0.08,0.12,0.1,0.1,0.11,0.09,0.12,0.12,0.09,0.09,0.1,0.08,0.11,0.07,0.13,0.18,0.07,0.1,0.08,0.1,0.11,0.1,0.1,0.1,0.12,0.06,0.08,0.06,0.17,0.12,0,9.76,-0.64,2116.67,606.25,2700,4.06,4.54,4.09,5.02,5.72,5.02,12.4},2},
{{0.09,0.1,0.1,0.14,0.1,0.14,0.08,0.09,0.11,0.07,0.09,0.08,0.13,0.1,0.1,0.12,0.12,0.09,0.11,0.09,0.09,0.1,0.09,0.11,0.11,0.1,0.1,0.08,0.11,0.14,0,9.92,-0.36,2200,713.64,2200,3.99,4.44,3.97,4.9,5.45,4.9,12.32},2},
{{0.09,0.1,0.1,0.1,0.16,0.1,0.11,0.1,0.09,0.08,0.02,0.13,0.11,0.12,0.16,0.12,0.11,0.13,0.06,0.06,0.06,0.09,0.07,0.09,0.16,0.16,0.09,0.1,0.1,0.11,0,10,-0.47,1225,1027.78,4475,3.89,3.75,3.31,4.76,4.57,4.76,11.88},2},
{{0.09,0.09,0.1,0.15,0.13,0.11,0.06,0.1,0.11,0.1,0.08,0.12,0.1,0.13,0.1,0.12,0.08,0.12,0.08,0.09,0.08,0.11,0.05,0.13,0.13,0.11,0.07,0.08,0.14,0.14,0,9.7,-0.35,2400,725,3375,4.04,4.47,3.83,4.94,5.4,4.94,12.02},2},
{{0.09,0.12,0.09,0.12,0.09,0.09,0.12,0.13,0.11,0.06,0.07,0.1,0.15,0.17,0.05,0.11,0.12,0.08,0.07,0.11,0.06,0.07,0.12,0.12,0.11,0.11,0.12,0.14,0.11,0.08,0,9.73,-0.58,3325,590,2216.67,4.04,4.45,3.33,5.01,5.29,5.01,11.78},2},
{{0.03,0.01,0.05,0.04,0.04,0.07,0.06,0.04,0.06,0.02,0.02,0.05,0.05,0.04,0.07,0.04,0.03,0.03,0.04,0.04,0.01,0.01,0.05,0.04,0.08,0.05,0.07,0.04,0.03,0.03,0,3.84,-0.16,600,570,950,1.32,2.59,1.1,4.26,7.91,4.26,4.47},2},
{{0.1,0.14,0.11,0.12,0.1,0.06,0.1,0.11,0.1,0.08,0.09,0.11,0.1,0.09,0.08,0.15,0.15,0.11,0.05,0.02,0.11,0.07,0.12,0.11,0.09,0.14,0.09,0.08,0.1,0.13,0,9.93,0.39,1125,389.13,833.33,4.77,6.19,4.08,6.15,7.38,6.15,13.5},0},
{{0.13,0.15,0.1,0.08,0.07,0.09,0.11,0.12,0.06,0.12,0.09,0.13,0.09,0.09,0.1,0.15,0.09,0.08,0.08,0.03,0.12,0.06,0.13,0.09,0.08,0.11,0.12,0.12,0.08,0.12,0,9.86,0.42,1510,372,1475,5.12,6.5,3.98,6.45,7.73,6.45,13.73},0},
{{0.13,0.14,0.09,0.1,0.05,0.16,0.11,0.06,0.06,0.13,0.08,0.13,0.1,0.06,0.16,0.12,0.09,0.08,0.07,0.01,0.14,0.11,0.06,0.15,0.06,0.08,0.12,0.11,0.06,0.13,0,9.98,0.16,1233.33,359.62,1100,5.21,6.34,4.38,6.74,7.68,6.74,13.95},0},
{{0.13,0.12,0.1,0.08,0.09,0.08,0.08,0.11,0.12,0.12,0.13,0.06,0.14,0.13,0.07,0.11,0.11,0.08,0.05,0.02,0.1,0.09,0.13,0.1,0.1,0.15,0.12,0.09,0.03,0.12,0,9.54,0.37,918.75,450,3300,5.49,6.68,4.02,7.03,8.06,7.03,13.99},0},
{{0.13,0.12,0.13,0.08,0.08,0.05,0.07,0.1,0.12,0.15,0.11,0.13,0.09,0.07,0.1,0.13,0.1,0.12,0.06,0,0.09,0.15,0.08,0.06,0.09,0.13,0.14,0.08,0.05,0.14,0,9.76,0.27,2212.5,369.23,1850,5.59,6.83,4.03,6.97,8.11,6.97,14.14},0},
{{0.1,0.12,0.12,0.07,0.1,0.07,0.11,0.12,0.08,0.13,0.09,0.12,0.14,0.12,0.1,0.07,0.07,0.09,0.11,0.01,0.1,0.13,0.1,0.09,0.08,0.11,0.1,0.08,0.11,0.12,0,9.44,0.09,1042.86,329.31,1200,5.39,6.74,4.06,7.08,7.94,7.08,13.56},0},
{{0.1,0.07,0.12,0.12,0.11,0.09,0.13,0.08,0.07,0.12,0.08,0.13,0.12,0.11,0.12,0.08,0.1,0.08,0.12,0.02,0.09,0.16,0.1,0.06,0.11,0.11,0.08,0.1,0.11,0.1,0,9.78,0.02,1480,332.76,375,4.89,6.55,3.89,6.68,7.76,6.68,13.45},0},
{{0.11,0.09,0.14,0.12,0.05,0.1,0.14,0.07,0.09,0.12,0.11,0.1,0.1,0.09,0.12,0.1,0.08,0.1,0.09,0.03,0.12,0.12,0.07,0.12,0.1,0.11,0.1,0.08,0.11,0.11,0,9.99,0.17,1487.5,370,2225,5.11,6.65,3.91,6.79,7.93,6.79,13.91},0},
{{0.09,0.12,0.15,0.12,0.1,0.08,0.03,0.1,0.13,0.12,0.12,0.08,0.1,0.08,0.09,0.13,0.15,0.08,0.06,0.03,0.09,0.12,0.11,0.09,0.12,0.15,0.08,0.07,0.09,0.11,0,9.96,0.15,2033.33,397.92,2033.33,4.93,6.73,3.69,6.46,8.04,6.46,13.95},0},
{{0.08,0.08,0.1,0.12,0.13,0.1,0.11,0.11,0.09,0.09,0.1,0.11,0.13,0.12,0.06,0.09,0.05,0.14,0.13,0.01,0.1,0.08,0.07,0.15,0.08,0.13,0.14,0.1,0.08,0.09,0,9.89,0.1,1600,308.33,2175,4.65,7.12,3.58,6.23,8.23,6.23,13.53},0},
{{0.09,0.08,0.09,0.13,0.13,0.1,0.1,0.11,0.1,0.1,0.1,0.06,0.14,0.09,0.1,0.08,0.14,0.12,0.1,0.04,0.09,0.07,0.11,0.1,0.12,0.17,0.07,0.1,0.1,0.09,0,10.29,0.21,1137.5,371.15,1358.33,4.5,6.41,3.48,5.99,7.63,5.99,13.66},0},
{{0.13,0.11,0.09,0.09,0.11,0.09,0.11,0.08,0.1,0.12,0.08,0.13,0.12,0.09,0.08,0.09,0.11,0.08,0.13,0.04,0.09,0.07,0.08,0.09,0.15,0.13,0.1,0.1,0.07,0.13,0,10.19,0.52,950,358,1466.67,5.04,6.79,3.75,6.6,7.93,6.6,13.88},0},
{{0.1,0.09,0.12,0.08,0.11,0.11,0.11,0.11,0.08,0.11,0.09,0.14,0.14,0.06,0.07,0.09,0.1,0.09,0.15,0.02,0.1,0.07,0.08,0.12,0.13,0.11,0.09,0.12,0.11,0.09,0,9.8,0.26,2062.5,357.69,3800,4.87,7.05,3.62,6.34,8.2,6.34,13.64},0},
{{0.09,0.11,0.11,0.1,0.11,0.12,0.06,0.1,0.12,0.11,0.12,0.06,0.13,0.1,0.08,0.11,0.12,0.09,0.13,0.02,0.1,0.08,0.08,0.13,0.14,0.11,0.08,0.08,0.13,0.1,0,10.14,0.32,2950,346.43,2275,4.93,6.87,3.7,6.34,8.13,6.34,14},0},
{{0.09,0.06,0.12,0.12,0.13,0.12,0.12,0.08,0.09,0.1,0.1,0.09,0.1,0.12,0.13,0.11,0.06,0.1,0.1,0.03,0.1,0.09,0.1,0.12,0.1,0.1,0.13,0.09,0.12,0.08,0,9.91,0.16,2275,400,1283.33,4.45,6.54,3.63,5.97,7.89,5.97,13.43},0},
{{0.11,0.1,0.05,0.08,0.14,0.12,0.13,0.09,0.12,0.09,0.11,0.13,0.07,0.09,0.11,0.12,0.11,0.09,0.09,0.01,0.1,0.09,0.09,0.12,0.09,0.1,0.09,0.1,0.12,0.11,0,9.75,0.4,750,383.33,1850,4.75,6.73,3.78,6.09,8.05,6.09,13.58},0},
{{0.09,0.13,0.06,0.08,0.12,0.12,0.1,0.12,0.12,0.09,0.11,0.1,0.12,0.06,0.1,0.11,0.09,0.13,0.09,0.01,0.12,0.09,0.08,0.11,0.13,0.07,0.1,0.14,0.09,0.11,0,10.08,0.29,1850,371.15,3233.33,4.84,6.9,3.93,6.16,8.19,6.16,13.99},0},
{{0.1,0.12,0.09,0.09,0.09,0.12,0.09,0.09,0.11,0.13,0.1,0.13,0.06,0.08,0.09,0.12,0.12,0.08,0.11,0.04,0.09,0.08,0.09,0.17,0.07,0.11,0.08,0.12,0.11,0.1,0,10.15,0.47,3250,392,2600,5.21,6.88,3.78,6.63,8.21,6.63,14.22},0},
{{0.11,0.1,0.09,0.1,0.06,0.12,0.14,0.1,0.12,0.08,0.1,0.12,0.1,0.11,0.1,0.09,0.11,0.06,0.15,0.03,0.08,0.13,0.1,0.1,0.11,0.07,0.11,0.12,0.13,0.08,0,9.74,0.25,2650,389.58,1366.67,4.87,6.76,3.81,6.17,8.02,6.17,13.55},0},
{{0.11,0.09,0.12,0.09,0.1,0.1,0.1,0.07,0.14,0.11,0.1,0.11,0.11,0.13,0.07,0.06,0.1,0.11,0.11,0.01,0.12,0.09,0.1,0.09,0.13,0.11,0.05,0.1,0.12,0.12,0,9.8,0.2,1637.5,339.66,1500,5.04,7.08,4.04,6.5,8.25,6.5,13.89},0},
{{0.09,0.14,0.09,0.09,0.1,0.08,0.09,0.13,0.12,0.1,0.12,0.1,0.1,0.08,0.1,0.08,0.13,0.11,0.11,0.01,0.1,0.13,0.08,0.09,0.11,0.09,0.1,0.1,0.1,0.12,0,9.88,0.35,2516.67,358.33,1370,5.02,7.02,4.07,6.22,8.38,6.22,14.13},0},
{{0.1,0.1,0.07,0.08,0.11,0.13,0.1,0.11,0.09,0.13,0.09,0.12,0.08,0.09,0.11,0.1,0.08,0.14,0.11,0.03,0.13,0.12,0.08,0.09,0.12,0.03,0.12,0.13,0.06,0.13,0,10.03,0.05,2200,327.59,1700,5.03,6.84,4.2,6.4,8.21,6.4,14.19},0},
{{0.07,0.12,0.09,0.12,0.11,0.09,0.11,0.11,0.11,0.09,0.1,0.12,0.1,0.08,0.1,0.11,0.09,0.13,0.11,0.04,0.12,0.07,0.13,0.11,0.07,0.1,0.12,0.1,0.08,0.11,0,9.79,0.15,2450,379.17,1850,4.74,6.9,3.98,6.14,8.25,6.14,13.85},0},
{{0.11,0.07,0.1,0.12,0.09,0.13,0.1,0.09,0.13,0.08,0.1,0.09,0.08,0.1,0.15,0.11,0.11,0.08,0.11,0.01,0.08,0.13,0.15,0.11,0.07,0.05,0.09,0.1,0.18,0.07,0,10,0.14,2200,363.46,975,4.7,6.37,3.89,6.08,7.92,6.08,13.8},0},
{{0.1,0.07,0.09,0.12,0.13,0.09,0.09,0.13,0.13,0.07,0.11,0.07,0.1,0.11,0.1,0.1,0.13,0.1,0.08,0.02,0.11,0.1,0.13,0.1,0.08,0.09,0.08,0.11,0.14,0.09,0,9.97,0.14,1616.67,376.92,1810,4.71,6.63,4.01,6.1,8.11,6.1,14},0},
{{0.1,0.07,0.08,0.13,0.13,0.13,0.08,0.11,0.12,0.08,0.11,0.09,0.07,0.12,0.14,0.09,0.1,0.12,0.06,0.03,0.09,0.12,0.13,0.08,0.09,0.06,0.09,0.14,0.13,0.09,0,9.85,0.26,3675,365.38,1900,4.35,6.51,3.89,5.71,8.07,5.71,13.69},0},
{{0.09,0.1,0.11,0.09,0.09,0.13,0.12,0.09,0.11,0.1,0.1,0.11,0.1,0.09,0.12,0.09,0.09,0.12,0.12,0.01,0.11,0.14,0.11,0.07,0.09,0.09,0.1,0.1,0.13,0.1,0,9.92,0.22,2275,361.11,1285.71,4.81,6.74,4.06,6.1,8.04,6.1,13.81},0},
{{0.11,0.11,0.06,0.13,0.1,0.1,0.13,0.12,0.08,0.09,0.09,0.09,0.09,0.17,0.09,0.12,0.08,0.09,0.13,0.03,0.08,0.11,0.11,0.08,0.12,0.1,0.13,0.1,0.11,0.08,0,9.91,0.3,3725,372,1475,4.59,6.46,3.6,5.92,7.77,5.92,13.44},0},
{{0.09,0.06,0.11,0.16,0.12,0.08,0.07,0.14,0.13,0.08,0.13,0.07,0.08,0.12,0.11,0.07,0.12,0.16,0.09,0.03,0.09,0.07,0.15,0.1,0.09,0.11,0.11,0.09,0.12,0.09,0,10.04,0.22,2050,372.92,1825,4.57,6.81,3.68,5.98,8.18,5.98,13.88},0},
{{0.1,0.09,0.13,0.09,0.1,0.11,0.09,0.12,0.11,0.09,0.11,0.09,0.08,0.13,0.08,0.1,0.12,0.09,0.13,0.04,0.12,0.06,0.1,0.1,0.12,0.11,0.1,0.09,0.1,0.11,0,10,0.24,737.5,393.75,1050,4.66,6.77,3.73,6.01,8.09,6.01,13.79},0},
{{0.1,0.11,0.12,0.11,0.09,0.11,0.1,0.1,0.09,0.1,0.1,0.09,0.12,0.14,0.07,0.11,0.09,0.07,0.12,0.05,0.11,0.09,0.08,0.12,0.09,0.1,0.13,0.13,0.09,0.1,0,9.85,0.33,3825,389.13,3150,4.69,6.73,3.78,6.12,7.93,6.12,13.54},0},
{{0.09,0.09,0.08,0.15,0.13,0.09,0.14,0.07,0.11,0.08,0.11,0.09,0.11,0.12,0.1,0.09,0.11,0.14,0.13,0.01,0.07,0.1,0.13,0.12,0.11,0.08,0.11,0.1,0.09,0.11,0,9.57,0.25,1875,387.5,1007.14,4.25,6.56,3.7,5.64,7.82,5.64,13.2},0},
{{0.02,0.01,0.02,0.02,0.02,0.09,0.05,0.02,0.02,0.02,0,0.02,0.03,0.04,0.09,0.05,0.02,0.03,0,0,0.02,0.04,0.02,0.02,0.06,0.06,0.02,0.01,0.02,0.01,0,2.52,-0.2,425,533.33,875,1,1.91,0.67,5.06,8.4,5.06,2.95},0},
{{0.15,0.14,0.12,0.13,0.16,0.11,0,0.08,0.08,0.05,0.03,0.06,0.16,0,0,0.18,0,0.22,0.2,0.17,0.24,0.1,0.27,0,0.09,0.07,0.06,0.06,0.04,0.09,0,9.38,-2.02,391.3,295.31,875,3.41,0.06,0.12,3.42,0.22,3.42,10.19},4},
{{0.05,0.12,0.11,0.11,0.15,0.12,0,0.15,0.12,0.07,0.03,0.04,0.07,0,0,0.21,0,0.3,0.21,0.16,0.05,0.03,0.05,0,0.09,0.12,0.17,0.15,0.14,0.22,0,9.38,-1.9,484.62,295.31,875,3.47,0.05,0.08,3.47,0.07,3.47,10.18},4},
{{0.06,0.05,0.05,0.08,0.08,0.13,0,0.15,0.22,0.17,0.08,0.11,0.1,0,0,0.22,0,0.2,0.16,0.14,0.02,0.03,0.19,0,0.11,0.13,0.16,0.07,0.1,0.18,0,9.37,-1.92,1310,219.32,875,3.52,0.07,0.1,3.53,0.08,3.53,10.19},4},
{{0.05,0.06,0.08,0.11,0.17,0.21,0,0.14,0.12,0.08,0.01,0.05,0.14,0,0,0.34,0,0.26,0.12,0.08,0,0.02,0.05,0,0.12,0.15,0.17,0.18,0.17,0.17,0,9.36,-1.9,296.88,309.68,875,3.48,0.05,0.07,3.48,0.06,3.48,10.17},4},
{{0.01,0.02,0.02,0.07,0.1,0.17,0,0.2,0.25,0.18,0.02,0.06,0.2,0,0,0.37,0,0.21,0.11,0.04,0.03,0.02,0.1,0,0.14,0.14,0.14,0.18,0.11,0.16,0,9.35,-1.92,243.42,300,875,3.54,0.04,0.08,3.55,0.05,3.55,10.18},4},
{{0.01,0.02,0.04,0.05,0.06,0.14,0,0.2,0.35,0.16,0.08,0.17,0.2,0,0,0.25,0,0.22,0.06,0.03,0.14,0.08,0.21,0,0.16,0.1,0.13,0.09,0.04,0.07,0,9.33,-1.99,262.16,351.92,875,3.54,0.05,0.09,3.55,0.07,3.55,10.18},4},
{{0.14,0.13,0.09,0.1,0.12,0.06,0,0.05,0.07,0.01,0.06,0.08,0.09,0,0,0.13,0,0.14,0.1,0.14,0.13,0.1,0.19,0,0.07,0.1,0.05,0.05,0.02,0.06,0,6.99,-1.5,232.26,257.14,875,2.52,1.78,0.38,3.39,2.39,3.39,7.58},4},
{{0,0,0,0,0.43,0.5,0.03,0.02,0.03,0.01,0,0,0,0.02,0.22,0.32,0,0.25,0.13,0.06,0,0,0,0,0.21,0,0.33,0.21,0,0.23,0,-0.9,8.34,232.26,257.14,263.89,3.63,0.04,0.05,3.64,0.12,3.64,9.14},3},
{{0.02,0.09,0.15,0.4,0.27,0.1,0,0,0,0,0,0.06,0.15,0.09,0.29,0.25,0,0.12,0.05,0.01,0,0.01,0.14,0.38,0.32,0,0.11,0.05,0,0.01,0,-0.96,8.2,232.26,257.14,287.5,3.9,0.05,0.08,3.9,0.08,3.9,9.13},3},
{{0.06,0.14,0.48,0.34,0,0,0,0,0,0,0.03,0.11,0.27,0.35,0.17,0.06,0,0.01,0.02,0,0.08,0.14,0.36,0.42,0.01,0,0,0,0,0,0,-1.01,8.07,232.26,257.14,217.86,4.07,0.06,0.07,4.07,0.07,4.07,9.09},3},
{{0.46,0.39,0.15,0.01,0,0,0,0,0,0,0.2,0.61,0.2,0.01,0,0,0,0,0,0,0.49,0.33,0.19,0,0,0,0,0,0,0,0,-1.13,7.95,232.26,257.14,253.95,4.19,0.03,0.04,4.19,0.05,4.19,9.06},3},
{{0.16,0.23,0.05,0,0.01,0.22,0.19,0.11,0.04,0.01,0.04,0.33,0.06,0.03,0.02,0.09,0,0.12,0.14,0.18,0.18,0.14,0.11,0.02,0.21,0,0.18,0.13,0,0.05,0,-0.97,8.16,232.26,257.14,193.75,3.73,0.14,0.17,3.75,0.15,3.75,9.03},3},
{{0,0,0,0,0,0.02,0.22,0.26,0.26,0.26,0,0,0,0,0.02,0.06,0,0.22,0.38,0.33,0,0,0,0,0,0,0.08,0.27,0,0.61,0,-0.84,8.38,232.26,257.14,239.02,3.32,0.04,0.03,3.32,0.05,3.32,9.05},3},
{{0,0,0,0,0,0,0.02,0.06,0.29,0.59,0,0,0,0,0.01,0.15,0,0.34,0.37,0.14,0,0,0,0,0.02,0,0.12,0.37,0,0.49,0,-0.86,8.37,232.26,257.14,258.11,3.26,0.04,0.03,3.26,0.04,3.26,9.03},3},
{{0,0,0,0,0,0.03,0.15,0.21,0.2,0.27,0,0,0.01,0,0.14,0.2,0,0.28,0.12,0.14,0,0,0,0,0.06,0,0.17,0.24,0,0.41,0,-0.77,7.31,232.26,257.14,241.43,2.89,0.1,0.91,3.31,0.12,3.31,7.9},3},
{{0.05,0.07,0.1,0.12,0.09,0.09,0.12,0.12,0.14,0.12,0.11,0.1,0.12,0.1,0.09,0.08,0.09,0.09,0.11,0.12,0.07,0.09,0.08,0.08,0.1,0.1,0.09,0.12,0.15,0.13,0,9.52,1.41,3725,811.11,2225,2.94,4.37,2.34,4.11,5.28,4.11,10.88},5},
{{0.11,0.1,0.09,0.11,0.1,0.15,0.07,0.06,0.1,0.12,0.13,0.09,0.1,0.07,0.13,0.09,0.1,0.1,0.1,0.12,0.11,0.05,0.11,0.09,0.08,0.13,0.13,0.1,0.1,0.12,0,9.43,1.03,1925,730.77,3400,2.63,4.35,2.09,3.67,5.35,3.67,10.64},5},
{{0.1,0.09,0.09,0.08,0.08,0.12,0.13,0.13,0.1,0.11,0.11,0.08,0.09,0.13,0.09,0.11,0.09,0.12,0.1,0.09,0.11,0.14,0.09,0.13,0.1,0.1,0.08,0.1,0.08,0.09,0,9.62,0.69,3375,1150,3200,2.81,4.02,1.89,3.69,5.01,3.69,10.69},5},
{{0.12,0.1,0.12,0.12,0.11,0.09,0.11,0.08,0.07,0.09,0.09,0.12,0.1,0.1,0.08,0.14,0.07,0.12,0.1,0.1,0.11,0.12,0.11,0.11,0.1,0.08,0.1,0.11,0.08,0.08,0,9.45,0.7,2000,1250,2850,2.36,4.14,1.97,3.29,5.06,3.29,10.49},5},
{{0.12,0.14,0.1,0.09,0.14,0.08,0.08,0.1,0.09,0.08,0.08,0.09,0.1,0.11,0.09,0.1,0.14,0.11,0.1,0.1,0.1,0.09,0.11,0.11,0.11,0.1,0.08,0.11,0.11,0.09,0,9.79,0.98,1466.67,1475,3125,2.41,3.85,2.11,3.35,4.78,3.35,10.81},5},
{{0.05,0.03,0.03,0.04,0.02,0.03,0.03,0.04,0.07,0.02,0.03,0.06,0.03,0.05,0.06,0.03,0.03,0.03,0.02,0.02,0.03,0.06,0.05,0.02,0.03,0.07,0.03,0.03,0.02,0.03,0,2.95,0.16,900,350,800,0.91,2.16,0.58,3.36,7.53,3.36,3.31},5},
{{0.1,0.1,0.1,0.11,0.09,0.1,0.09,0.12,0.11,0.11,0.1,0.08,0.13,0.1,0.09,0.1,0.11,0.09,0.11,0.11,0.11,0.1,0.13,0.08,0.07,0.09,0.1,0.09,0.12,0.12,0,9.94,-2.56,1325,1190,2375,2.73,3.03,3.08,3.63,3.8,3.63,11.37},1},
{{0.1,0.1,0.12,0.09,0.1,0.13,0.12,0.06,0.08,0.1,0.12,0.11,0.1,0.09,0.09,0.1,0.09,0.1,0.1,0.11,0.08,0.1,0.08,0.09,0.11,0.1,0.13,0.14,0.08,0.11,0,9.79,-2.45,3025,881.25,3950,2.7,3.25,2.59,3.8,4.08,3.8,11.14},1},
{{0.1,0.09,0.11,0.08,0.11,0.1,0.1,0.13,0.11,0.1,0.09,0.1,0.09,0.12,0.12,0.1,0.09,0.12,0.07,0.12,0.11,0.1,0.1,0.1,0.11,0.1,0.1,0.1,0.08,0.12,0,9.92,-2.73,2062.5,1000,2100,2.66,2.98,2.83,3.54,3.83,3.54,11.31},1},
{{0.05,0.06,0.05,0.08,0.05,0.04,0.05,0.04,0.07,0.05,0.05,0.06,0.06,0.04,0.05,0.06,0.07,0.05,0.08,0.02,0.06,0.05,0.04,0.08,0.09,0.06,0.04,0.04,0.05,0.03,0,5.14,-1.66,800,1116.67,1450,1.38,2.67,1.4,3.58,6.18,3.58,5.91},1},
{{0.17,0.13,0.13,0.11,0.06,0.09,0.1,0.08,0.05,0.09,0.14,0.09,0.1,0.08,0.07,0.09,0.1,0.06,0.1,0.18,0.15,0.08,0.11,0.07,0.12,0.08,0.08,0.1,0.09,0.11,0,9.88,-2.35,583.33,881.82,2416.67,2.8,4.52,2.61,3.67,5.52,3.67,11.35},5},
{{0.11,0.1,0.13,0.09,0.1,0.07,0.1,0.08,0.16,0.07,0.11,0.1,0.11,0.07,0.11,0.1,0.1,0.15,0.09,0.07,0.12,0.09,0.07,0.09,0.12,0.08,0.09,0.13,0.11,0.11,0,9.73,-2,3050,920,3075,2.81,3.72,2.3,3.63,4.67,3.63,10.97},5},
{{0.06,0.05,0.1,0.13,0.15,0.09,0.11,0.11,0.08,0.15,0.09,0.12,0.08,0.11,0.11,0.11,0.11,0.08,0.1,0.11,0.09,0.11,0.11,0.14,0.08,0.13,0.09,0.08,0.09,0.1,0,9.73,-2.17,1100,783.33,1375,2.5,3.55,2.05,3.31,4.49,3.31,10.86},5},
{{0.07,0.11,0.08,0.1,0.11,0.1,0.12,0.14,0.1,0.08,0.09,0.1,0.09,0.11,0.12,0.11,0.11,0.11,0.1,0.07,0.09,0.1,0.12,0.13,0.06,0.1,0.09,0.12,0.09,0.11,0,9.82,-2.06,2166.67,875,950,2.66,3.47,2.11,3.45,4.47,3.45,10.94},5},
{{0.08,0.11,0.05,0.07,0.07,0.12,0.07,0.08,0.12,0.1,0.06,0.08,0.12,0.11,0.09,0.08,0.07,0.09,0.11,0.06,0.05,0.09,0.06,0.1,0.09,0.1,0.11,0.09,0.11,0.07,0,8.13,-1.53,2800,925,3100,2.41,3.15,1.45,3.62,4.53,3.62,9.04},5},
{{0.1,0.1,0.11,0.11,0.11,0.12,0.11,0.09,0.08,0.08,0.09,0.08,0.11,0.12,0.13,0.12,0.1,0.1,0.08,0.09,0.08,0.08,0.08,0.11,0.12,0.1,0.12,0.1,0.12,0.1,0,9.06,1.36,2475,811.11,1114.29,4.32,2.77,2.88,5.35,3.67,5.35,11.05},1},
{{0.12,0.11,0.07,0.1,0.1,0.12,0.07,0.13,0.09,0.12,0.06,0.12,0.15,0.1,0.13,0.07,0.09,0.12,0.07,0.1,0.11,0.11,0.09,0.12,0.08,0.12,0.1,0.09,0.09,0.09,0,9.1,0.97,2775,2316.67,2383.33,4.39,3.01,3.17,5.67,3.84,5.67,11.18},1},
{{0.08,0.13,0.09,0.09,0.1,0.09,0.09,0.11,0.13,0.12,0.13,0.11,0.08,0.09,0.06,0.11,0.11,0.06,0.14,0.14,0.13,0.13,0.09,0.09,0.07,0.09,0.1,0.09,0.12,0.1,0,9.2,0.99,1550,658.33,2600,4.26,3.62,3.27,5.66,4.5,5.66,11.32},1},
{{0.05,0.03,0.09,0.07,0.05,0.03,0.06,0.06,0.06,0.04,0.07,0.04,0.03,0.06,0.05,0.05,0.05,0.09,0.07,0.03,0.04,0.04,0.07,0.06,0.07,0.05,0.04,0.07,0.03,0.07,0,4.83,0.58,1050,1000,1550,2.25,2.69,1.57,5.35,5.89,5.35,5.93},1},
{{0.11,0.11,0.12,0.12,0.12,0.09,0.08,0.1,0.12,0.06,0.13,0.08,0.11,0.1,0.09,0.1,0.12,0.08,0.08,0.13,0.11,0.09,0.1,0.11,0.1,0.12,0.1,0.12,0.08,0.1,0,9.76,-2.08,3250,1075,1375,2.37,3.77,2.21,3.31,4.8,3.31,11},5},
{{0.12,0.09,0.13,0.11,0.08,0.1,0.11,0.08,0.07,0.13,0.11,0.11,0.13,0.08,0.08,0.07,0.11,0.09,0.12,0.11,0.12,0.09,0.11,0.13,0.11,0.09,0.07,0.08,0.1,0.12,0,9.68,-2.09,550,1837.5,1683.33,2.42,3.89,2.27,3.26,4.74,3.26,10.88},5},
{{0.1,0.08,0.08,0.09,0.1,0.09,0.11,0.12,0.11,0.13,0.07,0.11,0.09,0.12,0.08,0.14,0.09,0.13,0.1,0.09,0.07,0.13,0.09,0.12,0.11,0.1,0.1,0.12,0.09,0.1,0,10.03,-1.9,4000,1300,1850,2.33,3.33,1.94,3.19,4.24,3.19,11.03},5},
{{0.06,0.11,0.07,0.1,0.09,0.15,0.1,0.13,0.11,0.1,0.11,0.12,0.07,0.07,0.09,0.11,0.11,0.1,0.13,0.11,0.12,0.09,0.12,0.07,0.1,0.11,0.14,0.1,0.1,0.07,0,9.81,-2.13,683.33,1620,3675,1.94,3.85,2.2,2.63,4.77,2.63,10.89},5},
{{0.04,0.05,0.04,0.03,0.04,0.03,0.03,0.02,0.04,0.02,0.01,0.03,0.04,0.06,0.08,0.03,0.03,0.03,0.02,0.01,0.02,0.04,0.02,0.01,0.02,0.03,0.03,0.03,0.07,0.06,0,3.13,-0.28,825,500,150,0.74,2.18,0.71,2.97,7.44,2.97,3.39},5},
{{0.11,0.11,0.13,0.1,0.09,0.11,0.08,0.09,0.09,0.11,0.11,0.1,0.09,0.09,0.09,0.1,0.12,0.1,0.11,0.11,0.09,0.1,0.13,0.11,0.09,0.1,0.09,0.11,0.1,0.09,0,9.52,-1.99,1600,916.67,1975,3.43,3.21,2.93,4.51,4.13,4.51,11.2},1},
{{0.1,0.11,0.08,0.09,0.1,0.1,0.08,0.13,0.11,0.12,0.1,0.09,0.11,0.11,0.14,0.07,0.08,0.09,0.12,0.1,0.11,0.1,0.12,0.09,0.11,0.13,0.07,0.06,0.11,0.12,0,9.48,-2.09,1712.5,1025,2500,3.95,3.1,3.06,5.13,3.92,5.13,11.47},1},
{{0.11,0.07,0.11,0.08,0.11,0.07,0.15,0.09,0.13,0.09,0.12,0.13,0.1,0.07,0.08,0.11,0.09,0.11,0.07,0.13,0.11,0.11,0.08,0.14,0.11,0.06,0.08,0.1,0.11,0.1,0,9.34,-1.96,4700,1037.5,2275,3.97,3.39,3.13,5.15,4.29,5.15,11.39},1},
{{0.04,0.07,0.04,0.08,0.06,0.08,0.04,0.06,0.03,0.04,0.02,0.04,0.06,0.09,0.05,0.07,0.08,0.05,0.05,0.02,0.03,0.05,0.03,0.02,0.03,0.08,0.11,0.09,0.04,0.05,0,4.96,-0.57,1225,1225,700,1.79,2.5,1.29,4.61,5.53,4.61,5.73},1},
{{0.15,0.07,0.11,0.09,0.09,0.09,0.11,0.11,0.09,0.12,0.14,0.07,0.1,0.09,0.08,0.1,0.09,0.11,0.1,0.14,0.15,0.1,0.12,0.04,0.12,0.11,0.1,0.08,0.08,0.13,0,9.64,-1.88,1916.67,1080,3183.33,3.78,4.58,2.54,4.63,5.64,4.63,11.67},5},
{{0.08,0.12,0.09,0.13,0.12,0.08,0.1,0.1,0.12,0.09,0.07,0.15,0.1,0.09,0.12,0.09,0.1,0.1,0.14,0.07,0.11,0.12,0.08,0.11,0.08,0.08,0.1,0.17,0.1,0.08,0,9.64,-1.7,2050,1300,1416.67,3.6,3.77,2.44,4.4,4.62,4.4,11.17},5},
{{0.09,0.09,0.1,0.09,0.11,0.13,0.1,0.12,0.12,0.08,0.11,0.1,0.09,0.12,0.07,0.08,0.14,0.11,0.12,0.09,0.09,0.11,0.13,0.1,0.12,0.11,0.07,0.09,0.13,0.08,0,9.66,-1.77,3275,1533.33,4750,3.67,4.06,2.27,4.39,4.97,4.39,11.28},5},
{{0.11,0.12,0.12,0.09,0.08,0.13,0.07,0.08,0.09,0.13,0.09,0.1,0.12,0.11,0.12,0.09,0.07,0.12,0.07,0.13,0.08,0.09,0.09,0.09,0.06,0.13,0.11,0.11,0.11,0.15,0,9.64,-1.18,3475,966.67,2033.33,3.88,3.98,2.41,4.96,5.06,4.96,11.48},5},
{{0.05,0.08,0.06,0.08,0.08,0.06,0.09,0.09,0.06,0.08,0.06,0.07,0.08,0.08,0.08,0.13,0.07,0.04,0.06,0.06,0.05,0.07,0.06,0.13,0.09,0.08,0.07,0.07,0.06,0.05,0,6.62,-1.22,1225,900,1250,2.63,3.21,1.36,4.6,5.4,4.6,7.75},5},
{{0.08,0.08,0.11,0.11,0.11,0.13,0.12,0.1,0.07,0.11,0.07,0.09,0.12,0.11,0.1,0.13,0.11,0.1,0.1,0.09,0.09,0.09,0.11,0.11,0.1,0.11,0.1,0.13,0.09,0.07,0,9.97,-1.89,3050,1025,2450,2.37,3.09,2.6,3.13,3.96,3.13,11.1},1},
{{0.11,0.11,0.11,0.1,0.09,0.07,0.1,0.1,0.12,0.09,0.13,0.14,0.1,0.07,0.08,0.07,0.08,0.1,0.09,0.14,0.1,0.12,0.1,0.08,0.08,0.1,0.1,0.11,0.1,0.12,0,9.69,-1.75,2237.5,712.5,2275,2.94,4.22,2.89,3.88,5.09,3.88,11.19},1},
{{0.1,0.11,0.09,0.11,0.1,0.1,0.09,0.1,0.1,0.11,0.09,0.11,0.08,0.11,0.11,0.12,0.1,0.1,0.1,0.1,0.1,0.09,0.11,0.1,0.13,0.07,0.12,0.07,0.12,0.1,0,9.89,-1.76,3675,836.36,2133.33,2.66,3.28,2.75,3.49,4.16,3.49,11.17},1},
{{0.04,0.06,0.04,0.03,0.05,0.06,0.04,0.05,0.05,0.04,0.06,0.02,0.05,0.04,0.06,0.02,0.07,0.05,0.05,0.03,0.06,0.04,0.03,0.06,0.05,0.06,0.03,0.04,0.02,0.06,0,4.13,-0.83,875,537.5,1550,1.1,2.78,1.3,3.34,7.28,3.34,4.85},1},
{{0.1,0.13,0.12,0.09,0.12,0.12,0.1,0.09,0.11,0,0.09,0.06,0.08,0.1,0.12,0.15,0.11,0.1,0.13,0,0.12,0.13,0.09,0.06,0.11,0.08,0.11,0.08,0.15,0,0,9.24,-0.26,1562.5,4350,2700,2.64,3.55,3,3.19,4.35,3.19,10.63},2},
{{0.1,0.14,0.13,0.12,0.1,0.15,0.11,0.08,0.08,0,0.07,0.09,0.09,0.09,0.12,0.09,0.11,0.15,0.11,0,0.13,0.06,0.12,0.1,0.11,0.09,0.12,0.12,0.1,0,0,9.41,-0.63,2033.33,1900,1033.33,2.46,3.76,2.69,2.96,4.41,2.96,10.63},2},
{{0.16,0.12,0.11,0.15,0.09,0.14,0.1,0.08,0.07,0,0.11,0.09,0.06,0.09,0.1,0.13,0.11,0.09,0.09,0,0.11,0.1,0.1,0.09,0.13,0.09,0.08,0.09,0.14,0,0,9.3,-0.52,1116.67,1790,4500,2.54,3.88,2.79,3.04,4.65,3.04,10.57},2},
{{0.14,0.13,0.15,0.12,0.14,0.07,0.11,0.1,0.06,0,0.07,0.1,0.07,0.08,0.14,0.07,0.12,0.11,0.15,0,0.12,0.1,0.06,0.14,0.13,0.07,0.14,0.09,0.1,0,0,9.53,-0.39,1600,2775,1962.5,2.47,3.82,2.82,2.9,4.51,2.9,10.75},2},
{{0.21,0.14,0.13,0.13,0.07,0.09,0.11,0.07,0.08,0,0.08,0.11,0.1,0.1,0.09,0.11,0.09,0.12,0.11,0,0.1,0.12,0.09,0.09,0.08,0.1,0.09,0.18,0.08,0,0,9,-0.41,1675,2262.5,1900,2.83,3.9,2.75,3.33,4.58,3.33,10.37},2},
{{0.15,0.13,0.19,0.12,0.09,0.1,0.09,0.07,0.07,0,0.1,0.08,0.1,0.07,0.1,0.1,0.08,0.14,0.16,0,0.15,0.09,0.11,0.09,0.11,0.09,0.09,0.1,0.11,0,0,9.39,-0.47,2150,2275,1987.5,2.67,3.91,3.09,3.16,4.54,3.16,10.78},2},
{{0.24,0.1,0.17,0.11,0.11,0.12,0.07,0.05,0.05,0,0.09,0.1,0.07,0.08,0.12,0.09,0.12,0.12,0.1,0,0.14,0.08,0.06,0.11,0.11,0.12,0.1,0.11,0.1,0,0,9.37,-0.42,1900,1975,1150,2.69,3.99,2.84,3.3,4.77,3.3,10.72},2},
{{0.22,0.2,0.11,0.09,0.08,0.1,0.09,0.07,0.06,0,0.13,0.08,0.09,0.07,0.1,0.12,0.11,0.08,0.12,0,0.13,0.09,0.13,0.08,0.12,0.08,0.09,0.13,0.1,0,0,8.93,-0.53,1800,2200,2200,2.81,4.09,2.86,3.26,4.84,3.26,10.43},2},
{{0.22,0.16,0.13,0.1,0.08,0.11,0.1,0.08,0.05,0,0.1,0.1,0.06,0.11,0.09,0.11,0.08,0.13,0.12,0,0.11,0.12,0.08,0.11,0.1,0.12,0.07,0.11,0.12,0,0,9.26,-0.31,2212.5,2237.5,2966.67,2.75,3.95,3.01,3.21,4.67,3.21,10.75},2},
{{0.2,0.13,0.14,0.11,0.09,0.11,0.11,0.08,0.04,0,0.11,0.07,0.06,0.12,0.1,0.07,0.11,0.13,0.08,0,0.14,0.1,0.11,0.07,0.1,0.08,0.09,0.14,0.09,0,0,9.34,-0.6,1933.33,1833.33,2750,2.68,4.01,2.8,3.19,4.7,3.19,10.67},2},
{{0.2,0.14,0.11,0.12,0.08,0.09,0.11,0.14,0.04,0,0.11,0.06,0.08,0.09,0.08,0.1,0.07,0.13,0.14,0,0.13,0.11,0.1,0.09,0.07,0.07,0.12,0.12,0.11,0,0,9.6,-0.35,2775,1912.5,2550,2.83,4.09,3.02,3.35,4.84,3.35,11.07},2},
{{0.16,0.19,0.09,0.14,0.05,0.09,0.13,0.12,0.05,0,0.11,0.06,0.07,0.09,0.12,0.08,0.08,0.17,0.14,0,0.13,0.14,0.11,0.07,0.1,0.07,0.09,0.13,0.11,0,0,9.24,-0.54,3900,2250,2616.67,2.78,3.88,3.1,3.22,4.58,3.22,10.79},2},
{{0.19,0.16,0.12,0.12,0.08,0.07,0.09,0.11,0.09,0,0.12,0.06,0.08,0.08,0.11,0.07,0.13,0.13,0.12,0,0.09,0.15,0.1,0.07,0.09,0.1,0.08,0.16,0.09,0,0,9.33,-0.36,3475,2233.33,3325,2.85,3.95,2.8,3.28,4.71,3.28,10.76},2},
{{0.14,0.14,0.15,0.07,0.12,0.06,0.15,0.11,0.07,0,0.09,0.07,0.08,0.11,0.09,0.09,0.14,0.12,0.12,0,0.11,0.12,0.07,0.09,0.13,0.08,0.14,0.1,0.09,0,0,9.28,-0.38,2400,1937.5,2583.33,2.68,3.79,2.92,3.13,4.51,3.13,10.73},2},
{{0.14,0.15,0.13,0.12,0.1,0.06,0.1,0.14,0.07,0,0.11,0.06,0.06,0.08,0.13,0.12,0.12,0.1,0.13,0,0.12,0.1,0.12,0.07,0.12,0.12,0.11,0.09,0.09,0,0,9.26,-0.52,1133.33,2183.33,2533.33,2.75,3.74,2.79,3.21,4.54,3.21,10.75},2},
{{0.15,0.08,0.08,0.14,0.12,0.1,0.1,0.11,0.1,0,0.03,0.11,0.11,0.14,0.07,0.13,0.09,0.13,0.12,0,0.09,0.09,0.09,0.14,0.12,0.08,0.1,0.11,0.09,0,0,9.38,-0.13,1100,2212.5,1675,2.84,3.52,2.89,3.52,4.16,3.52,10.75},2},
{{0.14,0.1,0.17,0.11,0.09,0.12,0.12,0.08,0.08,0,0.09,0.09,0.07,0.1,0.1,0.05,0.14,0.13,0.15,0,0.12,0.08,0.1,0.11,0.08,0.12,0.12,0.06,0.11,0,0,9.33,-0.2,1700,1987.5,2650,2.66,3.95,3,3.17,4.59,3.17,10.78},2},
{{0.09,0.08,0.13,0.17,0.13,0.13,0.13,0.09,0.07,0,0.05,0.06,0.12,0.14,0.11,0.13,0.11,0.1,0.09,0,0.08,0.09,0.06,0.11,0.11,0.16,0.11,0.09,0.09,0,0,9.35,-0.06,1962.5,1340,1125,2.31,3.48,2.67,3.04,4.22,3.04,10.47},2},
{{0.17,0.06,0.09,0.1,0.12,0.19,0.09,0.09,0.1,0,0.09,0.05,0.08,0.13,0.08,0.08,0.15,0.12,0.12,0,0.11,0.1,0.08,0.1,0.1,0.08,0.11,0.11,0.11,0,0,9.45,-0.04,2775,1466.67,1866.67,2.55,3.89,3.19,3.22,4.64,3.22,10.97},2},
{{0.06,0.12,0.13,0.09,0.17,0.09,0.1,0.14,0.11,0,0.08,0.07,0.08,0.12,0.14,0.11,0.13,0.13,0.11,0,0.06,0.11,0.17,0.13,0.09,0.08,0.13,0.08,0.09,0,0,8.91,-0.41,2800,2266.67,2825,2.48,3.4,2.71,2.96,4.08,2.96,10.18},2},
{{0.07,0.15,0.08,0.11,0.14,0.11,0.13,0.1,0.12,0,0.07,0.07,0.07,0.09,0.11,0.15,0.11,0.14,0.14,0,0.05,0.08,0.13,0.08,0.13,0.17,0.1,0.1,0.11,0,0,9.37,-0.11,1683.33,2283.33,2266.67,2.45,3.34,2.58,2.97,4.02,2.97,10.55},2},
{{0.09,0.11,0.1,0.13,0.13,0.12,0.1,0.12,0.1,0,0.06,0.09,0.09,0.12,0.12,0.09,0.15,0.12,0.11,0,0.07,0.1,0.14,0.12,0.1,0.12,0.09,0.1,0.07,0,0,9.03,-0.32,1750,2312.5,2875,2.43,3.44,2.74,2.95,4.13,2.95,10.25},2},
{{0.12,0.18,0.12,0.1,0.1,0.09,0.11,0.12,0.06,0,0.09,0.09,0.07,0.1,0.1,0.13,0.1,0.1,0.1,0,0.11,0.1,0.08,0.13,0.09,0.11,0.12,0.09,0.07,0,0,9.27,-0.3,1900,1150,2287.5,2.67,3.83,2.93,3.16,4.58,3.16,10.7},2},
{{0.15,0.09,0.09,0.07,0.18,0.08,0.12,0.12,0.08,0,0.03,0.1,0.1,0.14,0.07,0.14,0.1,0.13,0.1,0,0.08,0.07,0.08,0.1,0.15,0.11,0.14,0.14,0.07,0,0,9.43,-0.27,950,1516.67,2266.67,2.74,3.41,2.39,3.44,4.04,3.44,10.58},2},
{{0.1,0.14,0.09,0.11,0.12,0.1,0.14,0.08,0.12,0,0.09,0.07,0.09,0.11,0.08,0.11,0.08,0.14,0.13,0,0.12,0.13,0.12,0.06,0.1,0.1,0.11,0.08,0.09,0,0,9.33,-0.49,1333.33,1540,1850,2.6,3.91,2.99,3.14,4.6,3.14,10.82},2},
{{0.14,0.12,0.12,0.09,0.15,0.08,0.14,0.08,0.09,0,0.1,0.06,0.11,0.11,0.07,0.11,0.11,0.14,0.11,0,0.07,0.15,0.12,0.1,0.11,0.08,0.11,0.09,0.1,0,0,9.14,-0.4,2800,1662.5,3900,2.59,3.96,2.83,3.11,4.71,3.11,10.57},2},
{{0.13,0.09,0.11,0.07,0.16,0.11,0.12,0.1,0.1,0,0.11,0.07,0.08,0.1,0.09,0.1,0.14,0.12,0.13,0,0.09,0.12,0.11,0.11,0.08,0.08,0.11,0.1,0.11,0,0,9.1,-0.32,837.5,964.29,1675,2.63,3.77,2.88,3.21,4.47,3.21,10.58},2},
{{0.1,0.14,0.14,0.16,0.09,0.08,0.13,0.07,0.1,0,0.07,0.1,0.05,0.15,0.09,0.08,0.13,0.12,0.1,0,0.1,0.11,0.09,0.12,0.12,0.1,0.08,0.07,0.11,0,0,9.4,-0.36,1300,1883.33,2225,2.57,3.81,3.04,3.04,4.55,3.04,10.75},2},
{{0.07,0.1,0.12,0.16,0.12,0.14,0.14,0.1,0.06,0,0.07,0.09,0.07,0.09,0.14,0.13,0.13,0.09,0.14,0,0.11,0.06,0.09,0.1,0.16,0.08,0.12,0.09,0.09,0,0,9.07,-0.29,1533.33,983.33,1916.67,2.2,3.41,2.68,2.66,4.13,2.66,10.2},2},
{{0.09,0.07,0.11,0.13,0.11,0.17,0.16,0.12,0.05,0,0.06,0.08,0.07,0.11,0.13,0.14,0.1,0.14,0.1,0,0.09,0.09,0.09,0.09,0.12,0.15,0.09,0.12,0.08,0,0,9.3,-0.39,2900,2875,3450,2.26,3.36,2.57,2.82,4.1,2.82,10.42},2},
{{0.1,0.08,0.12,0.1,0.15,0.08,0.09,0.14,0.12,0,0.05,0.1,0.08,0.09,0.17,0.1,0.11,0.08,0.1,0,0.06,0.09,0.11,0.11,0.12,0.11,0.09,0.12,0.1,0,0,9.4,0.07,3083.33,1533.33,4050,2.78,3.65,2.84,3.35,4.37,3.35,10.75},2},
{{0.04,0.14,0.1,0.08,0.11,0.16,0.11,0.11,0.13,0,0.05,0.11,0.1,0.06,0.13,0.14,0.13,0.09,0.1,0,0.09,0.08,0.08,0.15,0.11,0.09,0.09,0.12,0.12,0,0,9.18,-0.11,1175,2300,1725,2.53,3.52,2.7,3.12,4.24,3.12,10.39},2},
{{0.09,0.13,0.11,0.08,0.1,0.15,0.07,0.12,0.1,0,0.06,0.09,0.1,0.1,0.12,0.11,0.11,0.09,0.12,0,0.11,0.1,0.05,0.14,0.12,0.08,0.17,0.07,0.09,0,0,9.27,-0.49,2783.33,1150,2850,2.79,3.72,2.58,3.42,4.46,3.42,10.63},2},
{{0.05,0.14,0.07,0.11,0.13,0.13,0.08,0.14,0.13,0,0.06,0.09,0.11,0.14,0.09,0.09,0.11,0.12,0.11,0,0.04,0.1,0.12,0.1,0.12,0.09,0.12,0.14,0.08,0,0,9.16,0.12,850,4025,1916.67,2.68,3.64,2.82,3.25,4.28,3.25,10.52},2},
{{0.07,0.09,0.15,0.13,0.12,0.13,0.1,0.09,0.11,0,0.05,0.11,0.08,0.11,0.12,0.11,0.13,0.09,0.11,0,0.11,0.06,0.13,0.07,0.12,0.13,0.11,0.08,0.13,0,0,9.24,-0.33,1600,1600,1750,2.38,3.6,2.69,2.91,4.31,2.91,10.46},2},
{{0.12,0.11,0.14,0.17,0.07,0.11,0.08,0.15,0.05,0,0.11,0.1,0.11,0.07,0.06,0.11,0.09,0.13,0.1,0,0.12,0.1,0.09,0.09,0.09,0.12,0.1,0.08,0.11,0,0,9,-0.27,2850,1580,2850,2.55,4.26,2.92,3,5.01,3,10.5},2},
{{0.08,0.13,0.17,0.15,0.1,0.08,0.1,0.11,0.1,0,0.1,0.08,0.1,0.11,0.1,0.06,0.1,0.1,0.11,0,0.13,0.1,0.09,0.05,0.11,0.1,0.09,0.12,0.09,0,0,9.17,-0.22,1983.33,1700,2175,2.51,4.07,3.1,2.94,4.7,2.94,10.58},2},
{{0.1,0.11,0.11,0.13,0.14,0.08,0.12,0.11,0.1,0,0.14,0.07,0.1,0.05,0.07,0.13,0.08,0.15,0.09,0,0.12,0.11,0.08,0.11,0.11,0.07,0.12,0.09,0.13,0,0,9.06,-0.46,733.33,1560,2200,2.58,4.22,2.86,3.1,4.96,3.1,10.52},2},
{{0.07,0.1,0.1,0.11,0.1,0.13,0.11,0.12,0.13,0,0.13,0.08,0.07,0.1,0.09,0.1,0.1,0.14,0.09,0,0.12,0.14,0.06,0.11,0.06,0.1,0.08,0.12,0.11,0,0,9.01,-0.43,1200,1375,2583.33,2.66,4.01,2.93,3.21,4.73,3.21,10.46},2},
{{0.06,0.11,0.09,0.12,0.1,0.15,0.1,0.11,0.15,0,0.11,0.08,0.09,0.08,0.08,0.13,0.07,0.15,0.11,0,0.13,0.1,0.08,0.07,0.12,0.14,0.09,0.11,0.1,0,0,9.27,-0.44,2025,1750,3825,2.61,4.04,2.84,3.17,4.76,3.17,10.71},2},
{{0.07,0.08,0.12,0.13,0.13,0.09,0.1,0.12,0.1,0,0.11,0.08,0.09,0.09,0.09,0.12,0.09,0.08,0.13,0,0.14,0.08,0.08,0.12,0.09,0.1,0.1,0.09,0.12,0,0,9.25,-0.35,550,1375,2216.67,2.77,4.02,2.99,3.47,4.74,3.47,10.75},2},
{{0.06,0.1,0.12,0.08,0.15,0.1,0.07,0.15,0.12,0,0.1,0.1,0.09,0.1,0.09,0.1,0.06,0.11,0.14,0,0.15,0.14,0.06,0.05,0.08,0.12,0.06,0.12,0.13,0,0,9.14,-0.46,1062.5,2183.33,1375,2.73,4.11,3.08,3.37,4.72,3.37,10.69},2},
{{0.04,0.08,0.13,0.09,0.11,0.15,0.07,0.14,0.14,0,0.1,0.1,0.09,0.09,0.14,0.06,0.12,0.1,0.07,0,0.1,0.12,0.12,0.08,0.1,0.1,0.07,0.09,0.15,0,0,9.01,-0.31,2750,1850,3875,2.77,4.02,2.86,3.41,4.74,3.41,10.42},2},
{{0.07,0.09,0.09,0.07,0.12,0.15,0.09,0.15,0.14,0,0.06,0.11,0.08,0.16,0.07,0.11,0.14,0.08,0.08,0,0.12,0.14,0.07,0.07,0.09,0.11,0.08,0.1,0.14,0,0,9.07,-0.34,2583.33,2950,1925,2.77,3.83,2.97,3.43,4.59,3.43,10.6},2},
{{0.07,0.05,0.04,0.1,0.12,0.11,0.15,0.15,0.17,0,0.05,0.13,0.07,0.09,0.11,0.14,0.14,0.1,0.09,0,0.08,0.11,0.15,0.08,0.08,0.09,0.11,0.08,0.16,0,0,9.26,-0.32,1166.67,3450,2283.33,2.89,3.53,2.74,3.56,4.3,3.56,10.65},2},
{{0.03,0.08,0.07,0.09,0.13,0.15,0.12,0.1,0.16,0,0.06,0.13,0.07,0.1,0.11,0.12,0.12,0.1,0.08,0,0.07,0.1,0.12,0.1,0.13,0.07,0.1,0.12,0.09,0,0,9.17,0,2250,1121.43,1570,2.88,3.74,3.02,3.67,4.48,3.67,10.73},2},
{{0.03,0.04,0.05,0.06,0.07,0.09,0.14,0.14,0.22,0,0.04,0.16,0.12,0.12,0.1,0.14,0.09,0.07,0.09,0,0.07,0.07,0.11,0.14,0.07,0.15,0.13,0.12,0.06,0,0,8.36,-0.22,2375,1400,3975,3.99,3.57,2.55,4.99,4.24,4.99,10.3},2},
{{0,0,0.02,0.03,0.04,0.04,0.05,0.06,0.17,0,0.15,0.3,0.27,0.09,0.06,0.06,0.04,0.02,0.03,0,0.07,0.09,0.09,0.17,0.15,0.12,0.1,0.06,0.08,0,0,5.01,-0.39,1637.5,1812.5,2566.67,7.9,2.42,2.57,9.05,3.14,9.05,10.65},2},
{{0,0.01,0.01,0.03,0.05,0.02,0.04,0.09,0.15,0,0.2,0.26,0.23,0.11,0.06,0.06,0.05,0.03,0.03,0,0.07,0.15,0.11,0.12,0.08,0.1,0.13,0.09,0.06,0,0,4.97,-0.45,1760,1760,2183.33,7.92,2.69,2.7,9.02,3.41,9.02,10.7},2},
{{0,0,0.01,0.06,0.04,0.03,0.04,0.09,0.13,0,0.24,0.17,0.21,0.14,0.11,0.08,0.02,0.03,0.01,0,0.08,0.11,0.13,0.11,0.1,0.09,0.11,0.07,0.12,0,0,4.97,-0.2,1483.33,3325,1937.5,8.09,2.9,2.91,9.35,3.63,9.35,10.98},2},
{{0,0,0.02,0.03,0.06,0.08,0.03,0.04,0.18,0,0.21,0.18,0.24,0.14,0.08,0.1,0.04,0.03,0.01,0,0.11,0.09,0.1,0.11,0.1,0.07,0.11,0.06,0.18,0,0,5.01,-0.18,1925,1475,2183.33,7.88,2.85,3.07,9.34,3.62,9.34,10.92},2},
{{0,0.01,0.01,0.03,0.04,0.02,0.06,0.07,0.18,0,0.26,0.19,0.22,0.09,0.09,0.09,0.04,0.03,0.01,0,0.08,0.11,0.15,0.12,0.08,0.07,0.1,0.11,0.09,0,0,4.79,-0.17,1540,1666.67,2583.33,8.13,2.78,3.03,9.37,3.47,9.37,10.95},2},
{{0,0,0.01,0.03,0.05,0.03,0.04,0.07,0.13,0,0.3,0.2,0.2,0.13,0.06,0.08,0.03,0.02,0,0,0.03,0.12,0.13,0.12,0.08,0.14,0.11,0.12,0.07,0,0,4.46,-0.08,2583.33,2012.5,2225,8.19,2.57,2.68,9.35,3.16,9.35,10.62},2},
{{0.02,0.01,0.02,0.01,0.03,0.04,0.01,0.06,0.1,0,0.11,0.1,0.14,0.07,0.08,0.04,0.04,0.01,0.01,0,0.03,0.08,0.07,0.07,0.04,0.06,0.07,0.06,0.07,0,0,3.36,0.12,1100,1300,1075,4.31,1.95,1.79,8.45,4.31,8.45,6.36},2},
{{0,0,0.02,0.14,0.17,0.11,0.19,0.17,0.16,0,0,0.01,0.07,0.03,0.1,0.08,0.07,0.03,0.07,0,0.09,0.04,0.1,0.09,0.12,0.14,0.09,0.07,0.1,0,0,6.66,-0.18,525,827.27,1630,3.86,7.65,5.92,5.18,9.08,5.18,12.35},0},
{{0,0.04,0.14,0.15,0.17,0.16,0.13,0.19,0.03,0,0,0.03,0.08,0.04,0.17,0.13,0.04,0.02,0.08,0,0.11,0.07,0.11,0.12,0.09,0.12,0.06,0.08,0.08,0,0,5.07,-1.09,2983.33,397.92,1350,5.4,8.54,6.21,7.56,9.92,7.56,13.07},0},
{{0.1,0.1,0.15,0.09,0.12,0.1,0.07,0.1,0.19,0,0,0.01,0.14,0.06,0.09,0.25,0.05,0.06,0.05,0,0.14,0.06,0.16,0.11,0.04,0.08,0.11,0.08,0.16,0,0,2.54,-2.09,1100,685.71,2383.33,8.21,6.77,6.33,10.66,8.58,10.66,13.28},0},
{{0.12,0.12,0.12,0.11,0.14,0.07,0.07,0.06,0.16,0,0.01,0.02,0.13,0.12,0.13,0.11,0.15,0.04,0.07,0,0.11,0.09,0.17,0.13,0.06,0.06,0.14,0.08,0.06,0,0,0.79,-2.17,3300,950,1100,9.05,5.65,5.75,11.34,7.37,11.34,13.22},0},
{{0.1,0.09,0.13,0.11,0.08,0.13,0.11,0.1,0.1,0,0.1,0.12,0.11,0.11,0.12,0.15,0.12,0.12,0.06,0,0.07,0.06,0.09,0.17,0.1,0.1,0.09,0.14,0.13,0,0,-4.74,-1.1,3375,3200,4100,8.19,6.13,4.48,10.59,7.27,10.59,12.48},0},
{{0.1,0.11,0.09,0.11,0.06,0.08,0.13,0.13,0.09,0,0.15,0.12,0.08,0.1,0.11,0.1,0.1,0.08,0.12,0,0.08,0.11,0.1,0.12,0.07,0.11,0.18,0.11,0.09,0,0,-4.92,-1.67,1966.67,4400,2200,8.5,7.06,4.66,11.01,8.19,11.01,13.36},0},
{{0.08,0.1,0.1,0.11,0.1,0.12,0.09,0.12,0.08,0,0.13,0.12,0.1,0.11,0.09,0.1,0.1,0.08,0.14,0,0.09,0.1,0.11,0.1,0.09,0.12,0.11,0.14,0.08,0,0,-4.89,-1.45,2325,2350,2950,8.35,7.03,4.88,10.69,8.18,10.69,13.29},0},
{{0.07,0.11,0.12,0.11,0.07,0.09,0.16,0.11,0.06,0,0.13,0.12,0.11,0.12,0.08,0.09,0.13,0.1,0.11,0,0.09,0.14,0.09,0.1,0.13,0.07,0.09,0.1,0.1,0,0,-4.9,-1.47,2475,1250,1883.33,8.42,6.75,5.37,10.88,7.86,10.88,13.71},0},
{{0.1,0.1,0.12,0.07,0.09,0.1,0.09,0.14,0.13,0,0.11,0.12,0.08,0.11,0.13,0.08,0.09,0.13,0.13,0,0.07,0.14,0.09,0.09,0.11,0.1,0.12,0.12,0.07,0,0,-4.31,-1.31,1125,3375,1616.67,8.28,6.61,5.03,10.8,7.79,10.8,12.98},0},
{{0.08,0.12,0.13,0.09,0.09,0.11,0.08,0.11,0.11,0,0.16,0.1,0.1,0.1,0.08,0.08,0.12,0.1,0.09,0,0.12,0.1,0.07,0.1,0.06,0.12,0.14,0.13,0.08,0,0,-5.03,-1.29,3500,2075,1360,8.81,7.41,5.27,11.13,8.55,11.13,14.03},0},
{{0.12,0.14,0.08,0.08,0.07,0.1,0.14,0.07,0.09,0,0.12,0.12,0.07,0.14,0.11,0.11,0.12,0.09,0.1,0,0.08,0.11,0.13,0.11,0.12,0.09,0.11,0.09,0.07,0,0,-4.73,-1.68,2700,983.33,2616.67,9.1,6.41,4.96,11.52,7.6,11.52,13.72},0},
{{0.1,0.14,0.09,0.09,0.09,0.1,0.12,0.07,0.12,0,0.12,0.11,0.1,0.11,0.1,0.09,0.11,0.11,0.14,0,0.08,0.07,0.14,0.07,0.11,0.15,0.12,0.11,0.11,0,0,-4.65,-1.36,2200,966.67,1775,8.86,6.84,4.63,11.33,7.98,11.33,13.43},0},
{{0.13,0.13,0.08,0.07,0.12,0.09,0.09,0.09,0.08,0,0.12,0.14,0.11,0.1,0.08,0.08,0.09,0.14,0.09,0,0.12,0.11,0.1,0.09,0.09,0.13,0.11,0.07,0.12,0,0,-4.85,-2.05,1287.5,1475,2483.33,9.22,7.16,5.11,11.62,8.24,11.62,14.1},0},
{{0.12,0.12,0.08,0.07,0.09,0.13,0.08,0.12,0.08,0,0.13,0.09,0.12,0.09,0.12,0.06,0.12,0.14,0.09,0,0.09,0.13,0.08,0.12,0.1,0.09,0.07,0.14,0.11,0,0,-4.52,-1.54,2433.33,1125,4250,9.06,6.93,5.05,11.5,8.06,11.5,13.83},0},
{{0.12,0.12,0.09,0.08,0.09,0.11,0.07,0.09,0.14,0,0.11,0.11,0.13,0.09,0.08,0.11,0.05,0.16,0.13,0,0.09,0.13,0.07,0.11,0.14,0.07,0.09,0.1,0.12,0,0,-4.36,-1.56,1775,1800,1200,9.11,6.83,5.13,11.55,7.89,11.55,13.87},0},
{{0.1,0.11,0.11,0.09,0.1,0.09,0.1,0.1,0.11,0,0.15,0.11,0.1,0.12,0.08,0.07,0.07,0.12,0.15,0,0.1,0.12,0.12,0.09,0.08,0.09,0.11,0.09,0.11,0,0,-4.83,-1.64,1700,1100,2000,9.03,7.03,5.49,11.41,8.18,11.41,14.19},0},
{{0.11,0.11,0.11,0.09,0.09,0.09,0.1,0.1,0.1,0,0.14,0.1,0.12,0.1,0.09,0.09,0.11,0.13,0.1,0,0.1,0.15,0.09,0.05,0.13,0.11,0.09,0.11,0.08,0,0,-4.89,-1.62,3475,3100,1925,9.05,6.99,5.46,11.43,8.08,11.43,14.16},0},
{{0.12,0.09,0.11,0.06,0.12,0.07,0.09,0.12,0.13,0,0.14,0.11,0.11,0.1,0.1,0.06,0.12,0.09,0.13,0,0.1,0.13,0.07,0.09,0.09,0.09,0.11,0.16,0.07,0,0,-5,-1.38,3725,2037.5,3325,8.79,7.03,5.34,11.27,8.17,11.27,13.96},0},
{{0.09,0.15,0.07,0.09,0.07,0.13,0.09,0.12,0.09,0,0.11,0.14,0.1,0.08,0.1,0.11,0.08,0.18,0.08,0,0.11,0.12,0.1,0.09,0.1,0.16,0.08,0.07,0.1,0,0,-4.58,-1.97,1450,2683.33,1425,8.87,6.87,5.24,11.36,7.98,11.36,13.78},0},
{{0.1,0.16,0.07,0.13,0.07,0.09,0.1,0.09,0.08,0,0.1,0.15,0.11,0.13,0.1,0.03,0.13,0.12,0.1,0,0.11,0.13,0.1,0.08,0.11,0.11,0.09,0.11,0.08,0,0,-4.91,-1.94,712.5,3550,1425,9.5,6.86,5.37,11.87,7.99,11.87,14.51},0},
{{0.1,0.1,0.11,0.08,0.15,0.06,0.07,0.15,0.09,0,0.13,0.13,0.11,0.11,0.06,0.07,0.11,0.15,0.1,0,0.16,0.12,0.07,0.07,0.1,0.08,0.12,0.09,0.07,0,0,-4.69,-1.66,2875,3100,1900,9.04,6.88,6.11,11.38,8,11.38,14.44},0},
{{0.12,0.09,0.12,0.12,0.09,0.1,0.11,0.07,0.08,0,0.14,0.09,0.09,0.12,0.09,0.08,0.11,0.11,0.13,0,0.15,0.08,0.1,0.09,0.12,0.12,0.09,0.07,0.11,0,0,-4.48,-1.93,964.29,850,750,9.43,6.81,5.63,11.8,8.07,11.8,14.48},0},
{{0.11,0.1,0.09,0.12,0.1,0.11,0.08,0.07,0.1,0,0.08,0.13,0.1,0.12,0.11,0.07,0.11,0.12,0.13,0,0.12,0.1,0.08,0.12,0.14,0.11,0.07,0.11,0.07,0,0,-3.99,-2.05,1233.33,975,3075,9.25,6.36,5.13,11.65,7.51,11.65,13.71},0},
{{0.12,0.12,0.11,0.14,0.08,0.09,0.08,0.07,0.1,0,0.09,0.12,0.08,0.13,0.12,0.14,0.16,0.09,0.06,0,0.1,0.08,0.1,0.11,0.1,0.08,0.1,0.12,0.14,0,0,-4.32,-1.34,1150,1620,2300,9.76,6.06,5.17,11.95,7.3,11.95,13.85},0},
{{0.1,0.12,0.09,0.1,0.13,0.11,0.1,0.09,0.07,0,0.1,0.12,0.07,0.09,0.11,0.11,0.16,0.11,0.13,0,0.07,0.1,0.1,0.12,0.09,0.11,0.1,0.12,0.15,0,0,-4.16,-1.35,4175,2100,1370,9.05,6.42,4.84,11.39,7.66,11.39,13.16},0},
{{0.05,0.04,0.1,0.11,0.06,0.1,0.03,0.02,0.06,0,0.04,0.07,0.11,0.07,0.1,0.09,0.04,0.04,0.03,0,0.05,0.02,0.09,0.09,0.06,0.05,0.07,0.04,0.11,0,0,-2.84,-0.62,762.5,983.33,2150,5.37,3.29,2.92,10.82,6.91,10.82,7.78},0},
{{0.2,0.13,0.11,0.1,0.11,0.08,0.09,0.04,0.09,0.08,0.08,0.08,0.12,0.07,0.1,0.09,0.12,0.12,0.13,0.11,0.12,0.07,0.11,0.13,0.16,0.07,0.09,0.08,0.09,0.1,0,7.63,-0.07,1466.67,3275,1483.33,5.38,3.47,2.77,6.73,4.31,6.73,10.62},2},
{{0.14,0.1,0.2,0.17,0.08,0.09,0.08,0.07,0.03,0.06,0.06,0.09,0.05,0.12,0.07,0.1,0.08,0.15,0.2,0.1,0.15,0.07,0.05,0.05,0.14,0.09,0.1,0.08,0.18,0.1,0,8.07,0.44,1800,1725,1025,4.81,3.42,3.23,6.09,4.12,6.09,10.75},2},
{{0.11,0.15,0.1,0.13,0.12,0.13,0.06,0.06,0.07,0.08,0.06,0.06,0.1,0.09,0.07,0.08,0.13,0.22,0.08,0.14,0.13,0.07,0.08,0.08,0.07,0.08,0.11,0.16,0.11,0.13,0,8.25,0.82,3900,2600,1675,5.25,3.26,3.26,6.6,4.08,6.6,11.18},2},
{{0.13,0.1,0.09,0.17,0.09,0.1,0.14,0.06,0.05,0.09,0.07,0.1,0.07,0.08,0.1,0.08,0.17,0.06,0.12,0.16,0.08,0.12,0.09,0.07,0.09,0.09,0.1,0.16,0.12,0.11,0,8.06,0.49,3275,2233.33,2566.67,5.59,3.58,2.87,6.85,4.41,6.85,11.04},2},
{{0.12,0.11,0.11,0.11,0.13,0.13,0.11,0.07,0.06,0.08,0.06,0.12,0.07,0.09,0.07,0.11,0.1,0.14,0.11,0.16,0.08,0.12,0.1,0.08,0.09,0.13,0.08,0.14,0.1,0.12,0,7.95,0.45,1580,1975,1675,5.66,3.47,2.9,6.92,4.27,6.92,11.01},2},
{{0.12,0.13,0.08,0.09,0.17,0.12,0.09,0.06,0.06,0.1,0.07,0.11,0.08,0.07,0.1,0.08,0.15,0.1,0.11,0.16,0.11,0.08,0.09,0.08,0.09,0.14,0.1,0.11,0.13,0.08,0,7.98,0.16,2800,2800,2225,5.86,3.49,2.6,7.26,4.27,7.26,11.03},2},
{{0.11,0.08,0.11,0.1,0.13,0.14,0.12,0.1,0.07,0.07,0.04,0.12,0.09,0.11,0.09,0.12,0.14,0.08,0.09,0.14,0.09,0.04,0.09,0.1,0.1,0.12,0.14,0.12,0.11,0.11,0,7.58,0.45,4450,2225,3325,5.93,3.22,2.62,7.05,4.05,7.05,10.63},2},
{{0.14,0.12,0.07,0.13,0.12,0.13,0.12,0.07,0.06,0.07,0.05,0.08,0.1,0.15,0.11,0.13,0.12,0.08,0.11,0.1,0.08,0.06,0.09,0.12,0.12,0.14,0.13,0.1,0.09,0.09,0,7.3,0.29,4000,700,2850,5.53,2.92,2.62,6.64,3.64,6.64,10.24},2},
{{0.11,0.13,0.08,0.1,0.09,0.15,0.1,0.1,0.06,0.1,0.04,0.1,0.11,0.12,0.06,0.08,0.17,0.1,0.1,0.13,0.07,0.14,0.1,0.05,0.12,0.08,0.13,0.12,0.1,0.11,0,7.72,0.44,2550,1050,2950,5.92,3.22,2.91,7.15,3.94,7.15,11.02},2},
{{0.12,0.11,0.13,0.11,0.16,0.1,0.08,0.09,0.08,0.05,0.08,0.09,0.06,0.09,0.07,0.11,0.12,0.16,0.08,0.17,0.11,0.1,0.07,0.13,0.08,0.12,0.09,0.09,0.12,0.12,0,8.02,0.22,2983.33,2983.33,1150,5.42,3.47,2.85,6.71,4.29,6.71,10.86},2},
{{0.14,0.13,0.11,0.1,0.1,0.1,0.1,0.08,0.08,0.09,0.11,0.11,0.05,0.05,0.1,0.12,0.11,0.1,0.14,0.14,0.09,0.12,0.14,0.06,0.09,0.09,0.09,0.09,0.14,0.11,0,7.89,0.33,1637.5,2200,2175,5.65,3.68,3.12,7.04,4.57,7.04,11.04},2},
{{0.13,0.11,0.13,0.1,0.12,0.12,0.1,0.07,0.05,0.1,0.08,0.07,0.1,0.08,0.1,0.11,0.12,0.15,0.06,0.16,0.09,0.12,0.1,0.08,0.13,0.14,0.06,0.12,0.09,0.08,0,7.77,0.08,3825,2425,2183.33,5.61,3.3,2.68,6.91,4.08,6.91,10.78},2},
{{0.13,0.13,0.11,0.13,0.1,0.06,0.1,0.08,0.07,0.1,0.08,0.09,0.07,0.07,0.09,0.13,0.1,0.14,0.12,0.15,0.13,0.05,0.09,0.1,0.13,0.12,0.1,0.08,0.11,0.13,0,7.98,0.43,2750,1833.33,1350,5.5,3.46,3.22,6.89,4.24,6.89,11.09},2},
{{0.09,0.09,0.14,0.12,0.14,0.09,0.1,0.11,0.05,0.09,0.07,0.1,0.11,0.09,0.1,0.15,0.09,0.09,0.1,0.13,0.1,0.11,0.11,0.09,0.09,0.08,0.1,0.13,0.09,0.12,0,7.36,0.42,2033.33,3675,1675,5.75,3.27,3.1,7.02,4.13,7.02,10.79},2},
{{0.08,0.13,0.07,0.1,0.1,0.12,0.12,0.09,0.09,0.13,0.14,0.1,0.08,0.06,0.09,0.12,0.11,0.1,0.1,0.11,0.11,0.11,0.12,0.05,0.1,0.1,0.07,0.09,0.13,0.15,0,7.13,0.57,2450,1370,1960,6.44,3.67,3.38,7.8,4.61,7.8,11.2},2},
{{0.09,0.11,0.09,0.11,0.09,0.13,0.1,0.11,0.1,0.11,0.12,0.12,0.08,0.08,0.09,0.16,0.09,0.11,0.07,0.12,0.08,0.13,0.16,0.04,0.1,0.11,0.11,0.09,0.12,0.09,0,6.98,0.15,1950,1110,2225,6.32,3.39,2.85,7.6,4.34,7.6,10.79},2},
{{0.08,0.11,0.09,0.08,0.08,0.14,0.08,0.15,0.09,0.11,0.13,0.1,0.15,0.09,0.1,0.08,0.09,0.08,0.11,0.1,0.1,0.12,0.12,0.13,0.1,0.06,0.12,0.09,0.11,0.08,0,6.73,-0.06,2225,1925,3350,6.56,3.4,2.74,7.86,4.16,7.86,10.68},2},
{{0.07,0.08,0.06,0.09,0.11,0.12,0.07,0.19,0.11,0.11,0.08,0.12,0.14,0.14,0.12,0.11,0.08,0.08,0.07,0.07,0.07,0.09,0.11,0.09,0.14,0.1,0.11,0.14,0.09,0.09,0,6.48,0.08,1875,1700,3450,7.06,3.01,2.55,8.31,3.96,8.31,10.76},2},
{{0.09,0.06,0.08,0.08,0.07,0.05,0.11,0.15,0.2,0.14,0.12,0.11,0.13,0.15,0.13,0.07,0.06,0.08,0.08,0.08,0.15,0.06,0.09,0.14,0.09,0.1,0.08,0.12,0.1,0.09,0,6.26,-0.02,1825,2850,2225,7.58,3.02,2.96,8.77,3.88,8.77,11.19},2},
{{0.08,0.06,0.09,0.08,0.09,0.1,0.11,0.11,0.18,0.13,0.15,0.14,0.12,0.12,0.11,0.07,0.09,0.06,0.11,0.06,0.08,0.16,0.12,0.11,0.09,0.11,0.08,0.1,0.08,0.1,0,6,-0.05,2933.33,1500,1816.67,7.12,3.15,2.88,8.26,3.86,8.26,10.74},2},
{{0.08,0.07,0.08,0.08,0.07,0.07,0.14,0.12,0.16,0.15,0.12,0.12,0.13,0.16,0.14,0.09,0.07,0.04,0.09,0.07,0.1,0.15,0.09,0.09,0.11,0.14,0.1,0.07,0.11,0.07,0,6.05,-0.14,2800,1866.67,2250,7.36,2.84,2.63,8.52,3.59,8.52,10.78},2},
{{0.07,0.09,0.04,0.09,0.06,0.11,0.11,0.12,0.21,0.13,0.13,0.14,0.13,0.14,0.08,0.09,0.11,0.09,0.06,0.06,0.08,0.08,0.1,0.13,0.08,0.16,0.13,0.07,0.05,0.15,0,5.98,0.29,2200,2200,2650,7.55,2.92,2.85,8.74,3.71,8.74,10.84},2},
{{0.06,0.06,0.09,0.08,0.08,0.14,0.09,0.15,0.11,0.16,0.15,0.14,0.13,0.13,0.11,0.1,0.08,0.08,0.09,0.02,0.09,0.11,0.12,0.13,0.12,0.13,0.12,0.09,0.07,0.06,0,5.77,-0.38,4525,3950,3425,7.31,2.72,2.28,8.46,3.38,8.46,10.47},2},
{{0.12,0.21,0.17,0.18,0.1,0.07,0.06,0.05,0.05,0.01,0.05,0.11,0.05,0.02,0.08,0.07,0.12,0.16,0.18,0.18,0.11,0.12,0.09,0.14,0.09,0.09,0.11,0.13,0.05,0.11,0,8.87,0.03,2150,1637.5,2500,3.83,3.46,2.93,4.85,4.23,4.85,10.81},2},
{{0.08,0.1,0.08,0.08,0.06,0.1,0.13,0.11,0.13,0.14,0.19,0.13,0.09,0.09,0.09,0.11,0.08,0.09,0.1,0.06,0.14,0.1,0.17,0.11,0.07,0.1,0.11,0.05,0.09,0.09,0,6.03,-0.21,2200,1483.33,2750,7.03,3.33,2.84,8.34,4.06,8.34,10.76},2},
{{0.08,0.08,0.1,0.07,0.06,0.06,0.14,0.1,0.15,0.19,0.16,0.1,0.1,0.12,0.11,0.12,0.05,0.09,0.09,0.07,0.13,0.1,0.14,0.07,0.12,0.09,0.09,0.08,0.1,0.1,0,6.27,-0.09,1560,1950,1833.33,7.59,3.19,2.81,8.97,4,8.97,11.2},2},
{{0.07,0.06,0.11,0.08,0.09,0.12,0.14,0.09,0.13,0.13,0.13,0.11,0.1,0.13,0.1,0.12,0.1,0.07,0.1,0.07,0.1,0.16,0.12,0.11,0.1,0.07,0.1,0.08,0.1,0.09,0,6.33,-0.04,1912.5,1912.5,1100,7.03,3.16,2.96,8.28,3.96,8.28,10.91},2},
{{0.07,0.09,0.1,0.07,0.07,0.06,0.13,0.19,0.12,0.12,0.12,0.1,0.15,0.09,0.12,0.11,0.12,0.07,0.09,0.05,0.1,0.07,0.14,0.14,0.1,0.09,0.1,0.09,0.09,0.09,0,6.22,-0.03,1675,2187.5,1662.5,7.08,2.94,2.75,8.35,3.7,8.35,10.68},2},
{{0.05,0.07,0.1,0.08,0.09,0.1,0.11,0.13,0.18,0.11,0.12,0.09,0.1,0.21,0.16,0.09,0.07,0.09,0.07,0.02,0.09,0.1,0.09,0.14,0.17,0.1,0.09,0.08,0.1,0.07,0,5.8,-0.19,2975,3050,1150,7.18,2.38,2.48,8.29,3.07,8.29,10.41},2},
{{0.09,0.08,0.07,0.07,0.06,0.1,0.12,0.17,0.14,0.11,0.12,0.13,0.17,0.09,0.14,0.1,0.07,0.09,0.08,0.04,0.07,0.09,0.14,0.1,0.14,0.12,0.11,0.12,0.06,0.07,0,5.93,-0.25,2000,2666.67,3450,7.25,2.77,2.36,8.47,3.48,8.47,10.5},2},
{{0.02,0.06,0.09,0.08,0.08,0.04,0.04,0.05,0.03,0.02,0.04,0.03,0.04,0.03,0.04,0.07,0.06,0.09,0.07,0.03,0.02,0.01,0.01,0.03,0.05,0.03,0.03,0.09,0.11,0.12,0,3.61,1.19,300,950,1825,2.33,2.11,1.57,5.85,5.29,5.85,5.04},2},
{{0.05,0.18,0.17,0.14,0.11,0.08,0.09,0.08,0.08,0,0.13,0.04,0.04,0.12,0.1,0.07,0.11,0.11,0.13,0.1,0.03,0.08,0.06,0.07,0.12,0.17,0.17,0.11,0.09,0.14,0,5.89,0.09,736.36,570,1416.67,6.5,7.72,4.27,8.97,8.83,8.97,12.5},0},
{{0.13,0.16,0.09,0.14,0.1,0.04,0.08,0.08,0.1,0.01,0.14,0.07,0.14,0.08,0.12,0.09,0.09,0.11,0.07,0.08,0.08,0.07,0.13,0.05,0.06,0.25,0.11,0.14,0.06,0.07,0,3.62,-1.83,438.1,625,2100,8.96,6.46,4.43,11.47,7.79,11.47,13.18},0},
{{0.13,0.1,0.11,0.1,0.09,0.13,0.08,0.11,0.08,0.01,0.12,0.12,0.11,0.14,0.06,0.11,0.09,0.1,0.09,0.08,0.07,0.12,0.15,0.08,0.06,0.12,0.14,0.12,0.11,0.06,0,3.26,-2.08,532.35,696.15,3125,8.49,6.28,4.81,10.84,7.61,10.84,12.78},0},
{{0.12,0.12,0.12,0.11,0.14,0.08,0.06,0.1,0.08,0.01,0.05,0.14,0.11,0.19,0.05,0.08,0.1,0.09,0.1,0.08,0.11,0.11,0.06,0.15,0.1,0.07,0.1,0.15,0.09,0.09,0,4,-2.07,482.5,547.06,2450,8.36,6.74,5.13,10.92,7.96,10.92,13.24},0},
{{0.12,0.09,0.13,0.1,0.15,0.06,0.09,0.09,0.09,0.01,0.13,0.07,0.14,0.12,0.09,0.06,0.12,0.08,0.09,0.1,0.13,0.09,0.08,0.13,0.11,0.07,0.09,0.14,0.12,0.06,0,4.03,-2.21,404.35,600,2783.33,9.13,6.96,5.21,11.74,8.18,11.74,13.97},0},
{{0.12,0.08,0.09,0.1,0.11,0.11,0.08,0.13,0.11,0,0.07,0.13,0.11,0.1,0.1,0.09,0.11,0.1,0.11,0.07,0.09,0.12,0.12,0.12,0.08,0.06,0.12,0.11,0.09,0.11,0,4.14,-1.98,481.58,586.67,1800,9.22,6.57,5.36,11.62,7.8,11.62,14.04},0},
{{0.12,0.06,0.12,0.08,0.1,0.11,0.13,0.09,0.11,0.03,0.08,0.11,0.12,0.1,0.1,0.09,0.09,0.12,0.1,0.1,0.08,0.15,0.1,0.09,0.09,0.11,0.09,0.09,0.11,0.12,0,4.16,-1.79,454.76,600,1875,9.32,6.62,5.37,11.7,7.78,11.7,14.19},0},
{{0.08,0.09,0.12,0.11,0.12,0.1,0.1,0.11,0.1,0,0.07,0.1,0.17,0.08,0.09,0.13,0.07,0.12,0.1,0.08,0.1,0.11,0.09,0.05,0.08,0.11,0.11,0.13,0.11,0.13,0,3.8,-1.16,480,661.54,1875,8.79,6.29,5.56,11.33,7.55,11.33,13.59},0},
{{0.12,0.1,0.1,0.12,0.07,0.1,0.1,0.09,0.12,0.02,0.12,0.19,0.08,0.08,0.07,0.07,0.12,0.09,0.11,0.08,0.15,0.09,0.08,0.09,0.08,0.09,0.12,0.08,0.14,0.1,0,3.75,-2.26,475,875,3300,9.41,6.87,5.96,11.88,8.06,11.88,14.59},0},
{{0.05,0.21,0.06,0.08,0.16,0.09,0.09,0.08,0.1,0.01,0.13,0.09,0.08,0.09,0.13,0.14,0.07,0.1,0.08,0.08,0.09,0.09,0.14,0.14,0.1,0.09,0.1,0.08,0.09,0.1,0,3.63,-2.16,530.56,657.14,2675,8.77,6.55,5.05,11.13,7.97,11.13,13.49},0},
{{0.09,0.09,0.1,0.13,0.12,0.11,0.08,0.09,0.09,0.01,0.06,0.12,0.12,0.1,0.08,0.13,0.16,0.1,0.07,0.07,0.1,0.06,0.1,0.08,0.11,0.15,0.13,0.1,0.1,0.1,0,3.63,-1.42,486.84,745,2250,8.85,5.71,4.88,11.48,7.2,11.48,13.18},0},
{{0.11,0.1,0.08,0.13,0.07,0.11,0.12,0.09,0.1,0.01,0.1,0.09,0.14,0.12,0.09,0.09,0.1,0.11,0.09,0.08,0.12,0.08,0.12,0.11,0.13,0.1,0.07,0.08,0.07,0.13,0,3.63,-2.22,472.22,715.38,2325,9.2,6.39,5.4,11.66,7.68,11.66,13.94},0},
{{0.11,0.09,0.09,0.09,0.11,0.1,0.1,0.1,0.11,0.01,0.12,0.12,0.1,0.07,0.1,0.06,0.14,0.08,0.12,0.1,0.14,0.11,0.06,0.13,0.1,0.11,0.09,0.08,0.14,0.07,0,4.27,-2.43,447.62,565.63,1725,9.4,6.92,5.39,11.87,8.12,11.87,14.39},0},
{{0.11,0.09,0.11,0.06,0.12,0.12,0.13,0.09,0.08,0.02,0.07,0.13,0.1,0.08,0.11,0.11,0.09,0.11,0.11,0.09,0.12,0.14,0.07,0.1,0.1,0.07,0.12,0.11,0.09,0.1,0,4.37,-2.26,404.55,689.29,1620,8.96,6.71,5.73,11.35,7.91,11.35,14.27},0},
{{0.08,0.1,0.08,0.09,0.09,0.09,0.13,0.12,0.12,0.01,0.09,0.1,0.08,0.11,0.15,0.1,0.08,0.09,0.12,0.09,0.09,0.1,0.13,0.09,0.1,0.1,0.11,0.1,0.1,0.1,0,4.16,-1.88,487.5,617.86,1850,9.57,6.66,5.31,11.88,7.8,11.88,14.1},0},
{{0.11,0.1,0.08,0.08,0.08,0.1,0.15,0.08,0.13,0.02,0.12,0.06,0.13,0.1,0.12,0.09,0.09,0.11,0.1,0.09,0.11,0.09,0.1,0.1,0.11,0.1,0.13,0.06,0.14,0.1,0,3.91,-1.93,462.5,606.25,3725,9.67,6.6,5.26,11.91,7.83,11.91,14.19},0},
{{0.12,0.07,0.1,0.12,0.08,0.09,0.13,0.1,0.11,0.01,0.07,0.08,0.13,0.1,0.13,0.16,0.1,0.11,0.09,0.04,0.06,0.14,0.12,0.1,0.12,0.07,0.11,0.09,0.11,0.1,0,3.4,-1.9,447.62,825,2516.67,9.23,5.57,5.08,11.62,6.94,11.62,13.39},0},
{{0.11,0.11,0.09,0.08,0.11,0.11,0.09,0.1,0.13,0,0.11,0.12,0.09,0.1,0.08,0.1,0.13,0.1,0.1,0.09,0.13,0.1,0.09,0.12,0.1,0.08,0.13,0.08,0.09,0.1,0,3.94,-2.27,460,544.12,4325,9.41,6.47,5.34,11.82,7.82,11.82,14.04},0},
{{0.11,0.09,0.09,0.11,0.1,0.1,0.09,0.08,0.12,0.02,0.07,0.09,0.14,0.08,0.18,0.09,0.1,0.07,0.11,0.09,0.09,0.1,0.08,0.09,0.15,0.1,0.11,0.1,0.11,0.08,0,3.93,-1.88,475,552.94,1762.5,9.63,6.41,4.89,12.08,7.64,12.08,13.83},0},
{{0.09,0.08,0.1,0.1,0.09,0.12,0.08,0.13,0.12,0.01,0.09,0.1,0.09,0.1,0.13,0.09,0.1,0.12,0.11,0.08,0.11,0.12,0.12,0.11,0.1,0.06,0.09,0.11,0.11,0.09,0,4.26,-2.17,459.52,620,4450,9.2,6.53,5.52,11.65,7.7,11.65,14.14},0},
{{0.09,0.08,0.11,0.1,0.07,0.15,0.11,0.13,0.11,0.01,0.16,0.08,0.05,0.12,0.09,0.11,0.1,0.11,0.12,0.08,0.12,0.11,0.09,0.12,0.13,0.11,0.04,0.07,0.11,0.12,0,3.95,-2.1,431.82,675,1610,8.89,6.62,5.73,11.26,7.88,11.26,14.12},0},
{{0.11,0.06,0.13,0.1,0.07,0.15,0.11,0.11,0.06,0.03,0.12,0.14,0.07,0.09,0.09,0.1,0.13,0.12,0.08,0.09,0.11,0.13,0.09,0.1,0.1,0.09,0.08,0.11,0.08,0.13,0,3.65,-1.93,422.73,623.33,2600,9.11,6.21,5.82,11.56,7.61,11.56,14.06},0},
{{0.08,0.12,0.06,0.11,0.12,0.1,0.09,0.14,0.1,0.01,0.13,0.09,0.09,0.08,0.08,0.14,0.09,0.09,0.13,0.07,0.13,0.09,0.07,0.15,0.08,0.09,0.09,0.1,0.07,0.16,0,4.13,-1.68,485,808.33,2975,9,6.69,6.03,11.44,7.97,11.44,14.44},0},
{{0.11,0.11,0.12,0.07,0.08,0.1,0.11,0.1,0.08,0.01,0.1,0.09,0.09,0.13,0.09,0.1,0.14,0.09,0.07,0.09,0.1,0.08,0.12,0.13,0.09,0.11,0.08,0.12,0.09,0.11,0,3.98,-1.78,457.14,520.59,2475,9.21,6.32,5.33,11.64,7.72,11.64,13.89},0},
{{0.09,0.08,0.08,0.09,0.11,0.11,0.11,0.11,0.14,0.01,0.12,0.08,0.09,0.09,0.09,0.13,0.08,0.12,0.12,0.08,0.11,0.09,0.15,0.08,0.12,0.08,0.08,0.09,0.12,0.1,0,4.15,-2.08,440.91,559.38,2925,9.66,6.68,5.55,12.01,7.9,12.01,14.45},0},
{{0,0.02,0.04,0.02,0.03,0.01,0.03,0.02,0.01,0,0.01,0.01,0.02,0.01,0.02,0.01,0.02,0.03,0.04,0.02,0.01,0.02,0.02,0.02,0.06,0.01,0.02,0.02,0.01,0.01,0,1.14,-0.28,350,350,400,0.91,1.28,0.87,7.4,9.42,7.4,2.12},0},
{{0,0,0,0.01,0.02,0.04,0.05,0.18,0.16,0.54,0.47,0,0.38,0.14,0.01,0.01,0,0,0,0,0.32,0,0,0.37,0,0,0.23,0,0,0.09,0,-1.76,9.46,350,350,242.5,0.61,0.07,0.03,0.65,0.23,0.65,9.65},3},
{{0,0,0,0.01,0.01,0.03,0.04,0.15,0.28,0.49,0.19,0,0.72,0.1,0,0,0,0,0,0,0.15,0,0,0.49,0,0,0.31,0,0,0.06,0,-1.72,9.47,350,350,360.87,0.64,0.03,0.02,0.65,0.05,0.65,9.65},3},
{{0,0,0.01,0,0.01,0,0,0.13,0.23,0.63,0.04,0,0.62,0.28,0.04,0,0.01,0,0.01,0.01,0.1,0,0,0.41,0,0,0.37,0,0,0.13,0,-1.68,9.48,350,350,255.41,0.6,0.04,0.02,0.61,0.07,0.61,9.65},3},
{{0,0.01,0.04,0.39,0.27,0.02,0.03,0.13,0.02,0.1,0.4,0,0.44,0.1,0.02,0.02,0.01,0,0.02,0.01,0.17,0,0,0.45,0,0,0.29,0,0,0.1,0,-1.72,9.47,350,350,333.93,0.83,0.06,0.03,0.85,0.1,0.85,9.67},3},
{{0,0,0,0,0,0,0.16,0.51,0.23,0.11,0,0,0,0,0,0,0.09,0.2,0.32,0.4,0,0,0.04,0.25,0.16,0.2,0.29,0.03,0.04,0.01,0,8.17,1.33,350,325.86,681.25,5.22,0.04,0.07,5.22,0.08,5.22,9.79},4},
{{0,0,0,0,0,0,0.03,0.54,0.32,0.12,0,0,0,0,0,0,0.04,0.14,0.33,0.5,0,0,0,0.17,0.22,0.28,0.27,0.05,0.03,0,0,8.18,1.34,350,301.56,362.96,5.19,0.04,0.05,5.2,0.05,5.2,9.78},4},
{{0,0,0,0,0,0,0.01,0.34,0.55,0.11,0,0,0,0,0,0,0.02,0.1,0.33,0.56,0,0,0,0.02,0.04,0.1,0.49,0.21,0.14,0.01,0,8.18,1.42,350,258.11,350,5.17,0.03,0.05,5.18,0.04,5.18,9.78},4},
{{0,0,0,0,0,0,0.07,0.3,0.31,0.33,0,0,0,0,0,0,0.05,0.2,0.25,0.51,0,0,0.01,0.09,0.04,0.05,0.14,0.11,0.41,0.17,0,8.18,1.48,350,288.24,348,5.15,0.05,0.1,5.16,0.06,5.16,9.78},4},
{{0,0,0,0,0,0,0.02,0.08,0.19,0.68,0,0,0,0,0,0.01,0.05,0.07,0.14,0.72,0.49,0.1,0.01,0,0,0.01,0.03,0.04,0.24,0.11,0,8.33,-0.02,350,483.33,300,4.74,0.18,1.3,4.76,0.28,4.76,9.69},4},
{{0.01,0,0.01,0.02,0.02,0.07,0.43,0.05,0.03,0.38,0.02,0,0.01,0.01,0.02,0.04,0.59,0.01,0.02,0.29,0.37,0.29,0.06,0.08,0.02,0.04,0.09,0.02,0.01,0.03,0,7.93,-0.13,350,1100,200,5.44,0.33,1.05,5.48,0.47,5.48,9.71},4},
{{0,0,0,0.02,0.04,0.6,0.35,0,0,0,0,0,0,0.01,0.02,0.5,0.49,0,0,0,0,0,0.28,0.19,0.07,0.07,0.13,0.08,0.16,0.06,0,7.58,1.31,350,230.95,466.67,6.14,0.1,0.16,6.14,0.14,6.14,9.85},4},
{{0,0,0,0.03,0.3,0.43,0.25,0,0,0,0,0,0,0.02,0.28,0.39,0.32,0,0,0,0,0,0,0.02,0.01,0.01,0.11,0.07,0.5,0.29,0,7.46,1.54,350,248.72,465.63,6.23,0.14,0.08,6.24,0.17,6.24,9.84},4},
{{0,0,0,0.29,0.65,0.07,0,0,0,0,0,0,0,0.13,0.82,0.05,0.01,0,0,0,0,0,0,0,0.01,0.03,0.11,0.14,0.4,0.33,0,7.22,1.54,350,292.42,1120,6.53,0.06,0.08,6.53,0.08,6.53,9.85},4},
{{0.02,0,0.01,0.38,0.31,0.24,0.05,0.01,0,0,0.02,0.01,0,0.26,0.49,0.2,0.04,0,0,0,0,0,0.05,0.1,0.06,0.08,0.17,0.1,0.22,0.23,0,7.22,1.47,350,232.93,1033.33,6.52,0.15,0.15,6.53,0.25,6.53,9.84},4},
{{0.03,0.02,0.67,0.24,0.04,0.01,0.01,0,0,0,0.01,0.02,0.47,0.45,0.04,0.01,0.01,0,0,0.01,0,0,0.18,0.19,0.12,0.09,0.2,0.09,0.11,0.05,0,6.77,1.33,350,250,841.67,7.15,0.15,0.12,7.15,0.32,7.15,9.94},4},
{{0.25,0.13,0.11,0.26,0.08,0.09,0.09,0,0,0,0.21,0.18,0.14,0.29,0.06,0.09,0.05,0,0,0,0.32,0.18,0.31,0.1,0.03,0.03,0.03,0.01,0.01,0,0,6.72,0.1,350,416.67,1762.5,7.03,0.42,1.08,7.07,0.5,7.07,9.82},4},
{{0.43,0.52,0.06,0,0,0,0,0,0,0,0.4,0.58,0.03,0,0,0,0,0,0,0,0,0,0.21,0.31,0.06,0.11,0.17,0.08,0.06,0.02,0,6.32,1.28,350,242.31,420,7.59,0.06,0.12,7.6,0.09,7.6,9.96},4},
{{0.28,0.46,0.22,0.04,0,0,0,0,0,0,0.3,0.52,0.15,0.04,0,0.01,0,0,0,0,0,0,0.15,0.15,0.12,0.11,0.15,0.08,0.14,0.12,0,6.35,1.35,350,558.33,2000,7.54,0.13,0.16,7.55,0.19,7.55,9.96},4},
{{0.25,0.12,0.32,0.19,0.06,0.05,0.01,0.01,0,0.01,0.21,0.15,0.37,0.16,0.06,0.03,0.01,0,0.01,0.01,0.16,0.18,0.15,0.05,0.04,0.01,0.02,0.02,0.12,0.25,0,6.54,0.83,350,2116.67,3175,7.28,0.39,0.99,7.31,0.63,7.31,9.93},4},
{{0.1,0.32,0.24,0.22,0.05,0.05,0.04,0,0,0,0.08,0.12,0.5,0.24,0.02,0.03,0.03,0,0,0,0.26,0.61,0.11,0.02,0,0,0,0,0,0.01,0,6.62,-0.06,350,492.86,200,7.19,0.25,0.76,7.21,0.36,7.21,9.83},4},
{{0.05,0.18,0.07,0.03,0.01,0.01,0.01,0,0,0,0.04,0.06,0.2,0.03,0.01,0.01,0,0,0,0,0,0.27,0.07,0,0,0,0,0,0,0,0,2.18,0.2,350,250,125,2.48,1.45,0.13,7.44,4.34,7.44,3.31},4},
{{0.1,0.06,0.08,0.09,0.09,0.13,0.12,0.12,0.1,0.13,0.06,0.14,0.09,0.13,0.07,0.11,0.11,0.11,0.12,0.07,0.09,0.1,0.09,0.12,0.11,0.06,0.12,0.11,0.12,0.11,0,9.74,0.07,1216.67,956.25,1800,2.08,2.77,2.12,2.76,3.32,2.76,10.42},2},
{{0.11,0.09,0.07,0.1,0.11,0.14,0.07,0.13,0.1,0.12,0.06,0.12,0.1,0.12,0.12,0.11,0.14,0.1,0.1,0.06,0.08,0.12,0.11,0.11,0.05,0.11,0.11,0.11,0.13,0.09,0,9.75,0.02,4800,941.67,2250,2.2,2.62,2.05,2.91,3.25,2.91,10.46},2},
{{0.07,0.08,0.09,0.11,0.12,0.09,0.12,0.15,0.08,0.12,0.08,0.11,0.1,0.1,0.12,0.1,0.12,0.12,0.08,0.09,0.11,0.11,0.13,0.09,0.1,0.09,0.09,0.1,0.12,0.1,0,9.8,0.05,3975,990,1933.33,2.02,2.75,2.32,2.69,3.41,2.69,10.53},2},
{{0.05,0.1,0.13,0.11,0.08,0.09,0.12,0.13,0.08,0.13,0.1,0.13,0.08,0.09,0.13,0.07,0.13,0.12,0.09,0.09,0.09,0.12,0.14,0.12,0.09,0.09,0.08,0.09,0.1,0.1,0,9.64,-0.11,2700,1360,2825,2.03,2.9,2.23,2.62,3.52,2.62,10.37},2},
{{0.08,0.08,0.08,0.13,0.12,0.13,0.07,0.12,0.09,0.12,0.08,0.13,0.1,0.08,0.12,0.1,0.1,0.12,0.08,0.11,0.07,0.06,0.11,0.13,0.1,0.11,0.14,0.09,0.13,0.1,0,9.78,0.28,4575,1787.5,1900,2.09,2.96,2.17,2.72,3.61,2.72,10.48},2},
{{0.12,0.07,0.12,0.09,0.12,0.11,0.12,0.08,0.07,0.13,0.08,0.1,0.08,0.13,0.14,0.12,0.1,0.1,0.09,0.08,0.06,0.06,0.07,0.12,0.15,0.13,0.11,0.11,0.09,0.13,0,9.65,0.32,1475,2566.67,2925,2.14,2.62,2.09,2.74,3.33,2.74,10.35},2},
{{0.11,0.09,0.09,0.09,0.1,0.14,0.09,0.1,0.06,0.16,0.09,0.14,0.09,0.12,0.11,0.07,0.09,0.09,0.1,0.13,0.07,0.11,0.1,0.1,0.12,0.13,0.09,0.09,0.12,0.08,0,9.78,0.04,1200,1170,2900,2.28,3.14,2.07,2.95,3.77,2.95,10.51},2},
{{0.1,0.1,0.1,0.11,0.08,0.1,0.14,0.12,0.1,0.09,0.09,0.12,0.11,0.11,0.07,0.13,0.09,0.11,0.09,0.11,0.1,0.08,0.1,0.09,0.13,0.1,0.11,0.12,0.1,0.09,0,9.72,-0.02,1762.5,1870,1183.33,2.04,2.96,2.07,2.7,3.61,2.7,10.43},2},
{{0.1,0.11,0.08,0.12,0.11,0.12,0.12,0.06,0.13,0.09,0.12,0.11,0.06,0.14,0.1,0.1,0.11,0.09,0.12,0.07,0.1,0.1,0.12,0.12,0.05,0.11,0.07,0.14,0.11,0.1,0,9.53,0.02,1630,2212.5,2900,2.11,2.91,2.22,2.73,3.59,2.73,10.28},2},
{{0.12,0.11,0.13,0.08,0.08,0.12,0.09,0.09,0.13,0.08,0.13,0.09,0.06,0.08,0.13,0.14,0.1,0.08,0.13,0.07,0.11,0.1,0.08,0.1,0.11,0.09,0.14,0.09,0.11,0.09,0,9.67,0,1425,1900,2350,2.19,2.9,2.16,2.79,3.65,2.79,10.44},2},
{{0.08,0.12,0.11,0.09,0.13,0.08,0.09,0.13,0.1,0.1,0.09,0.12,0.09,0.11,0.09,0.11,0.1,0.07,0.12,0.12,0.09,0.14,0.09,0.12,0.1,0.06,0.12,0.11,0.07,0.13,0,9.95,0.27,1683.33,927.78,1725,2.06,3.16,2.59,2.65,3.9,2.65,10.79},2},
{{0.13,0.08,0.08,0.15,0.1,0.06,0.13,0.11,0.11,0.09,0.1,0.11,0.1,0.1,0.06,0.13,0.09,0.11,0.08,0.14,0.15,0.1,0.12,0.11,0.08,0.11,0.08,0.13,0.05,0.1,0,9.95,-0.26,1816.67,1408.33,2933.33,2.18,3.16,2.21,2.85,3.88,2.85,10.74},2},
{{0.11,0.1,0.13,0.1,0.1,0.09,0.08,0.13,0.1,0.08,0.1,0.11,0.11,0.08,0.08,0.15,0.1,0.13,0.1,0.06,0.11,0.09,0.12,0.12,0.07,0.09,0.14,0.07,0.14,0.08,0,9.6,-0.15,1550,1266.67,1150,2.08,2.75,2.01,2.67,3.34,2.67,10.27},2},
{{0.11,0.09,0.1,0.12,0.12,0.12,0.1,0.07,0.09,0.1,0.14,0.07,0.1,0.12,0.11,0.08,0.09,0.11,0.08,0.13,0.11,0.11,0.11,0.11,0.17,0.06,0.06,0.12,0.07,0.1,0,9.77,-0.09,2416.67,887.5,1866.67,2.17,3.25,2.3,2.78,4,2.78,10.57},2},
{{0.09,0.14,0.11,0.1,0.11,0.08,0.13,0.08,0.08,0.1,0.11,0.1,0.09,0.12,0.09,0.1,0.12,0.11,0.09,0.1,0.13,0.11,0.06,0.08,0.1,0.09,0.15,0.09,0.12,0.1,0,9.82,-0.02,3425,755,2850,2.14,2.97,2.16,2.74,3.66,2.74,10.57},2},
{{0.1,0.11,0.1,0.13,0.11,0.11,0.1,0.08,0.08,0.1,0.1,0.11,0.11,0.1,0.12,0.04,0.11,0.11,0.09,0.12,0.12,0.09,0.1,0.08,0.11,0.08,0.13,0.1,0.07,0.13,0,9.78,0.08,2675,935.71,2900,2.16,3.13,2.34,2.81,3.79,2.81,10.56},2},
{{0.1,0.1,0.12,0.12,0.14,0.09,0.08,0.12,0.07,0.09,0.09,0.11,0.09,0.11,0.14,0.12,0.08,0.07,0.11,0.11,0.04,0.1,0.11,0.1,0.07,0.15,0.07,0.13,0.14,0.12,0,9.74,0.41,1725,719.23,2950,2.11,2.85,2.21,2.72,3.5,2.72,10.45},2},
{{0.14,0.1,0.09,0.12,0.12,0.1,0.07,0.12,0.12,0.04,0.06,0.07,0.18,0.07,0.15,0.13,0.1,0.13,0.1,0.04,0.04,0.12,0.08,0.12,0.14,0.1,0.11,0.1,0.13,0.08,0,9.58,0.09,1850,1118.75,4125,2.31,2.33,1.94,3.15,2.9,3.15,10.37},2},
{{0.17,0.1,0.12,0.12,0.1,0.07,0.06,0.07,0.12,0.09,0.15,0.08,0.08,0.11,0.07,0.09,0.07,0.14,0.11,0.12,0.13,0.09,0.12,0.05,0.11,0.11,0.1,0.1,0.07,0.14,0,9.89,0.22,1450,1641.67,2825,2.51,3.31,2.45,3.16,3.99,3.16,10.82},2},
{{0.14,0.15,0.1,0.1,0.1,0.12,0.08,0.08,0.09,0.07,0.16,0.08,0.09,0.14,0.08,0.07,0.07,0.12,0.11,0.11,0.07,0.13,0.11,0.11,0.09,0.09,0.06,0.12,0.1,0.13,0,9.45,0.17,1733.33,840.91,4050,2.36,3.32,2.3,3.03,3.96,3.03,10.33},2},
{{0.13,0.12,0.11,0.14,0.11,0.13,0.07,0.05,0.06,0.1,0.14,0.12,0.06,0.12,0.07,0.1,0.09,0.12,0.1,0.12,0.13,0.14,0.11,0.06,0.06,0.09,0.12,0.13,0.11,0.08,0,9.73,0,1540,1093.75,2175,2.35,3.35,2.38,2.97,4.08,2.97,10.65},2},
{{0.17,0.11,0.12,0.08,0.08,0.12,0.11,0.09,0.1,0.06,0.17,0.08,0.08,0.11,0.07,0.07,0.12,0.06,0.11,0.15,0.17,0.1,0.09,0.09,0.06,0.07,0.16,0.1,0.09,0.1,0,9.86,-0.17,1300,1000,3400,2.39,3.58,2.34,3.12,4.34,3.12,10.79},2},
{{0.15,0.1,0.12,0.1,0.11,0.11,0.13,0.05,0.09,0.07,0.14,0.08,0.08,0.12,0.08,0.11,0.1,0.11,0.09,0.11,0.12,0.13,0.07,0.09,0.06,0.08,0.17,0.08,0.14,0.09,0,9.75,0.01,3050,1558.33,4500,2.32,3.07,2.22,3.1,3.77,3.1,10.59},2},
{{0.17,0.09,0.11,0.11,0.12,0.13,0.06,0.07,0.08,0.09,0.16,0.09,0.06,0.09,0.07,0.13,0.1,0.09,0.12,0.11,0.15,0.07,0.08,0.04,0.07,0.1,0.15,0.15,0.1,0.12,0,9.78,0.24,1733.33,825,2283.33,2.48,3.26,2.35,3.22,3.99,3.22,10.73},2},
{{0.1,0.1,0.08,0.09,0.1,0.1,0.13,0.11,0.12,0.11,0.1,0.08,0.12,0.13,0.09,0.12,0.07,0.1,0.12,0.09,0.1,0.06,0.09,0.09,0.1,0.1,0.16,0.11,0.12,0.09,0,9.77,0.15,2925,483.33,2333.33,2.09,2.94,2.02,2.75,3.61,2.75,10.46},2},
{{0.07,0.1,0.11,0.06,0.06,0.09,0.19,0.13,0.12,0.12,0.05,0.13,0.11,0.1,0.11,0.09,0.16,0.09,0.08,0.09,0.09,0.08,0.11,0.1,0.12,0.09,0.1,0.11,0.12,0.11,0,9.75,0.22,3450,828.57,2300,1.95,2.72,2.26,2.61,3.33,2.61,10.45},2},
{{0.04,0.09,0.11,0.1,0.09,0.13,0.11,0.1,0.12,0.14,0.09,0.09,0.15,0.08,0.1,0.07,0.13,0.11,0.11,0.09,0.07,0.08,0.08,0.14,0.18,0.07,0.08,0.11,0.09,0.13,0,9.77,0.2,4175,1275,3550,1.94,2.94,2.17,2.54,3.51,2.54,10.41},2},
{{0.04,0.08,0.1,0.11,0.06,0.09,0.12,0.15,0.14,0.14,0.05,0.13,0.08,0.1,0.09,0.13,0.16,0.08,0.11,0.08,0.12,0.1,0.14,0.18,0.13,0.06,0.06,0.07,0.08,0.09,0,9.92,-0.33,1750,1620,4050,2,2.65,2.17,2.65,3.28,2.65,10.62},2},
{{0.08,0.07,0.08,0.14,0.06,0.08,0.08,0.15,0.16,0.13,0.08,0.11,0.11,0.09,0.1,0.12,0.06,0.15,0.1,0.1,0.12,0.09,0.09,0.17,0.18,0.04,0.08,0.08,0.12,0.07,0,9.91,-0.29,4075,845.45,2325,2.08,2.92,2,2.64,3.53,2.64,10.58},2},
{{0.07,0.03,0.13,0.1,0.08,0.11,0.08,0.19,0.11,0.13,0.08,0.12,0.14,0.09,0.09,0.1,0.13,0.1,0.11,0.08,0.08,0.09,0.09,0.15,0.16,0.14,0.08,0.07,0.08,0.07,0,9.72,-0.23,2300,1450,1166.67,1.9,2.89,1.84,2.47,3.48,2.47,10.3},2},
{{0.08,0.12,0.05,0.1,0.08,0.1,0.15,0.1,0.13,0.12,0.08,0.09,0.12,0.09,0.11,0.14,0.1,0.1,0.1,0.1,0.1,0.07,0.09,0.16,0.08,0.12,0.12,0.09,0.09,0.1,0,9.95,-0.02,2675,1027.78,3475,2.12,2.85,2.08,2.82,3.55,2.82,10.65},2},
{{0.07,0.07,0.09,0.12,0.06,0.14,0.1,0.14,0.14,0.1,0.07,0.11,0.14,0.05,0.13,0.1,0.13,0.1,0.1,0.09,0.09,0.09,0.07,0.13,0.11,0.12,0.09,0.13,0.08,0.11,0,9.78,0.24,2400,890.91,2062.5,1.9,2.81,2.26,2.52,3.43,2.52,10.47},2},
{{0.05,0.1,0.09,0.07,0.11,0.13,0.1,0.09,0.17,0.1,0.08,0.1,0.11,0.07,0.13,0.11,0.12,0.1,0.08,0.13,0.08,0.09,0.1,0.13,0.17,0.11,0.11,0.09,0.05,0.1,0,10,-0.1,1966.67,1175,1566.67,1.94,2.83,1.96,2.5,3.51,2.5,10.62},2},
{{0.04,0.16,0.07,0.08,0.1,0.11,0.15,0.08,0.11,0.12,0.08,0.15,0.13,0.07,0.09,0.08,0.12,0.1,0.09,0.11,0.07,0.08,0.08,0.11,0.09,0.15,0.12,0.11,0.09,0.12,0,9.69,0.46,2925,1018.75,3133.33,1.94,3.11,2.4,2.47,3.74,2.47,10.42},2},
{{0.06,0.13,0.08,0.09,0.14,0.12,0.07,0.1,0.12,0.12,0.07,0.09,0.11,0.08,0.13,0.09,0.13,0.13,0.11,0.08,0.08,0.08,0.1,0.07,0.14,0.14,0.12,0.09,0.1,0.1,0,10.03,0.25,2966.67,1187.5,2200,2.06,2.78,2.24,2.6,3.45,2.6,10.73},2},
{{0.1,0.07,0.14,0.12,0.07,0.08,0.11,0.11,0.1,0.11,0.08,0.09,0.13,0.09,0.11,0.12,0.09,0.11,0.11,0.1,0.1,0.1,0.1,0.17,0.11,0.09,0.06,0.1,0.1,0.09,0,9.89,-0.18,2550,1416.67,1916.67,2.29,2.84,2.11,3.03,3.5,3.03,10.65},2},
{{0.08,0.13,0.11,0.06,0.09,0.1,0.15,0.07,0.11,0.12,0.1,0.1,0.11,0.09,0.1,0.1,0.11,0.09,0.13,0.08,0.13,0.11,0.1,0.14,0.1,0.07,0.08,0.09,0.1,0.09,0,9.81,-0.21,2062.5,1070,1150,2.11,2.96,2.19,2.69,3.62,2.69,10.56},2},
{{0.11,0.09,0.11,0.09,0.09,0.07,0.12,0.13,0.13,0.08,0.08,0.09,0.07,0.12,0.14,0.13,0.12,0.06,0.11,0.1,0.14,0.1,0.09,0.11,0.09,0.06,0.13,0.13,0.1,0.09,0,9.89,-0.15,1150,1712.5,3450,2.14,2.74,2.1,2.79,3.47,2.79,10.62},2},
{{0.09,0.11,0.12,0.08,0.08,0.12,0.1,0.11,0.11,0.11,0.13,0.07,0.12,0.08,0.11,0.12,0.09,0.07,0.11,0.11,0.16,0.12,0.11,0.11,0.1,0.04,0.12,0.08,0.08,0.1,0,9.91,-0.2,1125,1520,2650,2.14,3.22,2.43,2.77,4.05,2.77,10.75},2},
{{0.13,0.09,0.09,0.11,0.08,0.09,0.13,0.11,0.09,0.11,0.16,0.08,0.08,0.13,0.06,0.11,0.08,0.1,0.12,0.11,0.17,0.07,0.11,0.07,0.12,0.08,0.09,0.08,0.11,0.11,0,9.7,-0.1,1516.67,1093.75,2850,2.26,3.38,2.43,3.01,4.08,3.01,10.58},2},
{{0.09,0.13,0.09,0.1,0.07,0.12,0.11,0.11,0.11,0.09,0.09,0.12,0.08,0.12,0.11,0.09,0.09,0.1,0.13,0.1,0.09,0.11,0.12,0.09,0.07,0.12,0.1,0.11,0.1,0.1,0,9.8,0.16,1900,1118.75,3350,2.07,3,2.42,2.63,3.65,2.63,10.59},2},
{{0.11,0.05,0.13,0.11,0.11,0.09,0.1,0.11,0.12,0.09,0.08,0.11,0.1,0.1,0.12,0.09,0.1,0.1,0.09,0.13,0.08,0.09,0.13,0.11,0.14,0.1,0.08,0.11,0.06,0.13,0,9.87,0.13,1150,1300,3033.33,2.08,2.94,2.37,2.71,3.6,2.71,10.63},2},
{{0.1,0.14,0.08,0.08,0.13,0.11,0.09,0.09,0.07,0.14,0.16,0.06,0.09,0.09,0.11,0.1,0.08,0.11,0.08,0.15,0.09,0.14,0.1,0.09,0.08,0.12,0.11,0.08,0.1,0.12,0,9.8,0.18,1975,1358.33,2900,2.36,3.29,2.43,3.11,4.04,3.11,10.7},2},
{{0.14,0.09,0.09,0.07,0.11,0.11,0.1,0.12,0.1,0.08,0.12,0.07,0.15,0.07,0.08,0.09,0.08,0.16,0.1,0.11,0.14,0.07,0.11,0.08,0.12,0.09,0.07,0.12,0.13,0.1,0,9.92,-0.03,1800,1087.5,1566.67,2.29,3.1,2.22,3.02,3.7,3.02,10.72},2},
{{0.14,0.1,0.08,0.08,0.1,0.11,0.1,0.13,0.12,0.09,0.12,0.09,0.11,0.09,0.1,0.08,0.08,0.13,0.11,0.12,0.09,0.09,0.09,0.09,0.07,0.09,0.19,0.11,0.12,0.08,0,9.89,0.07,1150,2000,1150,2.28,3.27,2.01,3.11,3.93,3.11,10.65},2},
{{0.13,0.1,0.09,0.1,0.13,0.12,0.08,0.08,0.1,0.09,0.1,0.1,0.13,0.1,0.08,0.11,0.09,0.1,0.11,0.11,0.09,0.1,0.1,0.09,0.07,0.07,0.13,0.11,0.12,0.14,0,9.79,0.48,1883.33,1330,1675,2.31,3.13,2.57,3.01,3.81,3.01,10.72},2},
{{0.12,0.12,0.12,0.11,0.08,0.08,0.13,0.08,0.08,0.11,0.1,0.11,0.12,0.11,0.1,0.08,0.07,0.11,0.08,0.15,0.09,0.12,0.1,0.1,0.1,0.06,0.08,0.11,0.17,0.08,0,9.86,0.24,2300,1200,4650,2.3,3.28,2.37,2.97,4,2.97,10.69},2},
{{0.09,0.15,0.11,0.16,0.1,0.12,0.09,0.07,0.09,0.05,0.11,0.08,0.12,0.13,0.12,0.09,0.1,0.08,0.1,0.1,0.06,0.11,0.09,0.11,0.1,0.13,0.12,0.1,0.1,0.1,0,9.79,0.2,2850,2016.67,2875,2.07,2.92,2.18,2.59,3.61,2.59,10.51},2},
{{0.06,0.06,0.04,0.02,0,0.01,0,0,0,0,0.01,0.02,0.04,0.02,0.03,0.03,0.01,0.01,0.01,0.01,0.01,0.01,0,0.02,0,0.01,0.02,0.05,0.06,0.03,0,1.58,0.39,2850,250,275,0.64,1.3,0.46,3.92,7.89,3.92,1.84},2},
{{0.06,0.05,0.14,0.14,0.12,0.07,0.12,0.13,0.1,0.09,0.01,0.03,0.14,0.19,0.07,0.13,0.17,0.13,0.09,0.02,0.04,0.04,0.05,0.1,0.1,0.07,0.11,0.15,0.2,0.15,0,7.3,0.69,3950,620,1500,5.8,6.12,3.38,8.15,7,8.15,11.31},0},
{{0,0,0.06,0.13,0.14,0.14,0.07,0.14,0.07,0.27,0.09,0.02,0.08,0.13,0.11,0.09,0.09,0.16,0.12,0.06,0.03,0.11,0.12,0.07,0.03,0.06,0.09,0.12,0.2,0.19,0,8.4,0.66,2050,365.22,3425,3.84,7.53,3.8,4.89,8.34,4.89,12.12},0},
{{0.07,0.08,0.09,0.18,0.07,0.09,0.13,0.11,0.1,0.11,0.02,0.08,0.14,0.17,0.09,0.07,0.14,0.13,0.08,0.03,0.06,0.07,0.11,0.11,0.08,0.07,0.11,0.15,0.13,0.14,0,7.11,-0.14,1150,372.92,4275,6.18,7.06,3.29,8.66,7.85,8.66,11.6},0},
{{0.1,0.11,0.11,0.11,0.05,0.11,0.08,0.15,0.06,0.15,0.03,0.09,0.16,0.2,0.07,0.04,0.14,0.07,0.14,0.05,0.07,0.07,0.12,0.1,0.11,0.09,0.11,0.14,0.09,0.12,0,6.91,-0.49,2875,376.92,1400,6.94,7.39,3.26,9.76,8.11,9.76,12.06},0},
{{0.07,0.12,0.09,0.08,0.11,0.14,0.09,0.11,0.1,0.13,0.05,0.12,0.12,0.2,0.09,0.06,0.09,0.09,0.12,0.06,0.1,0.08,0.11,0.09,0.08,0.11,0.16,0.08,0.11,0.11,0,6.27,-0.96,3025,397.83,2275,6.44,7.24,3.17,9.21,8.14,9.21,11.57},0},
{{0.09,0.09,0.12,0.08,0.11,0.09,0.12,0.13,0.11,0.1,0.05,0.13,0.13,0.14,0.11,0.08,0.11,0.07,0.11,0.05,0.12,0.12,0.1,0.08,0.12,0.09,0.15,0.09,0.07,0.09,0,6.24,-1.47,3425,400,400,6.35,7.02,3.06,9.17,7.97,9.17,11.36},0},
{{0.12,0.11,0.1,0.07,0.07,0.12,0.05,0.11,0.19,0.09,0.06,0.13,0.12,0.12,0.11,0.11,0.1,0.08,0.08,0.04,0.2,0.15,0.11,0.06,0.1,0.11,0.09,0.06,0.04,0.09,0,6.49,-2.5,2000,467.5,2550,6.85,7.05,3.34,9.76,8.1,9.76,12.12},0},
{{0.12,0.13,0.07,0.07,0.11,0.1,0.1,0.11,0.14,0.08,0.1,0.14,0.07,0.11,0.14,0.08,0.07,0.1,0.09,0.05,0.15,0.13,0.1,0.1,0.12,0.06,0.11,0.09,0.06,0.1,0,6.38,-1.82,1071.43,381.25,3425,6.93,7.55,3.56,9.9,8.47,9.9,12.43},0},
{{0.09,0.09,0.11,0.09,0.14,0.08,0.08,0.1,0.14,0.1,0.13,0.1,0.12,0.08,0.11,0.12,0.08,0.08,0.07,0.07,0.17,0.14,0.08,0.1,0.08,0.13,0.11,0.09,0.04,0.09,0,5.86,-2.01,1566.67,415.22,775,6.56,7.28,3.13,9.29,8.46,9.29,12.02},0},
{{0.09,0.12,0.12,0.06,0.09,0.12,0.12,0.11,0.12,0.08,0.08,0.09,0.15,0.06,0.13,0.13,0.06,0.11,0.11,0.04,0.09,0.09,0.07,0.13,0.1,0.14,0.12,0.1,0.07,0.1,0,6.52,-0.96,2250,408.7,1675,6.72,7.07,2.92,9.65,8.09,9.65,11.85},0},
{{0.12,0.13,0.09,0.08,0.07,0.08,0.11,0.13,0.09,0.13,0.08,0.11,0.09,0.08,0.14,0.12,0.1,0.07,0.13,0.06,0.14,0.13,0.13,0.09,0.12,0.07,0.07,0.08,0.08,0.11,0,6.93,-1.65,800,382,1900,7.26,7.18,3.34,10.12,8.22,10.12,12.66},0},
{{0.11,0.07,0.12,0.11,0.1,0.09,0.09,0.11,0.08,0.13,0.07,0.11,0.12,0.07,0.14,0.11,0.1,0.12,0.09,0.04,0.13,0.07,0.15,0.15,0.08,0.08,0.1,0.05,0.11,0.11,0,6.49,-1.48,1233.33,463.89,1783.33,6.92,6.94,3.41,9.57,7.93,9.57,12.16},0},
{{0.12,0.09,0.13,0.06,0.09,0.12,0.1,0.11,0.08,0.12,0.09,0.14,0.12,0.05,0.12,0.1,0.09,0.13,0.1,0.04,0.08,0.14,0.05,0.11,0.08,0.13,0.13,0.12,0.09,0.1,0,6.49,-1.16,3050,378,2116.67,6.94,7.41,2.94,9.81,8.29,9.81,12.22},0},
{{0.1,0.11,0.08,0.11,0.1,0.1,0.12,0.12,0.12,0.07,0.1,0.09,0.13,0.13,0.06,0.14,0.08,0.09,0.12,0.04,0.09,0.07,0.09,0.1,0.13,0.17,0.1,0.11,0.09,0.08,0,6.27,-1.03,1875,473.68,1116.67,6.54,7.1,2.66,9.38,8.18,9.38,11.65},0},
{{0.1,0.09,0.13,0.07,0.11,0.09,0.1,0.11,0.13,0.09,0.12,0.12,0.06,0.12,0.08,0.13,0.05,0.12,0.13,0.05,0.11,0.11,0.08,0.1,0.11,0.1,0.1,0.11,0.12,0.08,0,6.65,-1.28,1450,384,1483.33,6.72,7.56,3.16,9.48,8.56,9.48,12.47},0},
{{0.12,0.1,0.1,0.08,0.12,0.11,0.13,0.07,0.06,0.15,0.18,0.1,0.09,0.08,0.09,0.09,0.11,0.1,0.1,0.05,0.1,0.1,0.13,0.14,0.11,0.08,0.08,0.11,0.09,0.1,0,5.9,-1.23,2975,409.09,1666.67,7.15,7.65,3.24,9.83,8.73,9.83,12.59},0},
{{0.11,0.14,0.07,0.13,0.09,0.07,0.09,0.12,0.13,0.08,0.09,0.13,0.09,0.07,0.11,0.13,0.11,0.06,0.14,0.06,0.1,0.12,0.11,0.07,0.09,0.14,0.07,0.1,0.12,0.11,0,6.89,-0.96,350,370,1700,7.22,7.29,3.26,10.02,8.32,10.02,12.58},0},
{{0.11,0.09,0.1,0.08,0.14,0.07,0.13,0.13,0.11,0.05,0.11,0.12,0.1,0.1,0.1,0.1,0.11,0.12,0.07,0.05,0.08,0.11,0.06,0.14,0.09,0.1,0.1,0.12,0.09,0.12,0,6.26,-0.63,1950,406.82,1700,6.69,7.18,3.29,9.58,8.17,9.58,12.02},0},
{{0.1,0.12,0.12,0.15,0.09,0.08,0.06,0.09,0.12,0.1,0.17,0.09,0.07,0.08,0.06,0.11,0.11,0.13,0.08,0.06,0.18,0.07,0.1,0.09,0.1,0.09,0.09,0.08,0.13,0.09,0,6.51,-1.8,2225,421.74,4250,7.59,7.84,3.53,10.1,8.88,10.1,13.46},0},
{{0.09,0.12,0.1,0.14,0.11,0.1,0.07,0.09,0.12,0.08,0.1,0.07,0.13,0.11,0.11,0.08,0.11,0.12,0.12,0.05,0.07,0.13,0.1,0.09,0.12,0.1,0.13,0.12,0.07,0.1,0,6.62,-1.03,1200,450,1750,7.21,7.22,3.01,9.78,8.2,9.78,12.3},0},
{{0.09,0.15,0.09,0.09,0.11,0.07,0.15,0.07,0.09,0.12,0.14,0.1,0.1,0.1,0.1,0.06,0.12,0.09,0.12,0.06,0.11,0.07,0.11,0.08,0.11,0.12,0.11,0.14,0.1,0.07,0,6.36,-1.2,1933.33,397.92,2525,7.16,7.71,2.81,9.93,8.66,9.93,12.45},0},
{{0.11,0.11,0.11,0.07,0.09,0.12,0.13,0.08,0.08,0.12,0.12,0.12,0.08,0.06,0.15,0.07,0.12,0.11,0.06,0.06,0.06,0.09,0.14,0.11,0.12,0.11,0.11,0.06,0.14,0.08,0,6.51,-1.05,2750,382,1650,7.21,7.44,2.75,10,8.44,10,12.33},0},
{{0.08,0.16,0.09,0.09,0.1,0.11,0.11,0.08,0.12,0.09,0.11,0.12,0.1,0.1,0.12,0.09,0.09,0.09,0.08,0.08,0.09,0.1,0.12,0.09,0.14,0.12,0.11,0.12,0.06,0.09,0,6.39,-1.24,3375,389.13,1983.33,7.06,7.52,2.81,9.81,8.52,9.81,12.29},0},
{{0.1,0.12,0.07,0.13,0.09,0.1,0.1,0.1,0.11,0.11,0.11,0.12,0.09,0.08,0.11,0.1,0.11,0.08,0.12,0.06,0.1,0.07,0.13,0.09,0.13,0.11,0.07,0.14,0.08,0.1,0,6.36,-1.16,983.33,395.83,1250,6.9,7.44,3,9.62,8.48,9.62,12.24},0},
{{0.12,0.1,0.09,0.08,0.1,0.12,0.13,0.1,0.09,0.08,0.12,0.09,0.12,0.06,0.09,0.12,0.09,0.11,0.11,0.06,0.08,0.07,0.11,0.12,0.06,0.11,0.14,0.1,0.14,0.1,0,6.82,-0.76,3000,400,2216.67,6.87,7.55,2.94,9.83,8.51,9.83,12.36},0},
{{0.12,0.13,0.13,0.11,0.11,0.13,0.05,0.04,0.07,0.12,0.22,0.05,0.02,0.09,0.05,0.1,0.14,0.12,0.08,0.08,0.21,0.15,0.09,0.05,0.08,0.08,0.1,0.11,0.1,0.06,0,6.74,-2.71,1875,452.5,3900,8.36,8.02,3.49,10.62,9.12,10.62,14.31},0},
{{0.1,0.1,0.1,0.11,0.14,0.11,0.11,0.09,0.1,0.07,0.11,0.11,0.11,0.12,0.09,0.1,0.09,0.11,0.08,0.05,0.12,0.09,0.09,0.1,0.07,0.13,0.12,0.07,0.13,0.09,0,5.96,-1.33,766.67,423.81,1625,6.73,7.32,3.16,9.39,8.37,9.39,12.03},0},
{{0.13,0.1,0.06,0.09,0.12,0.11,0.12,0.1,0.08,0.12,0.12,0.12,0.07,0.1,0.06,0.16,0.1,0.05,0.11,0.07,0.13,0.09,0.1,0.1,0.13,0.13,0.1,0.08,0.09,0.09,0,6.7,-1.47,1687.5,385.42,1275,6.88,7.46,2.97,9.77,8.58,9.77,12.55},0},
{{0.1,0.08,0.16,0.08,0.08,0.12,0.13,0.1,0.11,0.07,0.08,0.13,0.12,0.07,0.12,0.09,0.12,0.1,0.1,0.04,0.06,0.1,0.11,0.1,0.11,0.12,0.11,0.1,0.1,0.1,0,6.49,-0.83,2250,359.62,575,6.84,7.22,2.96,9.59,8.18,9.59,12.03},0},
{{0.1,0.09,0.12,0.12,0.09,0.06,0.14,0.13,0.1,0.06,0.09,0.14,0.08,0.09,0.12,0.11,0.09,0.12,0.09,0.05,0.07,0.09,0.08,0.13,0.13,0.15,0.08,0.12,0.08,0.1,0,6.52,-0.93,700,348.21,1625,6.82,7.24,2.84,9.6,8.22,9.6,12.15},0},
{{0.11,0.09,0.09,0.13,0.06,0.14,0.11,0.11,0.12,0.06,0.07,0.13,0.1,0.12,0.1,0.11,0.09,0.1,0.11,0.05,0.05,0.1,0.08,0.14,0.13,0.12,0.12,0.1,0.06,0.13,0,6.53,-0.62,2125,378,1850,6.67,7.25,3.12,9.53,8.22,9.53,11.97},0},
{{0.13,0.1,0.1,0.11,0.08,0.1,0.11,0.12,0.1,0.07,0.11,0.14,0.09,0.05,0.12,0.11,0.08,0.1,0.1,0.06,0.08,0.1,0.09,0.09,0.17,0.1,0.07,0.09,0.12,0.11,0,6.49,-0.8,1216.67,417.39,685.71,7.17,7.59,3.35,10.06,8.62,10.06,12.75},0},
{{0.13,0.11,0.11,0.1,0.11,0.11,0.09,0.08,0.07,0.11,0.16,0.05,0.09,0.07,0.08,0.12,0.12,0.1,0.11,0.08,0.08,0.14,0.09,0.1,0.09,0.1,0.07,0.1,0.18,0.07,0,7.02,-1.16,1425,457.14,2200,7.69,7.65,3.13,10.31,8.67,10.31,13.35},0},
{{0.05,0.07,0.07,0.13,0.1,0.05,0.03,0.03,0.02,0.07,0.13,0.03,0.03,0.07,0.07,0.07,0.06,0.07,0.07,0.02,0.09,0.05,0.08,0.03,0.04,0.05,0.04,0.05,0.1,0.08,0,3.37,-0.43,1350,380,800,4.8,4.34,2.5,9.87,8.7,9.87,8.01},0},
{{0.03,0.04,0.04,0.07,0.03,0.08,0.1,0.12,0.16,0.33,0.05,0.07,0.21,0.14,0.12,0.16,0.09,0.08,0.05,0.04,0.04,0.03,0.08,0.08,0.05,0.07,0.09,0.25,0.22,0.11,0,8.94,1.21,1720,4425,4425,3.36,2.61,2.6,4.46,3.36,4.46,10.55},2},
{{0.03,0.06,0.07,0.09,0.11,0.07,0.12,0.15,0.13,0.2,0.07,0.08,0.15,0.13,0.1,0.14,0.11,0.06,0.07,0.12,0.11,0.09,0.1,0.08,0.09,0.15,0.1,0.1,0.13,0.07,0,9.66,-0.01,4425,1033.33,2212.5,2.48,3.33,2.58,3.32,4.1,3.32,10.62},2},
{{0.03,0.05,0.08,0.1,0.09,0.06,0.1,0.18,0.13,0.2,0.05,0.15,0.13,0.09,0.08,0.14,0.12,0.1,0.08,0.09,0.14,0.08,0.11,0.1,0.09,0.13,0.1,0.09,0.09,0.1,0,9.64,-0.25,2275,1278.57,1675,2.41,3.39,2.65,3.08,4.1,3.08,10.62},2},
{{0.06,0.08,0.1,0.09,0.11,0.08,0.08,0.09,0.13,0.2,0.08,0.13,0.12,0.11,0.11,0.09,0.11,0.08,0.08,0.12,0.14,0.12,0.11,0.08,0.11,0.1,0.05,0.1,0.11,0.11,0,9.68,0.09,2516.67,1000,1720,2.61,3.6,3.11,3.24,4.33,3.24,10.88},2},
{{0.07,0.08,0.11,0.06,0.11,0.08,0.08,0.14,0.17,0.12,0.12,0.1,0.12,0.11,0.11,0.1,0.07,0.06,0.11,0.12,0.17,0.12,0.11,0.07,0.07,0.11,0.08,0.08,0.11,0.09,0,9.46,-0.28,2875,910,4325,2.4,3.83,2.96,2.96,4.66,2.96,10.65},2},
{{0.06,0.08,0.07,0.11,0.11,0.11,0.1,0.11,0.12,0.15,0.13,0.09,0.11,0.08,0.09,0.1,0.09,0.14,0.06,0.12,0.13,0.14,0.11,0.11,0.08,0.11,0.06,0.07,0.09,0.13,0,9.71,0,1091.67,790.91,1075,2.28,3.96,3.11,2.86,4.78,2.86,10.86},2},
{{0.06,0.12,0.11,0.11,0.09,0.07,0.1,0.09,0.15,0.12,0.14,0.1,0.09,0.08,0.13,0.08,0.11,0.08,0.11,0.11,0.15,0.11,0.09,0.1,0.12,0.1,0.08,0.07,0.08,0.12,0,9.5,-0.07,2533.33,1625,1816.67,2.39,3.88,2.85,2.88,4.67,2.88,10.66},2},
{{0.12,0.08,0.11,0.09,0.11,0.07,0.08,0.12,0.1,0.14,0.17,0.05,0.08,0.09,0.11,0.07,0.15,0.08,0.11,0.1,0.12,0.1,0.11,0.1,0.09,0.11,0.08,0.07,0.12,0.12,0,9.72,0.16,3350,960,2600,2.58,3.85,3,3.14,4.67,3.14,10.97},2},
{{0.07,0.08,0.11,0.12,0.09,0.09,0.07,0.13,0.11,0.15,0.14,0.08,0.09,0.11,0.08,0.07,0.13,0.09,0.12,0.1,0.08,0.14,0.06,0.13,0.14,0.06,0.08,0.12,0.09,0.11,0,9.68,0.12,2475,1530,2850,2.48,3.88,2.79,3.1,4.67,3.1,10.8},2},
{{0.04,0.06,0.08,0.11,0.11,0.11,0.15,0.13,0.12,0.12,0.08,0.14,0.09,0.1,0.09,0.1,0.11,0.1,0.08,0.13,0.1,0.1,0.11,0.12,0.13,0.09,0.1,0.1,0.05,0.13,0,9.94,0.44,4725,938.89,1116.67,1.96,3.78,3.27,2.48,4.54,2.48,10.97},2},
{{0.08,0.13,0.1,0.11,0.1,0.07,0.09,0.14,0.1,0.1,0.14,0.07,0.1,0.1,0.08,0.09,0.14,0.1,0.12,0.09,0.15,0.12,0.09,0.11,0.12,0.09,0.07,0.1,0.07,0.1,0,9.79,-0.2,2050,1107.14,3325,2.36,3.75,2.91,2.86,4.44,2.86,10.91},2},
{{0.07,0.12,0.1,0.12,0.1,0.06,0.1,0.11,0.11,0.13,0.1,0.12,0.09,0.09,0.1,0.1,0.09,0.12,0.09,0.14,0.12,0.12,0.1,0.08,0.12,0.09,0.09,0.09,0.08,0.14,0,9.99,0.08,3375,1206.25,1100,2.38,3.84,2.92,2.9,4.62,2.9,11.07},2},
{{0.06,0.15,0.09,0.08,0.08,0.12,0.1,0.16,0.09,0.09,0.1,0.14,0.04,0.1,0.09,0.13,0.11,0.11,0.1,0.09,0.14,0.06,0.12,0.1,0.11,0.09,0.12,0.12,0.1,0.07,0,9.68,-0.09,1100,814.29,2550,2.17,3.59,2.66,2.68,4.35,2.68,10.7},2},
{{0.05,0.1,0.14,0.07,0.13,0.14,0.13,0.09,0.07,0.11,0.06,0.13,0.11,0.08,0.14,0.13,0.11,0.1,0.1,0.07,0.13,0.06,0.09,0.11,0.1,0.13,0.1,0.13,0.11,0.07,0,9.67,0.03,3425,1150,1150,2.07,3.18,2.6,2.57,3.92,2.57,10.57},2},
{{0.1,0.08,0.14,0.1,0.1,0.11,0.09,0.1,0.1,0.11,0.05,0.09,0.13,0.09,0.13,0.17,0.09,0.08,0.11,0.07,0.04,0.04,0.04,0.08,0.15,0.17,0.17,0.13,0.13,0.07,0,9.79,0.4,2100,1200,1150,2.38,3.04,2.16,2.96,3.8,2.96,10.59},2},
{{0.11,0.1,0.07,0.11,0.11,0.1,0.14,0.1,0.09,0.1,0.06,0.12,0.11,0.1,0.11,0.1,0.13,0.09,0.1,0.1,0.08,0.08,0.12,0.16,0.11,0.06,0.1,0.12,0.1,0.1,0,9.94,0.23,2850,1011.11,2283.33,2.21,3.52,2.85,2.75,4.24,2.75,10.94},2},
{{0.09,0.13,0.12,0.1,0.08,0.1,0.13,0.08,0.08,0.1,0.07,0.15,0.1,0.12,0.08,0.09,0.1,0.11,0.12,0.09,0.07,0.13,0.12,0.1,0.1,0.07,0.13,0.07,0.14,0.09,0,9.69,0.29,1725,968.75,1675,2.25,3.59,2.99,2.7,4.28,2.7,10.75},2},
{{0.12,0.09,0.1,0.1,0.11,0.09,0.13,0.1,0.08,0.11,0.06,0.15,0.1,0.1,0.13,0.05,0.1,0.15,0.09,0.1,0.07,0.11,0.11,0.13,0.11,0.09,0.09,0.1,0.1,0.11,0,9.86,0.3,1400,925,2275,2.27,3.63,2.94,2.77,4.28,2.77,10.89},2},
{{0.12,0.12,0.12,0.06,0.09,0.08,0.15,0.11,0.11,0.07,0.12,0.08,0.1,0.1,0.06,0.09,0.13,0.12,0.11,0.12,0.1,0.16,0.08,0.09,0.11,0.06,0.12,0.09,0.12,0.09,0,10.04,0.2,1466.67,646.43,2775,2.31,3.81,2.99,2.83,4.56,2.83,11.13},2},
{{0.09,0.16,0.08,0.1,0.1,0.12,0.12,0.09,0.1,0.07,0.11,0.08,0.11,0.12,0.1,0.1,0.09,0.12,0.1,0.09,0.07,0.09,0.13,0.11,0.09,0.13,0.1,0.09,0.09,0.12,0,9.73,0.4,2425,692.31,2150,2.15,3.65,3.03,2.62,4.4,2.62,10.77},2},
{{0.1,0.12,0.12,0.08,0.07,0.12,0.13,0.1,0.08,0.09,0.13,0.06,0.11,0.1,0.09,0.1,0.11,0.13,0.1,0.1,0.07,0.13,0.1,0.11,0.1,0.1,0.11,0.14,0.05,0.12,0,9.87,0.19,2233.33,762.5,3325,2.24,3.73,2.76,2.84,4.51,2.84,10.91},2},
{{0.15,0.12,0.09,0.08,0.06,0.12,0.14,0.08,0.1,0.08,0.14,0.05,0.08,0.11,0.11,0.12,0.1,0.1,0.1,0.12,0.07,0.12,0.12,0.07,0.09,0.1,0.14,0.09,0.08,0.14,0,9.87,0.4,2750,733.33,2200,2.36,3.65,2.95,2.9,4.48,2.9,10.97},2},
{{0.17,0.08,0.09,0.14,0.11,0.1,0.09,0.08,0.1,0.06,0.15,0.1,0.09,0.11,0.11,0.07,0.05,0.11,0.13,0.11,0.11,0.14,0.09,0.06,0.11,0.1,0.11,0.12,0.07,0.09,0,9.5,0.04,3975,837.5,2250,2.45,3.94,2.72,3.01,4.66,3.01,10.67},2},
{{0.1,0.11,0.14,0.11,0.06,0.11,0.11,0.08,0.13,0.07,0.09,0.1,0.09,0.09,0.13,0.1,0.09,0.11,0.12,0.11,0.11,0.13,0.12,0.06,0.09,0.11,0.07,0.09,0.14,0.09,0,9.98,0.26,4025,880,3850,2.29,3.62,3.03,2.77,4.38,2.77,11.06},2},
{{0.13,0.1,0.14,0.13,0.1,0.11,0.11,0.06,0.11,0.04,0.12,0.07,0.11,0.12,0.08,0.12,0.11,0.09,0.11,0.11,0.14,0.12,0.09,0.06,0.15,0.1,0.08,0.09,0.08,0.1,0,9.87,-0.09,2250,1107.14,2200,2.25,3.58,2.84,2.76,4.31,2.76,10.92},2},
{{0.12,0.12,0.09,0.13,0.14,0.11,0.1,0.07,0.09,0.06,0.1,0.13,0.05,0.1,0.12,0.12,0.09,0.11,0.11,0.09,0.16,0.07,0.11,0.08,0.07,0.1,0.1,0.15,0.11,0.07,0,9.79,-0.17,3150,905,1675,2.32,3.58,2.65,2.91,4.36,2.91,10.82},2},
{{0.1,0.12,0.04,0.11,0.14,0.15,0.09,0.1,0.11,0.06,0.09,0.12,0.14,0.08,0.1,0.06,0.09,0.1,0.12,0.13,0.08,0.09,0.13,0.1,0.07,0.1,0.12,0.08,0.16,0.11,0,9.87,0.39,2950,775,1983.33,2.17,3.92,2.93,2.84,4.63,2.84,10.91},2},
{{0.11,0.12,0.11,0.07,0.12,0.13,0.1,0.06,0.13,0.06,0.08,0.12,0.1,0.11,0.11,0.1,0.1,0.13,0.07,0.11,0.09,0.08,0.13,0.12,0.15,0.08,0.12,0.07,0.08,0.1,0,9.86,0.13,3200,729.17,2850,2.29,3.56,2.79,2.86,4.33,2.86,10.92},2},
{{0.13,0.11,0.1,0.13,0.08,0.11,0.12,0.08,0.12,0.05,0.09,0.11,0.14,0.07,0.12,0.09,0.08,0.11,0.1,0.13,0.1,0.09,0.11,0.12,0.09,0.13,0.1,0.07,0.11,0.11,0,9.91,0.31,2000,745.83,2583.33,2.32,3.79,2.96,2.9,4.54,2.9,10.99},2},
{{0.15,0.1,0.08,0.11,0.11,0.16,0.11,0.07,0.08,0.06,0.12,0.09,0.08,0.16,0.09,0.11,0.04,0.1,0.13,0.11,0.07,0.13,0.14,0.08,0.09,0.08,0.13,0.1,0.08,0.13,0,9.65,0.35,2775,965,1600,2.26,3.72,3.03,2.95,4.51,2.95,10.8},2},
{{0.13,0.13,0.11,0.08,0.14,0.12,0.13,0.05,0.09,0.06,0.09,0.1,0.13,0.1,0.1,0.11,0.11,0.12,0.1,0.08,0.09,0.07,0.09,0.08,0.11,0.15,0.14,0.09,0.11,0.1,0,9.69,0.34,1950,745,1500,2.27,3.36,2.7,2.85,4.11,2.85,10.68},2},
{{0.21,0.08,0.08,0.13,0.1,0.09,0.13,0.06,0.07,0.07,0.12,0.08,0.09,0.1,0.08,0.08,0.1,0.12,0.15,0.1,0.08,0.11,0.15,0.07,0.12,0.12,0.08,0.1,0.09,0.1,0,9.99,0.18,2550,872.73,3850,2.58,3.81,2.86,3.24,4.55,3.24,11.15},2},
{{0.16,0.11,0.11,0.1,0.12,0.15,0.06,0.12,0.09,0.02,0.14,0.08,0.06,0.1,0.09,0.14,0.09,0.13,0.08,0.12,0.04,0.09,0.13,0.08,0.1,0.15,0.09,0.09,0.13,0.12,0,9.83,0.68,1175,704.17,3325,2.35,3.72,3.04,2.98,4.51,2.98,10.95},2},
{{0.15,0.14,0.13,0.17,0.09,0.11,0.06,0.08,0.06,0.03,0.07,0.16,0.09,0.1,0.07,0.1,0.11,0.11,0.11,0.11,0.05,0.05,0.13,0.13,0.12,0.13,0.09,0.15,0.09,0.08,0,9.79,0.32,3075,850,1116.67,2.43,3.73,2.55,2.97,4.43,2.97,10.8},2},
{{0.08,0.08,0.05,0.13,0.09,0.05,0.05,0.03,0.03,0.01,0.03,0.09,0.04,0.05,0.09,0.04,0.07,0.06,0.09,0.04,0.02,0.06,0.07,0.07,0.05,0.07,0.09,0.05,0.07,0.05,0,5.66,0.24,1900,1125,2250,1.31,2.74,1.49,2.78,5.8,2.78,6.22},2},
{{0.08,0.15,0.12,0.11,0.11,0.07,0.12,0.1,0.05,0,0.06,0.11,0.17,0.1,0.1,0.12,0.09,0.08,0.07,0,0.17,0.09,0.1,0.08,0.1,0.12,0.13,0.06,0.11,0,0,3.88,-1.44,538.24,454.76,2000,7.55,7.01,3.54,10.38,8.38,10.38,12.26},0},
{{0.09,0.13,0.09,0.12,0.09,0.1,0.1,0.07,0.09,0,0.12,0.11,0.16,0.09,0.06,0.09,0.04,0.1,0.1,0,0.14,0.12,0.06,0.09,0.1,0.09,0.11,0.13,0.08,0,0,4.16,-0.69,406.52,513.89,575,8.4,8.18,3.87,11.27,9.32,11.27,13.51},0},
{{0.06,0.13,0.1,0.14,0.08,0.11,0.08,0.13,0.08,0,0.07,0.13,0.14,0.07,0.14,0.07,0.09,0.1,0.09,0,0.1,0.09,0.1,0.07,0.14,0.1,0.13,0.1,0.12,0,0,4.21,-0.54,466.67,490,2016.67,8.35,7.52,3.27,11.23,8.77,11.23,12.83},0},
{{0.12,0.12,0.08,0.08,0.11,0.1,0.11,0.12,0.09,0,0.07,0.14,0.09,0.14,0.08,0.09,0.06,0.1,0.1,0,0.14,0.08,0.11,0.12,0.11,0.11,0.08,0.07,0.11,0,0,4.79,-1,445.24,421.74,4450,8.58,8.08,3.41,11.2,9.19,11.2,13.45},0},
{{0.15,0.11,0.09,0.11,0.1,0.1,0.08,0.09,0.04,0,0.17,0.07,0.08,0.09,0.1,0.09,0.09,0.08,0.09,0,0.14,0.09,0.07,0.11,0.1,0.1,0.13,0.11,0.09,0,0,3.95,-0.92,514.71,395.83,1466.67,8.16,7.97,3.33,10.95,9.4,10.95,13.13},0},
{{0.2,0.07,0.08,0.08,0.06,0.09,0.12,0.13,0.07,0,0.14,0.1,0.07,0.1,0.06,0.1,0.1,0.12,0.09,0,0.2,0.11,0.14,0.08,0.08,0.06,0.09,0.11,0.08,0,0,4.53,-2.01,436.36,457.14,2250,9.08,8.11,3.72,11.52,9.46,11.52,14.29},0},
{{0.22,0.08,0.08,0.07,0.06,0.1,0.09,0.1,0.06,0,0.13,0.09,0.08,0.08,0.09,0.07,0.13,0.13,0.13,0,0.21,0.09,0.07,0.07,0.09,0.08,0.08,0.12,0.12,0,0,4.25,-1.61,564.71,564.71,1087.5,8.87,7.64,4.33,11.37,8.93,11.37,14.17},0},
{{0.09,0.11,0.11,0.11,0.1,0.11,0.09,0.07,0.08,0,0.1,0.12,0.1,0.11,0.1,0.09,0.08,0.09,0.11,0,0.07,0.14,0.12,0.09,0.09,0.13,0.12,0.06,0.06,0,0,4.01,-0.47,470,480.56,3275,8.42,7.58,3.44,11.28,8.89,11.28,12.92},0},
{{0.21,0.05,0.1,0.09,0.04,0.11,0.11,0.08,0.05,0,0.16,0.05,0.06,0.07,0.11,0.09,0.14,0.13,0.12,0,0.21,0.09,0.07,0.08,0.06,0.08,0.12,0.14,0.11,0,0,4.67,-1.52,596.88,462.5,2133.33,9.14,7.81,3.81,11.71,9.28,11.71,14.31},0},
{{0.09,0.08,0.13,0.1,0.13,0.09,0.1,0.1,0.07,0,0.06,0.14,0.08,0.1,0.09,0.13,0.12,0.08,0.11,0,0.11,0.13,0.1,0.08,0.09,0.09,0.11,0.13,0.1,0,0,4.45,-0.92,406.52,490,1587.5,8.44,7.03,3.28,11.2,8.41,11.2,12.92},0},
{{0.13,0.09,0.12,0.12,0.06,0.11,0.08,0.11,0.08,0,0.11,0.08,0.09,0.08,0.12,0.1,0.08,0.18,0.06,0,0.13,0.09,0.09,0.09,0.09,0.1,0.08,0.12,0.14,0,0,4.49,-0.54,477.5,460,600,8.6,7.35,3.69,11.39,8.66,11.39,13.43},0},
{{0.08,0.13,0.08,0.09,0.09,0.13,0.11,0.06,0.07,0,0.11,0.1,0.1,0.09,0.12,0.1,0.1,0.06,0.12,0,0.09,0.14,0.12,0.1,0.11,0.09,0.1,0.08,0.09,0,0,4.19,-0.66,492.11,480,2600,8.89,7.6,3.41,11.64,9,11.64,13.37},0},
{{0.03,0.07,0.15,0.12,0.1,0.12,0.11,0.14,0.08,0,0.03,0.12,0.15,0.11,0.12,0.11,0.1,0.1,0.1,0,0.02,0.07,0.1,0.12,0.09,0.11,0.12,0.15,0.13,0,0,4.14,0.58,337.93,558.82,1540,8.44,6.6,3.11,11.24,7.8,11.24,12.15},0},
{{0.06,0.09,0.12,0.11,0.13,0.08,0.12,0.13,0.07,0,0.04,0.1,0.15,0.13,0.1,0.1,0.14,0.09,0.1,0,0.04,0.08,0.1,0.11,0.13,0.14,0.09,0.1,0.12,0,0,4.01,0.08,461.9,719.23,1430,8.42,6.47,3.14,11.19,7.75,11.19,12.21},0},
{{0.02,0.13,0.13,0.12,0.12,0.12,0.07,0.13,0.1,0,0.05,0.09,0.17,0.12,0.13,0.1,0.06,0.11,0.1,0,0.05,0.08,0.14,0.09,0.09,0.13,0.12,0.08,0.13,0,0,3.81,0.21,332,571.88,2666.67,8.08,6.68,3.44,10.99,7.88,10.99,12.09},0},
{{0.07,0.1,0.13,0.09,0.11,0.11,0.1,0.12,0.11,0,0.05,0.13,0.12,0.13,0.09,0.1,0.1,0.11,0.1,0,0.05,0.14,0.13,0.1,0.09,0.15,0.07,0.11,0.1,0,0,4.23,-0.47,383.33,578.13,2625,8.57,6.97,3.09,11.36,8.19,11.36,12.75},0},
{{0.02,0.13,0.12,0.14,0.11,0.09,0.1,0.12,0.11,0,0.04,0.14,0.14,0.11,0.1,0.14,0.07,0.08,0.12,0,0.06,0.07,0.11,0.11,0.12,0.12,0.1,0.17,0.08,0,0,3.91,-0.07,308.33,585.71,1862.5,8.25,6.66,3.01,11.19,8.01,11.19,12.13},0},
{{0.05,0.1,0.16,0.13,0.09,0.09,0.1,0.13,0.07,0,0.03,0.12,0.14,0.12,0.09,0.15,0.1,0.09,0.1,0,0.04,0.07,0.11,0.1,0.12,0.11,0.12,0.11,0.12,0,0,3.93,0.24,467.5,665.38,3150,7.91,6.35,3.15,10.89,7.69,10.89,11.85},0},
{{0.11,0.1,0.08,0.12,0.1,0.09,0.1,0.12,0.07,0,0.11,0.07,0.11,0.08,0.1,0.11,0.1,0.12,0.1,0,0.1,0.11,0.09,0.09,0.09,0.13,0.12,0.11,0.1,0,0,4.39,-0.54,387.5,530.56,2550,8.86,7.34,3.38,11.6,8.72,11.6,13.39},0},
{{0.05,0.11,0.16,0.1,0.12,0.11,0.08,0.11,0.07,0,0.07,0.08,0.15,0.12,0.12,0.11,0.1,0.1,0.09,0,0.04,0.1,0.11,0.14,0.14,0.1,0.12,0.09,0.07,0,0,3.74,0.07,420,590,1475,8.13,6.5,3.27,11.03,7.85,11.03,12.12},0},
{{0.17,0.07,0.08,0.09,0.09,0.1,0.11,0.09,0.07,0,0.1,0.07,0.1,0.1,0.08,0.09,0.13,0.14,0.09,0,0.11,0.12,0.1,0.1,0.11,0.08,0.09,0.1,0.12,0,0,4.5,-0.69,525,543.75,1212.5,8.92,7.27,3.47,11.55,8.63,11.55,13.68},0},
{{0.12,0.1,0.09,0.09,0.12,0.09,0.09,0.11,0.11,0,0.1,0.12,0.12,0.1,0.07,0.06,0.12,0.12,0.1,0,0.13,0.09,0.09,0.11,0.09,0.1,0.09,0.1,0.13,0,0,4.08,-0.79,378,552.94,650,8.61,7.47,3.51,11.32,8.71,11.32,13.29},0},
{{0.05,0.12,0.13,0.12,0.11,0.08,0.14,0.1,0.08,0,0.08,0.15,0.09,0.13,0.07,0.13,0.12,0.08,0.11,0,0.03,0.08,0.08,0.09,0.12,0.15,0.1,0.16,0.12,0,0,3.28,0.28,413.04,863.64,350,7.98,6.51,2.9,10.79,7.92,10.79,11.74},0},
{{0.11,0.09,0.11,0.11,0.1,0.1,0.1,0.09,0.07,0,0.11,0.09,0.1,0.11,0.11,0.07,0.11,0.13,0.1,0,0.11,0.07,0.12,0.12,0.1,0.09,0.11,0.11,0.08,0,0,3.86,-0.48,513.16,603.13,3250,8.59,7.16,3.5,11.38,8.49,11.38,13.01},0},
{{0.11,0.09,0.08,0.08,0.13,0.11,0.12,0.09,0.06,0,0.11,0.09,0.09,0.12,0.11,0.1,0.11,0.07,0.14,0,0.1,0.13,0.09,0.1,0.11,0.12,0.11,0.08,0.07,0,0,3.85,-0.42,505.56,534.62,2800,8.88,7.06,3.52,11.5,8.43,11.5,13},0},
{{0.15,0.09,0.06,0.05,0.1,0.13,0.12,0.1,0.08,0,0.17,0.07,0.03,0.1,0.1,0.12,0.09,0.11,0.13,0,0.09,0.17,0.14,0.09,0.08,0.1,0.08,0.07,0.07,0,0,4.09,-0.86,603.13,596.88,2450,9.27,7.88,3.62,11.69,9.38,11.69,14.11},0},
{{0.08,0.13,0.07,0.08,0.15,0.08,0.12,0.08,0.09,0,0.1,0.13,0.09,0.1,0.09,0.15,0.11,0.07,0.11,0,0.05,0.11,0.12,0.13,0.13,0.07,0.12,0.11,0.08,0,0,3.58,-0.21,400,795.45,383.33,8.74,6.66,3.17,11.53,8.13,11.53,12.58},0},
{{0.09,0.09,0.11,0.09,0.11,0.14,0.08,0.1,0.06,0,0.11,0.12,0.06,0.12,0.09,0.13,0.07,0.12,0.1,0,0.1,0.11,0.11,0.12,0.11,0.08,0.08,0.1,0.14,0,0,3.94,-0.51,461.9,570,2325,8.42,7.16,3.51,11.22,8.47,11.22,12.87},0},
{{0.09,0.1,0.1,0.1,0.12,0.1,0.11,0.09,0.07,0,0.11,0.12,0.04,0.13,0.14,0.08,0.12,0.08,0.11,0,0.13,0.1,0.07,0.13,0.12,0.08,0.09,0.08,0.12,0,0,3.57,-0.47,485,581.25,1687.5,8.59,7.05,3.72,11.35,8.52,11.35,12.98},0},
{{0.09,0.1,0.11,0.1,0.11,0.12,0.09,0.08,0.06,0,0.15,0.09,0.05,0.11,0.09,0.11,0.12,0.11,0.08,0,0.1,0.12,0.11,0.11,0.12,0.07,0.1,0.08,0.12,0,0,3.58,-0.53,628.57,515.79,3300,8.49,7.31,3.56,11.36,8.82,11.36,13.06},0},
{{0.14,0.07,0.11,0.13,0.09,0.09,0.11,0.09,0.08,0,0.15,0.09,0.09,0.09,0.09,0.1,0.13,0.1,0.1,0,0.13,0.1,0.08,0.1,0.08,0.1,0.13,0.1,0.1,0,0,3.25,-0.53,462.5,715.38,1625,8.24,7.28,3.78,10.99,8.85,10.99,13},0},
{{0.07,0.14,0.09,0.1,0.14,0.1,0.07,0.1,0.08,0,0.11,0.12,0.09,0.09,0.13,0.09,0.09,0.1,0.12,0,0.08,0.12,0.12,0.13,0.11,0.12,0.06,0.09,0.05,0,0,3.79,-0.39,525,546.88,2362.5,8.39,7.21,3.55,11.26,8.51,11.26,12.77},0},
{{0.11,0.09,0.06,0.1,0.11,0.13,0.1,0.09,0.09,0,0.13,0.12,0.09,0.1,0.13,0.1,0.07,0.09,0.11,0,0.06,0.12,0.12,0.12,0.11,0.12,0.09,0.05,0.08,0,0,3.23,-0.08,541.67,546.88,1400,8.96,7.35,3.77,11.6,8.79,11.6,13.3},0},
{{0.12,0.09,0.1,0.1,0.09,0.07,0.14,0.08,0.06,0,0.14,0.06,0.12,0.11,0.12,0.05,0.16,0.09,0.09,0,0.1,0.1,0.11,0.14,0.07,0.07,0.11,0.14,0.08,0,0,3.21,-0.5,540.63,675,637.5,8.87,7.3,3.55,11.56,8.82,11.56,13.27},0},
{{0.1,0.11,0.11,0.1,0.11,0.12,0.06,0.1,0.08,0,0.16,0.09,0.1,0.06,0.13,0.12,0.11,0.07,0.11,0,0.11,0.06,0.14,0.08,0.09,0.11,0.08,0.14,0.08,0,0,3.13,-0.24,430.95,671.43,2750,8.29,6.94,3.68,11.18,8.48,11.18,12.71},0},
{{0.07,0.02,0.05,0.05,0.05,0.06,0.06,0.03,0.03,0,0.05,0.01,0.03,0.03,0.06,0.07,0.09,0.06,0.05,0,0.05,0.03,0.03,0.03,0.02,0.06,0.05,0.05,0.1,0,0,2.01,0.26,580,616.67,1450,3.7,2.81,1.76,10.73,7.95,10.73,5.74},0},
{{0.04,0.06,0.05,0.08,0.08,0.12,0.12,0.18,0.16,0.16,0.12,0.06,0.07,0.09,0.1,0.11,0.1,0.11,0.14,0.12,0.09,0.1,0.1,0.1,0.13,0.12,0.08,0.09,0.09,0.13,0,8.68,1.3,580,1275,1650,4.15,2.6,1.51,4.63,3.46,4.63,10.13},5},
{{0.05,0.09,0.1,0.12,0.1,0.1,0.12,0.1,0.1,0.14,0.12,0.05,0.08,0.1,0.15,0.1,0.13,0.1,0.09,0.1,0.1,0.09,0.12,0.1,0.12,0.11,0.1,0.08,0.11,0.09,0,8.5,1.16,4275,2850,1275,4.62,2.31,1.35,5.05,3.12,5.05,10.13},5},
{{0.08,0.06,0.11,0.13,0.08,0.15,0.11,0.11,0.11,0.07,0.07,0.12,0.13,0.1,0.11,0.11,0.1,0.1,0.07,0.12,0.08,0.13,0.08,0.14,0.12,0.1,0.1,0.1,0.09,0.08,0,8.55,1.17,3625,1833.33,600,4.88,2.24,1.35,5.32,2.89,5.32,10.22},5},
{{0.09,0.12,0.1,0.1,0.13,0.08,0.09,0.11,0.1,0.1,0.1,0.1,0.12,0.13,0.12,0.08,0.07,0.1,0.1,0.1,0.08,0.14,0.11,0.08,0.08,0.11,0.11,0.1,0.12,0.09,0,8.32,1.22,1700,4850,575,4.97,2.32,1.45,5.47,3.03,5.47,10.14},5},
{{0.13,0.14,0.11,0.11,0.11,0.09,0.06,0.07,0.09,0.11,0.07,0.13,0.11,0.09,0.14,0.13,0.07,0.08,0.08,0.12,0.17,0.09,0.11,0.05,0.11,0.13,0.1,0.11,0.09,0.08,0,8.38,1.01,4275,1525,1825,5.25,2.22,1.44,5.69,2.89,5.69,10.28},5},
{{0.15,0.12,0.12,0.11,0.11,0.11,0.08,0.09,0.08,0.05,0.11,0.1,0.09,0.11,0.08,0.1,0.12,0.14,0.08,0.1,0.14,0.1,0.15,0.11,0.09,0.05,0.08,0.09,0.12,0.09,0,8.44,1.19,4275,1350,1800,5.5,2.35,1.69,5.89,3.02,5.89,10.57},5},
{{0.13,0.1,0.1,0.09,0.1,0.12,0.1,0.1,0.09,0.09,0.1,0.13,0.09,0.09,0.04,0.09,0.12,0.09,0.15,0.12,0.08,0.07,0.1,0.11,0.11,0.13,0.15,0.09,0.09,0.1,0,8.72,1.37,4275,1883.33,1883.33,5.27,2.79,1.32,5.85,3.58,5.85,10.62},5},
{{0.08,0.05,0.06,0.04,0.06,0.02,0.06,0.03,0.02,0.06,0.05,0.08,0.06,0.06,0.05,0.04,0.05,0.05,0.04,0.01,0.01,0.02,0.04,0.03,0.04,0.03,0.05,0.08,0.09,0.11,0,3.66,1.17,4275,1000,250,2.5,1.99,0.89,5.84,4.85,5.84,4.85},5},
{{0.09,0.06,0.09,0.08,0.1,0.15,0.13,0.13,0.09,0.1,0.07,0.12,0.07,0.14,0.16,0.08,0.09,0.1,0.13,0.06,0.08,0.08,0.08,0.07,0.06,0.07,0.12,0.18,0.16,0.13,0,9.2,1.54,2275,728.57,3925,1.99,2.72,1.87,2.55,3.36,2.55,10.01},1},
{{0.08,0.08,0.07,0.13,0.1,0.13,0.09,0.13,0.12,0.09,0.09,0.11,0.1,0.11,0.08,0.09,0.12,0.12,0.13,0.08,0.12,0.1,0.07,0.12,0.12,0.09,0.11,0.1,0.1,0.1,0,9.45,0.93,1750,942.86,1825,1.97,2.98,1.81,2.55,3.63,2.55,10.09},1},
{{0.08,0.13,0.12,0.08,0.09,0.13,0.09,0.08,0.1,0.12,0.13,0.09,0.11,0.11,0.06,0.1,0.11,0.08,0.09,0.13,0.12,0.1,0.11,0.11,0.08,0.12,0.1,0.07,0.11,0.1,0,9.36,0.86,4025,705,2925,2.17,3.25,1.81,2.65,3.96,2.65,10.04},1},
{{0.14,0.11,0.1,0.11,0.07,0.06,0.11,0.14,0.09,0.09,0.11,0.1,0.11,0.09,0.09,0.11,0.08,0.11,0.09,0.12,0.08,0.1,0.13,0.14,0.1,0.1,0.09,0.1,0.09,0.08,0,9.55,0.92,3600,1022.22,2583.33,2.31,3.27,1.82,2.92,4.03,2.92,10.33},1},
{{0.12,0.14,0.1,0.09,0.1,0.1,0.09,0.08,0.09,0.12,0.08,0.08,0.13,0.08,0.11,0.14,0.11,0.12,0.06,0.11,0.09,0.13,0.1,0.14,0.12,0.1,0.09,0.1,0.05,0.1,0,9.42,0.79,2100,840,2125,2.32,2.71,1.71,2.8,3.48,2.8,10.14},1},
{{0.1,0.1,0.11,0.11,0.1,0.09,0.1,0.08,0.12,0.1,0.13,0.1,0.09,0.08,0.11,0.11,0.1,0.09,0.1,0.12,0.13,0.13,0.09,0.09,0.11,0.11,0.07,0.08,0.11,0.11,0,9.44,0.8,2300,1068.75,2866.67,2.19,3.16,1.85,2.72,3.88,2.72,10.15},1},
{{0.02,0.02,0.03,0.03,0.04,0.04,0.02,0.03,0.03,0.04,0.03,0.05,0.03,0.03,0.03,0.01,0.03,0.02,0.04,0.02,0.02,0.01,0.02,0.02,0.06,0.03,0.04,0.03,0.03,0.02,0,2.42,0.3,525,775,750,0.5,1.78,0.39,2.22,7.84,2.22,2.56},1},
{{0.69,0.26,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0,0.09,0.13,0.15,0.09,0.11,0.12,0.1,0.12,0.08,0.04,0.07,0.07,0.06,0.1,0.12,0.12,0.13,0.11,0.12,0.12,0,7.91,1.97,250,1450,2237.5,5.35,2.08,1.94,5.79,2.66,5.79,10.29},5},
{{0.01,0.05,0.05,0.08,0.08,0.06,0.07,0.06,0.15,0.4,0.21,0.17,0.16,0.12,0.1,0.06,0.06,0.06,0.07,0.02,0.04,0.07,0.09,0.09,0.11,0.1,0.11,0.14,0.15,0.13,0,6.72,2.15,1250,1775,1700,4.95,2.26,1.9,6.05,2.86,6.05,9.64},5},
{{0.04,0.15,0.1,0.03,0.12,0.08,0.08,0.13,0.1,0.2,0.12,0.15,0.16,0.09,0.05,0.08,0.09,0.06,0.1,0.12,0.16,0.16,0.15,0.07,0.07,0.09,0.05,0.08,0.07,0.13,0,8.08,1.41,575,1566.67,1975,3.67,3.12,2.51,4.7,4.2,4.7,10.23},5},
{{0.01,0.07,0.12,0.12,0.11,0.13,0.14,0.12,0.14,0.06,0.09,0.09,0.08,0.07,0.12,0.12,0.11,0.12,0.1,0.12,0.12,0.14,0.14,0.08,0.11,0.08,0.09,0.12,0.04,0.11,0,8.7,1.5,1975,1300,1225,2.6,2.73,2.33,3.2,4.05,3.2,10.16},5},
{{0,0.01,0.1,0.09,0.11,0.15,0.15,0.17,0.19,0.05,0.05,0.05,0.07,0.09,0.13,0.14,0.14,0.1,0.13,0.12,0.12,0.13,0.09,0.12,0.1,0.12,0.13,0.08,0.08,0.05,0,9.1,1.08,3175,1962.5,3250,2.72,2.02,1.61,3.17,2.79,3.17,9.94},5},
{{0,0.04,0.11,0.12,0.13,0.14,0.18,0.15,0.11,0.04,0.08,0.07,0.06,0.1,0.1,0.11,0.12,0.15,0.12,0.12,0.13,0.1,0.12,0.16,0.06,0.09,0.1,0.1,0.11,0.06,0,9.02,1.09,1816.67,1375,2075,2.37,2.27,1.76,2.83,3.01,2.83,9.83},5},
{{0,0.08,0.16,0.19,0.16,0.15,0.11,0.09,0.07,0.02,0.08,0.06,0.07,0.09,0.12,0.11,0.09,0.11,0.13,0.16,0.11,0.12,0.08,0.1,0.18,0.11,0.1,0.09,0.07,0.06,0,9.2,1.13,2975,2000,2575,1.82,2.43,1.56,2.23,3.17,2.23,9.83},5},
{{0,0.09,0.13,0.06,0.1,0.04,0.06,0.03,0.02,0,0.04,0.04,0.03,0.09,0.04,0.04,0.07,0.04,0.08,0.07,0,0.01,0.03,0.04,0.03,0.05,0.05,0.05,0.16,0.1,0,4.59,1.67,2275,625,350,0.77,2.35,1.17,1.89,5.41,1.89,5.17},5},
{{0.08,0.1,0.1,0.12,0.09,0.08,0.14,0.09,0.11,0.11,0.06,0.08,0.1,0.13,0.14,0.1,0.15,0.09,0.11,0.07,0.05,0.09,0.11,0.11,0.13,0.12,0.11,0.12,0.11,0.07,0,9.35,1.14,1050,720,1200,2.39,2.45,1.31,2.85,3.18,2.85,9.98},1},
{{0.06,0.13,0.09,0.09,0.06,0.14,0.09,0.14,0.11,0.1,0.05,0.11,0.13,0.09,0.14,0.14,0.07,0.12,0.13,0.05,0.1,0.08,0.1,0.1,0.08,0.11,0.16,0.08,0.12,0.08,0,9.23,1.14,4275,1720,2933.33,2.34,2.48,1.49,2.79,3.19,2.79,9.9},1},
{{0.06,0.08,0.11,0.1,0.09,0.11,0.11,0.13,0.1,0.13,0.06,0.12,0.09,0.11,0.1,0.11,0.12,0.1,0.14,0.08,0.09,0.09,0.07,0.07,0.12,0.1,0.16,0.13,0.09,0.1,0,9.57,1.22,2075,1650,2025,2.3,2.76,1.45,2.76,3.45,2.76,10.22},1},
{{0.1,0.06,0.05,0.09,0.14,0.08,0.11,0.11,0.11,0.17,0.12,0.08,0.09,0.09,0.09,0.11,0.09,0.1,0.09,0.16,0.1,0.11,0.09,0.15,0.06,0.09,0.05,0.11,0.13,0.13,0,9.89,1.24,1333.33,1162.5,1675,2.16,3.46,1.88,2.67,4.3,2.67,10.6},1},
{{0.16,0.15,0.08,0.14,0.11,0.09,0.14,0.05,0.08,0.04,0.15,0.09,0.07,0.11,0.08,0.11,0.12,0.1,0.07,0.12,0.09,0.11,0.13,0.1,0.09,0.08,0.09,0.08,0.11,0.13,0,9.3,1.36,1775,1192.86,3275,2.98,3.12,1.9,3.48,4.01,3.48,10.32},1},
{{0.15,0.1,0.13,0.09,0.11,0.11,0.04,0.09,0.09,0.09,0.14,0.11,0.11,0.12,0.06,0.08,0.07,0.11,0.08,0.12,0.15,0.13,0.15,0.05,0.13,0.09,0.09,0.1,0.05,0.07,0,9.24,0.77,2500,1208.33,4675,2.87,3.27,1.67,3.44,4.11,3.44,10.17},1},
{{0.06,0.04,0.08,0.05,0.04,0.08,0.02,0.08,0.07,0.04,0.09,0.07,0.05,0.04,0.05,0.03,0.04,0.04,0.06,0.07,0.05,0.03,0.03,0.08,0.06,0.06,0.06,0.04,0.05,0.08,0,4.98,0.77,1850,730,1550,1.3,2.43,0.94,2.99,6.35,2.99,5.43},1},
{{0.14,0.15,0.16,0.11,0.1,0.07,0.08,0.06,0.1,0.03,0.1,0.08,0.1,0.13,0.1,0.11,0.11,0.09,0.11,0.1,0.05,0.1,0.07,0.07,0.1,0.09,0.15,0.12,0.15,0.12,0,9.34,1.15,2366.67,1375,1600,1.55,2.15,1.71,1.98,2.88,1.98,9.93},5},
{{0.09,0.08,0.09,0.1,0.09,0.12,0.11,0.11,0.16,0.09,0.07,0.1,0.07,0.09,0.17,0.13,0.15,0.07,0.09,0.08,0.07,0.1,0.12,0.09,0.1,0.11,0.11,0.09,0.11,0.12,0,9.33,0.86,1975,1466.67,3950,1.31,1.89,1.78,1.76,2.74,1.76,9.84},5},
{{0.05,0.1,0.1,0.11,0.13,0.1,0.12,0.1,0.1,0.12,0.08,0.08,0.07,0.1,0.13,0.18,0.1,0.12,0.1,0.05,0.1,0.17,0.12,0.08,0.07,0.11,0.09,0.07,0.11,0.11,0,9.36,0.56,4725,2000,2225,1.21,1.82,1.92,1.54,2.54,1.54,9.84},5},
{{0.02,0.05,0.08,0.08,0.13,0.12,0.12,0.14,0.16,0.12,0.09,0.1,0.13,0.09,0.09,0.08,0.08,0.18,0.08,0.09,0.06,0.11,0.17,0.09,0.13,0.11,0.09,0.11,0.08,0.07,0,9.42,0.42,225,2616.67,1950,1.15,2.27,1.42,1.51,3.06,1.51,9.77},5},
{{0.12,0.08,0.09,0.08,0.09,0.11,0.12,0.08,0.11,0.15,0.11,0.11,0.11,0.12,0.06,0.11,0.1,0.07,0.1,0.13,0.15,0.09,0.1,0.09,0.14,0.06,0.06,0.13,0.11,0.11,0,9.43,0.55,1850,1590,1425,1.48,2.68,1.85,1.92,3.58,1.92,9.98},5},
{{0.08,0.1,0.09,0.12,0.06,0.13,0.13,0.11,0.08,0.13,0.13,0.14,0.1,0.06,0.07,0.09,0.04,0.09,0.15,0.15,0.14,0.09,0.08,0.11,0.12,0.11,0.11,0.12,0.07,0.07,0,9.49,0.34,2750,787.5,1291.67,1.31,2.87,1.64,1.73,3.65,1.73,9.91},5},
{{0.12,0.09,0.09,0.13,0.11,0.08,0.1,0.11,0.11,0.09,0.11,0.07,0.13,0.1,0.09,0.11,0.12,0.08,0.09,0.13,0.09,0.07,0.11,0.14,0.12,0.11,0.11,0.09,0.08,0.11,0,9.42,0.61,2866.67,3675,1350,1.39,2.34,1.69,1.79,3.14,1.79,9.95},5},
{{0.18,0.14,0.11,0.08,0.08,0.06,0.06,0.08,0.04,0.07,0.11,0.11,0.08,0.09,0.07,0.06,0.07,0.11,0.09,0.09,0.11,0.11,0.05,0.07,0.07,0.09,0.11,0.08,0.11,0.1,0,8.08,0.63,1312.5,850,3100,1.6,2.47,1.59,2.38,3.77,2.38,8.66},5},
{{0.25,0.19,0.11,0.09,0.06,0.07,0.09,0.1,0.05,0.02,0.07,0.05,0.07,0.05,0.1,0.12,0.14,0.14,0.12,0.17,0.08,0.05,0.07,0.06,0.06,0.09,0.09,0.09,0.15,0.28,0,7.35,2.38,2200,762.5,183.33,4.56,2.51,2.16,5.51,3.23,5.51,9.8},1},
{{0.16,0.03,0.08,0.1,0.12,0.09,0.1,0.12,0.1,0.11,0.11,0.1,0.13,0.09,0.11,0.11,0.09,0.1,0.09,0.09,0.15,0.1,0.07,0.09,0.11,0.07,0.1,0.11,0.14,0.08,0,6.23,1.23,3050,1500,3725,6.86,2.38,1.73,7.7,3.16,7.7,10.05},1},
{{0.12,0.17,0.13,0.14,0.07,0.09,0.13,0.05,0.04,0.09,0.06,0.06,0.07,0.1,0.08,0.12,0.15,0.15,0.08,0.15,0.06,0.08,0.09,0.08,0.1,0.16,0.14,0.11,0.13,0.07,0,7.05,1.33,1650,816.67,1537.5,5.55,2.24,1.33,6.47,2.95,6.47,9.68},1},
{{0.01,0.08,0.09,0.08,0.11,0.13,0.1,0.14,0.17,0.11,0.08,0.15,0.11,0.1,0.14,0.11,0.07,0.11,0.11,0.04,0.06,0.11,0.09,0.13,0.14,0.12,0.14,0.08,0.09,0.08,0,5.89,1.12,2150,1487.5,1033.33,7.44,1.86,1.27,8.04,2.37,8.04,9.89},1},
{{0.03,0.07,0.07,0.09,0.16,0.13,0.1,0.12,0.12,0.11,0.09,0.13,0.13,0.11,0.13,0.06,0.11,0.08,0.1,0.09,0.08,0.15,0.12,0.11,0.13,0.12,0.09,0.1,0.07,0.05,0,6.07,0.85,3325,1075,2966.67,7.22,2.13,1.27,7.9,2.65,7.9,9.88},1},
{{0.06,0.06,0.1,0.09,0.14,0.09,0.09,0.1,0.11,0.16,0.19,0.11,0.1,0.11,0.1,0.1,0.07,0.05,0.12,0.08,0.14,0.14,0.13,0.15,0.09,0.06,0.05,0.11,0.06,0.08,0,5.73,0.83,500,3725,3450,7.39,2.32,1.53,8.31,2.93,8.31,9.87},1},
{{0.01,0.02,0.04,0.02,0.02,0.01,0.02,0.01,0.03,0.05,0.04,0.02,0.05,0.03,0.01,0.01,0.02,0.02,0.03,0.01,0.04,0.03,0.01,0.04,0.03,0.02,0.01,0.02,0.02,0.02,0,1.21,0.16,550,500,725,1.6,0.95,0.32,8.42,5.21,8.42,2.11},1},
{{0.7,0.3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.22,0.74,0.26,0.23,0.07,0.04,0.02,0.13,0.26,0.02,0,0,0,9.13,-0.24,850,197.96,2100,2.26,0.2,0.39,2.28,0.29,2.28,9.43},4},
{{0.39,0.55,0.04,0.03,0,0,0,0,0,0,0,0,0,0,0.01,0,0.08,0.06,0.37,0.46,0.46,0.27,0.03,0.01,0.02,0.02,0.06,0.06,0.02,0.07,0,9.03,-0.25,4325,3016.67,4350,2.5,0.41,0.61,2.62,0.61,2.62,9.45},4},
{{0.04,0.39,0.38,0.21,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.39,0.36,0.08,0.08,0.18,0.25,0.12,0.1,0.18,0.07,0.03,0.01,0.01,0,8.56,-0.13,2450,541.67,275,3.68,0.25,0.23,3.73,0.36,3.73,9.35},4},
{{0,0.01,0.65,0.35,0,0,0,0,0,0,0,0,0,0,0,0,0.26,0.63,0.12,0,0,0,0.08,0.27,0.19,0.35,0.12,0,0,0,0,8.42,0,543.75,173.21,1537.5,4.01,0.1,0.09,4.02,0.13,4.02,9.33},4},
{{0,0.01,0.15,0.49,0.22,0.08,0.06,0,0,0.01,0,0,0,0.05,0.08,0.24,0.34,0.26,0.04,0,0,0.04,0.14,0.16,0.19,0.32,0.16,0.01,0,0,0,7.78,0,455.56,148.57,1500,5,0.6,0.12,5.08,0.66,5.08,9.31},4},
{{0,0,0,0.01,0.31,0.48,0.13,0.04,0.01,0.03,0.02,0.01,0.02,0.15,0.43,0.33,0.06,0,0,0,0.02,0.07,0.12,0.23,0.11,0.27,0.14,0.02,0.01,0.03,0,6.82,0.04,325,377.78,200,6.32,0.36,0.22,6.35,0.62,6.35,9.34},4},
{{0,0,0,0.01,0.37,0.44,0.17,0.01,0.01,0,0,0,0,0.06,0.48,0.46,0.01,0,0,0,0,0.02,0.22,0.37,0.24,0.15,0.01,0,0,0,0,6.97,-0.08,226.25,181.73,1470,6.18,0.13,0.07,6.19,0.19,6.19,9.32},4},
{{0,0,0,0.05,0.06,0.02,0.27,0.4,0.12,0.09,0.08,0.18,0.52,0.12,0.03,0.04,0.05,0,0.01,0,0.07,0.07,0.04,0,0,0.01,0.06,0.05,0.07,0.62,0,5.5,1.93,3200,1025,3200,7.14,0.66,1.35,7.2,0.9,7.2,9.4},4},
{{0,0,0,0,0,0,0.02,0.13,0.54,0.32,0.25,0.54,0.22,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0.02,0.19,0.58,0.22,0,4.77,1.28,1314.29,1200,175,7.85,0.23,0.26,7.86,0.39,7.86,9.29},4},
{{0,0,0,0.06,0.07,0.12,0.26,0.27,0.1,0.12,0.13,0.08,0.2,0.37,0.1,0.07,0.04,0.01,0.01,0.01,0.08,0.15,0.05,0.02,0.01,0.03,0.15,0.24,0.1,0.18,0,5.96,0.64,2425,1525,1650,7.07,0.87,0.78,7.14,1.15,7.14,9.41},4},
{{0,0,0,0.01,0,0.01,0.03,0.06,0.34,0.56,0.52,0.41,0.04,0.02,0.01,0.01,0,0,0,0,0.02,0.02,0.02,0.01,0.01,0.01,0.03,0.55,0.33,0.02,0,4.66,0.91,4550,2425,3000,7.93,0.25,0.26,7.94,0.5,7.94,9.27},4},
{{0,0,0,0.02,0.05,0.13,0.32,0.29,0.1,0.11,0.06,0.02,0.27,0.46,0.07,0.06,0.06,0,0.01,0,0.23,0.16,0.11,0.04,0.03,0.08,0.1,0.1,0.06,0.11,0,6.07,0.16,1940,1060,2500,7.04,0.65,0.74,7.08,0.87,7.08,9.4},4},
{{0,0,0,0,0,0,0,0.01,0.01,0.04,0.02,0.02,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0,0.01,0,0.21,0.03,1940,1060,2500,0.37,0.2,0.03,8.27,4.4,8.27,0.43},4},
{{0.11,0.14,0.06,0.1,0.08,0.1,0.1,0.16,0.12,0,0.03,0.15,0.11,0.07,0.12,0.16,0.1,0.12,0.1,0,0.08,0.11,0.11,0.1,0.12,0.09,0.13,0.12,0.08,0,0,9.12,2.01,3175,1887.5,1612.5,2.06,2.77,1.74,2.42,3.42,2.42,9.94},2},
{{0.1,0.11,0.08,0.08,0.11,0.11,0.13,0.1,0.12,0,0.07,0.12,0.09,0.08,0.11,0.14,0.12,0.09,0.12,0,0.09,0.12,0.09,0.11,0.09,0.1,0.15,0.09,0.1,0,0,9.23,2.08,1862.5,2125,1875,2.18,2.88,1.82,2.65,3.55,2.65,10.15},2},
{{0.1,0.09,0.11,0.11,0.08,0.11,0.12,0.1,0.13,0,0.04,0.14,0.09,0.12,0.12,0.12,0.09,0.14,0.09,0,0.09,0.1,0.09,0.07,0.09,0.11,0.11,0.16,0.08,0,0,9.03,2.37,2750,2250,1216.67,2.06,2.78,2.05,2.52,3.37,2.52,10},2},
{{0.1,0.12,0.12,0.11,0.11,0.09,0.1,0.09,0.07,0,0.1,0.12,0.13,0.1,0.09,0.1,0.11,0.08,0.08,0,0.1,0.08,0.12,0.1,0.09,0.1,0.12,0.13,0.09,0,0,9,2.03,2225,1525,2037.5,2.05,3.21,1.79,2.52,3.86,2.52,9.87},2},
{{0.12,0.1,0.1,0.12,0.13,0.07,0.08,0.07,0.11,0,0.1,0.11,0.1,0.13,0.11,0.08,0.09,0.08,0.12,0,0.1,0.08,0.12,0.1,0.11,0.1,0.1,0.15,0.08,0,0,8.99,1.99,950,766.67,1700,2.3,3.23,1.83,2.87,3.9,2.87,9.98},2},
{{0.09,0.12,0.09,0.08,0.09,0.13,0.09,0.11,0.13,0,0.09,0.13,0.12,0.1,0.09,0.14,0.06,0.09,0.11,0,0.12,0.09,0.12,0.09,0.1,0.09,0.14,0.09,0.08,0,0,8.89,1.98,1110,2262.5,1350,2.22,3.02,1.91,2.66,3.69,2.66,9.83},2},
{{0.12,0.09,0.1,0.09,0.08,0.13,0.08,0.1,0.15,0,0.08,0.11,0.12,0.09,0.11,0.12,0.11,0.09,0.1,0,0.09,0.12,0.09,0.11,0.08,0.09,0.14,0.1,0.1,0,0,9.06,2.11,2750,994.44,2083.33,2.27,3.04,1.89,2.73,3.73,2.73,10.02},2},
{{0.11,0.1,0.1,0.12,0.11,0.05,0.09,0.1,0.15,0,0.1,0.11,0.08,0.09,0.14,0.06,0.09,0.11,0.14,0,0.14,0.1,0.09,0.09,0.08,0.1,0.1,0.13,0.09,0,0,9.24,2.01,525,1240,1350,2.24,3.3,2.13,2.76,3.92,2.76,10.24},2},
{{0.14,0.07,0.09,0.09,0.12,0.12,0.1,0.1,0.1,0,0.14,0.1,0.1,0.11,0.09,0.1,0.1,0.08,0.1,0,0.13,0.11,0.1,0.11,0.1,0.11,0.08,0.06,0.12,0,0,8.92,2.03,1490,1775,1525,2.22,3.38,2.09,2.8,4.1,2.8,9.94},2},
{{0.09,0.08,0.08,0.15,0.12,0.09,0.11,0.11,0.07,0,0.11,0.06,0.12,0.1,0.11,0.1,0.07,0.15,0.09,0,0.1,0.12,0.12,0.07,0.1,0.07,0.13,0.11,0.09,0,0,9.32,2.14,2675,1525,1700,2.09,3.21,2.09,2.67,3.86,2.67,10.27},2},
{{0.11,0.08,0.13,0.12,0.1,0.09,0.09,0.1,0.12,0,0.13,0.12,0.07,0.12,0.09,0.06,0.1,0.11,0.12,0,0.09,0.12,0.06,0.08,0.15,0.11,0.11,0.09,0.08,0,0,8.9,2.22,4425,855.56,4600,2.12,3.34,2,2.63,3.95,2.63,9.88},2},
{{0.08,0.12,0.11,0.08,0.1,0.12,0.1,0.12,0.09,0,0.11,0.08,0.12,0.09,0.11,0.09,0.1,0.12,0.11,0,0.07,0.11,0.1,0.11,0.11,0.13,0.12,0.1,0.06,0,0,9.19,2.19,1530,745.83,1870,2.17,3.11,1.84,2.7,3.68,2.7,10.11},2},
{{0.09,0.1,0.08,0.11,0.11,0.12,0.1,0.11,0.11,0,0.12,0.04,0.11,0.12,0.1,0.11,0.14,0.09,0.11,0,0.13,0.09,0.08,0.11,0.07,0.11,0.12,0.1,0.1,0,0,8.97,2.11,2025,1021.43,1375,2.12,2.94,2.05,2.61,3.59,2.61,9.94},2},
{{0.06,0.09,0.13,0.08,0.13,0.15,0.07,0.08,0.1,0,0.13,0.06,0.09,0.13,0.11,0.09,0.08,0.13,0.12,0,0.07,0.11,0.13,0.1,0.14,0.08,0.09,0.07,0.13,0,0,9.01,2.2,2250,1241.67,1616.67,2.14,3.16,2,2.69,3.77,2.69,10},2},
{{0.11,0.1,0.13,0.13,0.1,0.1,0.09,0.08,0.08,0,0.15,0.09,0.09,0.08,0.09,0.1,0.07,0.09,0.12,0,0.12,0.11,0.1,0.1,0.12,0.09,0.07,0.08,0.13,0,0,9.17,2.05,1375,780,2283.33,2,3.65,2.09,2.56,4.34,2.56,10.13},2},
{{0.09,0.13,0.11,0.09,0.16,0.08,0.08,0.08,0.09,0,0.13,0.09,0.11,0.1,0.09,0.1,0.07,0.08,0.08,0,0.14,0.1,0.11,0.09,0.09,0.1,0.08,0.09,0.13,0,0,9.11,2.14,2125,925,975,2.22,3.57,2.31,2.88,4.29,2.88,10.22},2},
{{0.1,0.13,0.08,0.13,0.07,0.1,0.08,0.13,0.09,0,0.13,0.07,0.1,0.13,0.12,0.1,0.06,0.09,0.07,0,0.09,0.13,0.1,0.09,0.1,0.1,0.05,0.11,0.17,0,0,9.12,2.1,3000,765,1683.33,2.23,3.39,1.91,2.77,4.12,2.77,10.09},2},
{{0.11,0.09,0.12,0.11,0.09,0.11,0.08,0.12,0.08,0,0.12,0.11,0.08,0.11,0.12,0.07,0.11,0.1,0.09,0,0.06,0.12,0.11,0.09,0.1,0.09,0.13,0.15,0.06,0,0,8.92,2.17,1570,1950,2033.33,2.1,3.14,1.81,2.59,3.72,2.59,9.84},2},
{{0.13,0.09,0.1,0.09,0.15,0.1,0.09,0.09,0.08,0,0.12,0.11,0.1,0.13,0.05,0.08,0.14,0.1,0.08,0,0.08,0.1,0.11,0.11,0.13,0.08,0.1,0.11,0.12,0,0,8.92,2.12,1525,915,2733.33,2.08,3.24,1.87,2.59,3.82,2.59,9.84},2},
{{0.04,0.09,0.13,0.09,0.13,0.15,0.11,0.09,0.09,0,0.09,0.08,0.11,0.12,0.11,0.1,0.12,0.1,0.12,0,0.1,0.12,0.11,0.11,0.1,0.11,0.09,0.08,0.08,0,0,9.07,2.22,2750,1114.29,2050,1.98,2.9,2.14,2.51,3.48,2.51,10.01},2},
{{0.09,0.14,0.1,0.08,0.09,0.13,0.11,0.12,0.07,0,0.07,0.14,0.12,0.08,0.09,0.09,0.08,0.14,0.12,0,0.12,0.08,0.12,0.09,0.09,0.11,0.12,0.09,0.08,0,0,9.1,2.14,1050,1100,1287.5,2.11,3.17,2.05,2.58,3.74,2.58,10.03},2},
{{0.08,0.09,0.13,0.09,0.11,0.08,0.14,0.13,0.08,0,0.08,0.12,0.1,0.09,0.11,0.12,0.14,0.08,0.11,0,0.12,0.09,0.11,0.11,0.09,0.11,0.14,0.07,0.09,0,0,9.01,1.9,1600,2266.67,1660,2.11,2.87,1.78,2.61,3.46,2.61,9.89},2},
{{0.12,0.07,0.12,0.08,0.12,0.08,0.12,0.12,0.1,0,0.09,0.06,0.13,0.15,0.09,0.11,0.1,0.15,0.07,0,0.09,0.1,0.1,0.12,0.07,0.1,0.12,0.13,0.11,0,0,9.06,2.23,2416.67,1287.5,2025,2.27,2.85,1.95,2.79,3.45,2.79,10.05},2},
{{0.11,0.11,0.08,0.11,0.12,0.07,0.12,0.1,0.11,0,0.12,0.1,0.14,0.07,0.07,0.12,0.12,0.09,0.11,0,0.08,0.12,0.09,0.12,0.12,0.06,0.11,0.11,0.11,0,0,8.9,2.08,1810,1330,2012.5,2.12,3.21,1.9,2.62,3.85,2.62,9.84},2},
{{0.1,0.1,0.12,0.1,0.1,0.07,0.13,0.09,0.13,0,0.12,0.1,0.11,0.09,0.08,0.12,0.09,0.12,0.07,0,0.12,0.05,0.12,0.11,0.07,0.12,0.04,0.11,0.18,0,0,9.1,2.3,3025,1530,2237.5,2.16,3.29,2.11,2.67,3.97,2.67,10.13},2},
{{0.11,0.12,0.1,0.11,0.09,0.09,0.09,0.11,0.08,0,0.13,0.1,0.1,0.08,0.09,0.09,0.08,0.12,0.09,0,0.12,0.08,0.12,0.12,0.05,0.1,0.08,0.15,0.11,0,0,9.04,2.01,2437.5,2483.33,1025,2.21,3.42,1.97,2.76,4.12,2.76,10.02},2},
{{0.09,0.07,0.11,0.09,0.13,0.1,0.13,0.07,0.13,0,0.06,0.13,0.1,0.1,0.12,0.12,0.09,0.08,0.14,0,0.07,0.11,0.09,0.11,0.12,0.1,0.08,0.13,0.12,0,0,9.24,2.18,1716.67,1150,1537.5,2.15,3.05,1.81,2.71,3.68,2.71,10.16},2},
{{0.09,0.11,0.12,0.1,0.1,0.1,0.09,0.1,0.12,0,0.1,0.11,0.08,0.1,0.11,0.11,0.13,0.1,0.09,0,0.09,0.09,0.11,0.12,0.11,0.09,0.12,0.12,0.1,0,0,9.06,2.08,1740,1500,3016.67,2.13,3.05,1.82,2.65,3.69,2.65,9.96},2},
{{0.12,0.05,0.1,0.14,0.07,0.08,0.11,0.12,0.12,0,0.1,0.12,0.09,0.1,0.12,0.09,0.11,0.1,0.08,0,0.07,0.14,0.08,0.1,0.08,0.17,0.09,0.12,0.09,0,0,9.07,1.94,2575,1550,1016.67,2.37,3.2,1.72,2.98,3.88,2.98,10.03},2},
{{0.13,0.09,0.12,0.08,0.06,0.09,0.08,0.12,0.15,0,0.11,0.09,0.13,0.1,0.07,0.12,0.09,0.1,0.12,0,0.1,0.09,0.12,0.1,0.08,0.11,0.11,0.11,0.1,0,0,9.06,2.12,2433.33,2125,1880,2.41,3.2,1.96,2.94,3.86,2.94,10.11},2},
{{0.11,0.11,0.07,0.13,0.12,0.06,0.07,0.16,0.04,0,0.1,0.09,0.09,0.09,0.11,0.13,0.1,0.12,0.09,0,0.12,0.07,0.11,0.11,0.1,0.08,0.1,0.11,0.12,0,0,9.27,2.1,675,1125,1525,2.27,3.14,2.09,2.86,3.82,2.86,10.3},2},
{{0.11,0.09,0.09,0.11,0.1,0.09,0.12,0.12,0.12,0,0.1,0.11,0.1,0.07,0.11,0.13,0.13,0.1,0.11,0,0.13,0.05,0.1,0.1,0.09,0.15,0.09,0.11,0.1,0,0,9.08,2.06,1366.67,1083.33,3050,2.08,3.03,1.91,2.56,3.71,2.56,9.99},2},
{{0.1,0.11,0.08,0.1,0.09,0.12,0.13,0.1,0.07,0.12,0.08,0.13,0.14,0.09,0.08,0.04,0.11,0.11,0.11,0.08,0.08,0.1,0.09,0.13,0.09,0.07,0.14,0.11,0.11,0.1,0,7.57,1.77,1466.67,445.24,1625,3.33,8.2,3.03,4.02,9.05,4.02,11.32},0},
{{0.07,0.12,0.15,0.11,0.08,0.08,0.11,0.11,0.08,0.1,0.09,0.12,0.12,0.09,0.13,0.08,0.08,0.11,0.11,0.1,0.07,0.08,0.14,0.1,0.07,0.1,0.13,0.17,0.07,0.09,0,7.53,1.81,2800,355.56,1333.33,3.13,7.79,2.87,3.88,8.96,3.88,11.25},0},
{{0.1,0.12,0.11,0.12,0.12,0.08,0.07,0.09,0.12,0.1,0.11,0.11,0.13,0.1,0.06,0.09,0.13,0.1,0.11,0.07,0.07,0.11,0.14,0.12,0.12,0.09,0.11,0.08,0.11,0.08,0,7.28,1.51,937.5,508.33,1975,3.09,8.02,2.81,3.83,9.02,3.83,11.12},0},
{{0.12,0.07,0.09,0.11,0.09,0.11,0.11,0.14,0.07,0.12,0.09,0.11,0.12,0.12,0.06,0.12,0.08,0.11,0.11,0.08,0.07,0.09,0.11,0.14,0.16,0.11,0.07,0.09,0.11,0.08,0,7.25,1.5,3950,397.83,4675,3.29,7.83,2.74,3.97,8.91,3.97,11.01},0},
{{0.11,0.13,0.09,0.09,0.09,0.1,0.05,0.09,0.09,0.17,0.18,0.08,0.11,0.09,0.1,0.07,0.09,0.1,0.09,0.1,0.2,0.12,0.06,0.1,0.09,0.1,0.05,0.13,0.09,0.08,0,6.58,1.1,1575,427.27,1870,3.57,8.37,3.18,4.27,9.53,4.27,11.45},0},
{{0.09,0.1,0.13,0.11,0.07,0.1,0.1,0.12,0.1,0.1,0.11,0.11,0.09,0.11,0.08,0.06,0.13,0.13,0.12,0.07,0.11,0.1,0.13,0.09,0.08,0.11,0.09,0.1,0.12,0.08,0,7.65,1.42,3425,429.55,1228.57,3.35,8.01,2.98,4.11,9.08,4.11,11.64},0},
{{0.11,0.1,0.11,0.1,0.11,0.12,0.08,0.1,0.09,0.09,0.12,0.11,0.07,0.11,0.09,0.14,0.09,0.09,0.07,0.11,0.07,0.15,0.11,0.09,0.09,0.08,0.13,0.08,0.11,0.12,0,7.29,1.66,3175,393.75,1575,3.07,7.81,3.06,3.81,9.13,3.81,11.43},0},
{{0.09,0.13,0.13,0.04,0.11,0.06,0.16,0.09,0.13,0.08,0.1,0.08,0.11,0.15,0.1,0.07,0.08,0.12,0.09,0.12,0.1,0.12,0.15,0.09,0.08,0.1,0.08,0.11,0.1,0.11,0,7.49,1.49,2162.5,390,2350,3.43,7.82,3.11,4.09,8.96,4.09,11.39},0},
{{0.1,0.08,0.09,0.11,0.1,0.11,0.15,0.1,0.11,0.07,0.09,0.13,0.08,0.1,0.11,0.09,0.1,0.07,0.14,0.1,0.1,0.1,0.12,0.11,0.11,0.06,0.08,0.13,0.11,0.11,0,7.66,1.72,1425,346.43,1092.86,3.16,7.92,3.1,3.83,9.04,3.83,11.57},0},
{{0.11,0.07,0.08,0.11,0.13,0.1,0.1,0.1,0.13,0.09,0.11,0.09,0.08,0.12,0.08,0.1,0.12,0.12,0.11,0.09,0.12,0.08,0.08,0.09,0.11,0.12,0.07,0.11,0.14,0.09,0,7.99,1.88,2312.5,402.17,1925,3.42,7.72,3.21,4.23,8.78,4.23,11.8},0},
{{0.11,0.1,0.12,0.08,0.09,0.09,0.09,0.1,0.09,0.15,0.1,0.12,0.09,0.09,0.1,0.09,0.12,0.1,0.1,0.09,0.14,0.09,0.09,0.07,0.08,0.09,0.13,0.08,0.11,0.12,0,7.43,1.79,1950,395.83,2600,3.48,7.74,3.31,4.22,8.87,4.22,11.51},0},
{{0.12,0.08,0.1,0.08,0.12,0.1,0.1,0.12,0.13,0.08,0.13,0.09,0.08,0.08,0.12,0.1,0.11,0.08,0.1,0.1,0.14,0.13,0.07,0.06,0.09,0.09,0.12,0.07,0.11,0.13,0,7.32,1.67,4525,351.92,2625,3.32,7.84,3.37,3.99,9.09,3.99,11.64},0},
{{0.11,0.11,0.09,0.08,0.11,0.1,0.09,0.13,0.11,0.09,0.09,0.13,0.1,0.13,0.09,0.09,0.09,0.1,0.11,0.08,0.09,0.06,0.1,0.11,0.16,0.15,0.07,0.09,0.11,0.1,0,7.13,1.78,2725,386.96,1250,3.31,7.76,2.78,3.98,8.86,3.98,11.04},0},
{{0.1,0.12,0.11,0.09,0.09,0.1,0.14,0.07,0.13,0.09,0.11,0.08,0.14,0.1,0.08,0.09,0.12,0.09,0.12,0.07,0.12,0.09,0.1,0.13,0.09,0.11,0.08,0.08,0.1,0.13,0,7.46,1.56,1210,415.91,2112.5,3.24,7.78,3.22,3.9,8.81,3.9,11.37},0},
{{0.11,0.11,0.09,0.11,0.09,0.1,0.09,0.12,0.09,0.11,0.07,0.11,0.09,0.1,0.12,0.12,0.1,0.11,0.1,0.08,0.1,0.11,0.09,0.11,0.1,0.11,0.09,0.15,0.06,0.11,0,7.81,1.66,4050,455,1680,3.43,7.33,3.02,4.21,8.47,4.21,11.38},0},
{{0.11,0.12,0.1,0.1,0.11,0.07,0.11,0.09,0.1,0.12,0.09,0.11,0.13,0.07,0.11,0.11,0.1,0.1,0.12,0.09,0.12,0.13,0.06,0.09,0.1,0.1,0.1,0.09,0.13,0.11,0,7.53,1.82,3450,421.43,1690,3.33,7.56,3.23,4.05,8.62,4.05,11.28},0},
{{0.08,0.09,0.1,0.13,0.11,0.14,0.1,0.08,0.1,0.09,0.08,0.1,0.1,0.11,0.13,0.08,0.11,0.12,0.09,0.07,0.08,0.07,0.09,0.11,0.13,0.13,0.14,0.1,0.08,0.08,0,7.43,1.61,1350,491.67,2633.33,3.02,7.38,2.57,3.8,8.55,3.8,10.88},0},
{{0.11,0.1,0.06,0.17,0.11,0.06,0.09,0.1,0.08,0.15,0.1,0.09,0.07,0.12,0.08,0.17,0.1,0.1,0.09,0.11,0.11,0.08,0.07,0.15,0.05,0.11,0.11,0.11,0.1,0.13,0,7.95,1.79,1150,366,2100,3.49,7.32,3.17,4.36,8.56,4.36,11.76},0},
{{0.08,0.08,0.11,0.11,0.14,0.11,0.09,0.07,0.13,0.06,0.06,0.07,0.08,0.06,0.19,0.21,0.07,0.08,0.07,0.06,0.04,0.09,0.1,0.06,0.15,0.13,0.15,0.08,0.08,0.09,0,7.41,1.75,1550,478.57,1550,2.75,5.72,2.38,3.65,7.61,3.65,10.18},0},
{{0,0.02,0,0.09,0,0.23,0,0.31,0.26,0.12,0.02,0,0.09,0,0,0.37,0,0,0.37,0.16,0,0,0,0.04,0.12,0.18,0.23,0.34,0.1,0.01,0,9.33,1.32,1550,246.15,1025,1.14,0.03,0.05,1.14,0.07,1.14,9.49},4},
{{0.01,0.23,0,0.39,0,0.28,0,0.08,0.02,0,0,0,0.02,0,0,0.31,0,0,0.57,0.11,0,0.01,0.09,0.15,0.28,0.3,0.13,0.05,0.01,0,0,9.33,1.24,1550,357.41,560.71,1.22,0.02,0.04,1.22,0.03,1.22,9.49},4},
{{0.02,0.11,0,0.19,0,0.38,0,0.19,0.07,0.06,0.06,0,0.08,0,0,0.34,0,0,0.38,0.13,0.01,0.02,0,0.02,0.02,0.11,0.19,0.44,0.17,0.06,0,9.33,1.35,1550,255.26,466.67,1.18,0.06,0.06,1.19,0.12,1.19,9.51},4},
{{0.1,0.09,0.12,0.08,0.09,0.08,0.11,0.09,0.15,0.11,0.14,0.16,0.04,0.09,0.07,0.08,0.06,0.11,0.12,0.13,0.11,0.11,0.06,0.14,0.09,0.1,0.11,0.11,0.09,0.11,0,8.19,2.96,1325,628.57,2325,1.83,6.48,2.74,2.31,7.65,2.31,10.68},5},
{{0.11,0.11,0.12,0.09,0.08,0.11,0.06,0.1,0.12,0.12,0.08,0.11,0.11,0.11,0.11,0.11,0.12,0.09,0.06,0.11,0.1,0.08,0.1,0.1,0.09,0.16,0.1,0.09,0.09,0.11,0,8.61,2.9,1100,725,1250,1.79,5.26,2.46,2.29,6.65,2.29,10.57},5},
{{0.06,0.13,0.1,0.12,0.08,0.12,0.11,0.11,0.08,0.1,0.1,0.09,0.14,0.11,0.09,0.07,0.09,0.09,0.11,0.13,0.08,0.11,0.07,0.11,0.11,0.08,0.11,0.1,0.15,0.1,0,8.64,3.24,2783.33,484.21,2516.67,1.62,5.72,2.74,2.16,6.87,2.16,10.6},5},
{{0.11,0.08,0.07,0.09,0.15,0.12,0.09,0.09,0.1,0.11,0.09,0.08,0.1,0.1,0.14,0.09,0.12,0.08,0.14,0.08,0.11,0.1,0.09,0.14,0.1,0.1,0.09,0.07,0.1,0.12,0,8.72,2.89,1250,677.27,2283.33,1.8,5.05,2.73,2.42,6.41,2.42,10.65},5},
{{0.14,0.08,0.09,0.12,0.09,0.09,0.11,0.12,0.09,0.09,0.1,0.08,0.12,0.09,0.09,0.1,0.12,0.16,0.09,0.07,0.11,0.08,0.13,0.07,0.1,0.09,0.1,0.14,0.1,0.09,0,8.54,2.75,2350,831.82,2212.5,1.85,5.23,2.49,2.43,6.47,2.43,10.55},5},
{{0,0.01,0.03,0.03,0.02,0.02,0.02,0,0.01,0,0,0,0,0.02,0.04,0.07,0.01,0,0,0,0.01,0.04,0.03,0.01,0.02,0.02,0.01,0,0,0,0,1.11,0.1,183.33,200,550,0.11,0.97,0.14,1.11,7.88,1.11,1.13},5},
{{0.07,0.09,0.07,0.11,0.09,0.1,0.1,0.13,0.13,0.13,0.1,0.1,0.12,0.11,0.11,0.11,0.08,0.09,0.12,0.09,0.14,0.07,0.08,0.05,0.12,0.1,0.12,0.14,0.08,0.11,0,7.97,3.32,1850,1057.14,2162.5,2.52,3.44,2.44,3.07,4.7,3.07,10.01},1},
{{0.08,0.12,0.15,0.1,0.11,0.11,0.12,0.08,0.07,0.07,0.09,0.09,0.09,0.1,0.11,0.12,0.12,0.12,0.1,0.06,0.1,0.12,0.11,0.08,0.07,0.09,0.11,0.12,0.11,0.1,0,7.99,3.28,1925,1950,1292.86,2.14,3.21,2.45,2.8,4.48,2.8,9.94},1},
{{0.14,0.08,0.07,0.09,0.09,0.11,0.09,0.11,0.11,0.13,0.11,0.11,0.11,0.12,0.08,0.08,0.13,0.07,0.1,0.12,0.1,0.1,0.08,0.14,0.12,0.11,0.08,0.09,0.1,0.1,0,7.96,3.19,2150,770,2100,2.66,3.5,2.33,3.23,4.58,3.23,9.97},1},
{{0.12,0.1,0.12,0.11,0.08,0.1,0.13,0.08,0.09,0.09,0.1,0.11,0.12,0.07,0.08,0.08,0.09,0.12,0.11,0.13,0.07,0.13,0.1,0.11,0.08,0.11,0.11,0.08,0.13,0.11,0,8.41,3.31,4800,2225,1737.5,2.32,3.91,2.42,2.94,5.15,2.94,10.44},1},
{{0.05,0.06,0.04,0.05,0.07,0.05,0.05,0.06,0.06,0.05,0.07,0.04,0.03,0.06,0.07,0.08,0.05,0.06,0.04,0.06,0.03,0.06,0.08,0.07,0.08,0.06,0.04,0.03,0.03,0.06,0,4.2,1.67,1325,925,666.67,1.25,2.96,1.23,2.91,6.31,2.91,5.31},1},
{{0.07,0.12,0.12,0.09,0.12,0.09,0.1,0.12,0.13,0.08,0.1,0.11,0.05,0.11,0.07,0.11,0.14,0.1,0.12,0.11,0.09,0.12,0.09,0.15,0.09,0.08,0.1,0.1,0.1,0.1,0,8.84,2.88,1725,615.38,812.5,1.66,5.26,2.53,2.26,6.63,2.26,10.77},5},
{{0.13,0.09,0.09,0.1,0.12,0.11,0.07,0.11,0.09,0.12,0.13,0.14,0.07,0.08,0.1,0.06,0.08,0.13,0.11,0.13,0.08,0.09,0.11,0.06,0.14,0.12,0.08,0.08,0.12,0.12,0,8.37,3.41,1000,500,1241.67,1.84,6,2.88,2.46,7.31,2.46,10.93},5},
{{0.12,0.11,0.07,0.1,0.07,0.12,0.11,0.06,0.13,0.11,0.11,0.12,0.14,0.08,0.07,0.09,0.1,0.1,0.09,0.12,0.09,0.14,0.12,0.07,0.05,0.15,0.08,0.1,0.08,0.12,0,7.94,3.15,2183.33,900,1787.5,1.92,5.66,2.94,2.5,6.92,2.5,10.41},5},
{{0.11,0.07,0.13,0.08,0.13,0.08,0.12,0.1,0.08,0.13,0.08,0.08,0.12,0.13,0.14,0.08,0.1,0.11,0.11,0.08,0.14,0.08,0.08,0.12,0.09,0.09,0.1,0.11,0.13,0.09,0,8.51,2.81,2800,1500,1400,1.81,4.77,2.63,2.37,6.13,2.37,10.46},5},
{{0.1,0.11,0.08,0.09,0.11,0.12,0.1,0.11,0.1,0.1,0.11,0.07,0.17,0.12,0.08,0.07,0.11,0.08,0.11,0.1,0.11,0.08,0.07,0.12,0.11,0.06,0.13,0.16,0.1,0.1,0,7.88,3.06,1400,972.22,1121.43,1.81,5.44,2.53,2.44,6.82,2.44,10.29},5},
{{0.01,0.03,0.06,0.03,0.02,0.03,0.04,0.04,0.02,0,0,0,0,0.03,0.08,0.13,0.02,0.02,0,0,0.02,0.03,0.03,0.05,0.04,0.06,0.04,0,0,0,0,2.46,0.43,550,350,175,0.31,1.81,0.44,1.43,7.02,1.43,2.56},5},
{{0.07,0.13,0.07,0.11,0.05,0.12,0.12,0.15,0.11,0.1,0.09,0.09,0.11,0.13,0.09,0.1,0.11,0.11,0.11,0.08,0.12,0.11,0.08,0.07,0.11,0.1,0.09,0.12,0.12,0.1,0,7.79,3.43,1150,4025,1450,2.51,3.96,2.65,3.1,5.34,3.1,10.24},1},
{{0.08,0.08,0.13,0.08,0.1,0.12,0.12,0.08,0.12,0.11,0.07,0.15,0.12,0.11,0.11,0.07,0.1,0.07,0.08,0.14,0.1,0.08,0.1,0.11,0.1,0.11,0.11,0.09,0.12,0.1,0,7.96,3.33,725,970,1120,2.49,4.08,2.52,3.21,5.34,3.21,10.11},1},
{{0.11,0.12,0.1,0.11,0.12,0.11,0.06,0.1,0.11,0.08,0.12,0.1,0.09,0.08,0.08,0.13,0.09,0.13,0.1,0.11,0.11,0.1,0.13,0.11,0.09,0.1,0.12,0.07,0.08,0.11,0,8.01,3.08,2725,1483.33,775,2.4,4.23,2.54,3.1,5.5,3.1,10.12},1},
{{0.11,0.09,0.12,0.1,0.13,0.1,0.1,0.07,0.07,0.12,0.12,0.07,0.1,0.11,0.1,0.12,0.12,0.08,0.13,0.08,0.09,0.11,0.1,0.11,0.1,0.11,0.09,0.14,0.08,0.1,0,7.78,3.36,3200,2625,4250,2.49,4.13,2.51,3.42,5.48,3.42,10.17},1},
{{0.07,0.02,0.05,0.04,0.03,0.02,0.03,0.05,0.03,0.04,0.04,0.03,0.02,0.03,0.05,0.03,0.04,0.05,0.04,0.04,0.03,0.05,0.04,0.05,0.04,0.03,0.04,0.01,0.03,0.05,0,2.96,1.21,1325,625,633.33,1,2.37,1.05,3.79,7.66,3.79,3.8},1},
{{0.11,0.12,0.12,0.06,0.1,0.14,0.09,0.08,0.08,0.12,0.28,0.08,0.05,0.06,0.06,0.03,0.06,0.06,0.11,0.21,0.17,0.09,0.08,0.06,0.1,0.08,0.1,0.13,0.11,0.08,0,8.53,2.77,416.67,779.17,2866.67,1.86,5.53,2.54,2.43,6.72,2.43,10.47},5},
{{0.13,0.1,0.09,0.1,0.09,0.05,0.1,0.08,0.13,0.14,0.2,0.04,0.09,0.05,0.06,0.07,0.08,0.12,0.1,0.21,0.13,0.08,0.11,0.09,0.08,0.1,0.1,0.12,0.11,0.1,0,8.87,2.76,725,535.71,1300,2,4.86,2.45,2.58,6.34,2.58,10.83},5},
{{0.15,0.09,0.11,0.1,0.05,0.09,0.11,0.12,0.11,0.1,0.06,0.12,0.09,0.09,0.09,0.11,0.13,0.14,0.14,0.06,0.11,0.08,0.08,0.11,0.07,0.14,0.11,0.12,0.07,0.14,0,8.91,2.81,2250,1516.67,2416.67,1.86,2.76,2.23,2.34,3.68,2.34,10.21},5},
{{0.09,0.09,0.12,0.18,0.12,0.12,0.1,0.09,0.04,0.06,0.04,0.11,0.12,0.15,0.13,0.12,0.12,0.1,0.09,0.06,0.07,0.09,0.13,0.09,0.14,0.1,0.11,0.09,0.11,0.09,0,8.71,2.61,1725,900,2225,1.29,2.25,1.91,1.73,2.93,1.73,9.61},5},
{{0.09,0.14,0.1,0.13,0.12,0.15,0.06,0.11,0.1,0.03,0.04,0.13,0.12,0.11,0.1,0.16,0.11,0.12,0.12,0.03,0.08,0.09,0.16,0.11,0.13,0.09,0.09,0.07,0.1,0.11,0,8.72,2.58,450,2925,1420,1.32,2.25,2.07,1.69,2.94,1.69,9.69},5},
{{0.07,0.08,0.09,0.11,0.09,0.12,0.12,0.12,0.12,0.11,0.03,0.13,0.13,0.15,0.14,0.11,0.12,0.08,0.08,0.06,0.06,0.15,0.08,0.12,0.07,0.11,0.1,0.11,0.11,0.1,0,8.53,2.62,1500,825,675,1.61,2.15,2.06,2.02,2.81,2.02,9.56},5},
{{0,0,0,0,0.02,0.02,0.04,0.04,0.08,0.09,0,0.04,0.04,0.05,0.05,0.05,0.03,0.02,0.02,0.01,0.02,0.03,0.03,0.06,0.03,0.02,0.03,0.02,0.02,0.03,0,2.37,0.68,625,666.67,625,0.81,1.69,0.62,3.22,6.43,3.22,2.74},5},
{{0.05,0.12,0.06,0.11,0.12,0.09,0.14,0.1,0.15,0.09,0.09,0.07,0.12,0.15,0.11,0.09,0.1,0.08,0.09,0.12,0.06,0.09,0.1,0.1,0.12,0.13,0.09,0.09,0.13,0.11,0,8.77,2.77,2350,1235.71,2350,1.94,3.33,1.58,2.52,4.08,2.52,9.74},1},
{{0.09,0.12,0.08,0.07,0.11,0.11,0.11,0.1,0.1,0.13,0.11,0.12,0.11,0.11,0.1,0.07,0.11,0.1,0.09,0.11,0.08,0.1,0.1,0.09,0.13,0.12,0.1,0.09,0.12,0.1,0,8.64,2.6,3066.67,877.27,2700,2.06,3.6,1.62,2.69,4.37,2.69,9.63},1},
{{0.09,0.09,0.15,0.12,0.1,0.09,0.07,0.11,0.1,0.09,0.1,0.14,0.1,0.09,0.1,0.14,0.06,0.09,0.11,0.11,0.16,0.1,0.06,0.12,0.1,0.08,0.09,0.13,0.1,0.09,0,8.62,2.26,2050,712.5,3025,1.88,3.63,1.75,2.58,4.48,2.58,9.52},1},
{{0.13,0.09,0.15,0.09,0.07,0.12,0.09,0.1,0.07,0.11,0.12,0.06,0.13,0.07,0.09,0.09,0.09,0.14,0.11,0.1,0.06,0.11,0.18,0.1,0.09,0.1,0.08,0.11,0.1,0.1,0,8.97,2.53,3025,987.5,2237.5,1.9,3.83,1.59,2.54,4.69,2.54,9.86},1},
{{0.15,0.1,0.08,0.11,0.08,0.09,0.09,0.11,0.1,0.11,0.08,0.12,0.09,0.09,0.1,0.12,0.13,0.12,0.1,0.08,0.15,0.06,0.07,0.11,0.1,0.1,0.14,0.11,0.09,0.09,0,8.71,2.44,1550,962.5,1800,2.15,3.35,1.61,2.81,4.15,2.81,9.76},1},
{{0.06,0.07,0.07,0.07,0.08,0.09,0.1,0.07,0.07,0.06,0.08,0.06,0.07,0.06,0.07,0.08,0.1,0.06,0.09,0.07,0.08,0.06,0.1,0.08,0.05,0.07,0.06,0.07,0.07,0.1,0,6.2,1.88,1200,1110,700,1.28,2.91,1.24,2.37,5.08,2.37,6.88},1},
{{0.11,0.09,0.07,0.09,0.11,0.09,0.11,0.11,0.11,0.13,0.1,0.09,0.1,0.1,0.1,0.11,0.1,0.12,0.13,0.08,0.1,0.06,0.09,0.1,0.09,0.16,0.1,0.15,0.09,0.08,0,8.75,2.71,1600,1483.33,2225,1.66,2.39,1.85,2.11,3.06,2.11,9.79},5},
{{0.07,0.14,0.11,0.09,0.06,0.09,0.12,0.12,0.1,0.12,0.07,0.1,0.13,0.09,0.1,0.12,0.11,0.08,0.1,0.12,0.12,0.12,0.12,0.11,0.1,0.07,0.1,0.08,0.12,0.09,0,8.85,2.47,1100,1790,2100,1.61,2.42,2.04,2.04,3.12,2.04,9.81},5},
{{0.1,0.12,0.08,0.12,0.13,0.09,0.08,0.09,0.11,0.11,0.13,0.11,0.08,0.12,0.1,0.1,0.09,0.1,0.11,0.08,0.1,0.09,0.09,0.1,0.11,0.09,0.09,0.08,0.13,0.13,0,8.54,3.02,1666.67,533.33,1940,1.47,2.5,2.38,1.87,3.23,1.87,9.81},5},
{{0.09,0.09,0.12,0.07,0.09,0.15,0.1,0.11,0.1,0.1,0.11,0.12,0.11,0.12,0.06,0.11,0.06,0.11,0.11,0.09,0.06,0.11,0.11,0.12,0.08,0.12,0.13,0.09,0.1,0.1,0,8.55,2.71,1050,2400,2050,1.58,2.68,1.92,2.05,3.4,2.05,9.6},5},
{{0.09,0.12,0.16,0.1,0.09,0.11,0.12,0.09,0.07,0.08,0.13,0.09,0.11,0.09,0.12,0.07,0.09,0.1,0.07,0.15,0.13,0.1,0.07,0.09,0.1,0.08,0.11,0.12,0.12,0.1,0,8.66,2.65,3875,1516.67,1483.33,1.41,2.73,2.04,1.85,3.46,1.85,9.65},5},
{{0.11,0.09,0.11,0.13,0.1,0.1,0.11,0.09,0.08,0.11,0.09,0.11,0.13,0.09,0.1,0.11,0.08,0.1,0.11,0.11,0.11,0.13,0.15,0.08,0.1,0.05,0.08,0.09,0.1,0.13,0,8.75,2.65,2850,1366.67,1775,1.54,2.48,2.24,2.06,3.14,2.06,9.81},5},
{{0.12,0.06,0.05,0.11,0.11,0.08,0.09,0.09,0.12,0.07,0.06,0.08,0.05,0.08,0.1,0.12,0.15,0.1,0.08,0.07,0.09,0.08,0.06,0.1,0.11,0.13,0.08,0.1,0.07,0.07,0,7.73,2.18,1450,990,2200,1.38,2.01,1.44,2.03,2.99,2.03,8.52},5},
{{0.01,0.08,0.07,0.08,0.16,0.11,0.13,0.13,0.15,0.09,0.06,0.1,0.09,0.15,0.11,0.11,0.1,0.12,0.1,0.08,0.05,0.1,0.11,0.13,0.1,0.12,0.13,0.11,0.08,0.08,0,8.44,2.82,1683.33,780,1350,2.1,3.08,1.68,2.63,3.86,2.63,9.49},1},
{{0.06,0.09,0.14,0.12,0.04,0.17,0.13,0.1,0.11,0.06,0.12,0.1,0.06,0.15,0.12,0.09,0.09,0.11,0.06,0.1,0.1,0.13,0.11,0.14,0.11,0.11,0.11,0.07,0.08,0.07,0,8.29,2.37,3075,994.44,1716.67,1.95,3.58,1.72,2.59,4.49,2.59,9.32},1},
{{0,0,0.01,0.03,0.02,0.05,0.03,0.12,0.1,0.63,0.11,0.07,0.11,0.11,0.09,0.09,0.08,0.1,0.1,0.14,0.16,0.14,0.07,0.09,0.11,0.11,0.06,0.11,0.1,0.08,0,9.24,0.28,475,866.67,3350,1.74,3.97,2.6,2.22,4.73,2.22,10.21},2},
{{0,0,0.03,0.05,0.03,0.08,0.1,0.1,0.14,0.49,0.03,0.13,0.1,0.11,0.1,0.11,0.15,0.09,0.07,0.13,0.06,0.13,0.11,0.09,0.16,0.12,0.11,0.1,0.07,0.07,0,9.46,0.4,2275,720,1537.5,1.61,3.39,2.23,2.02,4.07,2.02,10.18},2},
{{0,0.02,0.03,0.04,0.05,0.09,0.11,0.12,0.2,0.35,0.04,0.15,0.08,0.09,0.11,0.11,0.12,0.08,0.11,0.13,0.04,0.09,0.12,0.12,0.16,0.08,0.15,0.09,0.09,0.07,0,9.39,0.62,3750,993.75,1450,1.73,3.56,2.28,2.25,4.24,2.25,10.22},2},
{{0.01,0.02,0.03,0.09,0.09,0.11,0.11,0.14,0.2,0.23,0.04,0.14,0.09,0.08,0.09,0.12,0.13,0.12,0.1,0.12,0.07,0.13,0.12,0.08,0.11,0.08,0.11,0.13,0.1,0.1,0,9.55,0.84,2025,992.86,2550,2.07,3.5,2.61,2.62,4.17,2.62,10.52},2},
{{0.01,0.04,0.06,0.08,0.1,0.11,0.09,0.15,0.24,0.15,0.07,0.11,0.07,0.09,0.13,0.11,0.14,0.08,0.11,0.11,0.07,0.11,0.12,0.09,0.09,0.07,0.12,0.12,0.12,0.11,0,9.33,0.78,900,1633.33,983.33,2.37,3.39,2.52,2.97,4.12,2.97,10.36},2},
{{0.03,0.08,0.09,0.05,0.11,0.15,0.14,0.06,0.16,0.16,0.06,0.14,0.07,0.09,0.11,0.11,0.1,0.14,0.13,0.08,0.06,0.08,0.18,0.09,0.09,0.12,0.11,0.11,0.1,0.1,0,9.25,0.85,3500,2000,1975,2.81,3.51,2.64,3.5,4.17,3.5,10.54},2},
{{0.02,0.08,0.11,0.11,0.15,0.12,0.1,0.13,0.1,0.1,0.06,0.12,0.1,0.09,0.11,0.1,0.11,0.1,0.17,0.06,0.07,0.14,0.13,0.07,0.08,0.11,0.1,0.11,0.11,0.09,0,9.27,0.78,925,3025,1250,3.14,3.52,2.64,3.72,4.2,3.72,10.57},2},
{{0.06,0.12,0.08,0.06,0.11,0.12,0.13,0.06,0.15,0.13,0.1,0.09,0.08,0.15,0.07,0.09,0.11,0.1,0.12,0.11,0.09,0.12,0.09,0.08,0.09,0.1,0.12,0.12,0.09,0.12,0,9.23,1.01,1500,1450,1950,3.24,3.78,2.86,4,4.48,4,10.75},2},
{{0.08,0.11,0.08,0.08,0.11,0.12,0.12,0.05,0.15,0.12,0.12,0.08,0.1,0.1,0.06,0.11,0.11,0.14,0.12,0.08,0.13,0.13,0.06,0.12,0.06,0.1,0.11,0.13,0.12,0.06,0,9.02,0.32,2000,2262.5,1525,3.44,3.83,2.4,4.31,4.53,4.31,10.53},2},
{{0.07,0.1,0.1,0.11,0.14,0.09,0.1,0.07,0.14,0.11,0.1,0.11,0.06,0.07,0.09,0.1,0.15,0.15,0.15,0.04,0.15,0.11,0.08,0.09,0.08,0.09,0.13,0.12,0.1,0.08,0,9.11,0.36,1975,1300,1475,3.34,3.57,2.44,4.04,4.24,4.04,10.5},2},
{{0.07,0.06,0.1,0.12,0.16,0.16,0.1,0.12,0.09,0.05,0.03,0.1,0.12,0.12,0.12,0.12,0.15,0.14,0.08,0.05,0.05,0.07,0.12,0.11,0.09,0.1,0.13,0.14,0.11,0.1,0,9.19,1.2,2750,2925,3066.67,3.41,2.99,2.76,4,3.58,4,10.66},2},
{{0.1,0.09,0.08,0.15,0.13,0.1,0.11,0.08,0.1,0.09,0.06,0.13,0.08,0.11,0.11,0.11,0.13,0.15,0.09,0.04,0.07,0.12,0.08,0.09,0.08,0.13,0.14,0.1,0.12,0.09,0,8.96,0.96,1400,2500,2500,3.69,3.37,2.61,4.45,4.06,4.45,10.52},2},
{{0.09,0.11,0.1,0.08,0.11,0.1,0.11,0.09,0.1,0.13,0.12,0.09,0.12,0.07,0.11,0.09,0.08,0.09,0.08,0.17,0.14,0.07,0.11,0.06,0.09,0.1,0.07,0.15,0.09,0.14,0,9.18,0.99,4075,682.14,1637.5,3.61,4.06,3.01,4.6,4.85,4.6,10.86},2},
{{0.12,0.1,0.12,0.1,0.19,0.09,0.07,0.08,0.09,0.08,0.12,0.07,0.11,0.06,0.13,0.12,0.1,0.12,0.08,0.12,0.08,0.11,0.12,0.1,0.09,0.08,0.11,0.09,0.12,0.12,0,9.11,0.95,1550,871.43,1630,3.91,3.7,2.85,4.65,4.55,4.65,10.83},2},
{{0.1,0.13,0.11,0.13,0.11,0.09,0.11,0.08,0.11,0.05,0.1,0.08,0.14,0.15,0.06,0.11,0.09,0.11,0.1,0.09,0.09,0.11,0.08,0.15,0.09,0.09,0.08,0.12,0.11,0.11,0,8.83,0.84,4550,1410,2016.67,3.95,3.67,2.8,4.67,4.32,4.67,10.58},2},
{{0.11,0.12,0.09,0.15,0.12,0.07,0.1,0.13,0.09,0.05,0.14,0.06,0.1,0.09,0.11,0.11,0.1,0.08,0.1,0.13,0.11,0.1,0.1,0.11,0.11,0.09,0.11,0.07,0.12,0.09,0,9.02,0.54,2625,1135.71,3975,3.91,3.93,2.5,4.62,4.76,4.62,10.65},2},
{{0.16,0.09,0.1,0.1,0.12,0.09,0.1,0.12,0.11,0.04,0.17,0.05,0.11,0.1,0.08,0.09,0.08,0.11,0.1,0.13,0.12,0.1,0.1,0.11,0.08,0.11,0.11,0.1,0.09,0.11,0,8.89,0.64,4325,1120,2375,4.16,4.24,2.72,5.05,5.05,5.05,10.8},2},
{{0.14,0.11,0.1,0.15,0.1,0.06,0.1,0.12,0.11,0.04,0.15,0.07,0.12,0.09,0.08,0.1,0.09,0.09,0.09,0.14,0.11,0.1,0.09,0.1,0.13,0.09,0.08,0.09,0.12,0.11,0,8.76,0.83,3600,788.89,1016.67,4.09,4.09,2.84,4.85,4.85,4.85,10.7},2},
{{0.09,0.13,0.12,0.14,0.15,0.09,0.08,0.09,0.11,0.03,0.11,0.11,0.11,0.07,0.11,0.09,0.14,0.1,0.09,0.09,0.1,0.08,0.13,0.1,0.08,0.14,0.09,0.14,0.08,0.09,0,8.72,0.42,3425,1358.33,1050,4.01,3.69,2.26,4.66,4.34,4.66,10.33},2},
{{0.14,0.07,0.18,0.09,0.11,0.09,0.07,0.16,0.08,0.02,0.16,0.07,0.15,0.07,0.11,0.08,0.09,0.1,0.09,0.1,0.12,0.07,0.06,0.12,0.12,0.17,0.12,0.08,0.09,0.08,0,8.61,0.48,3425,666.67,1200,4.1,4.01,2.35,4.83,4.72,4.83,10.33},2},
{{0.11,0.11,0.14,0.2,0.1,0.11,0.07,0.1,0.09,0.01,0.1,0.12,0.11,0.08,0.12,0.12,0.11,0.1,0.1,0.08,0.07,0.09,0.1,0.13,0.1,0.1,0.11,0.13,0.09,0.1,0,8.73,0.84,3425,1662.5,1333.33,4.17,3.57,2.52,4.72,4.24,4.72,10.41},2},
{{0.09,0.15,0.15,0.11,0.14,0.09,0.11,0.07,0.1,0.02,0.09,0.11,0.09,0.13,0.12,0.09,0.11,0.09,0.07,0.12,0.08,0.09,0.07,0.1,0.15,0.1,0.1,0.09,0.11,0.13,0,8.91,1.03,3425,708.33,1316.67,4.16,3.61,2.79,4.74,4.37,4.74,10.67},2},
{{0.17,0.11,0.12,0.08,0.1,0.13,0.14,0.09,0.07,0.01,0.11,0.1,0.12,0.1,0.09,0.08,0.1,0.1,0.09,0.13,0.13,0.07,0.11,0.12,0.12,0.07,0.1,0.09,0.09,0.12,0,8.9,0.89,3425,1358.33,2037.5,4.42,4.03,3.09,5.14,4.71,5.14,11},2},
{{0.15,0.13,0.12,0.09,0.1,0.1,0.13,0.14,0.05,0.02,0.12,0.11,0.1,0.14,0.09,0.09,0.11,0.06,0.11,0.11,0.12,0.12,0.1,0.12,0.13,0.07,0.1,0.08,0.06,0.11,0,8.67,0.51,3425,1987.5,2237.5,4.31,3.98,2.76,5.02,4.74,5.02,10.65},2},
{{0.16,0.13,0.13,0.11,0.09,0.11,0.09,0.12,0.08,0.02,0.11,0.11,0.13,0.09,0.07,0.13,0.11,0.1,0.09,0.08,0.08,0.11,0.07,0.14,0.1,0.12,0.07,0.13,0.07,0.12,0,8.66,0.84,3600,1640,2733.33,4.32,3.83,2.75,5,4.51,5,10.57},2},
{{0.12,0.14,0.14,0.13,0.06,0.1,0.14,0.12,0.03,0.04,0.08,0.13,0.09,0.16,0.1,0.1,0.1,0.08,0.1,0.09,0.06,0.11,0.11,0.13,0.09,0.1,0.08,0.12,0.13,0.09,0,8.71,0.85,2050,3050,2700,4.24,3.6,2.67,4.89,4.28,4.89,10.52},2},
{{0.1,0.2,0.12,0.11,0.1,0.09,0.1,0.11,0.07,0.03,0.1,0.15,0.09,0.09,0.12,0.09,0.08,0.1,0.1,0.11,0.07,0.09,0.11,0.13,0.09,0.1,0.13,0.1,0.11,0.09,0,8.74,0.72,2575,2700,4050,4.3,3.78,2.44,4.96,4.49,4.96,10.53},2},
{{0.16,0.1,0.14,0.12,0.07,0.13,0.09,0.07,0.1,0.04,0.12,0.08,0.15,0.11,0.12,0.09,0.08,0.08,0.06,0.14,0.09,0.09,0.12,0.12,0.11,0.11,0.08,0.09,0.12,0.09,0,8.64,0.55,2925,835.71,1170,4.36,3.83,2.57,5.2,4.57,5.2,10.56},2},
{{0.17,0.12,0.1,0.12,0.1,0.13,0.1,0.08,0.08,0.03,0.11,0.12,0.11,0.09,0.09,0.1,0.05,0.09,0.15,0.12,0.24,0.07,0.07,0.08,0.06,0.07,0.08,0.1,0.11,0.15,0,8.82,0.64,3575,1900,2366.67,4.52,4.18,3.37,5.38,4.94,5.38,11.17},2},
{{0.21,0.11,0.08,0.11,0.09,0.1,0.1,0.09,0.07,0.06,0.15,0.08,0.12,0.08,0.08,0.09,0.1,0.08,0.11,0.14,0.22,0.14,0.06,0.04,0.09,0.08,0.08,0.07,0.12,0.13,0,8.8,0.45,2475,1185.71,2333.33,4.62,4.19,3.08,5.56,4.89,5.56,11.05},2},
{{0.15,0.13,0.13,0.08,0.14,0.09,0.11,0.05,0.1,0.04,0.11,0.13,0.05,0.13,0.12,0.11,0.09,0.11,0.09,0.09,0.09,0.1,0.08,0.13,0.1,0.12,0.08,0.08,0.12,0.11,0,8.62,0.83,1000,2975,2983.33,4.45,3.72,2.81,5.22,4.51,5.22,10.66},2},
{{0.17,0.13,0.13,0.12,0.13,0.09,0.11,0.07,0.04,0.04,0.13,0.08,0.08,0.09,0.17,0.09,0.08,0.11,0.1,0.08,0.09,0.08,0.08,0.13,0.11,0.11,0.08,0.06,0.14,0.13,0,8.76,0.96,3575,1025,2733.33,4.69,3.61,2.79,5.47,4.39,5.47,10.8},2},
{{0.17,0.16,0.11,0.11,0.06,0.08,0.08,0.13,0.08,0.03,0.1,0.11,0.12,0.15,0.08,0.1,0.08,0.09,0.1,0.09,0.07,0.08,0.09,0.09,0.16,0.13,0.11,0.08,0.1,0.11,0,8.57,0.9,3575,1610,2012.5,4.63,3.8,2.54,5.54,4.49,5.54,10.59},2},
{{0.04,0.02,0.02,0.01,0.02,0,0,0,0,0,0,0.01,0.03,0.01,0.03,0.01,0,0.01,0.01,0,0.01,0.03,0.01,0.01,0.01,0.01,0.01,0.01,0,0.01,0,0.77,-0.08,3575,225,2012.5,0.63,0.7,0.23,6.91,7.89,6.91,1.05},2},
{{0,0.13,0.07,0.13,0.07,0.09,0.11,0.13,0.18,0.12,0.01,0.06,0.07,0.08,0.05,0.02,0.07,0.12,0.08,0.39,0.07,0.11,0.08,0.08,0.09,0.15,0.15,0.13,0.08,0.07,0,6.54,0.83,900,512.5,2033.33,8.1,6.98,4.81,10.52,7.93,10.52,13.78},0},
{{0,0.19,0.1,0.1,0.13,0.09,0.11,0.06,0.13,0.12,0.06,0.09,0.06,0.09,0.1,0.09,0.05,0.2,0.18,0.11,0.12,0.05,0.06,0.13,0.12,0.13,0.11,0.11,0.06,0.12,0,1.11,0.41,3800,775,1712.5,10.02,3.86,5.39,12.06,5.04,12.06,13.21},0},
{{0,0.22,0.1,0.11,0.09,0.1,0.11,0.09,0.08,0.12,0.12,0.09,0.07,0.07,0.13,0.12,0.1,0.13,0.09,0.1,0.12,0.11,0.12,0.05,0.16,0.06,0.13,0.1,0.07,0.12,0,0.11,-0.15,3116.67,1850,1475,10.38,3.84,5.45,12.35,5.2,12.35,13.56},0},
{{0,0.23,0.08,0.09,0.12,0.06,0.11,0.1,0.11,0.12,0.11,0.07,0.09,0.12,0.14,0.09,0.12,0.08,0.13,0.08,0.13,0.13,0.06,0.06,0.11,0.13,0.12,0.11,0.09,0.08,0,-0.08,0.01,2683.33,1950,2883.33,10.15,3.6,5.25,12.29,4.97,12.29,13.32},0},
{{0,0.22,0.09,0.06,0.12,0.11,0.13,0.06,0.11,0.12,0.12,0.1,0.13,0.09,0.1,0.09,0.13,0.07,0.08,0.12,0.13,0.13,0.11,0.04,0.11,0.09,0.1,0.12,0.09,0.1,0,-0.33,-0.22,1900,2187.5,2116.67,10.03,3.92,5.4,12.08,5.23,12.08,13.34},0},
{{0,0.21,0.1,0.11,0.08,0.11,0.1,0.1,0.13,0.09,0.08,0.11,0.08,0.15,0.06,0.08,0.09,0.17,0.12,0.09,0.09,0.09,0.08,0.11,0.1,0.13,0.13,0.09,0.14,0.07,0,0.02,0.63,1800,4425,4025,10.17,3.72,5.08,12.29,4.79,12.29,13.22},0},
{{0,0.18,0.09,0.12,0.1,0.12,0.09,0.09,0.12,0.1,0.11,0.11,0.09,0.14,0.1,0.1,0.09,0.1,0.1,0.08,0.09,0.16,0.12,0.08,0.09,0.08,0.07,0.11,0.14,0.1,0,-0.52,0.21,1812.5,2575,1800,9.87,3.62,5.62,11.92,4.86,11.92,13.2},0},
{{0,0.21,0.09,0.1,0.13,0.08,0.11,0.11,0.09,0.11,0.11,0.12,0.09,0.06,0.11,0.12,0.14,0.1,0.08,0.1,0.09,0.1,0.14,0.08,0.13,0.07,0.09,0.09,0.14,0.09,0,-0.25,0.24,1500,1837.5,725,10.06,3.69,5.52,12.07,4.99,12.07,13.25},0},
{{0,0.21,0.08,0.12,0.11,0.09,0.14,0.1,0.08,0.1,0.1,0.13,0.09,0.1,0.08,0.08,0.11,0.12,0.12,0.09,0.09,0.12,0.1,0.09,0.09,0.1,0.09,0.14,0.11,0.11,0,-0.06,0.63,1487.5,2975,1475,10.09,3.83,5.42,12.12,4.97,12.12,13.23},0},
{{0,0.19,0.09,0.1,0.15,0.1,0.08,0.09,0.11,0.11,0.1,0.14,0.09,0.08,0.07,0.1,0.13,0.13,0.12,0.06,0.08,0.13,0.11,0.09,0.11,0.11,0.07,0.1,0.09,0.12,0,-0.32,0.19,1190,2925,1466.67,10.09,3.76,5.32,12.03,4.92,12.03,13.19},0},
{{0,0.21,0.09,0.15,0.1,0.07,0.09,0.1,0.13,0.07,0.06,0.14,0.1,0.09,0.11,0.1,0.08,0.13,0.15,0.08,0.08,0.07,0.09,0.12,0.12,0.12,0.12,0.14,0.11,0.05,0,0.05,0.53,1070,1425,1900,10.48,3.49,4.76,12.52,4.44,12.52,13.19},0},
{{0,0.16,0.15,0.09,0.11,0.14,0.09,0.12,0.07,0.08,0.08,0.12,0.11,0.1,0.07,0.11,0.1,0.16,0.12,0.06,0.1,0.08,0.09,0.15,0.09,0.12,0.1,0.11,0.1,0.08,0,-0.22,0.25,3300,912.5,2166.67,10.23,3.4,5.13,12.18,4.42,12.18,13.05},0},
{{0,0.23,0.12,0.12,0.05,0.11,0.11,0.1,0.09,0.1,0.11,0.08,0.11,0.11,0.07,0.12,0.11,0.11,0.12,0.09,0.11,0.08,0.08,0.15,0.1,0.1,0.08,0.11,0.14,0.08,0,-0.05,0.39,1683.33,1425,1462.5,10.7,3.85,5.26,12.72,5.22,12.72,13.72},0},
{{0,0.22,0.08,0.11,0.13,0.07,0.11,0.1,0.1,0.11,0.12,0.1,0.08,0.08,0.14,0.11,0.11,0.09,0.09,0.1,0.08,0.15,0.11,0.1,0.11,0.1,0.11,0.08,0.08,0.12,0,-0.29,0.17,3275,1462.5,1662.5,10.19,3.92,5.21,12.2,5.3,12.2,13.33},0},
{{0,0.19,0.13,0.12,0.06,0.11,0.11,0.09,0.09,0.13,0.1,0.12,0.1,0.13,0.1,0.1,0.1,0.08,0.11,0.09,0.1,0.11,0.13,0.11,0.09,0.09,0.09,0.08,0.12,0.1,0,-0.36,0.09,2433.33,1200,950,10.16,3.83,5.37,12.21,5.17,12.21,13.42},0},
{{0,0.21,0.11,0.1,0.09,0.1,0.09,0.14,0.1,0.08,0.08,0.12,0.13,0.1,0.13,0.08,0.09,0.1,0.12,0.07,0.09,0.07,0.1,0.14,0.11,0.1,0.1,0.13,0.09,0.1,0,-0.24,0.55,2650,2175,2150,10.22,3.43,4.98,12.33,4.58,12.33,13.17},0},
{{0,0.23,0.12,0.1,0.09,0.11,0.09,0.08,0.12,0.1,0.1,0.07,0.13,0.12,0.08,0.11,0.09,0.1,0.11,0.12,0.1,0.08,0.09,0.09,0.14,0.1,0.14,0.1,0.08,0.11,0,0.11,0.43,1825,2175,1950,10.56,3.86,4.95,12.63,5.07,12.63,13.59},0},
{{0,0.19,0.12,0.11,0.07,0.1,0.11,0.11,0.09,0.12,0.12,0.1,0.08,0.12,0.09,0.09,0.12,0.08,0.09,0.13,0.12,0.09,0.11,0.11,0.1,0.1,0.08,0.08,0.11,0.12,0,-0.03,0.16,2725,2200,2600,10.08,4.08,5.52,12.15,5.38,12.15,13.51},0},
{{0,0.21,0.11,0.07,0.12,0.09,0.1,0.13,0.08,0.11,0.15,0.07,0.09,0.11,0.09,0.12,0.11,0.08,0.08,0.11,0.12,0.14,0.09,0.08,0.12,0.07,0.09,0.09,0.1,0.12,0,-0.31,0.03,3275,1466.67,1100,10.15,4.24,5.69,12.16,5.89,12.16,13.71},0},
{{0,0.19,0.09,0.09,0.12,0.11,0.1,0.1,0.12,0.11,0.12,0.07,0.1,0.13,0.11,0.11,0.09,0.11,0.09,0.08,0.11,0.09,0.13,0.1,0.11,0.09,0.08,0.08,0.09,0.13,0,-0.51,0.2,2700,2575,1150,9.68,3.72,5.42,11.79,5.12,11.79,12.97},0},
{{0,0.2,0.12,0.09,0.1,0.11,0.08,0.11,0.1,0.11,0.11,0.1,0.11,0.1,0.09,0.11,0.1,0.11,0.11,0.09,0.11,0.09,0.15,0.08,0.09,0.09,0.1,0.07,0.11,0.12,0,-0.17,0.08,3250,3250,1290,10.24,3.86,5.51,12.29,5.17,12.29,13.56},0},
{{0,0.2,0.13,0.07,0.09,0.14,0.1,0.08,0.11,0.1,0.13,0.09,0.13,0.09,0.09,0.11,0.12,0.08,0.07,0.11,0.13,0.08,0.12,0.07,0.09,0.12,0.1,0.07,0.13,0.1,0,-0.52,0.02,968.75,725,700,10.25,3.83,5.42,12.28,5.08,12.28,13.63},0},
{{0,0.2,0.11,0.1,0.11,0.12,0.08,0.11,0.1,0.1,0.15,0.07,0.11,0.12,0.09,0.08,0.13,0.08,0.08,0.12,0.13,0.15,0.1,0.08,0.11,0.08,0.09,0.11,0.1,0.09,0,-0.47,-0.4,1633.33,3175,3233.33,10.26,4.07,5.48,12.28,5.42,12.28,13.63},0},
{{0,0.22,0.1,0.08,0.12,0.11,0.1,0.1,0.1,0.1,0.09,0.12,0.1,0.12,0.14,0.07,0.08,0.11,0.12,0.07,0.13,0.06,0.1,0.15,0.09,0.07,0.11,0.09,0.12,0.11,0,-0.33,0.11,1475,1425,2550,10.23,3.64,5.59,12.3,4.9,12.3,13.62},0},
{{0,0.17,0.11,0.12,0.1,0.09,0.12,0.11,0.1,0.1,0.11,0.12,0.11,0.12,0.07,0.13,0.08,0.12,0.08,0.09,0.13,0.09,0.11,0.11,0.08,0.11,0.07,0.1,0.12,0.1,0,-0.54,-0.02,3925,1775,1075,9.87,3.62,5.53,11.88,4.85,11.88,13.13},0},
{{0,0.16,0.11,0.13,0.11,0.11,0.09,0.09,0.1,0.11,0.07,0.11,0.12,0.07,0.11,0.09,0.11,0.12,0.13,0.08,0.08,0.09,0.09,0.1,0.15,0.08,0.06,0.14,0.1,0.13,0,-0.02,0.84,2200,2166.67,3450,10.09,3.6,5.38,12.09,4.76,12.09,13.16},0},
{{0,0.18,0.11,0.1,0.1,0.13,0.1,0.11,0.1,0.08,0.1,0.12,0.11,0.08,0.12,0.12,0.1,0.07,0.12,0.08,0.09,0.11,0.08,0.14,0.1,0.09,0.12,0.08,0.13,0.1,0,-0.4,0.18,2500,1937.5,2900,9.95,3.7,5.22,11.99,4.96,11.99,13.05},0},
{{0,0.22,0.11,0.09,0.14,0.09,0.08,0.11,0.08,0.1,0.09,0.14,0.1,0.06,0.11,0.12,0.09,0.07,0.16,0.08,0.09,0.09,0.06,0.16,0.1,0.07,0.1,0.11,0.12,0.12,0,-0.2,0.71,4275,2400,2150,10.69,3.72,5.48,12.59,4.83,12.59,13.81},0},
{{0,0.2,0.09,0.11,0.09,0.13,0.1,0.09,0.11,0.11,0.1,0.13,0.13,0.07,0.09,0.11,0.1,0.11,0.08,0.11,0.12,0.11,0.12,0.08,0.1,0.08,0.08,0.12,0.1,0.13,0,-0.33,0.08,3475,2800,1050,9.97,3.86,5.75,12.06,5.06,12.06,13.51},0},
{{0,0.2,0.12,0.12,0.1,0.08,0.12,0.11,0.1,0.08,0.05,0.18,0.11,0.11,0.1,0.07,0.11,0.1,0.1,0.08,0.1,0.06,0.13,0.1,0.08,0.14,0.1,0.1,0.12,0.08,0,-0.33,0.3,2416.67,1425,1450,10.42,3.41,5.06,12.44,4.35,12.44,13.36},0},
{{0,0.21,0.1,0.1,0.07,0.15,0.1,0.1,0.11,0.09,0.09,0.11,0.11,0.11,0.11,0.1,0.1,0.11,0.09,0.1,0.1,0.08,0.1,0.11,0.09,0.13,0.11,0.1,0.1,0.1,0,-0.2,0.2,3175,2133.33,1420,10.09,3.76,5.07,12.15,5.03,12.15,13.17},0},
{{0,0.22,0.11,0.09,0.1,0.09,0.09,0.1,0.11,0.11,0.12,0.07,0.11,0.12,0.12,0.1,0.08,0.11,0.08,0.11,0.09,0.12,0.13,0.09,0.1,0.07,0.11,0.12,0.09,0.11,0,-0.27,0.3,700,725,2500,10.13,3.77,5.4,12.24,5.17,12.24,13.39},0},
{{0,0.22,0.1,0.1,0.08,0.09,0.1,0.12,0.1,0.12,0.12,0.08,0.12,0.14,0.11,0.15,0.1,0.03,0.09,0.1,0.09,0.13,0.12,0.09,0.09,0.08,0.12,0.12,0.07,0.11,0,-0.46,0.1,3083.33,2500,2433.33,10.03,3.71,5.36,12.22,5.3,12.22,13.35},0},
{{0,0.21,0.08,0.1,0.09,0.09,0.15,0.11,0.08,0.11,0.14,0.07,0.12,0.11,0.1,0.1,0.11,0.1,0.08,0.09,0.1,0.11,0.09,0.12,0.09,0.14,0.11,0.06,0.11,0.1,0,-0.56,-0.18,2416.67,1075,2166.67,9.87,4,5.1,11.96,5.53,11.96,13.15},0},
{{0.11,0.13,0.2,0.17,0.15,0.09,0.09,0.06,0.01,0.01,0.07,0.07,0.04,0.12,0.08,0.08,0.1,0.16,0.18,0.13,0.06,0.07,0.09,0.08,0.09,0.13,0.13,0.09,0.12,0.16,0,8,1.11,925,1142.86,2583.33,4.82,3.24,2.65,5.67,4.06,5.67,10.3},2},
{{0.12,0.09,0.13,0.17,0.11,0.09,0.09,0.12,0.05,0.05,0.08,0.07,0.08,0.1,0.08,0.07,0.15,0.15,0.15,0.09,0.08,0.06,0.07,0.13,0.15,0.12,0.15,0.11,0.07,0.08,0,7.51,0.43,1433.33,1540,3850,5.82,3.08,2.21,6.86,3.97,6.86,10.29},2},
{{0.14,0.07,0.11,0.15,0.17,0.1,0.04,0.16,0.06,0.02,0.07,0.11,0.07,0.11,0.05,0.1,0.15,0.14,0.13,0.1,0.09,0.08,0.12,0.12,0.11,0.16,0.07,0.09,0.1,0.09,0,7.43,0.53,850,911.11,2516.67,5.77,3.25,2.62,6.76,4.16,6.76,10.29},2},
{{0.14,0.08,0.13,0.15,0.09,0.08,0.14,0.1,0.1,0.03,0.09,0.09,0.09,0.06,0.09,0.09,0.14,0.13,0.11,0.14,0.09,0.08,0.05,0.15,0.11,0.15,0.15,0.06,0.06,0.12,0,7.5,0.54,1600,1600,2466.67,5.95,3.38,2.45,7,4.3,7,10.45},2},
{{0.07,0.13,0.1,0.13,0.09,0.14,0.13,0.14,0.07,0.02,0.07,0.1,0.08,0.08,0.1,0.13,0.09,0.16,0.13,0.09,0.07,0.09,0.14,0.09,0.1,0.12,0.11,0.13,0.1,0.08,0,7.16,0.42,800,1075,1875,6.12,2.93,2.35,7.04,3.72,7.04,10.22},2},
{{0.09,0.16,0.11,0.1,0.09,0.14,0.07,0.16,0.07,0.04,0.06,0.12,0.11,0.06,0.11,0.09,0.13,0.1,0.11,0.13,0.08,0.16,0.12,0.09,0.11,0.08,0.08,0.13,0.09,0.09,0,7.18,0.38,2050,1533.33,1912.5,5.99,3.2,2.68,7.07,4.05,7.07,10.28},2},
{{0.07,0.13,0.09,0.11,0.11,0.16,0.07,0.18,0.07,0.04,0.06,0.12,0.06,0.11,0.11,0.1,0.11,0.11,0.13,0.11,0.08,0.18,0.11,0.1,0.09,0.05,0.08,0.11,0.14,0.09,0,7.3,0.41,1566.67,1300,3775,6.38,3.13,2.81,7.33,3.95,7.33,10.56},2},
{{0.1,0.11,0.11,0.12,0.08,0.09,0.11,0.13,0.14,0.03,0.12,0.08,0.08,0.1,0.05,0.1,0.12,0.12,0.13,0.11,0.14,0.13,0.11,0.07,0.11,0.09,0.08,0.08,0.09,0.12,0,7.18,0.21,1350,2916.67,2516.67,6.33,3.37,2.87,7.4,4.24,7.4,10.65},2},
{{0.05,0.15,0.09,0.09,0.14,0.12,0.1,0.09,0.13,0.07,0.1,0.06,0.1,0.06,0.13,0.11,0.1,0.11,0.14,0.1,0.12,0.13,0.11,0.08,0.07,0.09,0.12,0.08,0.12,0.1,0,7.22,0.35,3475,1516.67,1850,6.55,3.17,2.77,7.56,4.04,7.56,10.68},2},
{{0.06,0.14,0.15,0.08,0.12,0.13,0.07,0.11,0.09,0.08,0.1,0.11,0.12,0.07,0.12,0.08,0.12,0.12,0.09,0.11,0.09,0.14,0.1,0.14,0.04,0.09,0.14,0.09,0.06,0.13,0,6.83,0.57,1085.71,1062.5,1600,6.44,3.19,2.81,7.58,4.02,7.58,10.35},2},
{{0.05,0.16,0.12,0.08,0.17,0.05,0.12,0.08,0.12,0.07,0.09,0.1,0.09,0.1,0.08,0.11,0.19,0.08,0.08,0.11,0.11,0.11,0.1,0.09,0.06,0.09,0.15,0.13,0.07,0.13,0,6.9,0.64,1700,1441.67,1950,6.48,2.99,2.7,7.55,3.84,7.55,10.36},2},
{{0.07,0.15,0.12,0.09,0.11,0.1,0.07,0.1,0.1,0.12,0.16,0.08,0.11,0.08,0.09,0.08,0.1,0.11,0.07,0.14,0.12,0.07,0.13,0.11,0.11,0.12,0.08,0.09,0.06,0.13,0,6.82,0.4,2625,1520,1933.33,6.58,3.67,2.74,7.84,4.63,7.84,10.49},2},
{{0.05,0.14,0.08,0.11,0.1,0.1,0.1,0.14,0.12,0.09,0.1,0.07,0.1,0.09,0.15,0.12,0.1,0.14,0.06,0.1,0.06,0.08,0.11,0.12,0.13,0.15,0.1,0.09,0.08,0.11,0,6.75,0.6,1412.5,1883.33,1883.33,6.84,2.88,2.5,7.89,3.8,7.89,10.39},2},
{{0.08,0.16,0.07,0.08,0.1,0.12,0.1,0.1,0.13,0.08,0.1,0.1,0.1,0.09,0.14,0.13,0.06,0.11,0.07,0.13,0.08,0.12,0.09,0.16,0.08,0.13,0.09,0.09,0.13,0.06,0,6.82,0.46,3775,1258.33,2516.67,6.59,3.13,2.58,7.76,3.99,7.76,10.35},2},
{{0.09,0.11,0.1,0.11,0.1,0.1,0.09,0.09,0.14,0.08,0.08,0.1,0.1,0.08,0.16,0.11,0.09,0.12,0.08,0.1,0.09,0.05,0.15,0.11,0.09,0.12,0.13,0.1,0.1,0.1,0,6.74,0.53,4125,1710,3800,6.66,2.96,2.46,7.79,3.83,7.79,10.34},2},
{{0.15,0.05,0.09,0.07,0.11,0.13,0.08,0.12,0.12,0.1,0.12,0.12,0.07,0.07,0.11,0.12,0.14,0.08,0.08,0.12,0.09,0.08,0.07,0.15,0.12,0.12,0.09,0.1,0.12,0.08,0,6.78,0.38,1540,1150,3325,6.84,3.21,2.42,7.97,4.12,7.97,10.49},2},
{{0.12,0.08,0.08,0.1,0.09,0.09,0.15,0.1,0.08,0.13,0.08,0.09,0.12,0.1,0.15,0.09,0.08,0.11,0.07,0.13,0.07,0.1,0.11,0.09,0.13,0.09,0.11,0.12,0.13,0.08,0,6.89,0.63,1762.5,1085.71,1330,6.94,3.16,2.63,8.1,4.08,8.1,10.69},2},
{{0.14,0.06,0.12,0.1,0.09,0.07,0.07,0.11,0.13,0.13,0.13,0.07,0.1,0.09,0.1,0.12,0.08,0.12,0.09,0.13,0.09,0.08,0.09,0.14,0.11,0.14,0.06,0.07,0.11,0.14,0,6.98,0.56,2362.5,1710,3300,6.93,3.47,2.74,8.12,4.43,8.12,10.9},2},
{{0.1,0.08,0.12,0.09,0.09,0.07,0.13,0.1,0.09,0.15,0.09,0.1,0.11,0.13,0.1,0.1,0.11,0.1,0.08,0.09,0.14,0.1,0.09,0.09,0.07,0.07,0.13,0.13,0.14,0.06,0,6.65,0.45,1037.5,1170,1625,7.06,3.04,2.76,8.2,3.95,8.2,10.64},2},
{{0.09,0.12,0.08,0.1,0.08,0.11,0.12,0.13,0.09,0.11,0.09,0.11,0.12,0.1,0.11,0.12,0.09,0.06,0.11,0.11,0.11,0.14,0.12,0.09,0.08,0.06,0.1,0.1,0.13,0.1,0,6.69,0.42,850,1510,3775,6.81,3.13,2.89,7.95,3.95,7.95,10.55},2},
{{0.08,0.1,0.13,0.1,0.1,0.11,0.09,0.07,0.1,0.15,0.12,0.09,0.09,0.16,0.09,0.12,0.09,0.1,0.08,0.09,0.12,0.14,0.1,0.08,0.1,0.05,0.11,0.11,0.1,0.11,0,6.5,0.33,1550,487.5,2375,6.97,3.08,2.8,8.15,4.02,8.15,10.53},2},
{{0.15,0.06,0.09,0.1,0.09,0.09,0.09,0.1,0.14,0.11,0.12,0.08,0.1,0.1,0.14,0.12,0.08,0.07,0.11,0.11,0.11,0.04,0.16,0.1,0.08,0.14,0.07,0.1,0.11,0.12,0,6.68,0.53,956.25,1050,1425,6.87,3.18,2.73,8.07,4.08,8.07,10.65},2},
{{0.14,0.06,0.08,0.09,0.12,0.06,0.12,0.08,0.1,0.17,0.14,0.1,0.15,0.07,0.11,0.09,0.09,0.07,0.12,0.09,0.09,0.09,0.1,0.09,0.13,0.11,0.09,0.14,0.07,0.1,0,6.48,0.43,1200,1175,1233.33,7.11,3.32,2.42,8.34,4.16,8.34,10.54},2},
{{0.13,0.06,0.07,0.09,0.09,0.1,0.14,0.09,0.12,0.14,0.09,0.11,0.11,0.12,0.13,0.08,0.12,0.09,0.09,0.09,0.09,0.12,0.09,0.09,0.12,0.12,0.08,0.11,0.12,0.09,0,6.56,0.57,1220,1110,1216.67,7.1,2.98,2.75,8.24,3.8,8.24,10.63},2},
{{0.13,0.09,0.06,0.08,0.11,0.09,0.11,0.06,0.15,0.15,0.1,0.11,0.12,0.1,0.12,0.1,0.11,0.07,0.09,0.1,0.06,0.12,0.1,0.09,0.13,0.14,0.08,0.08,0.11,0.11,0,6.52,0.69,1091.67,1412.5,2183.33,7.18,3.07,2.73,8.44,3.91,8.44,10.66},2},
{{0.13,0.08,0.05,0.05,0.11,0.12,0.13,0.07,0.13,0.15,0.06,0.17,0.13,0.11,0.1,0.11,0.12,0.08,0.08,0.07,0.09,0.05,0.13,0.09,0.14,0.1,0.12,0.09,0.12,0.1,0,6.24,0.66,938.89,2137.5,4275,7.19,2.87,2.62,8.41,3.66,8.41,10.42},2},
{{0.1,0.1,0.12,0.09,0.05,0.12,0.11,0.05,0.12,0.17,0.14,0.11,0.11,0.14,0.1,0.09,0.06,0.1,0.08,0.09,0.17,0.14,0.05,0.09,0.1,0.06,0.1,0.09,0.13,0.1,0,6.17,0.17,900,1325,3825,7.19,3.13,2.88,8.44,3.95,8.44,10.61},2},
{{0.08,0.11,0.09,0.04,0.1,0.13,0.11,0.09,0.08,0.21,0.1,0.13,0.15,0.12,0.06,0.07,0.09,0.12,0.12,0.06,0.16,0.11,0.07,0.1,0.07,0.08,0.09,0.12,0.1,0.11,0,6.17,0.3,1292.86,2250,3350,7.61,3.17,2.93,8.76,3.81,8.76,10.9},2},
{{0.1,0.09,0.09,0.07,0.08,0.11,0.1,0.09,0.11,0.18,0.12,0.16,0.11,0.14,0.06,0.08,0.09,0.07,0.1,0.09,0.14,0.11,0.1,0.11,0.08,0.04,0.11,0.11,0.1,0.11,0,6.14,0.51,1325,1210,1450,7.38,3.34,3.1,8.59,4.12,8.59,10.79},2},
{{0.1,0.08,0.06,0.08,0.09,0.1,0.13,0.1,0.1,0.17,0.14,0.14,0.14,0.14,0.12,0.1,0.03,0.07,0.09,0.07,0.12,0.11,0.11,0.09,0.11,0.05,0.05,0.15,0.13,0.1,0,5.72,0.41,2200,2866.67,2216.67,7.66,2.98,2.8,8.83,3.8,8.83,10.59},2},
{{0.03,0.04,0.07,0.04,0.04,0.05,0.05,0.07,0.07,0.09,0.06,0.07,0.1,0.08,0.05,0.04,0.03,0.06,0.05,0.04,0.05,0.07,0.06,0.03,0.04,0.05,0.06,0.09,0.05,0.07,0,3.18,0.34,737.5,810,950,4.22,1.85,1.45,8.91,4.45,8.91,5.8},2},
{{0.05,0.06,0.1,0.08,0.12,0.11,0.14,0.13,0.14,0.02,0.11,0.09,0.08,0.08,0.05,0.08,0.09,0.12,0.13,0,0.07,0.11,0.1,0.09,0.12,0.13,0.09,0.05,0.15,0,0,7.34,2.42,1900,772.73,2125,6.21,5.62,3.34,7.75,6.68,7.75,11.5},5},
{{0.07,0.11,0.08,0.11,0.09,0.14,0.11,0.12,0.1,0.01,0.1,0.09,0.08,0.07,0.12,0.11,0.13,0.08,0.13,0,0.09,0.06,0.16,0.13,0.12,0.06,0.12,0.13,0.06,0,0,6.49,2.06,2325,978.57,3050,7.21,4.58,3.27,8.87,5.72,8.87,11.33},5},
{{0.12,0.1,0.16,0.1,0.08,0.09,0.1,0.08,0.09,0.03,0.1,0.07,0.12,0.08,0.11,0.12,0.12,0.11,0.09,0,0.1,0.16,0.12,0.08,0.11,0.08,0.13,0.08,0.08,0,0,5.95,1.63,2275,980,2416.67,8.34,4.24,3.42,10.03,5.36,10.03,11.75},5},
{{0.13,0.12,0.09,0.1,0.12,0.08,0.08,0.08,0.09,0.01,0.11,0.11,0.13,0.17,0.11,0.11,0.05,0.1,0.09,0,0.13,0.1,0.07,0.12,0.11,0.09,0.09,0.13,0.09,0,0,4.64,1.92,1290,3825,3150,8.32,3.81,3.35,10.06,4.83,10.06,11.12},5},
{{0.09,0.07,0.04,0.08,0.06,0.03,0.05,0.06,0.04,0.01,0.04,0.11,0.07,0.07,0.08,0.04,0.08,0.06,0.02,0,0.06,0.05,0.02,0.04,0.03,0.11,0.06,0.08,0.09,0,0,2.12,1.35,1125,700,1300,4.95,1.83,1.69,10.7,4.15,10.7,6.18},5},
{{0.19,0.13,0.19,0.16,0.11,0.09,0.07,0.06,0.01,0.02,0.09,0.07,0.13,0.11,0.09,0.08,0.09,0.12,0.09,0.14,0.09,0.08,0.11,0.07,0.12,0.09,0.11,0.11,0.11,0.13,0,8.18,2.29,600,487.5,2200,2.65,6.09,3.25,3.69,7.06,3.69,10.39},5},
{{0.12,0.11,0.08,0.12,0.12,0.11,0.08,0.09,0.1,0.09,0.11,0.1,0.08,0.12,0.1,0.13,0.1,0.1,0.09,0.09,0.11,0.13,0.11,0.09,0.08,0.13,0.09,0.08,0.09,0.11,0,7.06,1.48,2175,496.67,2475,4.61,5.54,3.05,6.42,6.7,6.42,10.4},5},
{{0.05,0.07,0.05,0.09,0.08,0.08,0.12,0.15,0.19,0.13,0.08,0.12,0.1,0.1,0.13,0.11,0.13,0.12,0.06,0.07,0.12,0.1,0.08,0.11,0.11,0.08,0.09,0.11,0.12,0.1,0,6.71,1.64,1285.71,779.17,3625,6.36,5,2.97,8.05,6.1,8.05,10.82},5},
{{0.06,0.08,0.1,0.05,0.08,0.13,0.14,0.09,0.11,0.17,0.12,0.14,0.07,0.07,0.11,0.09,0.11,0.09,0.13,0.09,0.1,0.1,0.09,0.12,0.1,0.1,0.1,0.1,0.11,0.08,0,7.1,1.5,1150,607.14,1775,6.12,5.91,2.91,8.03,6.97,8.03,11.2},5},
{{0.01,0.03,0.03,0.03,0.04,0.03,0.04,0.05,0.03,0.03,0.03,0.03,0.06,0.03,0.03,0.02,0.02,0.01,0.07,0.02,0.02,0.01,0.05,0.05,0.04,0.05,0.04,0.04,0.01,0.01,0,2.12,0.24,350,466.67,483.33,1.37,1.9,0.54,6.47,8.84,6.47,2.88},5},
{{0.36,0.22,0.12,0.11,0.09,0.07,0.02,0.01,0.01,0.01,0.06,0.07,0.1,0.1,0.12,0.11,0.13,0.14,0.1,0.1,0.09,0.13,0.13,0.2,0.09,0.08,0.1,0.06,0.08,0.06,0,10.09,-0.96,675,1416.67,350,1.59,2.1,1.52,2.01,2.65,2.01,10.5},2},
{{0.15,0.18,0.15,0.12,0.16,0.12,0.09,0.03,0.02,0.01,0.06,0.13,0.08,0.09,0.14,0.13,0.12,0.09,0.09,0.11,0.12,0.08,0.14,0.15,0.14,0.09,0.11,0.07,0.11,0.01,0,9.96,-0.95,1370,1022.22,1225,1.75,2.17,1.46,2.08,2.76,2.08,10.36},2},
{{0.05,0.12,0.12,0.19,0.11,0.1,0.19,0.09,0.06,0.01,0.04,0.12,0.13,0.09,0.1,0.14,0.12,0.12,0.07,0.09,0.11,0.1,0.15,0.16,0.12,0.14,0.08,0.1,0.07,0,0,9.84,-1.02,2150,1925,1650,2.18,2.09,1.37,2.51,2.61,2.51,10.33},2},
{{0.03,0.06,0.11,0.08,0.15,0.15,0.14,0.12,0.12,0.06,0.02,0.12,0.11,0.11,0.18,0.14,0.1,0.1,0.11,0.03,0.02,0.07,0.15,0.15,0.1,0.17,0.11,0.12,0.12,0.02,0,9.64,-0.38,2800,3000,2875,2.72,1.73,1.15,3.04,2.24,3.04,10.19},2},
{{0.03,0.04,0.11,0.13,0.13,0.16,0.15,0.13,0.09,0.05,0.04,0.12,0.13,0.12,0.13,0.1,0.14,0.1,0.08,0.07,0.06,0.06,0.12,0.13,0.15,0.15,0.15,0.08,0.09,0.03,0,9.7,-0.53,1780,1050,1437.5,2.64,1.96,1.21,2.94,2.43,2.94,10.26},2},
{{0.06,0.08,0.13,0.15,0.17,0.15,0.09,0.09,0.06,0.05,0.03,0.12,0.13,0.11,0.13,0.15,0.08,0.13,0.08,0.07,0.05,0.11,0.14,0.12,0.15,0.1,0.14,0.1,0.1,0.03,0,9.73,-0.6,1625,1300,4225,2.28,1.96,1.3,2.63,2.47,2.63,10.22},2},
{{0.03,0.05,0.07,0.1,0.12,0.16,0.18,0.14,0.1,0.07,0.06,0.12,0.13,0.11,0.11,0.08,0.14,0.11,0.1,0.06,0.04,0.1,0.09,0.15,0.15,0.11,0.11,0.07,0.16,0.04,0,9.67,-0.42,2400,1321.43,4675,2.91,2.14,1.32,3.19,2.62,3.19,10.32},2},
{{0.04,0.07,0.07,0.17,0.11,0.18,0.07,0.08,0.14,0.11,0.05,0.15,0.11,0.11,0.14,0.09,0.08,0.14,0.1,0.06,0.09,0.08,0.13,0.12,0.14,0.09,0.11,0.11,0.1,0.05,0,9.63,-0.66,2766.67,1525,625,2.77,2.11,1.48,3.15,2.58,3.15,10.3},2},
{{0.06,0.08,0.08,0.14,0.07,0.1,0.07,0.11,0.15,0.17,0.1,0.09,0.12,0.09,0.11,0.12,0.1,0.08,0.15,0.06,0.12,0.1,0.12,0.14,0.1,0.14,0.06,0.09,0.1,0.06,0,9.71,-0.88,1587.5,1064.29,2166.67,3,2.23,1.66,3.48,2.76,3.48,10.54},2},
{{0.03,0.09,0.08,0.07,0.13,0.11,0.12,0.09,0.15,0.15,0.11,0.12,0.15,0.08,0.08,0.08,0.1,0.12,0.07,0.12,0.09,0.1,0.1,0.11,0.13,0.15,0.08,0.08,0.08,0.1,0,9.62,-0.58,1025,1030,1287.5,3.03,2.6,1.6,3.47,3.16,3.47,10.43},2},
{{0.05,0.07,0.07,0.13,0.09,0.08,0.09,0.13,0.18,0.13,0.09,0.11,0.1,0.13,0.12,0.1,0.09,0.12,0.11,0.06,0.1,0.1,0.1,0.07,0.13,0.16,0.12,0.1,0.06,0.09,0,9.57,-0.56,2433.33,987.5,2750,2.97,2.16,1.56,3.39,2.66,3.39,10.33},2},
{{0.08,0.06,0.08,0.08,0.12,0.13,0.09,0.11,0.13,0.14,0.13,0.05,0.14,0.13,0.09,0.09,0.11,0.11,0.09,0.09,0.12,0.12,0.09,0.08,0.09,0.12,0.13,0.09,0.11,0.09,0,9.66,-0.63,1200,1430,2025,3,2.39,1.76,3.45,2.96,3.45,10.49},2},
{{0.1,0.1,0.06,0.06,0.07,0.11,0.1,0.11,0.12,0.21,0.13,0.09,0.14,0.09,0.07,0.09,0.09,0.1,0.12,0.11,0.13,0.14,0.04,0.13,0.1,0.1,0.1,0.07,0.1,0.11,0,9.68,-0.72,2050,4600,1683.33,3.13,2.6,1.81,3.61,3.14,3.61,10.6},2},
{{0.07,0.08,0.08,0.06,0.11,0.08,0.12,0.11,0.12,0.19,0.14,0.08,0.12,0.1,0.08,0.1,0.1,0.08,0.13,0.1,0.11,0.11,0.11,0.09,0.11,0.08,0.08,0.12,0.11,0.11,0,9.6,-0.52,2316.67,1337.5,1700,3.08,2.6,1.78,3.54,3.21,3.54,10.48},2},
{{0.09,0.09,0.08,0.11,0.1,0.12,0.08,0.07,0.09,0.19,0.15,0.09,0.08,0.09,0.09,0.1,0.12,0.07,0.07,0.16,0.12,0.13,0.08,0.09,0.08,0.1,0.08,0.1,0.11,0.13,0,9.73,-0.49,1750,1200,2475,2.98,2.84,1.94,3.59,3.56,3.59,10.65},2}
# 105 "main.c" 2
      };
 Point *known_points = known_points1;

 Point new_points1[1082] = {
# 1 "test.dat" 1
{{0,0,0.03,0.38,0.3,0.09,0.12,0.05,0,0.05,0.15,0,0.53,0.14,0.12,0.04,0.02,0,0.01,0.02,0.12,0,0,0.35,0,0,0.42,0,0,0.11,0,-1.68,9.48,0,0,313.33,0.86,0.07,0.03,0.87,0.09,0.87,9.67},3},
{{0,0,0,0.01,0.03,0.2,0.18,0.24,0.15,0.21,0.01,0,0.01,0.12,0.26,0.26,0.17,0,0.09,0.09,0.02,0,0,0.23,0,0,0.47,0,0,0.28,0,-1.53,9.5,0,0,268.57,0.7,0.05,0.02,0.71,0.07,0.71,9.65},3},
{{0,0,0.02,0.03,0.09,0.14,0.24,0.37,0.06,0.07,0,0,0.02,0.13,0.13,0.26,0.24,0,0.13,0.1,0.04,0,0,0.21,0,0,0.35,0,0,0.41,0,-1.52,9.5,0,0,301.56,0.74,0.05,0.03,0.75,0.07,0.75,9.65},3},
{{0,0,0,0,0.05,0.14,0.41,0.39,0.01,0.01,0,0,0,0,0.01,0.2,0.53,0,0.25,0.02,0,0,0,0.1,0,0,0.43,0,0,0.47,0,-1.5,9.51,0,0,296.55,0.75,0.02,0.02,0.75,0.03,0.75,9.66},3},
{{0,0,0,0,0.03,0.32,0.48,0.16,0.01,0.02,0,0,0,0,0.01,0.02,0.33,0,0.53,0.13,0.01,0,0,0.08,0,0,0.45,0,0,0.47,0,-1.47,9.51,0,0,350,0.77,0.02,0.03,0.77,0.03,0.77,9.65},3},
{{0.01,0.05,0.48,0.24,0.11,0.06,0.03,0.01,0.03,0.01,0.01,0,0.01,0.03,0.05,0.15,0.35,0,0.15,0.26,0.03,0,0,0.14,0,0,0.43,0,0,0.4,0,-1.48,9.51,0,0,272.22,0.96,0.06,0.03,0.97,0.09,0.97,9.67},3},
{{0.06,0.75,0.18,0.02,0,0,0,0,0,0,0,0,0,0.01,0.03,0.05,0.15,0,0.53,0.24,0.02,0,0,0.19,0,0,0.4,0,0,0.4,0,-1.46,9.51,0,0,213.95,1.21,0.03,0.03,1.22,0.05,1.22,9.69},3},
{{0.73,0.22,0.03,0.01,0.01,0.01,0,0.01,0,0,0.01,0,0.01,0.02,0.04,0.06,0.27,0,0.39,0.21,0.05,0,0,0.23,0,0,0.43,0,0,0.29,0,-1.47,9.5,0,0,286.36,1.34,0.05,0.03,1.35,0.09,1.35,9.71},3},
{{0.22,0.15,0.23,0.26,0.1,0.02,0.01,0.02,0.01,0.01,0.01,0,0.01,0.03,0.08,0.06,0.13,0,0.22,0.48,0.03,0,0,0.09,0,0,0.26,0,0,0.62,0,-1.44,9.52,0,0,296.77,1.09,0.07,0.03,1.12,0.09,1.12,9.7},3},
{{0.32,0.13,0.04,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0.03,0.4,0.05,0,0,0.02,0,0,0.15,0,0,0.27,0,-0.59,4.65,0,0,252.78,0.7,0.33,2.37,1.49,0.71,1.49,4.75},3},
{{0,0,0,0,0,0,0.01,0,0.12,0,0.01,0,0.01,0,0.02,0,0.02,0.04,0.21,0.37,0.31,0.25,0,0.25,0,0,0,0.15,0,0,0,-0.01,9.62,610,800,210.87,1.32,0.08,0.06,1.36,0.19,1.36,9.71},3},
{{0.13,0.01,0,0.01,0,0.03,0.07,0.12,0.4,0,0,0,0.01,0,0.01,0,0.04,0.24,0.36,0.24,0.04,0.21,0,0.36,0,0,0,0.27,0,0,0,-0.06,9.68,681.25,200,270,1.01,0.05,0.05,1.03,0.08,1.03,9.73},3},
{{0,0,0,0.01,0,0.03,0.16,0.33,0.48,0,0,0,0.01,0,0.01,0,0.06,0.3,0.45,0.17,0.01,0.17,0,0.43,0,0,0,0.35,0,0,0,-0.08,9.67,626.67,200,277.14,0.97,0.03,0.03,0.98,0.04,0.98,9.72},3},
{{0.01,0.02,0,0.07,0,0.22,0.33,0.25,0.12,0,0,0,0.02,0,0.1,0,0.37,0.44,0.08,0.01,0.02,0.02,0,0.29,0,0,0,0.48,0,0,0,-0.13,9.69,576.67,200,264.86,0.92,0.03,0.02,0.92,0.04,0.92,9.73},3},
{{0.01,0.04,0,0.16,0,0.26,0.25,0.22,0.07,0,0,0,0.05,0,0.21,0,0.41,0.26,0.07,0.01,0.01,0.03,0,0.23,0,0,0,0.5,0,0,0,-0.15,9.69,1975,200,303.23,0.9,0.03,0.02,0.91,0.04,0.91,9.74},3},
{{0.02,0.05,0,0.33,0,0.37,0.2,0.04,0.01,0,0.01,0,0.24,0,0.44,0,0.29,0.04,0,0,0.02,0.03,0,0.17,0,0,0,0.57,0,0,0,-0.19,9.7,368,200,311.29,0.87,0.03,0.02,0.88,0.04,0.88,9.74},3},
{{0.14,0.24,0,0.25,0,0.16,0.07,0.03,0.07,0,0.06,0,0.13,0,0.44,0,0.23,0.05,0.03,0.02,0.06,0.04,0,0.1,0,0,0,0.46,0,0,0,-0.17,9.7,1250,1725,254.05,0.86,0.06,0.04,0.87,0.12,0.87,9.74},3},
{{0.15,0.2,0,0.39,0,0.21,0.05,0.01,0.01,0,0.14,0,0.44,0,0.38,0,0.04,0,0,0,0,0.01,0,0.16,0,0,0,0.46,0,0,0,-0.22,9.7,1162.5,1725,276.47,0.83,0.03,0.02,0.84,0.04,0.84,9.74},3},
{{0.04,0.15,0,0.33,0,0.34,0.11,0.03,0.01,0,0.08,0,0.45,0,0.38,0,0.09,0.01,0,0,0,0.05,0,0.3,0,0,0,0.45,0,0,0,-0.21,9.69,526.92,1725,360,0.86,0.03,0.02,0.86,0.04,0.86,9.73},3},
{{0.09,0.2,0,0.35,0,0.29,0.05,0.03,0,0,0.16,0,0.55,0,0.29,0,0.01,0,0,0,0.01,0,0,0.23,0,0,0,0.43,0,0,0,-0.23,9.7,283.87,1725,223.26,0.84,0.02,0.02,0.85,0.03,0.85,9.74},3},
{{0.24,0.03,0,0.03,0,0,0.01,0,0,0,0.23,0,0.06,0,0.02,0,0.01,0,0,0,0.01,0.01,0,0.05,0,0,0,0.12,0,0,0,-0.08,2.91,725,1725,219.23,0.22,0.06,2.04,0.76,0.19,0.76,2.92},3},
{{0.01,0.01,0.26,0,0.7,0.03,0,0,0,0,0,0,0,0,0.07,0.2,0.74,0,0,0,0,0.01,0,0.1,0,0.39,0,0.4,0.09,0.02,0,3.06,8.87,1750,311.67,408.33,1.57,0.04,0.03,1.58,0.21,1.58,9.51},3},
{{0.28,0.21,0.13,0,0.39,0,0,0,0,0,0,0,0,0,0.01,0.07,0.35,0.08,0.23,0.27,0.02,0.05,0,0.25,0,0.47,0,0.2,0.02,0.01,0,3.17,8.84,271.05,300,376.92,1.5,0.08,0.03,1.51,0.09,1.51,9.51},3},
{{0.43,0.5,0.08,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0.01,0.09,0.34,0.56,0.03,0.22,0,0.48,0,0.24,0,0.03,0,0.01,0,3.24,8.81,418.42,386,286.36,1.44,0.03,0.02,1.44,0.04,1.44,9.5},3},
{{0.06,0.06,0.01,0,0.01,0.05,0.03,0.11,0.68,0.01,0,0.09,0.22,0.49,0.04,0.03,0.03,0.02,0.07,0.04,0.02,0.03,0,0.09,0,0.13,0,0.28,0.34,0.13,0,2.63,8.89,296.15,200,385.42,2.11,0.19,0.04,2.13,0.25,2.13,9.51},3},
{{0,0,0,0,0,0.02,0.32,0.27,0.4,0.01,0.02,0.2,0.4,0.25,0.14,0,0,0,0,0,0,0,0,0.03,0,0.03,0,0.13,0.39,0.42,0,2.51,8.93,336.21,1291.67,350,2.18,0.06,0.03,2.19,0.09,2.19,9.53},3},
{{0,0,0,0,0,0.38,0.44,0.07,0.12,0.01,0.03,0.12,0.09,0.22,0.52,0.03,0,0,0,0,0.01,0.05,0,0.04,0,0.08,0,0.12,0.24,0.46,0,2.61,8.92,231.82,220,246.05,2.08,0.11,0.05,2.09,0.15,2.09,9.52},3},
{{0,0.01,0.03,0,0.1,0.08,0.03,0,0.03,0.74,0.68,0.09,0.01,0.02,0.05,0.03,0.03,0,0.04,0.05,0.08,0.13,0,0.29,0,0.23,0,0.14,0.05,0.08,0,2.44,8.83,3000,362.5,252.7,2.57,0.28,0.05,2.61,0.36,2.61,9.54},3},
{{0,0.01,0.11,0,0.53,0.03,0.03,0.01,0.01,0.04,0.04,0.02,0,0,0.05,0.02,0.02,0.04,0.23,0.35,0.04,0.24,0,0.29,0,0.11,0,0.04,0.04,0.01,0,2.39,6.7,425,256.82,228.13,1.28,0.59,1.61,1.7,0.8,1.7,7.23},3},
{{0.1,0.09,0,0.11,0,0.13,0,0.24,0.2,0.14,0.08,0,0.17,0,0,0.36,0,0,0.3,0.1,0.03,0.06,0.04,0.05,0.06,0.09,0.16,0.22,0.19,0.14,0,9.31,1.33,425,226.74,1171.43,1.17,0.04,0.1,1.18,0.06,1.18,9.48},4},
{{0.1,0.07,0,0.13,0,0.16,0,0.22,0.22,0.11,0.05,0,0.09,0,0,0.26,0,0,0.33,0.28,0.22,0.17,0.19,0.15,0.1,0.09,0.05,0.02,0.03,0.01,0,9.34,1.11,425,226.25,1950,1.17,0.04,0.13,1.19,0.07,1.19,9.48},4},
{{0.24,0.12,0,0.06,0,0.09,0,0.09,0.1,0.32,0.21,0,0.14,0,0,0.18,0,0,0.18,0.31,0.17,0.08,0.06,0.05,0.08,0.06,0.05,0.19,0.08,0.2,0,9.32,1.28,425,170.37,2383.33,1.17,0.07,0.18,1.21,0.09,1.21,9.49},4},
{{0.1,0.11,0,0.14,0,0.18,0,0.12,0.19,0.18,0.11,0,0.23,0,0,0.31,0,0,0.21,0.16,0.07,0.05,0.03,0.03,0.06,0.04,0.04,0.18,0.19,0.33,0,9.31,1.37,425,229.76,282.69,1.16,0.05,0.13,1.17,0.07,1.17,9.49},4},
{{0.05,0.08,0,0.07,0,0.14,0,0.17,0.32,0.19,0.06,0,0.15,0,0,0.29,0,0,0.27,0.24,0.03,0.1,0.11,0.13,0.09,0.09,0.12,0.2,0.08,0.07,0,9.33,1.27,425,233.33,342.86,1.14,0.05,0.11,1.15,0.06,1.15,9.48},4},
{{0.21,0.06,0,0.06,0,0.14,0,0.15,0.13,0.26,0.21,0,0.24,0,0,0.21,0,0,0.17,0.17,0.11,0.05,0.01,0.03,0.02,0.03,0.06,0.12,0.22,0.38,0,9.3,1.37,425,185.29,473.53,1.17,0.06,0.18,1.19,0.1,1.19,9.48},4},
{{0.14,0.21,0,0.11,0,0.2,0,0.1,0.11,0.13,0.19,0,0.2,0,0,0.22,0,0,0.21,0.19,0.24,0.16,0.05,0.06,0.05,0.04,0.05,0.07,0.04,0.22,0,9.3,1.3,425,192.86,425,1.17,0.06,0.25,1.19,0.1,1.19,9.47},4},
{{0.03,0.04,0,0.07,0,0.22,0,0.38,0.23,0.05,0.05,0,0.18,0,0,0.4,0,0,0.29,0.09,0.03,0.14,0.13,0.18,0.22,0.13,0.06,0.1,0.02,0.03,0,9.31,1.22,425,240.24,275,1.15,0.03,0.08,1.15,0.05,1.15,9.46},4},
{{0.01,0.02,0,0.02,0,0.25,0,0.44,0.24,0.04,0.04,0,0.15,0,0,0.4,0,0,0.33,0.1,0.02,0.17,0.03,0.04,0.09,0.07,0.12,0.34,0.1,0.05,0,9.32,1.29,425,236.59,700,1.14,0.03,0.1,1.15,0.04,1.15,9.47},4},
{{0.03,0.1,0,0.12,0,0.21,0,0.25,0.19,0.12,0.04,0,0.11,0,0,0.33,0,0,0.34,0.19,0.06,0.23,0.12,0.08,0.08,0.09,0.11,0.2,0.06,0.01,0,9.33,1.23,425,266.22,525,1.15,0.04,0.1,1.16,0.05,1.16,9.48},4},
{{0.15,0.13,0,0.13,0,0.16,0,0.13,0.18,0.14,0.08,0,0.13,0,0,0.22,0,0,0.29,0.29,0.19,0.1,0.16,0.15,0.15,0.08,0.08,0.07,0.03,0.02,0,9.33,1.16,425,232.14,1950,1.19,0.06,0.12,1.2,0.09,1.2,9.48},4},
{{0.21,0.04,0,0.01,0,0.01,0,0.01,0,0.02,0.12,0,0.05,0,0,0.05,0,0,0.03,0.05,0,0.01,0.01,0.02,0.01,0.01,0.01,0.04,0.07,0.11,0,2.59,0.4,425,141.18,350,0.4,1.87,0.29,1.45,6.67,1.45,2.65},4},
{{0.11,0.12,0.12,0.14,0.09,0.09,0.07,0.09,0.08,0.1,0.08,0.12,0.13,0.1,0.06,0.11,0.09,0.06,0.13,0.13,0.12,0.11,0.11,0.08,0.14,0.13,0.07,0.12,0.07,0.08,0,8.7,2.36,1150,885,1675,2.11,3.88,1.84,2.9,4.64,2.9,9.8},1},
{{0.12,0.09,0.11,0.09,0.11,0.09,0.08,0.12,0.1,0.11,0.12,0.11,0.13,0.07,0.09,0.1,0.06,0.1,0.13,0.11,0.09,0.13,0.09,0.09,0.13,0.1,0.08,0.07,0.11,0.14,0,8.17,2.84,4450,736.36,2333.33,2.41,3.95,2.07,3.18,4.89,3.18,9.71},1},
{{0.21,0.14,0.08,0.06,0.07,0.07,0.05,0.1,0.08,0.15,0.13,0.07,0.11,0.05,0.11,0.09,0.14,0.11,0.1,0.1,0.14,0.06,0.07,0.04,0.07,0.07,0.11,0.13,0.19,0.15,0,8.04,3.17,775,991.67,2333.33,2.8,3.9,2.3,3.62,5.11,3.62,10.28},1},
{{0.02,0.02,0.02,0.06,0.02,0.02,0.06,0.04,0.02,0.02,0.02,0.02,0.03,0.02,0.04,0.05,0.05,0.02,0.04,0.02,0.04,0.01,0.02,0.04,0.03,0.02,0.05,0.02,0.04,0.04,0,2.34,0.78,633.33,400,650,0.51,1.86,0.72,2.56,7.5,2.56,2.75},1},
{{0,0.2,0.09,0.1,0.1,0.09,0.11,0.11,0.1,0.13,0.15,0.06,0.09,0.06,0.17,0.11,0.12,0.07,0.08,0.12,0.11,0.1,0.1,0.1,0.08,0.13,0.08,0.1,0.12,0.1,0,-0.14,0.34,890,1100,2312.5,9.97,4.12,5.24,12.07,5.75,12.07,13.19},0},
{{0,0.11,0.09,0.11,0.1,0.08,0.06,0.09,0.08,0.04,0.07,0.06,0.09,0.06,0.12,0.06,0.1,0.1,0.05,0.07,0.05,0.08,0.05,0.07,0.09,0.12,0.08,0.09,0.06,0.08,0,-0.06,0.64,725,725,1425,7.63,2.59,3.56,12.15,4.89,12.15,9.68},0},
{{0.06,0.06,0.15,0.1,0.08,0.05,0.06,0.11,0.14,0,0.11,0.12,0.13,0.12,0.08,0.1,0.08,0.07,0.08,0,0.1,0.13,0.07,0.08,0.07,0.11,0.16,0.09,0.11,0,0,8.01,1.01,700,410.87,2225,3.81,8.01,4.14,5.03,8.99,5.03,12.14},0},
{{0.09,0.07,0.06,0.11,0.08,0.15,0.13,0.15,0.08,0,0.1,0.13,0.09,0.1,0.11,0.08,0.11,0.07,0.1,0,0.12,0.09,0.13,0.1,0.07,0.12,0.14,0.07,0.07,0,0,8.62,0.77,2975,426.09,1825,2.7,8.01,4.32,3.84,9.02,3.84,12.36},0},
{{0.05,0.09,0.12,0.1,0.16,0.14,0.12,0.06,0.07,0,0.11,0.1,0.08,0.12,0.09,0.08,0.13,0.14,0.08,0,0.11,0.09,0.08,0.11,0.13,0.11,0.1,0.07,0.13,0,0,8.89,0.78,2100,435,1012.5,2.61,7.98,4.05,3.56,8.97,3.56,12.45},0},
{{0.02,0.12,0.07,0.06,0.12,0.14,0.1,0.12,0.11,0,0.11,0.1,0.09,0.09,0.09,0.08,0.15,0.11,0.1,0,0.14,0.09,0.1,0.11,0.08,0.12,0.06,0.09,0.13,0,0,9.21,0.61,2150,400,2875,2.81,8.09,4.35,3.7,9.17,3.7,13.1},0},
{{0.05,0.09,0.07,0.08,0.12,0.08,0.16,0.14,0.11,0,0.08,0.16,0.06,0.1,0.09,0.1,0.12,0.1,0.12,0,0.11,0.11,0.07,0.14,0.09,0.07,0.13,0.12,0.09,0,0,8.96,0.61,2616.67,384,1570,2.79,8.02,4.09,3.63,9.1,3.63,12.64},0},
{{0.03,0.12,0.07,0.13,0.11,0.11,0.12,0.12,0.11,0,0.1,0.08,0.13,0.06,0.1,0.11,0.11,0.14,0.1,0,0.1,0.12,0.09,0.17,0.08,0.07,0.11,0.1,0.09,0,0,9.31,0.7,1666.67,415.22,2825,2.63,7.73,4.1,3.44,8.81,3.44,12.7},0},
{{0.06,0.07,0.09,0.09,0.11,0.13,0.15,0.14,0.1,0,0.09,0.12,0.09,0.12,0.08,0.13,0.08,0.12,0.12,0,0.08,0.09,0.15,0.09,0.09,0.11,0.1,0.11,0.11,0,0,9.05,0.95,3116.67,391.67,2650,2.62,7.73,4,3.68,8.81,3.68,12.5},0},
{{0.04,0.12,0.12,0.12,0.11,0.13,0.1,0.1,0.1,0,0.1,0.12,0.09,0.1,0.08,0.12,0.12,0.08,0.13,0,0.1,0.12,0.11,0.1,0.12,0.11,0.09,0.11,0.1,0,0,8.73,0.46,2350,404.17,1183.33,2.72,8,3.88,3.62,9.07,3.62,12.38},0},
{{0.04,0.09,0.07,0.12,0.1,0.13,0.11,0.12,0.13,0,0.1,0.08,0.13,0.07,0.1,0.13,0.1,0.12,0.1,0,0.1,0.09,0.11,0.11,0.12,0.07,0.1,0.14,0.1,0,0,9.08,0.64,1950,410.87,2666.67,2.69,7.82,3.9,3.54,8.98,3.54,12.65},0},
{{0.08,0.13,0.13,0.12,0.14,0.1,0.07,0.05,0.08,0,0.11,0.07,0.15,0.1,0.12,0.1,0.09,0.12,0.07,0,0.12,0.08,0.14,0.11,0.1,0.08,0.07,0.11,0.12,0,0,8.64,0.68,1100,370,1187.5,3.22,7.77,4.21,4.17,8.89,4.17,12.49},0},
{{0.07,0.12,0.13,0.11,0.13,0.09,0.12,0.09,0.09,0,0.1,0.09,0.08,0.11,0.11,0.14,0.05,0.1,0.13,0,0.06,0.15,0.07,0.13,0.13,0.1,0.1,0.1,0.11,0,0,9.25,0.87,2125,417.39,1470,2.85,7.56,3.89,3.77,8.77,3.77,12.59},0},
{{0.08,0.09,0.12,0.1,0.11,0.12,0.09,0.12,0.11,0,0.11,0.1,0.09,0.12,0.07,0.11,0.12,0.06,0.12,0,0.13,0.06,0.12,0.08,0.11,0.13,0.07,0.09,0.1,0,0,8.93,0.74,1750,487.5,2150,2.94,8.24,4.12,3.9,9.38,3.9,12.95},0},
{{0.08,0.06,0.09,0.1,0.08,0.14,0.06,0.14,0.14,0,0.12,0.12,0.09,0.09,0.1,0.08,0.1,0.1,0.07,0,0.11,0.09,0.12,0.1,0.11,0.08,0.12,0.08,0.1,0,0,8.56,0.72,1075,459.52,643.75,3.12,8.28,4.18,4.21,9.4,4.21,12.76},0},
{{0.05,0.07,0.08,0.11,0.09,0.12,0.12,0.15,0.12,0,0.1,0.1,0.08,0.09,0.15,0.08,0.1,0.1,0.1,0,0.08,0.07,0.1,0.13,0.14,0.09,0.1,0.12,0.08,0,0,8.97,0.94,1250,419.57,1033.33,2.8,7.81,3.77,3.76,9.07,3.76,12.61},0},
{{0.14,0.11,0.08,0.16,0.08,0.08,0.09,0.11,0.09,0,0.1,0.12,0.09,0.12,0.06,0.1,0.13,0.1,0.1,0,0.08,0.12,0.06,0.12,0.12,0.1,0.08,0.11,0.09,0,0,8.91,1.29,4325,389.58,2550,3.79,7.94,4.23,5.4,9.02,5.4,13.01},0},
{{0.24,0.14,0.13,0.06,0.07,0.09,0.1,0.07,0.08,0,0.11,0.05,0.13,0.11,0.15,0.1,0.09,0.1,0.09,0,0.11,0.09,0.11,0.06,0.09,0.15,0.1,0.11,0.1,0,0,8.68,1.13,2583.33,351.85,1400,4.77,7.51,4.24,6.5,8.73,6.5,13.14},0},
{{0.26,0.14,0.12,0.1,0.07,0.05,0.04,0.08,0.09,0,0.09,0.12,0.12,0.12,0.09,0.07,0.11,0.11,0.07,0,0.06,0.14,0.09,0.07,0.12,0.12,0.1,0.12,0.09,0,0,8.64,1.3,4000,633.33,2187.5,5.22,7.95,3.9,6.87,8.88,6.87,12.98},0},
{{0.33,0.13,0.15,0.06,0.08,0.04,0.05,0.04,0.1,0,0.11,0.09,0.12,0.09,0.14,0.09,0.08,0.11,0.09,0,0.13,0.11,0.08,0.1,0.12,0.09,0.12,0.07,0.13,0,0,8.67,0.85,3900,442.86,1775,6.38,7.7,4.23,8.18,8.91,8.18,13.89},0},
{{0.08,0.05,0.03,0.03,0.01,0.01,0.01,0.02,0.02,0,0.01,0.01,0.03,0.05,0.05,0.07,0.02,0.02,0.01,0,0.01,0.03,0,0.02,0.02,0.05,0.05,0.06,0.01,0,0,2.12,0.48,750,625,250,1.63,1.83,0.82,8.21,8.75,8.21,3.08},0},
{{0,0,0,0,0.03,0.1,0.19,0.15,0.16,0,0.01,0,0,0,0.01,0.11,0.2,0.32,0,0,0.03,0.07,0,0,0,0.28,0,0,0.48,0,0,0.19,9.68,2300,1250,413.04,1.53,0.05,0.03,1.55,0.22,1.55,9.81},3},
{{0,0,0,0,0.01,0.01,0.09,0.26,0.43,0,0,0,0,0,0,0.02,0.1,0.23,0,0,0.05,0.31,0,0,0,0.5,0,0,0.14,0,0,0.22,9.65,422.5,971.43,313.33,1.53,0.03,0.03,1.53,0.06,1.53,9.77},3},
{{0,0,0,0,0.04,0.11,0.26,0.34,0.21,0,0,0,0,0,0,0.02,0.03,0.2,0,0,0.04,0.22,0,0,0,0.52,0,0,0.21,0,0,0.23,9.66,409.09,958.33,361.11,1.49,0.03,0.02,1.49,0.05,1.49,9.77},3},
{{0.01,0.04,0.05,0.04,0.41,0.22,0.12,0.03,0.03,0,0.01,0.02,0.12,0,0.44,0.19,0.04,0.05,0,0,0.03,0.1,0,0,0,0.48,0,0,0.32,0,0,0.04,9.67,1062.5,200,308.06,1.4,0.11,0.03,1.4,0.14,1.4,9.77},3},
{{0.01,0.02,0.1,0.33,0.46,0.09,0.01,0,0,0,0,0.03,0.23,0,0.73,0.02,0.01,0,0,0,0.01,0.08,0,0,0,0.4,0,0,0.44,0,0,-0.05,9.68,301.56,2150,263.51,1.33,0.02,0.03,1.34,0.04,1.34,9.77},3},
{{0.06,0.25,0.26,0.2,0.16,0.03,0.05,0,0,0,0.1,0.06,0.34,0,0.35,0.13,0.01,0.01,0,0,0.01,0.06,0,0,0,0.32,0,0,0.44,0,0,-0.05,9.69,1225,1183.33,277.14,1.28,0.05,0.03,1.28,0.08,1.28,9.77},3},
{{0.47,0.38,0.1,0.04,0.02,0.01,0,0,0,0,0.36,0.13,0.31,0,0.2,0.01,0,0,0,0,0.01,0.02,0,0,0,0.13,0,0,0.37,0,0,-0.12,9.71,2800,1183.33,283.82,1.12,0.06,0.03,1.13,0.08,1.13,9.78},3},
{{0.04,0.01,0,0,0.01,0.01,0.01,0.02,0,0,0.03,0.01,0.02,0,0.02,0.02,0,0,0,0,0.01,0.02,0,0,0,0.04,0,0,0.01,0,0,-0.01,0.97,266.67,1183.33,325,0.12,0.01,0.87,1.31,0.19,1.31,0.98},3},
{{0.11,0,0.02,0,0.04,0.03,0,0.08,0.05,0.7,0.15,0,0,0,0.1,0,0,0.26,0,0,0.01,0,0,0,0,0,0.01,0.01,0.12,0.71,0,9.44,-0.07,266.67,236.59,125,0.96,0.08,0.17,1,0.14,1,9.5},4},
{{0.01,0,0.01,0,0.04,0.09,0,0.21,0.26,0.39,0.09,0,0,0,0.36,0,0,0.37,0,0,0.02,0.02,0.11,0.19,0,0.23,0.18,0.11,0.08,0.08,0,9.41,-0.4,266.67,264.86,125,0.99,0.04,0.07,0.99,0.05,0.99,9.48},4},
{{0.01,0,0.01,0,0.09,0.18,0,0.33,0.24,0.15,0.11,0,0,0,0.4,0,0,0.41,0,0,0.05,0.09,0.19,0.25,0,0.2,0.13,0.06,0.04,0.01,0,9.4,-0.45,266.67,308.93,125,1.03,0.03,0.06,1.03,0.04,1.03,9.47},4},
{{0.02,0,0.03,0,0.08,0.28,0,0.35,0.2,0.05,0.09,0,0,0,0.37,0,0,0.4,0,0,0.09,0.08,0.28,0.26,0,0.17,0.08,0.02,0.01,0.02,0,9.41,-0.47,266.67,300,125,1.05,0.04,0.06,1.05,0.06,1.05,9.48},4},
{{0.1,0.04,0.07,0,0.12,0.15,0,0.19,0.14,0.22,0.18,0,0,0,0.33,0,0,0.33,0,0,0.23,0.18,0.22,0.13,0,0.07,0.08,0.04,0.04,0.04,0,9.4,-0.49,266.67,286.76,125,1.05,0.04,0.08,1.06,0.06,1.06,9.48},4},
{{0.05,0.1,0.21,0,0.31,0.2,0,0.1,0.04,0.01,0.09,0,0,0,0.37,0,0,0.43,0,0,0.05,0.06,0.05,0.15,0,0.2,0.15,0.15,0.17,0.04,0,9.41,-0.4,266.67,339.66,125,1.11,0.03,0.07,1.12,0.04,1.12,9.48},4},
{{0.15,0.08,0.18,0,0.27,0.14,0,0.1,0.04,0.06,0.17,0,0,0,0.32,0,0,0.33,0,0,0.01,0.09,0.13,0.13,0,0.14,0.11,0.06,0.09,0.23,0,9.4,-0.34,266.67,323.33,200,1.12,0.06,0.13,1.13,0.12,1.13,9.48},4},
{{0.14,0.06,0.1,0,0.09,0.16,0,0.18,0.11,0.18,0.13,0,0,0,0.29,0,0,0.39,0,0,0.03,0.04,0.11,0.13,0,0.17,0.16,0.05,0.07,0.25,0,9.41,-0.34,266.67,272.86,3575,1.07,0.05,0.13,1.08,0.11,1.08,9.48},4},
{{0.03,0.06,0.15,0,0.28,0.21,0,0.2,0.08,0.01,0.08,0,0,0,0.38,0,0,0.44,0,0,0.04,0.05,0.1,0.15,0,0.27,0.15,0.14,0.11,0.01,0,9.41,-0.41,266.67,351.85,3575,1.09,0.03,0.06,1.1,0.05,1.1,9.48},4},
{{0.1,0.08,0.21,0,0.19,0.18,0,0.11,0.04,0.1,0.09,0,0,0,0.33,0,0,0.42,0,0,0.08,0.03,0.1,0.1,0,0.19,0.18,0.2,0.12,0.02,0,9.41,-0.41,266.67,269.7,3575,1.1,0.05,0.07,1.11,0.1,1.11,9.49},4},
{{0.06,0.06,0.14,0,0.16,0.26,0,0.13,0.12,0.08,0.1,0,0,0,0.31,0,0,0.41,0,0,0.05,0.07,0.17,0.22,0,0.24,0.11,0.06,0.07,0.03,0,9.41,-0.43,266.67,269.12,3575,1.08,0.04,0.06,1.09,0.05,1.09,9.48},4},
{{0.03,0.07,0.2,0,0.32,0.25,0,0.12,0.02,0.02,0.05,0,0,0,0.29,0,0,0.51,0,0,0,0.01,0.06,0.13,0,0.23,0.28,0.19,0.1,0.02,0,9.42,-0.39,266.67,276.47,3575,1.11,0.03,0.05,1.11,0.04,1.11,9.49},4},
{{0.05,0.1,0.22,0,0.23,0.18,0,0.11,0.09,0.05,0.03,0,0,0,0.19,0,0,0.44,0,0,0.01,0.04,0.1,0.16,0,0.22,0.25,0.12,0.11,0,0,9.43,-0.41,266.67,290.63,3575,1.1,0.03,0.05,1.1,0.04,1.1,9.51},4},
{{0.08,0.11,0.16,0,0.27,0.25,0,0.09,0.04,0.02,0.05,0,0,0,0.28,0,0,0.42,0,0,0.01,0.03,0.04,0.12,0,0.2,0.29,0.22,0.1,0.01,0,9.42,-0.39,266.67,306.45,3575,1.11,0.03,0.05,1.12,0.05,1.12,9.5},4},
{{0.11,0.07,0.11,0.13,0.1,0.1,0.1,0.11,0.1,0.09,0.07,0.09,0.09,0.15,0.1,0.12,0.1,0.12,0.09,0.1,0.04,0.13,0.07,0.14,0.13,0.12,0.13,0.12,0.09,0.06,0,7.55,2.49,1187.5,1333.33,1112.5,4.96,3.89,2.55,5.86,4.9,5.86,10.33},1},
{{0.09,0.1,0.09,0.07,0.09,0.1,0.13,0.13,0.09,0.12,0.12,0.11,0.09,0.1,0.09,0.12,0.09,0.11,0.1,0.09,0.08,0.11,0.13,0.09,0.09,0.13,0.09,0.13,0.1,0.09,0,7.14,2.38,2475,755,366.67,5.42,4.27,2.98,6.45,5.39,6.45,10.57},1},
{{0.06,0.13,0.12,0.1,0.12,0.1,0.12,0.06,0.08,0.13,0.1,0.12,0.12,0.08,0.1,0.07,0.1,0.12,0.1,0.1,0.14,0.1,0.1,0.09,0.09,0.09,0.1,0.09,0.1,0.11,0,7.31,2.58,1925,1072.22,1800,5.12,4.62,3.61,6.17,5.67,6.17,10.87},1},
{{0.14,0.09,0.08,0.12,0.08,0.09,0.08,0.1,0.13,0.08,0.11,0.1,0.1,0.08,0.1,0.1,0.11,0.06,0.11,0.12,0.13,0.08,0.1,0.09,0.1,0.08,0.08,0.07,0.12,0.14,0,7.28,2.55,1625,650,2433.33,4.75,4.47,3.34,5.87,5.71,5.87,10.54},1},
{{0.3,0.14,0.14,0.14,0.1,0.05,0.04,0.04,0.04,0.04,0.1,0.09,0.12,0.11,0.12,0.08,0.12,0.14,0.06,0.08,0.07,0.08,0.13,0.1,0.1,0.08,0.1,0.17,0.08,0.12,0,8.08,2.82,1312.5,685,1025,3.72,4.32,3.27,4.99,5.28,4.99,10.65},1},
{{0.04,0.08,0.1,0.09,0.09,0.12,0.11,0.14,0.09,0.15,0.08,0.11,0.08,0.11,0.07,0.13,0.11,0.1,0.13,0.09,0.13,0.12,0.07,0.1,0.09,0.11,0.09,0.09,0.15,0.08,0,9.11,2.29,4025,785,2700,2.69,4.62,3.58,3.48,5.54,3.48,11.05},1},
{{0.03,0.08,0.08,0.08,0.1,0.09,0.13,0.15,0.13,0.14,0.11,0.1,0.12,0.09,0.12,0.08,0.09,0.08,0.09,0.14,0.07,0.12,0.1,0.12,0.11,0.12,0.13,0.06,0.07,0.11,0,8.72,2.51,2166.67,666.67,3625,2.75,4.88,3.39,3.54,5.78,3.54,10.67},1},
{{0.02,0.07,0.08,0.07,0.09,0.13,0.08,0.08,0.12,0.07,0.09,0.09,0.07,0.08,0.06,0.1,0.07,0.07,0.11,0.07,0.12,0.06,0.1,0.07,0.08,0.09,0.07,0.06,0.08,0.08,0,6.74,1.55,1616.67,805.56,937.5,1.78,3.89,2.79,2.97,5.97,2.97,8.2},1},
{{0.09,0.1,0.09,0.09,0.08,0.1,0.13,0.1,0.15,0.09,0.13,0.13,0.07,0.13,0.09,0.11,0.08,0.07,0.08,0.1,0.1,0.09,0.16,0.09,0.1,0.11,0.08,0.07,0.08,0.13,0,7.37,1.95,3150,477.5,2150,4.93,6.16,3.67,6.65,7.26,6.65,10.98},5},
{{0.08,0.12,0.09,0.09,0.11,0.12,0.1,0.1,0.08,0.11,0.07,0.1,0.11,0.1,0.11,0.11,0.1,0.14,0.09,0.08,0.09,0.1,0.08,0.12,0.1,0.11,0.11,0.09,0.11,0.1,0,8.02,1.94,2575,531.25,3083.33,5.17,5.51,3.21,6.69,6.47,6.69,11.23},5},
{{0.11,0.13,0.1,0.17,0.13,0.09,0.08,0.07,0.04,0.1,0.09,0.1,0.09,0.08,0.12,0.08,0.16,0.11,0.13,0.06,0.13,0.08,0.1,0.12,0.12,0.06,0.08,0.15,0.11,0.08,0,8.16,1.41,1300,895,1725,5.99,5.52,3.17,7.42,6.46,7.42,11.68},5},
{{0.13,0.07,0.12,0.07,0.09,0.09,0.11,0.11,0.13,0.11,0.11,0.07,0.14,0.09,0.1,0.11,0.07,0.1,0.1,0.07,0.1,0.12,0.09,0.09,0.09,0.13,0.1,0.08,0.11,0.11,0,7.87,1.83,3275,505.56,1430,5.39,6.07,3.33,7.41,7.1,7.41,11.47},5},
{{0.03,0.01,0.03,0.02,0.02,0.03,0.02,0.03,0.04,0.03,0.03,0.03,0.02,0.03,0.02,0.02,0.03,0.01,0.04,0.03,0.01,0.03,0.02,0.01,0.03,0.03,0.05,0.03,0.03,0.02,0,1.92,0.54,975,375,925,1.14,1.86,0.68,6.81,9.7,6.81,2.68},5},
{{0.11,0.09,0.12,0.1,0.12,0.08,0.12,0.1,0.12,0.07,0.12,0.11,0.07,0.1,0.1,0.1,0.07,0.12,0.13,0.11,0.07,0.1,0.07,0.11,0.1,0.12,0.1,0.11,0.14,0.1,0,7.34,2.9,3500,1058.33,4000,6.34,4.2,3.35,7.76,5.06,7.76,11.49},1},
{{0.09,0.13,0.08,0.09,0.12,0.09,0.11,0.11,0.1,0.1,0.1,0.08,0.11,0.11,0.1,0.08,0.11,0.12,0.1,0.11,0.08,0.1,0.1,0.12,0.1,0.11,0.14,0.11,0.07,0.1,0,7.36,2.28,2525,1590,1750,6.21,4.07,3.3,7.66,4.97,7.66,11.32},1},
{{0.12,0.11,0.13,0.08,0.09,0.11,0.08,0.12,0.08,0.1,0.07,0.1,0.12,0.12,0.09,0.12,0.11,0.1,0.1,0.09,0.12,0.12,0.14,0.06,0.1,0.08,0.09,0.09,0.09,0.13,0,7.13,2.1,1150,1566.67,2850,6.5,3.67,3.8,7.92,4.52,7.92,11.4},1},
{{0.09,0.07,0.08,0.12,0.11,0.12,0.1,0.08,0.12,0.14,0.11,0.11,0.11,0.08,0.11,0.11,0.12,0.07,0.09,0.11,0.13,0.08,0.09,0.1,0.13,0.11,0.08,0.11,0.11,0.08,0,7.09,2.04,3300,1050,1580,5.59,4.05,3.38,6.93,5.06,6.93,10.58},1},
{{0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0.03,0,3300,1050,1580,0.04,0.03,0,7.55,7.15,7.55,0.05},1},
{{0.1,0.09,0.12,0.09,0.12,0.09,0.09,0.1,0.11,0.09,0.14,0.13,0.09,0.09,0.09,0.09,0.08,0.09,0.12,0.08,0.15,0.08,0.09,0.12,0.09,0.09,0.09,0.07,0.08,0.12,0,7.01,1.21,1825,500,700,4.26,6.64,3.5,6.11,7.53,6.11,10.64},5},
{{0.07,0.1,0.07,0.1,0.11,0.09,0.15,0.09,0.12,0.12,0.11,0.08,0.11,0.12,0.08,0.12,0.12,0.1,0.1,0.06,0.09,0.08,0.14,0.11,0.11,0.09,0.1,0.13,0.09,0.09,0,7.48,1.07,616.67,452.78,2500,4.56,5.9,2.76,6.19,6.96,6.19,10.54},5},
{{0.13,0.1,0.13,0.1,0.11,0.11,0.06,0.09,0.09,0.09,0.08,0.08,0.1,0.12,0.14,0.09,0.1,0.11,0.09,0.11,0.07,0.12,0.12,0.08,0.09,0.1,0.12,0.13,0.1,0.1,0,7.9,1.28,475,489.47,3125,3.78,5.84,2.65,5.31,6.88,5.31,10.43},5},
{{0.05,0.07,0.08,0.05,0.06,0.07,0.08,0.08,0.05,0.07,0.04,0.08,0.07,0.04,0.07,0.08,0.07,0.07,0.06,0.07,0.05,0.06,0.05,0.06,0.09,0.1,0.06,0.04,0.1,0.06,0,5.08,0.83,425,428.57,1383.33,2.51,4.06,1.7,5.53,7.68,5.53,6.73},5},
{{0.08,0.05,0.07,0.09,0.1,0.12,0.1,0.11,0.15,0.14,0.11,0.13,0.13,0.08,0.1,0.09,0.08,0.07,0.13,0.11,0.1,0.15,0.1,0.08,0.1,0.1,0.08,0.08,0.12,0.12,0,8.12,2.22,1525,770,2475,3.6,4.27,3.3,4.79,5.19,4.79,10.41},1},
{{0.17,0.12,0.06,0.06,0.1,0.11,0.09,0.1,0.12,0.09,0.16,0.1,0.1,0.1,0.04,0.09,0.1,0.1,0.12,0.11,0.09,0.09,0.1,0.12,0.09,0.08,0.1,0.11,0.09,0.13,0,8.09,2.44,3550,540,2866.67,4.76,4.48,3.22,6.05,5.48,6.05,10.95},1},
{{0.09,0.1,0.12,0.11,0.11,0.12,0.09,0.09,0.09,0.11,0.11,0.13,0.08,0.11,0.1,0.1,0.12,0.09,0.09,0.1,0.15,0.14,0.09,0.09,0.08,0.07,0.1,0.08,0.11,0.11,0,7.93,1.94,2150,2666.67,2350,4.14,3.78,3.47,5.17,4.68,5.17,10.48},1},
{{0.04,0.14,0.17,0.16,0.1,0.06,0.12,0.11,0.07,0.07,0.04,0.07,0.11,0.11,0.18,0.13,0.11,0.11,0.09,0.09,0.06,0.05,0.1,0.14,0.14,0.14,0.16,0.13,0.09,0.01,0,8.6,1.8,1025,930,1937.5,4.2,3.1,2.08,4.89,4.08,4.89,10.39},1},
{{0.09,0.06,0.05,0.05,0.06,0.05,0.06,0.05,0.06,0.05,0.04,0.04,0.05,0.07,0.06,0.06,0.06,0.09,0.05,0.06,0.06,0.04,0.08,0.04,0.05,0.07,0.03,0.06,0.05,0.1,0,4.87,1.42,575,670,825,2.8,2.63,1.92,6.37,5.89,6.37,6.39},1},
{{0.1,0.1,0.07,0.08,0.09,0.12,0.1,0.11,0.13,0.13,0.06,0.08,0.1,0.12,0.13,0.1,0.14,0.09,0.12,0.07,0.05,0.07,0.07,0.06,0.05,0.07,0.09,0.13,0.18,0.26,0,10.04,-1.33,650,1143.75,2925,1.05,1.69,1.15,1.35,2.04,1.35,10.33},5},
{{0.07,0.09,0.09,0.08,0.1,0.11,0.1,0.11,0.11,0.16,0.06,0.09,0.1,0.1,0.14,0.09,0.14,0.12,0.1,0.09,0.05,0.06,0.06,0.09,0.1,0.09,0.11,0.12,0.18,0.16,0,10.07,-1.63,2300,1416.67,1725,1.04,1.74,1.05,1.36,2.13,1.36,10.39},5},
{{0.11,0.09,0.11,0.14,0.06,0.09,0.1,0.1,0.12,0.11,0.08,0.09,0.1,0.07,0.14,0.12,0.09,0.15,0.1,0.08,0.08,0.07,0.09,0.11,0.1,0.11,0.1,0.15,0.11,0.1,0,10.09,-2.01,1160,1120,2075,1.09,1.82,1.01,1.37,2.24,1.37,10.47},5},
{{0.12,0.1,0.09,0.07,0.11,0.11,0.12,0.11,0.1,0.1,0.07,0.13,0.14,0.1,0.07,0.08,0.1,0.11,0.1,0.12,0.12,0.13,0.12,0.12,0.12,0.1,0.12,0.07,0.06,0.07,0,10.05,-2.45,1410,1750,2333.33,1.04,2.07,0.99,1.37,2.48,1.37,10.53},5},
{{0.08,0.09,0.11,0.09,0.09,0.11,0.13,0.11,0.11,0.1,0.11,0.13,0.09,0.07,0.1,0.15,0.08,0.09,0.09,0.11,0.13,0.14,0.09,0.1,0.1,0.12,0.12,0.09,0.07,0.07,0,9.92,-2.37,1250,2416.67,3183.33,0.96,1.98,1.08,1.25,2.48,1.25,10.38},5},
{{0.1,0.1,0.13,0.13,0.12,0.11,0.11,0.08,0.11,0.05,0.15,0.09,0.11,0.11,0.08,0.13,0.08,0.07,0.08,0.12,0.17,0.12,0.14,0.11,0.15,0.11,0.08,0.06,0.07,0.01,0,9.87,-2.72,3825,3150,3183.33,1.02,2.13,1,1.35,2.69,1.35,10.42},5},
{{0.09,0.05,0.07,0.09,0.05,0.07,0.02,0.04,0.01,0.03,0.1,0.06,0.04,0.05,0.03,0.02,0.03,0.05,0.06,0.08,0.07,0.08,0.09,0.06,0.05,0.06,0.06,0.04,0.01,0.01,0,5.03,-1.41,1150,983.33,3183.33,0.63,2.49,0.73,1.63,5.81,1.63,5.32},5},
{{0.07,0.1,0.14,0.14,0.15,0.14,0.13,0.07,0.05,0.03,0.08,0.05,0.09,0.09,0.17,0.13,0.13,0.1,0.12,0.06,0.08,0.1,0.11,0.1,0.11,0.13,0.15,0.09,0.11,0.04,0,10.02,-1.58,2075,1637.5,4300,1.04,1.55,1.06,1.31,2.02,1.31,10.31},1},
{{0.09,0.07,0.08,0.14,0.12,0.09,0.14,0.12,0.09,0.09,0.03,0.1,0.13,0.13,0.1,0.14,0.09,0.12,0.07,0.11,0.07,0.14,0.09,0.12,0.06,0.13,0.08,0.12,0.1,0.1,0,10.07,-1.53,1400,987.5,1766.67,1.35,1.61,1.23,1.7,1.99,1.7,10.43},1},
{{0.11,0.14,0.08,0.08,0.09,0.11,0.09,0.1,0.12,0.1,0.12,0.08,0.1,0.09,0.1,0.12,0.1,0.12,0.11,0.09,0.09,0.11,0.08,0.11,0.06,0.11,0.12,0.1,0.09,0.12,0,10.02,-1.41,4350,2216.67,300,1.58,1.88,1.31,1.94,2.37,1.94,10.44},1},
{{0.09,0.1,0.11,0.07,0.11,0.08,0.09,0.13,0.13,0.11,0.07,0.14,0.09,0.11,0.09,0.12,0.09,0.12,0.13,0.07,0.1,0.09,0.08,0.11,0.09,0.12,0.11,0.11,0.09,0.12,0,9.96,-1.46,1925,1700,1687.5,1.58,1.69,1.22,1.93,2.12,1.93,10.36},1},
{{0.13,0.12,0.11,0.09,0.09,0.05,0.08,0.1,0.1,0.16,0.11,0.12,0.11,0.11,0.07,0.06,0.1,0.08,0.13,0.12,0.13,0.08,0.12,0.09,0.07,0.09,0.09,0.11,0.13,0.1,0,10.06,-1.57,1416.67,2283.33,3550,1.77,2.16,1.39,2.25,2.68,2.25,10.57},1},
{{0.07,0.06,0.03,0.04,0.05,0.09,0.05,0.05,0.08,0.1,0.16,0.05,0.06,0.05,0.04,0.04,0.04,0.05,0.02,0.13,0.07,0.04,0.09,0.06,0.06,0.04,0.08,0.02,0.07,0.11,0,6.14,-0.91,875,683.33,1250,1.17,2.43,0.89,2.36,5.07,2.36,6.48},1},
{{0.08,0.07,0.14,0.08,0.09,0.07,0.13,0.1,0.14,0.12,0.1,0.1,0.09,0.08,0.1,0.13,0.13,0.08,0.12,0.1,0.06,0.06,0.07,0.09,0.08,0.08,0.16,0.09,0.15,0.18,0,10.04,-1.38,4650,1775,2325,1.03,2.02,0.96,1.31,2.51,1.31,10.29},5},
{{0.12,0.08,0.08,0.09,0.08,0.04,0.12,0.13,0.13,0.14,0.07,0.1,0.05,0.12,0.1,0.17,0.11,0.12,0.12,0.07,0.08,0.07,0.09,0.06,0.08,0.06,0.12,0.14,0.15,0.19,0,10.04,-1.51,2783.33,935,1800,1.15,1.74,1.1,1.47,2.16,1.47,10.35},5},
{{0.09,0.12,0.11,0.08,0.1,0.12,0.12,0.07,0.12,0.1,0.11,0.09,0.12,0.09,0.07,0.1,0.1,0.11,0.15,0.09,0.1,0.1,0.12,0.1,0.08,0.1,0.12,0.11,0.1,0.1,0,10.04,-1.85,4300,1625,725,1,2.2,0.99,1.28,2.64,1.28,10.37},5},
{{0.1,0.13,0.08,0.11,0.09,0.08,0.14,0.1,0.09,0.1,0.1,0.07,0.14,0.1,0.11,0.09,0.1,0.13,0.08,0.1,0.1,0.1,0.12,0.1,0.09,0.07,0.13,0.13,0.1,0.09,0,9.96,-1.88,1900,1380,900,1.01,2.11,1.03,1.3,2.64,1.3,10.31},5},
{{0.1,0.08,0.11,0.12,0.11,0.14,0.11,0.11,0.06,0.08,0.08,0.17,0.08,0.11,0.11,0.07,0.08,0.11,0.12,0.09,0.14,0.12,0.09,0.12,0.12,0.13,0.13,0.07,0.05,0.05,0,9.89,-2.19,2133.33,1610,1950,0.96,2.19,0.98,1.3,2.65,1.3,10.3},5},
{{0.1,0.12,0.12,0.1,0.09,0.09,0.1,0.08,0.1,0.12,0.12,0.1,0.11,0.1,0.11,0.08,0.11,0.09,0.07,0.13,0.13,0.09,0.14,0.1,0.16,0.09,0.07,0.09,0.08,0.06,0,9.94,-2.09,1733.33,2212.5,625,1.09,2.29,1.02,1.4,2.85,1.4,10.36},5},
{{0.11,0.08,0.13,0.13,0.12,0.1,0.09,0.1,0.11,0.07,0.13,0.1,0.12,0.08,0.11,0.1,0.09,0.07,0.07,0.13,0.11,0.17,0.07,0.12,0.14,0.08,0.1,0.07,0.08,0.08,0,9.95,-2.15,2450,2100,675,1.03,2.45,1.04,1.37,3.13,1.37,10.37},5},
{{0.02,0.01,0,0.01,0.02,0,0.01,0.01,0,0,0.01,0,0.01,0.01,0.02,0.01,0.01,0.01,0,0.01,0,0.01,0.01,0.01,0.01,0.01,0.02,0.01,0,0,0,0.62,-0.12,2450,2100,675,0.08,0.58,0.11,1.72,9.31,1.72,0.64},5},
{{0.09,0.11,0.1,0.13,0.16,0.12,0.1,0.12,0.05,0,0.05,0.09,0.1,0.1,0.16,0.12,0.14,0.11,0.11,0,0.15,0.09,0.11,0.11,0.1,0.09,0.1,0.09,0.11,0,0,9.95,-1.54,2187.5,1450,2916.67,1.16,1.79,1.27,1.47,2.25,1.47,10.3},1},
{{0.13,0.11,0.09,0.12,0.07,0.1,0.14,0.11,0.11,0,0.07,0.1,0.09,0.11,0.14,0.13,0.09,0.08,0.13,0,0.05,0.08,0.09,0.1,0.08,0.08,0.1,0.15,0.19,0,0,9.98,-0.97,2025,1400,1050,1.4,1.99,0.94,1.84,2.44,1.84,10.24},1},
{{0.12,0.1,0.12,0.1,0.14,0.07,0.11,0.1,0.12,0,0.09,0.11,0.13,0.1,0.09,0.06,0.14,0.11,0.08,0,0.11,0.09,0.13,0.1,0.09,0.13,0.07,0.11,0.11,0,0,10.01,-1.41,2125,1830,1575,1.39,2.33,1.09,1.81,2.84,1.81,10.34},1},
{{0.12,0.1,0.11,0.07,0.13,0.1,0.1,0.09,0.11,0,0.1,0.09,0.14,0.1,0.06,0.13,0.09,0.1,0.1,0,0.1,0.11,0.11,0.06,0.15,0.11,0.08,0.1,0.09,0,0,10.09,-1.37,3650,1280,1175,1.47,2.36,1.13,1.89,2.88,1.89,10.44},1},
{{0.11,0.08,0.12,0.09,0.07,0.09,0.05,0.11,0.12,0,0.14,0.11,0.09,0.09,0.09,0.09,0.08,0.11,0.12,0,0.1,0.14,0.1,0.1,0.09,0.11,0.09,0.09,0.09,0,0,9.94,-1.45,3700,2500,4500,1.73,2.48,1.17,2.15,3.01,2.15,10.37},1},
{{0.05,0.1,0.07,0.07,0.09,0.15,0.1,0.11,0.12,0,0.12,0.08,0.1,0.11,0.11,0.1,0.1,0.1,0.1,0,0.1,0.09,0.1,0.14,0.09,0.1,0.13,0.1,0.08,0,0,10.01,-1.39,1000,1662.5,1600,1.38,2.33,1.04,1.79,2.88,1.79,10.34},1},
{{0.04,0.03,0.01,0.05,0.02,0.03,0.05,0.02,0.06,0,0.05,0.08,0.03,0.02,0.02,0.04,0.02,0.03,0.04,0,0.03,0.04,0.03,0.02,0.04,0.02,0.04,0.06,0.05,0,0,3.45,-0.38,1100,750,833.33,0.57,2.25,0.39,2.1,7.23,2.1,3.57},1},
{{0.09,0.12,0.13,0.1,0.09,0.07,0.09,0.11,0.12,0.1,0.06,0.12,0.1,0.11,0.06,0.11,0.11,0.12,0.15,0.07,0.06,0.06,0.06,0.03,0.06,0.05,0.07,0.12,0.26,0.25,0,9.76,-2.4,2575,1933.33,4525,1.63,2.06,1.13,2.09,2.5,2.09,10.35},5},
{{0.11,0.11,0.12,0.12,0.1,0.12,0.07,0.09,0.1,0.09,0.08,0.11,0.07,0.1,0.11,0.1,0.12,0.12,0.11,0.11,0.08,0.07,0.08,0.1,0.09,0.1,0.13,0.08,0.16,0.13,0,9.7,-2.96,700,1937.5,4050,1.61,2.06,1.11,2.11,2.51,2.11,10.46},5},
{{0.13,0.09,0.12,0.11,0.11,0.06,0.07,0.1,0.13,0.09,0.11,0.11,0.1,0.1,0.13,0.08,0.07,0.08,0.13,0.11,0.12,0.11,0.14,0.07,0.12,0.12,0.12,0.11,0.05,0.06,0,9.5,-3.5,700,1025,4050,1.64,2.24,1.09,2.08,2.72,2.08,10.44},5},
{{0.11,0.11,0.08,0.11,0.1,0.11,0.09,0.12,0.08,0.1,0.08,0.11,0.11,0.13,0.11,0.09,0.11,0.07,0.09,0.12,0.12,0.1,0.12,0.14,0.11,0.08,0.11,0.08,0.03,0.12,0,9.51,-3.46,850,2650,4050,1.7,2.2,1.11,2.16,2.74,2.16,10.44},5},
{{0.09,0.12,0.1,0.1,0.11,0.07,0.09,0.14,0.09,0.1,0.13,0.07,0.11,0.11,0.07,0.11,0.09,0.12,0.1,0.1,0.14,0.12,0.07,0.1,0.09,0.11,0.15,0.08,0.1,0.05,0,9.49,-3.48,4325,2866.67,4050,1.71,2.26,1.11,2.15,2.8,2.15,10.43},5},
{{0.08,0.08,0.08,0.1,0.07,0.12,0.14,0.1,0.12,0.12,0.1,0.11,0.12,0.06,0.13,0.13,0.12,0.08,0.06,0.12,0.11,0.12,0.1,0.07,0.16,0.11,0.11,0.1,0.07,0.06,0,9.41,-3.45,3100,650,4050,1.89,2.05,1.07,2.31,2.64,2.31,10.37},5},
{{0.1,0.06,0.08,0.08,0.11,0.15,0.12,0.11,0.07,0.12,0.13,0.09,0.1,0.09,0.11,0.08,0.12,0.09,0.1,0.1,0.08,0.13,0.14,0.13,0.14,0.1,0.07,0.09,0.08,0.05,0,9.33,-3.47,1283.33,3175,4050,1.76,2.19,1,2.21,2.76,2.21,10.27},5},
{{0.04,0.08,0.13,0.14,0.13,0.22,0.14,0.07,0.05,0.02,0.01,0.07,0.1,0.13,0.12,0.14,0.15,0.16,0.12,0.02,0.04,0.1,0.06,0.06,0.1,0.12,0.15,0.15,0.13,0.13,0,10.13,-0.66,1650,2700,2700,0.97,1.86,0.96,1.26,2.25,1.26,10.3},1},
{{0.14,0.16,0.12,0.09,0.12,0.1,0.06,0.1,0.07,0.06,0.09,0.08,0.1,0.12,0.12,0.14,0.1,0.1,0.11,0.06,0.09,0.09,0.09,0.1,0.12,0.1,0.1,0.09,0.09,0.14,0,9.82,-1,3700,2300,1583.33,1.58,2.41,1.16,2.02,3.09,2.02,10.17},1},
{{0.14,0.09,0.15,0.12,0.08,0.08,0.09,0.09,0.09,0.09,0.1,0.1,0.1,0.11,0.11,0.11,0.1,0.09,0.09,0.12,0.1,0.11,0.12,0.11,0.12,0.07,0.12,0.09,0.11,0.08,0,10.03,-1.18,1675,1475,1883.33,1.75,2.76,1.09,2.31,3.42,2.31,10.41},1},
{{0.12,0.11,0.09,0.09,0.09,0.09,0.1,0.12,0.1,0.13,0.11,0.11,0.09,0.12,0.09,0.07,0.09,0.12,0.08,0.14,0.12,0.09,0.15,0.1,0.1,0.11,0.07,0.1,0.08,0.09,0,10.02,-1.31,2550,2016.67,2600,1.84,2.92,1.18,2.4,3.49,2.4,10.47},1},
{{0.12,0.07,0.08,0.1,0.12,0.09,0.1,0.12,0.11,0.12,0.13,0.1,0.1,0.1,0.1,0.09,0.12,0.06,0.12,0.12,0.17,0.08,0.09,0.09,0.12,0.08,0.08,0.1,0.11,0.1,0,9.93,-1.25,2725,950,3350,1.88,2.92,1.28,2.61,3.57,2.61,10.43},1},
{{0.06,0.07,0.08,0.08,0.04,0.1,0.1,0.13,0.19,0.16,0.14,0.11,0.14,0.07,0.09,0.07,0.08,0.1,0.1,0.12,0.1,0.12,0.11,0.11,0.1,0.08,0.09,0.13,0.09,0.09,0,9.9,-1.17,1710,1221.43,1850,2.22,3.17,1.18,3.11,3.83,3.11,10.46},1},
{{0.02,0.02,0.04,0.02,0.03,0.03,0.03,0.04,0.04,0.07,0.07,0.06,0.03,0.01,0.02,0.02,0.01,0.02,0.02,0.07,0.03,0.03,0.03,0.02,0.04,0.04,0.03,0.04,0.02,0.04,0,3.07,-0.3,1025,775,925,0.74,2.1,0.38,3.34,8.11,3.34,3.25},1},
{{0.14,0.11,0.12,0.13,0.09,0.11,0.08,0.11,0.08,0.06,0.08,0.09,0.11,0.07,0.11,0.14,0.17,0.08,0.1,0.07,0.14,0.11,0.06,0.07,0.09,0.12,0.07,0.12,0.12,0.13,0,9.78,-2.43,2033.33,2975,3200,1.18,2.09,1.41,1.53,2.66,1.53,10.37},5},
{{0.14,0.11,0.11,0.1,0.12,0.09,0.08,0.07,0.11,0.08,0.1,0.08,0.12,0.09,0.11,0.12,0.08,0.14,0.08,0.1,0.08,0.1,0.07,0.11,0.1,0.1,0.1,0.09,0.13,0.14,0,9.82,-2.16,816.67,1500,4450,1.23,2.25,1.17,1.6,2.73,1.6,10.31},5},
{{0.1,0.1,0.11,0.1,0.08,0.12,0.11,0.1,0.11,0.1,0.09,0.08,0.06,0.15,0.09,0.09,0.13,0.13,0.12,0.08,0.08,0.1,0.09,0.09,0.08,0.08,0.11,0.11,0.13,0.14,0,9.94,-2.17,4200,1925,1116.67,1.15,2.25,1.2,1.45,2.74,1.45,10.4},5},
{{0.07,0.13,0.11,0.08,0.1,0.12,0.12,0.08,0.15,0.06,0.12,0.1,0.1,0.09,0.13,0.08,0.1,0.08,0.1,0.12,0.09,0.09,0.08,0.1,0.11,0.1,0.16,0.09,0.11,0.1,0,9.79,-2.31,1250,1130,3125,1.07,2.51,1.06,1.36,3.09,1.36,10.27},5},
{{0.08,0.11,0.1,0.11,0.08,0.1,0.14,0.09,0.11,0.1,0.13,0.08,0.12,0.12,0.09,0.07,0.09,0.1,0.12,0.12,0.12,0.09,0.12,0.12,0.08,0.1,0.11,0.08,0.11,0.09,0,9.84,-2.45,750,1662.5,550,1.2,2.53,1.18,1.55,3.02,1.55,10.39},5},
{{0.11,0.09,0.05,0.1,0.12,0.1,0.11,0.1,0.08,0.15,0.09,0.12,0.12,0.07,0.1,0.13,0.09,0.08,0.09,0.12,0.09,0.09,0.15,0.1,0.1,0.11,0.06,0.1,0.14,0.07,0,9.86,-2.36,1516.67,2733.33,950,1.3,2.49,1.11,1.7,3.15,1.7,10.4},5},
{{0.07,0.08,0.09,0.09,0.1,0.11,0.1,0.13,0.09,0.17,0.11,0.12,0.1,0.12,0.1,0.08,0.05,0.1,0.13,0.11,0.09,0.14,0.13,0.13,0.13,0.11,0.09,0.1,0.05,0.05,0,9.77,-2.61,1700,2362.5,1725,1.28,2.61,1.05,1.67,3.11,1.67,10.37},5},
{{0.01,0.01,0.01,0.02,0.01,0.02,0.02,0.05,0.02,0.01,0.02,0.02,0.02,0.03,0.01,0.01,0.03,0.01,0.01,0.02,0.02,0.03,0.03,0.01,0.01,0.02,0.02,0.01,0.02,0.01,0,1.51,-0.45,475,350,1725,0.16,1.27,0.38,1.26,8.49,1.26,1.61},5},
{{0.08,0.11,0.1,0.09,0.08,0.12,0.12,0.06,0.14,0.13,0.14,0.08,0.11,0.1,0.08,0.13,0.1,0.08,0.13,0.08,0.1,0.06,0.15,0.11,0.08,0.09,0.14,0.1,0.07,0.13,0,9.64,-0.4,2066.67,2416.67,2066.67,2.77,2.46,1.71,3.27,3.05,3.27,10.39},2},
{{0.1,0.07,0.15,0.09,0.13,0.07,0.09,0.1,0.12,0.11,0.12,0.12,0.08,0.11,0.08,0.09,0.08,0.11,0.11,0.14,0.12,0.1,0.08,0.09,0.08,0.09,0.1,0.11,0.1,0.14,0,9.84,-0.4,2025,3025,4050,2.65,2.73,1.84,3.15,3.36,3.15,10.59},2},
{{0.12,0.09,0.11,0.1,0.1,0.07,0.08,0.08,0.14,0.13,0.13,0.08,0.11,0.08,0.08,0.15,0.08,0.1,0.08,0.13,0.14,0.1,0.09,0.07,0.07,0.09,0.11,0.11,0.12,0.12,0,9.69,-0.43,1358.33,1150,1030,2.68,2.47,1.89,3.15,3.06,3.15,10.44},2},
{{0.08,0.12,0.09,0.08,0.13,0.09,0.08,0.11,0.12,0.12,0.14,0.09,0.11,0.07,0.08,0.12,0.1,0.09,0.11,0.13,0.12,0.11,0.09,0.07,0.05,0.12,0.15,0.08,0.08,0.16,0,9.79,-0.39,3600,1430,1400,2.69,2.66,1.84,3.16,3.3,3.16,10.55},2},
{{0.14,0.05,0.09,0.11,0.12,0.08,0.03,0.12,0.13,0.15,0.13,0.1,0.08,0.08,0.09,0.11,0.08,0.09,0.11,0.14,0.11,0.11,0.13,0.08,0.05,0.08,0.1,0.13,0.11,0.12,0,9.81,-0.5,4000,795.83,1191.67,2.9,2.64,1.88,3.36,3.2,3.36,10.62},2},
{{0.12,0.07,0.1,0.13,0.1,0.07,0.07,0.13,0.1,0.13,0.15,0.09,0.06,0.12,0.09,0.05,0.13,0.11,0.09,0.13,0.14,0.1,0.11,0.04,0.14,0.09,0.08,0.07,0.09,0.17,0,9.72,-0.53,2733.33,2416.67,1100,2.78,2.75,1.89,3.28,3.38,3.28,10.52},2},
{{0.13,0.13,0.08,0.08,0.06,0.09,0.07,0.11,0.13,0.14,0.16,0.06,0.1,0.09,0.09,0.04,0.13,0.07,0.12,0.16,0.15,0.12,0.08,0.09,0.05,0.07,0.08,0.12,0.11,0.16,0,9.84,-0.47,1000,955,1750,2.79,2.95,2.05,3.33,3.56,3.33,10.69},2},
{{0.14,0.12,0.1,0.05,0.08,0.11,0.1,0.11,0.09,0.12,0.13,0.11,0.07,0.07,0.09,0.07,0.11,0.11,0.13,0.12,0.17,0.09,0.05,0.08,0.1,0.09,0.13,0.08,0.1,0.14,0,9.82,-0.53,1800,2033.33,2000,2.6,2.74,1.89,3.09,3.32,3.09,10.55},2},
{{0.11,0.11,0.11,0.11,0.08,0.06,0.09,0.15,0.07,0.13,0.15,0.08,0.09,0.09,0.09,0.11,0.07,0.11,0.11,0.12,0.11,0.11,0.09,0.09,0.08,0.08,0.08,0.08,0.13,0.17,0,9.77,-0.28,2033.33,2700,525,2.65,2.66,1.93,3.13,3.22,3.13,10.52},2},
{{0.13,0.16,0.07,0.08,0.09,0.08,0.1,0.11,0.11,0.1,0.12,0.11,0.07,0.09,0.11,0.13,0.1,0.09,0.09,0.12,0.14,0.08,0.12,0.07,0.06,0.11,0.07,0.12,0.1,0.16,0,9.76,-0.32,2050,1733.33,1300,2.5,2.43,1.94,3,3.08,3,10.47},2},
{{0.1,0.17,0.1,0.09,0.1,0.06,0.11,0.14,0.08,0.07,0.1,0.11,0.07,0.1,0.11,0.12,0.12,0.12,0.07,0.11,0.07,0.1,0.11,0.11,0.07,0.11,0.09,0.13,0.15,0.09,0,9.82,-0.26,1037.5,1260,3150,2.41,2.34,1.6,2.9,2.93,2.9,10.41},2},
{{0.11,0.12,0.11,0.09,0.12,0.09,0.09,0.11,0.12,0.07,0.1,0.11,0.1,0.06,0.15,0.1,0.11,0.09,0.1,0.11,0.09,0.11,0.09,0.05,0.09,0.08,0.16,0.14,0.08,0.13,0,9.74,-0.28,3600,3425,950,2.47,2.36,1.72,2.91,2.96,2.91,10.38},2},
{{0.1,0.11,0.12,0.09,0.09,0.13,0.1,0.09,0.11,0.08,0.12,0.1,0.09,0.1,0.1,0.1,0.11,0.1,0.12,0.1,0.11,0.07,0.08,0.12,0.06,0.11,0.15,0.08,0.1,0.13,0,9.74,-0.34,1800,2062.5,2600,2.52,2.49,1.71,2.96,3.05,2.96,10.4},2},
{{0.13,0.15,0.08,0.1,0.06,0.05,0.11,0.14,0.1,0.09,0.1,0.11,0.09,0.09,0.1,0.09,0.13,0.1,0.11,0.11,0.11,0.1,0.08,0.07,0.08,0.1,0.12,0.11,0.11,0.15,0,9.8,-0.23,1383.33,1575,3725,2.48,2.4,1.82,2.96,2.95,2.96,10.48},2},
{{0.1,0.14,0.1,0.08,0.13,0.1,0.08,0.11,0.1,0.08,0.08,0.13,0.12,0.09,0.09,0.09,0.11,0.1,0.14,0.08,0.08,0.12,0.09,0.08,0.08,0.09,0.09,0.15,0.1,0.15,0,9.8,-0.24,2433.33,1460,2050,2.46,2.36,1.73,2.92,2.88,2.92,10.42},2},
{{0.08,0.13,0.11,0.09,0.13,0.1,0.13,0.1,0.13,0.02,0.09,0.1,0.12,0.12,0.1,0.11,0.11,0.09,0.08,0.11,0.05,0.09,0.1,0.08,0.08,0.1,0.12,0.17,0.1,0.14,0,9.76,-0.04,1700,1183.33,4100,2.4,2.28,1.54,2.77,2.86,2.77,10.32},2},
{{0.12,0.1,0.12,0.1,0.1,0.12,0.09,0.1,0.09,0.08,0.09,0.11,0.1,0.11,0.11,0.1,0.1,0.09,0.09,0.12,0.1,0.13,0.09,0.07,0.07,0.07,0.1,0.15,0.12,0.12,0,9.81,-0.32,2133.33,1357.14,2166.67,2.41,2.45,1.81,2.85,3.03,2.85,10.44},2},
{{0.11,0.07,0.08,0.04,0.05,0.06,0.05,0.05,0.1,0.07,0.08,0.05,0.08,0.05,0.09,0.03,0.07,0.1,0.05,0.09,0.08,0.08,0.03,0.07,0.05,0.07,0.06,0.08,0.05,0.11,0,6.46,-0.24,1416.67,1325,1300,1.71,2.54,1.22,3.12,4.61,3.12,6.94},2},
{{0.06,0.08,0.09,0.15,0.08,0.11,0.11,0.11,0.12,0.12,0.15,0.06,0.12,0.09,0.1,0.1,0.08,0.05,0.15,0.12,0.14,0.12,0.08,0.14,0.12,0.11,0.07,0.05,0.1,0.09,0,9.01,1.1,1300,1125,1300,4.2,2.84,1.83,4.94,3.58,4.94,10.6},2},
{{0.05,0.1,0.11,0.12,0.15,0.1,0.11,0.06,0.12,0.11,0.1,0.12,0.12,0.1,0.07,0.08,0.13,0.11,0.09,0.11,0.11,0.07,0.13,0.11,0.08,0.14,0.12,0.09,0.09,0.09,0,8.99,1.29,2950,1050,2150,3.98,2.66,1.73,4.75,3.33,4.75,10.49},2},
{{0.1,0.09,0.07,0.11,0.08,0.1,0.13,0.12,0.14,0.08,0.11,0.1,0.07,0.08,0.1,0.13,0.12,0.1,0.1,0.11,0.11,0.08,0.09,0.09,0.13,0.1,0.13,0.11,0.07,0.11,0,9.02,1.42,2066.67,1330,2075,4.03,2.62,1.84,4.75,3.41,4.75,10.6},2},
{{0.08,0.09,0.09,0.11,0.11,0.1,0.09,0.14,0.14,0.07,0.12,0.09,0.08,0.09,0.13,0.1,0.12,0.09,0.1,0.1,0.08,0.12,0.06,0.11,0.1,0.14,0.14,0.08,0.09,0.1,0,8.96,1.4,1135.71,1600,2650,4.01,2.59,1.69,4.72,3.31,4.72,10.46},2},
{{0.09,0.11,0.05,0.15,0.1,0.09,0.12,0.11,0.14,0.07,0.1,0.12,0.07,0.11,0.08,0.12,0.11,0.1,0.11,0.11,0.1,0.09,0.11,0.14,0.07,0.12,0.1,0.11,0.07,0.12,0,9.09,1.45,1075,991.67,1600,3.94,2.67,1.93,4.67,3.42,4.67,10.65},2},
{{0.1,0.08,0.1,0.1,0.1,0.11,0.1,0.09,0.14,0.11,0.11,0.09,0.1,0.1,0.09,0.1,0.11,0.11,0.14,0.09,0.1,0.08,0.06,0.11,0.11,0.15,0.11,0.11,0.07,0.11,0,9.04,1.43,1675,785,1470,4.06,2.63,1.73,4.8,3.39,4.8,10.59},2},
{{0.09,0.07,0.11,0.13,0.11,0.1,0.12,0.08,0.11,0.11,0.07,0.13,0.09,0.11,0.1,0.12,0.09,0.12,0.07,0.11,0.11,0.07,0.09,0.09,0.11,0.13,0.1,0.12,0.09,0.11,0,9.04,1.39,1575,1022.22,2187.5,3.98,2.6,1.76,4.75,3.41,4.75,10.57},2},
{{0.13,0.09,0.11,0.09,0.14,0.08,0.08,0.09,0.09,0.12,0.14,0.09,0.11,0.11,0.06,0.08,0.12,0.1,0.13,0.09,0.1,0.11,0.12,0.07,0.07,0.16,0.1,0.08,0.09,0.12,0,8.89,1.42,683.33,1680,2625,3.97,2.78,1.95,4.88,3.5,4.88,10.49},2},
{{0.14,0.09,0.09,0.12,0.07,0.08,0.12,0.11,0.09,0.1,0.13,0.09,0.11,0.08,0.08,0.11,0.13,0.09,0.09,0.11,0.11,0.1,0.09,0.11,0.11,0.13,0.11,0.1,0.07,0.11,0,9.06,1.35,1925,813.64,1670,3.87,2.87,1.84,4.66,3.77,4.66,10.58},2},
{{0.13,0.08,0.12,0.08,0.07,0.12,0.12,0.08,0.1,0.12,0.14,0.09,0.11,0.11,0.09,0.09,0.09,0.1,0.08,0.14,0.13,0.11,0.11,0.09,0.1,0.12,0.08,0.09,0.09,0.11,0,9.02,1.26,3175,977.78,1825,4.01,2.98,1.95,4.84,3.83,4.84,10.65},2},
{{0.15,0.1,0.09,0.09,0.11,0.11,0.07,0.11,0.09,0.11,0.1,0.13,0.09,0.09,0.09,0.08,0.12,0.08,0.12,0.12,0.12,0.09,0.11,0.11,0.13,0.1,0.09,0.07,0.11,0.09,0,9.08,1.27,1580,1012.5,3175,3.88,2.83,1.82,4.76,3.63,4.76,10.58},2},
{{0.15,0.1,0.08,0.08,0.14,0.09,0.1,0.07,0.1,0.11,0.11,0.09,0.1,0.12,0.08,0.1,0.11,0.11,0.11,0.11,0.11,0.14,0.1,0.11,0.11,0.07,0.09,0.1,0.11,0.09,0,9.17,1.21,2625,1562.5,3125,3.92,2.69,1.84,4.77,3.48,4.77,10.71},2},
{{0.11,0.12,0.09,0.12,0.1,0.09,0.08,0.08,0.11,0.12,0.1,0.1,0.09,0.13,0.08,0.08,0.1,0.12,0.11,0.11,0.1,0.1,0.1,0.12,0.09,0.11,0.08,0.1,0.11,0.12,0,9.15,1.5,1325,1341.67,1875,3.94,2.67,1.96,4.8,3.37,4.8,10.73},2},
{{0.12,0.08,0.11,0.1,0.1,0.09,0.16,0.07,0.07,0.11,0.09,0.12,0.1,0.08,0.12,0.09,0.1,0.12,0.08,0.12,0.1,0.1,0.14,0.11,0.13,0.07,0.05,0.11,0.1,0.12,0,9.05,1.41,1770,938.89,1062.5,3.84,2.73,1.98,4.63,3.59,4.63,10.59},2},
{{0.1,0.08,0.14,0.1,0.1,0.09,0.1,0.12,0.1,0.1,0.08,0.11,0.11,0.08,0.12,0.09,0.08,0.14,0.11,0.09,0.09,0.09,0.15,0.09,0.12,0.11,0.08,0.09,0.09,0.11,0,9.08,1.4,2187.5,1012.5,1637.5,3.95,2.53,1.9,4.73,3.24,4.73,10.63},2},
{{0.12,0.1,0.09,0.12,0.11,0.14,0.07,0.08,0.09,0.11,0.1,0.1,0.1,0.12,0.11,0.11,0.1,0.08,0.08,0.12,0.1,0.13,0.1,0.09,0.08,0.11,0.14,0.06,0.11,0.11,0,9.02,1.37,816.67,1081.25,1490,3.86,2.62,1.89,4.69,3.42,4.69,10.55},2},
{{0.11,0.11,0.11,0.08,0.1,0.1,0.09,0.1,0.11,0.12,0.11,0.12,0.06,0.14,0.06,0.09,0.12,0.12,0.09,0.11,0.08,0.12,0.11,0.12,0.09,0.11,0.08,0.1,0.1,0.12,0,9.07,1.47,1040,1042.86,1670,3.97,2.72,1.93,4.77,3.5,4.77,10.65},2},
{{0.09,0.15,0.08,0.1,0.09,0.1,0.09,0.1,0.13,0.1,0.07,0.15,0.09,0.1,0.11,0.07,0.11,0.11,0.1,0.11,0.09,0.07,0.13,0.14,0.1,0.1,0.06,0.14,0.08,0.11,0,9.07,1.38,1214.29,850,1100,3.87,2.7,1.84,4.67,3.39,4.67,10.59},2},
{{0.1,0.08,0.12,0.1,0.08,0.11,0.1,0.13,0.1,0.1,0.05,0.16,0.09,0.09,0.12,0.08,0.1,0.13,0.12,0.09,0.09,0.06,0.1,0.12,0.12,0.09,0.1,0.11,0.13,0.11,0,9.09,1.57,3550,1600,2883.33,3.94,2.59,1.94,4.71,3.26,4.71,10.66},2},
{{0.09,0.09,0.11,0.11,0.09,0.11,0.13,0.11,0.11,0.08,0.06,0.12,0.11,0.12,0.11,0.12,0.09,0.12,0.08,0.1,0.09,0.07,0.11,0.12,0.12,0.13,0.09,0.08,0.12,0.1,0,8.99,1.44,1266.67,1081.25,1612.5,3.83,2.43,1.82,4.52,3.14,4.52,10.46},2},
{{0.11,0.09,0.13,0.1,0.06,0.13,0.1,0.07,0.1,0.13,0.07,0.11,0.08,0.12,0.12,0.08,0.13,0.1,0.1,0.11,0.08,0.11,0.11,0.13,0.12,0.12,0.07,0.1,0.08,0.1,0,9.14,1.37,1266.67,1050,2150,4.01,2.58,1.8,4.87,3.3,4.87,10.71},2},
{{0.12,0.11,0.09,0.14,0.1,0.12,0.08,0.09,0.07,0.1,0.14,0.09,0.11,0.07,0.11,0.11,0.06,0.1,0.09,0.15,0.11,0.12,0.13,0.06,0.1,0.1,0.09,0.11,0.1,0.1,0,9.07,1.39,1043.75,1400,1837.5,3.8,2.94,1.93,4.64,3.71,4.64,10.58},2},
{{0.11,0.11,0.1,0.09,0.11,0.08,0.12,0.11,0.1,0.1,0.07,0.12,0.09,0.14,0.09,0.11,0.09,0.12,0.08,0.11,0.1,0.11,0.1,0.09,0.15,0.1,0.1,0.09,0.1,0.1,0,9.07,1.38,1050,1050,3700,3.98,2.55,1.79,4.77,3.31,4.77,10.6},2},
{{0.2,0.09,0.08,0.09,0.11,0.08,0.05,0.09,0.13,0.11,0.16,0.07,0.12,0.07,0.09,0.1,0.1,0.08,0.16,0.07,0.12,0.15,0.08,0.1,0.07,0.04,0.09,0.13,0.12,0.13,0,8.79,1.51,1950,987.5,2250,4.05,2.87,2.16,5,3.71,5,10.52},2},
{{0.15,0.14,0.07,0.04,0.13,0.07,0.1,0.11,0.1,0.12,0.15,0.1,0.1,0.07,0.08,0.09,0.1,0.09,0.14,0.11,0.12,0.12,0.14,0.08,0.08,0.07,0.1,0.13,0.08,0.11,0,9.07,1.3,2100,1333.33,1575,3.94,3,2.04,4.89,3.79,4.89,10.72},2},
{{0.1,0.12,0.08,0.11,0.11,0.09,0.09,0.14,0.05,0.13,0.12,0.09,0.13,0.12,0.12,0.05,0.09,0.11,0.09,0.1,0.13,0.12,0.07,0.11,0.13,0.09,0.09,0.11,0.12,0.07,0,8.85,1.14,1250,640,1600,4.02,2.79,1.76,4.87,3.64,4.87,10.44},2},
{{0.1,0.08,0.14,0.07,0.12,0.09,0.08,0.1,0.14,0.11,0.12,0.07,0.09,0.11,0.08,0.13,0.09,0.1,0.1,0.13,0.12,0.12,0.09,0.09,0.1,0.06,0.11,0.14,0.09,0.09,0,9.15,1.25,1510,1730,2175,4.09,2.8,1.91,4.88,3.62,4.88,10.78},2},
{{0.07,0.15,0.12,0.08,0.11,0.07,0.09,0.12,0.13,0.09,0.09,0.13,0.08,0.08,0.13,0.09,0.13,0.09,0.09,0.1,0.08,0.13,0.09,0.07,0.08,0.12,0.11,0.11,0.12,0.11,0,8.91,1.51,1637.5,1475,1530,3.86,2.56,1.88,4.65,3.31,4.65,10.46},2},
{{0.08,0.11,0.13,0.07,0.1,0.1,0.08,0.13,0.13,0.09,0.11,0.11,0.09,0.08,0.12,0.14,0.09,0.07,0.12,0.08,0.09,0.05,0.09,0.07,0.09,0.12,0.13,0.15,0.11,0.11,0,8.83,1.66,225,1533.33,3233.33,3.95,2.48,1.83,4.73,3.29,4.73,10.47},2},
{{0.06,0.11,0.13,0.1,0.13,0.07,0.1,0.14,0.1,0.08,0.08,0.09,0.12,0.09,0.17,0.12,0.09,0.1,0.09,0.09,0.08,0.08,0.06,0.07,0.1,0.15,0.1,0.14,0.16,0.08,0,8.92,1.63,1250,1750,1737.5,3.88,2.33,1.72,4.63,3.1,4.63,10.41},2},
{{0.06,0.07,0.15,0.11,0.09,0.08,0.15,0.15,0.09,0.07,0.06,0.06,0.12,0.11,0.16,0.13,0.11,0.1,0.11,0.06,0.1,0.08,0.03,0.07,0.11,0.14,0.11,0.12,0.17,0.09,0,8.94,1.64,2483.33,2733.33,2337.5,3.94,2.13,1.79,4.56,2.84,4.56,10.47},2},
{{0.03,0.09,0.16,0.11,0.11,0.14,0.1,0.13,0.07,0.09,0.05,0.11,0.08,0.12,0.16,0.1,0.12,0.11,0.09,0.08,0.07,0.06,0.06,0.07,0.14,0.11,0.12,0.14,0.16,0.09,0,8.97,1.69,2716.67,1250,2700,3.87,2.26,1.73,4.53,3.01,4.53,10.46},2},
{{0.05,0.09,0.14,0.11,0.11,0.11,0.11,0.12,0.07,0.11,0.09,0.07,0.09,0.1,0.17,0.14,0.12,0.07,0.1,0.07,0.1,0.1,0.1,0.1,0.11,0.08,0.09,0.13,0.13,0.08,0,8.86,1.37,3575,2075,2766.67,4.01,2.21,1.75,4.7,3.06,4.7,10.38},2},
{{0.06,0.14,0.11,0.1,0.14,0.09,0.07,0.1,0.1,0.11,0.09,0.11,0.11,0.07,0.13,0.09,0.09,0.14,0.1,0.09,0.1,0.11,0.1,0.11,0.11,0.07,0.12,0.12,0.11,0.08,0,9.01,1.32,1425,1171.43,2150,3.92,2.55,1.77,4.71,3.24,4.71,10.53},2},
{{0.02,0.03,0.05,0.01,0.02,0.04,0.03,0.05,0.03,0.01,0.03,0.02,0.03,0.04,0.03,0.03,0.03,0.03,0.03,0.02,0.02,0.01,0.03,0.03,0.02,0.02,0.04,0.04,0.04,0.03,0,2.2,0.43,516.67,1000,1025,1,1.64,0.44,4.6,7.09,4.6,2.59},2},
{{0.06,0.07,0.12,0.1,0.14,0.12,0.1,0.12,0.07,0.11,0.06,0.16,0.09,0.12,0.08,0.13,0.11,0.13,0.05,0.07,0.12,0.08,0.12,0.08,0.14,0.09,0.12,0.09,0.11,0.07,0,7.96,1.34,1400,625,3225,5.32,6.04,2.8,6.6,6.86,6.6,11.25},0},
{{0.07,0.11,0.08,0.07,0.12,0.14,0.13,0.11,0.12,0.08,0.04,0.12,0.15,0.12,0.1,0.11,0.11,0.09,0.09,0.09,0.06,0.12,0.09,0.09,0.1,0.15,0.17,0.08,0.09,0.07,0,8.15,1.56,3250,720.83,2975,5.39,5.9,2.37,6.4,6.6,6.4,11.09},0},
{{0.11,0.07,0.13,0.11,0.08,0.09,0.11,0.11,0.11,0.1,0.09,0.11,0.14,0.08,0.1,0.11,0.08,0.14,0.07,0.1,0.1,0.11,0.08,0.12,0.13,0.12,0.1,0.1,0.1,0.06,0,8.13,1.26,1475,593.75,1350,5.3,6.29,2.52,6.48,7.08,6.48,11.32},0},
{{0.07,0.12,0.15,0.08,0.08,0.08,0.13,0.09,0.11,0.1,0.08,0.13,0.14,0.09,0.07,0.1,0.13,0.09,0.1,0.09,0.08,0.13,0.1,0.11,0.1,0.07,0.08,0.19,0.11,0.07,0,8.14,1.56,3600,584.38,1616.67,5.2,6.34,2.78,6.44,7.11,6.44,11.36},0},
{{0.11,0.09,0.12,0.11,0.08,0.1,0.05,0.13,0.1,0.13,0.1,0.1,0.09,0.1,0.13,0.07,0.09,0.13,0.09,0.1,0.11,0.1,0.11,0.07,0.12,0.1,0.09,0.09,0.11,0.12,0,8.37,1.56,1466.67,730.77,1675,5.44,6.33,2.84,6.7,7.12,6.7,11.75},0},
{{0.12,0.09,0.12,0.09,0.11,0.07,0.07,0.12,0.14,0.09,0.12,0.08,0.12,0.12,0.08,0.09,0.08,0.12,0.1,0.11,0.12,0.08,0.07,0.11,0.11,0.1,0.09,0.13,0.11,0.1,0,8.2,1.67,1987.5,470.59,2150,5.33,6.62,2.85,6.57,7.37,6.57,11.73},0},
{{0.1,0.11,0.13,0.07,0.08,0.09,0.08,0.11,0.15,0.11,0.09,0.09,0.12,0.1,0.11,0.11,0.1,0.08,0.11,0.11,0.11,0.11,0.08,0.12,0.08,0.1,0.11,0.09,0.13,0.09,0,8.44,1.46,2500,546.88,1066.67,5.51,6.44,2.93,6.69,7.24,6.69,11.8},0},
{{0.1,0.1,0.11,0.07,0.14,0.09,0.1,0.08,0.11,0.12,0.08,0.12,0.09,0.1,0.12,0.09,0.12,0.1,0.11,0.1,0.07,0.1,0.12,0.08,0.13,0.07,0.15,0.08,0.14,0.09,0,8.58,1.71,1720,573.33,1783.33,5.33,6.19,2.7,6.47,6.97,6.47,11.68},0},
{{0.13,0.06,0.1,0.12,0.1,0.13,0.1,0.08,0.08,0.12,0.14,0.07,0.09,0.13,0.1,0.06,0.11,0.09,0.1,0.12,0.12,0.1,0.11,0.07,0.11,0.11,0.07,0.11,0.1,0.12,0,8.27,1.46,2850,643.33,1850,5.39,6.72,2.9,6.56,7.5,6.56,11.74},0},
{{0.11,0.06,0.1,0.09,0.12,0.11,0.09,0.12,0.1,0.12,0.13,0.08,0.11,0.08,0.11,0.11,0.1,0.12,0.1,0.08,0.09,0.13,0.12,0.09,0.07,0.08,0.13,0.1,0.09,0.11,0,8.13,1.6,1192.86,723.08,1050,5.48,6.35,2.96,6.56,7.2,6.56,11.67},0},
{{0.11,0.09,0.1,0.12,0.09,0.09,0.12,0.11,0.11,0.1,0.1,0.11,0.12,0.08,0.12,0.06,0.12,0.09,0.11,0.1,0.08,0.11,0.07,0.1,0.15,0.08,0.15,0.11,0.09,0.08,0,8.12,1.57,2166.67,675,1950,5.34,6.44,2.65,6.41,7.17,6.41,11.47},0},
{{0.12,0.1,0.08,0.07,0.11,0.09,0.09,0.09,0.16,0.1,0.1,0.13,0.11,0.07,0.1,0.1,0.1,0.13,0.1,0.09,0.13,0.09,0.08,0.1,0.11,0.12,0.1,0.11,0.1,0.09,0,8.1,1.42,2875,617.86,816.67,5.54,6.43,2.9,6.53,7.24,6.53,11.73},0},
{{0.1,0.12,0.09,0.1,0.09,0.11,0.09,0.13,0.08,0.11,0.12,0.1,0.1,0.1,0.09,0.1,0.11,0.1,0.09,0.1,0.1,0.1,0.05,0.14,0.08,0.12,0.15,0.09,0.07,0.13,0,7.93,1.74,1900,544.12,1512.5,5.28,6.43,2.71,6.42,7.23,6.42,11.47},0},
{{0.08,0.14,0.1,0.1,0.08,0.1,0.1,0.12,0.12,0.08,0.09,0.07,0.11,0.13,0.11,0.1,0.08,0.12,0.12,0.09,0.07,0.12,0.12,0.09,0.12,0.12,0.11,0.09,0.11,0.08,0,8.51,1.54,2150,543.75,1212.5,5.11,6.2,2.46,6.23,7.01,6.23,11.44},0},
{{0.1,0.12,0.13,0.11,0.11,0.06,0.11,0.09,0.07,0.13,0.12,0.11,0.07,0.12,0.09,0.1,0.14,0.09,0.1,0.07,0.07,0.1,0.14,0.13,0.04,0.1,0.12,0.11,0.13,0.09,0,8,1.72,1933.33,600,2550,5.06,6.25,2.76,6.31,7.13,6.31,11.35},0},
{{0.1,0.14,0.07,0.13,0.09,0.1,0.06,0.11,0.12,0.1,0.12,0.09,0.09,0.1,0.13,0.09,0.07,0.13,0.12,0.07,0.11,0.1,0.09,0.07,0.15,0.14,0.06,0.07,0.1,0.12,0,8.25,1.62,1630,715.38,1558.33,5.31,6.33,2.76,6.49,7.16,6.49,11.68},0},
{{0.13,0.1,0.11,0.11,0.08,0.1,0.07,0.11,0.09,0.13,0.12,0.08,0.1,0.1,0.11,0.09,0.13,0.07,0.12,0.09,0.08,0.12,0.15,0.1,0.08,0.1,0.09,0.1,0.09,0.11,0,8.22,1.54,3133.33,550,2066.67,5.43,6.35,2.83,6.65,7.19,6.65,11.71},0},
{{0.07,0.1,0.14,0.11,0.12,0.08,0.09,0.11,0.13,0.08,0.12,0.09,0.09,0.1,0.1,0.08,0.15,0.08,0.11,0.09,0.09,0.09,0.13,0.1,0.1,0.09,0.09,0.11,0.13,0.09,0,8.31,1.59,2550,665.38,1816.67,4.97,6.24,2.74,6.11,7.06,6.11,11.42},0},
{{0.11,0.08,0.12,0.1,0.11,0.09,0.13,0.1,0.08,0.11,0.11,0.1,0.09,0.11,0.12,0.12,0.1,0.06,0.1,0.1,0.1,0.13,0.13,0.07,0.1,0.1,0.07,0.12,0.1,0.12,0,8.05,1.47,2475,590,1308.33,5.22,6.3,2.92,6.33,7.21,6.33,11.42},0},
{{0.15,0.1,0.08,0.09,0.09,0.13,0.09,0.11,0.08,0.11,0.17,0.08,0.05,0.11,0.1,0.1,0.13,0.09,0.09,0.1,0.1,0.12,0.11,0.11,0.09,0.08,0.09,0.12,0.09,0.12,0,7.88,1.37,1866.67,703.85,925,5.5,6.6,3.03,6.6,7.48,6.6,11.82},0},
{{0.13,0.1,0.08,0.11,0.08,0.08,0.13,0.1,0.08,0.13,0.14,0.06,0.11,0.1,0.1,0.09,0.09,0.09,0.13,0.1,0.13,0.1,0.12,0.09,0.04,0.14,0.08,0.1,0.1,0.12,0,8.23,1.49,1900,489.47,1433.33,5.55,6.66,3.05,6.71,7.5,6.71,11.92},0},
{{0.11,0.11,0.11,0.11,0.09,0.11,0.1,0.08,0.09,0.11,0.12,0.1,0.08,0.11,0.12,0.11,0.08,0.16,0.07,0.08,0.1,0.12,0.11,0.1,0.11,0.06,0.09,0.08,0.12,0.14,0,7.94,1.61,2062.5,720.83,2400,5.19,6.27,3.03,6.41,7.11,6.41,11.42},0},
{{0.12,0.09,0.08,0.1,0.12,0.12,0.11,0.12,0.08,0.09,0.11,0.1,0.1,0.09,0.1,0.09,0.12,0.12,0.1,0.07,0.12,0.1,0.1,0.09,0.08,0.11,0.07,0.12,0.11,0.13,0,8.18,1.75,1850,653.57,2800,5.21,6.28,3,6.23,7.04,6.23,11.58},0},
{{0.09,0.11,0.1,0.11,0.13,0.09,0.14,0.09,0.07,0.1,0.1,0.13,0.09,0.11,0.09,0.1,0.09,0.1,0.14,0.08,0.1,0.12,0.07,0.11,0.08,0.11,0.1,0.12,0.1,0.1,0,8.21,1.62,1375,640,1450,5.02,6.44,2.89,6.1,7.23,6.1,11.5},0},
{{0.11,0.07,0.08,0.1,0.12,0.13,0.1,0.09,0.11,0.11,0.07,0.11,0.08,0.13,0.1,0.11,0.11,0.08,0.1,0.11,0.12,0.08,0.12,0.1,0.09,0.11,0.09,0.11,0.08,0.12,0,8.53,1.55,3575,573.33,3000,5.46,6.09,2.92,6.49,6.91,6.49,11.85},0},
{{0.11,0.12,0.11,0.1,0.08,0.08,0.12,0.09,0.11,0.11,0.09,0.09,0.14,0.09,0.08,0.12,0.11,0.09,0.12,0.1,0.1,0.07,0.13,0.09,0.11,0.1,0.1,0.09,0.11,0.12,0,8.61,1.74,1420,581.25,3550,5.36,6.37,2.93,6.54,7.2,6.54,11.98},0},
{{0.08,0.13,0.09,0.12,0.09,0.09,0.13,0.12,0.09,0.08,0.08,0.13,0.1,0.1,0.09,0.1,0.1,0.07,0.12,0.13,0.11,0.11,0.07,0.13,0.12,0.1,0.11,0.1,0.08,0.11,0,8.5,1.43,3975,529.41,2400,5.08,6.49,2.91,6.1,7.23,6.1,11.71},0},
{{0.12,0.09,0.08,0.12,0.1,0.11,0.12,0.08,0.11,0.08,0.11,0.1,0.11,0.11,0.08,0.1,0.07,0.11,0.13,0.11,0.11,0.08,0.09,0.12,0.1,0.1,0.08,0.14,0.08,0.14,0,8.33,1.75,1700,511.11,683.33,5.23,6.67,2.79,6.34,7.4,6.34,11.73},0},
{{0.07,0.14,0.09,0.1,0.13,0.1,0.1,0.09,0.12,0.09,0.08,0.11,0.11,0.1,0.09,0.11,0.08,0.09,0.13,0.11,0.08,0.1,0.06,0.14,0.13,0.11,0.1,0.1,0.1,0.1,0,8.74,1.66,725,573.53,2137.5,5.13,6.48,2.58,6.22,7.22,6.22,11.79},0},
{{0.09,0.13,0.08,0.11,0.11,0.12,0.08,0.12,0.08,0.11,0.11,0.1,0.12,0.12,0.07,0.09,0.08,0.08,0.13,0.12,0.13,0.09,0.11,0.15,0.07,0.04,0.12,0.09,0.12,0.1,0,8.3,1.41,3150,568.75,3700,5.2,6.7,3.15,6.25,7.39,6.25,11.62},0},
{{0.03,0.04,0.05,0.11,0.08,0.12,0.08,0.04,0.02,0.02,0.02,0.02,0.04,0.06,0.07,0.22,0.06,0.03,0.04,0.04,0.05,0.03,0.07,0.13,0.08,0.07,0.08,0.02,0.02,0.05,0,5.25,0.69,900,600,900,2.39,3.09,1.34,5.02,6.48,5.02,6.4},0},
{{0.14,0.13,0.13,0.11,0.08,0.07,0.1,0.07,0.13,0.06,0.1,0.11,0.13,0.09,0.11,0.13,0.04,0.11,0.11,0.1,0.11,0.08,0.11,0.12,0.1,0.09,0.07,0.08,0.13,0.13,0,9,-1.51,1725,1441.67,4850,2.97,1.79,2.1,3.49,2.34,3.49,10.11},5},
{{0.1,0.1,0.08,0.07,0.12,0.13,0.09,0.11,0.16,0.07,0.08,0.13,0.11,0.14,0.08,0.13,0.06,0.1,0.09,0.1,0.07,0.14,0.1,0.1,0.11,0.1,0.1,0.09,0.08,0.14,0,9.03,-1.56,3050,1141.67,2062.5,2.6,1.79,1.96,3.09,2.37,3.09,9.97},5},
{{0.1,0.09,0.14,0.08,0.13,0.08,0.12,0.09,0.06,0.14,0.1,0.13,0.07,0.09,0.1,0.12,0.1,0.11,0.1,0.1,0.13,0.08,0.1,0.12,0.08,0.1,0.1,0.12,0.09,0.1,0,9.01,-1.78,2675,2483.33,1200,2.79,1.77,2.06,3.25,2.34,3.25,10.07},5},
{{0.15,0.1,0.13,0.06,0.12,0.09,0.09,0.09,0.08,0.1,0.11,0.1,0.11,0.09,0.08,0.11,0.09,0.13,0.09,0.11,0.1,0.08,0.11,0.09,0.11,0.1,0.11,0.11,0.12,0.1,0,9.05,-1.58,925,1180,4050,3.04,1.87,1.97,3.56,2.48,3.56,10.14},5},
{{0.13,0.11,0.14,0.11,0.08,0.09,0.11,0.09,0.08,0.08,0.14,0.09,0.08,0.11,0.08,0.08,0.15,0.1,0.09,0.11,0.09,0.09,0.1,0.1,0.1,0.1,0.1,0.11,0.1,0.13,0,9.08,-1.48,3250,2600,4175,3.04,1.92,1.9,3.52,2.59,3.52,10.14},5},
{{0.1,0.12,0.1,0.11,0.13,0.08,0.12,0.09,0.08,0.11,0.1,0.08,0.09,0.1,0.16,0.08,0.11,0.09,0.15,0.07,0.11,0.09,0.1,0.09,0.14,0.06,0.12,0.1,0.12,0.1,0,9,-1.69,2825,1500,775,2.86,1.62,1.97,3.31,2.11,3.31,10.03},5},
{{0.06,0.11,0.08,0.08,0.08,0.11,0.13,0.1,0.14,0.12,0.09,0.1,0.1,0.11,0.11,0.1,0.1,0.09,0.08,0.13,0.11,0.11,0.12,0.08,0.15,0.08,0.07,0.09,0.08,0.12,0,9.14,-1.66,2533.33,1766.67,466.67,2.51,1.86,2.18,2.98,2.46,2.98,10.17},5},
{{0.09,0.09,0.07,0.15,0.11,0.08,0.09,0.12,0.13,0.08,0.09,0.11,0.11,0.11,0.11,0.07,0.11,0.12,0.09,0.11,0.09,0.08,0.11,0.12,0.09,0.13,0.09,0.12,0.07,0.11,0,9.08,-1.61,1250,1875,1050,2.65,1.84,1.91,3.19,2.43,3.19,10.05},5},
{{0.06,0.11,0.09,0.12,0.1,0.13,0.1,0.1,0.14,0.07,0.07,0.12,0.09,0.09,0.11,0.12,0.12,0.08,0.12,0.1,0.09,0.1,0.1,0.13,0.1,0.11,0.11,0.1,0.1,0.1,0,9.09,-1.65,3925,2216.67,600,2.62,1.7,1.9,3.09,2.27,3.09,10.03},5},
{{0.08,0.11,0.07,0.12,0.09,0.12,0.05,0.15,0.08,0.15,0.13,0.1,0.09,0.1,0.11,0.11,0.11,0.08,0.07,0.11,0.12,0.13,0.1,0.09,0.07,0.14,0.08,0.11,0.11,0.07,0,8.97,-1.95,2200,1028.57,375,2.67,1.88,2.13,3.16,2.57,3.16,10.06},5},
{{0.11,0.08,0.11,0.09,0.09,0.15,0.09,0.12,0.09,0.1,0.07,0.07,0.1,0.14,0.13,0.1,0.12,0.11,0.09,0.1,0.07,0.14,0.08,0.1,0.11,0.09,0.12,0.15,0.08,0.08,0,9.13,-1.69,1925,1264.29,610,2.8,1.65,1.88,3.3,2.25,3.3,10.11},5},
{{0.06,0.09,0.08,0.14,0.1,0.09,0.13,0.1,0.08,0.15,0.12,0.09,0.11,0.09,0.09,0.11,0.09,0.09,0.14,0.1,0.11,0.1,0.13,0.09,0.1,0.08,0.11,0.1,0.13,0.08,0,9.08,-1.79,1850,2550,1950,2.6,1.96,2.06,3.04,2.53,3.04,10.09},5},
{{0.09,0.08,0.14,0.1,0.07,0.13,0.09,0.1,0.12,0.09,0.07,0.12,0.11,0.1,0.08,0.09,0.13,0.14,0.1,0.08,0.11,0.09,0.09,0.09,0.11,0.12,0.11,0.13,0.08,0.1,0,9.07,-1.62,2725,1383.33,975,2.72,1.7,1.98,3.21,2.26,3.21,10.06},5},
{{0.02,0.02,0.04,0.02,0,0.02,0.02,0.01,0.03,0.04,0.03,0.01,0.02,0.01,0.02,0.02,0.01,0.03,0.04,0.03,0.02,0.02,0.01,0.01,0.03,0.01,0.02,0.02,0.02,0.04,0,1.75,-0.11,350,700,150,0.49,1.43,0.48,3.14,8.27,3.14,1.96},5},
{{0.08,0.11,0.13,0.14,0.11,0.12,0.09,0.1,0.06,0.08,0.06,0.11,0.12,0.1,0.11,0.12,0.1,0.1,0.11,0.09,0.07,0.1,0.1,0.1,0.12,0.08,0.08,0.13,0.15,0.08,0,8.88,-1.57,4300,4275,550,3.56,2.15,1.44,4.19,2.8,4.19,10.05},1},
{{0.08,0.13,0.13,0.09,0.11,0.09,0.07,0.1,0.11,0.12,0.06,0.12,0.07,0.1,0.12,0.14,0.11,0.12,0.08,0.1,0.09,0.1,0.06,0.1,0.12,0.12,0.1,0.1,0.12,0.1,0,8.99,-1.55,1125,1575,925,3.32,2.24,1.5,4.02,2.93,4.02,10.11},1},
{{0.09,0.11,0.08,0.12,0.11,0.12,0.11,0.12,0.08,0.07,0.11,0.08,0.12,0.12,0.08,0.12,0.12,0.09,0.08,0.1,0.12,0.1,0.13,0.1,0.07,0.1,0.13,0.13,0.07,0.08,0,8.82,-1.85,700,1225,1925,3.38,2.34,1.49,3.99,3.12,3.99,9.97},1},
{{0.11,0.08,0.09,0.06,0.1,0.11,0.13,0.07,0.13,0.14,0.09,0.11,0.07,0.1,0.11,0.13,0.07,0.1,0.1,0.13,0.11,0.13,0.13,0.11,0.08,0.13,0.08,0.06,0.08,0.12,0,9.06,-1.92,2450,1420,550,3.17,2.48,1.52,4.03,3.15,4.03,10.2},1},
{{0.11,0.11,0.09,0.1,0.09,0.09,0.13,0.12,0.09,0.11,0.12,0.08,0.11,0.12,0.09,0.08,0.12,0.11,0.11,0.08,0.1,0.1,0.1,0.09,0.09,0.09,0.12,0.13,0.09,0.12,0,8.87,-1.68,2475,2200,525,3.4,2.36,1.59,4.2,3.1,4.2,10.03},1},
{{0.12,0.07,0.09,0.07,0.11,0.08,0.07,0.06,0.15,0.12,0.16,0.09,0.08,0.11,0.04,0.06,0.07,0.08,0.13,0.12,0.11,0.06,0.1,0.12,0.12,0.05,0.09,0.09,0.08,0.12,0,8.28,-1.52,775,1083.33,3550,3.07,2.6,1.55,4.18,3.66,4.18,9.43},1},
{{0.15,0.13,0.09,0.11,0.13,0.07,0.09,0.12,0.08,0.06,0.05,0.09,0.11,0.09,0.1,0.14,0.14,0.09,0.12,0.09,0.09,0.12,0.08,0.1,0.07,0.12,0.1,0.15,0.15,0.04,0,9.22,-1.36,1850,1450,2575,2.61,1.77,1.96,3.12,2.37,3.12,10.12},5},
{{0.12,0.12,0.12,0.08,0.13,0.1,0.07,0.08,0.12,0.1,0.07,0.11,0.08,0.09,0.08,0.14,0.1,0.1,0.12,0.13,0.12,0.1,0.15,0.09,0.12,0.14,0.09,0.08,0.1,0.04,0,9.27,-1.84,1225,1820,1250,2.49,2.03,1.95,2.99,2.63,2.99,10.23},5},
{{0.1,0.08,0.13,0.1,0.09,0.08,0.14,0.11,0.11,0.08,0.08,0.07,0.09,0.1,0.11,0.12,0.11,0.11,0.11,0.12,0.1,0.1,0.09,0.11,0.1,0.12,0.1,0.16,0.12,0.02,0,9.31,-1.58,1225,870,1425,2.35,1.94,1.92,2.87,2.56,2.87,10.17},5},
{{0.07,0.09,0.09,0.13,0.09,0.11,0.1,0.11,0.11,0.12,0.08,0.07,0.12,0.15,0.1,0.08,0.1,0.09,0.13,0.1,0.12,0.13,0.11,0.09,0.15,0.1,0.12,0.06,0.12,0.02,0,9.15,-1.94,4525,1150,950,2.23,2.01,1.89,2.62,2.64,2.62,10.04},5},
{{0.1,0.13,0.09,0.1,0.1,0.09,0.08,0.11,0.09,0.14,0.07,0.12,0.1,0.1,0.1,0.09,0.11,0.11,0.08,0.12,0.12,0.11,0.13,0.14,0.08,0.12,0.12,0.08,0.11,0.02,0,9.19,-1.94,1900,1700,625,2.44,2.08,1.98,2.96,2.71,2.96,10.18},5},
{{0.12,0.11,0.09,0.08,0.14,0.1,0.08,0.1,0.09,0.12,0.06,0.11,0.11,0.08,0.12,0.09,0.11,0.12,0.11,0.09,0.09,0.1,0.09,0.12,0.12,0.11,0.15,0.1,0.1,0.03,0,9.27,-1.61,483.33,1060,875,2.51,2.07,1.81,3.02,2.79,3.02,10.18},5},
{{0.03,0.04,0.06,0.09,0.08,0.14,0.09,0.08,0.11,0.1,0.28,0.11,0.06,0.1,0.05,0.06,0.03,0.04,0.05,0.04,0.04,0.04,0.02,0.05,0.02,0.02,0.02,0.03,0.02,0.51,0,5.57,3.59,325,833.33,883.33,1.56,2.01,3.6,2.31,3.22,2.31,8.13},5},
{{0.09,0.1,0.13,0.09,0.11,0.1,0.11,0.1,0.1,0.1,0.1,0.09,0.08,0.14,0.12,0.08,0.11,0.13,0.08,0.09,0.09,0.1,0.08,0.1,0.1,0.12,0.15,0.08,0.06,0.11,0,9.03,-1.46,1875,1031.25,2337.5,2.57,2.46,1.77,3.2,3.22,3.2,10.05},1},
{{0.11,0.11,0.08,0.09,0.11,0.09,0.1,0.1,0.1,0.14,0.11,0.08,0.12,0.1,0.1,0.1,0.07,0.1,0.15,0.09,0.06,0.11,0.13,0.15,0.07,0.09,0.08,0.15,0.09,0.09,0,9.29,-1.74,475,4175,450,2.74,2.71,1.58,3.53,3.36,3.53,10.23},1},
{{0.1,0.11,0.13,0.11,0.11,0.1,0.1,0.08,0.11,0.08,0.08,0.1,0.08,0.1,0.1,0.15,0.11,0.13,0.1,0.08,0.1,0.11,0.09,0.08,0.08,0.09,0.1,0.08,0.16,0.14,0,9.25,-1.45,3825,1287.5,4050,2.81,2.34,1.87,3.5,3.04,3.5,10.21},1},
{{0.09,0.09,0.08,0.12,0.1,0.1,0.11,0.12,0.11,0.11,0.11,0.12,0.09,0.11,0.11,0.07,0.12,0.08,0.08,0.13,0.13,0.09,0.09,0.09,0.1,0.13,0.12,0.06,0.12,0.09,0,9.09,-1.88,1125,1583.33,1650,2.63,2.69,1.72,3.54,3.44,3.54,10.11},1},
{{0.1,0.11,0.1,0.1,0.1,0.09,0.13,0.09,0.09,0.1,0.08,0.12,0.11,0.11,0.07,0.12,0.12,0.08,0.1,0.1,0.12,0.1,0.08,0.1,0.12,0.11,0.09,0.12,0.12,0.07,0,9.22,-1.88,2050,2337.5,2100,2.83,2.61,1.58,3.73,3.36,3.73,10.18},1},
{{0.07,0.05,0.04,0.03,0.04,0.05,0.05,0.06,0.06,0.03,0.07,0.05,0.04,0.04,0.05,0.04,0.05,0.05,0.04,0.07,0.06,0.04,0.08,0.04,0.04,0.06,0.05,0.04,0.03,0.06,0,4.32,-0.88,1825,557.14,1400,1.37,2.38,0.94,3.8,6.04,3.8,4.83},1},
{{0.09,0.11,0.11,0.12,0.11,0.09,0.13,0.12,0.11,0.05,0.08,0.13,0.1,0.1,0.1,0.11,0.08,0.13,0.08,0.12,0.11,0.08,0.11,0.12,0.06,0.07,0.11,0.1,0.12,0.14,0,9.18,-1.55,175,918.75,1866.67,2.54,1.99,2.07,2.99,2.61,2.99,10.12},5},
{{0.13,0.06,0.07,0.08,0.12,0.11,0.11,0.09,0.13,0.13,0.12,0.08,0.11,0.08,0.1,0.11,0.09,0.08,0.13,0.12,0.1,0.11,0.14,0.1,0.08,0.08,0.1,0.08,0.09,0.14,0,9.13,-1.72,675,1533.33,583.33,2.57,2.18,2.13,3.19,2.88,3.19,10.16},5},
{{0.08,0.13,0.12,0.1,0.08,0.1,0.09,0.12,0.1,0.1,0.12,0.09,0.12,0.07,0.12,0.07,0.11,0.12,0.11,0.09,0.11,0.1,0.11,0.11,0.12,0.12,0.08,0.1,0.09,0.08,0,9.13,-1.94,1750,3825,1216.67,2.52,2.08,1.92,2.99,2.7,2.99,10.13},5},
{{0.1,0.12,0.11,0.07,0.08,0.11,0.11,0.13,0.12,0.08,0.1,0.1,0.11,0.09,0.09,0.11,0.1,0.12,0.11,0.09,0.1,0.11,0.11,0.09,0.11,0.13,0.07,0.1,0.12,0.08,0,9.05,-1.81,1850,1250,2083.33,2.53,1.93,1.94,3.11,2.53,3.11,10.04},5},
{{0.11,0.1,0.08,0.11,0.15,0.11,0.12,0.07,0.08,0.09,0.06,0.11,0.1,0.11,0.1,0.13,0.1,0.12,0.08,0.09,0.09,0.1,0.08,0.1,0.13,0.09,0.12,0.14,0.12,0.06,0,9.21,-1.67,2025,2325,975,2.61,1.82,1.79,3.08,2.51,3.08,10.12},5},
{{0.09,0.1,0.14,0.08,0.11,0.11,0.07,0.1,0.09,0.13,0.11,0.1,0.08,0.11,0.14,0.08,0.1,0.1,0.11,0.09,0.11,0.12,0.06,0.09,0.13,0.11,0.1,0.12,0.09,0.09,0,9,-1.85,2700,1064.29,350,2.64,1.98,2.11,3.11,2.63,3.11,10.09},5},
{{0.05,0.05,0.03,0.03,0.03,0.04,0.04,0.05,0.04,0.08,0.06,0.03,0.06,0.04,0.05,0.05,0.02,0.04,0.04,0.06,0.03,0.02,0.05,0.03,0.05,0.04,0.03,0.06,0.05,0.08,0,4.27,-0.27,300,766.67,425,1.18,2.38,0.9,3.14,6.29,3.14,4.69},5},
{{0.14,0.18,0.15,0.14,0.1,0.07,0.09,0.07,0.05,0.04,0.16,0.12,0.12,0.08,0.12,0.07,0.06,0.1,0.1,0.09,0.13,0.06,0.08,0.06,0.07,0.13,0.12,0.08,0.15,0.13,0,8.51,-1.51,2175,1175,2825,4.29,2.76,1.83,5.04,3.57,5.04,10.24},1},
{{0.1,0.09,0.11,0.13,0.13,0.11,0.15,0.05,0.07,0.09,0.09,0.08,0.12,0.11,0.13,0.12,0.09,0.11,0.1,0.08,0.09,0.1,0.09,0.08,0.1,0.11,0.1,0.12,0.13,0.11,0,8.81,-1.57,1075,1275,475,3.43,2.41,1.72,4.15,3.16,4.15,10.01},1},
{{0.1,0.11,0.11,0.1,0.1,0.1,0.08,0.13,0.08,0.11,0.11,0.11,0.09,0.09,0.12,0.07,0.12,0.13,0.07,0.11,0.1,0.09,0.09,0.1,0.13,0.09,0.12,0.11,0.1,0.1,0,8.89,-1.7,725,666.67,1050,3.29,2.71,1.77,4.08,3.49,4.08,10.12},1},
{{0.1,0.09,0.09,0.09,0.07,0.09,0.11,0.12,0.12,0.15,0.09,0.11,0.11,0.13,0.1,0.1,0.08,0.08,0.12,0.11,0.1,0.11,0.11,0.12,0.15,0.09,0.1,0.1,0.08,0.07,0,8.99,-1.94,1075,925,450,3.04,2.74,1.6,4,3.38,4,10.14},1},
{{0.07,0.11,0.09,0.07,0.11,0.11,0.1,0.1,0.14,0.11,0.09,0.12,0.06,0.08,0.11,0.12,0.12,0.1,0.12,0.1,0.09,0.11,0.13,0.12,0.12,0.12,0.09,0.09,0.09,0.06,0,9,-2.02,1550,2675,500,2.99,2.52,1.5,3.84,3.17,3.84,10.09},1},
{{0.1,0.07,0.06,0.09,0.1,0.11,0.13,0.13,0.13,0.09,0.08,0.08,0.11,0.09,0.1,0.12,0.13,0.1,0.1,0.12,0.1,0.13,0.1,0.13,0.09,0.08,0.08,0.12,0.08,0.11,0,9.09,-1.81,3050,1500,750,3.03,2.68,1.87,3.97,3.52,3.97,10.29},1},
{{0.03,0.02,0.04,0.03,0.05,0.03,0.04,0.06,0.05,0.08,0.03,0.03,0.04,0.05,0.04,0.05,0.06,0.05,0.04,0.05,0.04,0.04,0.05,0.04,0.03,0.05,0.03,0.02,0.04,0.08,0,3.8,-0.56,837.5,725,383.33,1.06,2.28,0.97,3.54,6.53,3.54,4.23},1},
{{0.04,0.06,0.09,0.08,0.1,0.09,0.11,0.15,0.15,0.13,0.04,0.18,0.1,0.13,0.1,0.18,0.07,0.05,0.13,0.04,0.1,0.1,0.1,0.12,0.12,0.13,0.08,0.08,0.07,0.12,0,9.95,-0.54,2025,1164.29,3050,5.37,3.32,2.35,6.94,4.15,6.94,12.27},2},
{{0.06,0.07,0.06,0.09,0.1,0.07,0.1,0.19,0.16,0.12,0.1,0.13,0.12,0.08,0.14,0.12,0.1,0.06,0.1,0.05,0.1,0.11,0.13,0.12,0.06,0.09,0.11,0.1,0.1,0.11,0,9.98,-0.62,1590,600,4475,5.26,3.74,2.47,6.71,4.75,6.71,12.26},2},
{{0.06,0.06,0.1,0.11,0.1,0.09,0.08,0.14,0.16,0.12,0.08,0.17,0.1,0.12,0.09,0.12,0.1,0.05,0.11,0.09,0.13,0.11,0.1,0.09,0.11,0.08,0.07,0.1,0.12,0.11,0,10.03,-0.71,1242.86,620,1950,5.09,3.99,2.63,6.66,4.93,6.66,12.33},2},
{{0.07,0.08,0.07,0.12,0.1,0.09,0.11,0.13,0.13,0.13,0.09,0.13,0.09,0.09,0.12,0.1,0.12,0.07,0.13,0.07,0.1,0.1,0.14,0.09,0.08,0.1,0.09,0.1,0.12,0.1,0,10.31,-0.51,1975,635.71,2966.67,4.98,3.86,2.54,6.58,4.87,6.58,12.46},2},
{{0.09,0.07,0.1,0.1,0.09,0.07,0.13,0.1,0.14,0.12,0.08,0.12,0.11,0.09,0.11,0.13,0.1,0.11,0.09,0.07,0.09,0.1,0.08,0.12,0.09,0.11,0.11,0.09,0.14,0.09,0,10.24,-0.5,1966.67,809.09,3950,5.21,3.69,2.36,6.68,4.7,6.68,12.41},2},
{{0.08,0.08,0.1,0.09,0.12,0.12,0.12,0.08,0.1,0.12,0.12,0.11,0.08,0.11,0.1,0.09,0.13,0.07,0.1,0.09,0.12,0.12,0.07,0.12,0.11,0.07,0.11,0.09,0.08,0.12,0,10.29,-0.56,1458.33,457.5,2450,4.83,4.07,2.67,6.38,5.12,6.38,12.42},2},
{{0.08,0.1,0.09,0.09,0.12,0.12,0.12,0.07,0.15,0.09,0.13,0.11,0.08,0.1,0.08,0.15,0.12,0.06,0.07,0.11,0.09,0.1,0.08,0.13,0.11,0.1,0.07,0.09,0.13,0.11,0,10.25,-0.42,1425,480,2400,4.65,4.03,2.51,6,5.08,6,12.19},2},
{{0.05,0.1,0.1,0.12,0.16,0.08,0.13,0.08,0.11,0.1,0.03,0.18,0.1,0.1,0.16,0.08,0.11,0.07,0.1,0.07,0.07,0.15,0.08,0.1,0.1,0.11,0.12,0.08,0.1,0.11,0,10.34,-0.46,2283.33,522.22,3000,4.5,3.6,2.23,6.08,4.59,6.08,12.09},2},
{{0.08,0.1,0.12,0.09,0.11,0.12,0.1,0.11,0.1,0.1,0.06,0.12,0.1,0.14,0.06,0.14,0.15,0.07,0.08,0.09,0.1,0.12,0.08,0.12,0.15,0.09,0.06,0.07,0.14,0.1,0,10.37,-0.58,1950,565.63,2975,4.64,3.69,2.37,6.02,4.69,6.02,12.21},2},
{{0.11,0.09,0.11,0.07,0.12,0.11,0.13,0.09,0.1,0.09,0.08,0.11,0.1,0.11,0.11,0.13,0.11,0.09,0.08,0.09,0.09,0.12,0.11,0.09,0.11,0.1,0.1,0.09,0.09,0.13,0,10.39,-0.52,1590,526.47,2950,4.75,3.72,2.35,6.2,4.72,6.2,12.25},2},
{{0.12,0.1,0.11,0.09,0.07,0.11,0.12,0.13,0.07,0.11,0.14,0.05,0.08,0.09,0.12,0.15,0.08,0.1,0.12,0.09,0.12,0.07,0.08,0.09,0.15,0.11,0.08,0.12,0.09,0.12,0,10.54,-0.53,2566.67,603.13,1425,4.86,3.88,2.28,6.15,4.98,6.15,12.46},2},
{{0.09,0.12,0.09,0.11,0.15,0.1,0.12,0.06,0.11,0.09,0.11,0.12,0.11,0.09,0.09,0.11,0.09,0.1,0.09,0.09,0.09,0.09,0.1,0.12,0.13,0.1,0.09,0.1,0.08,0.13,0,10.14,-0.46,1458.33,497.37,2450,4.47,4.11,2.29,6.07,5.1,6.07,11.92},2},
{{0.1,0.09,0.15,0.08,0.1,0.09,0.12,0.12,0.09,0.09,0.1,0.08,0.13,0.1,0.11,0.11,0.1,0.09,0.12,0.09,0.09,0.1,0.07,0.12,0.13,0.1,0.11,0.1,0.1,0.1,0,10.44,-0.45,2266.67,514.71,1687.5,4.63,3.87,2.28,5.95,4.89,5.95,12.22},2},
{{0.1,0.14,0.09,0.07,0.13,0.15,0.09,0.07,0.11,0.08,0.07,0.14,0.1,0.1,0.07,0.16,0.07,0.12,0.11,0.08,0.08,0.08,0.1,0.1,0.13,0.08,0.08,0.12,0.13,0.11,0,10.52,-0.21,1700,532.35,1700,4.53,3.8,2.46,5.9,4.77,5.9,12.22},2},
{{0.11,0.11,0.13,0.11,0.08,0.12,0.1,0.11,0.1,0.07,0.11,0.09,0.08,0.1,0.14,0.08,0.1,0.13,0.08,0.1,0.09,0.09,0.09,0.13,0.14,0.09,0.1,0.1,0.13,0.08,0,10.55,-0.46,2175,486.11,3850,4.7,4.02,2.23,6.16,5.1,6.16,12.39},2},
{{0.14,0.1,0.08,0.12,0.08,0.11,0.13,0.09,0.1,0.08,0.12,0.06,0.09,0.14,0.1,0.08,0.09,0.14,0.09,0.11,0.05,0.09,0.11,0.16,0.12,0.14,0.08,0.07,0.07,0.14,0,10.54,-0.31,2000,544.44,2450,4.63,4.1,2.11,5.88,5.13,5.88,12.27},2},
{{0.11,0.12,0.12,0.07,0.13,0.12,0.09,0.1,0.08,0.09,0.11,0.08,0.09,0.13,0.08,0.1,0.11,0.15,0.1,0.08,0.09,0.09,0.12,0.09,0.09,0.14,0.12,0.1,0.08,0.11,0,10.48,-0.58,1560,628.57,2300,4.7,3.86,2.18,6.12,4.89,6.12,12.3},2},
{{0.1,0.14,0.08,0.18,0.08,0.11,0.11,0.06,0.08,0.09,0.1,0.11,0.11,0.07,0.11,0.09,0.09,0.13,0.11,0.1,0.09,0.11,0.15,0.08,0.09,0.11,0.13,0.1,0.09,0.08,0,10.65,-0.78,1737.5,515.79,3425,4.47,4,2.3,6.09,4.94,6.09,12.44},2},
{{0.12,0.1,0.12,0.09,0.12,0.09,0.11,0.1,0.06,0.12,0.13,0.06,0.1,0.12,0.08,0.08,0.11,0.15,0.1,0.09,0.1,0.11,0.08,0.09,0.1,0.14,0.1,0.12,0.11,0.08,0,10.58,-0.62,1583.33,497.22,1900,4.74,4.26,2.25,6.13,5.33,6.13,12.5},2},
{{0.15,0.09,0.11,0.08,0.07,0.11,0.13,0.08,0.1,0.11,0.13,0.1,0.1,0.09,0.09,0.1,0.05,0.17,0.07,0.12,0.12,0.09,0.08,0.06,0.11,0.14,0.11,0.12,0.13,0.07,0,10.34,-0.66,1700,472.5,950,5.08,4.41,2.21,6.49,5.48,6.49,12.44},2},
{{0.11,0.12,0.13,0.13,0.09,0.07,0.11,0.09,0.06,0.11,0.1,0.1,0.1,0.11,0.09,0.08,0.12,0.14,0.09,0.09,0.1,0.12,0.09,0.08,0.09,0.11,0.14,0.15,0.1,0.05,0,10.48,-0.85,2250,537.5,2900,4.65,4,2.08,6.16,4.98,6.16,12.31},2},
{{0.11,0.09,0.1,0.09,0.12,0.12,0.12,0.09,0.1,0.09,0.12,0.08,0.09,0.09,0.08,0.11,0.13,0.11,0.11,0.09,0.1,0.09,0.11,0.1,0.08,0.11,0.13,0.09,0.12,0.09,0,10.53,-0.58,1925,561.76,475,4.72,4.11,2.29,6.14,5.22,6.14,12.45},2},
{{0.14,0.1,0.07,0.1,0.11,0.11,0.11,0.09,0.1,0.1,0.13,0.09,0.1,0.09,0.09,0.07,0.11,0.16,0.09,0.1,0.13,0.09,0.11,0.08,0.12,0.11,0.08,0.09,0.09,0.12,0,10.37,-0.71,1000,502.63,3350,4.77,4.31,2.45,6.13,5.32,6.13,12.4},2},
{{0.15,0.12,0.06,0.1,0.1,0.06,0.1,0.12,0.09,0.12,0.13,0.06,0.15,0.1,0.06,0.07,0.07,0.13,0.13,0.1,0.12,0.1,0.1,0.1,0.07,0.08,0.15,0.09,0.12,0.09,0,10.43,-0.67,1310,470,2325,5.38,4.59,2.44,6.85,5.62,6.85,12.81},2},
{{0.11,0.12,0.07,0.14,0.1,0.11,0.08,0.09,0.09,0.1,0.12,0.07,0.11,0.1,0.09,0.08,0.1,0.15,0.09,0.11,0.14,0.1,0.12,0.09,0.07,0.1,0.1,0.12,0.08,0.11,0,10.51,-0.89,2187.5,536.11,1475,4.81,4.25,2.56,6.45,5.34,6.45,12.62},2},
{{0.08,0.1,0.11,0.15,0.14,0.1,0.09,0.08,0.09,0.08,0.08,0.1,0.1,0.12,0.15,0.12,0.1,0.08,0.1,0.06,0.07,0.15,0.09,0.09,0.06,0.14,0.12,0.11,0.08,0.11,0,10.24,-0.59,3250,555,2325,4.11,3.49,2.35,5.57,4.57,5.57,11.97},2},
{{0.11,0.13,0.07,0.14,0.07,0.08,0.1,0.11,0.1,0.11,0.1,0.08,0.1,0.12,0.1,0.08,0.14,0.06,0.12,0.09,0.12,0.08,0.12,0.1,0.09,0.11,0.1,0.1,0.13,0.08,0,10.58,-0.68,1520,450,1875,4.88,4.08,2.35,6.39,5.17,6.39,12.58},2},
{{0.09,0.1,0.13,0.13,0.09,0.13,0.07,0.09,0.08,0.12,0.14,0.07,0.13,0.1,0.08,0.06,0.1,0.1,0.1,0.11,0.13,0.09,0.09,0.08,0.11,0.07,0.12,0.12,0.13,0.09,0,10.26,-0.69,1875,372,2800,4.79,4.65,2.48,6.44,5.77,6.44,12.46},2},
{{0.12,0.13,0.1,0.11,0.09,0.09,0.08,0.11,0.09,0.11,0.11,0.11,0.09,0.08,0.13,0.08,0.06,0.11,0.11,0.11,0.16,0.1,0.11,0.08,0.1,0.08,0.08,0.1,0.11,0.11,0,10.49,-0.88,1837.5,419.57,1400,4.96,4.66,2.59,6.49,5.83,6.49,12.7},2},
{{0.13,0.1,0.09,0.07,0.11,0.09,0.07,0.13,0.1,0.12,0.14,0.07,0.09,0.09,0.1,0.08,0.1,0.13,0.09,0.11,0.09,0.11,0.12,0.08,0.1,0.07,0.09,0.13,0.14,0.09,0,10.43,-0.54,2775,507.89,1875,5.09,4.37,2.43,6.43,5.55,6.43,12.6},2},
{{0.15,0.11,0.12,0.11,0.09,0.09,0.07,0.07,0.11,0.11,0.1,0.13,0.07,0.09,0.11,0.1,0.09,0.11,0.1,0.11,0.09,0.12,0.13,0.11,0.1,0.1,0.09,0.09,0.1,0.09,0,10.56,-0.82,1650,522.22,3775,5.19,4.12,2.29,6.7,5.17,6.7,12.76},2},
{{0.12,0.14,0.11,0.1,0.1,0.08,0.09,0.12,0.08,0.09,0.08,0.11,0.09,0.14,0.08,0.08,0.1,0.14,0.11,0.08,0.08,0.1,0.11,0.08,0.1,0.11,0.12,0.1,0.07,0.15,0,10.63,-0.34,983.33,700,2650,4.74,3.89,2.45,6.09,4.83,6.09,12.53},2},
{{0.1,0.13,0.15,0.09,0.06,0.1,0.07,0.1,0.13,0.11,0.08,0.11,0.1,0.13,0.05,0.12,0.12,0.09,0.12,0.07,0.11,0.06,0.11,0.11,0.08,0.09,0.17,0.09,0.1,0.12,0,10.58,-0.46,1360,626.67,2037.5,5.04,3.97,2.44,6.49,4.95,6.49,12.59},2},
{{0.01,0.04,0.04,0.03,0.07,0.06,0.02,0.02,0.04,0.01,0.01,0.04,0.03,0.05,0.05,0.05,0.03,0.02,0.04,0.02,0.04,0.05,0.03,0.05,0.03,0.03,0.04,0.04,0.02,0.02,0,3.32,-0.26,675,650,650,1.06,2.28,0.87,4.42,8.06,4.42,3.79},2},
{{0.24,0.09,0.11,0.13,0.11,0.12,0.13,0.09,0.01,0,0,0.01,0.02,0.05,0.05,0.07,0.11,0.14,0.27,0.27,0.17,0.1,0.13,0.07,0.05,0.06,0.13,0.11,0.1,0.11,0,7.36,0.57,550,455.26,1100,7.24,5.87,4.97,9.26,7.36,9.26,13.75},0},
{{0.44,0.11,0.09,0.14,0.09,0.07,0.02,0.05,0.01,0,0.01,0.06,0.09,0.12,0.1,0.05,0.11,0.22,0.23,0.05,0.12,0.1,0.12,0.07,0.06,0.09,0.11,0.08,0.07,0.2,0,1.42,1.59,1462.5,2500,2875,9.48,6.17,5.23,11.91,7.16,11.91,14.27},0},
{{0.43,0.14,0.1,0.13,0.11,0.02,0.03,0.04,0.02,0,0.06,0.16,0.07,0.13,0.06,0.07,0.17,0.15,0.13,0.02,0.1,0.09,0.09,0.11,0.11,0.08,0.1,0.1,0.12,0.13,0,-2.12,1.19,1862.5,1750,4150,9.02,7,4.55,11.32,8.05,11.32,13.97},0},
{{0.51,0.11,0.1,0.15,0.04,0,0.06,0.03,0.02,0,0.11,0.11,0.1,0.11,0.08,0.1,0.18,0.12,0.12,0,0.08,0.08,0.08,0.13,0.09,0.09,0.11,0.12,0.1,0.15,0,-2.98,1.48,1483.33,1266.67,1850,9.33,6.72,4.8,11.28,7.9,11.28,14.17},0},
{{0.18,0.24,0.13,0.09,0.09,0.12,0.05,0.1,0.02,0.01,0.22,0.15,0.05,0.12,0.09,0.13,0.1,0.07,0.05,0.04,0.06,0.1,0.11,0.12,0.12,0.11,0.1,0.12,0.12,0.06,0,-5.91,0.79,375,750,3850,6.65,7.74,3.52,8.3,9.22,8.3,12.83},0},
{{0.02,0.14,0.16,0.11,0.07,0.14,0.18,0.1,0.09,0.01,0.28,0.12,0.08,0.08,0.08,0.18,0.09,0.02,0.03,0.06,0.07,0.13,0.1,0.15,0.09,0.09,0.13,0.09,0.08,0.09,0,-6.56,0.69,1830,2183.33,3400,6.2,7.92,3.72,7.72,9.42,7.72,13.14},0},
{{0,0.17,0.14,0.13,0.08,0.09,0.19,0.1,0.12,0,0.21,0.17,0.15,0.08,0.11,0.1,0.1,0.02,0.02,0.06,0.08,0.08,0.15,0.12,0.11,0.1,0.1,0.12,0.08,0.1,0,-6.54,0.79,504.55,2716.67,1800,6.47,7.34,3.89,8.08,9.16,8.08,13.37},0},
{{0,0.2,0.16,0.11,0.09,0.13,0.23,0.08,0.02,0,0.33,0.09,0.05,0.11,0.14,0.09,0.11,0.03,0.03,0.05,0.07,0.12,0.13,0.11,0.09,0.12,0.12,0.12,0.07,0.07,0,-7.37,0.54,2983.33,2483.33,950,5.22,8.09,3.69,6.16,9.47,6.16,13.03},0},
{{0.01,0.15,0.16,0.12,0.09,0.13,0.2,0.12,0.04,0,0.29,0.13,0.06,0.1,0.11,0.1,0.11,0.04,0.03,0.05,0.07,0.15,0.12,0.12,0.1,0.12,0.11,0.08,0.1,0.07,0,-7.04,0.4,1250,2950,2675,5.54,7.95,3.79,6.77,9.3,6.77,13.03},0},
{{0.01,0.15,0.18,0.12,0.05,0.12,0.18,0.14,0.08,0.01,0.2,0.19,0.14,0.1,0.07,0.12,0.09,0.03,0.05,0.04,0.12,0.12,0.09,0.1,0.09,0.09,0.11,0.13,0.11,0.07,0,-6.96,0.5,1840,3700,2600,6.22,7.25,4.19,7.72,8.79,7.72,13.43},0},
{{0.01,0.16,0.13,0.06,0.07,0.14,0.18,0.17,0.09,0.02,0.17,0.22,0.11,0.1,0.08,0.1,0.1,0.05,0.05,0.04,0.12,0.13,0.06,0.05,0.09,0.1,0.13,0.14,0.11,0.1,0,-6.26,0.92,860,1425,2525,7.06,7.36,4.41,8.58,8.92,8.58,13.67},0},
{{0,0.1,0.16,0.13,0.08,0.08,0.15,0.17,0.12,0.02,0.14,0.2,0.18,0.14,0.07,0.08,0.09,0.04,0.04,0.04,0.1,0.11,0.08,0.08,0.11,0.14,0.11,0.1,0.07,0.12,0,-6.42,0.97,1187.5,1837.5,2050,7.09,6.66,4.09,8.96,8.45,8.96,13.56},0},
{{0.01,0.09,0.15,0.13,0.12,0.05,0.1,0.19,0.14,0.06,0.16,0.18,0.15,0.1,0.09,0.09,0.1,0.06,0.05,0.04,0.13,0.11,0.09,0.06,0.12,0.11,0.13,0.08,0.07,0.12,0,-5.79,0.56,703.85,2925,700,7.62,7.18,4.48,9.74,8.75,9.74,14.05},0},
{{0.02,0.08,0.16,0.11,0.09,0.05,0.1,0.15,0.12,0.08,0.19,0.18,0.15,0.07,0.1,0.09,0.07,0.09,0.03,0.05,0.15,0.1,0.07,0.07,0.1,0.11,0.12,0.13,0.1,0.09,0,-6.15,0.56,422.73,4150,2900,8.46,7.46,4.34,10.78,9.04,10.78,14.5},0},
{{0.04,0.05,0.1,0.14,0.09,0.1,0.06,0.09,0.17,0.08,0.08,0.19,0.16,0.09,0.13,0.04,0.07,0.1,0.12,0.05,0.16,0.09,0.11,0.06,0.1,0.11,0.13,0.1,0.09,0.09,0,-3.67,0.3,363.46,2850,1250,9.45,7.06,4.64,11.94,8.5,11.94,15.05},0},
{{0.06,0.03,0.03,0.16,0.11,0.1,0.07,0.1,0.17,0.05,0.01,0.1,0.15,0.18,0.1,0.08,0.11,0.13,0.11,0.05,0.09,0.08,0.11,0.09,0.11,0.09,0.13,0.09,0.13,0.1,0,-1.68,1.2,370.83,2233.33,4075,9.86,6.09,4.42,12.22,7.08,12.22,14.26},0},
{{0.06,0.04,0.04,0.07,0.15,0.14,0.05,0.13,0.13,0.1,0,0.03,0.11,0.15,0.1,0.11,0.15,0.14,0.14,0.09,0.12,0.08,0.11,0.1,0.18,0.07,0.08,0.07,0.13,0.08,0,0.9,0.59,320,2012.5,1683.33,10.34,5.94,4.55,12.44,7.08,12.44,14.56},0},
{{0.08,0.02,0.03,0.06,0.16,0.12,0.09,0.08,0.21,0.08,0.01,0.09,0.08,0.07,0.13,0.14,0.1,0.13,0.14,0.15,0.11,0.1,0.09,0.13,0.1,0.08,0.09,0.11,0.08,0.13,0,1.56,0.93,267.65,2375,1475,10.68,6.66,4.36,12.72,7.93,12.72,15.04},0},
{{0.07,0.08,0.03,0.06,0.15,0.1,0.04,0.08,0.12,0.07,0,0.04,0.12,0.11,0.09,0.1,0.08,0.15,0.15,0.17,0.09,0.13,0.06,0.09,0.15,0.11,0.06,0.08,0.11,0.13,0,2.55,1.05,508.33,737.5,983.33,10.83,7.31,4.59,13,8.57,13,15.67},0},
{{0.08,0.03,0.06,0.08,0.11,0.13,0.08,0.07,0.12,0.09,0,0.03,0.11,0.08,0.12,0.1,0.11,0.12,0.15,0.2,0.09,0.12,0.1,0.08,0.11,0.11,0.07,0.09,0.13,0.12,0,3.02,1.26,335.71,836.36,1483.33,10.51,7.3,4.63,12.74,8.58,12.74,15.54},0},
{{0.07,0.06,0.07,0.07,0.11,0.11,0.09,0.05,0.14,0.06,0,0.01,0.11,0.08,0.16,0.11,0.07,0.12,0.13,0.23,0.11,0.09,0.11,0.12,0.09,0.09,0.08,0.1,0.13,0.1,0,3.34,1.01,510.53,711.54,2575,10.56,7.39,4.52,12.77,8.51,12.77,15.54},0},
{{0.06,0.04,0.05,0.08,0.1,0.12,0.1,0.1,0.16,0.06,0,0.01,0.06,0.11,0.15,0.14,0.08,0.14,0.15,0.18,0.07,0.08,0.12,0.12,0.11,0.15,0.06,0.07,0.15,0.09,0,3.08,1.21,404.17,895,1862.5,10.43,6.68,4.18,12.55,7.84,12.55,14.83},0},
{{0.05,0.08,0.06,0.06,0.11,0.12,0.05,0.11,0.17,0.07,0,0.04,0.08,0.08,0.13,0.13,0.08,0.18,0.11,0.19,0.05,0.13,0.11,0.13,0.16,0.09,0.07,0.09,0.12,0.09,0,3.1,0.98,325.86,781.82,2625,10.32,6.89,3.86,12.4,8.3,12.4,14.61},0},
{{0.05,0.09,0.07,0.07,0.14,0.11,0.07,0.09,0.09,0.09,0.01,0.01,0.1,0.11,0.1,0.11,0.09,0.16,0.09,0.23,0.11,0.07,0.13,0.14,0.08,0.11,0.11,0.1,0.11,0.06,0,3.37,0.45,421.43,600,2283.33,10.05,7.35,3.91,12.33,8.7,12.33,14.73},0},
{{0.03,0.04,0.03,0.04,0.09,0.1,0.07,0.08,0.09,0.04,0,0.01,0.03,0.05,0.05,0.09,0.07,0.08,0.11,0.16,0.07,0.04,0.05,0.08,0.07,0.07,0.06,0.1,0.06,0.07,0,3.35,0.84,342.86,583.33,425,6.16,4.49,2.73,11.67,8.37,11.67,9.42},0},
{{0.17,0.11,0.11,0.1,0.14,0.17,0.15,0.04,0.04,0,0.13,0.06,0.12,0.14,0.13,0.1,0.13,0.1,0.07,0.05,0.11,0.12,0.08,0.08,0.08,0.08,0.09,0.09,0.18,0.12,0,7.4,0.06,650,1070,4250,7.07,4.13,2.53,8.44,5.1,8.44,11.58},2},
{{0.2,0.14,0.14,0.12,0.13,0.17,0.05,0.03,0.04,0,0.19,0.1,0.13,0.15,0.07,0.09,0.11,0.08,0.06,0.04,0.16,0.12,0.09,0.1,0.08,0.06,0.06,0.08,0.17,0.1,0,6.26,-0.24,1925,1950,3700,8.01,4.46,2.72,9.31,5.5,9.31,11.68},2},
{{0.2,0.14,0.13,0.15,0.11,0.13,0.09,0.05,0.02,0,0.17,0.09,0.16,0.19,0.04,0.08,0.12,0.07,0.06,0.04,0.15,0.12,0.11,0.09,0.08,0.05,0.08,0.07,0.17,0.1,0,6.5,-0.44,2975,1128.57,3475,8.08,4.34,2.68,9.43,5.35,9.43,11.76},2},
{{0.19,0.16,0.14,0.13,0.15,0.13,0.07,0.03,0.03,0,0.18,0.09,0.14,0.16,0.04,0.07,0.16,0.09,0.07,0.03,0.2,0.09,0.11,0.08,0.09,0.06,0.06,0.08,0.13,0.13,0,6.54,-0.15,2000,2333.33,1000,8.09,4.37,2.93,9.35,5.23,9.35,11.9},2},
{{0.19,0.14,0.16,0.15,0.13,0.14,0.06,0.05,0,0,0.18,0.12,0.12,0.13,0.08,0.12,0.14,0.05,0.04,0.04,0.12,0.14,0.14,0.09,0.08,0.07,0.06,0.1,0.09,0.12,0,6.31,-0.15,2000,1750,2500,8.2,4.12,2.52,9.39,5.03,9.39,11.63},2},
{{0.18,0.17,0.13,0.14,0.13,0.14,0.07,0.04,0.02,0,0.15,0.14,0.18,0.11,0.08,0.11,0.08,0.06,0.06,0.03,0.1,0.14,0.12,0.07,0.07,0.1,0.1,0.1,0.11,0.11,0,6.31,-0.08,2000,1640,1775,8.08,4.19,2.29,9.29,5.14,9.29,11.48},2},
{{0.2,0.17,0.17,0.09,0.13,0.11,0.08,0.04,0.02,0,0.15,0.12,0.16,0.17,0.06,0.13,0.1,0.03,0.05,0.04,0.12,0.11,0.13,0.07,0.11,0.11,0.08,0.09,0.11,0.1,0,6.22,-0.22,1000,1775,1366.67,8.29,3.95,2.2,9.56,4.97,9.56,11.59},2},
{{0.17,0.16,0.16,0.17,0.14,0.11,0.07,0.03,0,0,0.13,0.16,0.18,0.14,0.1,0.1,0.07,0.05,0.04,0.05,0.11,0.14,0.1,0.11,0.1,0.08,0.11,0.07,0.1,0.11,0,6.09,-0.18,1000,1660,1775,8.14,3.92,2.28,9.22,4.94,9.22,11.39},2},
{{0.22,0.1,0.2,0.14,0.13,0.13,0.06,0.03,0.02,0,0.16,0.12,0.17,0.12,0.1,0.13,0.06,0.06,0.07,0.02,0.08,0.13,0.13,0.09,0.08,0.1,0.1,0.12,0.07,0.12,0,6.18,-0.03,3475,1800,2000,8.32,4.02,2.17,9.49,4.94,9.49,11.5},2},
{{0.2,0.16,0.17,0.17,0.12,0.09,0.07,0.03,0.01,0,0.16,0.13,0.15,0.16,0.08,0.14,0.09,0.04,0.02,0.03,0.07,0.09,0.13,0.09,0.1,0.12,0.11,0.1,0.14,0.08,0,6.13,-0.01,3475,1171.43,2350,8.32,3.76,1.99,9.34,4.74,9.34,11.35},2},
{{0.19,0.16,0.17,0.14,0.13,0.08,0.09,0.04,0.02,0,0.17,0.12,0.18,0.12,0.09,0.14,0.07,0.05,0.03,0.04,0.08,0.06,0.13,0.13,0.13,0.11,0.09,0.11,0.11,0.07,0,6.09,-0.11,3475,1025,1500,8.13,3.9,1.87,9.23,4.9,9.23,11.24},2},
{{0.21,0.16,0.16,0.11,0.12,0.13,0.05,0.05,0.04,0,0.18,0.09,0.16,0.16,0.08,0.09,0.1,0.07,0.04,0.05,0.12,0.12,0.12,0.09,0.11,0.09,0.08,0.11,0.08,0.1,0,6.26,-0.17,900,1142.86,1500,8.25,4.21,2.32,9.57,5.31,9.57,11.78},2},
{{0.2,0.16,0.16,0.13,0.15,0.11,0.04,0.05,0.02,0,0.2,0.1,0.15,0.14,0.08,0.09,0.12,0.05,0.05,0.04,0.09,0.12,0.09,0.07,0.12,0.12,0.08,0.13,0.12,0.09,0,6.05,-0.05,4475,1790,4200,8.34,4.17,2.13,9.56,5.17,9.56,11.63},2},
{{0.2,0.12,0.17,0.19,0.12,0.06,0.09,0.05,0.01,0,0.17,0.11,0.21,0.1,0.12,0.1,0.07,0.06,0.03,0.04,0.08,0.14,0.1,0.11,0.11,0.13,0.07,0.11,0.11,0.07,0,5.96,-0.21,4475,1011.11,3775,8.21,4,2.01,9.38,5.05,9.38,11.35},2},
{{0.2,0.12,0.18,0.18,0.17,0.06,0.06,0.04,0.02,0,0.16,0.13,0.17,0.14,0.09,0.09,0.12,0.05,0.04,0.03,0.1,0.1,0.08,0.07,0.12,0.11,0.1,0.09,0.16,0.09,0,5.9,0.09,4475,2700,3025,8.34,3.92,2.2,9.51,4.87,9.51,11.45},2},
{{0.01,0.09,0.03,0.04,0.06,0.07,0.11,0.16,0.26,0.2,0.05,0.06,0.07,0.09,0.11,0.12,0.1,0.15,0.2,0.07,0.08,0.08,0.09,0.08,0.11,0.12,0.13,0.12,0.08,0.14,0,10.08,0.19,3025,528.57,2000,4.6,4.23,2.15,6.22,5.04,6.22,12.11},2},
{{0,0.06,0.04,0.08,0.04,0.1,0.14,0.15,0.23,0.18,0,0.06,0.09,0.06,0.09,0.11,0.14,0.16,0.16,0.13,0.09,0.08,0.1,0.07,0.08,0.15,0.14,0.09,0.13,0.1,0,10.72,0.04,2133.33,600,1625,4.19,3.98,2.06,5.72,4.8,5.72,12.31},2},
{{0.01,0.04,0.02,0.05,0.11,0.11,0.11,0.21,0.2,0.16,0.01,0.07,0.09,0.06,0.12,0.15,0.11,0.16,0.12,0.12,0.09,0.07,0.09,0.1,0.11,0.14,0.13,0.08,0.11,0.11,0,10.36,0.07,1450,587.5,1700,4.06,3.97,2.23,5.59,4.76,5.59,11.97},2},
{{0.01,0.07,0.06,0.07,0.06,0.09,0.11,0.19,0.18,0.19,0.01,0.13,0.02,0.06,0.11,0.08,0.14,0.15,0.15,0.16,0.09,0.1,0.11,0.08,0.11,0.13,0.1,0.11,0.09,0.12,0,10.54,0.11,2283.33,590,2950,4.28,4.28,2.28,5.71,5.09,5.71,12.26},2},
{{0.01,0.09,0.04,0.1,0.06,0.08,0.14,0.18,0.14,0.18,0.04,0.12,0.02,0.06,0.13,0.09,0.06,0.16,0.18,0.13,0.1,0.1,0.12,0.11,0.1,0.11,0.13,0.1,0.04,0.12,0,10.42,-0.17,2112.5,510.53,1875,4.61,4.63,2.25,5.96,5.37,5.96,12.34},2},
{{0.01,0.08,0.07,0.04,0.08,0.11,0.14,0.2,0.11,0.19,0.06,0.08,0.03,0.09,0.13,0.1,0.06,0.09,0.17,0.19,0.07,0.08,0.12,0.08,0.13,0.13,0.1,0.11,0.11,0.08,0,10.57,-0.07,3450,486.84,2975,4.34,4.82,1.94,5.49,5.52,5.49,12.18},2},
{{0.02,0.09,0.04,0.09,0.08,0.09,0.11,0.19,0.13,0.19,0.08,0.06,0.01,0.08,0.12,0.11,0.05,0.13,0.2,0.15,0.09,0.06,0.12,0.11,0.13,0.09,0.09,0.15,0.09,0.09,0,10.62,0.07,1475,484.21,2075,4.66,4.75,2.16,5.91,5.49,5.91,12.47},2},
{{0.01,0.08,0.05,0.06,0.08,0.11,0.12,0.2,0.14,0.17,0.05,0.1,0.04,0.06,0.13,0.11,0.09,0.12,0.18,0.14,0.07,0.05,0.1,0.14,0.06,0.13,0.15,0.14,0.06,0.12,0,10.38,0.23,3450,511.11,1200,4.42,4.62,2.18,5.76,5.43,5.76,12.15},2},
{{0.01,0.08,0.04,0.04,0.08,0.1,0.2,0.16,0.12,0.19,0.05,0.11,0.04,0.06,0.12,0.07,0.14,0.09,0.15,0.17,0.1,0.07,0.06,0.12,0.1,0.17,0.1,0.12,0.09,0.09,0,10.57,-0.15,1950,452.5,800,4.65,4.7,2.14,5.99,5.58,5.99,12.4},2},
{{0.01,0.04,0.07,0.07,0.06,0.07,0.18,0.11,0.2,0.22,0.02,0.14,0.03,0.06,0.08,0.09,0.12,0.16,0.17,0.15,0.1,0.08,0.1,0.1,0.11,0.15,0.11,0.1,0.08,0.1,0,10.66,-0.1,1333.33,467.5,1800,4.54,4.47,2.12,5.82,5.31,5.82,12.39},2},
{{0.01,0.07,0.06,0.05,0.09,0.11,0.14,0.15,0.15,0.19,0.03,0.1,0.03,0.07,0.12,0.1,0.1,0.14,0.16,0.13,0.11,0.09,0.09,0.12,0.1,0.09,0.13,0.1,0.11,0.09,0,10.6,-0.21,2925,488.89,4400,4.66,4.44,2.13,5.9,5.22,5.9,12.39},2},
{{0,0.05,0.06,0.06,0.08,0.08,0.12,0.19,0.18,0.21,0.02,0.1,0.06,0.05,0.15,0.1,0.07,0.13,0.18,0.14,0.09,0.09,0.11,0.11,0.09,0.13,0.13,0.1,0.07,0.11,0,10.61,-0.15,1475,533.33,3475,4.55,4.5,2.15,5.99,5.22,5.99,12.36},2},
{{0,0.03,0.05,0.05,0.05,0.08,0.12,0.18,0.22,0.23,0.01,0.12,0.05,0.04,0.15,0.07,0.12,0.17,0.11,0.14,0.09,0.09,0.12,0.15,0.09,0.13,0.08,0.12,0.04,0.11,0,10.57,-0.21,1307.14,508.33,2075,4.32,4.37,2.45,6.12,5.22,6.12,12.5},2},
{{0,0.01,0.04,0.04,0.06,0.07,0.09,0.13,0.28,0.3,0.04,0.09,0.03,0.06,0.1,0.1,0.12,0.23,0.08,0.16,0.1,0.1,0.12,0.13,0.1,0.13,0.09,0.08,0.08,0.1,0,10.61,-0.3,3025,460,2575,4.57,4.22,2.18,6.21,5.17,6.21,12.44},2},
{{0,0.01,0.01,0.04,0.04,0.05,0.09,0.1,0.2,0.21,0.05,0.04,0.04,0.04,0.08,0.08,0.08,0.15,0.09,0.1,0.05,0.08,0.04,0.07,0.08,0.09,0.11,0.08,0.08,0.07,0,7.64,0.13,1900,492.86,750,2.99,3.6,1.46,5.48,5.96,5.48,8.77},2},
{{0,0.01,0.05,0.07,0.09,0.07,0.06,0.1,0.21,0.29,0.01,0.13,0.1,0.09,0.06,0.04,0.07,0.09,0.17,0.13,0.15,0.09,0.1,0.1,0.1,0.1,0.12,0.14,0.08,0.05,0,6.46,0.37,407.5,463.89,925,9.21,8.45,4.75,11,9.67,11,15.57},0},
{{0,0,0.02,0.1,0.06,0.07,0.05,0.1,0.17,0.35,0.02,0.13,0.1,0.11,0.07,0.07,0.05,0.09,0.15,0.12,0.08,0.09,0.09,0.13,0.12,0.14,0.13,0.1,0.07,0.06,0,5.71,1.2,402.08,417.39,1475,10.54,8.55,4.13,12.5,9.65,12.5,16.14},0},
{{0,0,0.01,0.07,0.08,0.06,0.06,0.08,0.29,0.32,0.03,0.08,0.06,0.1,0.08,0.07,0.08,0.07,0.19,0.19,0.07,0.1,0.1,0.17,0.11,0.08,0.1,0.09,0.13,0.08,0,6.82,1.43,625,380,2525,8.72,8.09,4.22,10.31,9.29,10.31,15.09},0},
{{0,0,0.01,0.1,0.13,0.07,0.09,0.16,0.24,0.22,0.03,0.05,0.08,0.12,0.08,0.06,0.07,0.07,0.13,0.22,0.06,0.16,0.1,0.11,0.12,0.12,0.06,0.11,0.08,0.1,0,7.77,1.22,1233.33,369.23,2500,6.54,8.42,4.25,7.82,9.5,7.82,14.17},0},
{{0,0.01,0.03,0.08,0.14,0.08,0.13,0.16,0.28,0.11,0.03,0.04,0.03,0.15,0.08,0.08,0.04,0.14,0.17,0.16,0.08,0.08,0.1,0.13,0.13,0.13,0.11,0.08,0.08,0.1,0,7.62,1.26,1200,332.76,1612.5,5.57,7.65,4.09,6.74,8.9,6.74,13.02},0},
{{0.01,0.02,0.06,0.12,0.14,0.1,0.04,0.17,0.26,0.1,0.04,0.03,0.05,0.1,0.12,0.09,0.07,0.08,0.17,0.18,0.12,0.1,0.07,0.1,0.13,0.12,0.13,0.07,0.1,0.09,0,7.23,1.01,1850,386,4050,6.2,7.73,4.46,7.33,8.99,7.33,13.25},0},
{{0,0.03,0.08,0.09,0.1,0.12,0.11,0.2,0.2,0.1,0.04,0.04,0.04,0.08,0.08,0.13,0.07,0.08,0.17,0.2,0.13,0.09,0.09,0.07,0.15,0.1,0.09,0.1,0.11,0.09,0,7.61,1.15,2225,365.38,3825,5.65,7.85,4.59,6.94,9.07,6.94,13.39},0},
{{0.01,0,0.09,0.1,0.11,0.13,0.06,0.18,0.22,0.13,0.03,0.05,0.05,0.1,0.11,0.05,0.08,0.09,0.15,0.21,0.1,0.1,0.11,0.12,0.1,0.12,0.1,0.1,0.08,0.09,0,7.85,1.03,2125,373.08,2666.67,6.23,7.88,4.57,7.4,9.02,7.4,13.61},0},
{{0,0.03,0.13,0.11,0.1,0.09,0.1,0.14,0.24,0.07,0.03,0.06,0.02,0.1,0.09,0.09,0.06,0.08,0.19,0.21,0.13,0.09,0.09,0.11,0.08,0.11,0.13,0.11,0.06,0.1,0,7.93,1,1466.67,331.03,1880,6.22,7.94,4.62,7.43,9.1,7.43,13.8},0},
{{0.04,0.08,0.1,0.14,0.07,0.08,0.09,0.18,0.18,0.07,0.01,0.05,0.04,0.08,0.13,0.07,0.1,0.08,0.22,0.18,0.14,0.09,0.09,0.09,0.09,0.11,0.13,0.08,0.08,0.13,0,7.87,1.18,2825,421.74,1937.5,7.06,7.17,4.88,8.68,8.24,8.68,14.03},0},
{{0.13,0.14,0.11,0.1,0.11,0.05,0.08,0.09,0.15,0.06,0.03,0.05,0.06,0.08,0.07,0.05,0.08,0.14,0.3,0.15,0.15,0.08,0.1,0.07,0.1,0.11,0.11,0.11,0.07,0.12,0,6.98,1.45,375,665.38,2466.67,9.34,6.57,4.95,11.19,7.94,11.19,15.14},0},
{{0.2,0.1,0.09,0.1,0.11,0.13,0.08,0.12,0.05,0.05,0.01,0.08,0.09,0.05,0.07,0.1,0.19,0.2,0.2,0.03,0.17,0.13,0.09,0.07,0.04,0.08,0.08,0.1,0.11,0.16,0,4.01,1.37,1916.67,750,2616.67,9.12,4.98,5.81,11.46,6.3,11.46,13.99},0},
{{0.17,0.15,0.1,0.12,0.12,0.1,0.1,0.09,0.02,0.07,0.01,0.1,0.15,0.13,0.08,0.11,0.16,0.19,0.09,0,0.13,0.18,0.09,0.05,0.04,0.09,0.11,0.09,0.11,0.13,0,1.6,1.26,2200,1500,1800,9.73,4.85,5.5,11.96,5.64,11.96,13.74},0},
{{0.16,0.18,0.08,0.12,0.09,0.13,0.1,0.07,0.05,0.06,0.06,0.14,0.14,0.1,0.09,0.13,0.14,0.12,0.1,0,0.14,0.12,0.1,0.08,0.05,0.09,0.09,0.09,0.12,0.15,0,0.14,1.62,3600,3225,1000,9.51,5.55,5.48,11.76,6.61,11.76,13.86},0},
{{0.19,0.12,0.12,0.11,0.1,0.13,0.13,0.06,0.02,0.05,0.11,0.13,0.16,0.08,0.11,0.14,0.13,0.1,0.07,0,0.11,0.14,0.11,0.09,0.06,0.08,0.09,0.11,0.09,0.15,0,-0.82,1.55,1450,1825,3133.33,9.48,5.82,5.2,11.78,6.92,11.78,13.83},0},
{{0.18,0.13,0.11,0.11,0.08,0.1,0.13,0.1,0.02,0.06,0.15,0.11,0.14,0.08,0.07,0.14,0.17,0.11,0.05,0,0.12,0.11,0.09,0.11,0.08,0.07,0.11,0.08,0.12,0.12,0,-1.21,1.5,3325,1500,1662.5,9.49,6.23,5.06,11.88,7.32,11.88,13.89},0},
{{0.14,0.18,0.11,0.09,0.13,0.11,0.13,0.05,0.03,0.05,0.12,0.18,0.13,0.08,0.13,0.12,0.15,0.06,0.04,0,0.11,0.15,0.09,0.08,0.06,0.08,0.13,0.1,0.1,0.12,0,-2.04,1.53,1462.5,2200,1125,9.47,5.92,5.08,11.77,6.94,11.77,13.77},0},
{{0.16,0.15,0.12,0.12,0.1,0.1,0.14,0.05,0.03,0.06,0.15,0.15,0.13,0.08,0.1,0.16,0.1,0.12,0.02,0,0.1,0.1,0.09,0.12,0.12,0.07,0.08,0.11,0.13,0.1,0,-1.95,1.74,1216.67,1525,2250,9.56,6.07,4.75,11.79,7.23,11.79,13.78},0},
{{0.15,0.17,0.1,0.1,0.1,0.12,0.12,0.08,0.02,0.06,0.19,0.14,0.12,0.11,0.1,0.13,0.12,0.08,0.04,0,0.12,0.09,0.09,0.11,0.09,0.12,0.1,0.08,0.1,0.13,0,-2.66,1.65,1740,1450,1683.33,9.48,6.4,4.85,11.77,7.62,11.77,14.05},0},
{{0.13,0.14,0.12,0.12,0.12,0.1,0.13,0.06,0.05,0.05,0.17,0.15,0.08,0.12,0.11,0.16,0.07,0.12,0.03,0,0.11,0.11,0.07,0.09,0.1,0.1,0.13,0.1,0.13,0.09,0,-2.21,1.35,4900,2075,1225,8.89,6.16,4.46,11.06,7.28,11.06,12.95},0},
{{0.16,0.15,0.12,0.07,0.13,0.09,0.12,0.09,0.03,0.06,0.18,0.14,0.1,0.09,0.11,0.14,0.1,0.11,0.05,0,0.08,0.08,0.14,0.09,0.1,0.1,0.14,0.11,0.12,0.07,0,-2.24,1.56,1233.33,1475,2166.67,9.44,6.67,4.23,11.71,7.98,11.71,13.72},0},
{{0.17,0.14,0.12,0.09,0.11,0.09,0.11,0.11,0.03,0.05,0.18,0.15,0.12,0.13,0.13,0.08,0.08,0.11,0.05,0,0.04,0.1,0.18,0.07,0.13,0.11,0.1,0.09,0.1,0.12,0,-2.66,1.7,4425,2700,1966.67,9.39,6.43,4.37,11.66,7.77,11.66,13.61},0},
{{0.13,0.14,0.15,0.08,0.11,0.14,0.15,0.05,0.02,0.06,0.14,0.09,0.17,0.08,0.13,0.18,0.11,0.1,0.02,0,0.09,0.09,0.07,0.14,0.12,0.08,0.1,0.09,0.16,0.09,0,-1.6,1.73,3375,2225,2250,8.91,5.61,4.46,11.25,6.8,11.25,12.81},0},
{{0.12,0.18,0.13,0.13,0.04,0.13,0.15,0.07,0.03,0.05,0.14,0.12,0.17,0.12,0.11,0.14,0.11,0.08,0.03,0,0.06,0.12,0.13,0.13,0.13,0.08,0.06,0.12,0.11,0.1,0,-1.91,1.5,1812.5,1450,3625,9.07,5.64,4.4,11.36,6.81,11.36,12.9},0},
{{0.13,0.11,0.19,0.12,0.1,0.1,0.14,0.05,0.04,0.05,0.14,0.14,0.14,0.12,0.11,0.1,0.15,0.11,0.02,0,0.09,0.08,0.08,0.07,0.15,0.11,0.13,0.11,0.09,0.11,0,-2.05,1.84,1450,4725,750,9.14,5.94,4.28,11.21,7.23,11.21,13.08},0},
{{0.14,0.14,0.17,0.1,0.1,0.11,0.09,0.1,0.02,0.05,0.2,0.12,0.1,0.09,0.16,0.13,0.13,0.08,0.02,0,0.06,0.08,0.11,0.14,0.11,0.11,0.09,0.12,0.13,0.08,0,-2.51,1.65,1650,1425,1010,9.41,6.26,4.17,11.56,7.41,11.56,13.44},0},
{{0.12,0.15,0.13,0.12,0.1,0.12,0.09,0.09,0.07,0.03,0.2,0.09,0.13,0.17,0.08,0.1,0.07,0.08,0.1,0,0.07,0.1,0.13,0.12,0.11,0.08,0.11,0.12,0.09,0.09,0,-2.04,1.33,2916.67,700,2375,8.91,6.65,4.3,11.06,8.18,11.06,13.34},0},
{{0.16,0.12,0.14,0.1,0.14,0.07,0.12,0.07,0.05,0.06,0.23,0.1,0.1,0.1,0.15,0.11,0.08,0.11,0.04,0,0.11,0.08,0.12,0.11,0.08,0.1,0.08,0.08,0.13,0.12,0,-2.62,1.54,3575,3325,1787.5,9.46,6.77,4.86,11.62,7.98,11.62,14.01},0},
{{0.13,0.18,0.14,0.08,0.08,0.11,0.12,0.11,0.02,0.05,0.21,0.12,0.11,0.15,0.09,0.08,0.1,0.12,0.05,0,0.06,0.07,0.13,0.13,0.12,0.1,0.1,0.14,0.1,0.07,0,-2.79,1.56,916.67,2125,2416.67,9.33,6.71,4.07,11.58,8.07,11.58,13.71},0},
{{0.08,0.1,0.09,0.11,0.06,0.11,0.07,0.06,0.03,0.04,0.12,0.11,0.13,0.05,0.1,0.1,0.07,0.05,0.02,0,0.05,0.06,0.08,0.05,0.11,0.1,0.07,0.1,0.07,0.06,0,-1.97,1.17,1825,1466.67,1825,6.17,4.14,2.82,10.8,6.87,10.8,8.91},0},
{{0.07,0.05,0.05,0.06,0.06,0.12,0.16,0.16,0.15,0,0.07,0.1,0.04,0.09,0.04,0.1,0.1,0.11,0.18,0,0.13,0.12,0.1,0.08,0.11,0.11,0.1,0.11,0.05,0,0,8.7,0.35,2350,682.14,1625,6.21,4.78,3.31,7.9,5.93,7.9,12.59},5},
{{0.13,0.09,0.11,0.11,0.12,0.1,0.08,0.08,0.1,0,0.1,0.11,0.1,0.09,0.13,0.12,0.08,0.1,0.1,0,0.09,0.12,0.1,0.12,0.1,0.07,0.11,0.09,0.1,0,0,6.4,0.89,2800,1250,3200,8.72,4.25,3.11,10.29,5.25,10.29,12.46},5},
{{0.1,0.14,0.13,0.11,0.12,0.09,0.11,0.09,0.07,0,0.13,0.08,0.11,0.12,0.13,0.1,0.14,0.11,0.04,0,0.1,0.07,0.08,0.12,0.11,0.12,0.11,0.12,0.12,0,0,5.57,0.85,1200,1770,3825,9.01,3.87,2.72,10.48,4.82,10.48,12.17},5},
{{0.13,0.1,0.12,0.14,0.11,0.1,0.06,0.1,0.08,0,0.11,0.11,0.14,0.1,0.12,0.08,0.1,0.09,0.11,0,0.1,0.08,0.14,0.1,0.1,0.09,0.07,0.09,0.14,0,0,5.92,0.8,2516.67,2325,3425,9.09,4.13,3.01,10.59,4.98,10.59,12.49},5},
{{0.02,0.05,0.03,0.02,0.03,0.02,0.03,0.01,0.03,0,0.03,0.04,0.06,0.03,0.03,0.03,0.01,0.02,0.02,0,0.01,0.05,0.02,0.02,0.02,0.03,0.04,0.04,0.03,0,0,1.17,0.16,400,575,383.33,2.16,1.13,0.61,10.23,5.89,10.23,2.8},5},
{{0.04,0.04,0.06,0.04,0.06,0.09,0.12,0.15,0.2,0.04,0.02,0.05,0.05,0.07,0.11,0.12,0.1,0.15,0.16,0,0.11,0.16,0.05,0.07,0.07,0.08,0.12,0.13,0.1,0,0,8.75,1.39,950,1020,1550,5.46,3.91,3.4,6.79,4.71,6.79,12.2},1},
{{0.14,0.12,0.08,0.12,0.1,0.12,0.11,0.12,0.06,0.02,0.16,0.11,0.1,0.07,0.08,0.13,0.09,0.1,0.11,0,0.09,0.08,0.14,0.09,0.13,0.09,0.11,0.08,0.12,0,0,5.64,0.99,3025,1391.67,4000,9,4.24,2.81,10.16,5.09,10.16,12.58},1},
{{0.12,0.13,0.13,0.15,0.11,0.11,0.08,0.06,0.07,0.01,0.11,0.11,0.13,0.12,0.12,0.07,0.14,0.09,0.07,0,0.12,0.08,0.1,0.1,0.12,0.12,0.09,0.11,0.09,0,0,5.54,0.81,3125,4525,1433.33,9.32,3.87,2.78,10.29,4.69,10.29,12.63},1},
{{0.07,0.07,0.1,0.06,0.1,0.06,0.06,0.03,0.04,0.01,0.08,0.08,0.11,0.09,0.07,0.05,0.04,0.03,0.03,0,0.04,0.05,0.07,0.1,0.05,0.07,0.08,0.05,0.07,0,0,2.71,0.59,900,466.67,1175,5.56,2.05,1.43,10.26,4.74,10.26,7.17},1},
{{0.09,0.08,0.09,0.06,0.09,0.09,0.14,0.13,0.13,0.12,0.12,0.1,0.1,0.09,0.07,0.09,0.08,0.09,0.16,0.11,0.11,0.08,0.1,0.11,0.08,0.07,0.13,0.12,0.1,0.11,0,7.18,0.77,1975,790.91,2325,7.31,6.04,4.13,9.01,6.95,9.01,12.85},5},
{{0.1,0.09,0.1,0.13,0.12,0.1,0.08,0.1,0.1,0.11,0.09,0.09,0.11,0.11,0.08,0.1,0.09,0.12,0.11,0.13,0.1,0.13,0.09,0.09,0.11,0.11,0.09,0.09,0.11,0.1,0,7.25,0.57,1350,686.36,2966.67,7.99,5.77,3.98,9.54,6.75,9.54,13.08},5},
{{0.11,0.11,0.11,0.11,0.11,0.11,0.09,0.08,0.09,0.09,0.08,0.12,0.09,0.1,0.13,0.11,0.11,0.11,0.06,0.09,0.12,0.11,0.1,0.13,0.11,0.11,0.08,0.07,0.06,0.12,0,6.77,0.21,750,496.67,2233.33,8.51,5.18,3.72,10.01,6.31,10.01,12.86},5},
{{0.05,0.08,0.05,0.07,0.03,0.07,0.05,0.05,0.04,0.05,0.05,0.05,0.05,0.08,0.08,0.07,0.08,0.04,0.03,0.03,0.03,0.03,0.06,0.05,0.06,0.07,0.06,0.07,0.09,0.03,0,3.22,0.58,866.67,650,2300,4.6,2.68,1.75,10.18,6.35,10.18,6.6},5},
{{0.01,0.04,0.08,0.08,0.09,0.1,0.13,0.18,0.12,0.17,0.04,0.08,0.07,0.06,0.08,0.14,0.11,0.12,0.15,0.16,0.1,0.14,0.11,0.1,0.11,0.07,0.06,0.1,0.08,0.15,0,9.86,0.76,300,816.67,1787.5,5.61,3.3,3.27,6.6,4.14,6.6,12.75},1},
{{0.13,0.11,0.11,0.11,0.09,0.11,0.11,0.08,0.07,0.1,0.1,0.1,0.11,0.11,0.11,0.12,0.1,0.09,0.09,0.09,0.12,0.09,0.1,0.12,0.08,0.12,0.11,0.09,0.12,0.08,0,8.11,0.57,1416.67,1416.67,2625,7.96,3.19,2.8,9.12,4.13,9.12,12.8},1},
{{0.15,0.13,0.08,0.12,0.12,0.11,0.08,0.08,0.12,0.05,0.13,0.11,0.12,0.12,0.1,0.07,0.1,0.12,0.07,0.07,0.1,0.1,0.1,0.07,0.12,0.14,0.11,0.12,0.09,0.07,0,7.67,0.47,1025,2566.67,933.33,7.88,3.18,2.46,9.11,4.04,9.11,12.44},1},
{{0.07,0.07,0.08,0.05,0.05,0.04,0.04,0.01,0.05,0.05,0.08,0.07,0.06,0.06,0.04,0.04,0.03,0.03,0.05,0.03,0.04,0.02,0.05,0.05,0.05,0.03,0.06,0.05,0.07,0.06,0,3.36,0.63,750,650,1050,4.02,2.12,1.34,9.49,5.74,9.49,6.01},1},
{{0.11,0.05,0.08,0.08,0.11,0.1,0.12,0.11,0.09,0.17,0.06,0.05,0.06,0.05,0.12,0.13,0.1,0.14,0.11,0.19,0.13,0.08,0.13,0.09,0.08,0.06,0.09,0.1,0.11,0.13,0,3.59,1.11,2925,650,433.33,8.64,5.01,4.56,10.24,6.18,10.24,12.37},5},
{{0.12,0.1,0.09,0.12,0.1,0.09,0.08,0.1,0.14,0.09,0.1,0.09,0.13,0.11,0.08,0.1,0.1,0.1,0.09,0.12,0.1,0.1,0.08,0.11,0.09,0.13,0.07,0.13,0.1,0.1,0,0.84,0.86,2800,2725,2075,9.28,4.31,3.76,11.03,5.41,11.03,11.93},5},
{{0.09,0.12,0.1,0.11,0.11,0.11,0.11,0.07,0.1,0.09,0.08,0.11,0.12,0.11,0.12,0.12,0.09,0.09,0.14,0.04,0.12,0.09,0.08,0.1,0.12,0.11,0.13,0.08,0.1,0.09,0,0.52,0.61,3825,3875,2800,9.45,3.71,3.59,10.9,4.61,10.9,11.53},5},
{{0.08,0.13,0.13,0.08,0.09,0.1,0.09,0.11,0.07,0.05,0.16,0.15,0.08,0.12,0.08,0.07,0.11,0.07,0.06,0.05,0.04,0.12,0.11,0.09,0.1,0.11,0.1,0.1,0.09,0.08,0,-0.62,0.78,1966.67,1150,3100,8.7,3.69,3.08,11.18,5.17,11.18,10.93},5},
{{0.11,0.12,0.11,0.08,0.12,0.11,0.11,0.08,0.1,0.07,0.1,0.09,0.09,0.11,0.1,0.11,0.11,0.1,0.12,0.09,0.09,0.11,0.09,0.1,0.08,0.08,0.13,0.12,0.11,0.1,0,8.96,0.62,1866.67,1190,1666.67,6.38,3.31,3.34,7.92,4.16,7.92,12.72},1},
{{0.12,0.1,0.1,0.1,0.1,0.06,0.12,0.09,0.1,0.13,0.09,0.1,0.14,0.11,0.11,0.05,0.07,0.11,0.12,0.11,0.08,0.11,0.11,0.12,0.1,0.09,0.12,0.09,0.1,0.1,0,8.98,0.28,1300,950,1787.5,6.97,3.78,3.2,8.64,4.73,8.64,13.26},1},
{{0.09,0.11,0.11,0.12,0.08,0.12,0.09,0.12,0.08,0.08,0.09,0.1,0.09,0.08,0.12,0.14,0.12,0.08,0.08,0.1,0.12,0.08,0.1,0.11,0.13,0.1,0.08,0.1,0.1,0.09,0,9.06,0.28,978.57,1220,2000,6.63,3.24,3.28,8.24,4.27,8.24,12.99},1},
{{0.06,0.04,0.06,0.08,0.06,0.08,0.06,0.08,0.09,0.09,0.09,0.09,0.04,0.07,0.06,0.08,0.07,0.07,0.08,0.07,0.08,0.07,0.07,0.04,0.07,0.11,0.04,0.08,0.06,0.08,0,5.98,0.25,706.25,2050,725,5.2,3.04,2.28,8.92,5.2,8.92,9.22},1},
{{0.08,0.09,0.09,0.08,0.11,0.09,0.1,0.15,0.1,0.12,0.11,0.13,0.11,0.07,0.11,0.12,0.07,0.1,0.09,0.08,0.11,0.11,0.08,0.11,0.1,0.07,0.12,0.08,0.1,0.13,0,6.34,0.61,2866.67,800,2175,7.48,5.61,4.5,9.2,6.64,9.2,12.43},5},
{{0.13,0.12,0.07,0.08,0.1,0.11,0.09,0.09,0.12,0.1,0.12,0.09,0.09,0.1,0.09,0.08,0.09,0.11,0.13,0.11,0.12,0.1,0.11,0.08,0.1,0.11,0.08,0.11,0.1,0.11,0,7.08,0.19,1783.33,1035.71,1975,8.37,5.9,4.11,9.95,6.76,9.95,13.26},5},
{{0.11,0.1,0.11,0.11,0.11,0.1,0.1,0.07,0.1,0.12,0.08,0.11,0.11,0.08,0.09,0.11,0.12,0.1,0.1,0.11,0.1,0.1,0.12,0.1,0.11,0.13,0.09,0.09,0.09,0.09,0,7.11,0.16,4500,692.31,1500,8.47,5.62,3.77,9.97,6.58,9.97,13.1},5},
{{0.06,0.06,0.11,0.08,0.08,0.07,0.09,0.07,0.06,0.04,0.06,0.03,0.08,0.12,0.08,0.07,0.1,0.06,0.05,0.06,0.05,0.07,0.05,0.08,0.07,0.08,0.09,0.09,0.08,0.06,0,4.63,0.45,925,716.67,2900,5.54,3.52,2.36,9.4,6.35,9.4,8.59},5},
{{0.03,0.06,0.07,0.08,0.15,0.12,0.11,0.12,0.1,0.18,0.12,0.1,0.09,0.13,0.14,0.12,0.07,0.08,0.12,0.06,0.09,0.11,0.1,0.07,0.11,0.12,0.07,0.12,0.16,0.09,0,9.98,0.41,1150,1770,1450,5.1,3.29,3.02,6.85,4.2,6.85,12.74},1},
{{0.12,0.09,0.13,0.09,0.13,0.11,0.11,0.08,0.09,0.08,0.08,0.14,0.12,0.08,0.07,0.11,0.13,0.09,0.09,0.12,0.12,0.09,0.1,0.12,0.12,0.08,0.09,0.1,0.08,0.11,0,10.64,0.02,3250,704.17,3050,3.96,3.64,3.13,5.24,4.44,5.24,12.66},1},
{{0.1,0.13,0.13,0.11,0.07,0.09,0.11,0.09,0.12,0.07,0.1,0.08,0.09,0.1,0.12,0.11,0.11,0.12,0.12,0.09,0.08,0.11,0.13,0.1,0.11,0.11,0.13,0.08,0.07,0.1,0,10.79,0.08,3750,766.67,1800,4.1,3.35,2.97,5.35,4.21,5.35,12.73},1},
{{0.1,0.11,0.04,0.07,0.03,0.05,0.05,0.08,0.06,0.04,0.08,0.05,0.08,0.06,0.04,0.04,0.06,0.07,0.05,0.1,0.08,0.04,0.06,0.06,0.04,0.05,0.1,0.06,0.06,0.07,0,6.5,0.14,1383.33,345.83,1100,2.52,3.15,1.79,5.25,6.35,5.25,7.68},1},
{{0.03,0.03,0.05,0.04,0.08,0.05,0.07,0.09,0.16,0.42,0.1,0.08,0.11,0.12,0.14,0.11,0.1,0.16,0.07,0.03,0.1,0.05,0.02,0.04,0.06,0.13,0.13,0.19,0.17,0.12,0,9.53,1.84,2900,2387.5,3375,2.64,2.88,2.23,3.4,3.43,3.4,10.64},2},
{{0.03,0.03,0.03,0.04,0.05,0.06,0.08,0.11,0.14,0.44,0.12,0.09,0.09,0.12,0.18,0.11,0.1,0.09,0.09,0.06,0.16,0.12,0.12,0.12,0.11,0.1,0.1,0.06,0.07,0.06,0,9.39,0.2,1216.67,1983.33,1525,3.13,2.91,2.2,4.25,3.56,4.25,10.57},2},
{{0.07,0.1,0.04,0.08,0.06,0.1,0.09,0.12,0.16,0.21,0.05,0.09,0.09,0.18,0.14,0.08,0.12,0.1,0.11,0.07,0.26,0.11,0.11,0.05,0.09,0.1,0.07,0.06,0.08,0.08,0,9.85,-0.5,883.33,2037.5,3575,2.01,3.05,2.78,2.63,3.71,2.63,10.87},2},
{{0.14,0.14,0.14,0.08,0.07,0.07,0.06,0.12,0.11,0.11,0.06,0.06,0.12,0.13,0.11,0.14,0.12,0.14,0.08,0.06,0.3,0.11,0.08,0.07,0.08,0.09,0.1,0.08,0.05,0.07,0,10.01,-0.43,3400,2850,2375,1.86,2.89,2.7,2.38,3.48,2.38,10.84},2},
{{0.12,0.12,0.12,0.11,0.1,0.09,0.09,0.06,0.13,0.08,0.07,0.12,0.12,0.11,0.1,0.09,0.07,0.12,0.13,0.09,0.19,0.13,0.13,0.13,0.16,0.09,0.02,0.06,0.05,0.07,0,9.93,-0.24,883.33,1550,1950,1.68,3.46,1.95,2.28,4.03,2.28,10.51},2},
{{0.23,0.18,0.18,0.11,0.1,0.05,0.09,0.03,0.04,0.02,0.09,0.13,0.09,0.09,0.15,0.13,0.06,0.06,0.12,0.11,0.13,0.14,0.1,0.13,0.13,0.15,0.12,0.05,0.03,0.05,0,9.76,0.05,3950,1050,1800,1.87,3.43,1.72,2.52,4.18,2.52,10.36},2},
{{0.23,0.15,0.08,0.12,0.08,0.11,0.07,0.08,0.08,0.03,0.06,0.12,0.12,0.12,0.09,0.14,0.1,0.06,0.08,0.13,0.11,0.11,0.14,0.17,0.13,0.13,0.08,0.06,0.04,0.06,0,9.94,0.22,600,854.55,2475,1.84,3.33,1.75,2.44,4.02,2.44,10.52},2},
{{0.16,0.13,0.18,0.1,0.09,0.09,0.1,0.1,0.04,0.03,0.1,0.13,0.1,0.09,0.09,0.12,0.09,0.05,0.09,0.15,0.1,0.1,0.1,0.16,0.15,0.12,0.14,0.05,0.04,0.06,0,9.98,0.39,2283.33,706.25,2825,1.57,3.47,1.75,2.07,4.09,2.07,10.45},2},
{{0.14,0.09,0.08,0.05,0.04,0.09,0.07,0.13,0.17,0.17,0.15,0.12,0.06,0.09,0.08,0.11,0.11,0.1,0.06,0.15,0.09,0.15,0.14,0.12,0.11,0.1,0.12,0.06,0.06,0.07,0,9.95,0.43,1850,922.22,3375,2.04,3.8,1.9,2.53,4.53,2.53,10.58},2},
{{0.08,0.08,0.11,0.06,0.07,0.07,0.16,0.13,0.14,0.13,0.15,0.07,0.07,0.1,0.07,0.15,0.1,0.1,0.13,0.08,0.03,0.07,0.1,0.15,0.1,0.14,0.1,0.12,0.14,0.08,0,9.84,1.49,1137.5,1570,1475,1.56,3.39,2.15,1.93,4.04,1.93,10.42},2},
{{0.08,0.15,0.11,0.09,0.09,0.06,0.07,0.11,0.09,0.18,0.08,0.09,0.14,0.08,0.1,0.13,0.09,0.08,0.09,0.14,0.16,0.11,0.14,0.04,0.1,0.07,0.1,0.09,0.09,0.13,0,10.01,0.79,725,930,1233.33,1.85,3.33,2.63,2.41,3.92,2.41,10.77},2},
{{0.07,0.15,0.11,0.14,0.09,0.08,0.1,0.07,0.14,0.07,0.14,0.14,0.04,0.11,0.06,0.07,0.09,0.13,0.13,0.12,0.18,0.12,0.09,0.09,0.04,0.13,0.06,0.11,0.12,0.09,0,10.01,0.56,4125,920,4125,1.46,3.74,2.32,1.84,4.22,1.84,10.56},2},
{{0.08,0.09,0.09,0.07,0.08,0.11,0.13,0.12,0.13,0.12,0.15,0.09,0.11,0.08,0.06,0.09,0.12,0.11,0.09,0.13,0.12,0.11,0.06,0.08,0.09,0.12,0.08,0.09,0.14,0.14,0,9.93,1.34,3350,1131.25,1916.67,1.55,3.83,2.62,1.98,4.45,1.98,10.64},2},
{{0.1,0.09,0.07,0.06,0.06,0.11,0.15,0.15,0.11,0.13,0.14,0.12,0.1,0.05,0.07,0.09,0.11,0.1,0.13,0.1,0.04,0.12,0.07,0.13,0.07,0.1,0.1,0.12,0.12,0.16,0,9.91,1.79,2250,1371.43,4300,1.66,3.7,2.56,2.12,4.29,2.12,10.64},2},
{{0.07,0.07,0.07,0.12,0.07,0.12,0.13,0.14,0.09,0.14,0.13,0.11,0.08,0.07,0.08,0.1,0.13,0.1,0.12,0.1,0.09,0.12,0.1,0.03,0.1,0.09,0.12,0.11,0.15,0.12,0,9.94,1.44,2037.5,1066.67,1160,1.52,3.62,2.42,1.98,4.22,1.98,10.58},2},
{{0.07,0.09,0.06,0.08,0.13,0.14,0.16,0.11,0.08,0.1,0.05,0.11,0.14,0.12,0.1,0.12,0.08,0.09,0.15,0.06,0.03,0.07,0.11,0.09,0.12,0.11,0.1,0.13,0.17,0.1,0,9.93,1.61,2225,1225,2633.33,1.33,3.14,2.19,1.8,3.65,1.8,10.48},2},
{{0.06,0.11,0.1,0.09,0.12,0.15,0.11,0.14,0.1,0.05,0.05,0.06,0.12,0.15,0.12,0.12,0.08,0.09,0.18,0.06,0.02,0.12,0.09,0.1,0.1,0.08,0.16,0.14,0.11,0.11,0,10.15,1.8,4825,1450,3400,1.25,3.1,2.4,1.65,3.65,1.65,10.79},2},
{{0.1,0.12,0.09,0.16,0.09,0.08,0.11,0.11,0.11,0.06,0.13,0.1,0.07,0.11,0.07,0.1,0.12,0.1,0.1,0.12,0.12,0.11,0.09,0.11,0.1,0.09,0.13,0.09,0.11,0.08,0,9.99,0.78,3700,1750,3000,1.45,3.53,2.29,1.9,4.17,1.9,10.59},2},
{{0.06,0.11,0.07,0.13,0.14,0.15,0.1,0.1,0.1,0.06,0.08,0.11,0.09,0.11,0.12,0.11,0.12,0.1,0.08,0.1,0.05,0.08,0.13,0.13,0.09,0.11,0.13,0.11,0.11,0.08,0,9.97,1.21,2225,781.25,1725,1.19,3.21,2.11,1.63,3.86,1.63,10.45},2},
{{0.08,0.12,0.12,0.17,0.14,0.08,0.13,0.1,0.06,0.02,0.06,0.09,0.11,0.14,0.12,0.11,0.1,0.13,0.1,0.07,0.04,0.08,0.13,0.08,0.1,0.13,0.12,0.1,0.16,0.06,0,9.96,1.28,3025,1175,3475,1.19,3.09,2.02,1.55,3.6,1.55,10.44},2},
{{0.1,0.14,0.11,0.12,0.11,0.09,0.09,0.09,0.1,0.08,0.11,0.15,0.08,0.07,0.09,0.06,0.12,0.14,0.07,0.14,0.14,0.08,0.08,0.08,0.12,0.08,0.07,0.11,0.08,0.19,0,10.03,1.51,1375,800,1950,1.49,3.65,2.95,1.94,4.16,1.94,10.86},2},
{{0.15,0.12,0.16,0.13,0.08,0.09,0.07,0.1,0.07,0.05,0.14,0.12,0.11,0.08,0.08,0.04,0.11,0.1,0.11,0.13,0.1,0.07,0.06,0.12,0.11,0.09,0.12,0.1,0.11,0.15,0,9.83,1.59,1100,1362.5,1975,1.57,3.82,2.66,2.03,4.29,2.03,10.61},2},
{{0.18,0.15,0.26,0.14,0.09,0.08,0.02,0.05,0.03,0.02,0.18,0.06,0.08,0.09,0.07,0.1,0.1,0.09,0.1,0.14,0.09,0.12,0.08,0.08,0.08,0.07,0.06,0.14,0.17,0.13,0,9.98,1.57,225,1005.56,4300,1.57,3.85,2.65,2,4.47,2,10.73},2},
{{0.17,0.11,0.09,0.15,0.13,0.12,0.13,0.05,0.06,0.01,0.22,0.07,0.08,0.08,0.05,0.07,0.11,0.09,0.11,0.14,0.09,0.09,0.12,0.07,0.07,0.11,0.13,0.11,0.13,0.11,0,9.72,1.43,2783.33,729.17,1475,1.42,4.15,2.45,2,4.74,2,10.43},2},
{{0.1,0.09,0.14,0.1,0.15,0.12,0.08,0.07,0.12,0.05,0.07,0.15,0.12,0.05,0.11,0.09,0.12,0.09,0.11,0.11,0.11,0.11,0.08,0.11,0.06,0.08,0.08,0.11,0.12,0.17,0,9.99,1.47,666.67,1475,2500,1.37,3.46,2.61,1.89,4.06,1.89,10.68},2},
{{0.15,0.1,0.11,0.13,0.09,0.1,0.1,0.12,0.06,0.05,0.07,0.15,0.12,0.06,0.09,0.09,0.14,0.11,0.11,0.09,0.07,0.13,0.11,0.07,0.07,0.09,0.13,0.13,0.11,0.12,0,9.99,1.42,1937.5,927.78,1225,1.45,3.33,2.39,1.87,3.89,1.87,10.6},2},
{{0.1,0.06,0.08,0.11,0.12,0.14,0.11,0.14,0.11,0.06,0.2,0.08,0.07,0.07,0.11,0.08,0.08,0.1,0.08,0.16,0.09,0.12,0.1,0.09,0.14,0.08,0.12,0.1,0.07,0.11,0,9.87,1.13,1200,843.75,2583.33,1.45,3.98,2.4,2.18,4.63,2.18,10.59},2},
{{0.07,0.07,0.1,0.1,0.13,0.11,0.11,0.16,0.12,0.06,0.12,0.11,0.07,0.11,0.11,0.07,0.14,0.08,0.06,0.15,0.07,0.1,0.1,0.12,0.13,0.15,0.09,0.11,0.09,0.06,0,9.93,0.84,2175,980,1662.5,1.26,3.63,1.88,1.66,4.26,1.66,10.36},2},
{{0.04,0.1,0.09,0.09,0.11,0.15,0.2,0.12,0.11,0.01,0.11,0.12,0.09,0.07,0.12,0.12,0.07,0.1,0.1,0.13,0.05,0.08,0.12,0.14,0.12,0.08,0.12,0.15,0.07,0.09,0,9.98,1.19,1416.67,827.78,1425,1.07,3.46,2.06,1.36,4.09,1.36,10.43},2},
{{0.03,0.1,0.08,0.09,0.12,0.12,0.19,0.16,0.09,0.05,0.07,0.09,0.16,0.07,0.15,0.1,0.07,0.07,0.11,0.13,0.04,0.07,0.12,0.1,0.14,0.14,0.11,0.13,0.08,0.1,0,10.05,1.28,1100,866.67,950,1.12,3.34,1.98,1.45,3.91,1.45,10.47},2},
{{0.1,0.06,0.05,0.14,0.12,0.14,0.11,0.13,0.09,0.09,0.05,0.1,0.14,0.1,0.13,0.11,0.12,0.06,0.12,0.08,0.05,0.11,0.09,0.11,0.13,0.11,0.1,0.1,0.13,0.11,0,9.88,1.4,2050,2012.5,2683.33,1.34,3.09,2.27,1.84,3.63,1.84,10.45},2},
{{0.1,0.05,0.05,0.1,0.13,0.09,0.12,0.1,0.12,0.15,0.01,0.03,0.17,0.2,0.12,0.12,0.1,0.14,0.1,0.03,0.03,0.11,0.09,0.08,0.1,0.1,0.1,0.13,0.16,0.13,0,9.99,1.63,2025,2050,1800,1.66,2.59,2.25,2.19,2.97,2.19,10.63},2},
{{0.02,0.09,0.06,0.1,0.08,0.09,0.08,0.09,0.13,0.15,0.03,0.08,0.13,0.14,0.09,0.08,0.1,0.09,0.11,0.04,0.05,0.09,0.1,0.06,0.08,0.08,0.06,0.12,0.12,0.13,0,8.53,1.37,1050,820,1525,1.31,2.58,2.07,1.94,3.61,1.94,9.07},2},
{{0.12,0.09,0.08,0.18,0.16,0.12,0.1,0.09,0.04,0,0.08,0.11,0.14,0.12,0.04,0.13,0.14,0.13,0.05,0,0.07,0.15,0.14,0.2,0.11,0.18,0.08,0.04,0.05,0,0,9.46,-1.01,1316.67,1150,2012.5,4,3.42,2.16,5.38,4.23,5.38,11},2},
{{0.14,0.07,0.09,0.25,0.16,0.07,0.08,0.07,0.06,0,0.07,0.12,0.13,0.15,0.09,0.09,0.12,0.11,0.11,0,0.09,0.08,0.14,0.15,0.21,0.14,0.08,0.07,0.04,0,0,9.46,-0.71,2425,895,2016.67,4.13,3.32,2.2,5.35,4.09,5.35,11.09},2},
{{0.13,0.09,0.13,0.26,0.12,0.05,0.07,0.08,0.06,0,0.07,0.15,0.1,0.18,0.13,0.04,0.12,0.09,0.09,0,0.09,0.08,0.12,0.14,0.17,0.2,0.09,0.06,0.03,0,0,9.13,-0.61,1925,770.83,3325,4.35,3.33,2.19,5.55,4.18,5.55,10.88},2},
{{0.16,0.09,0.17,0.21,0.1,0.05,0.09,0.1,0.02,0,0.06,0.12,0.18,0.16,0.1,0.04,0.11,0.11,0.09,0,0.07,0.13,0.1,0.17,0.19,0.13,0.13,0.05,0.02,0,0,9.32,-0.7,987.5,1516.67,1937.5,4.61,3.35,2.18,5.77,4.11,5.77,11.11},2},
{{0.15,0.1,0.21,0.19,0.11,0.06,0.04,0.12,0.02,0,0.04,0.14,0.19,0.15,0.09,0.06,0.11,0.12,0.09,0,0.07,0.11,0.11,0.17,0.22,0.12,0.09,0.07,0.03,0,0,9.35,-0.67,1475,688.46,3475,4.62,3.22,2.19,5.78,3.91,5.78,11.16},2},
{{0.18,0.11,0.18,0.21,0.08,0.05,0.07,0.09,0.03,0,0.04,0.12,0.17,0.19,0.09,0.05,0.14,0.11,0.09,0,0.09,0.08,0.11,0.19,0.22,0.1,0.13,0.05,0.02,0,0,9.31,-0.63,1500,731.82,3500,4.82,2.96,2.07,5.91,3.64,5.91,11.12},2},
{{0.2,0.08,0.28,0.12,0.1,0.04,0.06,0.1,0.02,0,0.02,0.15,0.17,0.17,0.07,0.08,0.16,0.09,0.07,0,0.09,0.09,0.14,0.17,0.19,0.12,0.1,0.06,0.03,0,0,9.33,-0.68,1425,1178.57,1250,4.92,3.04,2.14,6.01,3.76,6.01,11.22},2},
{{0.16,0.11,0.23,0.17,0.08,0.05,0.04,0.13,0.04,0,0.06,0.16,0.17,0.2,0.05,0.05,0.12,0.08,0.07,0,0.07,0.09,0.11,0.16,0.23,0.15,0.1,0.03,0.06,0,0,9.02,-0.61,1566.67,461.54,3800,4.95,3.36,2.2,6.11,4.14,6.11,11},2},
{{0.17,0.11,0.21,0.15,0.12,0.03,0.08,0.1,0.03,0,0.06,0.14,0.18,0.15,0.09,0.05,0.14,0.08,0.08,0,0.08,0.08,0.15,0.18,0.2,0.14,0.1,0.04,0.03,0,0,9.07,-0.62,1950,911.11,1500,4.79,3.33,2,5.94,4.11,5.94,10.95},2},
{{0.17,0.14,0.23,0.15,0.08,0.04,0.06,0.12,0.02,0,0.02,0.17,0.2,0.13,0.12,0.05,0.13,0.1,0.07,0,0.09,0.08,0.13,0.11,0.25,0.13,0.11,0.06,0.05,0,0,9.13,-0.64,2666.67,991.67,4025,4.96,3.06,2.17,6.1,3.83,6.1,11.05},2},
{{0.17,0.15,0.22,0.14,0.07,0.03,0.08,0.11,0.02,0,0.05,0.16,0.2,0.13,0.09,0.03,0.11,0.14,0.08,0,0.08,0.09,0.11,0.14,0.18,0.18,0.1,0.05,0.05,0,0,9.21,-0.58,2475,2100,1966.67,5.16,3.43,2.24,6.32,4.1,6.32,11.28},2},
{{0.16,0.12,0.21,0.15,0.1,0.06,0.06,0.11,0.02,0,0.05,0.15,0.18,0.16,0.08,0.04,0.11,0.09,0.08,0,0.08,0.11,0.12,0.18,0.19,0.14,0.09,0.05,0.03,0,0,9.3,-0.78,3000,572.73,3000,4.83,3.5,2.26,5.98,4.25,5.98,11.29},2},
{{0.12,0.09,0.13,0.21,0.12,0.09,0.06,0.12,0.05,0,0.06,0.13,0.11,0.12,0.11,0.06,0.13,0.12,0.09,0,0.11,0.07,0.16,0.19,0.16,0.12,0.07,0.04,0.04,0,0,9.95,-0.79,2450,791.67,1650,4.2,3.69,2.35,5.39,4.44,5.39,11.67},2},
{{0.1,0.06,0.06,0.06,0.14,0.1,0.11,0.14,0.16,0,0.1,0.1,0.07,0.11,0.12,0.08,0.14,0.08,0.12,0,0.11,0.07,0.14,0.09,0.06,0.09,0.11,0.1,0.08,0,0,9.95,0.36,2925,950,1000,4.25,3.84,3.37,5.43,4.75,5.43,12.24},2},
{{0.05,0.1,0.05,0.04,0.1,0.09,0.16,0.11,0.14,0,0.14,0.06,0.09,0.09,0.09,0.11,0.1,0.11,0.11,0,0.11,0.1,0.12,0.07,0.05,0.06,0.06,0.13,0.17,0,0,9.82,0.64,1920,966.67,2200,4.26,4.14,3.5,5.18,5.19,5.18,12.41},2},
{{0.07,0.09,0.06,0.03,0.1,0.1,0.17,0.11,0.14,0,0.13,0.07,0.06,0.07,0.1,0.13,0.09,0.1,0.12,0,0.09,0.19,0.06,0.07,0.08,0.06,0.09,0.14,0.12,0,0,10.35,0.11,2583.33,544.12,2583.33,4.4,4.3,3.34,5.51,5.35,5.51,12.79},2},
{{0.06,0.09,0.06,0.03,0.06,0.16,0.12,0.1,0.18,0,0.14,0.08,0.04,0.04,0.13,0.11,0.11,0.09,0.14,0,0.1,0.15,0.06,0.06,0.03,0.05,0.1,0.14,0.2,0,0,10.19,0.52,2683.33,463.89,3500,4.47,4.31,3.41,5.63,5.32,5.63,12.71},2},
{{0.05,0.1,0.07,0.02,0.1,0.11,0.17,0.08,0.16,0,0.14,0.05,0.08,0.09,0.13,0.09,0.09,0.11,0.12,0,0.13,0.08,0.07,0.07,0.04,0.08,0.08,0.16,0.17,0,0,9.9,0.68,2550,660.71,2012.5,4.3,4.15,3.39,5.34,5.2,5.34,12.46},2},
{{0.06,0.1,0.05,0.05,0.08,0.14,0.13,0.16,0.13,0,0.14,0.06,0.06,0.06,0.13,0.12,0.08,0.13,0.15,0,0.13,0.08,0.08,0.08,0.06,0.05,0.12,0.15,0.13,0,0,10.27,0.36,1983.33,695.83,1975,4.14,4.09,3.49,5.22,5.07,5.22,12.63},2},
{{0.04,0.12,0.06,0.04,0.09,0.14,0.15,0.09,0.16,0,0.14,0.08,0.07,0.05,0.11,0.14,0.1,0.1,0.13,0,0.12,0.13,0.05,0.06,0.04,0.06,0.06,0.21,0.14,0,0,9.77,0.63,2000,970,1500,4.16,4.11,3.42,5.21,5.11,5.21,12.29},2},
{{0.05,0.11,0.05,0.09,0.07,0.13,0.11,0.12,0.14,0,0.14,0.08,0.07,0.06,0.08,0.17,0.08,0.1,0.1,0,0.13,0.1,0.08,0.03,0.05,0.07,0.1,0.13,0.16,0,0,9.77,0.52,1400,709.09,1025,4.27,4.03,3.52,5.32,5.06,5.32,12.32},2},
{{0.06,0.12,0.05,0.05,0.1,0.12,0.16,0.07,0.16,0,0.16,0.05,0.06,0.05,0.1,0.11,0.13,0.12,0.14,0,0.13,0.08,0.07,0.07,0.06,0.08,0.09,0.15,0.13,0,0,9.92,0.6,4050,877.27,1650,4.26,4.21,3.44,5.4,5.31,5.4,12.56},2},
{{0.04,0.12,0.03,0.05,0.13,0.13,0.15,0.12,0.17,0,0.12,0.09,0.05,0.06,0.16,0.11,0.1,0.13,0.1,0,0.13,0.11,0.07,0.03,0.05,0.08,0.17,0.13,0.12,0,0,10.03,0.4,1750,607.69,2283.33,3.91,3.84,3.3,4.96,4.84,4.96,12.11},2},
{{0.06,0.14,0.04,0.06,0.1,0.13,0.09,0.11,0.13,0,0.14,0.07,0.07,0.06,0.12,0.16,0.06,0.09,0.13,0,0.11,0.09,0.12,0.03,0.05,0.08,0.11,0.14,0.13,0,0,9.84,0.79,1580,642.86,2975,4.51,4.11,3.25,5.58,5.2,5.58,12.45},2},
{{0.07,0.1,0.07,0.05,0.11,0.14,0.1,0.12,0.12,0,0.13,0.08,0.09,0.08,0.08,0.1,0.11,0.08,0.14,0,0.12,0.08,0.08,0.05,0.07,0.07,0.12,0.15,0.15,0,0,10.11,0.56,3266.67,484.21,1937.5,4.55,4.27,3.29,5.81,5.23,5.81,12.68},2},
{{0.06,0.13,0.03,0.06,0.09,0.15,0.1,0.11,0.14,0,0.15,0.07,0.06,0.05,0.12,0.17,0.07,0.09,0.08,0,0.12,0.11,0.07,0.06,0.05,0.08,0.14,0.15,0.09,0,0,10.05,0.4,1616.67,488.24,1000,4.56,4.12,3.28,5.75,5.22,5.75,12.56},2},
{{0.07,0.12,0.03,0.05,0.15,0.13,0.07,0.11,0.12,0,0.15,0.09,0.06,0.05,0.13,0.12,0.09,0.09,0.11,0,0.1,0.13,0.07,0.04,0.03,0.08,0.13,0.15,0.15,0,0,9.96,0.39,2283.33,435.71,1937.5,4.64,4.27,3.34,5.92,5.26,5.92,12.57},2},
{{0.08,0.11,0.03,0.07,0.09,0.16,0.09,0.11,0.14,0,0.13,0.08,0.07,0.08,0.08,0.16,0.07,0.1,0.11,0,0.13,0.1,0.1,0.04,0.06,0.06,0.08,0.14,0.14,0,0,9.99,0.48,2025,692.31,2525,4.38,4.15,3.49,5.53,5.19,5.53,12.51},2},
{{0.1,0.09,0.02,0.05,0.08,0.12,0.17,0.11,0.13,0,0.14,0.09,0.05,0.05,0.17,0.09,0.07,0.08,0.09,0,0.1,0.13,0.06,0.05,0.08,0.09,0.09,0.11,0.18,0,0,10.04,0.57,3300,1072.22,2566.67,4.41,4.52,3.37,5.62,5.59,5.62,12.71},2},
{{0.1,0.06,0.07,0.05,0.06,0.13,0.19,0.07,0.1,0,0.14,0.09,0.07,0.08,0.11,0.12,0.08,0.11,0.07,0,0.09,0.1,0.1,0.08,0.02,0.08,0.08,0.09,0.21,0,0,9.74,0.98,3375,687.5,3183.33,4.43,4.27,3.41,5.61,5.35,5.61,12.48},2},
{{0.12,0.07,0.04,0.04,0.11,0.1,0.13,0.11,0.13,0,0.13,0.09,0.07,0.08,0.1,0.14,0.05,0.06,0.12,0,0.09,0.1,0.13,0.05,0.05,0.08,0.11,0.09,0.18,0,0,10.24,0.57,1266.67,567.65,2875,4.83,4.53,3.39,6.04,5.57,6.04,12.98},2},
{{0.09,0.08,0.05,0.05,0.12,0.11,0.11,0.08,0.17,0,0.14,0.08,0.06,0.11,0.09,0.15,0.05,0.11,0.08,0,0.11,0.1,0.09,0.07,0.04,0.11,0.1,0.15,0.12,0,0,9.91,0.56,2900,676.92,2566.67,4.66,4.24,3.32,5.81,5.33,5.81,12.58},2},
{{0.07,0.09,0.07,0.07,0.11,0.11,0.11,0.07,0.14,0,0.13,0.09,0.05,0.06,0.13,0.12,0.11,0.1,0.11,0,0.12,0.1,0.08,0.08,0.04,0.08,0.12,0.16,0.13,0,0,9.99,0.43,1760,669.23,1225,4.54,3.99,3.24,5.7,5,5.7,12.44},2},
{{0.04,0.08,0.06,0.08,0.13,0.17,0.07,0.06,0.14,0,0.06,0.1,0.06,0.05,0.11,0.13,0.15,0.09,0.11,0,0.12,0.06,0.07,0.09,0.05,0.07,0.16,0.1,0.09,0,0,9.19,0.3,2875,1200,1400,3.41,3.1,2.66,4.93,4.33,4.93,10.82},2},
{{0,0,0.02,0.05,0.05,0.08,0.1,0.11,0.26,0.35,0.04,0.05,0.09,0.14,0.15,0.12,0.1,0.05,0.1,0.19,0.09,0.1,0.08,0.13,0.13,0.11,0.14,0.12,0.09,0.03,0,9.99,0.01,3675,546.88,550,1.73,2.73,2.06,2.24,3.25,2.24,10.56},2},
{{0,0.01,0.06,0.03,0.08,0.1,0.12,0.14,0.19,0.29,0.1,0.06,0.08,0.1,0.13,0.1,0.08,0.05,0.09,0.23,0.18,0.06,0.08,0.09,0.13,0.17,0.12,0.1,0.07,0.02,0,9.89,-0.37,2975,1018.75,1450,2.12,3.06,2.18,2.61,3.58,2.61,10.59},2},
{{0,0.02,0.03,0.07,0.06,0.09,0.09,0.15,0.2,0.31,0.08,0.06,0.08,0.1,0.09,0.12,0.09,0.12,0.12,0.15,0.14,0.11,0.06,0.13,0.12,0.14,0.08,0.15,0.08,0.02,0,10.03,-0.36,3025,2900,1950,2.11,2.85,2.24,2.68,3.35,2.68,10.75},2},
{{0,0.01,0.04,0.02,0.04,0.05,0.05,0.06,0.13,0.6,0.09,0.09,0.07,0.1,0.12,0.13,0.09,0.08,0.13,0.13,0.14,0.08,0.1,0.12,0.11,0.12,0.14,0.12,0.06,0.03,0,9.62,-0.27,500,808.33,3100,3.13,2.82,2.16,3.95,3.35,3.95,10.76},2},
{{0.1,0.09,0.08,0.1,0.08,0.13,0.08,0.05,0.09,0.23,0.08,0.09,0.09,0.15,0.11,0.16,0.1,0.06,0.09,0.08,0.08,0.1,0.11,0.12,0.11,0.12,0.12,0.08,0.13,0.05,0,9.11,0.15,416.67,1000,900,3.86,2.62,2.25,4.75,3.18,4.75,10.64},2},
{{0.23,0.09,0.15,0.12,0.11,0.12,0.07,0.04,0.09,0.01,0.17,0.1,0.11,0.09,0.08,0.07,0.11,0.15,0.1,0.05,0.06,0.11,0.13,0.07,0.12,0.08,0.1,0.13,0.15,0.06,0,8.59,0.45,2275,925,2300,5.15,3.02,2.27,5.92,3.43,5.92,10.7},2},
{{0.16,0.14,0.14,0.1,0.1,0.07,0.1,0.08,0.07,0.07,0.19,0.07,0.08,0.1,0.11,0.08,0.09,0.1,0.12,0.1,0.09,0.09,0.11,0.1,0.09,0.13,0.11,0.08,0.11,0.12,0,8.8,0.55,1700,1820,687.5,4.72,3.08,2.48,5.53,3.56,5.53,10.87},2},
{{0.1,0.18,0.09,0.12,0.13,0.07,0.1,0.14,0.07,0.02,0.13,0.11,0.11,0.07,0.13,0.09,0.08,0.08,0.13,0.11,0.09,0.1,0.12,0.09,0.16,0.07,0.12,0.08,0.08,0.13,0,9.05,0.45,1525,937.5,2500,4.35,2.98,2.49,5.1,3.45,5.1,10.86},2},
{{0.13,0.12,0.11,0.13,0.1,0.05,0.13,0.11,0.1,0.04,0.16,0.12,0.07,0.08,0.11,0.09,0.03,0.12,0.14,0.11,0.12,0.09,0.11,0.08,0.13,0.1,0.08,0.12,0.1,0.11,0,8.98,0.3,2875,2012.5,2100,4.31,3.11,2.49,5.14,3.55,5.14,10.77},2},
{{0.14,0.13,0.11,0.09,0.11,0.11,0.1,0.06,0.11,0.05,0.16,0.07,0.11,0.12,0.08,0.08,0.07,0.14,0.07,0.12,0.1,0.13,0.07,0.12,0.11,0.1,0.08,0.07,0.12,0.12,0,8.95,0.3,2000,617.86,2033.33,4.4,3.07,2.55,5.25,3.5,5.25,10.8},2},
{{0.17,0.1,0.12,0.13,0.08,0.11,0.07,0.1,0.11,0.04,0.11,0.1,0.14,0.1,0.07,0.12,0.11,0.08,0.11,0.08,0.15,0.08,0.08,0.11,0.11,0.09,0.08,0.09,0.08,0.16,0,9.01,0.37,2900,3600,1583.33,4.52,2.85,2.76,5.38,3.33,5.38,11.01},2},
{{0.14,0.12,0.12,0.11,0.1,0.09,0.09,0.11,0.13,0.02,0.18,0.1,0.07,0.07,0.09,0.09,0.07,0.12,0.1,0.14,0.1,0.09,0.12,0.06,0.13,0.06,0.11,0.14,0.1,0.12,0,9.04,0.47,2733.33,2883.33,2616.67,4.35,3.33,2.53,5.21,3.79,5.21,10.88},2},
{{0.15,0.08,0.1,0.15,0.12,0.1,0.08,0.07,0.11,0.07,0.16,0.1,0.06,0.05,0.08,0.12,0.09,0.12,0.11,0.12,0.15,0.09,0.1,0.08,0.07,0.09,0.11,0.08,0.15,0.11,0,9.26,0.31,2725,972.22,3700,4.25,3.16,2.79,5.11,3.64,5.11,11.09},2},
{{0.12,0.1,0.08,0.08,0.12,0.11,0.12,0.16,0.07,0.07,0.14,0.12,0.09,0.04,0.08,0.11,0.09,0.1,0.12,0.12,0.1,0.13,0.07,0.09,0.1,0.11,0.1,0.11,0.11,0.11,0,9.22,0.39,1362.5,3050,3725,4.04,3.19,2.59,4.95,3.67,4.95,10.89},2},
{{0.11,0.11,0.09,0.06,0.11,0.14,0.09,0.12,0.1,0.08,0.09,0.1,0.1,0.1,0.07,0.11,0.12,0.1,0.15,0.08,0.08,0.12,0.09,0.09,0.09,0.1,0.09,0.12,0.11,0.13,0,9.38,0.53,1825,586.67,2433.33,3.88,2.79,2.46,4.72,3.17,4.72,10.9},2},
{{0.11,0.13,0.08,0.12,0.08,0.13,0.14,0.1,0.07,0.07,0.04,0.12,0.14,0.12,0.11,0.1,0.11,0.17,0.09,0.04,0.08,0.11,0.1,0.08,0.09,0.09,0.11,0.15,0.09,0.13,0,9.16,0.73,1500,457.5,1470,4.22,2.5,2.6,5.04,2.84,5.04,10.93},2},
{{0.07,0.1,0.15,0.1,0.13,0.1,0.12,0.11,0.06,0.07,0.04,0.12,0.17,0.1,0.1,0.1,0.09,0.11,0.1,0.1,0.05,0.13,0.11,0.08,0.09,0.12,0.1,0.08,0.14,0.11,0,9.21,0.78,2900,476.32,4325,4.02,2.68,2.49,4.69,3.04,4.69,10.81},2},
{{0.11,0.13,0.1,0.15,0.06,0.1,0.12,0.09,0.11,0.06,0.08,0.08,0.14,0.11,0.09,0.14,0.08,0.11,0.11,0.08,0.08,0.1,0.1,0.07,0.1,0.08,0.1,0.11,0.13,0.14,0,9.21,0.85,3275,2600,1050,4.19,2.65,2.61,5.02,3.06,5.02,10.95},2},
{{0.09,0.13,0.13,0.13,0.15,0.08,0.09,0.08,0.09,0.06,0.08,0.09,0.12,0.11,0.11,0.14,0.15,0.08,0.07,0.08,0.06,0.11,0.14,0.08,0.09,0.09,0.1,0.09,0.15,0.1,0,9.07,0.57,3950,722.73,700,4.28,2.49,2.52,5.06,2.96,5.06,10.81},2},
{{0.12,0.12,0.09,0.1,0.13,0.08,0.13,0.08,0.11,0.06,0.07,0.13,0.08,0.11,0.13,0.12,0.11,0.09,0.07,0.11,0.1,0.07,0.12,0.11,0.09,0.11,0.06,0.09,0.12,0.15,0,9.18,0.79,3875,1200,1200,4.17,2.72,2.76,5.07,3.25,5.07,11.02},2},
{{0.08,0.09,0.17,0.16,0.11,0.11,0.09,0.07,0.09,0.06,0.03,0.09,0.14,0.16,0.13,0.08,0.11,0.1,0.1,0.07,0.07,0.11,0.14,0.07,0.08,0.11,0.09,0.13,0.13,0.11,0,9.15,0.77,1583.33,1364.29,2500,4.16,2.46,2.55,4.81,2.85,4.81,10.84},2},
{{0.07,0.14,0.13,0.09,0.11,0.15,0.13,0.13,0.05,0.03,0.05,0.15,0.1,0.12,0.1,0.09,0.18,0.09,0.04,0.1,0.1,0.09,0.12,0.09,0.11,0.09,0.15,0.1,0.08,0.09,0,9.14,0.41,2950,800,3925,4.06,2.62,2.51,4.74,3.09,4.74,10.79},2},
{{0.08,0.15,0.1,0.1,0.12,0.14,0.15,0.12,0.05,0.02,0.08,0.09,0.13,0.12,0.08,0.08,0.14,0.09,0.12,0.08,0.09,0.11,0.09,0.1,0.12,0.09,0.12,0.09,0.11,0.11,0,9.18,0.44,2425,1550,1537.5,4.17,2.76,2.49,4.83,3.17,4.83,10.86},2},
{{0.1,0.1,0.13,0.1,0.13,0.09,0.12,0.1,0.1,0.04,0.06,0.14,0.12,0.11,0.11,0.07,0.09,0.15,0.09,0.09,0.11,0.11,0.09,0.1,0.1,0.12,0.07,0.12,0.08,0.13,0,9.16,0.53,3900,925,4875,4.12,2.72,2.71,4.88,3.11,4.88,10.94},2},
{{0.13,0.13,0.11,0.11,0.13,0.09,0.11,0.14,0.05,0.04,0.12,0.12,0.09,0.1,0.1,0.13,0.12,0.07,0.08,0.09,0.11,0.11,0.1,0.15,0.09,0.09,0.11,0.07,0.06,0.15,0,8.89,0.26,2450,783.33,2750,4.52,2.82,2.75,5.44,3.32,5.44,10.88},2},
{{0.14,0.11,0.11,0.09,0.09,0.11,0.11,0.15,0.09,0.04,0.13,0.12,0.09,0.09,0.1,0.06,0.11,0.1,0.1,0.13,0.1,0.12,0.1,0.15,0.07,0.08,0.1,0.09,0.09,0.12,0,9.13,0.27,2900,1357.14,1950,4.26,3.08,2.67,5.13,3.5,5.13,10.92},2},
{{0.08,0.14,0.1,0.12,0.11,0.1,0.13,0.1,0.09,0.05,0.07,0.16,0.1,0.1,0.11,0.07,0.1,0.15,0.1,0.07,0.11,0.13,0.12,0.09,0.11,0.1,0.07,0.08,0.1,0.12,0,9.14,0.24,2925,1007.14,1916.67,4.05,2.78,2.6,4.84,3.18,4.84,10.8},2},
{{0.05,0.07,0.08,0.11,0.07,0.06,0.04,0.04,0.05,0.02,0.05,0.04,0.07,0.09,0.09,0.07,0.07,0.05,0.02,0.05,0.04,0.05,0.1,0.1,0.08,0.04,0.04,0.07,0.02,0.05,0,5.05,-0.03,1400,770,600,2.58,2.31,1.2,5.16,4.79,5.16,6.04},2},
{{0.09,0.1,0.12,0.12,0.13,0.06,0.11,0.09,0.08,0.13,0.11,0.12,0.18,0.04,0.06,0.1,0.12,0.1,0.04,0.1,0.08,0.05,0.05,0.1,0.14,0.16,0.11,0.13,0.1,0.12,0,8.38,0.99,831.25,369.23,1825,7.76,7.29,4.15,9.14,8.14,9.14,14.53},0},
{{0.09,0.11,0.12,0.1,0.1,0.14,0.13,0.07,0.08,0.08,0.11,0.13,0.12,0.09,0.06,0.1,0.13,0.06,0.06,0.13,0.1,0.06,0.1,0.07,0.12,0.13,0.08,0.1,0.11,0.15,0,8.36,0.76,1690,383.33,1466.67,7.32,7.14,4.88,8.58,8.07,8.58,14.59},0},
{{0.08,0.15,0.07,0.1,0.11,0.12,0.14,0.09,0.05,0.11,0.11,0.11,0.1,0.14,0.06,0.09,0.09,0.09,0.11,0.11,0.09,0.1,0.09,0.1,0.08,0.1,0.13,0.12,0.1,0.12,0,8.9,0.29,4275,415.22,2850,7.56,6.94,4.81,8.85,7.79,8.85,14.88},0},
{{0.09,0.13,0.09,0.13,0.11,0.12,0.11,0.07,0.07,0.1,0.1,0.14,0.12,0.08,0.08,0.1,0.1,0.09,0.12,0.09,0.09,0.06,0.11,0.14,0.11,0.1,0.1,0.14,0.07,0.1,0,8.46,0.03,1250,363.46,1762.5,7.44,7.13,4.4,8.82,8.02,8.82,14.57},0},
{{0.11,0.14,0.09,0.05,0.1,0.09,0.17,0.09,0.09,0.09,0.12,0.13,0.09,0.09,0.09,0.07,0.09,0.09,0.14,0.11,0.1,0.06,0.13,0.12,0.12,0.08,0.1,0.14,0.07,0.11,0,8.5,-0.09,3100,361.54,3950,8.21,7.37,4.7,9.34,8.31,9.34,15.24},0},
{{0.11,0.14,0.06,0.11,0.09,0.12,0.12,0.08,0.12,0.07,0.11,0.11,0.1,0.1,0.11,0.08,0.09,0.12,0.08,0.1,0.08,0.09,0.09,0.11,0.09,0.11,0.11,0.1,0.11,0.14,0,8.45,0.49,1725,489.47,1300,7.76,7,4.8,9.02,8,9.02,14.96},0},
{{0.15,0.1,0.06,0.06,0.12,0.1,0.13,0.11,0.09,0.09,0.11,0.13,0.1,0.11,0.05,0.1,0.1,0.12,0.11,0.09,0.09,0.06,0.09,0.15,0.11,0.12,0.1,0.1,0.09,0.11,0,8.57,0.13,1408.33,418.18,2200,8.3,7.12,4.5,9.6,7.94,9.6,15.25},0},
{{0.11,0.15,0.09,0.07,0.08,0.09,0.12,0.14,0.08,0.1,0.09,0.13,0.12,0.12,0.07,0.07,0.11,0.1,0.1,0.1,0.13,0.11,0.09,0.12,0.08,0.08,0.07,0.11,0.12,0.11,0,8.48,-0.3,2133.33,388,1075,8.37,6.97,5.2,9.44,7.89,9.44,15.31},0},
{{0.14,0.11,0.08,0.09,0.1,0.1,0.11,0.1,0.11,0.1,0.12,0.11,0.11,0.11,0.06,0.08,0.12,0.08,0.12,0.09,0.12,0.09,0.08,0.11,0.13,0.09,0.12,0.11,0.05,0.13,0,8.56,-0.22,1057.14,425,1400,8.43,7.27,4.77,9.71,8.23,9.71,15.55},0},
{{0.12,0.14,0.06,0.1,0.11,0.07,0.13,0.11,0.08,0.11,0.12,0.08,0.12,0.13,0.1,0.05,0.1,0.09,0.13,0.11,0.13,0.08,0.09,0.13,0.07,0.08,0.08,0.13,0.14,0.09,0,8.65,-0.13,2616.67,400,1562.5,8.17,7.12,5.01,9.44,8.01,9.44,15.42},0},
{{0.13,0.13,0.06,0.07,0.1,0.1,0.11,0.12,0.09,0.11,0.09,0.14,0.09,0.14,0.06,0.09,0.12,0.08,0.12,0.09,0.14,0.13,0.06,0.08,0.06,0.1,0.11,0.1,0.12,0.12,0,8.6,-0.2,3650,410.87,1950,8.48,7.02,5.04,9.68,7.85,9.68,15.47},0},
{{0.14,0.1,0.1,0.08,0.07,0.13,0.07,0.11,0.09,0.12,0.12,0.12,0.09,0.13,0.04,0.05,0.11,0.11,0.13,0.1,0.13,0.13,0.08,0.12,0.06,0.06,0.11,0.09,0.12,0.12,0,8.7,-0.22,1520,387.5,2075,8.6,7.48,5.26,9.97,8.33,9.97,16},0},
{{0.12,0.12,0.06,0.1,0.08,0.06,0.13,0.11,0.09,0.14,0.11,0.13,0.07,0.11,0.08,0.08,0.11,0.12,0.14,0.08,0.11,0.1,0.09,0.09,0.1,0.08,0.12,0.16,0.07,0.1,0,8.74,-0.16,910,436.36,2316.67,8.64,7.1,4.63,9.98,7.96,9.98,15.63},0},
{{0.13,0.1,0.09,0.09,0.1,0.08,0.08,0.1,0.14,0.11,0.12,0.12,0.07,0.14,0.09,0.08,0.09,0.08,0.13,0.1,0.1,0.11,0.08,0.11,0.11,0.07,0.13,0.11,0.11,0.1,0,8.29,-0.05,2150,425,1130,8.47,7.14,4.61,9.81,8.19,9.81,15.4},0},
{{0.16,0.1,0.11,0.07,0.05,0.09,0.12,0.08,0.12,0.11,0.16,0.09,0.08,0.14,0.06,0.08,0.09,0.06,0.12,0.13,0.09,0.13,0.1,0.08,0.1,0.09,0.11,0.12,0.11,0.09,0,8.26,-0.16,1335.71,374,3575,8.59,7.63,4.84,9.73,8.64,9.73,15.67},0},
{{0.14,0.11,0.08,0.08,0.11,0.07,0.1,0.09,0.13,0.11,0.14,0.09,0.08,0.13,0.08,0.06,0.08,0.09,0.16,0.1,0.12,0.14,0.13,0.07,0.07,0.08,0.07,0.13,0.1,0.11,0,8.31,-0.51,1010,475,783.33,8.61,7.56,5.32,9.92,8.6,9.92,16.03},0},
{{0.14,0.11,0.09,0.1,0.02,0.06,0.13,0.12,0.13,0.12,0.15,0.11,0.11,0.1,0.05,0.08,0.08,0.11,0.13,0.1,0.12,0.11,0.16,0.08,0.08,0.09,0.09,0.08,0.11,0.1,0,8.06,-0.64,1056.25,445.24,925,9.03,7.68,4.84,10.12,8.57,10.12,15.76},0},
{{0.14,0.11,0.11,0.09,0.06,0.05,0.05,0.16,0.14,0.11,0.13,0.12,0.1,0.11,0.08,0.07,0.06,0.12,0.14,0.09,0.11,0.13,0.1,0.09,0.11,0.1,0.08,0.08,0.14,0.08,0,8.28,-0.7,1775,561.76,2175,8.83,7.42,4.84,10,8.38,10,15.82},0},
{{0.14,0.09,0.1,0.08,0.05,0.05,0.12,0.14,0.11,0.15,0.14,0.1,0.11,0.11,0.06,0.08,0.04,0.12,0.12,0.12,0.15,0.11,0.12,0.1,0.07,0.08,0.1,0.08,0.09,0.13,0,8.23,-0.85,1462.5,410.42,3625,9.02,7.73,5.23,10.12,8.67,10.12,16.08},0},
{{0.15,0.12,0.08,0.07,0.06,0.06,0.07,0.12,0.16,0.14,0.16,0.1,0.13,0.08,0.06,0.09,0.08,0.09,0.12,0.11,0.13,0.15,0.11,0.09,0.07,0.07,0.12,0.08,0.11,0.1,0,7.78,-0.87,783.33,379.17,2725,9.39,7.78,5.12,10.44,8.79,10.44,16.06},0},
{{0.13,0.13,0.08,0.08,0.1,0.03,0.15,0.09,0.14,0.09,0.12,0.13,0.11,0.13,0.06,0.07,0.06,0.1,0.11,0.11,0.15,0.09,0.07,0.11,0.07,0.12,0.09,0.15,0.11,0.07,0,8.09,-0.6,3250,426.19,2150,8.36,7.54,4.82,9.52,8.48,9.52,15.22},0},
{{0.1,0.13,0.11,0.08,0.08,0.1,0.09,0.12,0.13,0.09,0.14,0.1,0.09,0.12,0.06,0.05,0.13,0.11,0.13,0.1,0.07,0.07,0.12,0.12,0.1,0.13,0.09,0.08,0.14,0.11,0,8.62,0.36,1191.67,487.5,1300,8.24,7.28,4.58,9.46,8.18,9.46,15.52},0},
{{0.14,0.12,0.09,0.07,0.09,0.06,0.07,0.15,0.11,0.13,0.14,0.11,0.12,0.08,0.1,0.06,0.08,0.12,0.1,0.11,0.11,0.09,0.1,0.14,0.1,0.08,0.11,0.09,0.09,0.11,0,8.2,-0.51,2616.67,457.14,2050,8.83,7.34,4.7,9.98,8.33,9.98,15.52},0},
{{0.14,0.07,0.09,0.09,0.07,0.08,0.08,0.15,0.14,0.11,0.11,0.14,0.12,0.11,0.04,0.09,0.12,0.1,0.09,0.09,0.1,0.1,0.11,0.06,0.08,0.12,0.13,0.13,0.12,0.08,0,8.29,-0.22,1340,387.5,750,8.81,7.17,4.75,10,8.01,10,15.37},0},
{{0.11,0.06,0.08,0.1,0.08,0.09,0.08,0.14,0.12,0.15,0.18,0.12,0.09,0.07,0.04,0.12,0.11,0.07,0.11,0.09,0.17,0.08,0.06,0.08,0.07,0.1,0.09,0.1,0.16,0.1,0,7.6,-0.22,1525,460,600,8.64,7.83,5.7,10.01,8.84,10.01,16.03},0},
{{0.02,0.09,0.16,0.13,0.13,0.13,0.08,0.12,0.09,0.07,0.04,0.09,0.06,0.08,0.17,0.18,0.17,0.12,0.05,0.06,0.09,0.09,0.12,0.09,0.09,0.13,0.14,0.1,0.08,0.1,0,9.63,0.17,4250,623.33,1950,6.31,4.95,4.39,7.47,6.21,7.47,13.91},0},
{{0.08,0.12,0.1,0.1,0.1,0.12,0.07,0.1,0.11,0.13,0.08,0.1,0.12,0.08,0.14,0.08,0.1,0.11,0.09,0.1,0.12,0.12,0.06,0.1,0.09,0.12,0.12,0.09,0.1,0.11,0,8.89,-0.15,850,440.48,4450,8.03,6.57,4.91,9.35,7.64,9.35,15.21},0},
{{0.01,0.05,0.16,0.18,0.16,0.17,0.08,0.08,0.07,0.07,0,0.06,0.09,0.06,0.26,0.23,0.11,0.1,0.05,0.07,0.05,0.16,0.08,0.11,0.12,0.14,0.11,0.08,0.1,0.06,0,10.06,0.15,1710,730.77,1950,5.55,4.02,3.94,6.91,5.06,6.91,13.2},0},
{{0.01,0.04,0.19,0.14,0.23,0.16,0.06,0.05,0.09,0.07,0.01,0.05,0.1,0.08,0.25,0.18,0.11,0.1,0.12,0.02,0.04,0.13,0.16,0.09,0.14,0.13,0.08,0.07,0.1,0.08,0,9.92,0.22,1171.43,529.41,1242.86,5.43,4.23,4.05,6.67,5.24,6.67,13.03},0},
{{0.01,0.04,0.16,0.19,0.16,0.21,0.06,0.07,0.06,0.07,0,0.02,0.11,0.08,0.23,0.24,0.13,0.08,0.09,0.04,0.03,0.1,0.12,0.15,0.17,0.1,0.11,0.08,0.09,0.07,0,10.15,0.25,1633.33,546.88,2475,5.24,3.87,3.71,6.55,4.85,6.55,12.91},0},
{{0,0.04,0.18,0.15,0.18,0.2,0.08,0.08,0.07,0.04,0,0.01,0.1,0.09,0.25,0.26,0.12,0.12,0.04,0.03,0.05,0.11,0.13,0.13,0.16,0.13,0.07,0.1,0.04,0.11,0,10.07,0.08,2125,760,1316.67,5.05,3.51,3.88,6.13,4.44,6.13,12.73},0},
{{0.01,0.04,0.13,0.14,0.14,0.14,0.09,0.04,0.06,0.05,0,0.01,0.08,0.09,0.21,0.16,0.11,0.11,0.04,0.03,0.03,0.08,0.12,0.09,0.16,0.09,0.06,0.06,0.1,0.05,0,8.29,0.1,1080,531.82,975,4.32,3.19,3.06,6.61,4.99,6.61,10.57},0},
{{0.08,0.07,0.09,0.11,0.13,0.14,0.1,0.11,0.1,0.05,0.08,0.06,0.12,0.12,0.1,0.08,0.09,0.05,0.08,0.22,0.17,0.06,0.08,0.07,0.09,0.11,0.11,0.12,0.09,0.13,0,2.16,1.78,314,250,2900,7.78,4.35,4.75,10.2,5.56,10.2,11.22},0},
{{0.07,0.11,0.11,0.13,0.1,0.12,0.1,0.07,0.09,0.04,0.08,0.14,0.09,0.12,0.1,0.08,0.09,0.09,0.11,0.12,0.13,0.12,0.06,0.1,0.12,0.08,0.06,0.14,0.11,0.12,0,0.64,1.8,320,2566.67,1310,7.27,3.07,4.88,10.05,3.82,10.05,10.16},0},
{{0.09,0.09,0.12,0.12,0.11,0.1,0.1,0.09,0.08,0.06,0.08,0.11,0.11,0.12,0.1,0.09,0.09,0.13,0.09,0.1,0.12,0.13,0.1,0.08,0.12,0.08,0.09,0.09,0.13,0.07,0,0.67,1.2,374,2150,1325,7.36,2.93,4.4,10.11,3.7,10.11,10.04},0},
{{0.03,0.12,0.15,0.11,0.1,0.14,0.08,0.1,0.08,0.06,0.07,0.1,0.06,0.14,0.15,0.12,0.09,0.1,0.11,0.09,0.09,0.1,0.11,0.12,0.08,0.11,0.07,0.12,0.14,0.08,0,0.67,1.77,344.64,1683.33,2375,7.45,2.67,4.36,10.2,3.46,10.2,10.03},0},
{{0.08,0.07,0.14,0.14,0.1,0.08,0.11,0.09,0.1,0.09,0.06,0.11,0.12,0.1,0.13,0.13,0.11,0.08,0.13,0.06,0.09,0.09,0.14,0.12,0.11,0.07,0.08,0.1,0.11,0.12,0,0.59,1.78,368,2312.5,2950,7.62,2.48,4.49,10.37,3.09,10.37,10.11},0},
{{0.07,0.09,0.13,0.11,0.15,0.11,0.07,0.08,0.1,0.07,0.05,0.12,0.1,0.13,0.11,0.09,0.1,0.15,0.12,0.07,0.09,0.12,0.09,0.15,0.07,0.09,0.09,0.09,0.15,0.08,0,0.77,1.77,369.23,1550,1225,7.39,2.73,4.41,10.17,3.39,10.17,9.93},0},
{{0.07,0.08,0.14,0.12,0.16,0.08,0.07,0.12,0.07,0.07,0.08,0.08,0.1,0.11,0.1,0.09,0.16,0.11,0.1,0.1,0.09,0.07,0.1,0.12,0.13,0.04,0.14,0.08,0.13,0.11,0,0.7,1.88,359.62,3033.33,1600,7.25,2.76,4.59,10.06,3.56,10.06,10.21},0},
{{0.09,0.12,0.11,0.06,0.12,0.09,0.09,0.14,0.14,0.04,0.08,0.12,0.1,0.09,0.07,0.14,0.1,0.11,0.1,0.12,0.09,0.09,0.1,0.09,0.1,0.12,0.08,0.1,0.12,0.13,0,0.77,2.2,373.08,900,2275,7.9,2.99,4.62,10.5,3.82,10.5,10.73},0},
{{0.1,0.14,0.09,0.09,0.09,0.07,0.11,0.12,0.12,0.07,0.11,0.08,0.11,0.09,0.09,0.12,0.12,0.11,0.13,0.07,0.11,0.05,0.11,0.12,0.09,0.13,0.09,0.1,0.11,0.11,0,0.43,1.92,372.92,3150,733.33,7.69,3.08,4.39,10.4,4.03,10.4,10.33},0},
{{0.03,0.1,0.1,0.12,0.17,0.11,0.09,0.09,0.12,0.06,0.12,0.08,0.08,0.1,0.12,0.12,0.11,0.11,0.08,0.1,0.1,0.13,0.08,0.11,0.08,0.09,0.09,0.14,0.09,0.11,0,0.53,1.84,410.87,3225,3075,7.64,2.85,4.4,10.2,3.67,10.2,10.08},0},
{{0.09,0.12,0.11,0.1,0.08,0.09,0.12,0.08,0.12,0.07,0.11,0.1,0.07,0.09,0.12,0.11,0.11,0.11,0.09,0.11,0.09,0.11,0.09,0.13,0.1,0.1,0.08,0.09,0.12,0.12,0,0.57,1.99,384,2150,1937.5,7.56,3.12,4.53,10.33,4.01,10.33,10.28},0},
{{0.05,0.15,0.09,0.11,0.15,0.09,0.08,0.08,0.13,0.05,0.08,0.09,0.14,0.09,0.11,0.11,0.1,0.11,0.09,0.12,0.09,0.14,0.1,0.1,0.06,0.07,0.15,0.13,0.1,0.09,0,0.73,1.86,355.56,1483.33,1083.33,7.26,3,4.26,10.06,3.78,10.06,9.86},0},
{{0.09,0.11,0.11,0.12,0.11,0.1,0.09,0.09,0.1,0.08,0.1,0.09,0.1,0.11,0.1,0.11,0.09,0.12,0.09,0.11,0.09,0.14,0.11,0.11,0.1,0.09,0.1,0.07,0.1,0.11,0,0.59,1.66,442.86,1050,2883.33,7.28,3.07,4.34,10.02,3.9,10.02,9.99},0},
{{0.13,0.1,0.11,0.1,0.06,0.11,0.1,0.13,0.08,0.07,0.1,0.13,0.08,0.05,0.1,0.14,0.12,0.08,0.11,0.1,0.09,0.11,0.09,0.09,0.11,0.1,0.12,0.11,0.12,0.09,0,0.57,1.89,397.92,3050,550,7.4,3.11,4.2,10.06,4.08,10.06,10.06},0},
{{0.08,0.13,0.07,0.08,0.1,0.08,0.15,0.13,0.1,0.05,0.12,0.1,0.08,0.12,0.06,0.12,0.11,0.1,0.1,0.12,0.1,0.12,0.1,0.06,0.14,0.11,0.1,0.12,0.06,0.12,0,0.42,1.93,404.35,2183.33,700,7.88,3.27,4.11,10.37,4.22,10.37,10.44},0},
{{0.1,0.1,0.11,0.09,0.07,0.11,0.11,0.12,0.11,0.06,0.14,0.11,0.1,0.08,0.09,0.08,0.12,0.06,0.11,0.12,0.1,0.09,0.11,0.09,0.13,0.11,0.08,0.09,0.1,0.11,0,0.45,1.9,380.43,3350,1610,7.69,3.38,4.48,10.26,4.29,10.26,10.51},0},
{{0.14,0.12,0.08,0.1,0.09,0.1,0.09,0.1,0.09,0.07,0.09,0.11,0.11,0.11,0.07,0.09,0.13,0.1,0.11,0.1,0.11,0.09,0.1,0.08,0.1,0.13,0.11,0.08,0.11,0.12,0,0.61,1.9,425,2900,3700,7.23,3.04,4.4,9.95,3.81,9.95,10.1},0},
{{0.1,0.12,0.1,0.13,0.08,0.11,0.09,0.12,0.09,0.05,0.07,0.13,0.1,0.09,0.1,0.11,0.08,0.11,0.14,0.09,0.1,0.13,0.12,0.07,0.08,0.18,0.07,0.1,0.07,0.12,0,0.64,1.73,419.57,3375,1080,7.19,3.09,4.34,9.88,3.87,9.88,9.91},0},
{{0.06,0.1,0.07,0.13,0.12,0.14,0.09,0.11,0.12,0.06,0.07,0.11,0.13,0.1,0.09,0.07,0.13,0.12,0.15,0.06,0.1,0.08,0.13,0.16,0.09,0.09,0.12,0.09,0.06,0.1,0,0.63,1.55,380,2400,3725,7.64,2.9,3.87,10.19,3.58,10.19,9.82},0},
{{0.09,0.07,0.08,0.13,0.07,0.12,0.14,0.1,0.11,0.06,0.14,0.09,0.1,0.1,0.08,0.08,0.11,0.11,0.12,0.08,0.08,0.11,0.11,0.13,0.1,0.11,0.13,0.1,0.08,0.07,0,0.2,1.44,341.07,1487.5,2287.5,8.07,3.19,3.6,10.58,3.96,10.58,10.34},0},
{{0.07,0.06,0.1,0.11,0.14,0.16,0.07,0.09,0.11,0.07,0.1,0.07,0.12,0.12,0.14,0.09,0.1,0.13,0.08,0.06,0.11,0.08,0.09,0.08,0.13,0.13,0.11,0.11,0.11,0.08,0,0.26,1.6,395.83,2516.67,1525,7.92,2.69,4,10.42,3.44,10.42,10.24},0},
{{0.14,0.14,0.11,0.06,0.08,0.09,0.1,0.12,0.11,0.07,0.12,0.11,0.11,0.09,0.09,0.11,0.13,0.07,0.06,0.14,0.09,0.08,0.1,0.11,0.11,0.12,0.12,0.1,0.11,0.08,0,0.51,1.72,459.52,2600,1225,7.29,3.23,4.06,9.96,4.16,9.96,10.03},0},
{{0.1,0.09,0.08,0.1,0.09,0.12,0.13,0.12,0.1,0.05,0.1,0.08,0.14,0.12,0.1,0.12,0.08,0.09,0.17,0.03,0.09,0.11,0.09,0.1,0.11,0.12,0.14,0.08,0.09,0.09,0,0.1,1.67,417.39,3825,1250,7.97,2.92,3.77,10.38,3.78,10.38,10.2},0},
{{0.19,0.08,0.11,0.09,0.11,0.06,0.11,0.07,0.11,0.04,0.15,0.09,0.07,0.11,0.14,0.09,0.1,0.1,0.05,0.12,0.1,0.11,0.08,0.14,0.07,0.09,0.13,0.1,0.09,0.11,0,-0.05,1.77,404.17,4350,1683.33,6.98,3.49,4.39,9.72,4.7,9.72,9.99},0},
{{0.2,0.13,0.08,0.06,0.08,0.08,0.08,0.08,0.11,0.06,0.13,0.14,0.07,0.12,0.07,0.09,0.08,0.11,0.09,0.14,0.1,0.12,0.09,0.07,0.11,0.08,0.16,0.1,0.09,0.1,0,0.4,1.89,369.23,1566.67,1487.5,7.34,3.62,4.26,10.21,4.56,10.21,10.3},0},
{{0.22,0.12,0.08,0.06,0.06,0.09,0.12,0.09,0.09,0.04,0.17,0.11,0.11,0.1,0.09,0.07,0.06,0.11,0.06,0.15,0.11,0.1,0.09,0.07,0.11,0.11,0.11,0.14,0.08,0.1,0,0.22,1.68,405,2383.33,500,7.03,3.83,4.35,9.67,4.88,9.67,10.36},0},
{{0.11,0.11,0.09,0.07,0.08,0.1,0.15,0.11,0.09,0.07,0.15,0.11,0.11,0.05,0.11,0.1,0.06,0.14,0.11,0.08,0.1,0.08,0.11,0.1,0.13,0.11,0.09,0.09,0.08,0.13,0,-0.12,1.9,380,2066.67,1850,7.79,3.44,4.18,10.3,4.4,10.3,10.43},0},
{{0,0,0,0.01,0.01,0.02,0.03,0.01,0.01,0,0,0,0,0.02,0.02,0.01,0,0.02,0.01,0.01,0,0.02,0.02,0.01,0.02,0,0,0.01,0.01,0.01,0,0.09,0.06,150,175,175,0.64,0.12,0.22,10.16,2.5,10.16,0.73},0},
{{0.16,0.12,0.12,0.1,0.13,0.09,0.12,0.1,0.04,0.03,0.02,0.01,0.07,0.08,0.14,0.1,0.14,0.14,0.13,0.19,0.58,0.16,0.05,0.07,0.07,0.06,0.02,0,0.01,0,0,4.12,-3.85,450,1330,500,8.2,1.5,2,8.69,1.88,8.69,10.41},2},
{{0.18,0.08,0.11,0.13,0.05,0.09,0.12,0.1,0.09,0.08,0.11,0.13,0.14,0.08,0.14,0.11,0.08,0.11,0.07,0.06,0.53,0.17,0.09,0.09,0.02,0.03,0.05,0.03,0,0.01,0,2.78,-3.65,1212.5,800,2150,8.78,1.29,2.1,9.4,1.65,9.4,10.42},2},
{{0.06,0.13,0.08,0.15,0.09,0.08,0.06,0.15,0.14,0.08,0.1,0.13,0.16,0.11,0.15,0.07,0.11,0.08,0.09,0.03,0.27,0.11,0.12,0.12,0.09,0.09,0.13,0.04,0.03,0.02,0,2.7,-1.71,4100,2750,475,9.43,1.2,2.24,9.96,1.51,9.96,10.47},2},
{{0.07,0.12,0.11,0.16,0.11,0.09,0.1,0.12,0.09,0.05,0.39,0.13,0.1,0.05,0.08,0.03,0.05,0.06,0.07,0.07,0.01,0.02,0.04,0.04,0.05,0.07,0.14,0.18,0.28,0.2,0,1.98,3.06,1075,1250,933.33,9.01,1.7,2.57,9.52,2.13,9.52,10.38},2},
{{0.02,0.12,0.12,0.13,0.09,0.13,0.1,0.08,0.12,0.12,0.06,0.09,0.14,0.09,0.13,0.1,0.11,0.1,0.11,0.08,0.05,0.08,0.08,0.11,0.12,0.08,0.14,0.16,0.15,0.05,0,3.18,0.77,3225,3475,550,9.59,1.36,2.38,10.1,1.7,10.1,10.61},2},
{{0.1,0.1,0.1,0.1,0.11,0.08,0.09,0.09,0.16,0.1,0.07,0.11,0.08,0.1,0.13,0.11,0.09,0.11,0.1,0.12,0.02,0.04,0.09,0.11,0.13,0.13,0.14,0.15,0.16,0.05,0,3.25,0.93,794.44,2162.5,3050,9.53,1.45,2.14,10.1,1.83,10.1,10.53},2},
{{0.06,0.14,0.15,0.07,0.1,0.08,0.07,0.1,0.15,0.11,0.02,0.1,0.13,0.1,0.12,0.1,0.1,0.07,0.12,0.16,0.05,0.11,0.06,0.1,0.11,0.1,0.14,0.17,0.11,0.08,0,3.58,0.82,4125,1933.33,2450,9.54,1.6,2.4,10.11,1.98,10.11,10.73},2},
{{0.17,0.11,0.09,0.05,0.08,0.09,0.07,0.11,0.1,0.14,0.08,0.1,0.12,0.09,0.11,0.08,0.08,0.11,0.13,0.11,0.04,0.03,0.04,0.07,0.09,0.16,0.22,0.14,0.09,0.15,0,3.31,1.81,850,1900,975,9.45,1.56,2.65,10.23,1.89,10.23,10.72},2},
{{0.12,0.16,0.1,0.06,0.07,0.06,0.11,0.12,0.11,0.12,0.05,0.1,0.06,0.11,0.12,0.13,0.1,0.08,0.09,0.19,0.03,0.08,0.09,0.07,0.1,0.13,0.16,0.18,0.13,0.06,0,3.66,0.89,1812.5,2425,1000,9.44,1.7,2.25,10.1,2.13,10.1,10.65},2},
{{0.15,0.12,0.11,0.08,0.08,0.05,0.1,0.1,0.08,0.16,0.09,0.14,0.1,0.13,0.06,0.07,0.08,0.07,0.13,0.15,0.07,0.13,0.05,0.08,0.1,0.16,0.12,0.14,0.11,0.07,0,3.31,0.57,1087.5,2875,1700,9.43,1.79,2.47,10.19,2.17,10.19,10.61},2},
{{0.12,0.11,0.09,0.05,0.06,0.09,0.11,0.09,0.13,0.17,0.3,0.13,0.14,0.07,0.04,0.06,0.08,0.08,0.05,0.07,0.07,0.08,0.09,0.08,0.15,0.15,0.13,0.12,0.12,0.03,0,2.16,0.32,815,1450,4350,9.94,1.67,2.23,10.67,2.09,10.67,10.72},2},
{{0.14,0.1,0.07,0.11,0.07,0.08,0.13,0.05,0.08,0.17,0.21,0.08,0.09,0.11,0.12,0.1,0.07,0.08,0.04,0.1,0.1,0.16,0.17,0.07,0.14,0.07,0.07,0.05,0.08,0.11,0,2.8,0.3,1430,2066.67,1762.5,9.67,1.78,3.27,10.49,2.52,10.49,11.07},2},
{{0.07,0.12,0.14,0.11,0.14,0.07,0.1,0.11,0.07,0.08,0.03,0.06,0.06,0.03,0.12,0.13,0.2,0.18,0.16,0.04,0.04,0.03,0.06,0.07,0.11,0.17,0.08,0.15,0.15,0.17,0,3.56,1.93,1475,500,1800,9.01,1.07,2.98,9.52,1.41,9.52,10.59},2},
{{0.1,0.12,0.1,0.16,0.09,0.08,0.1,0.11,0.09,0.07,0.01,0.04,0.08,0.11,0.16,0.19,0.16,0.13,0.1,0.05,0.01,0.01,0.02,0.06,0.13,0.13,0.18,0.14,0.18,0.17,0,3.36,2.46,1725,2450,2966.67,8.91,0.98,2.66,9.41,1.26,9.41,10.41},2},
{{0.05,0.18,0.16,0.13,0.08,0.11,0.12,0.1,0.08,0.02,0,0.02,0.02,0.06,0.11,0.12,0.19,0.25,0.19,0.07,0,0.01,0.01,0.02,0.09,0.11,0.21,0.17,0.18,0.23,0,4,3.36,928.57,3025,1650,8.53,0.98,2.93,8.93,1.3,8.93,10.58},2},
{{0.22,0.13,0.09,0.13,0.09,0.1,0.11,0.09,0.03,0.03,0.03,0.03,0.05,0.05,0.06,0.1,0.15,0.21,0.23,0.12,0.02,0.07,0.03,0.04,0.08,0.06,0.1,0.14,0.2,0.3,0,4.07,3.62,525,1800,1950,7.74,1.18,3.6,8.32,1.51,8.32,10.53},2},
{{0.02,0.06,0.07,0.13,0.17,0.18,0.08,0.11,0.11,0.1,0.07,0.15,0.12,0.12,0.11,0.12,0.08,0.13,0.07,0.05,0.04,0.16,0.17,0.15,0.11,0.1,0.08,0.06,0.07,0.09,0,2.81,0.01,1207.14,1987.5,2666.67,9.81,1.26,2.57,10.22,1.61,10.22,10.8},2},
{{0.14,0.09,0.1,0.07,0.08,0.08,0.08,0.17,0.1,0.12,0.07,0.1,0.11,0.11,0.08,0.12,0.1,0.15,0.11,0.07,0.05,0.09,0.13,0.12,0.1,0.15,0.1,0.12,0.07,0.1,0,3.18,0.63,1207.14,933.33,1266.67,9.57,1.36,2.62,10.23,1.69,10.23,10.75},2},
{{0.08,0.06,0.09,0.12,0.11,0.12,0.09,0.12,0.12,0.11,0.15,0.14,0.1,0.11,0.08,0.08,0.11,0.08,0.08,0.1,0.05,0.15,0.14,0.15,0.14,0.1,0.05,0.06,0.08,0.09,0,2.84,0.16,750,1670,1475,9.72,1.53,2.72,10.27,1.87,10.27,10.8},2},
{{0.09,0.08,0.1,0.11,0.08,0.05,0.12,0.11,0.15,0.13,0.05,0.1,0.11,0.15,0.16,0.14,0.07,0.09,0.12,0.04,0.03,0.13,0.15,0.12,0.13,0.11,0.1,0.08,0.1,0.07,0,2.99,0.22,636.67,2875,1730,9.76,1.13,2.32,10.32,1.44,10.32,10.66},2},
{{0.08,0.09,0.1,0.1,0.12,0.09,0.09,0.11,0.12,0.13,0.08,0.14,0.11,0.16,0.15,0.08,0.08,0.08,0.08,0.05,0.08,0.13,0.14,0.14,0.1,0.13,0.06,0.07,0.09,0.1,0,2.75,0.2,775,2933.33,1975,9.67,1.21,2.71,10.23,1.57,10.23,10.72},2},
{{0.08,0.06,0.09,0.1,0.12,0.12,0.09,0.14,0.11,0.11,0.13,0.11,0.11,0.11,0.11,0.1,0.13,0.07,0.1,0.06,0.05,0.09,0.12,0.11,0.12,0.15,0.09,0.1,0.09,0.1,0,2.8,0.65,1325,1500,2650,9.77,1.37,2.68,10.29,1.76,10.29,10.81},2},
{{0.07,0.07,0.1,0.1,0.11,0.1,0.11,0.1,0.1,0.15,0.16,0.18,0.13,0.08,0.11,0.08,0.08,0.08,0.07,0.06,0.06,0.1,0.14,0.15,0.18,0.14,0.04,0.06,0.07,0.08,0,2.49,0.11,1962.5,1000,1760,9.87,1.43,2.45,10.46,1.83,10.46,10.81},2},
{{0.07,0.09,0.08,0.12,0.1,0.12,0.12,0.1,0.1,0.12,0.12,0.11,0.12,0.08,0.11,0.09,0.14,0.06,0.11,0.07,0.12,0.16,0.16,0.07,0.09,0.11,0.11,0.08,0.06,0.07,0,2.96,-0.35,1360,1650,1000,9.64,1.42,2.42,10.18,1.81,10.18,10.68},2},
{{0.09,0.07,0.1,0.11,0.13,0.09,0.1,0.09,0.11,0.13,0.15,0.13,0.14,0.11,0.13,0.1,0.04,0.09,0.09,0.03,0.12,0.21,0.15,0.11,0.06,0.09,0.07,0.07,0.06,0.09,0,2.51,-0.11,1350,3475,2000,9.59,1.33,2.97,10.18,1.77,10.18,10.78},2},
{{0.06,0.09,0.1,0.15,0.11,0.11,0.09,0.09,0.09,0.13,0.16,0.16,0.12,0.1,0.1,0.11,0.07,0.05,0.06,0.1,0.12,0.17,0.15,0.12,0.1,0.08,0.08,0.06,0.05,0.08,0,2.62,-0.12,816.67,4675,2000,9.57,1.6,2.87,10.17,2.13,10.17,10.78},2},
{{0.11,0.04,0.08,0.07,0.12,0.21,0.11,0.09,0.1,0.08,0.08,0.06,0.09,0.11,0.1,0.12,0.11,0.07,0.1,0.19,0.08,0.08,0.12,0.16,0.1,0.07,0.08,0.11,0.11,0.12,0,3.72,0.68,788.89,2066.67,2525,9.34,1.79,3,9.84,2.24,9.84,10.91},2},
{{0.1,0.12,0.09,0.05,0.16,0.13,0.09,0.09,0.1,0.1,0.1,0.1,0.09,0.08,0.09,0.08,0.08,0.13,0.06,0.2,0.14,0.11,0.13,0.12,0.09,0.07,0.06,0.09,0.1,0.11,0,3.62,0.32,2050,1787.5,2525,9.29,1.96,3.21,9.84,2.47,9.84,10.89},2},
{{0.1,0.06,0.13,0.09,0.12,0.15,0.13,0.08,0.08,0.09,0.07,0.09,0.08,0.12,0.07,0.11,0.11,0.11,0.11,0.16,0.1,0.12,0.12,0.09,0.12,0.1,0.08,0.07,0.09,0.14,0,3.66,0.53,916.67,1716.67,4100,9.16,1.74,3.13,9.67,2.19,9.67,10.77},2},
{{0.14,0.09,0.09,0.1,0.12,0.12,0.09,0.07,0.08,0.12,0.06,0.07,0.09,0.09,0.09,0.09,0.09,0.09,0.11,0.24,0.13,0.08,0.14,0.12,0.12,0.08,0.05,0.07,0.11,0.13,0,4.07,0.54,1075,1000,3700,9.05,2.01,3.28,9.68,2.46,9.68,10.95},2},
{{0.08,0.03,0.03,0.04,0.08,0.07,0.04,0.04,0.05,0.03,0.03,0.03,0.03,0.02,0.05,0.05,0.05,0.05,0.08,0.12,0.05,0.04,0.07,0.07,0.04,0.03,0.05,0.03,0.04,0.08,0,2.12,0.36,1275,775,1075,4.29,1.24,1.53,9.44,3.32,9.44,5.27},2},
{{0.16,0.08,0.08,0.07,0.08,0.09,0.1,0.11,0.1,0.15,0.11,0.09,0.12,0.15,0.12,0.08,0.1,0.07,0.09,0.07,0.06,0.1,0.08,0.11,0.15,0.11,0.07,0.1,0.13,0.1,0,8.07,-0.99,650,383.33,250,5.18,3.19,2.75,6.32,4,6.32,10.77},2},
{{0.14,0.12,0.12,0.12,0.14,0.05,0.09,0.07,0.07,0.09,0.11,0.05,0.04,0.12,0.18,0.17,0.17,0.08,0.07,0.03,0,0.1,0.1,0.08,0.08,0.1,0.12,0.17,0.16,0.12,0,8.1,-0.31,1966.67,2925,3875,5.59,2.29,2.37,6.25,2.89,6.25,10.68},2},
{{0.12,0.12,0.1,0.1,0.1,0.11,0.08,0.06,0.1,0.12,0.07,0.07,0.09,0.1,0.13,0.17,0.17,0.11,0.06,0.06,0,0.08,0.09,0.06,0.06,0.08,0.15,0.19,0.21,0.1,0,8.35,0.05,2316.67,2500,2000,5.18,2.46,2.32,5.93,3.02,5.93,10.69},2},
{{0.13,0.15,0.08,0.07,0.06,0.07,0.11,0.12,0.15,0.09,0.12,0.1,0.1,0.08,0.11,0.09,0.1,0.1,0.11,0.12,0.08,0.07,0.08,0.11,0.06,0.1,0.08,0.18,0.15,0.11,0,8.4,-0.74,4075,916.67,575,5,3.13,2.7,5.83,3.7,5.83,10.69},2},
{{0.1,0.15,0.08,0.07,0.08,0.1,0.11,0.09,0.15,0.09,0.17,0.09,0.07,0.05,0.08,0.16,0.07,0.11,0.08,0.15,0.09,0.08,0.12,0.11,0.07,0.07,0.09,0.11,0.15,0.13,0,8.47,-0.99,2750,1400,3133.33,4.92,3.31,3.03,5.7,3.94,5.7,10.83},2},
{{0.15,0.09,0.07,0.1,0.06,0.1,0.13,0.07,0.12,0.14,0.2,0.07,0.07,0.08,0.12,0.1,0.08,0.07,0.09,0.14,0.17,0.09,0.11,0.05,0.08,0.08,0.13,0.1,0.1,0.1,0,8.15,-1.74,2500,783.33,925,5.06,3.6,3.45,6.15,4.37,6.15,11.03},2},
{{0.12,0.07,0.14,0.09,0.09,0.09,0.1,0.09,0.11,0.13,0.13,0.12,0.1,0.12,0.11,0.07,0.05,0.08,0.12,0.14,0.1,0.14,0.11,0.18,0.06,0.09,0.07,0.11,0.09,0.09,0,8.25,-1.84,2400,3050,2012.5,4.86,3.48,2.8,5.68,4.06,5.68,10.66},2},
{{0.1,0.19,0.1,0.06,0.09,0.09,0.07,0.1,0.09,0.13,0.14,0.08,0.12,0.1,0.07,0.1,0.09,0.1,0.11,0.12,0.14,0.11,0.09,0.11,0.08,0.15,0.06,0.09,0.08,0.11,0,8.25,-1.74,1000,1180,1850,5.14,3.34,2.94,5.92,3.87,5.92,10.88},2},
{{0.12,0.12,0.07,0.11,0.12,0.08,0.12,0.11,0.09,0.09,0.12,0.11,0.1,0.1,0.13,0.06,0.1,0.1,0.09,0.12,0.12,0.12,0.08,0.07,0.1,0.11,0.12,0.1,0.12,0.09,0,8.12,-1.42,1925,2775,2775,5.14,3.21,2.86,5.85,3.78,5.85,10.78},2},
{{0.11,0.08,0.1,0.17,0.09,0.09,0.12,0.08,0.08,0.1,0.09,0.08,0.12,0.15,0.07,0.12,0.11,0.11,0.12,0.06,0.07,0.12,0.06,0.1,0.1,0.12,0.15,0.09,0.12,0.1,0,8.25,-1.05,1300,1500,1375,5.13,2.8,2.55,5.8,3.27,5.8,10.7},2},
{{0.09,0.16,0.15,0.1,0.09,0.06,0.12,0.07,0.1,0.07,0.06,0.1,0.12,0.14,0.11,0.11,0.09,0.12,0.1,0.06,0.08,0.07,0.1,0.1,0.11,0.09,0.12,0.14,0.12,0.09,0,8.16,-1.12,4350,1310,2400,5.41,2.66,2.55,6.08,3.11,6.08,10.7},2},
{{0.07,0.13,0.12,0.1,0.11,0.11,0.09,0.1,0.1,0.09,0.09,0.13,0.06,0.12,0.11,0.08,0.15,0.08,0.1,0.11,0.09,0.1,0.11,0.11,0.09,0.15,0.09,0.09,0.07,0.12,0,8.42,-1.4,4350,1290,975,5.03,2.94,2.73,5.7,3.4,5.7,10.85},2},
{{0.08,0.1,0.12,0.13,0.09,0.08,0.09,0.13,0.11,0.1,0.07,0.11,0.13,0.11,0.09,0.08,0.09,0.11,0.13,0.1,0.1,0.07,0.1,0.1,0.17,0.09,0.09,0.1,0.13,0.09,0,8.53,-1.29,3400,1100,3700,4.84,3.05,2.64,5.5,3.45,5.5,10.79},2},
{{0.09,0.1,0.08,0.15,0.17,0.05,0.07,0.09,0.12,0.11,0.08,0.12,0.09,0.11,0.1,0.06,0.13,0.14,0.08,0.11,0.11,0.11,0.11,0.09,0.14,0.09,0.12,0.06,0.09,0.09,0,8.45,-1.7,1000,827.27,1633.33,4.95,3.08,2.74,5.65,3.57,5.65,10.88},2},
{{0.11,0.06,0.09,0.07,0.13,0.12,0.11,0.13,0.07,0.12,0.11,0.11,0.1,0.09,0.1,0.12,0.09,0.06,0.11,0.13,0.1,0.11,0.11,0.11,0.09,0.12,0.09,0.12,0.08,0.09,0,8.38,-1.64,1950,1458.33,1925,4.79,3.07,2.73,5.52,3.58,5.52,10.72},2},
{{0.12,0.11,0.08,0.09,0.09,0.11,0.08,0.11,0.15,0.08,0.12,0.11,0.11,0.06,0.12,0.11,0.07,0.1,0.11,0.12,0.14,0.09,0.09,0.11,0.08,0.08,0.1,0.14,0.11,0.1,0,8.34,-1.45,975,1366.67,2650,4.98,3.13,3.02,5.73,3.7,5.73,10.9},2},
{{0.09,0.07,0.11,0.12,0.12,0.1,0.12,0.11,0.09,0.09,0.1,0.09,0.08,0.09,0.11,0.11,0.11,0.11,0.13,0.08,0.1,0.12,0.1,0.07,0.1,0.08,0.16,0.11,0.11,0.09,0,8.58,-1.44,4325,1125,2750,4.89,2.94,2.78,5.52,3.51,5.52,10.83},2},
{{0.06,0.1,0.12,0.1,0.13,0.1,0.12,0.11,0.09,0.1,0.11,0.1,0.09,0.14,0.05,0.08,0.08,0.13,0.11,0.14,0.1,0.14,0.11,0.08,0.11,0.08,0.13,0.08,0.08,0.12,0,8.62,-1.52,2875,1133.33,2875,4.8,3.37,2.85,5.44,3.85,5.44,10.93},2},
{{0.09,0.09,0.12,0.1,0.08,0.1,0.15,0.09,0.12,0.1,0.12,0.12,0.1,0.08,0.08,0.1,0.05,0.14,0.13,0.11,0.12,0.1,0.12,0.09,0.08,0.13,0.12,0.08,0.11,0.09,0,8.43,-1.49,2950,3183.33,3325,4.8,3.26,2.78,5.51,3.76,5.51,10.71},2},
{{0.11,0.06,0.1,0.08,0.11,0.11,0.16,0.09,0.08,0.13,0.11,0.11,0.11,0.09,0.07,0.07,0.14,0.1,0.09,0.14,0.12,0.1,0.11,0.1,0.12,0.11,0.08,0.09,0.08,0.11,0,8.45,-1.61,3825,1425,2166.67,4.72,3.34,2.84,5.46,3.89,5.46,10.78},2},
{{0.1,0.08,0.12,0.07,0.09,0.14,0.15,0.07,0.09,0.11,0.09,0.09,0.12,0.09,0.1,0.11,0.09,0.13,0.1,0.1,0.11,0.09,0.09,0.1,0.12,0.11,0.1,0.12,0.09,0.08,0,8.45,-1.43,2950,4350,2683.33,4.88,3,2.67,5.57,3.5,5.57,10.76},2},
{{0.11,0.11,0.07,0.12,0.09,0.1,0.08,0.1,0.12,0.11,0.09,0.12,0.09,0.08,0.1,0.12,0.09,0.1,0.11,0.12,0.1,0.12,0.12,0.1,0.12,0.09,0.09,0.08,0.09,0.11,0,8.48,-1.55,1475,3200,1483.33,4.87,3,2.82,5.6,3.51,5.6,10.91},2},
{{0.06,0.1,0.12,0.13,0.11,0.09,0.11,0.11,0.12,0.08,0.09,0.11,0.11,0.09,0.09,0.1,0.1,0.09,0.14,0.1,0.1,0.11,0.09,0.13,0.13,0.12,0.08,0.09,0.09,0.1,0,8.45,-1.54,4350,955.56,1950,4.83,2.97,2.56,5.45,3.43,5.45,10.69},2},
{{0.1,0.09,0.1,0.13,0.08,0.09,0.09,0.11,0.13,0.11,0.09,0.13,0.07,0.08,0.11,0.08,0.14,0.12,0.12,0.08,0.12,0.1,0.09,0.1,0.11,0.11,0.13,0.07,0.08,0.12,0,8.47,-1.47,2500,1400,1680,4.84,3,2.86,5.6,3.49,5.6,10.83},2},
{{0.11,0.06,0.12,0.09,0.09,0.1,0.07,0.17,0.1,0.1,0.07,0.07,0.14,0.09,0.13,0.1,0.11,0.12,0.09,0.1,0.12,0.1,0.07,0.12,0.12,0.1,0.08,0.1,0.09,0.12,0,8.47,-1.46,4225,1141.67,3750,4.85,2.76,2.8,5.63,3.25,5.63,10.8},2},
{{0.05,0.11,0.1,0.1,0.13,0.11,0.1,0.11,0.09,0.13,0.1,0.13,0.1,0.1,0.09,0.12,0.04,0.12,0.08,0.15,0.1,0.13,0.12,0.12,0.09,0.1,0.12,0.07,0.07,0.1,0,8.46,-1.81,1450,1675,1850,4.67,3.26,2.82,5.36,3.8,5.36,10.77},2},
{{0.08,0.1,0.11,0.07,0.14,0.13,0.09,0.12,0.09,0.1,0.09,0.1,0.14,0.11,0.09,0.09,0.11,0.08,0.11,0.11,0.12,0.11,0.11,0.11,0.11,0.13,0.08,0.11,0.05,0.09,0,8.31,-1.76,975,3375,1633.33,4.87,3.06,2.67,5.53,3.54,5.53,10.71},2},
{{0.08,0.11,0.08,0.11,0.11,0.13,0.08,0.1,0.11,0.11,0.08,0.1,0.12,0.08,0.14,0.09,0.13,0.11,0.1,0.08,0.08,0.13,0.11,0.1,0.13,0.07,0.15,0.08,0.06,0.11,0,8.35,-1.47,4275,2733.33,2083.33,4.8,2.83,2.65,5.5,3.35,5.5,10.66},2},
{{0.06,0.09,0.08,0.12,0.14,0.14,0.16,0.07,0.06,0.1,0.08,0.09,0.13,0.1,0.1,0.11,0.13,0.12,0.08,0.08,0.08,0.11,0.1,0.18,0.12,0.11,0.09,0.06,0.07,0.1,0,8.38,-1.69,1333.33,1650,2783.33,4.87,2.77,2.49,5.47,3.2,5.47,10.67},2},
{{0.08,0.11,0.08,0.1,0.12,0.12,0.15,0.08,0.12,0.07,0.05,0.13,0.14,0.12,0.08,0.11,0.13,0.08,0.08,0.11,0.14,0.1,0.1,0.15,0.12,0.07,0.07,0.08,0.09,0.1,0,8.36,-1.98,1333.33,1321.43,2933.33,4.94,2.87,2.83,5.54,3.39,5.54,10.84},2},
{{0.02,0.01,0.02,0.03,0.01,0.02,0.01,0.03,0.03,0.02,0.02,0.02,0.03,0.02,0.02,0.02,0.02,0.02,0.01,0.02,0.03,0.03,0.02,0.02,0.03,0.01,0,0.01,0.01,0.04,0,1.45,-0.35,1333.33,500,675,0.87,1.21,0.75,5.73,7.65,5.73,2},2},
{{0.06,0.03,0.04,0.1,0.06,0.07,0.1,0.14,0.21,0.21,0.01,0.02,0.04,0.06,0.06,0.06,0.13,0.16,0.18,0.31,0.14,0.16,0.13,0.11,0.08,0.06,0.07,0.08,0.08,0.1,0,7.3,-1.86,1275,436.84,1275,5.5,4.97,5.16,7.5,6,7.5,11.71},0},
{{0.04,0.06,0.06,0.08,0.06,0.09,0.1,0.14,0.16,0.22,0.01,0.02,0.04,0.04,0.07,0.11,0.11,0.15,0.13,0.32,0.2,0.14,0.1,0.09,0.14,0.08,0.05,0.06,0.05,0.13,0,7.2,-2.35,1850,553.13,866.67,5.7,5.24,5.42,7.59,6.22,7.59,12.05},0},
{{0.06,0.07,0.08,0.07,0.03,0.06,0.11,0.11,0.18,0.25,0.03,0.05,0.05,0.05,0.07,0.13,0.13,0.13,0.08,0.28,0.17,0.13,0.13,0.11,0.1,0.09,0.09,0.07,0.06,0.09,0,6.47,-2.57,2283.33,420,1337.5,5.81,5.53,4.98,8.03,6.57,8.03,11.31},0},
{{0.09,0.07,0.07,0.08,0.05,0.08,0.09,0.14,0.13,0.22,0.04,0.05,0.07,0.09,0.1,0.12,0.13,0.05,0.1,0.27,0.21,0.14,0.13,0.11,0.07,0.08,0.05,0.05,0.12,0.07,0,5.08,-3.16,3950,1580,2333.33,6.58,4.95,5.13,8.88,5.94,8.88,11.46},0},
{{0.1,0.09,0.09,0.08,0.08,0.06,0.12,0.15,0.14,0.1,0.12,0.17,0.12,0.11,0.09,0.11,0.09,0.03,0.07,0.12,0.01,0.04,0.07,0.1,0.2,0.11,0.09,0.13,0.16,0.12,0,1.76,1.19,3350,300,1762.5,7.59,3.44,3.86,9.7,4.58,9.7,9.67},0},
{{0.12,0.07,0.06,0.06,0.11,0.09,0.1,0.16,0.13,0.12,0.11,0.14,0.14,0.15,0.13,0.08,0.05,0.07,0.07,0.07,0.01,0.03,0.09,0.13,0.18,0.11,0.11,0.09,0.15,0.11,0,1.45,0.79,1666.67,2237.5,2125,7.34,2.98,3.49,9.53,4.03,9.53,9.18},0},
{{0.11,0.14,0.12,0.04,0.11,0.1,0.12,0.11,0.12,0.06,0.15,0.13,0.11,0.13,0.1,0.08,0.07,0.04,0.09,0.12,0.03,0.14,0.13,0.12,0.11,0.06,0.1,0.13,0.14,0.07,0,1.96,-0.44,1666.67,1037.5,2250,8.71,3.81,3.97,10.64,5.05,10.64,11.21},0},
{{0.13,0.1,0.07,0.05,0.1,0.08,0.12,0.07,0.13,0.17,0.16,0.13,0.13,0.1,0.1,0.1,0.04,0.03,0.04,0.18,0.09,0.12,0.13,0.07,0.1,0.09,0.1,0.11,0.12,0.11,0,2.28,-0.52,1766.67,2125,2950,7.71,4.39,4.58,9.99,5.67,9.99,10.94},0},
{{0.12,0.1,0.1,0.12,0.09,0.09,0.06,0.06,0.09,0.19,0.17,0.09,0.14,0.1,0.11,0.11,0.09,0.05,0.07,0.09,0.04,0.13,0.14,0.12,0.08,0.1,0.13,0.08,0.07,0.14,0,1.53,-0.11,2100,1033.33,1450,8.37,3.54,4.37,10.39,4.94,10.39,11.03},0},
{{0.13,0.1,0.1,0.09,0.11,0.1,0.08,0.08,0.11,0.12,0.18,0.1,0.12,0.1,0.1,0.1,0.09,0.04,0.07,0.12,0.06,0.09,0.09,0.09,0.12,0.14,0.12,0.09,0.13,0.11,0,1.8,0.18,800,4725,1890,8.43,3.9,4.2,10.46,5.22,10.46,11.01},0},
{{0.12,0.11,0.09,0.1,0.11,0.09,0.1,0.08,0.13,0.09,0.16,0.14,0.15,0.15,0.1,0.1,0.05,0.03,0.05,0.09,0.05,0.08,0.08,0.11,0.1,0.11,0.14,0.13,0.1,0.12,0,1.11,0.28,1000,1950,2162.5,8.32,3.25,4.1,10.29,4.62,10.29,10.59},0},
{{0.14,0.11,0.1,0.08,0.12,0.08,0.14,0.09,0.08,0.09,0.16,0.19,0.13,0.1,0.08,0.07,0.1,0.08,0.06,0.05,0.01,0.06,0.1,0.09,0.09,0.1,0.15,0.15,0.16,0.11,0,0.76,0.87,2366.67,1825,1612.5,8.85,3.18,3.57,10.74,4.12,10.74,10.74},0},
{{0.16,0.09,0.1,0.06,0.15,0.13,0.1,0.13,0.06,0.06,0.17,0.11,0.1,0.15,0.1,0.09,0.07,0.06,0.1,0.07,0.07,0.12,0.08,0.07,0.11,0.1,0.11,0.12,0.12,0.1,0,1.31,-0.16,2400,2766.67,2950,8.97,3.27,4.43,10.78,4.36,10.78,11.32},0},
{{0.13,0.1,0.12,0.09,0.14,0.11,0.09,0.06,0.09,0.1,0.16,0.12,0.09,0.15,0.12,0.08,0.06,0.09,0.09,0.06,0.04,0.1,0.11,0.1,0.08,0.13,0.09,0.14,0.14,0.1,0,1.24,0.1,4250,933.33,2350,8.8,3.19,3.99,10.64,4.25,10.64,10.96},0},
{{0.12,0.14,0.08,0.09,0.1,0.13,0.08,0.11,0.11,0.07,0.15,0.18,0.17,0.1,0.1,0.08,0.06,0.02,0.09,0.06,0.05,0.09,0.11,0.08,0.11,0.11,0.15,0.13,0.08,0.11,0,0.75,-0.19,650,1833.33,4250,8.74,3.06,3.78,10.65,4.14,10.65,10.86},0},
{{0.12,0.12,0.11,0.1,0.12,0.08,0.12,0.09,0.11,0.06,0.18,0.17,0.1,0.14,0.1,0.08,0.06,0.05,0.07,0.06,0.01,0.06,0.13,0.09,0.13,0.13,0.12,0.15,0.1,0.12,0,0.76,0.59,4100,2262.5,3116.67,8.69,3.13,3.67,10.53,4.29,10.53,10.7},0},
{{0.12,0.13,0.13,0.14,0.1,0.06,0.09,0.06,0.1,0.09,0.2,0.16,0.1,0.07,0.07,0.13,0.09,0.09,0.07,0.04,0.05,0.09,0.13,0.09,0.12,0.12,0.09,0.11,0.11,0.11,0,0.83,-0.36,725,1912.5,2200,9.14,3.32,3.99,10.9,4.26,10.9,11.41},0},
{{0.11,0.12,0.13,0.1,0.13,0.12,0.07,0.11,0.09,0.05,0.16,0.17,0.08,0.09,0.12,0.08,0.08,0.09,0.08,0.06,0.07,0.1,0.13,0.11,0.1,0.11,0.09,0.11,0.12,0.09,0,1.15,-0.54,1275,3500,2316.67,8.95,3.47,4.18,10.61,4.59,10.61,11.49},0},
{{0.09,0.15,0.13,0.06,0.11,0.12,0.09,0.09,0.13,0.07,0.16,0.11,0.1,0.08,0.13,0.11,0.1,0.07,0.12,0.05,0.06,0.12,0.12,0.15,0.06,0.08,0.13,0.09,0.1,0.11,0,1.47,-0.67,1025,2075,1566.67,8.49,3.2,4.25,10.31,4.15,10.31,11.14},0},
{{0.08,0.14,0.14,0.13,0.11,0.15,0.11,0.08,0.06,0.03,0.16,0.11,0.07,0.1,0.09,0.12,0.1,0.14,0.08,0.05,0.08,0.12,0.14,0.12,0.11,0.07,0.1,0.13,0.09,0.08,0,1.44,-1.2,1025,933.33,2775,9.02,3.17,4.03,10.39,4.06,10.39,11.38},0},
{{0.14,0.09,0.08,0.11,0.1,0.07,0.09,0.12,0.07,0.14,0.12,0.1,0.12,0.13,0.11,0.09,0.07,0.07,0.09,0.12,0.07,0.13,0.09,0.09,0.08,0.12,0.16,0.07,0.09,0.12,0,2.12,-0.34,800,1360,1566.67,8.27,3.59,4.44,10.39,4.64,10.39,11},0},
{{0.12,0.1,0.06,0.08,0.08,0.08,0.06,0.12,0.14,0.18,0.05,0.1,0.13,0.08,0.13,0.11,0.12,0.1,0.1,0.11,0.16,0.11,0.08,0.1,0.08,0.1,0.13,0.07,0.11,0.08,0,2.81,-2,1000,1125,2400,7.46,3.24,5.38,9.79,4.34,9.79,10.96},0},
{{0.08,0.11,0.12,0.14,0.1,0.12,0.1,0.09,0.08,0.09,0.03,0.1,0.08,0.11,0.11,0.12,0.15,0.17,0.13,0.03,0.21,0.08,0.08,0.07,0.1,0.1,0.12,0.08,0.1,0.08,0,2.57,-2.49,2666.67,2725,966.67,8.3,2.52,5.51,9.93,3.24,9.93,11.43},0},
{{0.08,0.11,0.14,0.11,0.13,0.12,0.12,0.1,0.05,0.07,0.05,0.09,0.08,0.12,0.1,0.11,0.11,0.2,0.12,0.05,0.17,0.15,0.08,0.1,0.05,0.1,0.08,0.12,0.06,0.11,0,2.59,-2.31,3100,1400,2816.67,8.68,2.91,5.72,10.17,3.87,10.17,12.11},0},
{{0.09,0.13,0.12,0.12,0.08,0.1,0.09,0.09,0.09,0.12,0.04,0.06,0.1,0.12,0.1,0.12,0.09,0.18,0.13,0.08,0.2,0.12,0.08,0.08,0.11,0.08,0.07,0.08,0.1,0.1,0,2.97,-2.4,2366.67,2533.33,575,8.39,3.13,5.85,10.26,4.09,10.26,12.16},0},
{{0.08,0.08,0.15,0.12,0.12,0.11,0.12,0.11,0.05,0.08,0.03,0.07,0.08,0.1,0.12,0.1,0.17,0.18,0.14,0.04,0.18,0.09,0.09,0.11,0.12,0.1,0.07,0.08,0.1,0.07,0,2.92,-2.37,4050,3625,1087.5,8.31,2.66,5.16,9.82,3.55,9.82,11.56},0},
{{0.07,0.1,0.15,0.12,0.13,0.16,0.12,0.08,0.06,0.04,0.03,0.06,0.1,0.11,0.11,0.12,0.16,0.12,0.18,0.04,0.15,0.11,0.1,0.11,0.1,0.12,0.08,0.07,0.09,0.1,0,2.97,-1.9,4050,2125,2466.67,8.64,2.62,5.26,9.98,3.21,9.98,11.81},0},
{{0.11,0.06,0.12,0.13,0.13,0.12,0.12,0.1,0.06,0.06,0.03,0.06,0.11,0.12,0.1,0.11,0.12,0.17,0.15,0.05,0.18,0.08,0.08,0.07,0.09,0.11,0.1,0.12,0.08,0.11,0,2.9,-1.44,1700,2475,3700,8.48,2.83,5.65,10.02,3.63,10.02,11.91},0},
{{0.08,0.11,0.1,0.12,0.14,0.12,0.12,0.12,0.1,0.02,0.03,0.03,0.09,0.11,0.11,0.09,0.18,0.2,0.13,0.05,0.13,0.07,0.07,0.09,0.12,0.11,0.1,0.11,0.09,0.13,0,3.11,-0.89,1700,883.33,3166.67,8.27,2.51,4.99,9.83,3.3,9.83,11.33},0},
{{0.09,0.12,0.09,0.15,0.1,0.15,0.15,0.07,0.08,0.02,0.03,0.06,0.09,0.08,0.1,0.16,0.15,0.16,0.15,0.05,0.14,0.06,0.09,0.12,0.13,0.11,0.1,0.09,0.08,0.1,0,3.07,-1.26,1700,750,900,8.81,2.55,4.6,10.23,3.29,10.23,11.62},0},
{{0.03,0.09,0.09,0.14,0.11,0.1,0.09,0.03,0.02,0.01,0.02,0.02,0.05,0.07,0.05,0.11,0.13,0.14,0.09,0.01,0.08,0.08,0.03,0.06,0.07,0.09,0.1,0.09,0.07,0.04,0,1.91,-0.77,1700,1050,775,6.17,1.51,2.75,10.19,2.83,10.19,7.59},0},
{{0,0.02,0.04,0.07,0.06,0.04,0.07,0.09,0.12,0,0.15,0.15,0.1,0.08,0.1,0.07,0.08,0.1,0.13,0,0.17,0.13,0.12,0.11,0.09,0.09,0.09,0.1,0.05,0,0,4.8,-1.75,348.08,537.5,1750,10.08,7.99,4.34,12.3,9.78,12.3,15.85},0},
{{0,0.01,0.03,0.08,0.05,0.05,0.08,0.07,0.11,0,0.23,0.09,0.12,0.11,0.08,0.12,0.09,0.1,0.06,0,0.31,0.12,0.07,0.07,0.11,0.08,0.05,0.06,0.08,0,0,2.62,-3.34,332.76,1206.25,4600,10.58,7.44,5.22,12.83,9.36,12.83,16.72},0},
{{0,0.02,0.02,0.05,0.05,0.11,0.07,0.08,0.09,0,0.24,0.16,0.16,0.11,0.1,0.09,0.08,0.05,0.03,0,0.22,0.14,0.09,0.09,0.11,0.08,0.05,0.06,0.11,0,0,1.07,-2.24,505.26,4375,2300,9.96,6,4.8,12.4,7.65,12.4,14.53},0},
{{0,0.02,0.04,0.05,0.06,0.06,0.06,0.07,0.15,0,0.22,0.16,0.17,0.1,0.15,0.08,0.07,0.04,0.04,0,0.2,0.1,0.09,0.1,0.12,0.1,0.08,0.08,0.07,0,0,0.68,-1.84,689.29,1037.5,1775,10.52,6.24,5.04,12.81,8.12,12.81,15.17},0},
{{0.01,0.06,0.1,0.1,0.17,0.15,0.13,0.1,0.07,0,0.09,0.1,0.08,0.11,0.11,0.09,0.11,0.06,0.12,0,0.11,0.12,0.1,0.08,0.1,0.08,0.07,0.07,0.14,0,0,7.86,0.28,266.67,532.14,1237.5,5.42,7.35,4.94,7.55,8.54,7.55,13.45},0},
{{0.14,0.18,0.11,0.08,0.12,0.11,0.15,0.11,0.03,0,0.11,0.04,0.09,0.11,0.13,0.07,0.09,0.1,0.09,0,0.11,0.14,0.09,0.06,0.09,0.08,0.09,0.06,0.12,0,0,8.08,0.75,2675,476.32,1712.5,7.24,7.37,5.24,9.71,8.54,9.71,14.63},0},
{{0.22,0.18,0.09,0.11,0.08,0.11,0.08,0.08,0.08,0,0.08,0.1,0.11,0.1,0.12,0.12,0.09,0.09,0.13,0,0.15,0.17,0.11,0.09,0.07,0.05,0.08,0.07,0.1,0,0,6.68,-0.55,1983.33,650,1250,8.61,6.51,5.09,11,7.75,11,14.43},0},
{{0.2,0.11,0.11,0.12,0.1,0.11,0.11,0.09,0.07,0,0.09,0.1,0.13,0.15,0.16,0.08,0.07,0.1,0.07,0,0.1,0.12,0.11,0.1,0.13,0.06,0.06,0.1,0.11,0,0,5.38,0.22,900,895.45,2100,7.78,5.94,4.86,10.32,7.41,10.32,13.12},0},
{{0.02,0.15,0.23,0.14,0.13,0.14,0.11,0.05,0.04,0,0.08,0.05,0.1,0.12,0.07,0.08,0.13,0.12,0.12,0,0.13,0.09,0.11,0.08,0.07,0.11,0.07,0.09,0.08,0,0,8.67,0.38,850,547.06,800,6.05,6.99,5.39,7.76,8.11,7.76,14.11},0},
{{0.13,0.2,0.17,0.1,0.07,0.14,0.11,0.08,0.02,0,0.02,0.11,0.1,0.09,0.15,0.11,0.12,0.09,0.1,0,0.12,0.1,0.13,0.08,0.08,0.04,0.11,0.07,0.14,0,0,8.12,0.5,1225,576.47,1375,7.8,6.26,5.19,9.99,7.44,9.99,14.34},0},
{{0.1,0.25,0.12,0.1,0.09,0.16,0.09,0.09,0.02,0,0.06,0.07,0.09,0.15,0.11,0.13,0.09,0.11,0.1,0,0.11,0.13,0.08,0.07,0.11,0.06,0.05,0.13,0.13,0,0,7.89,0.65,2275,442.86,866.67,7.61,6.47,5.3,9.85,7.6,9.85,14.2},0},
{{0.11,0.14,0.17,0.14,0.12,0.08,0.16,0.08,0.01,0,0.06,0.09,0.04,0.16,0.12,0.09,0.1,0.12,0.13,0,0.07,0.1,0.08,0.12,0.06,0.09,0.11,0.1,0.13,0,0,8.15,1.08,1700,500,1350,6.95,6.61,4.71,9.22,7.7,9.22,13.91},0},
{{0.1,0.22,0.14,0.09,0.08,0.12,0.12,0.09,0.07,0,0.07,0.08,0.11,0.1,0.08,0.11,0.15,0.13,0.09,0,0.1,0.09,0.13,0.09,0.08,0.11,0.09,0.07,0.13,0,0,7.73,0.5,2983.33,719.23,2016.67,7.43,6.5,4.74,9.63,7.7,9.63,13.86},0},
{{0.24,0.17,0.08,0.08,0.11,0.11,0.09,0.08,0.05,0,0.06,0.12,0.07,0.12,0.13,0.12,0.14,0.11,0.11,0,0.09,0.19,0.13,0.08,0.05,0.07,0.06,0.08,0.15,0,0,6.62,-0.12,4750,950,1637.5,8.88,6.06,4.91,11.33,7.26,11.33,14.36},0},
{{0.15,0.11,0.1,0.11,0.11,0.09,0.13,0.11,0.09,0,0.1,0.07,0.14,0.08,0.1,0.14,0.11,0.1,0.09,0,0.04,0.08,0.12,0.16,0.1,0.13,0.12,0.12,0.07,0,0,6.58,-0.23,450,690.91,4675,7.02,6.38,3.29,9.51,7.71,9.51,12.64},0},
{{0.16,0.06,0.09,0.12,0.09,0.09,0.09,0.15,0.13,0,0.1,0.14,0.11,0.12,0.09,0.12,0.12,0.08,0.09,0,0.07,0.08,0.08,0.13,0.15,0.11,0.14,0.11,0.09,0,0,5.51,-0.21,600,704.17,3175,6.68,6.51,3.3,9.02,7.8,9.02,12.13},0},
{{0.24,0.11,0.12,0.1,0.14,0.06,0.08,0.08,0.08,0,0.14,0.06,0.07,0.07,0.11,0.1,0.17,0.1,0.13,0,0.08,0.06,0.05,0.11,0.07,0.13,0.18,0.18,0.12,0,0,6.58,0.21,1250,775,1600,8.65,7.37,3.15,10.99,9.1,10.99,14.59},0},
{{0.16,0.17,0.1,0.13,0.11,0.07,0.07,0.07,0.09,0,0.08,0.13,0.1,0.09,0.1,0.14,0.13,0.14,0.07,0,0.11,0.07,0.13,0.08,0.08,0.13,0.1,0.13,0.09,0,0,5.81,0.13,2600,633.33,1275,8.27,5.9,4.13,10.39,7.16,10.39,13.46},0},
{{0.08,0.09,0.13,0.11,0.09,0.1,0.09,0.11,0.14,0,0.08,0.07,0.08,0.05,0.09,0.16,0.1,0.1,0.14,0,0.02,0.04,0.08,0.1,0.16,0.19,0.16,0.16,0.08,0,0,8.71,0.16,575,547.06,2825,6.35,6.89,2.6,8.25,8.14,8.25,13.17},0},
{{0.06,0.04,0.04,0.11,0.15,0.1,0.15,0.09,0.18,0,0.06,0.12,0.08,0.08,0.08,0.11,0.06,0.1,0.15,0,0.1,0.12,0.09,0.14,0.1,0.08,0.11,0.11,0.11,0,0,8.89,-0.94,400,533.33,1662.5,5.22,7.68,3.65,7.25,8.71,7.25,13.33},0},
{{0.03,0.04,0.15,0.14,0.19,0.1,0.09,0.12,0.13,0,0.09,0.08,0.11,0.09,0.08,0.08,0.1,0.11,0.12,0,0.1,0.08,0.14,0.13,0.17,0.1,0.06,0.1,0.11,0,0,8.29,-0.9,1075,477.5,4125,4.8,7.47,3.45,6.18,8.52,6.18,12.54},0},
{{0.01,0.01,0.04,0.1,0.11,0.17,0.09,0.15,0.24,0,0.05,0.07,0.15,0.09,0.04,0.07,0.06,0.2,0.15,0,0.03,0.11,0.08,0.09,0.09,0.12,0.12,0.09,0.07,0,0,9.26,1.27,3575,593.75,2075,4.06,7.08,4.44,5.21,7.99,5.21,13.12},0},
{{0,0,0.02,0.06,0.07,0.1,0.12,0.27,0.32,0,0.05,0.11,0.12,0.09,0.09,0.06,0.09,0.07,0.1,0,0.05,0.07,0.08,0.1,0.14,0.16,0.14,0.15,0.09,0,0,8.87,-0.19,4425,486.84,2300,3.36,7.8,2.88,4.13,8.67,4.13,11.88},0},
{{0,0.02,0.08,0.12,0.14,0.16,0.1,0.18,0.13,0,0.06,0.09,0.1,0.08,0.08,0.11,0.08,0.09,0.15,0,0.09,0.11,0.13,0.15,0.07,0.08,0.07,0.1,0.09,0,0,9.02,0.14,850,371.15,1550,3.82,7.45,4.73,4.88,8.44,4.88,13.14},0},
{{0.06,0.16,0.17,0.12,0.14,0.12,0.1,0.09,0.05,0,0.1,0.08,0.07,0.11,0.11,0.07,0.06,0.16,0.16,0,0.16,0.12,0.12,0.08,0.04,0.07,0.05,0.11,0.07,0,0,8.29,0.24,1850,494.74,2050,6.56,7.4,5.8,8.59,8.36,8.59,14.46},0},
{{0.15,0.12,0.12,0.09,0.11,0.09,0.11,0.09,0.11,0,0.12,0.08,0.09,0.1,0.1,0.08,0.15,0.12,0.12,0,0.07,0.17,0.1,0.09,0.11,0.09,0.07,0.12,0.11,0,0,6.79,-0.3,787.5,935,3550,7.34,6.73,4.1,9.64,8,9.64,13.44},0},
{{0.1,0.06,0.11,0.09,0.12,0.06,0.13,0.12,0.17,0,0.07,0.1,0.07,0.12,0.08,0.1,0.15,0.14,0.09,0,0.11,0.04,0.06,0.08,0.15,0.15,0.13,0.17,0.1,0,0,7.64,-0.14,750,564.29,1850,6.12,6.52,3.35,8.22,7.75,8.22,12.66},0},
{{0.08,0.06,0.08,0.07,0.09,0.08,0.17,0.14,0.18,0,0.06,0.15,0.13,0.09,0.11,0.05,0.07,0.1,0.13,0,0.04,0.12,0.08,0.13,0.1,0.12,0.14,0.13,0.13,0,0,7.46,-0.21,1925,419.44,2550,5.6,7.52,3.23,7.66,8.44,7.66,12.38},0},
{{0.11,0.13,0.1,0.15,0.09,0.09,0.09,0.1,0.11,0,0.07,0.09,0.08,0.09,0.06,0.16,0.1,0.11,0.12,0,0.01,0.04,0.07,0.13,0.15,0.17,0.23,0.09,0.09,0,0,8.23,0.06,1716.67,552.94,2666.67,6.99,6.83,2.31,9.04,8.12,9.04,13.13},0},
{{0.23,0.14,0.12,0.12,0.08,0.08,0.06,0.11,0.07,0,0.13,0.09,0.12,0.09,0.14,0.15,0.14,0.07,0.04,0,0.03,0.04,0.15,0.15,0.15,0.14,0.16,0.09,0.05,0,0,4.85,-0.35,1800,877.78,2200,8.88,5.76,2.73,11.15,7.18,11.15,12.86},0},
{{0.23,0.14,0.15,0.13,0.06,0.07,0.05,0.05,0.07,0,0.24,0.2,0.14,0.09,0.08,0.12,0.06,0.03,0.01,0,0.02,0.1,0.07,0.14,0.13,0.12,0.1,0.1,0.16,0,0,0.21,-0.03,2475,800,1625,9.04,4.97,2.95,11.55,6.45,11.55,11.67},0},
{{0.08,0.1,0.14,0.05,0.16,0.21,0.11,0.09,0.03,0.05,0.05,0.03,0.06,0.13,0.11,0.08,0.14,0.17,0.15,0.1,0.07,0.05,0.11,0.05,0.05,0.06,0.21,0.2,0.14,0.08,0,6.45,-0.17,1087.5,1900,2900,7.56,2.57,1.73,8.87,3.42,8.87,10.83},2},
{{0.05,0.14,0.13,0.07,0.11,0.21,0.1,0.11,0.05,0.05,0.04,0.02,0.03,0.13,0.13,0.16,0.15,0.16,0.09,0.12,0.07,0.07,0.11,0.06,0.09,0.1,0.17,0.13,0.14,0.09,0,6.35,-0.17,1483.33,2337.5,1150,7.73,2.42,1.92,9.09,3.33,9.09,10.97},2},
{{0.05,0.13,0.16,0.08,0.1,0.15,0.12,0.13,0.05,0.06,0.05,0.02,0.05,0.09,0.15,0.17,0.19,0.11,0.12,0.08,0.04,0.1,0.08,0.13,0.14,0.1,0.09,0.13,0.11,0.12,0,6.18,-0.15,1500,3166.67,1100,7.69,2.37,2.01,9.05,3.36,9.05,10.87},2},
{{0.12,0.12,0.14,0.09,0.07,0.12,0.14,0.08,0.08,0.07,0.06,0.03,0.1,0.07,0.06,0.13,0.25,0.12,0.09,0.12,0.12,0.06,0.1,0.07,0.11,0.13,0.09,0.1,0.14,0.1,0,6.35,-0.16,1800,1975,2825,7.53,2.48,2.25,9.16,3.47,9.16,10.93},2},
{{0.08,0.13,0.09,0.1,0.14,0.12,0.12,0.07,0.12,0.06,0.07,0.08,0.09,0.06,0.09,0.14,0.14,0.12,0.12,0.11,0.04,0.1,0.13,0.09,0.15,0.1,0.1,0.11,0.12,0.08,0,6.22,-0.34,1266.67,1291.67,2775,7.83,2.89,1.9,9.35,3.98,9.35,11.1},2},
{{0.12,0.08,0.09,0.16,0.07,0.11,0.15,0.07,0.09,0.08,0.07,0.08,0.09,0.12,0.1,0.1,0.11,0.13,0.1,0.12,0.1,0.08,0.1,0.11,0.12,0.07,0.11,0.14,0.09,0.1,0,6.17,-0.33,950,1775,2850,8.24,3,2.05,9.73,4.16,9.73,11.44},2},
{{0.15,0.08,0.09,0.16,0.06,0.06,0.11,0.11,0.09,0.11,0.06,0.12,0.09,0.08,0.09,0.09,0.13,0.11,0.11,0.12,0.12,0.13,0.09,0.11,0.06,0.11,0.11,0.09,0.08,0.11,0,6.37,-0.47,1185.71,1510,2725,8.29,3.35,2.15,9.85,4.56,9.85,11.68},2},
{{0.14,0.07,0.1,0.14,0.07,0.07,0.13,0.08,0.08,0.13,0.07,0.06,0.11,0.13,0.05,0.14,0.13,0.07,0.13,0.14,0.13,0.1,0.07,0.11,0.09,0.12,0.11,0.12,0.1,0.09,0,6.3,-0.45,758.33,2150,2475,8.48,3.11,2.04,10.14,4.1,10.14,11.77},2},
{{0.12,0.07,0.1,0.11,0.1,0.1,0.13,0.08,0.09,0.1,0.06,0.04,0.15,0.09,0.14,0.12,0.1,0.09,0.15,0.09,0.12,0.09,0.1,0.07,0.08,0.15,0.09,0.1,0.11,0.11,0,6.01,-0.13,568.75,2516.67,2175,8.7,2.75,2.42,10.27,3.82,10.27,11.82},2},
{{0.14,0.09,0.1,0.08,0.07,0.1,0.1,0.12,0.1,0.1,0.13,0.08,0.1,0.1,0.06,0.12,0.12,0.12,0.09,0.11,0.11,0.15,0.07,0.07,0.07,0.09,0.14,0.13,0.11,0.09,0,5.77,-0.29,1292.86,1375,2550,8.61,3.07,2.23,10.17,4.3,10.17,11.7},2},
{{0.15,0.07,0.12,0.08,0.09,0.09,0.1,0.11,0.13,0.08,0.1,0.12,0.11,0.1,0.13,0.08,0.1,0.06,0.12,0.11,0.1,0.1,0.1,0.15,0.11,0.08,0.08,0.12,0.09,0.09,0,5.65,-0.46,1078.57,4300,4300,8.53,3.05,2.07,10.14,4.17,10.14,11.55},2},
{{0.11,0.1,0.1,0.11,0.08,0.11,0.07,0.09,0.13,0.11,0.11,0.15,0.09,0.09,0.11,0.1,0.07,0.08,0.12,0.11,0.12,0.11,0.15,0.1,0.1,0.1,0.07,0.09,0.09,0.1,0,5.65,-0.43,760,2166.67,3275,8.61,3.09,2.24,10.28,4.16,10.28,11.62},2},
{{0.13,0.09,0.09,0.12,0.1,0.06,0.1,0.1,0.11,0.11,0.13,0.12,0.1,0.09,0.11,0.09,0.1,0.1,0.09,0.09,0.12,0.14,0.12,0.12,0.09,0.09,0.08,0.09,0.08,0.1,0,5.52,-0.54,1011.11,2533.33,1050,8.43,3.04,2.15,10.1,4.27,10.1,11.41},2},
{{0.1,0.11,0.1,0.09,0.1,0.09,0.1,0.13,0.09,0.12,0.1,0.13,0.11,0.11,0.1,0.12,0.1,0.07,0.08,0.09,0.08,0.13,0.1,0.09,0.13,0.09,0.1,0.09,0.1,0.12,0,5.36,-0.13,988.89,1337.5,3016.67,8.51,2.69,2.37,10.14,3.82,10.14,11.31},2},
{{0.1,0.12,0.07,0.09,0.11,0.11,0.12,0.09,0.12,0.07,0.11,0.12,0.07,0.09,0.12,0.1,0.12,0.12,0.09,0.08,0.12,0.11,0.11,0.06,0.1,0.12,0.11,0.13,0.1,0.08,0,5.51,-0.42,1131.25,1533.33,1050,8.3,2.82,2.16,9.9,4.05,9.9,11.3},2},
{{0.1,0.1,0.09,0.1,0.11,0.07,0.07,0.15,0.08,0.13,0.13,0.1,0.12,0.12,0.06,0.07,0.07,0.14,0.1,0.11,0.1,0.1,0.14,0.08,0.12,0.1,0.08,0.09,0.11,0.1,0,5.63,-0.31,800,2775,1100,8.61,3.1,2.24,10.27,4.14,10.27,11.6},2},
{{0.13,0.08,0.11,0.12,0.09,0.08,0.05,0.13,0.11,0.11,0.14,0.15,0.1,0.07,0.09,0.06,0.12,0.08,0.12,0.1,0.13,0.12,0.1,0.09,0.14,0.11,0.07,0.05,0.11,0.1,0,5.53,-0.32,763.64,1540,3850,8.38,3.12,2.43,10.06,4.27,10.06,11.41},2},
{{0.12,0.11,0.07,0.09,0.09,0.11,0.06,0.13,0.11,0.11,0.12,0.12,0.16,0.08,0.06,0.1,0.09,0.12,0.08,0.1,0.15,0.14,0.07,0.13,0.1,0.1,0.07,0.08,0.08,0.11,0,5.37,-0.44,808.33,2150,2866.67,8.66,2.99,2.47,10.34,4.22,10.34,11.71},2},
{{0.1,0.1,0.1,0.09,0.11,0.09,0.09,0.09,0.14,0.08,0.16,0.1,0.13,0.07,0.11,0.12,0.05,0.1,0.08,0.1,0.16,0.13,0.1,0.09,0.07,0.09,0.12,0.07,0.09,0.12,0,5.36,-0.36,818.18,2166.67,3775,8.56,3.04,2.48,10.18,4.29,10.18,11.58},2},
{{0.11,0.1,0.07,0.12,0.09,0.06,0.08,0.16,0.15,0.08,0.12,0.12,0.11,0.11,0.1,0.11,0.07,0.08,0.1,0.11,0.1,0.09,0.07,0.09,0.14,0.12,0.1,0.13,0.08,0.1,0,5.51,-0.36,950,2175,1783.33,8.79,3.06,2.03,10.39,4.2,10.39,11.62},2},
{{0.09,0.11,0.07,0.11,0.1,0.11,0.09,0.11,0.1,0.12,0.15,0.12,0.13,0.11,0.08,0.09,0.06,0.08,0.1,0.1,0.08,0.1,0.08,0.1,0.12,0.14,0.1,0.07,0.11,0.11,0,5.24,-0.14,1192.86,3850,2200,8.63,3.09,2.32,10.22,4.22,10.22,11.45},2},
{{0.1,0.11,0.07,0.1,0.13,0.09,0.11,0.1,0.11,0.09,0.12,0.15,0.1,0.1,0.15,0.08,0.07,0.08,0.08,0.1,0.08,0.11,0.11,0.09,0.13,0.16,0.07,0.1,0.08,0.1,0,5.11,-0.4,1178.57,2183.33,1850,8.53,2.83,2.05,10.12,3.99,10.12,11.22},2},
{{0.07,0.12,0.08,0.11,0.11,0.11,0.14,0.09,0.1,0.08,0.12,0.1,0.13,0.13,0.13,0.05,0.08,0.08,0.09,0.11,0.1,0.11,0.07,0.09,0.16,0.14,0.08,0.06,0.08,0.12,0,5.29,-0.24,1106.25,1650,2583.33,8.53,2.89,2.32,10.06,3.92,10.06,11.34},2},
{{0.07,0.12,0.09,0.08,0.14,0.09,0.07,0.12,0.09,0.13,0.09,0.16,0.1,0.13,0.11,0.1,0.07,0.06,0.09,0.11,0.11,0.1,0.09,0.12,0.14,0.08,0.09,0.07,0.1,0.12,0,5.32,-0.14,1450,2766.67,1433.33,8.56,2.88,2.48,10.14,4.05,10.14,11.43},2},
{{0.08,0.09,0.08,0.12,0.13,0.08,0.09,0.1,0.14,0.1,0.12,0.14,0.09,0.09,0.14,0.12,0.08,0.06,0.1,0.08,0.08,0.1,0.11,0.11,0.11,0.1,0.1,0.09,0.11,0.12,0,5.22,0.05,1000,3725,2483.33,8.81,2.66,2.61,10.27,3.77,10.27,11.48},2},
{{0.09,0.11,0.11,0.09,0.11,0.06,0.1,0.11,0.14,0.09,0.15,0.09,0.14,0.11,0.13,0.07,0.07,0.1,0.07,0.09,0.08,0.09,0.09,0.14,0.16,0.11,0.1,0.06,0.1,0.1,0,5.17,-0.33,1175,4900,2050,8.66,2.81,2.1,10.27,3.91,10.27,11.33},2},
{{0.06,0.14,0.11,0.07,0.14,0.07,0.1,0.1,0.13,0.09,0.11,0.16,0.09,0.14,0.09,0.07,0.06,0.1,0.12,0.08,0.07,0.07,0.15,0.06,0.11,0.15,0.11,0.08,0.13,0.09,0,5.18,-0.34,983.33,1650,3850,8.42,2.73,1.94,10.1,3.68,10.1,11.08},2},
{{0.02,0.07,0.07,0.06,0.07,0.1,0.03,0.05,0.05,0.04,0.05,0.06,0.05,0.04,0.07,0.04,0.06,0.08,0.07,0.03,0.06,0.06,0.06,0.04,0.02,0.03,0.06,0.07,0.08,0.08,0,2.93,0.3,2225,1262.5,1675,4.21,1.61,1.62,9.2,4.02,9.2,5.79},2},
{{0,0,0.02,0.1,0.13,0.18,0.13,0.1,0.12,0.23,0.09,0.09,0.12,0.09,0.07,0.06,0.09,0.14,0.11,0.07,0.11,0.12,0.06,0.06,0.06,0.15,0.14,0.09,0.1,0.14,0,9.06,0.49,3150,410.87,964.29,3.94,7.48,5.4,4.81,8.39,4.81,13.38},0},
{{0.01,0.01,0.1,0.17,0.12,0.13,0.15,0.11,0.11,0.12,0.08,0.1,0.12,0.07,0.09,0.05,0.09,0.15,0.09,0.08,0.12,0.08,0.09,0.09,0.08,0.12,0.11,0.11,0.12,0.11,0,9.16,0.06,4175,508.33,1225,4.9,7.57,5.48,6.24,8.51,6.24,14.03},0},
{{0.08,0.11,0.12,0.11,0.08,0.1,0.11,0.08,0.12,0.1,0.08,0.09,0.11,0.12,0.09,0.08,0.14,0.09,0.09,0.05,0.08,0.11,0.1,0.09,0.1,0.1,0.09,0.11,0.15,0.1,0,8.07,0.25,1625,461.11,3725,7.28,6.88,5.4,9.43,7.94,9.43,14.23},0},
{{0.15,0.12,0.1,0.07,0.12,0.11,0.1,0.1,0.08,0.09,0.11,0.07,0.08,0.14,0.11,0.11,0.11,0.08,0.09,0.07,0.1,0.09,0.17,0.1,0.06,0.06,0.12,0.11,0.11,0.1,0,7.64,-0.18,2900,556.25,2950,8.14,6.73,5.52,10.53,8.07,10.53,14.95},0},
{{0.2,0.13,0.1,0.07,0.07,0.07,0.1,0.11,0.12,0.06,0.09,0.11,0.1,0.12,0.12,0.14,0.1,0.06,0.08,0.06,0.1,0.14,0.12,0.12,0.07,0.1,0.04,0.1,0.14,0.09,0,6.99,-0.55,2725,507.89,2683.33,8.82,6.22,5.64,11.36,7.54,11.36,14.75},0},
{{0.16,0.08,0.08,0.12,0.11,0.08,0.09,0.1,0.06,0.14,0.13,0.11,0.1,0.08,0.07,0.11,0.16,0.11,0.11,0.02,0.01,0.08,0.1,0.1,0.2,0.18,0.17,0.1,0.05,0.03,0,6.74,-0.72,4125,583.33,3675,8.04,6.73,3.16,10.37,7.92,10.37,13.45},0},
{{0.1,0.08,0.12,0.12,0.13,0.07,0.09,0.08,0.12,0.11,0.1,0.09,0.09,0.09,0.11,0.12,0.11,0.06,0.14,0.05,0.06,0.09,0.06,0.12,0.14,0.13,0.19,0.09,0.08,0.07,0,7.92,-0.49,425,492.11,2300,7.37,7.07,4.21,9.53,8.37,9.53,14.09},0},
{{0.09,0.12,0.12,0.11,0.08,0.09,0.1,0.13,0.11,0.08,0.1,0.06,0.12,0.1,0.13,0.1,0.09,0.08,0.13,0.06,0.09,0.13,0.1,0.11,0.11,0.07,0.07,0.15,0.09,0.1,0,7.98,-0.23,1550,452.38,2287.5,7.31,6.91,5.52,9.66,8.04,9.66,14.41},0},
{{0.11,0.15,0.09,0.08,0.12,0.11,0.1,0.1,0.07,0.09,0.07,0.15,0.09,0.12,0.11,0.14,0.07,0.1,0.08,0.05,0.16,0.12,0.08,0.09,0.06,0.07,0.06,0.12,0.13,0.13,0,6.92,-0.51,1225,552.94,2733.33,8.01,6.39,6.3,10.3,7.61,10.3,14.41},0},
{{0.1,0.07,0.15,0.11,0.12,0.13,0.07,0.11,0.08,0.07,0.09,0.13,0.11,0.12,0.08,0.08,0.1,0.15,0.06,0.06,0.13,0.11,0.09,0.09,0.07,0.11,0.11,0.08,0.11,0.13,0,7.41,-0.24,2350,468.42,725,7.55,7,5.89,9.68,8.01,9.68,14.3},0},
{{0.1,0.13,0.13,0.09,0.09,0.09,0.09,0.1,0.11,0.1,0.12,0.12,0.08,0.1,0.1,0.09,0.09,0.12,0.13,0.04,0.13,0.1,0.13,0.11,0.08,0.1,0.09,0.08,0.09,0.11,0,7.19,-0.84,2575,573.33,1030,7.74,7.02,5.67,10,8.15,10,14.46},0},
{{0.1,0.14,0.09,0.1,0.12,0.06,0.12,0.13,0.12,0.05,0.13,0.1,0.11,0.14,0.1,0.1,0.12,0.11,0.08,0.03,0.12,0.08,0.12,0.11,0.13,0.1,0.06,0.08,0.08,0.13,0,5.93,-0.43,1383.33,787.5,1510,7.39,6.14,5.79,9.79,7.34,9.79,13.53},0},
{{0.09,0.09,0.15,0.12,0.1,0.08,0.13,0.11,0.08,0.07,0.1,0.11,0.11,0.07,0.09,0.1,0.08,0.12,0.13,0.04,0.13,0.14,0.09,0.12,0.11,0.05,0.05,0.1,0.11,0.13,0,7.75,-0.44,2650,467.5,1516.67,7.46,7.26,6.29,9.65,8.36,9.65,14.83},0},
{{0.12,0.19,0.07,0.05,0.09,0.11,0.07,0.07,0.13,0.12,0.13,0.09,0.06,0.12,0.16,0.14,0.08,0.07,0.12,0.04,0.09,0.06,0.08,0.15,0.15,0.11,0.09,0.11,0.09,0.09,0,6.47,-0.34,1900,593.75,2966.67,8.21,6.16,4.88,10.6,7.65,10.6,13.9},0},
{{0.03,0.04,0.03,0.03,0.02,0.02,0.04,0.03,0.05,0.03,0.04,0.04,0.04,0.01,0.04,0.04,0.04,0.03,0.02,0.01,0.03,0.01,0.02,0.03,0.04,0.04,0.07,0.04,0.04,0.01,0,1.8,0.06,512.5,1250,566.67,2.22,2.06,1.26,9.79,8.27,9.79,3.81},0},
{{0.04,0.1,0.13,0.09,0.12,0.11,0.2,0.07,0.07,0.08,0.1,0.08,0.07,0.09,0.09,0.12,0.16,0.1,0.11,0.1,0.02,0.05,0.1,0.1,0.08,0.06,0.12,0.23,0.19,0.07,0,8.01,0.25,1075,2412.5,2500,6.45,3.12,1.89,8.15,4.12,8.15,11.25},2},
{{0.03,0.09,0.08,0.13,0.12,0.09,0.16,0.14,0.08,0.09,0.08,0.08,0.07,0.15,0.11,0.12,0.14,0.1,0.08,0.09,0.07,0.06,0.09,0.12,0.11,0.1,0.15,0.11,0.09,0.13,0,7.75,0.18,1350,1480,3150,6.97,2.91,2.43,8.55,3.92,8.55,11.55},2},
{{0.05,0.04,0.13,0.13,0.1,0.09,0.16,0.1,0.14,0.07,0.06,0.12,0.11,0.12,0.09,0.09,0.16,0.11,0.07,0.09,0.13,0.09,0.1,0.15,0.07,0.09,0.11,0.08,0.1,0.11,0,7.71,-0.17,1250,1530,2750,6.95,3.03,2.59,8.61,3.97,8.61,11.53},2},
{{0.05,0.08,0.16,0.15,0.1,0.09,0.12,0.07,0.07,0.13,0.11,0.1,0.06,0.12,0.09,0.11,0.13,0.09,0.11,0.1,0.1,0.11,0.14,0.1,0.09,0.12,0.1,0.09,0.07,0.1,0,7.89,-0.36,1530,1800,2187.5,6.22,3.26,2.24,8.22,4.19,8.22,11.32},2},
{{0.14,0.2,0.17,0.09,0.08,0.06,0.06,0.09,0.08,0.06,0.16,0.07,0.03,0.11,0.11,0.11,0.09,0.07,0.14,0.14,0.08,0.13,0.16,0.06,0.08,0.09,0.11,0.11,0.08,0.12,0,8.22,-0.24,1783.33,921.43,3150,5.18,3.78,2.37,7.01,4.69,7.01,10.96},2},
{{0.05,0.06,0.11,0.14,0.11,0.08,0.11,0.14,0.12,0.08,0.08,0.09,0.08,0.11,0.15,0.13,0.11,0.08,0.11,0.08,0.09,0.11,0.09,0.14,0.08,0.13,0.11,0.09,0.1,0.09,0,7.85,-0.25,1520,1520,2183.33,7.07,3.07,2.21,8.85,4.06,8.85,11.64},2},
{{0.16,0.05,0.1,0.07,0.13,0.06,0.07,0.13,0.13,0.12,0.08,0.16,0.09,0.1,0.13,0.1,0.11,0.07,0.08,0.11,0.06,0.13,0.18,0.13,0.13,0.11,0.06,0.07,0.06,0.1,0,7.66,-0.39,1228.57,1075,3250,7.21,3.44,2.23,8.99,4.58,8.99,11.61},2},
{{0.06,0.1,0.11,0.07,0.12,0.13,0.13,0.09,0.12,0.08,0.11,0.1,0.08,0.12,0.1,0.13,0.1,0.09,0.07,0.11,0.08,0.1,0.13,0.09,0.09,0.12,0.14,0.07,0.1,0.11,0,7.61,-0.01,1100,1100,1450,6.87,3.23,2.46,8.58,4.26,8.58,11.44},2},
{{0.09,0.05,0.09,0.12,0.11,0.1,0.09,0.11,0.11,0.14,0.12,0.07,0.13,0.12,0.08,0.09,0.13,0.08,0.1,0.1,0.08,0.12,0.1,0.07,0.11,0.11,0.13,0.11,0.09,0.1,0,7.61,-0.16,1206.25,1433.33,1625,7.42,3.43,2.27,9.25,4.42,9.25,11.92},2},
{{0.09,0.06,0.07,0.11,0.13,0.09,0.1,0.15,0.11,0.1,0.1,0.08,0.14,0.11,0.09,0.14,0.11,0.08,0.08,0.11,0.09,0.07,0.09,0.07,0.12,0.13,0.17,0.09,0.09,0.12,0,7.64,0.1,1600,1078.57,2500,7.3,3.2,2.48,8.86,4.26,8.86,11.73},2},
{{0.06,0.1,0.07,0.09,0.1,0.13,0.07,0.12,0.14,0.12,0.13,0.1,0.13,0.09,0.1,0.08,0.11,0.09,0.12,0.08,0.05,0.14,0.12,0.11,0.09,0.07,0.16,0.1,0.08,0.11,0,7.43,0.06,1044.44,1383.33,2600,7.56,3.33,2.49,9.27,4.25,9.27,11.8},2},
{{0.05,0.1,0.05,0.11,0.11,0.12,0.08,0.16,0.11,0.11,0.06,0.14,0.12,0.15,0.14,0.08,0.07,0.1,0.08,0.08,0.07,0.12,0.13,0.12,0.12,0.12,0.07,0.11,0.05,0.11,0,7.17,-0.21,1292.86,1710,3250,7.45,2.98,2.32,9.07,4.01,9.07,11.44},2},
{{0.04,0.1,0.07,0.1,0.11,0.1,0.08,0.12,0.16,0.13,0.12,0.08,0.16,0.13,0.14,0.06,0.1,0.07,0.06,0.1,0.1,0.09,0.12,0.07,0.15,0.12,0.08,0.08,0.14,0.09,0,7.09,-0.13,1612.5,1072.22,2650,7.64,3.2,2.37,9.3,4.3,9.3,11.61},2},
{{0.08,0.07,0.05,0.09,0.13,0.13,0.05,0.13,0.15,0.13,0.11,0.12,0.13,0.14,0.09,0.11,0.08,0.09,0.09,0.07,0.09,0.11,0.1,0.11,0.13,0.11,0.09,0.1,0.09,0.11,0,7.03,-0.25,1385.71,1290,1337.5,7.82,3.12,2.23,9.48,4.15,9.48,11.7},2},
{{0.04,0.09,0.08,0.1,0.14,0.09,0.07,0.14,0.13,0.15,0.11,0.15,0.18,0.11,0.09,0.07,0.09,0.1,0.03,0.09,0.07,0.12,0.1,0.18,0.11,0.1,0.09,0.07,0.11,0.08,0,6.74,-0.37,931.25,2150,4300,7.68,3.19,2.11,9.37,4.31,9.37,11.41},2},
{{0.05,0.09,0.08,0.06,0.12,0.13,0.06,0.12,0.15,0.15,0.1,0.16,0.19,0.11,0.08,0.09,0.08,0.07,0.04,0.1,0.09,0.12,0.1,0.14,0.14,0.08,0.12,0.04,0.11,0.08,0,6.73,-0.38,1085.71,1425,3775,7.84,3.2,2.19,9.48,4.31,9.48,11.53},2},
{{0.05,0.06,0.08,0.08,0.08,0.14,0.09,0.12,0.16,0.16,0.1,0.17,0.11,0.12,0.14,0.09,0.04,0.07,0.07,0.12,0.14,0.11,0.09,0.08,0.11,0.13,0.1,0.04,0.1,0.13,0,7.19,-0.11,1912.5,1275,2175,8.16,3.62,2.73,9.78,4.81,9.78,12.17},2},
{{0.08,0.08,0.04,0.09,0.08,0.14,0.09,0.13,0.13,0.17,0.1,0.22,0.13,0.11,0.09,0.08,0.08,0.06,0.07,0.09,0.11,0.11,0.1,0.12,0.09,0.14,0.13,0.02,0.1,0.11,0,6.71,-0.37,865,1816.67,2150,8.15,3.25,2.19,9.76,4.33,9.76,11.73},2},
{{0.06,0.11,0.12,0.13,0.11,0.1,0.1,0.08,0.09,0.12,0.09,0.11,0.15,0.11,0.12,0.06,0.07,0.1,0.11,0.1,0.13,0.11,0.09,0.06,0.08,0.1,0.11,0.12,0.14,0.09,0,7.47,-0.16,900,1180,1650,6.54,3.37,2.42,8.48,4.19,8.48,11.4},2},
{{0.59,0.33,0.08,0,0.01,0,0,0,0,0,0.14,0.03,0.06,0.01,0.03,0.13,0.09,0.14,0.22,0.18,0.23,0.08,0.06,0.05,0.02,0.04,0.06,0.16,0.22,0.11,0,9.23,0.02,1675,2600,2216.67,3.45,3.88,3.01,4.16,4.77,4.16,11},2},
{{0.61,0.22,0.06,0.06,0.02,0.02,0.02,0,0.01,0.01,0.18,0.03,0.04,0.02,0.03,0.09,0.08,0.13,0.26,0.17,0.24,0.06,0.05,0.06,0.05,0.06,0.06,0.17,0.15,0.13,0,9.14,-0.03,550,1200,2725,4.01,4.14,2.93,4.76,5.09,4.76,11.16},2},
{{0.11,0.09,0.12,0.14,0.11,0.11,0.14,0.08,0.06,0.05,0.12,0.08,0.05,0.03,0.13,0.16,0.07,0.14,0.14,0.11,0.07,0.09,0.1,0.06,0.12,0.09,0.16,0.13,0.1,0.1,0,8.43,-0.01,2200,1055.56,1466.67,5.47,3.43,2.21,6.94,4.42,6.94,11},2},
{{0.06,0.1,0.11,0.12,0.09,0.1,0.16,0.1,0.11,0.06,0.06,0.11,0.07,0.07,0.13,0.12,0.14,0.15,0.06,0.11,0.11,0.08,0.08,0.15,0.07,0.14,0.08,0.1,0.11,0.1,0,8.08,-0.18,1425,1100,3825,6.52,3.01,2.29,8.24,4.01,8.24,11.48},2},
{{0.04,0.1,0.14,0.12,0.09,0.11,0.13,0.09,0.14,0.04,0.09,0.07,0.08,0.15,0.13,0.12,0.11,0.12,0.09,0.08,0.08,0.08,0.09,0.09,0.12,0.14,0.1,0.12,0.1,0.09,0,7.55,-0.08,1093.75,2200,2183.33,6.42,2.82,2.27,8.21,3.66,8.21,11.17},2},
{{0.01,0.1,0.14,0.1,0.08,0.13,0.14,0.15,0.09,0.07,0.09,0.1,0.07,0.15,0.08,0.09,0.12,0.12,0.11,0.09,0.05,0.06,0.1,0.1,0.14,0.15,0.1,0.13,0.1,0.1,0,7.79,0.04,1510,1087.5,1050,6.72,3.27,2.14,8.4,4.24,8.4,11.34},2},
{{0.02,0.09,0.15,0.12,0.11,0.12,0.17,0.1,0.07,0.06,0.09,0.08,0.08,0.12,0.1,0.09,0.11,0.14,0.1,0.11,0.07,0.08,0.13,0.11,0.05,0.12,0.16,0.11,0.08,0.12,0,8.03,0.07,1887.5,1400,2516.67,6.14,3.21,2.34,7.82,4.12,7.82,11.14},2},
{{0,0.07,0.16,0.13,0.14,0.2,0.1,0.03,0.03,0.02,0.04,0.07,0.07,0.04,0.07,0.07,0.1,0.19,0.18,0.05,0.25,0.13,0.06,0.09,0.06,0.02,0.09,0.07,0.07,0.05,0,7.5,-1.37,1962.5,3925,2825,3.81,2.59,1.94,5.59,3.58,5.59,9.18},2},
{{0.13,0.13,0.12,0.14,0.13,0.08,0.07,0.09,0.05,0.08,0.09,0.08,0.06,0.1,0.1,0.08,0.12,0.1,0.15,0.15,0.09,0.08,0.06,0.08,0.08,0.09,0.12,0.17,0.13,0.11,0,7.79,-0.52,3300,790,3250,5.96,2.75,1.85,6.79,3.42,6.79,10.49},5},
{{0.07,0.1,0.11,0.09,0.07,0.12,0.14,0.14,0.09,0.09,0.11,0.11,0.09,0.1,0.1,0.11,0.15,0.07,0.08,0.09,0.09,0.11,0.05,0.11,0.11,0.12,0.14,0.1,0.09,0.11,0,6.76,-0.8,3925,2075,1525,7.1,2.31,1.55,7.86,2.81,7.86,10.27},5},
{{0.09,0.09,0.09,0.08,0.13,0.1,0.09,0.07,0.17,0.11,0.12,0.09,0.14,0.07,0.11,0.1,0.09,0.14,0.07,0.08,0.13,0.08,0.12,0.11,0.12,0.12,0.09,0.07,0.06,0.11,0,6.67,-1,2875,2450,3375,7.27,2.41,1.8,8.12,2.92,8.12,10.54},5},
{{0.1,0.09,0.09,0.09,0.08,0.1,0.12,0.1,0.11,0.15,0.09,0.11,0.12,0.15,0.1,0.11,0.06,0.1,0.1,0.07,0.09,0.15,0.15,0.11,0.11,0.07,0.09,0.09,0.09,0.08,0,6.67,-1.13,1570,2150,1750,7.43,2.43,1.66,8.41,3.05,8.41,10.6},5},
{{0.06,0.06,0.05,0.05,0.06,0.07,0.05,0.05,0.06,0.03,0.05,0.06,0.04,0.04,0.05,0.06,0.05,0.06,0.04,0.09,0.06,0.04,0.07,0.07,0.03,0.05,0.03,0.05,0.09,0.06,0,3.72,-0.38,1550,850,1275,3.29,1.94,0.99,7.21,4.79,7.21,5.27},5},
{{0.11,0.11,0.11,0.08,0.08,0.1,0.1,0.09,0.14,0.08,0.09,0.06,0.12,0.09,0.12,0.09,0.13,0.1,0.11,0.09,0.1,0.1,0.07,0.12,0.11,0.11,0.11,0.12,0.1,0.08,0,7,-0.91,1700,3050,2200,6.88,3.3,1.36,8.27,4.1,8.27,10.75},1},
{{0.09,0.11,0.09,0.11,0.12,0.09,0.12,0.08,0.08,0.12,0.1,0.07,0.12,0.09,0.12,0.13,0.08,0.11,0.1,0.1,0.1,0.12,0.1,0.09,0.09,0.13,0.07,0.07,0.12,0.1,0,6.89,-0.71,1537.5,1141.67,2300,6.92,3.28,1.73,8.31,4.1,8.31,10.79},1},
{{0.07,0.04,0.08,0.08,0.07,0.1,0.05,0.09,0.05,0.08,0.08,0.12,0.05,0.08,0.04,0.06,0.06,0.06,0.07,0.08,0.07,0.04,0.1,0.08,0.06,0.04,0.09,0.07,0.05,0.1,0,4.53,-0.41,1475,2300,1825,4.86,2.65,1.19,8.3,5.05,8.3,7.39},1},
{{0.07,0.11,0.13,0.07,0.12,0.11,0.11,0.08,0.13,0.09,0.1,0.07,0.1,0.09,0.11,0.09,0.14,0.08,0.1,0.14,0.09,0.09,0.06,0.11,0.14,0.09,0.11,0.11,0.1,0.11,0,5.82,-0.7,2233.33,1237.5,2175,8.33,2.23,1.94,9.19,2.8,9.19,10.84},5},
{{0.11,0.07,0.08,0.13,0.09,0.1,0.12,0.12,0.1,0.11,0.1,0.09,0.12,0.08,0.12,0.09,0.1,0.1,0.11,0.11,0.09,0.12,0.1,0.09,0.11,0.07,0.12,0.13,0.11,0.08,0,5.65,-0.9,975,2900,3850,8.38,2.26,1.76,9.27,2.81,9.27,10.7},5},
{{0.1,0.12,0.15,0.09,0.07,0.09,0.11,0.08,0.07,0.14,0.09,0.12,0.09,0.1,0.14,0.09,0.08,0.12,0.09,0.1,0.11,0.1,0.13,0.09,0.08,0.1,0.11,0.09,0.12,0.09,0,5.54,-0.83,1200,916.67,2100,8.23,2.15,2,9.27,2.74,9.27,10.59},5},
{{0.11,0.12,0.08,0.1,0.12,0.09,0.08,0.13,0.1,0.09,0.1,0.09,0.12,0.11,0.09,0.13,0.08,0.11,0.1,0.08,0.1,0.1,0.11,0.14,0.08,0.09,0.11,0.1,0.08,0.1,0,5.48,-0.84,4025,1462.5,2925,8.16,2.05,1.91,9.12,2.56,9.12,10.46},5},
{{0.06,0.04,0.02,0.04,0.06,0.03,0.04,0.07,0.05,0.03,0.05,0.06,0.04,0.04,0.03,0.04,0.06,0.04,0.06,0.02,0.06,0.03,0.04,0.04,0.04,0.05,0.06,0.02,0.04,0.06,0,2.27,-0.38,750,1575,1525,3.48,1.38,0.85,9.21,4.14,9.21,4.44},5},
{{0.12,0.08,0.12,0.08,0.1,0.1,0.11,0.1,0.12,0.11,0.09,0.12,0.08,0.11,0.08,0.12,0.09,0.12,0.09,0.13,0.12,0.11,0.09,0.12,0.06,0.09,0.12,0.09,0.1,0.12,0,3.55,-1.03,844.44,2916.67,3000,9.28,3.26,1.88,10.42,4.06,10.42,11.15},1},
{{0.1,0.1,0.08,0.11,0.1,0.14,0.11,0.09,0.09,0.1,0.14,0.09,0.08,0.08,0.12,0.12,0.11,0.09,0.1,0.09,0.08,0.1,0.1,0.11,0.12,0.11,0.08,0.14,0.08,0.1,0,3.14,-0.93,859.09,2225,2466.67,9.28,3.15,1.69,10.42,3.99,10.42,10.89},1},
{{0.07,0.09,0.07,0.1,0.08,0.06,0.07,0.1,0.07,0.07,0.05,0.08,0.12,0.09,0.08,0.05,0.07,0.08,0.09,0.07,0.08,0.07,0.07,0.07,0.08,0.08,0.07,0.08,0.1,0.07,0,2.58,-0.68,737.5,1675,1925,7.06,2.32,1.45,10.32,3.89,10.32,8.36},1},
{{0.1,0.11,0.11,0.1,0.09,0.08,0.08,0.1,0.13,0.1,0.11,0.09,0.07,0.1,0.08,0.1,0.09,0.11,0.12,0.14,0.12,0.11,0.08,0.08,0.09,0.1,0.1,0.14,0.09,0.11,0,4.02,-0.84,1157.14,1450,1825,9.39,2.03,2.21,10.47,2.63,10.47,11.04},5},
{{0.1,0.1,0.11,0.1,0.08,0.08,0.1,0.1,0.1,0.13,0.08,0.11,0.11,0.09,0.11,0.09,0.12,0.1,0.1,0.1,0.06,0.12,0.13,0.1,0.08,0.14,0.1,0.09,0.11,0.09,0,3.79,-0.75,1541.67,2650,2475,9.42,1.73,1.85,10.48,2.23,10.48,10.81},5},
{{0.1,0.09,0.06,0.11,0.12,0.13,0.12,0.11,0.1,0.08,0.1,0.12,0.14,0.08,0.1,0.1,0.09,0.11,0.11,0.07,0.15,0.1,0.08,0.09,0.09,0.11,0.11,0.08,0.1,0.12,0,3.46,-1.11,1662.5,3275,3225,9.35,1.63,2.11,10.23,2.13,10.23,10.73},5},
{{0.1,0.1,0.12,0.09,0.11,0.12,0.1,0.1,0.09,0.09,0.1,0.1,0.09,0.13,0.11,0.11,0.1,0.09,0.08,0.1,0.07,0.08,0.1,0.14,0.14,0.07,0.1,0.1,0.12,0.09,0,3.59,-0.85,943.75,2383.33,2000,8.97,1.66,1.86,10.01,2.27,10.01,10.29},5},
{{0.11,0.1,0.12,0.1,0.08,0.11,0.09,0.12,0.08,0.09,0.09,0.1,0.1,0.09,0.13,0.07,0.08,0.13,0.1,0.11,0.07,0.08,0.12,0.09,0.07,0.1,0.12,0.11,0.13,0.12,0,2.13,-0.53,532.35,1900,2300,9.51,3.22,2.11,10.77,3.99,10.77,11.05},1},
{{0.08,0.11,0.09,0.08,0.1,0.1,0.1,0.1,0.12,0.14,0.11,0.11,0.11,0.09,0.09,0.12,0.12,0.1,0.1,0.08,0.16,0.13,0.1,0.12,0.1,0.09,0.09,0.07,0.06,0.09,0,1.74,-1.44,562.5,1737.5,2200,10.16,3.06,2.02,11.36,3.82,11.36,11.55},1},
{{0.07,0.06,0.06,0.07,0.09,0.06,0.07,0.06,0.07,0.04,0.06,0.05,0.06,0.07,0.06,0.07,0.07,0.05,0.07,0.08,0.04,0.05,0.05,0.05,0.09,0.09,0.05,0.08,0.08,0.06,0,1.47,-0.38,1070,1212.5,2675,5.68,2.06,1.24,10.17,4.27,10.17,6.62},1},
{{0.1,0.05,0.05,0.09,0.1,0.11,0.14,0.09,0.09,0.21,0.11,0.12,0.11,0.06,0.07,0.1,0.09,0.09,0.12,0.16,0.15,0.14,0.12,0.15,0.13,0.03,0.08,0.08,0.09,0.05,0,8.26,-1.66,1070,1200,1950,5.95,4.05,2.2,6.91,4.95,6.91,11.12},5},
{{0.14,0.14,0.11,0.08,0.09,0.1,0.07,0.09,0.11,0.09,0.12,0.08,0.08,0.08,0.09,0.11,0.12,0.12,0.1,0.11,0.1,0.12,0.13,0.07,0.07,0.11,0.07,0.14,0.08,0.11,0,8.05,-0.68,1070,1027.78,3100,7.36,3.65,2.59,8.21,4.64,8.21,11.88},5},
{{0.12,0.09,0.11,0.13,0.08,0.09,0.11,0.09,0.12,0.08,0.11,0.1,0.12,0.1,0.1,0.08,0.09,0.1,0.12,0.1,0.08,0.08,0.08,0.14,0.12,0.1,0.13,0.09,0.07,0.11,0,7.77,-0.54,1070,2200,1250,6.91,3.67,2.27,7.64,4.53,7.64,11.18},5},
{{0.06,0.13,0.1,0.11,0.14,0.1,0.1,0.12,0.12,0.05,0.09,0.06,0.13,0.14,0.11,0.11,0.08,0.14,0.08,0.09,0.11,0.09,0.07,0.08,0.11,0.15,0.13,0.09,0.08,0.12,0,7.8,-0.64,1070,3550,3900,6.74,3.06,2.24,7.3,3.9,7.3,10.98},5},
{{0.07,0.09,0.1,0.09,0.06,0.07,0.08,0.09,0.07,0.07,0.06,0.11,0.07,0.1,0.11,0.07,0.09,0.07,0.06,0.04,0.04,0.06,0.04,0.07,0.07,0.09,0.07,0.09,0.16,0.1,0,5.66,0.13,1070,1425,475,5.31,2.64,1.82,7.51,4.29,7.51,8.35},5},
{{0.2,0.18,0.09,0.1,0.11,0.06,0.09,0.05,0.08,0.07,0.06,0.07,0.08,0.1,0.08,0.1,0.14,0.12,0.14,0.11,0.13,0.09,0.09,0.09,0.05,0.06,0.08,0.11,0.15,0.14,0,9.27,-0.35,1800,1266.67,475,4.45,3.95,2.51,5.81,4.74,5.81,11.36},1},
{{0.04,0.08,0.11,0.11,0.09,0.11,0.1,0.13,0.11,0.12,0.14,0.14,0.1,0.08,0.09,0.07,0.08,0.08,0.12,0.11,0.13,0.11,0.1,0.12,0.1,0.07,0.08,0.12,0.1,0.09,0,7.91,-0.74,1550,2075,2750,6.11,4.52,2.25,7.57,5.35,7.57,11.21},1},
{{0.06,0.05,0.07,0.13,0.1,0.14,0.12,0.11,0.12,0.11,0.1,0.1,0.11,0.13,0.13,0.13,0.08,0.1,0.05,0.08,0.04,0.1,0.11,0.09,0.14,0.18,0.15,0.07,0.06,0.06,0,7.72,-0.65,2325,1328.57,2625,6.07,3.63,1.73,7.37,4.71,7.37,10.75},1},
{{0.01,0.03,0.05,0.07,0.14,0.09,0.25,0.11,0.17,0.09,0.02,0.02,0.04,0.05,0.14,0.19,0.25,0.14,0.08,0.09,0,0.02,0.03,0.06,0.1,0.12,0.2,0.23,0.15,0.1,0,5.67,-0.52,2325,1583.33,3116.67,7.95,0.2,0.26,7.95,0.33,7.95,9.79},4},
{{0.17,0.1,0.1,0.07,0.05,0.06,0.07,0.07,0.11,0.22,0.09,0.06,0.08,0.06,0.14,0.08,0.06,0.12,0.1,0.24,0,0,0.02,0.06,0.11,0.16,0.12,0.18,0.18,0.2,0,5.69,-0.42,2325,444.74,800,8.01,0.37,0.34,8.02,0.46,8.02,9.86},4},
{{0.08,0.09,0.11,0.04,0.06,0.04,0.13,0.17,0.13,0.18,0.08,0.08,0.08,0.05,0.1,0.07,0.14,0.11,0.12,0.19,0,0.08,0.14,0.14,0.11,0.09,0.09,0.08,0.12,0.16,0,5.69,-0.55,2325,1812.5,750,7.97,0.36,0.47,7.98,0.48,7.98,9.84},4},
{{0.08,0.08,0.11,0.13,0.16,0.06,0.11,0.11,0.14,0.05,0.09,0.15,0.15,0.07,0.14,0.06,0.08,0.07,0.11,0.11,0.15,0.13,0.1,0.09,0.11,0.07,0.07,0.08,0.12,0.1,0,5.53,-0.79,2325,1083.33,975,8.05,0.33,0.43,8.05,0.41,8.05,9.82},4},
{{0.08,0.09,0.12,0.12,0.14,0.06,0.12,0.1,0.13,0.06,0.12,0.13,0.1,0.13,0.07,0.1,0.12,0.09,0.09,0.06,0.08,0.19,0.14,0.12,0.12,0.12,0.08,0.03,0.07,0.07,0,5.49,-0.85,2325,2212.5,3175,8.05,0.31,0.35,8.06,0.43,8.06,9.81},4},
{{0.1,0.1,0.11,0.1,0.12,0.06,0.16,0.09,0.12,0.07,0.13,0.06,0.17,0.08,0.13,0.11,0.11,0.09,0.06,0.08,0.23,0.1,0.15,0.07,0.09,0.09,0.05,0.09,0.04,0.1,0,5.49,-0.86,2325,1162.5,3875,8.08,0.3,0.51,8.08,0.39,8.08,9.84},4},
{{0.11,0.1,0.13,0.13,0.09,0.08,0.07,0.05,0.09,0.18,0.15,0.08,0.11,0.07,0.1,0.09,0.07,0.08,0.13,0.14,0.12,0.08,0.11,0.09,0.1,0.14,0.09,0.11,0.11,0.08,0,5.56,-0.76,2325,935,1750,8.03,0.36,0.38,8.04,0.46,8.04,9.83},4},
{{0.07,0.07,0.14,0.1,0.11,0.09,0.14,0.09,0.13,0.08,0.1,0.17,0.09,0.08,0.13,0.08,0.13,0.15,0.05,0.04,0.13,0.21,0.13,0.06,0.11,0.09,0.05,0.1,0.1,0.04,0,5.48,-0.89,2325,2250,925,8.04,0.27,0.36,8.05,0.35,8.05,9.79},4},
{{0.13,0.1,0.11,0.05,0.08,0.12,0.12,0.13,0.15,0.04,0.16,0.16,0.1,0.08,0.08,0.08,0.11,0.11,0.09,0.05,0.11,0.25,0.11,0.11,0.06,0.08,0.03,0.08,0.07,0.12,0,5.45,-0.84,2325,402.17,2475,8.09,0.31,0.43,8.09,0.37,8.09,9.81},4},
{{0.15,0.07,0.1,0.07,0.11,0.04,0.11,0.11,0.14,0.13,0.05,0.18,0.11,0.11,0.11,0.07,0.15,0.09,0.09,0.07,0.13,0.24,0.12,0.06,0.03,0.05,0.09,0.1,0.08,0.12,0,5.53,-0.81,2325,494.74,425,8.05,0.27,0.47,8.06,0.33,8.06,9.82},4},
{{0.08,0.06,0.07,0.1,0.16,0.03,0.16,0.11,0.15,0.09,0.11,0.05,0.11,0.08,0.16,0.09,0.1,0.13,0.08,0.12,0.04,0.06,0.08,0.1,0.13,0.16,0.18,0.12,0.09,0.06,0,5.59,-0.66,2325,730,1975,8.01,0.34,0.32,8.02,0.47,8.02,9.81},4},
{{0.07,0.03,0.07,0.09,0.07,0.05,0.06,0.07,0.11,0.13,0.05,0.02,0.04,0.07,0.09,0.08,0.07,0.08,0.11,0.14,0,0.01,0.01,0.04,0.09,0.14,0.13,0.12,0.12,0.1,0,4.17,-0.34,2325,2183.33,1925,5.82,1.13,0.27,7.98,1.61,7.98,7.18},4},
{{0.01,0,0,0,0,0,0,0,0.02,0.93,0.21,0.14,0.17,0.11,0.09,0.08,0,0.03,0.05,0.15,0.01,0,0,0.01,0.01,0,0.01,0.01,0.02,0.9,0,-3.46,7.36,2325,2183.33,207.78,5.68,0.17,0.13,5.69,0.25,5.69,9.93},3},
{{0.01,0,0,0,0,0.01,0.01,0.06,0.8,0.12,0.02,0.04,0.45,0.21,0.18,0.07,0,0.03,0.01,0.02,0,0.01,0,0,0,0.01,0.01,0.14,0.69,0.15,0,-3.42,6.98,2325,2183.33,188.89,6.2,0.06,0.07,6.2,0.12,6.2,9.95},3},
{{0.04,0.04,0,0.06,0.04,0.02,0.01,0.19,0.38,0.24,0.19,0.16,0.15,0.1,0.12,0.1,0,0.05,0.06,0.08,0.09,0.06,0.02,0.06,0.01,0.05,0.03,0.08,0.39,0.22,0,-3.45,6.89,2325,2183.33,287.5,6.27,0.16,0.19,6.28,0.22,6.28,9.94},3},
{{0.05,0.15,0,0.39,0.41,0.01,0,0,0,0,0.47,0.53,0.01,0,0,0,0,0,0,0,0.5,0.51,0,0,0,0,0,0,0,0,0,-3.62,6.49,2325,2183.33,317.24,6.65,0.04,0.04,6.66,0.06,6.66,9.98},3},
{{0.13,0.11,0,0.13,0.34,0.09,0.04,0.12,0.03,0.03,0.29,0.3,0.09,0.05,0.02,0.05,0,0.06,0.06,0.09,0.28,0.34,0.09,0.07,0.07,0.05,0.04,0.05,0.02,0.01,0,-3.5,6.58,2325,2183.33,404.76,6.61,0.17,0.13,6.61,0.23,6.61,9.97},3},
{{0.04,0.05,0,0.09,0.33,0.22,0.08,0.13,0.07,0.01,0.01,0.01,0.06,0.1,0.16,0.28,0,0.13,0.11,0.15,0.01,0.04,0.09,0.14,0.21,0.18,0.14,0.07,0.12,0.03,0,-3.31,6.76,2325,2183.33,205.43,6.54,0.08,0.09,6.55,0.13,6.55,9.97},3},
{{0.03,0,0,0,0.12,0.24,0.35,0.26,0.01,0.01,0.01,0.01,0.01,0.04,0.07,0.2,0,0.28,0.29,0.12,0.01,0.01,0.01,0.01,0.05,0.22,0.38,0.3,0.03,0.01,0,-3.3,6.79,2325,2183.33,269.44,6.52,0.05,0.04,6.52,0.09,6.52,9.97},3},
{{0,0,0,0,0.05,0.11,0.41,0.45,0,0,0,0,0,0.04,0.11,0.32,0,0.32,0.19,0.03,0,0,0,0.01,0.02,0.07,0.33,0.58,0.01,0,0,-3.31,6.81,2325,2183.33,221.43,6.5,0.03,0.03,6.5,0.05,6.5,9.98},3},
{{0.12,0.06,0,0.04,0.14,0.1,0.17,0.38,0.01,0.01,0.03,0.01,0.02,0.04,0.06,0.25,0,0.21,0.15,0.23,0.01,0.04,0.05,0.08,0.07,0.08,0.14,0.49,0.05,0.02,0,-3.27,6.79,2325,2183.33,262.12,6.55,0.1,0.08,6.55,0.17,6.55,9.99},3},
{{0.14,0.07,0,0.15,0.39,0.12,0.07,0.07,0.01,0,0,0.01,0.03,0.07,0.08,0.19,0,0.17,0.17,0.3,0,0.03,0.05,0.12,0.13,0.23,0.21,0.22,0.03,0,0,-3.28,6.75,2325,2183.33,320,6.62,0.07,0.06,6.62,0.09,6.62,10.01},3},
{{0.31,0.17,0,0.27,0.23,0.01,0.01,0.01,0,0,0.01,0.01,0.04,0.05,0.07,0.13,0,0.19,0.23,0.29,0.04,0.1,0.11,0.2,0.29,0.18,0.06,0.04,0,0,0,-3.28,6.68,2325,2183.33,315,6.69,0.07,0.06,6.7,0.1,6.7,10.01},3},
{{0.19,0.3,0,0.28,0.2,0.02,0.02,0.01,0,0,0,0,0.01,0.04,0.09,0.18,0,0.32,0.22,0.16,0,0.09,0.13,0.34,0.29,0.09,0.06,0.01,0,0,0,-3.29,6.68,2325,2183.33,274.29,6.68,0.05,0.04,6.68,0.06,6.68,10},3},
{{0.14,0.14,0,0.19,0.13,0.03,0.01,0.01,0,0,0.01,0.01,0.01,0.01,0.03,0.08,0,0.17,0.18,0.18,0.02,0.05,0.06,0.21,0.16,0.1,0.04,0.02,0,0,0,-2.11,4.31,2325,2183.33,206.9,4.31,0.75,1.53,6.68,1.16,6.68,6.45},3},
{{0.45,0.08,0.08,0.11,0.11,0.1,0.06,0.02,0,0,0,0.01,0.11,0.19,0.14,0.07,0.08,0.04,0.09,0.24,0.17,0.08,0.09,0.11,0.09,0.12,0.08,0.11,0.07,0.1,0,5.96,-0.7,1225,584.38,1600,7.86,7.52,2.87,9.94,8.41,9.94,12.37},0},
{{0.47,0.05,0.08,0.09,0.11,0.09,0.08,0.04,0.01,0,0,0.04,0.16,0.13,0.08,0.08,0.04,0.04,0.07,0.22,0.3,0.12,0.07,0.03,0.06,0.05,0.12,0.05,0.06,0.15,0,6.91,-1.64,3700,522.22,1850,8.9,8.92,4.01,10.97,9.68,10.97,14.81},0},
{{0.09,0.09,0.1,0.18,0.1,0.12,0.11,0.13,0.07,0,0.02,0.07,0.12,0.14,0.08,0.06,0.03,0.08,0.11,0.2,0.1,0.17,0.15,0.11,0.08,0.1,0.07,0.08,0.08,0.07,0,5.91,-0.75,460.71,530.56,2025,7.29,8.5,2.64,9.68,9.61,9.68,13.01},0},
{{0.04,0.15,0.11,0.09,0.1,0.09,0.11,0.06,0.1,0,0.1,0.09,0.04,0.09,0.12,0.06,0.08,0.1,0.2,0.13,0.16,0.12,0.13,0.07,0.08,0.07,0.07,0.12,0.09,0.11,0,3.09,-0.79,762.5,725,3725,8.96,7.69,3,11.66,9.47,11.66,13.86},0},
{{0.04,0.12,0.1,0.14,0.06,0.1,0.1,0.13,0.09,0,0.08,0.17,0.09,0.12,0.1,0.12,0.09,0.1,0.1,0.05,0.06,0.11,0.1,0.08,0.11,0.08,0.13,0.08,0.13,0.13,0,-0.29,0.4,519.44,3600,1310,9.2,6.28,2.79,11.74,7.85,11.74,12.6},0},
{{0.07,0.09,0.11,0.1,0.09,0.1,0.1,0.14,0.1,0,0.1,0.15,0.06,0.11,0.12,0.09,0.12,0.1,0.12,0.05,0.04,0.09,0.04,0.08,0.13,0.12,0.13,0.13,0.16,0.11,0,0.15,0.44,387.5,800,2025,9.28,6.41,2.39,11.75,8.15,11.75,12.59},0},
{{0.06,0.09,0.12,0.11,0.1,0.09,0.11,0.07,0.1,0,0.13,0.11,0.07,0.11,0.09,0.14,0.11,0.11,0.1,0.05,0.08,0.07,0.1,0.07,0.13,0.08,0.08,0.14,0.16,0.1,0,-0.16,0.15,502.78,850,4250,9.28,6.58,2.65,11.95,8.38,11.95,12.82},0},
{{0.08,0.09,0.1,0.1,0.1,0.07,0.14,0.11,0.09,0,0.14,0.13,0.1,0.08,0.11,0.11,0.09,0.11,0.11,0.04,0.07,0.13,0.07,0.12,0.11,0.15,0.12,0.05,0.12,0.09,0,-0.79,-0.18,710,1625,1350,9.32,6.76,2.42,11.76,8.36,11.76,12.81},0},
{{0.06,0.15,0.11,0.09,0.08,0.09,0.1,0.06,0.11,0,0.14,0.08,0.1,0.08,0.1,0.13,0.11,0.15,0.06,0.08,0.07,0.14,0.09,0.08,0.15,0.08,0.08,0.16,0.08,0.09,0,-0.1,-0.16,633.33,1587.5,750,9.47,6.82,2.61,12.01,8.62,12.01,13.23},0},
{{0.07,0.09,0.1,0.07,0.06,0.1,0.12,0.14,0.1,0,0.19,0.08,0.06,0.05,0.1,0.13,0.13,0.1,0.14,0.04,0.16,0.08,0.1,0.14,0.08,0.05,0.13,0.05,0.12,0.11,0,-0.53,-0.52,750,1633.33,2050,10.49,7.59,3.08,12.72,9.22,12.72,14.56},0},
{{0.07,0.13,0.1,0.05,0.12,0.12,0.1,0.09,0.11,0,0.14,0.13,0.09,0.09,0.07,0.13,0.13,0.12,0.1,0.02,0.07,0.13,0.13,0.11,0.1,0.1,0.1,0.09,0.08,0.11,0,-1.04,-0.24,606.25,4025,2800,9.07,6.73,2.74,11.53,8.14,11.53,12.75},0},
{{0.03,0.07,0.13,0.14,0.15,0.09,0.1,0.15,0.09,0,0.08,0.12,0.15,0.11,0.15,0.08,0.11,0.1,0.07,0.06,0.05,0.06,0.1,0.12,0.09,0.13,0.08,0.15,0.11,0.12,0,-0.12,0.73,511.11,4025,1350,7.9,5.74,2.93,10.54,7.43,10.54,11.4},0},
{{0.03,0.12,0.1,0.09,0.13,0.11,0.07,0.1,0.15,0,0.11,0.1,0.1,0.09,0.09,0.09,0.1,0.14,0.12,0.09,0.05,0.06,0.11,0.11,0.15,0.12,0.11,0.12,0.1,0.09,0,0.85,0.01,410.42,762.5,3825,9,7.08,2.32,11.71,8.84,11.71,12.83},0},
{{0.05,0.1,0.11,0.1,0.12,0.11,0.1,0.16,0.1,0,0.11,0.14,0.12,0.13,0.09,0.08,0.11,0.13,0.08,0.02,0.09,0.07,0.12,0.14,0.09,0.11,0.09,0.1,0.1,0.1,0,-1.02,-0.09,535.29,1175,775,8.64,6.08,2.73,11.11,7.56,11.11,11.98},0},
{{0.03,0.12,0.11,0.1,0.1,0.11,0.09,0.13,0.08,0,0.14,0.12,0.1,0.07,0.09,0.1,0.15,0.12,0.08,0.04,0.09,0.1,0.14,0.12,0.08,0.15,0.07,0.1,0.1,0.07,0,-0.78,-0.57,646.43,1025,4000,9.11,6.78,2.27,11.7,8.28,11.7,12.77},0},
{{0.05,0.09,0.09,0.09,0.11,0.12,0.1,0.11,0.1,0,0.16,0.1,0.12,0.06,0.08,0.16,0.12,0.09,0.1,0.05,0.06,0.09,0.12,0.12,0.1,0.1,0.13,0.13,0.07,0.09,0,-0.93,-0.17,571.43,3200,1475,9.49,7.15,2.26,12.05,8.68,12.05,13.15},0},
{{0,0.02,0.06,0.04,0.04,0.05,0.12,0.04,0.05,0,0.03,0.03,0.09,0.03,0.07,0.05,0.07,0.05,0.04,0.01,0.05,0.04,0.05,0.03,0.08,0.06,0.05,0.05,0.02,0.03,0,0.04,-0.37,607.14,525,1100,4.16,2.26,0.96,11.57,6.63,11.57,5.27},0},
{{0.3,0.16,0.19,0.09,0.08,0.12,0.07,0.02,0,0,0.01,0.07,0.04,0.06,0.02,0.07,0.12,0.22,0.23,0.19,0.09,0.08,0.11,0.14,0.1,0.14,0.08,0.06,0.14,0.07,0,9.54,-0.32,2033.33,962.5,1125,3.12,3.12,1.75,4.09,3.89,4.09,10.59},2},
{{0.38,0.19,0.11,0.07,0.06,0.08,0.08,0.04,0.01,0,0.03,0.09,0.05,0.07,0.06,0.04,0.12,0.18,0.19,0.18,0.12,0.12,0.16,0.11,0.12,0.07,0.04,0.07,0.1,0.11,0,9.32,-0.47,3525,885,3700,3.31,3.62,2.02,4.44,4.45,4.44,10.68},2},
{{0.33,0.2,0.14,0.11,0.08,0.08,0.04,0.04,0,0,0.05,0.09,0.05,0.06,0.03,0.05,0.12,0.11,0.23,0.24,0.12,0.17,0.09,0.1,0.13,0.07,0.11,0.08,0.07,0.09,0,9.44,-0.45,1250,855.56,3150,3.13,3.85,1.93,4.15,4.52,4.15,10.7},2},
{{0.28,0.2,0.12,0.09,0.08,0.08,0.08,0.06,0.03,0.01,0.07,0.08,0.05,0.05,0.05,0.03,0.12,0.19,0.18,0.2,0.1,0.13,0.11,0.1,0.05,0.09,0.15,0.13,0.11,0.06,0,9.12,-0.37,1525,750,1050,3.82,3.68,1.79,5.22,4.52,5.22,10.8},2},
{{0.2,0.11,0.19,0.11,0.08,0.06,0.09,0.09,0.07,0.02,0.11,0.08,0.04,0.05,0.07,0.07,0.14,0.17,0.09,0.2,0.12,0.13,0.08,0.07,0.08,0.12,0.08,0.13,0.1,0.12,0,8.56,-0.06,1575,875,3700,4.89,3.88,2.15,6.45,4.81,6.45,10.89},2},
{{0.15,0.09,0.18,0.11,0.1,0.05,0.13,0.08,0.07,0.07,0.12,0.08,0.06,0.05,0.05,0.09,0.18,0.13,0.08,0.18,0.13,0.12,0.09,0.11,0.08,0.13,0.09,0.09,0.08,0.1,0,8.09,-0.37,1168.75,1430,1575,5.72,3.59,2.02,7.31,4.51,7.31,10.95},2},
{{0.1,0.08,0.09,0.13,0.1,0.08,0.11,0.12,0.12,0.11,0.1,0.08,0.08,0.08,0.11,0.16,0.12,0.11,0.09,0.1,0.1,0.1,0.15,0.13,0.1,0.11,0.06,0.08,0.09,0.11,0,7.19,-0.28,1550,1441.67,3125,7.13,2.87,2.08,8.74,3.75,8.74,11.17},2},
{{0.05,0.12,0.1,0.12,0.13,0.07,0.1,0.11,0.15,0.08,0.09,0.07,0.09,0.1,0.11,0.15,0.12,0.11,0.08,0.11,0.1,0.12,0.08,0.12,0.12,0.12,0.07,0.12,0.06,0.11,0,7.12,-0.13,1012.5,1862.5,1683.33,6.91,2.82,2.12,8.52,3.62,8.52,11},2},
{{0.08,0.1,0.11,0.1,0.1,0.07,0.14,0.07,0.16,0.1,0.12,0.09,0.09,0.12,0.11,0.14,0.12,0.05,0.08,0.1,0.1,0.11,0.15,0.1,0.1,0.08,0.09,0.09,0.09,0.11,0,6.7,-0.14,1078.57,1183.33,3000,7.1,2.87,2.18,8.76,3.85,8.76,10.82},2},
{{0.07,0.06,0.1,0.1,0.13,0.09,0.13,0.1,0.13,0.11,0.08,0.11,0.12,0.13,0.12,0.13,0.08,0.08,0.09,0.07,0.05,0.13,0.12,0.19,0.11,0.07,0.07,0.07,0.11,0.1,0,6.54,-0.04,2075,2450,2083.33,7.36,2.54,2.1,8.86,3.31,8.86,10.84},2},
{{0.04,0.09,0.08,0.11,0.11,0.13,0.11,0.12,0.15,0.08,0.1,0.09,0.1,0.11,0.12,0.14,0.1,0.12,0.07,0.08,0.05,0.09,0.14,0.13,0.12,0.08,0.06,0.12,0.12,0.11,0,6.69,0.06,1400,1210,2383.33,7.47,2.58,2.07,8.94,3.43,8.94,10.98},2},
{{0.03,0.06,0.1,0.09,0.12,0.18,0.14,0.16,0.06,0.08,0.07,0.05,0.12,0.17,0.14,0.16,0.08,0.09,0.09,0.06,0.06,0.1,0.14,0.12,0.07,0.1,0.06,0.14,0.12,0.11,0,6.55,-0.05,1100,3850,3150,7.49,2.25,1.97,8.77,3,8.77,10.89},2},
{{0.05,0.04,0.14,0.08,0.12,0.13,0.12,0.1,0.13,0.12,0.07,0.09,0.12,0.17,0.13,0.13,0.11,0.06,0.07,0.08,0.08,0.12,0.09,0.11,0.07,0.13,0.13,0.06,0.1,0.14,0,6.47,0.28,2350,1300,2125,7.6,2.46,2.61,9.06,3.31,9.06,11.15},2},
{{0.06,0.09,0.09,0.08,0.13,0.12,0.1,0.12,0.11,0.12,0.1,0.14,0.14,0.11,0.1,0.11,0.09,0.05,0.09,0.1,0.09,0.09,0.09,0.07,0.09,0.12,0.17,0.08,0.12,0.1,0,6.47,0.12,3950,1216.67,3625,7.45,2.84,2.2,9.01,3.67,9.01,10.9},2},
{{0.05,0.07,0.07,0.13,0.11,0.09,0.11,0.14,0.13,0.11,0.11,0.09,0.14,0.12,0.11,0.06,0.11,0.09,0.13,0.06,0.07,0.08,0.07,0.06,0.12,0.13,0.14,0.16,0.11,0.08,0,6.58,0.08,2050,1366.67,2733.33,7.74,2.81,1.95,9.19,3.5,9.19,11.05},2},
{{0.04,0.1,0.08,0.11,0.1,0.11,0.08,0.14,0.14,0.13,0.1,0.14,0.1,0.08,0.07,0.16,0.13,0.09,0.08,0.08,0.14,0.08,0.06,0.08,0.12,0.09,0.15,0.1,0.09,0.09,0,6.59,-0.27,1483.33,1487.5,2366.67,7.72,2.77,1.9,9.26,3.67,9.26,11.13},2},
{{0.04,0.09,0.1,0.11,0.1,0.12,0.12,0.12,0.1,0.13,0.13,0.1,0.1,0.1,0.12,0.13,0.08,0.08,0.08,0.09,0.1,0.09,0.08,0.13,0.08,0.11,0.1,0.1,0.1,0.12,0,6.48,0.2,4025,2350,3525,7.59,2.82,2.45,9.19,3.65,9.19,11.07},2},
{{0.04,0.1,0.07,0.1,0.15,0.1,0.08,0.12,0.13,0.14,0.12,0.12,0.11,0.07,0.15,0.11,0.07,0.09,0.09,0.09,0.08,0.12,0.08,0.09,0.08,0.12,0.12,0.1,0.11,0.11,0,6.63,0.12,2025,1307.14,4550,7.7,2.87,2.26,9.33,3.71,9.33,11.25},2},
{{0.05,0.11,0.06,0.11,0.12,0.1,0.08,0.15,0.1,0.14,0.12,0.07,0.15,0.12,0.1,0.14,0.09,0.07,0.11,0.06,0.09,0.08,0.08,0.08,0.09,0.15,0.09,0.15,0.1,0.1,0,6.33,0,790.91,1016.67,1366.67,7.73,2.58,1.99,9.36,3.44,9.36,11},2},
{{0.06,0.1,0.07,0.14,0.12,0.09,0.11,0.1,0.12,0.12,0.09,0.09,0.19,0.12,0.09,0.16,0.09,0.08,0.06,0.07,0.1,0.08,0.08,0.1,0.12,0.13,0.11,0.11,0.09,0.11,0,6.25,-0.09,1925,1025,3975,7.37,2.42,1.99,9.02,3.32,9.02,10.71},2},
{{0.05,0.12,0.1,0.1,0.08,0.12,0.12,0.1,0.1,0.13,0.11,0.09,0.12,0.09,0.11,0.1,0.11,0.13,0.09,0.07,0.12,0.09,0.08,0.08,0.08,0.09,0.08,0.19,0.12,0.11,0,6.66,0.08,2575,1230,1033.33,7.23,2.71,2.18,8.86,3.37,8.86,10.94},2},
{{0.03,0.11,0.11,0.1,0.1,0.11,0.09,0.11,0.12,0.14,0.13,0.11,0.11,0.11,0.15,0.11,0.08,0.07,0.06,0.09,0.1,0.07,0.08,0.11,0.09,0.14,0.14,0.08,0.12,0.08,0,6.22,0.01,944.44,1590,3450,7.46,2.61,2.09,9.09,3.43,9.09,10.79},2},
{{0.05,0.1,0.09,0.1,0.08,0.12,0.13,0.11,0.11,0.13,0.14,0.14,0.09,0.09,0.17,0.09,0.08,0.05,0.11,0.06,0.1,0.09,0.09,0.1,0.08,0.15,0.13,0.11,0.08,0.1,0,6.25,-0.21,900,2012.5,3500,7.65,2.67,1.78,9.31,3.51,9.31,10.84},2},
{{0.03,0.08,0.09,0.08,0.11,0.15,0.1,0.1,0.14,0.14,0.12,0.11,0.12,0.14,0.13,0.09,0.09,0.05,0.11,0.06,0.11,0.06,0.11,0.11,0.11,0.09,0.09,0.09,0.12,0.13,0,6.27,0.19,1025,3625,2600,7.95,2.63,2.41,9.44,3.47,9.44,11.18},2},
{{0.05,0.09,0.06,0.12,0.08,0.14,0.06,0.14,0.12,0.17,0.16,0.11,0.13,0.06,0.1,0.13,0.1,0.1,0.08,0.06,0.1,0.09,0.11,0.1,0.09,0.13,0.09,0.09,0.12,0.11,0,6.25,-0.02,2516.67,1512.5,1650,8.06,2.79,2.14,9.65,3.65,9.65,11.2},2},
{{0.08,0.09,0.05,0.1,0.11,0.09,0.11,0.11,0.13,0.13,0.1,0.14,0.14,0.11,0.1,0.06,0.12,0.12,0.06,0.08,0.1,0.1,0.09,0.1,0.07,0.13,0.1,0.12,0.09,0.12,0,6.42,-0.04,3550,894.44,2050,7.78,2.72,2.11,9.39,3.39,9.39,11.06},2},
{{0.1,0.07,0.06,0.1,0.09,0.1,0.12,0.08,0.14,0.17,0.15,0.14,0.1,0.09,0.13,0.09,0.07,0.06,0.12,0.07,0.14,0.1,0.07,0.07,0.07,0.07,0.17,0.13,0.12,0.09,0,6.25,-0.07,1975,1516.67,1316.67,8,2.85,2.17,9.66,3.61,9.66,11.18},2},
{{0.06,0.1,0.11,0.09,0.09,0.08,0.1,0.1,0.1,0.19,0.14,0.17,0.11,0.11,0.09,0.1,0.07,0.08,0.07,0.08,0.13,0.1,0.1,0.08,0.09,0.1,0.1,0.13,0.08,0.11,0,6.13,-0.07,736.36,875,4050,7.68,2.82,2.19,9.46,3.65,9.46,10.94},2},
{{0.02,0.07,0.07,0.07,0.09,0.11,0.12,0.07,0.09,0.09,0.08,0.07,0.1,0.12,0.13,0.02,0.12,0.08,0.05,0.04,0.04,0.08,0.07,0.08,0.09,0.08,0.08,0.1,0.11,0.06,0,4.81,-0.09,1100,1312.5,2116.67,5.96,1.8,1.33,9.18,3.3,9.18,8.32},2},
{{0,0.13,0.06,0.13,0.13,0.09,0.16,0.07,0.06,0.19,0,0.02,0.07,0.04,0.11,0.22,0.13,0.09,0.08,0.19,0.05,0.11,0.08,0.13,0.13,0.13,0.13,0.1,0.07,0.1,0,6.35,-0.94,775,410.87,4200,8.02,8.25,2.66,10.04,9.04,10.04,13.09},0},
{{0,0.1,0.12,0.15,0.11,0.08,0.11,0.09,0.12,0.12,0,0.01,0.11,0.07,0.11,0.17,0.12,0.14,0.12,0.12,0.07,0.04,0.09,0.12,0.11,0.18,0.14,0.1,0.08,0.09,0,5.41,-0.78,2033.33,500,1616.67,8.14,7.58,2.73,10.29,8.54,10.29,12.73},0},
{{0,0.2,0.12,0.09,0.14,0.09,0.08,0.13,0.09,0.08,0.03,0.12,0.12,0.11,0.1,0.09,0.11,0.13,0.1,0.12,0.07,0.06,0.13,0.09,0.1,0.13,0.16,0.09,0.11,0.08,0,2.86,-0.84,3375,695.45,2300,9.24,7.62,2.69,11.51,8.74,11.51,13.4},0},
{{0,0.23,0.09,0.06,0.12,0.09,0.07,0.11,0.15,0.1,0.1,0.11,0.08,0.1,0.09,0.12,0.1,0.17,0.1,0.06,0.04,0.07,0.07,0.11,0.11,0.14,0.18,0.07,0.1,0.13,0,1.61,-0.32,4475,1850,1525,8.96,6.96,2.82,11.4,8.08,11.4,12.72},0},
{{0,0.24,0.09,0.08,0.09,0.11,0.09,0.12,0.1,0.1,0.08,0.1,0.13,0.09,0.11,0.13,0.08,0.1,0.13,0.08,0.03,0.09,0.08,0.14,0.1,0.14,0.13,0.09,0.1,0.11,0,1.46,-0.43,3075,1391.67,2175,9.16,7.17,2.87,11.58,8.52,11.58,13.05},0},
{{0,0.26,0.1,0.11,0.07,0.07,0.11,0.08,0.11,0.12,0.1,0.14,0.11,0.09,0.09,0.08,0.12,0.11,0.08,0.11,0.09,0.12,0.09,0.11,0.09,0.11,0.09,0.06,0.09,0.17,0,1.43,-0.58,2750,922.22,925,9.79,7.72,3.61,12.06,9.02,12.06,14.22},0},
{{0,0.21,0.1,0.11,0.1,0.1,0.08,0.09,0.12,0.1,0.07,0.12,0.12,0.08,0.11,0.08,0.13,0.11,0.13,0.07,0.12,0.09,0.1,0.11,0.11,0.08,0.12,0.06,0.11,0.12,0,2.05,-1.05,937.5,927.78,3033.33,9.23,7.33,3.31,11.51,8.57,11.51,13.51},0},
{{0,0.2,0.12,0.11,0.1,0.1,0.11,0.09,0.1,0.1,0.08,0.13,0.1,0.13,0.08,0.08,0.14,0.09,0.1,0.11,0.08,0.09,0.11,0.15,0.11,0.11,0.07,0.09,0.11,0.09,0,1.89,-1.16,3000,1025,3050,9.14,7.53,2.87,11.38,8.8,11.38,13.37},0},
{{0,0.25,0.06,0.11,0.12,0.03,0.1,0.09,0.14,0.1,0.11,0.1,0.11,0.09,0.12,0.07,0.1,0.08,0.15,0.09,0.07,0.1,0.09,0.11,0.13,0.08,0.13,0.1,0.13,0.09,0,1.54,-0.92,2750,825,2800,9.35,7.88,2.9,11.71,9.18,11.71,13.65},0},
{{0,0.24,0.1,0.07,0.09,0.11,0.07,0.11,0.13,0.1,0.09,0.09,0.1,0.1,0.14,0.1,0.09,0.14,0.12,0.06,0.05,0.08,0.09,0.1,0.12,0.12,0.16,0.09,0.13,0.07,0,1.48,-0.77,3150,1208.33,2362.5,9.24,7.21,2.62,11.65,8.5,11.65,13.03},0},
{{0,0.23,0.11,0.07,0.12,0.09,0.08,0.09,0.14,0.09,0.09,0.08,0.15,0.12,0.13,0.08,0.14,0.09,0.08,0.07,0.05,0.1,0.12,0.11,0.13,0.12,0.12,0.09,0.08,0.11,0,0.66,-0.81,1783.33,1541.67,3425,9.32,6.7,2.9,11.68,8.23,11.68,13.09},0},
{{0,0.22,0.11,0.08,0.09,0.12,0.12,0.1,0.12,0.08,0.09,0.13,0.1,0.14,0.1,0.08,0.09,0.11,0.07,0.1,0.08,0.08,0.07,0.13,0.14,0.1,0.1,0.11,0.1,0.12,0,1.04,-0.67,1500,1137.5,2250,8.97,7.39,3.09,11.42,8.76,11.42,13.22},0},
{{0,0.21,0.09,0.1,0.11,0.12,0.1,0.1,0.1,0.1,0.11,0.09,0.08,0.13,0.11,0.13,0.09,0.12,0.07,0.09,0.04,0.08,0.07,0.15,0.13,0.16,0.09,0.13,0.07,0.11,0,0.84,-0.61,1266.67,1283.33,2200,9.03,6.7,2.72,11.33,8.19,11.33,12.68},0},
{{0,0.18,0.09,0.15,0.12,0.13,0.07,0.11,0.08,0.08,0.07,0.09,0.12,0.12,0.09,0.13,0.11,0.1,0.11,0.07,0.06,0.13,0.11,0.14,0.12,0.1,0.07,0.14,0.09,0.06,0,1.69,-1.31,1800,972.22,1562.5,8.86,7.07,2.66,11.04,8.43,11.04,12.84},0},
{{0,0.23,0.09,0.13,0.1,0.09,0.08,0.13,0.11,0.07,0.07,0.11,0.11,0.14,0.09,0.13,0.08,0.13,0.1,0.08,0.09,0.12,0.12,0.12,0.11,0.08,0.09,0.1,0.11,0.08,0,1.67,-1.21,2225,1000,1100,9.09,7.3,3.07,11.51,8.51,11.51,13.34},0},
{{0,0.21,0.13,0.09,0.13,0.11,0.09,0.08,0.09,0.09,0.12,0.1,0.1,0.1,0.08,0.13,0.11,0.09,0.12,0.07,0.08,0.14,0.13,0.06,0.13,0.09,0.08,0.11,0.14,0.07,0,1.16,-1.2,3050,844.44,1675,9.51,7.28,2.98,11.7,8.75,11.7,13.56},0},
{{0,0.19,0.13,0.09,0.1,0.11,0.09,0.09,0.1,0.12,0.15,0.07,0.13,0.09,0.11,0.07,0.11,0.11,0.1,0.08,0.09,0.11,0.11,0.07,0.08,0.1,0.1,0.11,0.12,0.13,0,1.08,-0.61,1266.67,1011.11,1530,9.14,7.79,3.41,11.33,9.2,11.33,13.59},0},
{{0,0.2,0.11,0.09,0.1,0.1,0.12,0.1,0.07,0.13,0.17,0.1,0.1,0.08,0.1,0.06,0.08,0.1,0.12,0.12,0.18,0.14,0.05,0.09,0.06,0.08,0.05,0.1,0.14,0.13,0,1.49,-1.15,775,1207.14,2037.5,9.07,8.51,4.21,11.32,9.82,11.32,14.46},0},
{{0,0.18,0.12,0.12,0.09,0.11,0.11,0.09,0.11,0.09,0.05,0.14,0.08,0.11,0.11,0.11,0.1,0.11,0.12,0.09,0.1,0.11,0.15,0.08,0.13,0.1,0.09,0.08,0.09,0.11,0,2.24,-1.22,2783.33,695.45,2283.33,8.96,7.5,3.16,11.26,8.76,11.26,13.34},0},
{{0,0.18,0.15,0.11,0.07,0.15,0.11,0.12,0.08,0.05,0.07,0.15,0.1,0.09,0.08,0.14,0.09,0.12,0.1,0.09,0.06,0.14,0.14,0.13,0.07,0.14,0.08,0.07,0.09,0.1,0,1.67,-1.19,1900,950,2150,9.08,7.37,2.96,11.45,8.73,11.45,13.32},0},
{{0,0.22,0.09,0.09,0.08,0.14,0.13,0.11,0.08,0.09,0.07,0.14,0.12,0.1,0.1,0.09,0.12,0.07,0.1,0.09,0.11,0.13,0.11,0.15,0.08,0.09,0.09,0.08,0.1,0.08,0,1.55,-1.43,2650,800,2200,8.79,7.59,3.13,11.29,8.97,11.29,13.41},0},
{{0,0.21,0.09,0.09,0.1,0.09,0.12,0.1,0.13,0.09,0.14,0.13,0.08,0.12,0.1,0.06,0.09,0.09,0.08,0.11,0.16,0.1,0.15,0.1,0.09,0.04,0.07,0.07,0.12,0.12,0,1.22,-1.38,2433.33,977.78,1850,8.79,8.13,3.72,11.17,9.54,11.17,13.93},0},
{{0,0.19,0.08,0.13,0.12,0.1,0.1,0.09,0.11,0.1,0.11,0.11,0.09,0.11,0.11,0.08,0.09,0.08,0.13,0.08,0.17,0.11,0.11,0.07,0.05,0.1,0.08,0.12,0.11,0.12,0,2.02,-1.27,3325,800,3183.33,8.99,8.14,3.86,11.17,9.4,11.17,14},0},
{{0,0.21,0.07,0.07,0.11,0.11,0.14,0.11,0.08,0.13,0.14,0.11,0.1,0.07,0.13,0.09,0.08,0.12,0.08,0.1,0.18,0.13,0.07,0.09,0.05,0.09,0.06,0.14,0.11,0.09,0,1.48,-1.55,4050,977.78,2475,8.24,8.12,3.88,10.69,9.52,10.69,13.68},0},
{{0,0.22,0.09,0.1,0.08,0.09,0.1,0.12,0.11,0.1,0.1,0.11,0.11,0.11,0.07,0.1,0.13,0.09,0.09,0.08,0.11,0.1,0.13,0.1,0.09,0.09,0.14,0.09,0.09,0.08,0,1.55,-1.29,1760,880,2925,8.84,7.39,3,11.31,8.8,11.31,13.37},0},
{{0,0.17,0.11,0.11,0.09,0.09,0.15,0.07,0.09,0.15,0.2,0.07,0.1,0.07,0.1,0.06,0.08,0.09,0.13,0.1,0.24,0.07,0.07,0.06,0.09,0.07,0.07,0.13,0.1,0.12,0,1.07,-1.71,2666.67,795.83,2375,8.55,8.78,4.41,10.84,10.17,10.84,14.61},0},
{{0,0.2,0.11,0.09,0.09,0.11,0.1,0.09,0.14,0.09,0.18,0.07,0.09,0.11,0.11,0.09,0.08,0.08,0.1,0.1,0.18,0.1,0.06,0.08,0.12,0.07,0.09,0.16,0.06,0.11,0,0.95,-1.43,1525,1000,1525,8.85,8,3.65,11.21,9.49,11.21,13.75},0},
{{0,0.22,0.08,0.13,0.07,0.09,0.1,0.11,0.09,0.13,0.19,0.07,0.08,0.09,0.1,0.09,0.1,0.09,0.1,0.1,0.13,0.08,0.1,0.08,0.09,0.07,0.11,0.16,0.09,0.12,0,0.88,-0.8,1550,836.36,3800,9.11,8.04,3.55,11.47,9.64,11.47,14},0},
{{0,0.19,0.09,0.1,0.12,0.12,0.09,0.13,0.07,0.1,0.08,0.1,0.15,0.09,0.12,0.12,0.09,0.06,0.12,0.07,0.05,0.11,0.09,0.13,0.14,0.13,0.09,0.12,0.08,0.08,0,1.3,-1.06,2550,883.33,2550,8.61,7.29,2.59,10.94,8.77,10.94,12.9},0},
{{0,0.21,0.1,0.1,0.1,0.09,0.12,0.14,0.08,0.09,0.09,0.14,0.12,0.09,0.09,0.1,0.12,0.09,0.08,0.09,0.13,0.14,0.12,0.08,0.06,0.08,0.11,0.11,0.1,0.09,0,1.49,-1.21,2183.33,730.77,2000,8.77,7.65,3.51,11.24,9.07,11.24,13.47},0},
{{0,0.17,0.13,0.12,0.09,0.11,0.09,0.08,0.12,0.11,0.2,0.09,0.07,0.1,0.07,0.11,0.09,0.09,0.09,0.1,0.18,0.13,0.08,0.08,0.09,0.06,0.09,0.1,0.13,0.08,0,0.77,-1.63,1666.67,845.45,3075,8.8,8.02,3.7,10.99,9.61,10.99,14.05},0},
{{0,0.11,0.07,0.07,0.07,0.09,0.04,0.04,0.05,0.04,0.09,0.02,0.03,0.07,0.09,0.1,0.06,0.02,0.04,0.04,0.03,0.04,0.05,0.03,0.06,0.05,0.09,0.07,0.09,0.05,0,-0.01,-0.04,983.33,983.33,2275,5.11,3.39,1.7,11.49,8.33,11.49,7.1},0},
{{0.09,0.11,0.12,0.11,0.14,0.17,0.12,0.07,0.04,0.05,0.09,0.09,0.1,0.12,0.2,0.1,0.08,0.08,0.09,0.07,0.1,0.13,0.1,0.14,0.13,0.1,0.08,0.08,0.08,0.09,0,8.78,-0.35,2525,818.18,1125,4.41,3.91,1.87,4.91,4.89,4.91,10.71},2},
{{0.12,0.12,0.08,0.13,0.13,0.09,0.1,0.05,0.09,0.09,0.12,0.11,0.1,0.11,0.1,0.09,0.11,0.08,0.13,0.08,0.11,0.07,0.11,0.14,0.13,0.11,0.1,0.05,0.12,0.08,0,8.83,-0.21,2725,866.67,2225,4.63,4.7,1.85,5.34,5.51,5.34,11.01},2},
{{0.03,0.06,0.08,0.11,0.11,0.09,0.11,0.13,0.16,0.13,0.07,0.14,0.1,0.11,0.1,0.08,0.12,0.11,0.12,0.08,0.1,0.13,0.17,0.12,0.12,0.08,0.07,0.06,0.07,0.11,0,9.34,-0.16,1700,887.5,2075,3.41,4.53,2.27,3.94,5.22,3.94,10.87},2},
{{0.06,0.09,0.1,0.11,0.11,0.11,0.1,0.08,0.1,0.16,0.09,0.12,0.1,0.13,0.03,0.1,0.13,0.17,0.06,0.11,0.06,0.1,0.12,0.1,0.07,0.07,0.11,0.15,0.15,0.1,0,9.43,0.21,1550,930,2650,3.78,4.58,2.03,4.34,5.3,4.34,11.01},2},
{{0.03,0.08,0.08,0.08,0.12,0.09,0.11,0.09,0.13,0.22,0.03,0.11,0.12,0.15,0.1,0.12,0.14,0.12,0.09,0.06,0.06,0.05,0.09,0.14,0.1,0.08,0.12,0.17,0.11,0.1,0,9.44,0.23,4025,718.75,2683.33,3.23,3.81,1.8,3.86,4.53,3.86,10.74},2},
{{0.02,0.09,0.11,0.08,0.15,0.11,0.07,0.1,0.11,0.17,0.06,0.12,0.15,0.08,0.09,0.13,0.09,0.08,0.09,0.14,0.04,0.09,0.1,0.08,0.12,0.1,0.08,0.17,0.12,0.11,0,9.59,0.33,1637.5,711.54,2175,3.71,4.55,1.99,4.21,5.33,4.21,11.12},2},
{{0.09,0.06,0.11,0.11,0.07,0.08,0.08,0.11,0.15,0.16,0.08,0.14,0.1,0.09,0.1,0.11,0.09,0.09,0.1,0.12,0.06,0.12,0.09,0.11,0.1,0.1,0.11,0.14,0.1,0.1,0,9.34,0.16,2875,955.56,3725,3.84,4.61,2.16,4.65,5.46,4.65,11.08},2},
{{0.04,0.07,0.11,0.08,0.13,0.08,0.1,0.11,0.16,0.15,0.05,0.12,0.12,0.12,0.11,0.12,0.09,0.11,0.1,0.1,0.06,0.08,0.08,0.12,0.1,0.1,0.14,0.12,0.13,0.1,0,9.4,0.29,2675,1250,2150,3.42,4.23,2.03,4.02,5.02,4.02,10.89},2},
{{0.06,0.07,0.12,0.11,0.1,0.09,0.13,0.11,0.12,0.12,0.09,0.14,0.08,0.08,0.13,0.07,0.1,0.09,0.11,0.12,0.06,0.08,0.15,0.1,0.12,0.12,0.09,0.09,0.11,0.1,0,9.48,0.15,3050,685.71,2050,3.82,4.78,2.13,4.3,5.59,4.3,11.11},2},
{{0.05,0.06,0.14,0.09,0.09,0.12,0.13,0.12,0.12,0.11,0.04,0.14,0.13,0.11,0.1,0.1,0.08,0.11,0.14,0.09,0.09,0.09,0.1,0.06,0.12,0.09,0.13,0.14,0.11,0.09,0,9.48,0.04,3175,1011.11,3725,3.63,4.49,1.92,4.18,5.23,4.18,10.96},2},
{{0.07,0.11,0.08,0.13,0.08,0.08,0.11,0.13,0.12,0.12,0.08,0.12,0.09,0.11,0.11,0.09,0.1,0.12,0.14,0.07,0.13,0.11,0.07,0.08,0.09,0.13,0.1,0.12,0.1,0.09,0,9.41,0.06,1025,1358.33,1366.67,3.85,4.52,2.22,4.48,5.27,4.48,11.1},2},
{{0.11,0.11,0.11,0.08,0.09,0.08,0.09,0.13,0.12,0.11,0.1,0.13,0.12,0.07,0.07,0.08,0.12,0.15,0.1,0.1,0.12,0.1,0.09,0.11,0.09,0.08,0.12,0.12,0.1,0.1,0,9.25,-0.06,2650,766.67,2033.33,4.16,4.86,2.06,4.85,5.62,4.85,11.12},2},
{{0.07,0.13,0.09,0.13,0.09,0.11,0.09,0.1,0.11,0.1,0.13,0.09,0.1,0.09,0.1,0.09,0.07,0.12,0.14,0.1,0.12,0.07,0.09,0.09,0.14,0.09,0.14,0.1,0.09,0.09,0,9.31,-0.1,2100,1075,2600,4.07,4.96,1.96,4.71,5.75,4.71,11.2},2},
{{0.06,0.1,0.11,0.12,0.1,0.12,0.08,0.14,0.11,0.09,0.09,0.11,0.1,0.12,0.1,0.1,0.11,0.13,0.11,0.06,0.09,0.07,0.1,0.07,0.11,0.11,0.11,0.12,0.16,0.09,0,9.02,0.15,2733.33,940,1016.67,3.91,4.36,2.02,4.51,5.1,4.51,10.75},2},
{{0.07,0.08,0.13,0.14,0.07,0.11,0.1,0.11,0.13,0.08,0.08,0.11,0.09,0.13,0.12,0.1,0.11,0.12,0.08,0.09,0.05,0.06,0.11,0.15,0.11,0.1,0.15,0.13,0.07,0.09,0,9.1,0.09,3175,1408.33,2675,3.93,4.22,1.83,4.53,5.02,4.53,10.77},2},
{{0.08,0.11,0.13,0.09,0.08,0.12,0.11,0.15,0.05,0.1,0.07,0.15,0.09,0.07,0.09,0.14,0.09,0.12,0.11,0.09,0.04,0.12,0.09,0.05,0.13,0.09,0.18,0.12,0.12,0.09,0,9.4,0.19,3250,1416.67,1550,4.16,4.42,1.8,4.73,5.2,4.73,11.05},2},
{{0.07,0.03,0.09,0.11,0.14,0.14,0.19,0.11,0.07,0.08,0.08,0.1,0.11,0.14,0.15,0.08,0.09,0.1,0.09,0.08,0.05,0.08,0.13,0.12,0.1,0.12,0.12,0.1,0.1,0.11,0,8.98,0.19,2850,1433.33,1275,3.7,4.15,2.04,4.23,4.98,4.23,10.56},2},
{{0.15,0.15,0.11,0.1,0.08,0.05,0.04,0.08,0.17,0.1,0.11,0.08,0.09,0.12,0.13,0.09,0.09,0.09,0.1,0.12,0.18,0.11,0.14,0.11,0.06,0.09,0.06,0.09,0.08,0.11,0,9.2,-0.11,2000,750,983.33,4.46,4.77,2.6,5.25,5.73,5.25,11.67},2},
{{0.09,0.14,0.11,0.08,0.09,0.06,0.11,0.1,0.11,0.13,0.15,0.08,0.08,0.14,0.06,0.1,0.11,0.07,0.11,0.13,0.1,0.1,0.12,0.08,0.1,0.1,0.12,0.09,0.12,0.09,0,9.22,0.1,2450,737.5,1266.67,4.22,4.99,2.24,4.93,5.82,4.93,11.25},2},
{{0.1,0.13,0.09,0.08,0.05,0.12,0.12,0.13,0.13,0.09,0.12,0.1,0.12,0.07,0.09,0.11,0.1,0.09,0.1,0.11,0.11,0.11,0.1,0.13,0.11,0.09,0.1,0.09,0.08,0.1,0,9.05,-0.15,2500,825,1487.5,4.02,4.93,2.14,4.76,5.76,4.76,10.92},2},
{{0.11,0.14,0.07,0.12,0.09,0.08,0.1,0.09,0.12,0.09,0.14,0.08,0.08,0.1,0.11,0.09,0.12,0.09,0.09,0.12,0.11,0.12,0.08,0.11,0.13,0.1,0.07,0.11,0.1,0.11,0,9.26,0.26,3000,813.64,3475,4.35,4.72,2.56,5.04,5.63,5.04,11.42},2},
{{0.19,0.08,0.09,0.1,0.09,0.1,0.17,0.07,0.06,0.07,0.14,0.06,0.09,0.06,0.11,0.11,0.18,0.08,0.07,0.12,0.19,0.11,0.07,0.1,0.14,0.09,0.08,0.06,0.08,0.1,0,9.25,-0.22,1950,885,2616.67,4.91,4.67,2.46,5.77,5.64,5.77,11.75},2},
{{0.16,0.09,0.11,0.06,0.1,0.13,0.1,0.1,0.08,0.09,0.15,0.07,0.1,0.09,0.09,0.11,0.08,0.09,0.08,0.15,0.15,0.1,0.12,0.1,0.09,0.07,0.1,0.09,0.07,0.14,0,9.15,0.09,2333.33,1075,4000,4.58,5.18,2.67,5.4,6.13,5.4,11.64},2},
{{0.19,0.1,0.13,0.09,0.08,0.12,0.13,0.07,0.06,0.06,0.13,0.07,0.14,0.05,0.1,0.14,0.1,0.1,0.09,0.1,0.1,0.14,0.12,0.1,0.14,0.1,0.07,0.09,0.09,0.08,0,9.15,-0.22,1525,893.75,2350,4.84,4.63,2.1,5.48,5.48,5.48,11.43},2},
{{0.15,0.09,0.1,0.15,0.09,0.11,0.12,0.09,0.06,0.07,0.14,0.06,0.12,0.09,0.09,0.13,0.11,0.1,0.09,0.09,0.06,0.14,0.11,0.1,0.17,0.1,0.1,0.08,0.07,0.1,0,8.99,0.11,3575,1012.5,3050,4.63,4.59,2.25,5.29,5.42,5.29,11.16},2},
{{0.14,0.1,0.09,0.14,0.07,0.15,0.11,0.12,0.03,0.07,0.13,0.07,0.11,0.07,0.09,0.16,0.11,0.08,0.11,0.1,0.1,0.13,0.09,0.08,0.09,0.07,0.14,0.09,0.13,0.11,0,9.19,0.14,3325,825,1275,4.62,4.52,2.24,5.26,5.45,5.26,11.31},2},
{{0.14,0.08,0.11,0.11,0.14,0.15,0.08,0.09,0.05,0.06,0.12,0.09,0.13,0.08,0.13,0.07,0.07,0.11,0.11,0.11,0.09,0.09,0.1,0.1,0.07,0.12,0.11,0.13,0.09,0.11,0,9.19,0.41,3550,1558.33,2366.67,4.7,4.82,2.61,5.31,5.65,5.31,11.47},2},
{{0.18,0.2,0.08,0.06,0.04,0.08,0.1,0.11,0.1,0.08,0.15,0.07,0.07,0.13,0.07,0.06,0.12,0.11,0.09,0.16,0.27,0.09,0.05,0.08,0.09,0.06,0.08,0.1,0.1,0.1,0,9.51,-0.34,1450,641.67,2900,5.21,5.31,2.82,6.33,6.22,6.33,12.55},2},
{{0.2,0.11,0.09,0.05,0.07,0.04,0.07,0.05,0.06,0.06,0.09,0.11,0.07,0.11,0.07,0.06,0.07,0.04,0.08,0.08,0.1,0.07,0.05,0.06,0.06,0.04,0.07,0.07,0.11,0.17,0,6.58,0.75,2025,455.56,1500,4.22,3.89,2.41,6.34,6.19,6.34,9.01},2},
{{0,0.13,0.06,0.13,0.13,0.09,0.16,0.07,0.06,0.19,0,0.02,0.07,0.04,0.11,0.22,0.13,0.09,0.08,0.19,0.05,0.11,0.08,0.13,0.13,0.13,0.13,0.1,0.07,0.1,0,6.35,-0.94,775,410.87,4200,8.02,8.25,2.66,10.04,9.04,10.04,13.09},0},
{{0,0.1,0.12,0.15,0.11,0.08,0.11,0.09,0.12,0.12,0,0.01,0.11,0.07,0.11,0.17,0.12,0.14,0.12,0.12,0.07,0.04,0.09,0.12,0.11,0.18,0.14,0.1,0.08,0.09,0,5.41,-0.78,2033.33,500,1616.67,8.14,7.58,2.73,10.29,8.54,10.29,12.73},0},
{{0,0.2,0.12,0.09,0.14,0.09,0.08,0.13,0.09,0.08,0.03,0.12,0.12,0.11,0.1,0.09,0.11,0.13,0.1,0.12,0.07,0.06,0.13,0.09,0.1,0.13,0.16,0.09,0.11,0.08,0,2.86,-0.84,3375,695.45,2300,9.24,7.62,2.69,11.51,8.74,11.51,13.4},0},
{{0,0.23,0.09,0.06,0.12,0.09,0.07,0.11,0.15,0.1,0.1,0.11,0.08,0.1,0.09,0.12,0.1,0.17,0.1,0.06,0.04,0.07,0.07,0.11,0.11,0.14,0.18,0.07,0.1,0.13,0,1.61,-0.32,4475,1850,1525,8.96,6.96,2.82,11.4,8.08,11.4,12.72},0},
{{0,0.24,0.09,0.08,0.09,0.11,0.09,0.12,0.1,0.1,0.08,0.1,0.13,0.09,0.11,0.13,0.08,0.1,0.13,0.08,0.03,0.09,0.08,0.14,0.1,0.14,0.13,0.09,0.1,0.11,0,1.46,-0.43,3075,1391.67,2175,9.16,7.17,2.87,11.58,8.52,11.58,13.05},0},
{{0,0.26,0.1,0.11,0.07,0.07,0.11,0.08,0.11,0.12,0.1,0.14,0.11,0.09,0.09,0.08,0.12,0.11,0.08,0.11,0.09,0.12,0.09,0.11,0.09,0.11,0.09,0.06,0.09,0.17,0,1.43,-0.58,2750,922.22,925,9.79,7.72,3.61,12.06,9.02,12.06,14.22},0},
{{0,0.21,0.1,0.11,0.1,0.1,0.08,0.09,0.12,0.1,0.07,0.12,0.12,0.08,0.11,0.08,0.13,0.11,0.13,0.07,0.12,0.09,0.1,0.11,0.11,0.08,0.12,0.06,0.11,0.12,0,2.05,-1.05,937.5,927.78,3033.33,9.23,7.33,3.31,11.51,8.57,11.51,13.51},0},
{{0,0.2,0.12,0.11,0.1,0.1,0.11,0.09,0.1,0.1,0.08,0.13,0.1,0.13,0.08,0.08,0.14,0.09,0.1,0.11,0.08,0.09,0.11,0.15,0.11,0.11,0.07,0.09,0.11,0.09,0,1.89,-1.16,3000,1025,3050,9.14,7.53,2.87,11.38,8.8,11.38,13.37},0},
{{0,0.25,0.06,0.11,0.12,0.03,0.1,0.09,0.14,0.1,0.11,0.1,0.11,0.09,0.12,0.07,0.1,0.08,0.15,0.09,0.07,0.1,0.09,0.11,0.13,0.08,0.13,0.1,0.13,0.09,0,1.54,-0.92,2750,825,2800,9.35,7.88,2.9,11.71,9.18,11.71,13.65},0},
{{0,0.24,0.1,0.07,0.09,0.11,0.07,0.11,0.13,0.1,0.09,0.09,0.1,0.1,0.14,0.1,0.09,0.14,0.12,0.06,0.05,0.08,0.09,0.1,0.12,0.12,0.16,0.09,0.13,0.07,0,1.48,-0.77,3150,1208.33,2362.5,9.24,7.21,2.62,11.65,8.5,11.65,13.03},0},
{{0,0.23,0.11,0.07,0.12,0.09,0.08,0.09,0.14,0.09,0.09,0.08,0.15,0.12,0.13,0.08,0.14,0.09,0.08,0.07,0.05,0.1,0.12,0.11,0.13,0.12,0.12,0.09,0.08,0.11,0,0.66,-0.81,1783.33,1541.67,3425,9.32,6.7,2.9,11.68,8.23,11.68,13.09},0},
{{0,0.22,0.11,0.08,0.09,0.12,0.12,0.1,0.12,0.08,0.09,0.13,0.1,0.14,0.1,0.08,0.09,0.11,0.07,0.1,0.08,0.08,0.07,0.13,0.14,0.1,0.1,0.11,0.1,0.12,0,1.04,-0.67,1500,1137.5,2250,8.97,7.39,3.09,11.42,8.76,11.42,13.22},0},
{{0,0.21,0.09,0.1,0.11,0.12,0.1,0.1,0.1,0.1,0.11,0.09,0.08,0.13,0.11,0.13,0.09,0.12,0.07,0.09,0.04,0.08,0.07,0.15,0.13,0.16,0.09,0.13,0.07,0.11,0,0.84,-0.61,1266.67,1283.33,2200,9.03,6.7,2.72,11.33,8.19,11.33,12.68},0},
{{0,0.18,0.09,0.15,0.12,0.13,0.07,0.11,0.08,0.08,0.07,0.09,0.12,0.12,0.09,0.13,0.11,0.1,0.11,0.07,0.06,0.13,0.11,0.14,0.12,0.1,0.07,0.14,0.09,0.06,0,1.69,-1.31,1800,972.22,1562.5,8.86,7.07,2.66,11.04,8.43,11.04,12.84},0},
{{0,0.23,0.09,0.13,0.1,0.09,0.08,0.13,0.11,0.07,0.07,0.11,0.11,0.14,0.09,0.13,0.08,0.13,0.1,0.08,0.09,0.12,0.12,0.12,0.11,0.08,0.09,0.1,0.11,0.08,0,1.67,-1.21,2225,1000,1100,9.09,7.3,3.07,11.51,8.51,11.51,13.34},0},
{{0,0.21,0.13,0.09,0.13,0.11,0.09,0.08,0.09,0.09,0.12,0.1,0.1,0.1,0.08,0.13,0.11,0.09,0.12,0.07,0.08,0.14,0.13,0.06,0.13,0.09,0.08,0.11,0.14,0.07,0,1.16,-1.2,3050,844.44,1675,9.51,7.28,2.98,11.7,8.75,11.7,13.56},0},
{{0,0.19,0.13,0.09,0.1,0.11,0.09,0.09,0.1,0.12,0.15,0.07,0.13,0.09,0.11,0.07,0.11,0.11,0.1,0.08,0.09,0.11,0.11,0.07,0.08,0.1,0.1,0.11,0.12,0.13,0,1.08,-0.61,1266.67,1011.11,1530,9.14,7.79,3.41,11.33,9.2,11.33,13.59},0},
{{0,0.2,0.11,0.09,0.1,0.1,0.12,0.1,0.07,0.13,0.17,0.1,0.1,0.08,0.1,0.06,0.08,0.1,0.12,0.12,0.18,0.14,0.05,0.09,0.06,0.08,0.05,0.1,0.14,0.13,0,1.49,-1.15,775,1207.14,2037.5,9.07,8.51,4.21,11.32,9.82,11.32,14.46},0},
{{0,0.18,0.12,0.12,0.09,0.11,0.11,0.09,0.11,0.09,0.05,0.14,0.08,0.11,0.11,0.11,0.1,0.11,0.12,0.09,0.1,0.11,0.15,0.08,0.13,0.1,0.09,0.08,0.09,0.11,0,2.24,-1.22,2783.33,695.45,2283.33,8.96,7.5,3.16,11.26,8.76,11.26,13.34},0},
{{0,0.18,0.15,0.11,0.07,0.15,0.11,0.12,0.08,0.05,0.07,0.15,0.1,0.09,0.08,0.14,0.09,0.12,0.1,0.09,0.06,0.14,0.14,0.13,0.07,0.14,0.08,0.07,0.09,0.1,0,1.67,-1.19,1900,950,2150,9.08,7.37,2.96,11.45,8.73,11.45,13.32},0},
{{0,0.22,0.09,0.09,0.08,0.14,0.13,0.11,0.08,0.09,0.07,0.14,0.12,0.1,0.1,0.09,0.12,0.07,0.1,0.09,0.11,0.13,0.11,0.15,0.08,0.09,0.09,0.08,0.1,0.08,0,1.55,-1.43,2650,800,2200,8.79,7.59,3.13,11.29,8.97,11.29,13.41},0},
{{0,0.21,0.09,0.09,0.1,0.09,0.12,0.1,0.13,0.09,0.14,0.13,0.08,0.12,0.1,0.06,0.09,0.09,0.08,0.11,0.16,0.1,0.15,0.1,0.09,0.04,0.07,0.07,0.12,0.12,0,1.22,-1.38,2433.33,977.78,1850,8.79,8.13,3.72,11.17,9.54,11.17,13.93},0},
{{0,0.19,0.08,0.13,0.12,0.1,0.1,0.09,0.11,0.1,0.11,0.11,0.09,0.11,0.11,0.08,0.09,0.08,0.13,0.08,0.17,0.11,0.11,0.07,0.05,0.1,0.08,0.12,0.11,0.12,0,2.02,-1.27,3325,800,3183.33,8.99,8.14,3.86,11.17,9.4,11.17,14},0},
{{0,0.21,0.07,0.07,0.11,0.11,0.14,0.11,0.08,0.13,0.14,0.11,0.1,0.07,0.13,0.09,0.08,0.12,0.08,0.1,0.18,0.13,0.07,0.09,0.05,0.09,0.06,0.14,0.11,0.09,0,1.48,-1.55,4050,977.78,2475,8.24,8.12,3.88,10.69,9.52,10.69,13.68},0},
{{0,0.22,0.09,0.1,0.08,0.09,0.1,0.12,0.11,0.1,0.1,0.11,0.11,0.11,0.07,0.1,0.13,0.09,0.09,0.08,0.11,0.1,0.13,0.1,0.09,0.09,0.14,0.09,0.09,0.08,0,1.55,-1.29,1760,880,2925,8.84,7.39,3,11.31,8.8,11.31,13.37},0},
{{0,0.17,0.11,0.11,0.09,0.09,0.15,0.07,0.09,0.15,0.2,0.07,0.1,0.07,0.1,0.06,0.08,0.09,0.13,0.1,0.24,0.07,0.07,0.06,0.09,0.07,0.07,0.13,0.1,0.12,0,1.07,-1.71,2666.67,795.83,2375,8.55,8.78,4.41,10.84,10.17,10.84,14.61},0},
{{0,0.2,0.11,0.09,0.09,0.11,0.1,0.09,0.14,0.09,0.18,0.07,0.09,0.11,0.11,0.09,0.08,0.08,0.1,0.1,0.18,0.1,0.06,0.08,0.12,0.07,0.09,0.16,0.06,0.11,0,0.95,-1.43,1525,1000,1525,8.85,8,3.65,11.21,9.49,11.21,13.75},0},
{{0,0.22,0.08,0.13,0.07,0.09,0.1,0.11,0.09,0.13,0.19,0.07,0.08,0.09,0.1,0.09,0.1,0.09,0.1,0.1,0.13,0.08,0.1,0.08,0.09,0.07,0.11,0.16,0.09,0.12,0,0.88,-0.8,1550,836.36,3800,9.11,8.04,3.55,11.47,9.64,11.47,14},0},
{{0,0.19,0.09,0.1,0.12,0.12,0.09,0.13,0.07,0.1,0.08,0.1,0.15,0.09,0.12,0.12,0.09,0.06,0.12,0.07,0.05,0.11,0.09,0.13,0.14,0.13,0.09,0.12,0.08,0.08,0,1.3,-1.06,2550,883.33,2550,8.61,7.29,2.59,10.94,8.77,10.94,12.9},0},
{{0,0.21,0.1,0.1,0.1,0.09,0.12,0.14,0.08,0.09,0.09,0.14,0.12,0.09,0.09,0.1,0.12,0.09,0.08,0.09,0.13,0.14,0.12,0.08,0.06,0.08,0.11,0.11,0.1,0.09,0,1.49,-1.21,2183.33,730.77,2000,8.77,7.65,3.51,11.24,9.07,11.24,13.47},0},
{{0,0.17,0.13,0.12,0.09,0.11,0.09,0.08,0.12,0.11,0.2,0.09,0.07,0.1,0.07,0.11,0.09,0.09,0.09,0.1,0.18,0.13,0.08,0.08,0.09,0.06,0.09,0.1,0.13,0.08,0,0.77,-1.63,1666.67,845.45,3075,8.8,8.02,3.7,10.99,9.61,10.99,14.05},0},
{{0,0.11,0.07,0.07,0.07,0.09,0.04,0.04,0.05,0.04,0.09,0.02,0.03,0.07,0.09,0.1,0.06,0.02,0.04,0.04,0.03,0.04,0.05,0.03,0.06,0.05,0.09,0.07,0.09,0.05,0,-0.01,-0.04,983.33,983.33,2275,5.11,3.39,1.7,11.49,8.33,11.49,7.1},0},
{{0.09,0.11,0.12,0.11,0.14,0.17,0.12,0.07,0.04,0.05,0.09,0.09,0.1,0.12,0.2,0.1,0.08,0.08,0.09,0.07,0.1,0.13,0.1,0.14,0.13,0.1,0.08,0.08,0.08,0.09,0,8.78,-0.35,2525,818.18,1125,4.41,3.91,1.87,4.91,4.89,4.91,10.71},2},
{{0.12,0.12,0.08,0.13,0.13,0.09,0.1,0.05,0.09,0.09,0.12,0.11,0.1,0.11,0.1,0.09,0.11,0.08,0.13,0.08,0.11,0.07,0.11,0.14,0.13,0.11,0.1,0.05,0.12,0.08,0,8.83,-0.21,2725,866.67,2225,4.63,4.7,1.85,5.34,5.51,5.34,11.01},2},
{{0.03,0.06,0.08,0.11,0.11,0.09,0.11,0.13,0.16,0.13,0.07,0.14,0.1,0.11,0.1,0.08,0.12,0.11,0.12,0.08,0.1,0.13,0.17,0.12,0.12,0.08,0.07,0.06,0.07,0.11,0,9.34,-0.16,1700,887.5,2075,3.41,4.53,2.27,3.94,5.22,3.94,10.87},2},
{{0.06,0.09,0.1,0.11,0.11,0.11,0.1,0.08,0.1,0.16,0.09,0.12,0.1,0.13,0.03,0.1,0.13,0.17,0.06,0.11,0.06,0.1,0.12,0.1,0.07,0.07,0.11,0.15,0.15,0.1,0,9.43,0.21,1550,930,2650,3.78,4.58,2.03,4.34,5.3,4.34,11.01},2},
{{0.03,0.08,0.08,0.08,0.12,0.09,0.11,0.09,0.13,0.22,0.03,0.11,0.12,0.15,0.1,0.12,0.14,0.12,0.09,0.06,0.06,0.05,0.09,0.14,0.1,0.08,0.12,0.17,0.11,0.1,0,9.44,0.23,4025,718.75,2683.33,3.23,3.81,1.8,3.86,4.53,3.86,10.74},2},
{{0.02,0.09,0.11,0.08,0.15,0.11,0.07,0.1,0.11,0.17,0.06,0.12,0.15,0.08,0.09,0.13,0.09,0.08,0.09,0.14,0.04,0.09,0.1,0.08,0.12,0.1,0.08,0.17,0.12,0.11,0,9.59,0.33,1637.5,711.54,2175,3.71,4.55,1.99,4.21,5.33,4.21,11.12},2},
{{0.09,0.06,0.11,0.11,0.07,0.08,0.08,0.11,0.15,0.16,0.08,0.14,0.1,0.09,0.1,0.11,0.09,0.09,0.1,0.12,0.06,0.12,0.09,0.11,0.1,0.1,0.11,0.14,0.1,0.1,0,9.34,0.16,2875,955.56,3725,3.84,4.61,2.16,4.65,5.46,4.65,11.08},2},
{{0.04,0.07,0.11,0.08,0.13,0.08,0.1,0.11,0.16,0.15,0.05,0.12,0.12,0.12,0.11,0.12,0.09,0.11,0.1,0.1,0.06,0.08,0.08,0.12,0.1,0.1,0.14,0.12,0.13,0.1,0,9.4,0.29,2675,1250,2150,3.42,4.23,2.03,4.02,5.02,4.02,10.89},2},
{{0.06,0.07,0.12,0.11,0.1,0.09,0.13,0.11,0.12,0.12,0.09,0.14,0.08,0.08,0.13,0.07,0.1,0.09,0.11,0.12,0.06,0.08,0.15,0.1,0.12,0.12,0.09,0.09,0.11,0.1,0,9.48,0.15,3050,685.71,2050,3.82,4.78,2.13,4.3,5.59,4.3,11.11},2},
{{0.05,0.06,0.14,0.09,0.09,0.12,0.13,0.12,0.12,0.11,0.04,0.14,0.13,0.11,0.1,0.1,0.08,0.11,0.14,0.09,0.09,0.09,0.1,0.06,0.12,0.09,0.13,0.14,0.11,0.09,0,9.48,0.04,3175,1011.11,3725,3.63,4.49,1.92,4.18,5.23,4.18,10.96},2},
{{0.07,0.11,0.08,0.13,0.08,0.08,0.11,0.13,0.12,0.12,0.08,0.12,0.09,0.11,0.11,0.09,0.1,0.12,0.14,0.07,0.13,0.11,0.07,0.08,0.09,0.13,0.1,0.12,0.1,0.09,0,9.41,0.06,1025,1358.33,1366.67,3.85,4.52,2.22,4.48,5.27,4.48,11.1},2},
{{0.11,0.11,0.11,0.08,0.09,0.08,0.09,0.13,0.12,0.11,0.1,0.13,0.12,0.07,0.07,0.08,0.12,0.15,0.1,0.1,0.12,0.1,0.09,0.11,0.09,0.08,0.12,0.12,0.1,0.1,0,9.25,-0.06,2650,766.67,2033.33,4.16,4.86,2.06,4.85,5.62,4.85,11.12},2},
{{0.07,0.13,0.09,0.13,0.09,0.11,0.09,0.1,0.11,0.1,0.13,0.09,0.1,0.09,0.1,0.09,0.07,0.12,0.14,0.1,0.12,0.07,0.09,0.09,0.14,0.09,0.14,0.1,0.09,0.09,0,9.31,-0.1,2100,1075,2600,4.07,4.96,1.96,4.71,5.75,4.71,11.2},2},
{{0.06,0.1,0.11,0.12,0.1,0.12,0.08,0.14,0.11,0.09,0.09,0.11,0.1,0.12,0.1,0.1,0.11,0.13,0.11,0.06,0.09,0.07,0.1,0.07,0.11,0.11,0.11,0.12,0.16,0.09,0,9.02,0.15,2733.33,940,1016.67,3.91,4.36,2.02,4.51,5.1,4.51,10.75},2},
{{0.07,0.08,0.13,0.14,0.07,0.11,0.1,0.11,0.13,0.08,0.08,0.11,0.09,0.13,0.12,0.1,0.11,0.12,0.08,0.09,0.05,0.06,0.11,0.15,0.11,0.1,0.15,0.13,0.07,0.09,0,9.1,0.09,3175,1408.33,2675,3.93,4.22,1.83,4.53,5.02,4.53,10.77},2},
{{0.08,0.11,0.13,0.09,0.08,0.12,0.11,0.15,0.05,0.1,0.07,0.15,0.09,0.07,0.09,0.14,0.09,0.12,0.11,0.09,0.04,0.12,0.09,0.05,0.13,0.09,0.18,0.12,0.12,0.09,0,9.4,0.19,3250,1416.67,1550,4.16,4.42,1.8,4.73,5.2,4.73,11.05},2},
{{0.07,0.03,0.09,0.11,0.14,0.14,0.19,0.11,0.07,0.08,0.08,0.1,0.11,0.14,0.15,0.08,0.09,0.1,0.09,0.08,0.05,0.08,0.13,0.12,0.1,0.12,0.12,0.1,0.1,0.11,0,8.98,0.19,2850,1433.33,1275,3.7,4.15,2.04,4.23,4.98,4.23,10.56},2},
{{0.15,0.15,0.11,0.1,0.08,0.05,0.04,0.08,0.17,0.1,0.11,0.08,0.09,0.12,0.13,0.09,0.09,0.09,0.1,0.12,0.18,0.11,0.14,0.11,0.06,0.09,0.06,0.09,0.08,0.11,0,9.2,-0.11,2000,750,983.33,4.46,4.77,2.6,5.25,5.73,5.25,11.67},2},
{{0.09,0.14,0.11,0.08,0.09,0.06,0.11,0.1,0.11,0.13,0.15,0.08,0.08,0.14,0.06,0.1,0.11,0.07,0.11,0.13,0.1,0.1,0.12,0.08,0.1,0.1,0.12,0.09,0.12,0.09,0,9.22,0.1,2450,737.5,1266.67,4.22,4.99,2.24,4.93,5.82,4.93,11.25},2},
{{0.1,0.13,0.09,0.08,0.05,0.12,0.12,0.13,0.13,0.09,0.12,0.1,0.12,0.07,0.09,0.11,0.1,0.09,0.1,0.11,0.11,0.11,0.1,0.13,0.11,0.09,0.1,0.09,0.08,0.1,0,9.05,-0.15,2500,825,1487.5,4.02,4.93,2.14,4.76,5.76,4.76,10.92},2},
{{0.11,0.14,0.07,0.12,0.09,0.08,0.1,0.09,0.12,0.09,0.14,0.08,0.08,0.1,0.11,0.09,0.12,0.09,0.09,0.12,0.11,0.12,0.08,0.11,0.13,0.1,0.07,0.11,0.1,0.11,0,9.26,0.26,3000,813.64,3475,4.35,4.72,2.56,5.04,5.63,5.04,11.42},2},
{{0.19,0.08,0.09,0.1,0.09,0.1,0.17,0.07,0.06,0.07,0.14,0.06,0.09,0.06,0.11,0.11,0.18,0.08,0.07,0.12,0.19,0.11,0.07,0.1,0.14,0.09,0.08,0.06,0.08,0.1,0,9.25,-0.22,1950,885,2616.67,4.91,4.67,2.46,5.77,5.64,5.77,11.75},2},
{{0.16,0.09,0.11,0.06,0.1,0.13,0.1,0.1,0.08,0.09,0.15,0.07,0.1,0.09,0.09,0.11,0.08,0.09,0.08,0.15,0.15,0.1,0.12,0.1,0.09,0.07,0.1,0.09,0.07,0.14,0,9.15,0.09,2333.33,1075,4000,4.58,5.18,2.67,5.4,6.13,5.4,11.64},2},
{{0.19,0.1,0.13,0.09,0.08,0.12,0.13,0.07,0.06,0.06,0.13,0.07,0.14,0.05,0.1,0.14,0.1,0.1,0.09,0.1,0.1,0.14,0.12,0.1,0.14,0.1,0.07,0.09,0.09,0.08,0,9.15,-0.22,1525,893.75,2350,4.84,4.63,2.1,5.48,5.48,5.48,11.43},2},
{{0.15,0.09,0.1,0.15,0.09,0.11,0.12,0.09,0.06,0.07,0.14,0.06,0.12,0.09,0.09,0.13,0.11,0.1,0.09,0.09,0.06,0.14,0.11,0.1,0.17,0.1,0.1,0.08,0.07,0.1,0,8.99,0.11,3575,1012.5,3050,4.63,4.59,2.25,5.29,5.42,5.29,11.16},2},
{{0.14,0.1,0.09,0.14,0.07,0.15,0.11,0.12,0.03,0.07,0.13,0.07,0.11,0.07,0.09,0.16,0.11,0.08,0.11,0.1,0.1,0.13,0.09,0.08,0.09,0.07,0.14,0.09,0.13,0.11,0,9.19,0.14,3325,825,1275,4.62,4.52,2.24,5.26,5.45,5.26,11.31},2},
{{0.14,0.08,0.11,0.11,0.14,0.15,0.08,0.09,0.05,0.06,0.12,0.09,0.13,0.08,0.13,0.07,0.07,0.11,0.11,0.11,0.09,0.09,0.1,0.1,0.07,0.12,0.11,0.13,0.09,0.11,0,9.19,0.41,3550,1558.33,2366.67,4.7,4.82,2.61,5.31,5.65,5.31,11.47},2},
{{0.18,0.2,0.08,0.06,0.04,0.08,0.1,0.11,0.1,0.08,0.15,0.07,0.07,0.13,0.07,0.06,0.12,0.11,0.09,0.16,0.27,0.09,0.05,0.08,0.09,0.06,0.08,0.1,0.1,0.1,0,9.51,-0.34,1450,641.67,2900,5.21,5.31,2.82,6.33,6.22,6.33,12.55},2},
{{0.2,0.11,0.09,0.05,0.07,0.04,0.07,0.05,0.06,0.06,0.09,0.11,0.07,0.11,0.07,0.06,0.07,0.04,0.08,0.08,0.1,0.07,0.05,0.06,0.06,0.04,0.07,0.07,0.11,0.17,0,6.58,0.75,2025,455.56,1500,4.22,3.89,2.41,6.34,6.19,6.34,9.01},2},
{{0.1,0.08,0.09,0.07,0.06,0.1,0.06,0.07,0.09,0.3,0.02,0.04,0.11,0.05,0.04,0.03,0.05,0.11,0.21,0.38,0.08,0.09,0.07,0.1,0.12,0.12,0.12,0.09,0.11,0.13,0,6,-0.21,1200,408.33,1875,8.03,4.96,1.87,10.02,6.07,10.02,11.34},5},
{{0.12,0.12,0.13,0.09,0.11,0.07,0.09,0.13,0.11,0.06,0.15,0.12,0.08,0.1,0.1,0.13,0.1,0.12,0.08,0.04,0.13,0.13,0.1,0.09,0.09,0.06,0.08,0.07,0.17,0.11,0,0.24,-0.52,2100,4375,4350,10.3,2.51,2.3,11.49,3.14,11.49,11.29},5},
{{0.12,0.1,0.1,0.09,0.1,0.15,0.1,0.08,0.12,0.07,0.12,0.16,0.07,0.1,0.11,0.12,0.12,0.08,0.09,0.05,0.1,0.1,0.15,0.09,0.07,0.11,0.1,0.11,0.08,0.12,0,0.43,-0.41,2100,2983.33,2525,10.07,2.49,2.02,11.22,3.17,11.22,10.99},5},
{{0.1,0.09,0.1,0.12,0.09,0.1,0.14,0.12,0.12,0.05,0.13,0.1,0.11,0.14,0.12,0.1,0.13,0.13,0.05,0.02,0.11,0.14,0.07,0.1,0.1,0.09,0.11,0.12,0.1,0.09,0,0.21,-0.53,2100,1000,1500,9.82,2.19,2.15,10.9,2.78,10.9,10.66},5},
{{0.05,0.09,0.07,0.13,0.11,0.08,0.09,0.08,0.06,0.02,0.07,0.07,0.11,0.1,0.12,0.11,0.08,0.07,0.05,0.01,0.06,0.04,0.08,0.11,0.09,0.13,0.09,0.11,0.03,0.04,0,0.17,-0.45,2100,950,1800,7.78,1.42,1.13,11.13,2.5,11.13,8.24},5},
{{0.09,0.08,0.1,0.07,0.13,0.17,0.1,0.14,0.12,0.04,0.08,0.07,0.08,0.12,0.12,0.1,0.11,0.15,0.11,0.07,0.06,0.09,0.08,0.08,0.13,0.11,0.15,0.1,0.14,0.1,0,9.34,0.18,2400,1083.33,2725,3.13,3.96,2.52,4.16,4.77,4.16,10.73},1},
{{0.13,0.1,0.11,0.15,0.09,0.06,0.13,0.08,0.07,0.07,0.09,0.12,0.12,0.08,0.1,0.12,0.09,0.09,0.1,0.09,0.09,0.08,0.12,0.12,0.09,0.13,0.07,0.11,0.09,0.11,0,8.89,-0.19,725,633.33,1550,4.16,4.37,2.72,5.3,5.25,5.3,10.97},1},
{{0.12,0.12,0.1,0.1,0.1,0.08,0.1,0.09,0.09,0.11,0.13,0.11,0.11,0.1,0.08,0.08,0.1,0.08,0.1,0.12,0.14,0.11,0.1,0.12,0.09,0.08,0.09,0.11,0.09,0.06,0,9.01,-0.71,1975,426.19,1987.5,4.07,4.91,2.88,5.12,5.83,5.12,11.3},1},
{{0.01,0.05,0.04,0.03,0.02,0.03,0.04,0.03,0.07,0.13,0.04,0.06,0.04,0.04,0.06,0.04,0.05,0.03,0.04,0.06,0.06,0.04,0.07,0.02,0.03,0.04,0.05,0.03,0.03,0.08,0,3.93,-0.03,1475,366.67,916.67,1.82,2.51,1.45,4.97,7.38,4.97,4.96},1},
{{0.08,0.07,0.08,0.07,0.09,0.08,0.13,0.09,0.12,0.19,0.07,0.11,0.09,0.1,0.1,0.1,0.1,0.08,0.13,0.13,0.12,0.11,0.07,0.11,0.09,0.1,0.06,0.12,0.11,0.11,0,7.35,-0.17,1475,1780,2850,6.51,3.44,2.21,7.65,4.24,7.65,10.76},5},
{{0.16,0.11,0.06,0.09,0.05,0.08,0.12,0.12,0.12,0.12,0.12,0.14,0.07,0.11,0.07,0.08,0.08,0.1,0.12,0.13,0.11,0.09,0.1,0.09,0.09,0.1,0.1,0.11,0.12,0.12,0,6.79,-0.25,1475,1121.43,1525,7.75,3.85,1.99,8.84,4.71,8.84,11.09},5},
{{0.11,0.1,0.11,0.1,0.09,0.1,0.1,0.1,0.12,0.1,0.09,0.1,0.15,0.06,0.1,0.1,0.1,0.1,0.12,0.11,0.1,0.08,0.13,0.13,0.08,0.07,0.11,0.11,0.08,0.11,0,7.08,-0.11,1475,1700,4400,7.66,3.48,2.1,8.54,4.29,8.54,11.18},5},
{{0.09,0.12,0.1,0.14,0.11,0.11,0.07,0.14,0.08,0.06,0.12,0.12,0.06,0.07,0.13,0.11,0.09,0.1,0.09,0.12,0.09,0.12,0.11,0.06,0.09,0.13,0.09,0.1,0.14,0.08,0,6.72,-0.36,1475,975,4300,7.85,3.56,1.79,8.61,4.54,8.61,11.08},5},
{{0.08,0.08,0.13,0.09,0.12,0.14,0.1,0.1,0.12,0.07,0.09,0.05,0.11,0.13,0.11,0.12,0.13,0.14,0.08,0.06,0.09,0.1,0.09,0.11,0.13,0.14,0.1,0.09,0.11,0.07,0,6.74,-0.47,1475,2633.33,2800,7.43,2.85,1.59,8.15,3.7,8.15,10.62},5},
{{0.11,0.11,0.12,0.08,0.12,0.11,0.11,0.09,0.07,0.09,0.13,0.06,0.11,0.15,0.1,0.11,0.11,0.09,0.08,0.08,0.08,0.09,0.11,0.09,0.16,0.09,0.12,0.13,0.08,0.08,0,6.49,-0.4,2050,2816.67,2650,7.76,3.45,1.59,8.67,4.57,8.67,10.86},5},
{{0.01,0.04,0.04,0.07,0.03,0.03,0.02,0,0.01,0.01,0.02,0.05,0.04,0.03,0.02,0.02,0.03,0.03,0.02,0.01,0.03,0.03,0.02,0.02,0.01,0.02,0.03,0.01,0.02,0.06,0,1.42,0.13,2050,550,325,2.08,1.13,0.71,8.86,5.71,8.86,2.78},5},
{{0.09,0.1,0.1,0.09,0.12,0.11,0.12,0.09,0.09,0.11,0.07,0.07,0.11,0.13,0.09,0.13,0.1,0.11,0.11,0.09,0.06,0.08,0.1,0.09,0.11,0.11,0.13,0.15,0.07,0.11,0,6.11,-0.51,1022.22,1716.67,4825,7.58,4.54,2.82,9.18,5.89,9.18,11.85},1},
{{0.12,0.12,0.08,0.11,0.08,0.11,0.09,0.11,0.11,0.09,0.1,0.11,0.1,0.07,0.12,0.09,0.11,0.1,0.09,0.12,0.13,0.09,0.12,0.11,0.09,0.08,0.09,0.06,0.15,0.09,0,5.58,-0.99,930,1120,1383.33,7.5,4.96,3.48,9.25,6.44,9.25,12.03},1},
{{0.09,0.08,0.12,0.09,0.11,0.09,0.09,0.12,0.1,0.11,0.12,0.11,0.1,0.11,0.1,0.09,0.09,0.09,0.1,0.1,0.1,0.13,0.09,0.09,0.1,0.11,0.1,0.09,0.1,0.1,0,5.46,-0.89,972.22,1258.33,3050,7.77,5.13,3.3,9.39,6.59,9.39,12.05},1},
{{0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0.02,0.01,0.02,0.01,0.01,0,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0,0.01,0.01,0.02,0.01,0.01,0,0.36,-0.02,200,175,300,0.59,0.46,0.25,9.26,7.14,9.26,0.88},1},
{{0.04,0.06,0.04,0.06,0.05,0.05,0.07,0.1,0.19,0.34,0.09,0.11,0.06,0.07,0.06,0.05,0.05,0.09,0.14,0.27,0.11,0.09,0.12,0.13,0.13,0.15,0.08,0.07,0.09,0.05,0,8.99,-0.83,750,516.67,2175,4.71,5.92,2.1,6.18,6.75,6.18,11.44},5},
{{0.1,0.16,0.11,0.09,0.11,0.16,0.15,0.1,0.04,0.01,0.05,0.12,0.09,0.11,0.11,0.11,0.13,0.11,0.12,0.07,0.09,0.13,0.08,0.09,0.15,0.1,0.13,0.12,0.07,0.05,0,6.42,-0.54,750,1930,2150,8.11,3.59,2.2,9.03,4.49,9.03,11.22},5},
{{0.18,0.06,0.16,0.08,0.09,0.08,0.11,0.13,0.08,0.06,0.08,0.11,0.1,0.08,0.09,0.11,0.13,0.14,0.1,0.09,0.17,0.12,0.09,0.1,0.09,0.08,0.07,0.13,0.1,0.06,0,6.5,-0.69,1587.5,1225,3100,8.09,4.02,2.99,9.47,5.05,9.47,11.78},5},
{{0.12,0.1,0.1,0.13,0.15,0.15,0.11,0.09,0.05,0.02,0.06,0.08,0.1,0.09,0.09,0.14,0.16,0.13,0.12,0.05,0.11,0.1,0.12,0.12,0.1,0.12,0.12,0.11,0.06,0.07,0,6.54,-0.61,1587.5,1300,3700,8.04,3.43,2.3,8.96,4.31,8.96,11.28},5},
{{0.11,0.15,0.13,0.15,0.11,0.08,0.12,0.13,0.04,0.01,0.06,0.1,0.16,0.16,0.13,0.08,0.11,0.09,0.08,0.06,0.08,0.1,0.13,0.12,0.1,0.1,0.15,0.1,0.13,0.02,0,5.79,-0.58,1587.5,1300,2150,8.27,3.45,1.95,9.16,4.4,9.16,10.82},5},
{{0.01,0.02,0.02,0.05,0.04,0.03,0.03,0.03,0.15,0.11,0.21,0.05,0.04,0.06,0.07,0.05,0.01,0,0,0,0,0,0,0,0,0.01,0.02,0.03,0.11,0.31,0,-0.15,2.83,125,850,616.67,2.03,2.26,1.73,5.62,5.33,5.62,4.7},5},
{{0.11,0.1,0.11,0.11,0.09,0.12,0.09,0.13,0.09,0.07,0.15,0.09,0.09,0.08,0.06,0.12,0.11,0.1,0.12,0.1,0.06,0.09,0.1,0.09,0.06,0.13,0.09,0.14,0.16,0.11,0,5.11,0.22,527.78,710,2400,6.95,5.05,3.39,8.65,6.34,8.65,11.23},1},
{{0.13,0.08,0.11,0.09,0.1,0.1,0.09,0.08,0.09,0.14,0.09,0.09,0.09,0.09,0.12,0.1,0.1,0.12,0.13,0.1,0.13,0.08,0.1,0.15,0.08,0.1,0.11,0.09,0.08,0.11,0,5.77,-0.61,1112.5,1057.14,1450,7.55,5,3.61,9.45,6.41,9.45,12.24},1},
{{0.07,0.11,0.1,0.11,0.11,0.1,0.11,0.09,0.12,0.1,0.07,0.12,0.11,0.13,0.15,0.09,0.1,0.11,0.06,0.09,0.09,0.14,0.1,0.08,0.14,0.12,0.09,0.08,0.08,0.1,0,4.66,-0.67,1228.57,1120,1683.33,7.48,4.32,3.31,9.08,5.83,9.08,11.14},1},
{{0.02,0.04,0.03,0.03,0.03,0.03,0.03,0.05,0.04,0.03,0.03,0.04,0.05,0.02,0.02,0.05,0.02,0.02,0.03,0.05,0.04,0.05,0.02,0.04,0.03,0.01,0.05,0.03,0.02,0.03,0,1.7,-0.26,575,700,700,2.25,1.74,1.05,9.01,7.27,9.01,3.55},1},
{{0.22,0.09,0.1,0.07,0.02,0.05,0.09,0.06,0.1,0.16,0.16,0.1,0.11,0.05,0.03,0.04,0.08,0.08,0.12,0.21,0.19,0.14,0.07,0.06,0.08,0.06,0.05,0.11,0.15,0.09,0,3.27,-0.91,678.57,1525,525,9.13,3.87,2.62,10.81,5.11,10.81,11.5},5},
{{0.08,0.1,0.09,0.11,0.09,0.14,0.16,0.07,0.08,0.1,0.09,0.11,0.08,0.07,0.12,0.12,0.13,0.12,0.1,0.07,0.08,0.09,0.09,0.14,0.1,0.1,0.08,0.14,0.1,0.09,0,2.61,-0.5,1425,738.89,1300,9.21,1.9,1.67,10.06,2.58,10.06,10.26},5},
{{0.08,0.1,0.1,0.12,0.11,0.12,0.08,0.15,0.1,0.06,0.06,0.11,0.1,0.12,0.11,0.15,0.11,0.1,0.11,0.06,0.07,0.09,0.12,0.11,0.12,0.12,0.12,0.07,0.06,0.12,0,2.64,-0.51,2716.67,3350,2900,9,1.69,1.69,9.77,2.22,9.77,9.98},5},
{{0.03,0.09,0.13,0.12,0.16,0.11,0.09,0.08,0.13,0.07,0.1,0.09,0.11,0.14,0.13,0.13,0.08,0.11,0.08,0.06,0.07,0.1,0.11,0.11,0.1,0.1,0.13,0.11,0.09,0.11,0,2.34,-0.43,1440,1850,3300,9.26,1.84,1.72,9.92,2.47,9.92,10.17},5},
{{0.04,0.05,0.05,0.03,0.05,0.06,0.03,0.09,0.05,0.06,0.04,0.04,0.06,0.06,0.05,0.05,0.04,0.05,0.07,0.06,0.04,0.04,0.05,0.05,0.04,0.07,0.07,0.05,0.06,0.05,0,1.43,-0.23,1075,700,1100,4.74,1.18,0.75,10.52,3.05,10.52,5.26},5},
{{0,0.02,0.07,0.09,0.08,0.12,0.15,0.16,0.14,0.19,0.1,0.09,0.11,0.12,0.08,0.09,0.1,0.09,0.12,0.13,0.09,0.08,0.13,0.12,0.12,0.14,0.09,0.08,0.09,0.08,0,8.8,-0.66,1700,500,1766.67,3.16,5.05,2.64,4.08,5.89,4.08,10.61},1},
{{0.13,0.12,0.11,0.13,0.13,0.12,0.08,0.07,0.07,0.07,0.1,0.1,0.09,0.11,0.08,0.16,0.11,0.1,0.08,0.1,0.14,0.08,0.08,0.09,0.1,0.09,0.11,0.1,0.11,0.11,0,8.3,-0.24,2216.67,535.29,1383.33,4.54,4.47,3.27,5.65,5.51,5.65,10.97},1},
{{0.17,0.15,0.12,0.08,0.11,0.08,0.08,0.08,0.09,0.06,0.11,0.12,0.11,0.08,0.13,0.05,0.09,0.13,0.11,0.08,0.08,0.14,0.1,0.09,0.08,0.07,0.11,0.13,0.1,0.12,0,8.03,-0.16,1750,625,3475,5.36,4.83,3.22,6.8,5.68,6.8,11.31},1},
{{0.01,0.03,0.02,0.01,0,0,0,0,0,0,0,0,0.01,0,0.02,0.02,0.01,0,0.01,0,0,0,0.01,0.01,0,0.01,0.01,0.01,0.02,0,0,0.43,0.03,1750,175,100,0.39,0.4,0.09,7.43,7.84,7.43,0.6},1},
{{0.05,0.03,0.05,0.05,0.06,0.06,0.1,0.18,0.24,0.21,0.09,0.03,0.04,0.07,0.05,0.05,0.15,0.17,0.25,0.13,0.35,0.15,0.11,0.05,0.07,0.01,0.06,0.04,0.15,0.03,0,8.17,-1.42,1750,351.85,100,4.98,0.22,0.35,5.01,0.36,5.01,9.7},4},
{{0.1,0.07,0.04,0.09,0.05,0.06,0.09,0.15,0.14,0.23,0.11,0.04,0.08,0.11,0.05,0.04,0.13,0.08,0.14,0.24,0.19,0.16,0.1,0.07,0.04,0.03,0.05,0.07,0.16,0.15,0,8.18,-1.11,1750,1005.56,2475,5.05,0.31,0.51,5.09,0.4,5.09,9.73},4},
{{0.14,0.04,0.03,0.08,0.02,0.06,0.08,0.09,0.18,0.29,0.22,0.03,0.05,0.03,0.02,0.03,0.07,0.11,0.17,0.28,0.08,0.08,0.11,0.08,0.1,0.06,0.05,0.08,0.1,0.28,0,8.21,-0.85,1750,1683.33,1783.33,4.97,0.51,0.64,5.05,0.81,5.05,9.72},4},
{{0.14,0.12,0.04,0.13,0.08,0.07,0.09,0.12,0.17,0.06,0.17,0.1,0.1,0.1,0.04,0.05,0.13,0.09,0.16,0.08,0.1,0.15,0.2,0.11,0.17,0.06,0.08,0.05,0.05,0.05,0,8.05,-1.3,1750,250,1783.33,5.3,0.33,0.23,5.34,0.59,5.34,9.76},4},
{{0.08,0.04,0.02,0.08,0.07,0.13,0.16,0.17,0.16,0.12,0.06,0.06,0.05,0.09,0.07,0.05,0.23,0.12,0.21,0.09,0.14,0.13,0.11,0.1,0.05,0.05,0.06,0.14,0.09,0.14,0,8.16,-1.11,1750,1516.67,200,5.12,0.21,0.42,5.14,0.32,5.14,9.72},4},
{{0.02,0.03,0.06,0.15,0.12,0.19,0.15,0.15,0.11,0.05,0.03,0.07,0.08,0.16,0.08,0.1,0.21,0.12,0.11,0.06,0.03,0.07,0.18,0.18,0.15,0.09,0.13,0.13,0.04,0.02,0,8.09,-1.25,1750,316.13,200,5.19,0.16,0.16,5.21,0.21,5.21,9.7},4},
{{0.11,0.12,0.16,0.16,0.09,0.06,0.02,0.06,0.07,0.15,0.13,0.09,0.12,0.16,0.1,0.07,0.07,0.02,0.09,0.15,0.04,0.07,0.13,0.13,0.14,0.03,0.1,0.07,0.06,0.21,0,8.09,-0.59,1750,1600,250,5.21,0.34,1.02,5.28,0.55,5.28,9.78},4},
{{0.05,0.2,0.22,0.36,0.1,0.05,0.04,0.01,0.01,0,0.05,0.11,0.27,0.32,0.09,0.09,0.07,0.01,0.01,0,0,0.03,0.04,0.08,0.1,0.15,0.24,0.29,0.08,0.01,0,7.93,-1.13,1750,298.39,250,5.48,0.08,0.11,5.49,0.12,5.49,9.71},4},
{{0.12,0.19,0.17,0.27,0.09,0.07,0.04,0.03,0.02,0.01,0.09,0.15,0.19,0.26,0.08,0.07,0.1,0.04,0.04,0.01,0.03,0.08,0.06,0.1,0.07,0.05,0.1,0.23,0.23,0.08,0,7.95,-1.06,1750,284.85,250,5.48,0.12,0.25,5.49,0.18,5.49,9.72},4},
{{0.15,0.09,0.05,0.1,0.1,0.17,0.15,0.11,0.09,0.03,0.11,0.07,0.05,0.12,0.1,0.11,0.23,0.09,0.11,0.04,0.02,0.09,0.1,0.09,0.14,0.07,0.09,0.14,0.15,0.13,0,8.04,-1.06,1750,248.57,3050,5.34,0.18,0.31,5.36,0.25,5.36,9.73},4},
{{0,0,0,0.08,0.19,0.19,0.14,0.02,0.02,0.02,0.01,0,0,0.07,0.13,0.12,0.24,0.03,0.04,0.02,0,0,0,0,0.12,0.09,0.24,0.08,0.08,0.04,0,5.14,-0.67,1750,216.67,3050,3.34,1.88,0.28,5.26,2.96,5.26,6.17},4},
{{0.04,0.08,0,0,0.35,0,0,0,0.45,0.09,0,0.02,0.05,0.09,0.28,0,0.29,0.16,0.06,0.07,0.07,0.02,0.03,0.04,0.08,0,0.18,0.25,0.32,0.03,0,-0.77,2.31,340.74,216.67,471.05,8.94,0.06,0.08,8.95,0.15,8.95,9.27},3},
{{0.01,0.05,0,0,0.45,0,0,0,0.49,0.02,0,0,0,0.02,0.12,0,0.53,0.28,0.06,0.01,0,0,0,0.02,0.05,0,0.25,0.32,0.37,0,0,-0.75,2.34,633.33,216.67,277.94,8.94,0.03,0.03,8.94,0.04,8.94,9.27},3},
{{0.17,0.07,0,0,0.25,0,0,0,0.34,0.18,0.03,0.09,0.36,0.24,0.09,0,0.09,0.04,0.06,0.03,0.04,0.07,0.05,0.19,0.23,0,0.2,0.13,0.1,0,0,-0.86,2.26,365.38,216.67,296.88,8.94,0.08,0.06,8.94,0.12,8.94,9.26},3},
{{0.03,0.05,0,0,0.08,0,0,0,0.46,0.39,0.01,0.06,0.11,0.03,0.05,0,0.11,0.29,0.31,0.06,0.24,0.63,0.06,0.03,0.02,0,0.01,0.01,0.02,0,0,-0.75,2.09,263.51,216.67,277.14,8.99,0.08,0.07,8.99,0.11,8.99,9.26},3},
{{0.01,0.02,0,0,0.21,0,0,0,0.65,0.12,0,0,0.01,0.01,0.21,0,0.49,0.22,0.08,0.01,0,0.11,0.04,0.11,0.21,0,0.43,0.12,0.01,0,0,-0.75,2.27,473.53,216.67,228.57,8.96,0.03,0.05,8.96,0.04,8.96,9.27},3},
{{0.05,0.06,0,0,0.26,0,0,0,0.54,0.1,0,0,0.16,0.18,0.26,0,0.23,0.15,0.02,0.01,0.01,0.02,0.06,0.14,0.28,0,0.34,0.11,0.04,0.02,0,-0.8,2.28,290.63,216.67,270,8.95,0.05,0.05,8.95,0.06,8.95,9.27},3},
{{0.18,0.17,0,0,0.28,0,0,0,0.33,0.05,0,0,0.15,0.18,0.14,0,0.05,0.03,0.07,0.39,0,0,0,0.03,0.1,0,0.13,0.11,0.27,0.37,0,-0.69,2.48,275,216.67,208.33,8.91,0.15,0.16,8.91,0.17,8.91,9.28},3},
{{0.11,0.15,0,0,0.34,0,0,0,0.25,0.17,0,0,0.03,0.03,0.03,0,0.05,0.1,0.29,0.49,0.06,0.04,0.02,0.04,0.05,0,0.02,0.02,0.29,0.49,0,-0.61,2.44,286.76,216.67,361.11,8.95,0.11,0.14,8.95,0.14,8.95,9.3},3},
{{0.18,0.07,0,0,0.22,0,0,0,0.33,0.21,0.04,0.55,0.07,0.05,0.02,0,0.04,0.07,0.09,0.09,0.21,0.06,0.06,0.14,0.2,0,0.11,0.03,0.09,0.13,0,-0.92,2.2,250,216.67,287.5,8.96,0.19,0.19,8.97,0.23,8.97,9.28},3},
{{0.17,0.25,0,0,0.23,0,0,0,0.1,0.25,0.72,0.17,0.06,0.01,0.03,0,0,0,0.01,0.01,0.32,0.04,0.03,0.1,0.19,0,0.17,0.08,0.06,0.02,0,-1.2,2.05,1100,216.67,1233.33,8.95,0.17,0.33,8.96,0.3,8.96,9.28},3},
{{0.05,0.08,0,0,0.09,0,0,0,0.03,0.03,0.24,0.03,0,0,0,0,0,0,0,0,0.02,0.01,0.01,0.03,0.08,0,0.06,0.02,0.04,0.02,0,-0.34,0.6,312.5,216.67,266.67,2.36,0.25,0.44,8.9,0.96,8.9,2.46},3}
# 110 "main.c" 2
      };
 Point *new_points = new_points1;
# 120 "main.c"
 unsigned char key[1082] = {

# 1 "key-READ1-k20.dat" 1
2,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,3,0,4,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,3,3,1,1,1,1,1,1,1,3,3,1,3,1,3,1,4,4,4,4,4,4,4,5,0,0,0,0,0,4,4,4,4,5,0,
0,0,5,4,4,4,4,5,3,4,3,4,3,3,5,3,4,3,4,4,5,3,4,4,4,4,4,4,5,3,4,4,4,3,4,5,4,3,3,4,3,3,3,3,3,4,4,4,4,3,3,3,3,3
,4,3,4,3,4,3,4,4,4,4,4,4,4,4,4,3,4,3,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,
4,3,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,4,4,4,3,4,4,4,3,4,4,4,4,3,3,4,4,4,4
,4,4,4,4,4,4,4,5,4,4,3,4,4,5,3,4,4,4,4,4,3,4,4,4,4,4,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,3,4,4,4,0,0,0,0,0,
4,4,4,0,0,0,4,4,4,4,4,4,0,0,0,4,4,4,4,5,4,4,4,3,4,4,4,4,4,3,4,4,4,4,4,4,5,4,4,4,4,4,4,4,3,4,4,4,4,5,3,4,5,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,
4,4,4,4,4,4,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,0,4,4,4,4,4,4,4,0,4,4,4,2,4,4,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,3,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,0,4,0,0,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,4,5,4
,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,3,3,3,3,3,3,3,4,3,3,2,1,3,2,3,3,2,2,2,3,3,3,3,0,0,0,
0,0,0,0,0,0,0,4,0,0,0,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,4
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,0,0,0,
0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,5,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,3,4,4,4,3,0,4,4,4,4,5,0,0,4,0,4,4,4,4,3,4,4,4,3,1,4,4,4,4,1,4,1,1,4,
5,2,2,4,2,2,2,2,2,2,4,2
# 123 "main.c" 2



 };






int main(int argc, char **argv) {

    int num_points, num_classes, num_new_points, k;

 const int num_features = 43;


#define MSG


 printf("DATA_TYPE = " "float" ", MAXFPVALUE = %e, MINFPVALUE = %e\n", ((double)1.79769313486231570815e+308L), -((double)1.79769313486231570815e+308L));
    exit(1);


  printf("Data points initialized with wisdm dataset...\n");
  k = 20;
        num_classes = 6;
        num_points = 4336;
        num_new_points = 1082;
# 165 "main.c"
  float min[num_features];
  float max[num_features];

  minmax(min, max, num_points, known_points, num_features);
  minmax_normalize(min, max, num_points, known_points, num_features);
  minmax_normalize(min, max, num_new_points, new_points, num_features);



    printf("Executing kNN...\n");


  Timer *timer = timer_init();
  timer_start(timer);


 BestPoint best_points[k];



  int fail = 0;







    for (int i = 0; i < num_new_points; i++) {

        char class = classifyinstance(new_points[i], k, best_points, num_classes,
          known_points, num_points, num_features);



   if(new_points[i].classification_id != class) fail++;


  new_points[i].classification_id = class;


  printf("class id: %d\n",class);
    }



  timer_stop(timer);


    printf("kNN done.\n\n");

    printf("kNN: number of classes = %d\n", num_classes);
    printf("kNN: number of training instances = %d\n", num_points);
    printf("kNN: number of features = %d\n", num_features);
    printf("kNN: k = %d\n", k);

    printf("kNN: number of classified instances = %d\n", num_new_points);


  printf("kNN: number of classifications wrong = %d\n", fail);
  printf("kNN: number of classifications right = %d\n", num_new_points-fail);
  printf("kNN: accuracy = %.2f %c\n\n", 100*(float)(num_new_points-fail)/(float) num_new_points, '%');







  const double time = timer_get_s(timer);
  printf("\nTime:  %.4f s\n", time);



  timer = timer_destroy(timer);
# 251 "main.c"
    return 0;
}
