        -:    0:Source:utils.c
        -:    0:Graph:utils.gcno
        -:    0:Data:utils.gcda
        -:    0:Runs:3
        -:    1:
        -:    2:#include <stdio.h>
        -:    3:#include <float.h>
        -:    4:#include <stdlib.h>
        -:    5:
        -:    6:#include "utils.h"
        -:    7:
        -:    8:/*
        -:    9:* Returns a letter identifying the class based on the original numeric ID.
        -:   10:*/
    #####:   11:char get_class_name(CLASS_ID_TYPE class_id) {
        -:   12:
    #####:   13:    return 'A' + (CLASS_ID_TYPE) class_id;
        -:   14:}
        -:   15:
        -:   16:/*
        -:   17:* Verify if the classifications equal the original ones stored in key
        -:   18:*/
    #####:   19:void verify_results(int num_new_points, const Point *new_points, const CLASS_ID_TYPE *key) {
        -:   20:	
    #####:   21:    if (key == NULL) {
        -:   22:        printf("Skipping verification.\n");
    #####:   23:        return;
        -:   24:    }
        -:   25:
        -:   26:    int passed = 1;
        -:   27:    printf("Verifying results...\n");
    #####:   28:    for (int i = 0; i < num_new_points; ++i) {
        -:   29:
    #####:   30:        CLASS_ID_TYPE classified = new_points[i].classification_id;
    #####:   31:        CLASS_ID_TYPE truth = key[i];
        -:   32:
    #####:   33:        if (classified == truth) {
    #####:   34:            printf(" %c %s %c\n", get_class_name(classified), "=", get_class_name(truth));
        -:   35:        } else {
    #####:   36:            printf(" %c %s %c\n", get_class_name(classified), "!=", get_class_name(truth));
        -:   37:            passed = 0;
        -:   38:        }
        -:   39:
        -:   40:    }
        -:   41:
        -:   42:    printf("Verification is complete: ");
    #####:   43:    if (passed == 1) {
        -:   44:        printf("Passed!\n");
        -:   45:    } else {
        -:   46:        printf("Failed!\n");
        -:   47:    }
        -:   48:}
        -:   49:
        -:   50:/**
        -:   51:* Get the score according to the execution times in the ANTAREX machine.
        -:   52:* This is used when READ = 2.
        -:   53:*/
    #####:   54:int get_reference_score(double time_s, int num_points) {
        -:   55:
    #####:   56:    switch (num_points) {
    #####:   57:        case 1000:
    #####:   58:            return (int) (0.0084 / time_s * 100);
    #####:   59:        case 250000:
    #####:   60:            return (int) (8.2217 / time_s * 100);
    #####:   61:        case 1000000:
    #####:   62:            return (int) (64.3585 / time_s * 100);
        -:   63:        default:
        -:   64:            return 0;
        -:   65:    }
        -:   66:}
        -:   67:
        -:   68:/*
        -:   69:* return an integer number from min to max.
        -:   70:*/
    #####:   71:static int rand_int(int min, int max) {
        -:   72:
    #####:   73:    int number = (int) (min + rand() / (RAND_MAX / (max - min + 1) + 1));
    #####:   74:    return number;
        -:   75:}
        -:   76:
        -:   77:/*
        -:   78:* return a floating-point number from min to max.
        -:   79:*/
    #####:   80:static DATA_TYPE rand_double(DATA_TYPE min, DATA_TYPE max) {
        -:   81:
    #####:   82:    DATA_TYPE number = (DATA_TYPE) (min + rand() / (RAND_MAX / (max - min + 1) + 1));
    #####:   83:    return number;
        -:   84:}
        -:   85:
        -:   86:/*
        -:   87:* return a floating-point number between 0 and 1
        -:   88:*/
    #####:   89:static DATA_TYPE get_rand_feature_value() {
        -:   90:
    #####:   91:    return rand_double(0, 1);
        -:   92:}
        -:   93:
        -:   94:/*
        -:   95:* Initialize points with random values
        -:   96:*/
    #####:   97:void initialize_known_points(int num_points, Point *known_points, int num_classes, int num_features) {
        -:   98:
    #####:   99:    for (int i = 0; i < num_points; i++) {
    #####:  100:        for (int j = 0; j < num_features; j++) {
    #####:  101:            known_points[i].features[j] = (DATA_TYPE) get_rand_feature_value();
        -:  102:        }
    #####:  103:        known_points[i].classification_id = (CLASS_ID_TYPE) rand_int(0, num_classes - 1);
        -:  104:    }
    #####:  105:}
        -:  106:
        -:  107:/*
        -:  108:* Initialize new points with random values.
        -:  109:*/
    #####:  110:void initialize_new_points(int num_new_points, Point *new_points, int num_features) {
        -:  111:
    #####:  112:    for (int i = 0; i < num_new_points; i++) {
    #####:  113:        for (int j = 0; j < num_features; j++) {
    #####:  114:            new_points[i].features[j] = (DATA_TYPE) get_rand_feature_value();
        -:  115:        }
    #####:  116:        new_points[i].classification_id = (CLASS_ID_TYPE) -1;
        -:  117:    }
    #####:  118:}
        -:  119:
        -:  120:/*
        -:  121:* show the values of a point: features and class.
        -:  122:*/
    #####:  123:void show_point(Point point, int num_features) {
        -:  124:
    #####:  125:    for (int j = 0; j < num_features; j++) {
    #####:  126:		if(j == 0)
    #####:  127:			printf("%.3f", point.features[j]);
        -:  128:		else
    #####:  129:			printf(",%.3f", point.features[j]);
        -:  130:    }
    #####:  131:    printf(", class = %d\n", point.classification_id);
    #####:  132:}
        -:  133:
        -:  134:/*
        -:  135:* Determine the min and max values for each feature for a set of 
        -:  136:* points.
        -:  137:*/ 
        3:  138:void minmax(DATA_TYPE *min, DATA_TYPE *max, int num_points, Point *known_points, int num_features) {
        -:  139:
        -:  140:    
      132:  141:	for (int j = 0; j < num_features; j++) {
      129:  142:		min[j] = MAX_FP_VAL;
      129:  143:		max[j] = MIN_FP_VAL;
        -:  144:		//printf("%e, %e\n", MIN_FP_VAL, MAX_FP_VAL);
        -:  145:	}
        -:  146:	
    13011:  147:	for (int i = 0; i < num_points; i++) {
   572352:  148:		for (int j = 0; j < num_features; j++) {
   559344:  149:            if(known_points[i].features[j] < min[j]) 
      765:  150:				min[j] = known_points[i].features[j];
   559344:  151:            if(known_points[i].features[j] > max[j]) 
     1596:  152:				max[j] = known_points[i].features[j];
        -:  153:        }
        -:  154:    }
        -:  155:	
        -:  156:	/*printf("{");
        -:  157:	for (int j = 0; j < num_features; j++) {
        -:  158:		if(j<num_features-1) printf("%.4f,",min[j]);
        -:  159:		else printf("%.4f",min[j]);
        -:  160:	}
        -:  161:	printf("}\n");
        -:  162:	
        -:  163:	printf("{");
        -:  164:	for (int j = 0; j < num_features; j++) {
        -:  165:		if(j<num_features-1) printf("%.4f,",max[j]);
        -:  166:		else printf("%.4f",max[j]);
        -:  167:	}
        -:  168:	printf("}\n");
        -:  169:	*/
        3:  170:}
        -:  171:
        -:  172:/*
        -:  173:* Normalize the features of each point using minmax normalization.
        -:  174:*/
        3:  175:void minmax_normalize(DATA_TYPE *min, DATA_TYPE *max, int num_points, Point *points, int num_features) {
        -:  176:
    13011:  177:    for (int i = 0; i < num_points; i++) {
   572352:  178:        for (int j = 0; j < num_features; j++) {
        -:  179:			
   559344:  180:			DATA_TYPE nfeature = (DATA_TYPE) ((points[i].features[j] - min[j])/(max[j] - min[j]));
        -:  181:			
        -:  182:			// in case the normalization returns a NaN or INF
   559344:  183:			if(isnan(nfeature)) nfeature = (DATA_TYPE) 0.0;
   546336:  184:			else if(isinf(nfeature)) nfeature = (DATA_TYPE) 1.0;
        -:  185:			
   559344:  186:			points[i].features[j] = nfeature;
        -:  187:		}
        -:  188:		//show_point(points[i], num_features); 
        -:  189:    }
        3:  190:}
        -:  191:
        -:  192:/*
        -:  193:* Normalize the features of a single point using minmax normalization.
        -:  194:*/
     3246:  195:void minmax_normalize_point(DATA_TYPE *min, DATA_TYPE *max, Point *point, int num_features) {
        -:  196:
   142824:  197:    for (int j = 0; j < num_features; j++) {
        -:  198:			
   139578:  199:		DATA_TYPE nfeature = (DATA_TYPE) ((point->features[j] - min[j])/(max[j] - min[j]));
        -:  200:			
        -:  201:			// in case the normalization returns a NaN or INF
   139578:  202:			if(isnan(nfeature)) nfeature = (DATA_TYPE) 0.0;
   136332:  203:			else if(isinf(nfeature)) nfeature = (DATA_TYPE) 1.0;
        -:  204:			
   139578:  205:			point->features[j] = nfeature;
        -:  206:    }
     3246:  207:}
        -:  208:
