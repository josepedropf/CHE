        -:    0:Source:io.c
        -:    0:Graph:io.gcno
        -:    0:Data:io.gcda
        -:    0:Runs:4
        -:    1:/**
        -:    2:	Functions to read values from .dat files and to generate random data
        -:    3:*/
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <libgen.h>
        -:    9:
        -:   10:#include "io.h"
        -:   11:
    #####:   12:void read_data(int argc, char **argv,
        -:   13:				int *num_points, int *num_classes, int *num_new_points, int *k,
        -:   14:				Point **known_points, Point **new_points,
        -:   15:				char **key, int num_features) {
        -:   16:					
    #####:   17:    if (argc != 2) {
        -:   18:        printf("Need exactly 1 argument, the input file. Usage:\n");
    #####:   19:        printf("\t%s <input_file>\n", argv[0]);
    #####:   20:        exit(EXIT_FAILURE);
        -:   21:    }
        -:   22:	
    #####:   23:    char *filename = argv[1];
        -:   24:	
        -:   25:    printf("Reading data from %s.\n", filename);
        -:   26:	
    #####:   27:    FILE *file = fopen(filename, "r");
    #####:   28:    if (file == NULL) {
        -:   29:        printf("Could not open file %s.\n", filename);
    #####:   30:        exit(EXIT_FAILURE);
        -:   31:    }
        -:   32:
        -:   33:    size_t read;
        -:   34:
        -:   35:    read = fread(num_points, sizeof(*num_points), 1, file);
    #####:   36:    if (read != 1) {
        -:   37:        printf("Could not read num_points data from %s.\n", filename);
    #####:   38:        exit(EXIT_FAILURE);
        -:   39:    }
        -:   40:
        -:   41:    read = fread(num_classes, sizeof(*num_classes), 1, file);
    #####:   42:    if (read != 1) {
        -:   43:        printf("Could not read num_classes data from %s.\n", filename);
    #####:   44:        exit(EXIT_FAILURE);
        -:   45:    }
        -:   46:
        -:   47:    read = fread(num_new_points, sizeof(*num_new_points), 1, file);
    #####:   48:    if (read != 1) {
        -:   49:        printf("Could not read num_new_points data from %s.\n", filename);
    #####:   50:        exit(EXIT_FAILURE);
        -:   51:    }
        -:   52:
        -:   53:    read = fread(k, sizeof(*k), 1, file);
    #####:   54:    if (read != 1) {
        -:   55:        printf("Could not read k data from %s.\n", filename);
    #####:   56:        exit(EXIT_FAILURE);
        -:   57:    }
        -:   58:
    #####:   59:    *known_points = malloc(*num_points * sizeof(**known_points));
    #####:   60:    read = fread(*known_points, sizeof(**known_points), *num_points, file);
    #####:   61:    if (read != (size_t) *num_points) {
        -:   62:        printf("Could not read known_points data from %s.\n", filename);
    #####:   63:        exit(EXIT_FAILURE);
        -:   64:    }
        -:   65:
    #####:   66:    *new_points = malloc(*num_new_points * sizeof(**new_points));
    #####:   67:    read = fread(*new_points, sizeof(**new_points), *num_new_points, file);
    #####:   68:    if (read != (size_t) *num_new_points) {
        -:   69:        printf("Could not read new_points data from %s.\n", filename);
    #####:   70:        exit(EXIT_FAILURE);
        -:   71:    }
        -:   72:
    #####:   73:    *key = malloc(*num_new_points * sizeof(**key));
    #####:   74:    read = fread(*key, sizeof(**key), *num_new_points, file);
    #####:   75:    if (read != (size_t) *num_new_points) {
        -:   76:        printf("Could not read key data from %s.\n", filename);
    #####:   77:        exit(EXIT_FAILURE);
        -:   78:    }
        -:   79:
    #####:   80:    printf("%d-NN, %d classes, %d instances, %d features, %d points to classify\n", *k, *num_classes, *num_points,
        -:   81:           num_features, *num_new_points);
        -:   82:
    #####:   83:    fclose(file);
    #####:   84:}
        -:   85:
    #####:   86:void generate_random_data(int argc, char **argv,
        -:   87:                          int *num_points, int *num_classes, int *num_new_points, int *k,
        -:   88:                          Point **known_points, Point **new_points,
        -:   89:                          char **key, int num_features) {
        -:   90:							  
    #####:   91:    if (argc != 2) {
        -:   92:        printf("Need exactly 1 argument, the dataset random version. Usage:\n");
    #####:   93:        printf("\t%s <d1 | d2 | d3>\n", argv[0]);
    #####:   94:        exit(EXIT_FAILURE);
        -:   95:    }
        -:   96:	
    #####:   97:    char * dup = strdup(argv[1]);
        -:   98:
    #####:   99:    if (strcmp(dup, "d1") == 0) {
        -:  100:		
    #####:  101:        *k = 15;
    #####:  102:        *num_classes = 8;
    #####:  103:        *num_points = 10000;
    #####:  104:        *num_new_points = 100;
        -:  105:
    #####:  106:    } else if (strcmp(dup, "d2") == 0) {
        -:  107:		
    #####:  108:        *k = 15;
    #####:  109:        *num_classes = 8;
    #####:  110:        *num_points = 250000;
    #####:  111:        *num_new_points = 100;
        -:  112:
    #####:  113:    } else if (strcmp(dup, "d3") == 0) {
        -:  114:		
    #####:  115:        *k = 15;
    #####:  116:        *num_classes = 8;
    #####:  117:        *num_points = 1000000;
    #####:  118:		*num_new_points = 100;
        -:  119:		
        -:  120:    } else {
        -:  121:        printf("Could not recognize dataset version %s.\n", dup);
    #####:  122:        exit(EXIT_FAILURE);
        -:  123:    }
        -:  124:	
        -:  125:	printf("Generating data for %s.\n", dup);
    #####:  126:	free(dup);
        -:  127:	
    #####:  128:    *key = NULL;
        -:  129:	
    #####:  130:	*known_points = malloc(*num_points * sizeof(**known_points));
    #####:  131:	initialize_known_points(*num_points, *known_points, *num_classes, num_features);
        -:  132:	
    #####:  133:	*new_points = malloc(*num_new_points * sizeof(**new_points));
    #####:  134:	initialize_new_points(*num_new_points, *new_points, num_features);
        -:  135:	
    #####:  136:	printf("%d-NN, %d classes, %d instances, %d features, %d points to classify\n", *k, *num_classes, *num_points, num_features, *num_new_points);
    #####:  137:}
